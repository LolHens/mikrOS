
kernel:     Dateiformat elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	83 ec 28             	sub    $0x28,%esp
  100016:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  10001a:	66 89 c1             	mov    %ax,%cx
  10001d:	8b 45 08             	mov    0x8(%ebp),%eax
  100020:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100023:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  100027:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  10002b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10002e:	89 c2                	mov    %eax,%edx
  100030:	83 ea 02             	sub    $0x2,%edx
  100033:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100036:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100039:	0f 84 4f 00 00 00    	je     10008e <translate_scancode+0x7e>
  10003f:	e9 00 00 00 00       	jmp    100044 <translate_scancode+0x34>
  100044:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100047:	83 e8 01             	sub    $0x1,%eax
  10004a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10004d:	0f 84 28 00 00 00    	je     10007b <translate_scancode+0x6b>
  100053:	e9 00 00 00 00       	jmp    100058 <translate_scancode+0x48>
  100058:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10005b:	85 c0                	test   %eax,%eax
  10005d:	0f 85 54 00 00 00    	jne    1000b7 <translate_scancode+0xa7>
  100063:	e9 00 00 00 00       	jmp    100068 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100068:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10006c:	8a 0c 05 00 40 10 00 	mov    0x104000(,%eax,1),%cl
  100073:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100076:	e9 3c 00 00 00       	jmp    1000b7 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10007b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10007f:	8a 0c 05 80 40 10 00 	mov    0x104080(,%eax,1),%cl
  100086:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100089:	e9 29 00 00 00       	jmp    1000b7 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10008e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100092:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100097:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10009a:	0f 85 0e 00 00 00    	jne    1000ae <translate_scancode+0x9e>
  1000a0:	e9 00 00 00 00       	jmp    1000a5 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  1000a5:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  1000a9:	e9 04 00 00 00       	jmp    1000b2 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  1000ae:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  1000b2:	e9 00 00 00 00       	jmp    1000b7 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  1000b7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1000bb:	3d 00 00 00 00       	cmp    $0x0,%eax
  1000c0:	0f 85 20 00 00 00    	jne    1000e6 <translate_scancode+0xd6>
  1000c6:	8d 05 30 50 10 00    	lea    0x105030,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1000cc:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1000d0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1000d3:	89 04 24             	mov    %eax,(%esp)
  1000d6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1000da:	89 54 24 08          	mov    %edx,0x8(%esp)
  1000de:	e8 fd 09 00 00       	call   100ae0 <kprintf>
  1000e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1000e6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1000ea:	83 c4 28             	add    $0x28,%esp
  1000ed:	5d                   	pop    %ebp
  1000ee:	c3                   	ret    
  1000ef:	90                   	nop

001000f0 <keyboard_handler>:
}

void keyboard_handler() {    
  1000f0:	55                   	push   %ebp
  1000f1:	89 e5                	mov    %esp,%ebp
  1000f3:	57                   	push   %edi
  1000f4:	56                   	push   %esi
  1000f5:	83 ec 20             	sub    $0x20,%esp
  1000f8:	b8 60 00 00 00       	mov    $0x60,%eax
  uint8_t scancode;
  uint8_t keycode = 0;
  1000fd:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
  int break_code = 0;
  100101:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  100108:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  10010f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100112:	e8 29 02 00 00       	call   100340 <inb>
  100117:	88 45 f7             	mov    %al,-0x9(%ebp)

  if (!init_done) {
  10011a:	81 3d 0c 60 10 00 00 	cmpl   $0x0,0x10600c
  100121:	00 00 00 
  100124:	0f 85 05 00 00 00    	jne    10012f <keyboard_handler+0x3f>
    return;
  10012a:	e9 ff 01 00 00       	jmp    10032e <keyboard_handler+0x23e>
  }

  if ((scancode & 0x80) &&
  10012f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100133:	25 80 00 00 00       	and    $0x80,%eax
  100138:	3d 00 00 00 00       	cmp    $0x0,%eax
  10013d:	0f 84 53 00 00 00    	je     100196 <keyboard_handler+0xa6>
  100143:	81 3d 04 60 10 00 00 	cmpl   $0x0,0x106004
  10014a:	00 00 00 
  10014d:	0f 85 0f 00 00 00    	jne    100162 <keyboard_handler+0x72>
  100153:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100157:	3d e1 00 00 00       	cmp    $0xe1,%eax
  10015c:	0f 84 34 00 00 00    	je     100196 <keyboard_handler+0xa6>
  100162:	81 3d 00 60 10 00 00 	cmpl   $0x0,0x106000
  100169:	00 00 00 
  10016c:	0f 85 0f 00 00 00    	jne    100181 <keyboard_handler+0x91>
  100172:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100176:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10017b:	0f 84 15 00 00 00    	je     100196 <keyboard_handler+0xa6>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  {
      break_code = 1;
  100181:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
      scancode &= ~0x80;
  100188:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10018c:	25 7f ff ff ff       	and    $0xffffff7f,%eax
  100191:	88 c1                	mov    %al,%cl
  100193:	88 4d f7             	mov    %cl,-0x9(%ebp)
  }

  if (e0_code) {
  100196:	81 3d 00 60 10 00 00 	cmpl   $0x0,0x106000
  10019d:	00 00 00 
  1001a0:	0f 84 63 00 00 00    	je     100209 <keyboard_handler+0x119>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  1001a6:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1001aa:	3d 2a 00 00 00       	cmp    $0x2a,%eax
  1001af:	0f 84 0f 00 00 00    	je     1001c4 <keyboard_handler+0xd4>
  1001b5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1001b9:	3d 36 00 00 00       	cmp    $0x36,%eax
  1001be:	0f 85 0f 00 00 00    	jne    1001d3 <keyboard_handler+0xe3>
          e0_code = 0;
  1001c4:	c7 05 00 60 10 00 00 	movl   $0x0,0x106000
  1001cb:	00 00 00 
          return;
  1001ce:	e9 5b 01 00 00       	jmp    10032e <keyboard_handler+0x23e>
  1001d3:	b8 01 00 00 00       	mov    $0x1,%eax
      }
      keycode = translate_scancode(1, scancode);
  1001d8:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1001db:	0f b6 d1             	movzbl %cl,%edx
  1001de:	66 89 d6             	mov    %dx,%si
  1001e1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1001e8:	0f b7 d6             	movzwl %si,%edx
  1001eb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1001ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1001f2:	e8 19 fe ff ff       	call   100010 <translate_scancode>
  1001f7:	88 45 f6             	mov    %al,-0xa(%ebp)
      e0_code = 0;
  1001fa:	c7 05 00 60 10 00 00 	movl   $0x0,0x106000
  100201:	00 00 00 
  } else if (e1_code == 2) {
  100204:	e9 11 01 00 00       	jmp    10031a <keyboard_handler+0x22a>
  100209:	81 3d 04 60 10 00 02 	cmpl   $0x2,0x106004
  100210:	00 00 00 
  100213:	0f 85 53 00 00 00    	jne    10026c <keyboard_handler+0x17c>
  100219:	b8 02 00 00 00       	mov    $0x2,%eax
      e1_prev |= ((uint16_t) scancode << 8);
  10021e:	8a 4d f7             	mov    -0x9(%ebp),%cl
  100221:	0f b6 d1             	movzbl %cl,%edx
  100224:	66 89 d6             	mov    %dx,%si
  100227:	0f b7 d6             	movzwl %si,%edx
  10022a:	c1 e2 08             	shl    $0x8,%edx
  10022d:	0f b7 3d 08 60 10 00 	movzwl 0x106008,%edi
  100234:	09 d7                	or     %edx,%edi
  100236:	66 89 fe             	mov    %di,%si
  100239:	66 89 35 08 60 10 00 	mov    %si,0x106008
      keycode = translate_scancode(2, e1_prev);
  100240:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100247:	0f b7 15 08 60 10 00 	movzwl 0x106008,%edx
  10024e:	89 54 24 04          	mov    %edx,0x4(%esp)
  100252:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100255:	e8 b6 fd ff ff       	call   100010 <translate_scancode>
  10025a:	88 45 f6             	mov    %al,-0xa(%ebp)
      e1_code = 0;
  10025d:	c7 05 04 60 10 00 00 	movl   $0x0,0x106004
  100264:	00 00 00 
  } else if (e1_code == 1) {
  100267:	e9 a9 00 00 00       	jmp    100315 <keyboard_handler+0x225>
  10026c:	81 3d 04 60 10 00 01 	cmpl   $0x1,0x106004
  100273:	00 00 00 
  100276:	0f 85 27 00 00 00    	jne    1002a3 <keyboard_handler+0x1b3>
      e1_prev = scancode;
  10027c:	8a 45 f7             	mov    -0x9(%ebp),%al
  10027f:	0f b6 c8             	movzbl %al,%ecx
  100282:	66 89 ca             	mov    %cx,%dx
  100285:	66 89 15 08 60 10 00 	mov    %dx,0x106008
      e1_code++;
  10028c:	8b 0d 04 60 10 00    	mov    0x106004,%ecx
  100292:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100298:	89 0d 04 60 10 00    	mov    %ecx,0x106004
  } else if (scancode == 0xE0) {
  10029e:	e9 6d 00 00 00       	jmp    100310 <keyboard_handler+0x220>
  1002a3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1002a7:	3d e0 00 00 00       	cmp    $0xe0,%eax
  1002ac:	0f 85 0f 00 00 00    	jne    1002c1 <keyboard_handler+0x1d1>
      e0_code = 1;
  1002b2:	c7 05 00 60 10 00 01 	movl   $0x1,0x106000
  1002b9:	00 00 00 
  } else if (scancode == 0xE1) {
  1002bc:	e9 4a 00 00 00       	jmp    10030b <keyboard_handler+0x21b>
  1002c1:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1002c5:	3d e1 00 00 00       	cmp    $0xe1,%eax
  1002ca:	0f 85 0f 00 00 00    	jne    1002df <keyboard_handler+0x1ef>
      e1_code = 1;
  1002d0:	c7 05 04 60 10 00 01 	movl   $0x1,0x106004
  1002d7:	00 00 00 
  } else {
  1002da:	e9 27 00 00 00       	jmp    100306 <keyboard_handler+0x216>
  1002df:	b8 00 00 00 00       	mov    $0x0,%eax
      keycode = translate_scancode(0, scancode);
  1002e4:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1002e7:	0f b6 d1             	movzbl %cl,%edx
  1002ea:	66 89 d6             	mov    %dx,%si
  1002ed:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1002f4:	0f b7 d6             	movzwl %si,%edx
  1002f7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1002fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1002fe:	e8 0d fd ff ff       	call   100010 <translate_scancode>
  100303:	88 45 f6             	mov    %al,-0xa(%ebp)
  100306:	e9 00 00 00 00       	jmp    10030b <keyboard_handler+0x21b>
  10030b:	e9 00 00 00 00       	jmp    100310 <keyboard_handler+0x220>
  100310:	e9 00 00 00 00       	jmp    100315 <keyboard_handler+0x225>
  100315:	e9 00 00 00 00       	jmp    10031a <keyboard_handler+0x22a>
  }

	if(keycode != 0x0) {
  10031a:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  10031e:	3d 00 00 00 00       	cmp    $0x0,%eax
  100323:	0f 84 05 00 00 00    	je     10032e <keyboard_handler+0x23e>
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
  100329:	e9 00 00 00 00       	jmp    10032e <keyboard_handler+0x23e>
}
  10032e:	83 c4 20             	add    $0x20,%esp
  100331:	5e                   	pop    %esi
  100332:	5f                   	pop    %edi
  100333:	5d                   	pop    %ebp
  100334:	c3                   	ret    
  100335:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10033c:	00 00 00 00 

00100340 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  100340:	50                   	push   %eax
  100341:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
  100346:	66 89 c1             	mov    %ax,%cx
  100349:	66 89 4c 24 02       	mov    %cx,0x2(%esp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  10034e:	66 8b 54 24 02       	mov    0x2(%esp),%dx
  100353:	ec                   	in     (%dx),%al
  100354:	88 44 24 01          	mov    %al,0x1(%esp)
	return result;
  100358:	0f b6 44 24 01       	movzbl 0x1(%esp),%eax
  10035d:	5a                   	pop    %edx
  10035e:	c3                   	ret    
  10035f:	90                   	nop

00100360 <getc>:

char getc() {
	char ret = buffer[0];
  100360:	83 ec 08             	sub    $0x8,%esp
  100363:	a1 10 60 10 00       	mov    0x106010,%eax
  100368:	8a 08                	mov    (%eax),%cl
  10036a:	88 4c 24 07          	mov    %cl,0x7(%esp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10036e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100375:	8b 04 24             	mov    (%esp),%eax
  100378:	3b 05 14 60 10 00    	cmp    0x106014,%eax
  10037e:	0f 8d 29 00 00 00    	jge    1003ad <getc+0x4d>
		buffer[i] = buffer[i+1];	
  100384:	8b 04 24             	mov    (%esp),%eax
  100387:	8b 0d 10 60 10 00    	mov    0x106010,%ecx
  10038d:	8a 54 01 01          	mov    0x1(%ecx,%eax,1),%dl
  100391:	8b 04 24             	mov    (%esp),%eax
  100394:	8b 0d 10 60 10 00    	mov    0x106010,%ecx
  10039a:	88 14 01             	mov    %dl,(%ecx,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10039d:	8b 04 24             	mov    (%esp),%eax
  1003a0:	05 01 00 00 00       	add    $0x1,%eax
  1003a5:	89 04 24             	mov    %eax,(%esp)
  1003a8:	e9 c8 ff ff ff       	jmp    100375 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  1003ad:	a1 14 60 10 00       	mov    0x106014,%eax
  1003b2:	05 ff ff ff ff       	add    $0xffffffff,%eax
  1003b7:	a3 14 60 10 00       	mov    %eax,0x106014

	return ret;
  1003bc:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
  1003c1:	83 c4 08             	add    $0x8,%esp
  1003c4:	c3                   	ret    
  1003c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1003cc:	00 00 00 00 

001003d0 <send_command>:
}

void send_command(uint8_t command) {
  1003d0:	55                   	push   %ebp
  1003d1:	89 e5                	mov    %esp,%ebp
  1003d3:	83 ec 18             	sub    $0x18,%esp
  1003d6:	8a 45 08             	mov    0x8(%ebp),%al
  1003d9:	88 45 ff             	mov    %al,-0x1(%ebp)
  1003dc:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  1003e1:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1003e8:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1003eb:	e8 50 ff ff ff       	call   100340 <inb>
  1003f0:	0f b6 c8             	movzbl %al,%ecx
  1003f3:	81 e1 02 00 00 00    	and    $0x2,%ecx
  1003f9:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  1003ff:	0f 84 05 00 00 00    	je     10040a <send_command+0x3a>
  100405:	e9 d2 ff ff ff       	jmp    1003dc <send_command+0xc>
  10040a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10040f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100416:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10041a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10041e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100421:	e8 0a 00 00 00       	call   100430 <outb>
}
  100426:	83 c4 18             	add    $0x18,%esp
  100429:	5d                   	pop    %ebp
  10042a:	c3                   	ret    
  10042b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100430 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  100430:	50                   	push   %eax
  100431:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
  100436:	66 89 c1             	mov    %ax,%cx
  100439:	8a 54 24 0c          	mov    0xc(%esp),%dl
  10043d:	66 89 4c 24 02       	mov    %cx,0x2(%esp)
  100442:	88 54 24 01          	mov    %dl,0x1(%esp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100446:	8a 44 24 01          	mov    0x1(%esp),%al
  10044a:	66 8b 54 24 02       	mov    0x2(%esp),%dx
  10044f:	ee                   	out    %al,(%dx)
}
  100450:	58                   	pop    %eax
  100451:	c3                   	ret    
  100452:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100459:	1f 84 00 00 00 00 00 

00100460 <init_keyboard_drv>:

void init_keyboard_drv() {
  100460:	55                   	push   %ebp
  100461:	89 e5                	mov    %esp,%ebp
  100463:	83 ec 28             	sub    $0x28,%esp
  100466:	b8 21 00 00 00       	mov    $0x21,%eax
  10046b:	8d 0d f0 00 10 00    	lea    0x1000f0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  100471:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100478:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10047c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10047f:	e8 5c 27 00 00       	call   102be0 <register_intr_handler>
  100484:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100489:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100490:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100493:	e8 a8 fe ff ff       	call   100340 <inb>
  100498:	0f b6 c8             	movzbl %al,%ecx
  10049b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  1004a1:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  1004a7:	0f 84 1c 00 00 00    	je     1004c9 <init_keyboard_drv+0x69>
  1004ad:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  1004b2:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1004b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1004bc:	e8 7f fe ff ff       	call   100340 <inb>
	}
  1004c1:	88 45 f3             	mov    %al,-0xd(%ebp)
  1004c4:	e9 bb ff ff ff       	jmp    100484 <init_keyboard_drv+0x24>
  1004c9:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  1004ce:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  1004d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1004d8:	e8 f3 fe ff ff       	call   1003d0 <send_command>

	init_done = 1;
  1004dd:	c7 05 0c 60 10 00 01 	movl   $0x1,0x10600c
  1004e4:	00 00 00 
}
  1004e7:	83 c4 28             	add    $0x28,%esp
  1004ea:	5d                   	pop    %ebp
  1004eb:	c3                   	ret    
  1004ec:	66 90                	xchg   %ax,%ax
  1004ee:	66 90                	xchg   %ax,%ax

001004f0 <pmm_alloc>:

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  1004f0:	56                   	push   %esi
  1004f1:	83 ec 10             	sub    $0x10,%esp
  1004f4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1004fb:	00 
  1004fc:	81 7c 24 08 00 80 00 	cmpl   $0x8000,0x8(%esp)
  100503:	00 
  100504:	0f 8d c5 00 00 00    	jge    1005cf <pmm_alloc+0xdf>
		if(allocatable[i]) {
  10050a:	8b 44 24 08          	mov    0x8(%esp),%eax
  10050e:	81 3c 85 30 a4 10 00 	cmpl   $0x0,0x10a430(,%eax,4)
  100515:	00 00 00 00 
  100519:	0f 84 99 00 00 00    	je     1005b8 <pmm_alloc+0xc8>
			int s;
			for(s = 0; s < 32; s++) {
  10051f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100526:	00 
  100527:	81 7c 24 04 20 00 00 	cmpl   $0x20,0x4(%esp)
  10052e:	00 
  10052f:	0f 8d 7e 00 00 00    	jge    1005b3 <pmm_alloc+0xc3>
  100535:	b8 01 00 00 00       	mov    $0x1,%eax
				if(allocatable[i] & (1 << s)) {
  10053a:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  10053e:	8b 0c 8d 30 a4 10 00 	mov    0x10a430(,%ecx,4),%ecx
  100545:	8b 54 24 04          	mov    0x4(%esp),%edx
  100549:	89 0c 24             	mov    %ecx,(%esp)
  10054c:	89 d1                	mov    %edx,%ecx
  10054e:	d3 e0                	shl    %cl,%eax
  100550:	8b 14 24             	mov    (%esp),%edx
  100553:	21 c2                	and    %eax,%edx
  100555:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  10055b:	0f 84 3b 00 00 00    	je     10059c <pmm_alloc+0xac>
  100561:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  100566:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  10056a:	d3 e0                	shl    %cl,%eax
  10056c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100571:	8b 54 24 08          	mov    0x8(%esp),%edx
  100575:	8b 34 95 30 a4 10 00 	mov    0x10a430(,%edx,4),%esi
  10057c:	21 c6                	and    %eax,%esi
  10057e:	89 34 95 30 a4 10 00 	mov    %esi,0x10a430(,%edx,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  100585:	8b 44 24 08          	mov    0x8(%esp),%eax
  100589:	c1 e0 05             	shl    $0x5,%eax
  10058c:	03 44 24 04          	add    0x4(%esp),%eax
  100590:	c1 e0 0c             	shl    $0xc,%eax
  100593:	89 44 24 0c          	mov    %eax,0xc(%esp)
  100597:	e9 3b 00 00 00       	jmp    1005d7 <pmm_alloc+0xe7>
				}
			}
  10059c:	e9 00 00 00 00       	jmp    1005a1 <pmm_alloc+0xb1>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  1005a1:	8b 44 24 04          	mov    0x4(%esp),%eax
  1005a5:	05 01 00 00 00       	add    $0x1,%eax
  1005aa:	89 44 24 04          	mov    %eax,0x4(%esp)
  1005ae:	e9 74 ff ff ff       	jmp    100527 <pmm_alloc+0x37>
				if(allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
  1005b3:	e9 00 00 00 00       	jmp    1005b8 <pmm_alloc+0xc8>
	}
  1005b8:	e9 00 00 00 00       	jmp    1005bd <pmm_alloc+0xcd>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  1005bd:	8b 44 24 08          	mov    0x8(%esp),%eax
  1005c1:	05 01 00 00 00       	add    $0x1,%eax
  1005c6:	89 44 24 08          	mov    %eax,0x8(%esp)
  1005ca:	e9 2d ff ff ff       	jmp    1004fc <pmm_alloc+0xc>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  1005cf:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1005d6:	00 
}
  1005d7:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1005db:	83 c4 10             	add    $0x10,%esp
  1005de:	5e                   	pop    %esi
  1005df:	c3                   	ret    

001005e0 <pmm_free>:

void pmm_free(void* addr) {
  1005e0:	56                   	push   %esi
  1005e1:	83 ec 14             	sub    $0x14,%esp
  1005e4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  1005e8:	b9 01 00 00 00       	mov    $0x1,%ecx
  1005ed:	89 44 24 10          	mov    %eax,0x10(%esp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  1005f1:	8b 44 24 10          	mov    0x10(%esp),%eax
  1005f5:	c1 e8 0c             	shr    $0xc,%eax
  1005f8:	89 44 24 0c          	mov    %eax,0xc(%esp)

	uintptr_t s = ptr % 32;
  1005fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
  100600:	25 1f 00 00 00       	and    $0x1f,%eax
  100605:	89 44 24 08          	mov    %eax,0x8(%esp)
	uintptr_t i = ptr / 32;
  100609:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10060d:	c1 e8 05             	shr    $0x5,%eax
  100610:	89 44 24 04          	mov    %eax,0x4(%esp)

	allocatable[i] |= (1 << s);
  100614:	8b 44 24 08          	mov    0x8(%esp),%eax
  100618:	89 0c 24             	mov    %ecx,(%esp)
  10061b:	89 c1                	mov    %eax,%ecx
  10061d:	8b 04 24             	mov    (%esp),%eax
  100620:	d3 e0                	shl    %cl,%eax
  100622:	8b 54 24 04          	mov    0x4(%esp),%edx
  100626:	8b 34 95 30 a4 10 00 	mov    0x10a430(,%edx,4),%esi
  10062d:	09 c6                	or     %eax,%esi
  10062f:	89 34 95 30 a4 10 00 	mov    %esi,0x10a430(,%edx,4)
}
  100636:	83 c4 14             	add    $0x14,%esp
  100639:	5e                   	pop    %esi
  10063a:	c3                   	ret    
  10063b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100640 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100640:	56                   	push   %esi
  100641:	83 ec 14             	sub    $0x14,%esp
  100644:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  100648:	b9 01 00 00 00       	mov    $0x1,%ecx
  10064d:	89 44 24 10          	mov    %eax,0x10(%esp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100651:	8b 44 24 10          	mov    0x10(%esp),%eax
  100655:	c1 e8 0c             	shr    $0xc,%eax
  100658:	89 44 24 0c          	mov    %eax,0xc(%esp)

	uintptr_t s = ptr % 32;
  10065c:	8b 44 24 0c          	mov    0xc(%esp),%eax
  100660:	25 1f 00 00 00       	and    $0x1f,%eax
  100665:	89 44 24 08          	mov    %eax,0x8(%esp)
	uintptr_t i = ptr / 32;
  100669:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10066d:	c1 e8 05             	shr    $0x5,%eax
  100670:	89 44 24 04          	mov    %eax,0x4(%esp)

	allocatable[i] &= ~(1 << s);
  100674:	8b 44 24 08          	mov    0x8(%esp),%eax
  100678:	89 0c 24             	mov    %ecx,(%esp)
  10067b:	89 c1                	mov    %eax,%ecx
  10067d:	8b 04 24             	mov    (%esp),%eax
  100680:	d3 e0                	shl    %cl,%eax
  100682:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100687:	8b 54 24 04          	mov    0x4(%esp),%edx
  10068b:	8b 34 95 30 a4 10 00 	mov    0x10a430(,%edx,4),%esi
  100692:	21 c6                	and    %eax,%esi
  100694:	89 34 95 30 a4 10 00 	mov    %esi,0x10a430(,%edx,4)
}
  10069b:	83 c4 14             	add    $0x14,%esp
  10069e:	5e                   	pop    %esi
  10069f:	c3                   	ret    

001006a0 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  1006a0:	55                   	push   %ebp
  1006a1:	89 e5                	mov    %esp,%ebp
  1006a3:	57                   	push   %edi
  1006a4:	56                   	push   %esi
  1006a5:	83 ec 40             	sub    $0x40,%esp
  1006a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1006ab:	8d 0d 30 a4 10 00    	lea    0x10a430,%ecx
  1006b1:	ba 00 00 00 00       	mov    $0x0,%edx
  1006b6:	be 00 00 02 00       	mov    $0x20000,%esi
  1006bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  1006be:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1006c1:	8b 40 30             	mov    0x30(%eax),%eax
  1006c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);
  1006c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1006ca:	8b 40 30             	mov    0x30(%eax),%eax
  1006cd:	8b 7d f4             	mov    -0xc(%ebp),%edi
  1006d0:	03 47 2c             	add    0x2c(%edi),%eax
  1006d3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	memset(allocatable, 0, sizeof(allocatable));
  1006d6:	89 0c 24             	mov    %ecx,(%esp)
  1006d9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1006e0:	00 
  1006e1:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1006e8:	00 
  1006e9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  1006ec:	89 55 d0             	mov    %edx,-0x30(%ebp)
  1006ef:	e8 7c 26 00 00       	call   102d70 <memset>
  1006f4:	8d 05 56 50 10 00    	lea    0x105056,%eax
  1006fa:	8d 0d 30 a4 10 00    	lea    0x10a430,%ecx
  100700:	89 ca                	mov    %ecx,%edx
  100702:	81 c2 00 00 02 00    	add    $0x20000,%edx

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  100708:	89 04 24             	mov    %eax,(%esp)
  10070b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10070f:	89 54 24 08          	mov    %edx,0x8(%esp)
  100713:	e8 c8 03 00 00       	call   100ae0 <kprintf>
  100718:	89 45 cc             	mov    %eax,-0x34(%ebp)
	 
	while (mmap < mmap_end) {
  10071b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10071e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  100721:	0f 83 60 00 00 00    	jae    100787 <pmm_init+0xe7>
		  if (mmap->mm_type == 1) {
  100727:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10072a:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  100731:	0f 85 40 00 00 00    	jne    100777 <pmm_init+0xd7>
		      uintptr_t addr = mmap->mm_base_addr;
  100737:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10073a:	8b 40 04             	mov    0x4(%eax),%eax
  10073d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  100740:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100743:	8b 49 0c             	mov    0xc(%ecx),%ecx
  100746:	01 c8                	add    %ecx,%eax
  100748:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	 
		      while (addr < end_addr) {
  10074b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10074e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  100751:	0f 83 1b 00 00 00    	jae    100772 <pmm_init+0xd2>
		          pmm_free((void*) addr);
  100757:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10075a:	89 04 24             	mov    %eax,(%esp)
  10075d:	e8 7e fe ff ff       	call   1005e0 <pmm_free>
		          addr += 0x1000;
  100762:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100765:	05 00 10 00 00       	add    $0x1000,%eax
  10076a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		      }
  10076d:	e9 d9 ff ff ff       	jmp    10074b <pmm_init+0xab>
		  }
  100772:	e9 00 00 00 00       	jmp    100777 <pmm_init+0xd7>
		  mmap++;
  100777:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10077a:	05 18 00 00 00       	add    $0x18,%eax
  10077f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	}
  100782:	e9 94 ff ff ff       	jmp    10071b <pmm_init+0x7b>
  100787:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10078d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100790:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  100796:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  100799:	0f 83 1b 00 00 00    	jae    1007ba <pmm_init+0x11a>
		  pmm_mark_used((void*) addr);
  10079f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1007a2:	89 04 24             	mov    %eax,(%esp)
  1007a5:	e8 96 fe ff ff       	call   100640 <pmm_mark_used>
		  addr += 0x1000;
  1007aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1007ad:	05 00 10 00 00       	add    $0x1000,%eax
  1007b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	}
  1007b5:	e9 d6 ff ff ff       	jmp    100790 <pmm_init+0xf0>

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  1007ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1007bd:	8b 40 18             	mov    0x18(%eax),%eax
  1007c0:	89 45 dc             	mov    %eax,-0x24(%ebp)

  pmm_mark_used(mb_info);
  1007c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1007c6:	89 04 24             	mov    %eax,(%esp)
  1007c9:	e8 72 fe ff ff       	call   100640 <pmm_mark_used>
  pmm_mark_used(modules);
  1007ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1007d1:	89 04 24             	mov    %eax,(%esp)
  1007d4:	e8 67 fe ff ff       	call   100640 <pmm_mark_used>

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1007d9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  1007e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1007e3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1007e6:	3b 41 14             	cmp    0x14(%ecx),%eax
  1007e9:	0f 83 59 00 00 00    	jae    100848 <pmm_init+0x1a8>
      addr = (uintptr_t)modules[i].start;
  1007ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1007f2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1007f5:	c1 e0 04             	shl    $0x4,%eax
  1007f8:	01 c1                	add    %eax,%ecx
  1007fa:	8b 01                	mov    (%ecx),%eax
  1007fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  1007ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100802:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  100805:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100808:	c1 e1 04             	shl    $0x4,%ecx
  10080b:	01 ca                	add    %ecx,%edx
  10080d:	8b 4a 04             	mov    0x4(%edx),%ecx
  100810:	39 c8                	cmp    %ecx,%eax
  100812:	0f 83 1b 00 00 00    	jae    100833 <pmm_init+0x193>
          pmm_mark_used((void*) addr);
  100818:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10081b:	89 04 24             	mov    %eax,(%esp)
  10081e:	e8 1d fe ff ff       	call   100640 <pmm_mark_used>
          addr += 0x1000;
  100823:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100826:	05 00 10 00 00       	add    $0x1000,%eax
  10082b:	89 45 e0             	mov    %eax,-0x20(%ebp)
      }
  10082e:	e9 cc ff ff ff       	jmp    1007ff <pmm_init+0x15f>
  }
  100833:	e9 00 00 00 00       	jmp    100838 <pmm_init+0x198>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100838:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10083b:	05 01 00 00 00       	add    $0x1,%eax
  100840:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100843:	e9 98 ff ff ff       	jmp    1007e0 <pmm_init+0x140>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  100848:	83 c4 40             	add    $0x40,%esp
  10084b:	5e                   	pop    %esi
  10084c:	5f                   	pop    %edi
  10084d:	5d                   	pop    %ebp
  10084e:	c3                   	ret    
  10084f:	90                   	nop

00100850 <intr_stub_0>:
  100850:	6a 00                	push   $0x0
  100852:	6a 00                	push   $0x0
  100854:	e9 eb 00 00 00       	jmp    100944 <intr_common_handler>

00100859 <intr_stub_1>:
  100859:	6a 00                	push   $0x0
  10085b:	6a 01                	push   $0x1
  10085d:	e9 e2 00 00 00       	jmp    100944 <intr_common_handler>

00100862 <intr_stub_2>:
  100862:	6a 00                	push   $0x0
  100864:	6a 02                	push   $0x2
  100866:	e9 d9 00 00 00       	jmp    100944 <intr_common_handler>

0010086b <intr_stub_3>:
  10086b:	6a 00                	push   $0x0
  10086d:	6a 03                	push   $0x3
  10086f:	e9 d0 00 00 00       	jmp    100944 <intr_common_handler>

00100874 <intr_stub_4>:
  100874:	6a 00                	push   $0x0
  100876:	6a 04                	push   $0x4
  100878:	e9 c7 00 00 00       	jmp    100944 <intr_common_handler>

0010087d <intr_stub_5>:
  10087d:	6a 00                	push   $0x0
  10087f:	6a 05                	push   $0x5
  100881:	e9 be 00 00 00       	jmp    100944 <intr_common_handler>

00100886 <intr_stub_6>:
  100886:	6a 00                	push   $0x0
  100888:	6a 06                	push   $0x6
  10088a:	e9 b5 00 00 00       	jmp    100944 <intr_common_handler>

0010088f <intr_stub_7>:
  10088f:	6a 00                	push   $0x0
  100891:	6a 07                	push   $0x7
  100893:	e9 ac 00 00 00       	jmp    100944 <intr_common_handler>

00100898 <intr_stub_8>:
  100898:	6a 08                	push   $0x8
  10089a:	e9 a5 00 00 00       	jmp    100944 <intr_common_handler>

0010089f <intr_stub_9>:
  10089f:	6a 00                	push   $0x0
  1008a1:	6a 09                	push   $0x9
  1008a3:	e9 9c 00 00 00       	jmp    100944 <intr_common_handler>

001008a8 <intr_stub_10>:
  1008a8:	6a 0a                	push   $0xa
  1008aa:	e9 95 00 00 00       	jmp    100944 <intr_common_handler>

001008af <intr_stub_11>:
  1008af:	6a 0b                	push   $0xb
  1008b1:	e9 8e 00 00 00       	jmp    100944 <intr_common_handler>

001008b6 <intr_stub_12>:
  1008b6:	6a 0c                	push   $0xc
  1008b8:	e9 87 00 00 00       	jmp    100944 <intr_common_handler>

001008bd <intr_stub_13>:
  1008bd:	6a 0d                	push   $0xd
  1008bf:	e9 80 00 00 00       	jmp    100944 <intr_common_handler>

001008c4 <intr_stub_14>:
  1008c4:	6a 0e                	push   $0xe
  1008c6:	eb 7c                	jmp    100944 <intr_common_handler>

001008c8 <intr_stub_15>:
  1008c8:	6a 00                	push   $0x0
  1008ca:	6a 0f                	push   $0xf
  1008cc:	eb 76                	jmp    100944 <intr_common_handler>

001008ce <intr_stub_16>:
  1008ce:	6a 00                	push   $0x0
  1008d0:	6a 10                	push   $0x10
  1008d2:	eb 70                	jmp    100944 <intr_common_handler>

001008d4 <intr_stub_17>:
  1008d4:	6a 11                	push   $0x11
  1008d6:	eb 6c                	jmp    100944 <intr_common_handler>

001008d8 <intr_stub_18>:
  1008d8:	6a 00                	push   $0x0
  1008da:	6a 12                	push   $0x12
  1008dc:	eb 66                	jmp    100944 <intr_common_handler>

001008de <intr_stub_32>:
  1008de:	6a 00                	push   $0x0
  1008e0:	6a 20                	push   $0x20
  1008e2:	eb 60                	jmp    100944 <intr_common_handler>

001008e4 <intr_stub_33>:
  1008e4:	6a 00                	push   $0x0
  1008e6:	6a 21                	push   $0x21
  1008e8:	eb 5a                	jmp    100944 <intr_common_handler>

001008ea <intr_stub_34>:
  1008ea:	6a 00                	push   $0x0
  1008ec:	6a 22                	push   $0x22
  1008ee:	eb 54                	jmp    100944 <intr_common_handler>

001008f0 <intr_stub_35>:
  1008f0:	6a 00                	push   $0x0
  1008f2:	6a 23                	push   $0x23
  1008f4:	eb 4e                	jmp    100944 <intr_common_handler>

001008f6 <intr_stub_36>:
  1008f6:	6a 00                	push   $0x0
  1008f8:	6a 24                	push   $0x24
  1008fa:	eb 48                	jmp    100944 <intr_common_handler>

001008fc <intr_stub_37>:
  1008fc:	6a 00                	push   $0x0
  1008fe:	6a 25                	push   $0x25
  100900:	eb 42                	jmp    100944 <intr_common_handler>

00100902 <intr_stub_38>:
  100902:	6a 00                	push   $0x0
  100904:	6a 26                	push   $0x26
  100906:	eb 3c                	jmp    100944 <intr_common_handler>

00100908 <intr_stub_39>:
  100908:	6a 00                	push   $0x0
  10090a:	6a 27                	push   $0x27
  10090c:	eb 36                	jmp    100944 <intr_common_handler>

0010090e <intr_stub_40>:
  10090e:	6a 00                	push   $0x0
  100910:	6a 28                	push   $0x28
  100912:	eb 30                	jmp    100944 <intr_common_handler>

00100914 <intr_stub_41>:
  100914:	6a 00                	push   $0x0
  100916:	6a 29                	push   $0x29
  100918:	eb 2a                	jmp    100944 <intr_common_handler>

0010091a <intr_stub_42>:
  10091a:	6a 00                	push   $0x0
  10091c:	6a 2a                	push   $0x2a
  10091e:	eb 24                	jmp    100944 <intr_common_handler>

00100920 <intr_stub_43>:
  100920:	6a 00                	push   $0x0
  100922:	6a 2b                	push   $0x2b
  100924:	eb 1e                	jmp    100944 <intr_common_handler>

00100926 <intr_stub_44>:
  100926:	6a 00                	push   $0x0
  100928:	6a 2c                	push   $0x2c
  10092a:	eb 18                	jmp    100944 <intr_common_handler>

0010092c <intr_stub_45>:
  10092c:	6a 00                	push   $0x0
  10092e:	6a 2d                	push   $0x2d
  100930:	eb 12                	jmp    100944 <intr_common_handler>

00100932 <intr_stub_46>:
  100932:	6a 00                	push   $0x0
  100934:	6a 2e                	push   $0x2e
  100936:	eb 0c                	jmp    100944 <intr_common_handler>

00100938 <intr_stub_47>:
  100938:	6a 00                	push   $0x0
  10093a:	6a 2f                	push   $0x2f
  10093c:	eb 06                	jmp    100944 <intr_common_handler>

0010093e <intr_stub_48>:
  10093e:	6a 00                	push   $0x0
  100940:	6a 30                	push   $0x30
  100942:	eb 00                	jmp    100944 <intr_common_handler>

00100944 <intr_common_handler>:
  100944:	55                   	push   %ebp
  100945:	57                   	push   %edi
  100946:	56                   	push   %esi
  100947:	52                   	push   %edx
  100948:	51                   	push   %ecx
  100949:	53                   	push   %ebx
  10094a:	50                   	push   %eax
  10094b:	66 b8 10 00          	mov    $0x10,%ax
  10094f:	66 8e d8             	mov    %ax,%ds
  100952:	66 8e c0             	mov    %ax,%es
  100955:	89 e0                	mov    %esp,%eax
  100957:	bc 30 a4 10 00       	mov    $0x10a430,%esp
  10095c:	50                   	push   %eax
  10095d:	e8 be 22 00 00       	call   102c20 <handle_interrupt>
  100962:	89 c4                	mov    %eax,%esp
  100964:	66 b8 23 00          	mov    $0x23,%ax
  100968:	66 8e d8             	mov    %ax,%ds
  10096b:	66 8e c0             	mov    %ax,%es
  10096e:	58                   	pop    %eax
  10096f:	5b                   	pop    %ebx
  100970:	59                   	pop    %ecx
  100971:	5a                   	pop    %edx
  100972:	5e                   	pop    %esi
  100973:	5f                   	pop    %edi
  100974:	5d                   	pop    %ebp
  100975:	83 c4 08             	add    $0x8,%esp
  100978:	cf                   	iret   
  100979:	66 90                	xchg   %ax,%ax
  10097b:	66 90                	xchg   %ax,%ax
  10097d:	66 90                	xchg   %ax,%ax
  10097f:	90                   	nop

00100980 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu) {
  100980:	55                   	push   %ebp
  100981:	89 e5                	mov    %esp,%ebp
  100983:	53                   	push   %ebx
  100984:	57                   	push   %edi
  100985:	56                   	push   %esi
  100986:	83 ec 3c             	sub    $0x3c,%esp
  100989:	8b 45 08             	mov    0x8(%ebp),%eax
  10098c:	8d 0d 6c 50 10 00    	lea    0x10506c,%ecx
  100992:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf ("          '''  \\   `-._.'`---^_))) \n");
  kprintf ("                `-._ )))       ``` \n");
  kprintf ("                     ```            \n");
  #endif
  
  kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  100995:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100998:	8b 40 1c             	mov    0x1c(%eax),%eax
  10099b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10099e:	8b 52 20             	mov    0x20(%edx),%edx
  1009a1:	89 0c 24             	mov    %ecx,(%esp)
  1009a4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009a8:	89 54 24 08          	mov    %edx,0x8(%esp)
  1009ac:	e8 2f 01 00 00       	call   100ae0 <kprintf>
  1009b1:	8d 0d 90 50 10 00    	lea    0x105090,%ecx

  kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  1009b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1009ba:	8b 12                	mov    (%edx),%edx
  1009bc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1009bf:	8b 76 04             	mov    0x4(%esi),%esi
  1009c2:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1009c5:	8b 7f 08             	mov    0x8(%edi),%edi
  1009c8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1009cb:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  1009ce:	89 0c 24             	mov    %ecx,(%esp)
  1009d1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1009d5:	89 74 24 08          	mov    %esi,0x8(%esp)
  1009d9:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1009dd:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1009e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1009e4:	e8 f7 00 00 00       	call   100ae0 <kprintf>
  1009e9:	8d 0d b1 50 10 00    	lea    0x1050b1,%ecx
  kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  1009ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1009f2:	8b 52 10             	mov    0x10(%edx),%edx
  1009f5:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1009f8:	8b 76 14             	mov    0x14(%esi),%esi
  1009fb:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1009fe:	8b 7f 18             	mov    0x18(%edi),%edi
  100a01:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  100a04:	8b 5b 24             	mov    0x24(%ebx),%ebx
  100a07:	89 0c 24             	mov    %ecx,(%esp)
  100a0a:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a0e:	89 74 24 08          	mov    %esi,0x8(%esp)
  100a12:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  100a16:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  100a1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100a1d:	e8 be 00 00 00       	call   100ae0 <kprintf>
  100a22:	8d 0d d2 50 10 00    	lea    0x1050d2,%ecx
  kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  100a28:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100a2b:	8b 52 28             	mov    0x28(%edx),%edx
  100a2e:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100a31:	8b 76 2c             	mov    0x2c(%esi),%esi
  100a34:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100a37:	8b 7f 30             	mov    0x30(%edi),%edi
  100a3a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  100a3d:	8b 5b 34             	mov    0x34(%ebx),%ebx
  100a40:	89 0c 24             	mov    %ecx,(%esp)
  100a43:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a47:	89 74 24 08          	mov    %esi,0x8(%esp)
  100a4b:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  100a4f:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  100a53:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100a56:	e8 85 00 00 00       	call   100ae0 <kprintf>
  100a5b:	8d 0d f4 50 10 00    	lea    0x1050f4,%ecx

  uint32_t cr2 = 0;
  100a61:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  asm volatile("mov %%cr2, %0" : "=r" (cr2));
  100a68:	0f 20 d2             	mov    %cr2,%edx
  100a6b:	89 55 ec             	mov    %edx,-0x14(%ebp)

  kprintf("CR2: %x \n", cr2);
  100a6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100a71:	89 0c 24             	mov    %ecx,(%esp)
  100a74:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a78:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100a7b:	e8 60 00 00 00       	call   100ae0 <kprintf>
  100a80:	89 45 d8             	mov    %eax,-0x28(%ebp)

  while(1) {
    asm volatile("cli; hlt");
  100a83:	fa                   	cli    
  100a84:	f4                   	hlt    
  }
  100a85:	e9 f9 ff ff ff       	jmp    100a83 <show_cod+0x103>
  100a8a:	66 90                	xchg   %ax,%ax
  100a8c:	66 90                	xchg   %ax,%ax
  100a8e:	66 90                	xchg   %ax,%ax

00100a90 <clrscr>:
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100a90:	50                   	push   %eax
  100a91:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100a98:	81 3c 24 a0 0f 00 00 	cmpl   $0xfa0,(%esp)
  100a9f:	0f 8d 1d 00 00 00    	jge    100ac2 <clrscr+0x32>
        video[i] = 0;
  100aa5:	8b 04 24             	mov    (%esp),%eax
  100aa8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100aae:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100ab2:	8b 04 24             	mov    (%esp),%eax
  100ab5:	05 01 00 00 00       	add    $0x1,%eax
  100aba:	89 04 24             	mov    %eax,(%esp)
  100abd:	e9 d6 ff ff ff       	jmp    100a98 <clrscr+0x8>
        video[i] = 0;
    }

    x = y = 0;
  100ac2:	c7 05 18 60 10 00 00 	movl   $0x0,0x106018
  100ac9:	00 00 00 
  100acc:	c7 05 1c 60 10 00 00 	movl   $0x0,0x10601c
  100ad3:	00 00 00 
}
  100ad6:	58                   	pop    %eax
  100ad7:	c3                   	ret    
  100ad8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100adf:	00 

00100ae0 <kprintf>:

int kprintf(const char* fmt, ...)
{
  100ae0:	55                   	push   %ebp
  100ae1:	89 e5                	mov    %esp,%ebp
  100ae3:	83 ec 58             	sub    $0x58,%esp
  100ae6:	8b 45 08             	mov    0x8(%ebp),%eax
  100ae9:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  100aec:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100aef:	8d 45 0c             	lea    0xc(%ebp),%eax
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  100af2:	89 01                	mov    %eax,(%ecx)
  kprintf_res = 0;
  100af4:	c7 05 20 60 10 00 00 	movl   $0x0,0x106020
  100afb:	00 00 00 
  while (*fmt) {
  100afe:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b01:	80 38 00             	cmpb   $0x0,(%eax)
  100b04:	0f 84 dd 01 00 00    	je     100ce7 <kprintf+0x207>
    if (*fmt == '%') {
  100b0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b0d:	0f be 00             	movsbl (%eax),%eax
  100b10:	3d 25 00 00 00       	cmp    $0x25,%eax
  100b15:	0f 85 ae 01 00 00    	jne    100cc9 <kprintf+0x1e9>
      fmt++;
  100b1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b1e:	89 c1                	mov    %eax,%ecx
  100b20:	41                   	inc    %ecx
  100b21:	89 4d fc             	mov    %ecx,-0x4(%ebp)
      switch (*fmt) {
  100b24:	0f be 40 01          	movsbl 0x1(%eax),%eax
  100b28:	89 c1                	mov    %eax,%ecx
  100b2a:	83 e9 24             	sub    $0x24,%ecx
  100b2d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100b30:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100b33:	0f 87 15 00 00 00    	ja     100b4e <kprintf+0x6e>
  100b39:	e9 00 00 00 00       	jmp    100b3e <kprintf+0x5e>
  100b3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b41:	85 c0                	test   %eax,%eax
  100b43:	0f 84 54 01 00 00    	je     100c9d <kprintf+0x1bd>
  100b49:	e9 54 01 00 00       	jmp    100ca2 <kprintf+0x1c2>
  100b4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b51:	83 e8 62             	sub    $0x62,%eax
  100b54:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100b57:	0f 87 19 00 00 00    	ja     100b76 <kprintf+0x96>
  100b5d:	e9 00 00 00 00       	jmp    100b62 <kprintf+0x82>
  100b62:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b65:	83 e8 25             	sub    $0x25,%eax
  100b68:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100b6b:	0f 84 13 01 00 00    	je     100c84 <kprintf+0x1a4>
  100b71:	e9 2c 01 00 00       	jmp    100ca2 <kprintf+0x1c2>
  100b76:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b79:	83 e8 6f             	sub    $0x6f,%eax
  100b7c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100b7f:	0f 87 2d 00 00 00    	ja     100bb2 <kprintf+0xd2>
  100b85:	e9 00 00 00 00       	jmp    100b8a <kprintf+0xaa>
  100b8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b8d:	83 e8 63             	sub    $0x63,%eax
  100b90:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100b93:	0f 84 c5 00 00 00    	je     100c5e <kprintf+0x17e>
  100b99:	e9 00 00 00 00       	jmp    100b9e <kprintf+0xbe>
  100b9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ba1:	83 e8 64             	sub    $0x64,%eax
  100ba4:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100ba7:	0f 84 4b 00 00 00    	je     100bf8 <kprintf+0x118>
  100bad:	e9 f0 00 00 00       	jmp    100ca2 <kprintf+0x1c2>
  100bb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100bb5:	83 c0 90             	add    $0xffffff90,%eax
  100bb8:	89 c1                	mov    %eax,%ecx
  100bba:	83 e9 08             	sub    $0x8,%ecx
  100bbd:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100bc0:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100bc3:	0f 87 d9 00 00 00    	ja     100ca2 <kprintf+0x1c2>
  100bc9:	8b 45 cc             	mov    -0x34(%ebp),%eax
  100bcc:	8b 0c 85 00 50 10 00 	mov    0x105000(,%eax,4),%ecx
  100bd3:	ff e1                	jmp    *%ecx
        case 's':
          s = va_arg(ap, char*);
  100bd5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100bd8:	89 c1                	mov    %eax,%ecx
  100bda:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100be0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100be3:	8b 00                	mov    (%eax),%eax
  100be5:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  100be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100beb:	89 04 24             	mov    %eax,(%esp)
  100bee:	e8 0d 01 00 00       	call   100d00 <kputs>
          break;
  100bf3:	e9 cc 00 00 00       	jmp    100cc4 <kprintf+0x1e4>
  100bf8:	b8 0a 00 00 00       	mov    $0xa,%eax
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  100bfd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100c00:	89 ca                	mov    %ecx,%edx
  100c02:	81 c2 04 00 00 00    	add    $0x4,%edx
  100c08:	89 55 f8             	mov    %edx,-0x8(%ebp)
  100c0b:	8b 09                	mov    (%ecx),%ecx
  100c0d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 10);
  100c10:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100c13:	89 0c 24             	mov    %ecx,(%esp)
  100c16:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100c1d:	00 
  100c1e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100c21:	e8 1a 01 00 00       	call   100d40 <kputn>
          break;
  100c26:	e9 99 00 00 00       	jmp    100cc4 <kprintf+0x1e4>
  100c2b:	b8 10 00 00 00       	mov    $0x10,%eax
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  100c30:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100c33:	89 ca                	mov    %ecx,%edx
  100c35:	81 c2 04 00 00 00    	add    $0x4,%edx
  100c3b:	89 55 f8             	mov    %edx,-0x8(%ebp)
  100c3e:	8b 09                	mov    (%ecx),%ecx
  100c40:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 16);
  100c43:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100c46:	89 0c 24             	mov    %ecx,(%esp)
  100c49:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  100c50:	00 
  100c51:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100c54:	e8 e7 00 00 00       	call   100d40 <kputn>
          break;
  100c59:	e9 66 00 00 00       	jmp    100cc4 <kprintf+0x1e4>
        case 'c':
          c = va_arg(ap, int);
  100c5e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100c61:	89 c1                	mov    %eax,%ecx
  100c63:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100c69:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100c6c:	8b 00                	mov    (%eax),%eax
  100c6e:	88 c2                	mov    %al,%dl
  100c70:	88 55 ef             	mov    %dl,-0x11(%ebp)
          kputc(c);
  100c73:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100c77:	89 04 24             	mov    %eax,(%esp)
  100c7a:	e8 61 01 00 00       	call   100de0 <kputc>
          break;
  100c7f:	e9 40 00 00 00       	jmp    100cc4 <kprintf+0x1e4>
  100c84:	b8 25 00 00 00       	mov    $0x25,%eax
        case '%':
          kputc('%');
  100c89:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100c90:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100c93:	e8 48 01 00 00       	call   100de0 <kputc>
          break;
  100c98:	e9 27 00 00 00       	jmp    100cc4 <kprintf+0x1e4>
        case '\0':
          goto out;
  100c9d:	e9 4a 00 00 00       	jmp    100cec <kprintf+0x20c>
  100ca2:	b8 25 00 00 00       	mov    $0x25,%eax
        default:
          kputc('%');
  100ca7:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100cae:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100cb1:	e8 2a 01 00 00       	call   100de0 <kputc>
          kputc(*fmt);
  100cb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100cb9:	0f be 00             	movsbl (%eax),%eax
  100cbc:	89 04 24             	mov    %eax,(%esp)
  100cbf:	e8 1c 01 00 00       	call   100de0 <kputc>
          break;
      }
    } else {
  100cc4:	e9 0e 00 00 00       	jmp    100cd7 <kprintf+0x1f7>
      kputc(*fmt);
  100cc9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100ccc:	0f be 00             	movsbl (%eax),%eax
  100ccf:	89 04 24             	mov    %eax,(%esp)
  100cd2:	e8 09 01 00 00       	call   100de0 <kputc>
    }

    fmt++;
  100cd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100cda:	05 01 00 00 00       	add    $0x1,%eax
  100cdf:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  100ce2:	e9 17 fe ff ff       	jmp    100afe <kprintf+0x1e>
  100ce7:	e9 00 00 00 00       	jmp    100cec <kprintf+0x20c>

out:
  va_end(ap);

  return kprintf_res;
  100cec:	a1 20 60 10 00       	mov    0x106020,%eax
  100cf1:	83 c4 58             	add    $0x58,%esp
  100cf4:	5d                   	pop    %ebp
  100cf5:	c3                   	ret    
  100cf6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100cfd:	00 00 00 

00100d00 <kputs>:
    x++;
    kprintf_res++;
}

static void kputs(const char* s)
{
  100d00:	55                   	push   %ebp
  100d01:	89 e5                	mov    %esp,%ebp
  100d03:	83 ec 08             	sub    $0x8,%esp
  100d06:	8b 45 08             	mov    0x8(%ebp),%eax
  100d09:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  100d0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100d0f:	80 38 00             	cmpb   $0x0,(%eax)
  100d12:	0f 84 1e 00 00 00    	je     100d36 <kputs+0x36>
        kputc(*s++);
  100d18:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100d1b:	89 c1                	mov    %eax,%ecx
  100d1d:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100d23:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100d26:	0f be 00             	movsbl (%eax),%eax
  100d29:	89 04 24             	mov    %eax,(%esp)
  100d2c:	e8 af 00 00 00       	call   100de0 <kputc>
    }
  100d31:	e9 d6 ff ff ff       	jmp    100d0c <kputs+0xc>
}
  100d36:	83 c4 08             	add    $0x8,%esp
  100d39:	5d                   	pop    %ebp
  100d3a:	c3                   	ret    
  100d3b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100d40 <kputn>:

static void kputn(unsigned long x, int base)
{
  100d40:	55                   	push   %ebp
  100d41:	89 e5                	mov    %esp,%ebp
  100d43:	53                   	push   %ebx
  100d44:	56                   	push   %esi
  100d45:	83 ec 60             	sub    $0x60,%esp
  100d48:	8b 45 0c             	mov    0xc(%ebp),%eax
  100d4b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100d4e:	8d 15 fe 50 10 00    	lea    0x1050fe,%edx
  100d54:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  100d57:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  100d5a:	89 55 a8             	mov    %edx,-0x58(%ebp)
    char* p;

    if (base > 36) {
  100d5d:	81 7d f0 24 00 00 00 	cmpl   $0x24,-0x10(%ebp)
  100d64:	0f 8e 05 00 00 00    	jle    100d6f <kputn+0x2f>
        return;
  100d6a:	e9 62 00 00 00       	jmp    100dd1 <kputn+0x91>
  100d6f:	8d 45 af             	lea    -0x51(%ebp),%eax
    }

    p = buf + 64;
  100d72:	05 40 00 00 00       	add    $0x40,%eax
  100d77:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *p = '\0';
  100d7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  100d7d:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  100d80:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100d83:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100d86:	8b 55 a8             	mov    -0x58(%ebp),%edx
  100d89:	31 f6                	xor    %esi,%esi
  100d8b:	89 55 a0             	mov    %edx,-0x60(%ebp)
  100d8e:	89 f2                	mov    %esi,%edx
  100d90:	f7 f1                	div    %ecx
  100d92:	8b 45 a0             	mov    -0x60(%ebp),%eax
  100d95:	8a 1c 10             	mov    (%eax,%edx,1),%bl
  100d98:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  100d9b:	89 c1                	mov    %eax,%ecx
  100d9d:	49                   	dec    %ecx
  100d9e:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  100da1:	88 58 ff             	mov    %bl,-0x1(%eax)
        x /= base;
  100da4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100da7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100daa:	89 45 9c             	mov    %eax,-0x64(%ebp)
  100dad:	89 c8                	mov    %ecx,%eax
  100daf:	89 f2                	mov    %esi,%edx
  100db1:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  100db4:	f7 f1                	div    %ecx
  100db6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    } while (x);
  100db9:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  100dc0:	0f 85 ba ff ff ff    	jne    100d80 <kputn+0x40>
    kputs(p);
  100dc6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  100dc9:	89 04 24             	mov    %eax,(%esp)
  100dcc:	e8 2f ff ff ff       	call   100d00 <kputs>
}
  100dd1:	83 c4 60             	add    $0x60,%esp
  100dd4:	5e                   	pop    %esi
  100dd5:	5b                   	pop    %ebx
  100dd6:	5d                   	pop    %ebp
  100dd7:	c3                   	ret    
  100dd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100ddf:	00 

00100de0 <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  100de0:	83 ec 08             	sub    $0x8,%esp
  100de3:	8a 44 24 0c          	mov    0xc(%esp),%al
  100de7:	88 44 24 07          	mov    %al,0x7(%esp)
    if ((c == '\n') || (x > 79)) {
  100deb:	0f be 4c 24 07       	movsbl 0x7(%esp),%ecx
  100df0:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  100df6:	0f 84 10 00 00 00    	je     100e0c <kputc+0x2c>
  100dfc:	81 3d 1c 60 10 00 4f 	cmpl   $0x4f,0x10601c
  100e03:	00 00 00 
  100e06:	0f 8e 19 00 00 00    	jle    100e25 <kputc+0x45>
        x = 0;
  100e0c:	c7 05 1c 60 10 00 00 	movl   $0x0,0x10601c
  100e13:	00 00 00 
        y++;
  100e16:	a1 18 60 10 00       	mov    0x106018,%eax
  100e1b:	05 01 00 00 00       	add    $0x1,%eax
  100e20:	a3 18 60 10 00       	mov    %eax,0x106018
    }

    if (c == '\n') {
  100e25:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
  100e2a:	3d 0a 00 00 00       	cmp    $0xa,%eax
  100e2f:	0f 85 05 00 00 00    	jne    100e3a <kputc+0x5a>
        return;
  100e35:	e9 f0 00 00 00       	jmp    100f2a <kputc+0x14a>
    }

    if (y > 24) {
  100e3a:	81 3d 18 60 10 00 18 	cmpl   $0x18,0x106018
  100e41:	00 00 00 
  100e44:	0f 8e 7e 00 00 00    	jle    100ec8 <kputc+0xe8>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100e4a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100e51:	81 3c 24 00 0f 00 00 	cmpl   $0xf00,(%esp)
  100e58:	0f 8d 2c 00 00 00    	jge    100e8a <kputc+0xaa>
            video[i] = video[i + 160];
  100e5e:	8b 04 24             	mov    (%esp),%eax
  100e61:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e67:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  100e6e:	8b 04 24             	mov    (%esp),%eax
  100e71:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e77:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100e7a:	8b 04 24             	mov    (%esp),%eax
  100e7d:	05 01 00 00 00       	add    $0x1,%eax
  100e82:	89 04 24             	mov    %eax,(%esp)
  100e85:	e9 c7 ff ff ff       	jmp    100e51 <kputc+0x71>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100e8a:	e9 00 00 00 00       	jmp    100e8f <kputc+0xaf>
  100e8f:	81 3c 24 a0 0f 00 00 	cmpl   $0xfa0,(%esp)
  100e96:	0f 8d 1d 00 00 00    	jge    100eb9 <kputc+0xd9>
            video[i] = 0;
  100e9c:	8b 04 24             	mov    (%esp),%eax
  100e9f:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100ea5:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100ea9:	8b 04 24             	mov    (%esp),%eax
  100eac:	05 01 00 00 00       	add    $0x1,%eax
  100eb1:	89 04 24             	mov    %eax,(%esp)
  100eb4:	e9 d6 ff ff ff       	jmp    100e8f <kputc+0xaf>
            video[i] = 0;
        }
        y--;
  100eb9:	a1 18 60 10 00       	mov    0x106018,%eax
  100ebe:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100ec3:	a3 18 60 10 00       	mov    %eax,0x106018
    }

    video[2 * (y * 80 + x)] = c;
  100ec8:	8a 44 24 07          	mov    0x7(%esp),%al
  100ecc:	69 0d 18 60 10 00 50 	imul   $0x50,0x106018,%ecx
  100ed3:	00 00 00 
  100ed6:	03 0d 1c 60 10 00    	add    0x10601c,%ecx
  100edc:	c1 e1 01             	shl    $0x1,%ecx
  100edf:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100ee5:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = 0x07;
  100ee8:	69 0d 18 60 10 00 50 	imul   $0x50,0x106018,%ecx
  100eef:	00 00 00 
  100ef2:	03 0d 1c 60 10 00    	add    0x10601c,%ecx
  100ef8:	c1 e1 01             	shl    $0x1,%ecx
  100efb:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100f01:	c6 44 0a 01 07       	movb   $0x7,0x1(%edx,%ecx,1)

    x++;
  100f06:	8b 0d 1c 60 10 00    	mov    0x10601c,%ecx
  100f0c:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100f12:	89 0d 1c 60 10 00    	mov    %ecx,0x10601c
    kprintf_res++;
  100f18:	8b 0d 20 60 10 00    	mov    0x106020,%ecx
  100f1e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100f24:	89 0d 20 60 10 00    	mov    %ecx,0x106020
}
  100f2a:	83 c4 08             	add    $0x8,%esp
  100f2d:	c3                   	ret    
  100f2e:	66 90                	xchg   %ax,%ax

00100f30 <syscall>:
#include "elf.h"
#include "vmm.h"
#include "idt.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  100f30:	55                   	push   %ebp
  100f31:	89 e5                	mov    %esp,%ebp
  100f33:	83 ec 08             	sub    $0x8,%esp
  100f36:	8b 45 08             	mov    0x8(%ebp),%eax
  100f39:	89 45 fc             	mov    %eax,-0x4(%ebp)
  switch (cpu->eax) {
  100f3c:	8b 00                	mov    (%eax),%eax
  100f3e:	85 c0                	test   %eax,%eax
  100f40:	0f 85 13 00 00 00    	jne    100f59 <syscall+0x29>
  100f46:	e9 00 00 00 00       	jmp    100f4b <syscall+0x1b>
    case 0: /* free_cpu */
      cpu = schedule(cpu);
  100f4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f4e:	89 04 24             	mov    %eax,(%esp)
  100f51:	e8 2a 21 00 00       	call   103080 <schedule>
  100f56:	89 45 fc             	mov    %eax,-0x4(%ebp)
      break;
  }

  return cpu;
  100f59:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f5c:	83 c4 08             	add    $0x8,%esp
  100f5f:	5d                   	pop    %ebp
  100f60:	c3                   	ret    
  100f61:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100f68:	0f 1f 84 00 00 00 00 
  100f6f:	00 

00100f70 <init_elf>:
}

void init_elf(void* image)
{
  100f70:	55                   	push   %ebp
  100f71:	89 e5                	mov    %esp,%ebp
  100f73:	83 ec 38             	sub    $0x38,%esp
  100f76:	8b 45 08             	mov    0x8(%ebp),%eax
  100f79:	89 45 fc             	mov    %eax,-0x4(%ebp)
    /*
     * FIXME Wir muessen eigentlich die Laenge vom Image pruefen, damit wir bei
     * korrupten ELF-Dateien nicht ueber das Dateiende hinauslesen.
     */
 
    struct elf_header* header = image;
  100f7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct elf_program_header* ph;
    int i;
 
    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  100f82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f85:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  100f8b:	0f 84 16 00 00 00    	je     100fa7 <init_elf+0x37>
  100f91:	8d 05 23 51 10 00    	lea    0x105123,%eax
        kprintf("Keine gueltige ELF-Magic!\n");
  100f97:	89 04 24             	mov    %eax,(%esp)
  100f9a:	e8 41 fb ff ff       	call   100ae0 <kprintf>
        return;
  100f9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100fa2:	e9 aa 00 00 00       	jmp    101051 <init_elf+0xe1>
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
  100fa7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100faa:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100fad:	03 41 1c             	add    0x1c(%ecx),%eax
  100fb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100fb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100fba:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fbd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100fc0:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  100fc4:	39 c8                	cmp    %ecx,%eax
  100fc6:	0f 8d 85 00 00 00    	jge    101051 <init_elf+0xe1>
        void* dest = (void*) ph->virt_addr;
  100fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100fcf:	8b 40 08             	mov    0x8(%eax),%eax
  100fd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        void* src = ((char*) image) + ph->offset;
  100fd5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100fd8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100fdb:	03 41 04             	add    0x4(%ecx),%eax
  100fde:	89 45 e8             	mov    %eax,-0x18(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  100fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100fe4:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  100fea:	0f 84 05 00 00 00    	je     100ff5 <init_elf+0x85>
            continue;
  100ff0:	e9 41 00 00 00       	jmp    101036 <init_elf+0xc6>
  100ff5:	b8 00 00 00 00       	mov    $0x0,%eax
        }
 
        memset(dest, 0, ph->mem_size);
  100ffa:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100ffd:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101000:	8b 52 14             	mov    0x14(%edx),%edx
  101003:	89 0c 24             	mov    %ecx,(%esp)
  101006:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10100d:	00 
  10100e:	89 54 24 08          	mov    %edx,0x8(%esp)
  101012:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101015:	e8 56 1d 00 00       	call   102d70 <memset>
        memcpy(dest, src, ph->file_size);
  10101a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10101d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  101020:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101023:	8b 52 10             	mov    0x10(%edx),%edx
  101026:	89 04 24             	mov    %eax,(%esp)
  101029:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10102d:	89 54 24 08          	mov    %edx,0x8(%esp)
  101031:	e8 9a 1d 00 00       	call   102dd0 <memcpy>
        kprintf("Keine gueltige ELF-Magic!\n");
        return;
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  101036:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101039:	05 01 00 00 00       	add    $0x1,%eax
  10103e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101041:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101044:	05 20 00 00 00       	add    $0x20,%eax
  101049:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10104c:	e9 69 ff ff ff       	jmp    100fba <init_elf+0x4a>
        memset(dest, 0, ph->mem_size);
        memcpy(dest, src, ph->file_size);
    }
 
    //init_task((void*) header->entry);
}
  101051:	83 c4 38             	add    $0x38,%esp
  101054:	5d                   	pop    %ebp
  101055:	c3                   	ret    
  101056:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10105d:	00 00 00 

00101060 <task2>:

void task2() {
  101060:	55                   	push   %ebp
  101061:	89 e5                	mov    %esp,%ebp
  101063:	83 ec 18             	sub    $0x18,%esp
  101066:	8d 05 3e 51 10 00    	lea    0x10513e,%eax
  uint32_t n = 0;
  10106c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("2222: %x \n", n);
  101073:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101076:	89 04 24             	mov    %eax,(%esp)
  101079:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10107d:	e8 5e fa ff ff       	call   100ae0 <kprintf>
  101082:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while(1) { 
    n++;
  101085:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101088:	05 01 00 00 00       	add    $0x1,%eax
  10108d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  101090:	e9 f0 ff ff ff       	jmp    101085 <task2+0x25>
  101095:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10109c:	00 00 00 00 

001010a0 <task1>:
}

void task1() {
  1010a0:	55                   	push   %ebp
  1010a1:	89 e5                	mov    %esp,%ebp
  1010a3:	83 ec 18             	sub    $0x18,%esp
  1010a6:	8d 05 49 51 10 00    	lea    0x105149,%eax
  uint32_t n = 0;
  1010ac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("1111: %x \n", n);
  1010b3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1010b6:	89 04 24             	mov    %eax,(%esp)
  1010b9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010bd:	e8 1e fa ff ff       	call   100ae0 <kprintf>
  1010c2:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while(1) { 
    n++;
  1010c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010c8:	05 01 00 00 00       	add    $0x1,%eax
  1010cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  1010d0:	e9 f0 ff ff ff       	jmp    1010c5 <task1+0x25>
  1010d5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1010dc:	00 00 00 00 

001010e0 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  1010e0:	55                   	push   %ebp
  1010e1:	89 e5                	mov    %esp,%ebp
  1010e3:	83 ec 38             	sub    $0x38,%esp
  1010e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1010e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	vmm_init(mb_info);
  1010ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010ef:	89 04 24             	mov    %eax,(%esp)
  1010f2:	e8 c9 0a 00 00       	call   101bc0 <vmm_init>
  1010f7:	b9 00 00 00 00       	mov    $0x0,%ecx
	
	void* alloc = vmm_alloc(0);
  1010fc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101103:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101106:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101109:	e8 42 07 00 00       	call   101850 <vmm_alloc>
  10110e:	8d 0d 54 51 10 00    	lea    0x105154,%ecx
  101114:	89 45 f8             	mov    %eax,-0x8(%ebp)
	kprintf("alloc 1: %x \n", alloc);
  101117:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10111a:	89 0c 24             	mov    %ecx,(%esp)
  10111d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101121:	e8 ba f9 ff ff       	call   100ae0 <kprintf>
  101126:	b9 00 00 00 00       	mov    $0x0,%ecx
	
	alloc = vmm_alloc(0);
  10112b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101132:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101135:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  101138:	e8 13 07 00 00       	call   101850 <vmm_alloc>
  10113d:	8d 0d 62 51 10 00    	lea    0x105162,%ecx
  101143:	89 45 f8             	mov    %eax,-0x8(%ebp)
	kprintf("alloc 2: %x \n", alloc);
  101146:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101149:	89 0c 24             	mov    %ecx,(%esp)
  10114c:	89 44 24 04          	mov    %eax,0x4(%esp)
  101150:	e8 8b f9 ff ff       	call   100ae0 <kprintf>
	
	vmm_free(alloc);
  101155:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101158:	89 0c 24             	mov    %ecx,(%esp)
  10115b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10115e:	e8 9d 08 00 00       	call   101a00 <vmm_free>
  101163:	b8 00 00 00 00       	mov    $0x0,%eax
	alloc = vmm_alloc(0);
  101168:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10116f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101172:	e8 d9 06 00 00       	call   101850 <vmm_alloc>
  101177:	8d 0d 70 51 10 00    	lea    0x105170,%ecx
  10117d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	kprintf("alloc 3: %x \n", alloc);
  101180:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101183:	89 0c 24             	mov    %ecx,(%esp)
  101186:	89 44 24 04          	mov    %eax,0x4(%esp)
  10118a:	e8 51 f9 ff ff       	call   100ae0 <kprintf>
	
	init_task(vmm_create_pagedir(mb_info), task2);
  10118f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101192:	89 0c 24             	mov    %ecx,(%esp)
  101195:	89 45 dc             	mov    %eax,-0x24(%ebp)
  101198:	e8 23 03 00 00       	call   1014c0 <vmm_create_pagedir>
  10119d:	8d 0d 60 10 10 00    	lea    0x101060,%ecx
  1011a3:	89 04 24             	mov    %eax,(%esp)
  1011a6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011aa:	e8 b1 1c 00 00       	call   102e60 <init_task>
	init_task(vmm_create_pagedir(mb_info), task1);
  1011af:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1011b2:	89 0c 24             	mov    %ecx,(%esp)
  1011b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1011b8:	e8 03 03 00 00       	call   1014c0 <vmm_create_pagedir>
  1011bd:	8d 0d a0 10 10 00    	lea    0x1010a0,%ecx
  1011c3:	89 04 24             	mov    %eax,(%esp)
  1011c6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011ca:	e8 91 1c 00 00       	call   102e60 <init_task>
	  
	enable_scheduling();
  1011cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1011d2:	e8 79 1c 00 00       	call   102e50 <enable_scheduling>
	else
	{
	  kprintf("No Modules loadable. Microkernel shutting down.\nThank you for using this pointless version of mikrOS\n");
	}*/

	while(1) {  }
  1011d7:	e9 fb ff ff ff       	jmp    1011d7 <kernel_main+0xf7>
  1011dc:	66 90                	xchg   %ax,%ax
  1011de:	66 90                	xchg   %ax,%ax

001011e0 <load_gdt>:
		  uint16_t limit;
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
  1011e0:	83 ec 0c             	sub    $0xc,%esp
  1011e3:	a1 24 50 10 00       	mov    0x105024,%eax
  1011e8:	89 04 24             	mov    %eax,(%esp)
  1011eb:	66 8b 0d 28 50 10 00 	mov    0x105028,%cx
  1011f2:	66 89 4c 24 04       	mov    %cx,0x4(%esp)
	asm volatile("lgdt %0" : : "m" (gdtp));
  1011f7:	0f 01 14 24          	lgdtl  (%esp)

	asm ("mov $0x10, %ax");
  1011fb:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  1011ff:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  101202:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  101205:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  101208:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  10120b:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  10120e:	83 c4 0c             	add    $0xc,%esp
  101211:	c3                   	ret    
  101212:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101219:	1f 84 00 00 00 00 00 

00101220 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  101220:	53                   	push   %ebx
  101221:	57                   	push   %edi
  101222:	56                   	push   %esi
  101223:	83 ec 10             	sub    $0x10,%esp
  101226:	8b 44 24 2c          	mov    0x2c(%esp),%eax
  10122a:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  10122e:	8b 54 24 24          	mov    0x24(%esp),%edx
  101232:	8b 74 24 20          	mov    0x20(%esp),%esi
  101236:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10123a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10123e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101242:	89 04 24             	mov    %eax,(%esp)
    gdt[i] = limit & 0xffffLL;
  101245:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101249:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  10124d:	66 89 cf             	mov    %cx,%di
  101250:	0f b7 cf             	movzwl %di,%ecx
  101253:	89 0c c5 30 a4 12 00 	mov    %ecx,0x12a430(,%eax,8)
  10125a:	c7 04 c5 34 a4 12 00 	movl   $0x0,0x12a434(,%eax,8)
  101261:	00 00 00 00 
    gdt[i] |= (base & 0xffffffLL) << 16;
  101265:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101269:	8b 0c c5 34 a4 12 00 	mov    0x12a434(,%eax,8),%ecx
  101270:	8b 54 24 08          	mov    0x8(%esp),%edx
  101274:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
  10127a:	89 d6                	mov    %edx,%esi
  10127c:	c1 ee 10             	shr    $0x10,%esi
  10127f:	09 ce                	or     %ecx,%esi
  101281:	8b 0c c5 30 a4 12 00 	mov    0x12a430(,%eax,8),%ecx
  101288:	89 34 c5 34 a4 12 00 	mov    %esi,0x12a434(,%eax,8)
  10128f:	c1 e2 10             	shl    $0x10,%edx
  101292:	09 d1                	or     %edx,%ecx
  101294:	89 0c c5 30 a4 12 00 	mov    %ecx,0x12a430(,%eax,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  10129b:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10129f:	8b 0c c5 34 a4 12 00 	mov    0x12a434(,%eax,8),%ecx
  1012a6:	8b 14 c5 30 a4 12 00 	mov    0x12a430(,%eax,8),%edx
  1012ad:	8b 34 24             	mov    (%esp),%esi
  1012b0:	89 14 c5 30 a4 12 00 	mov    %edx,0x12a430(,%eax,8)
  1012b7:	89 f2                	mov    %esi,%edx
  1012b9:	88 d3                	mov    %dl,%bl
  1012bb:	0f b6 d3             	movzbl %bl,%edx
  1012be:	c1 e2 08             	shl    $0x8,%edx
  1012c1:	09 d1                	or     %edx,%ecx
  1012c3:	89 0c c5 34 a4 12 00 	mov    %ecx,0x12a434(,%eax,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  1012ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1012ce:	8b 0c c5 34 a4 12 00 	mov    0x12a434(,%eax,8),%ecx
  1012d5:	8b 14 c5 30 a4 12 00 	mov    0x12a430(,%eax,8),%edx
  1012dc:	0f b7 74 24 06       	movzwl 0x6(%esp),%esi
  1012e1:	89 14 c5 30 a4 12 00 	mov    %edx,0x12a430(,%eax,8)
  1012e8:	83 e6 0f             	and    $0xf,%esi
  1012eb:	c1 e6 10             	shl    $0x10,%esi
  1012ee:	09 f1                	or     %esi,%ecx
  1012f0:	89 0c c5 34 a4 12 00 	mov    %ecx,0x12a434(,%eax,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  1012f7:	8b 04 24             	mov    (%esp),%eax
  1012fa:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  1012fe:	8b 14 cd 34 a4 12 00 	mov    0x12a434(,%ecx,8),%edx
  101305:	8b 34 cd 30 a4 12 00 	mov    0x12a430(,%ecx,8),%esi
  10130c:	89 34 cd 30 a4 12 00 	mov    %esi,0x12a430(,%ecx,8)
  101313:	c1 e0 0c             	shl    $0xc,%eax
  101316:	25 00 00 f0 0f       	and    $0xff00000,%eax
  10131b:	09 c2                	or     %eax,%edx
  10131d:	89 14 cd 34 a4 12 00 	mov    %edx,0x12a434(,%ecx,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  101324:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101328:	8b 0c c5 34 a4 12 00 	mov    0x12a434(,%eax,8),%ecx
  10132f:	8b 14 c5 30 a4 12 00 	mov    0x12a430(,%eax,8),%edx
  101336:	0f b6 74 24 0b       	movzbl 0xb(%esp),%esi
  10133b:	89 14 c5 30 a4 12 00 	mov    %edx,0x12a430(,%eax,8)
  101342:	c1 e6 18             	shl    $0x18,%esi
  101345:	09 f1                	or     %esi,%ecx
  101347:	89 0c c5 34 a4 12 00 	mov    %ecx,0x12a434(,%eax,8)
}
  10134e:	83 c4 10             	add    $0x10,%esp
  101351:	5e                   	pop    %esi
  101352:	5f                   	pop    %edi
  101353:	5b                   	pop    %ebx
  101354:	c3                   	ret    
  101355:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10135c:	00 00 00 00 

00101360 <init_gdt>:

void init_gdt(void)
{
  101360:	55                   	push   %ebp
  101361:	89 e5                	mov    %esp,%ebp
  101363:	56                   	push   %esi
  101364:	83 ec 54             	sub    $0x54,%esp
  101367:	b8 00 00 00 00       	mov    $0x0,%eax
    set_gdt_entry(0, 0, 0, 0);
  10136c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101373:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10137a:	00 
  10137b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101382:	00 
  101383:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10138a:	00 
  10138b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10138e:	e8 8d fe ff ff       	call   101220 <set_gdt_entry>
  101393:	b8 01 00 00 00       	mov    $0x1,%eax
  101398:	b9 00 00 00 00       	mov    $0x0,%ecx
  10139d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1013a2:	be 9a 0c 00 00       	mov    $0xc9a,%esi
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1013a7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1013ae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1013b5:	00 
  1013b6:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1013bd:	00 
  1013be:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  1013c5:	00 
  1013c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1013c9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1013cc:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1013cf:	89 75 e8             	mov    %esi,-0x18(%ebp)
  1013d2:	e8 49 fe ff ff       	call   101220 <set_gdt_entry>
  1013d7:	b8 02 00 00 00       	mov    $0x2,%eax
  1013dc:	b9 00 00 00 00       	mov    $0x0,%ecx
  1013e1:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1013e6:	be 92 0c 00 00       	mov    $0xc92,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1013eb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1013f2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1013f9:	00 
  1013fa:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101401:	00 
  101402:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  101409:	00 
  10140a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10140d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  101410:	89 55 dc             	mov    %edx,-0x24(%ebp)
  101413:	89 75 d8             	mov    %esi,-0x28(%ebp)
  101416:	e8 05 fe ff ff       	call   101220 <set_gdt_entry>
  10141b:	b8 03 00 00 00       	mov    $0x3,%eax
  101420:	b9 00 00 00 00       	mov    $0x0,%ecx
  101425:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10142a:	be fa 0c 00 00       	mov    $0xcfa,%esi
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10142f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  101436:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10143d:	00 
  10143e:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101445:	00 
  101446:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10144d:	00 
  10144e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  101451:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  101454:	89 55 cc             	mov    %edx,-0x34(%ebp)
  101457:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10145a:	e8 c1 fd ff ff       	call   101220 <set_gdt_entry>
  10145f:	b8 04 00 00 00       	mov    $0x4,%eax
  101464:	b9 00 00 00 00       	mov    $0x0,%ecx
  101469:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10146e:	be f2 0c 00 00       	mov    $0xcf2,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  101473:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10147a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101481:	00 
  101482:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101489:	00 
  10148a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  101491:	00 
  101492:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101495:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  101498:	89 55 bc             	mov    %edx,-0x44(%ebp)
  10149b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  10149e:	e8 7d fd ff ff       	call   101220 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  1014a3:	e8 38 fd ff ff       	call   1011e0 <load_gdt>
}
  1014a8:	83 c4 54             	add    $0x54,%esp
  1014ab:	5e                   	pop    %esi
  1014ac:	5d                   	pop    %ebp
  1014ad:	c3                   	ret    
  1014ae:	66 90                	xchg   %ax,%ax

001014b0 <vmm_get_current_pagedir>:
struct vmm_context* active_context = (void*)(ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

uint32_t vmm_get_current_pagedir(void) {
  return active_pagedir;
  1014b0:	a1 24 60 10 00       	mov    0x106024,%eax
  1014b5:	c3                   	ret    
  1014b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1014bd:	00 00 00 

001014c0 <vmm_create_pagedir>:
}

uint32_t vmm_create_pagedir(struct multiboot_info* mb_info)
{
  1014c0:	55                   	push   %ebp
  1014c1:	89 e5                	mov    %esp,%ebp
  1014c3:	53                   	push   %ebx
  1014c4:	56                   	push   %esi
  1014c5:	81 ec 60 10 00 00    	sub    $0x1060,%esp
  1014cb:	8b 45 08             	mov    0x8(%ebp),%eax
  1014ce:	8d 4d f0             	lea    -0x10(%ebp),%ecx
  1014d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t phys_context = 0;
  1014d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  1014db:	89 0c 24             	mov    %ecx,(%esp)
  1014de:	e8 6d 03 00 00       	call   101850 <vmm_alloc>
  1014e3:	8d 4d e8             	lea    -0x18(%ebp),%ecx
  1014e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
  
  uint32_t phys_pagedir = 0;
  1014e9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  1014f0:	89 0c 24             	mov    %ecx,(%esp)
  1014f3:	e8 58 03 00 00       	call   101850 <vmm_alloc>
  1014f8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1014fb:	89 01                	mov    %eax,(%ecx)
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  1014fd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  101504:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  10150b:	0f 83 ab 00 00 00    	jae    1015bc <vmm_create_pagedir+0xfc>
  101511:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  101514:	89 04 24             	mov    %eax,(%esp)
  101517:	e8 34 03 00 00       	call   101850 <vmm_alloc>
  10151c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10151f:	89 84 8d dc ef ff ff 	mov    %eax,-0x1024(%ebp,%ecx,4)
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  101526:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101529:	0d 01 00 00 00       	or     $0x1,%eax
  10152e:	0d 02 00 00 00       	or     $0x2,%eax
  101533:	0d 04 00 00 00       	or     $0x4,%eax
  101538:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10153b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10153e:	8b 12                	mov    (%edx),%edx
  101540:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    for(i2 = 0; i2 < 1024; i2++) {
  101543:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  10154a:	81 7d dc 00 04 00 00 	cmpl   $0x400,-0x24(%ebp)
  101551:	0f 83 50 00 00 00    	jae    1015a7 <vmm_create_pagedir+0xe7>
  101557:	b8 00 02 00 00       	mov    $0x200,%eax
  10155c:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  101561:	8b 55 e0             	mov    -0x20(%ebp),%edx
  101564:	c1 e2 18             	shl    $0x18,%edx
  101567:	8b 75 dc             	mov    -0x24(%ebp),%esi
  10156a:	c1 e6 0c             	shl    $0xc,%esi
  10156d:	01 f2                	add    %esi,%edx
  10156f:	89 95 d8 ef ff ff    	mov    %edx,-0x1028(%ebp)
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  101575:	81 bd d8 ef ff ff 00 	cmpl   $0x10000000,-0x1028(%ebp)
  10157c:	00 00 10 
  10157f:	0f 97 c3             	seta   %bl
  101582:	84 db                	test   %bl,%bl
  101584:	0f 44 c1             	cmove  %ecx,%eax
  101587:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10158a:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10158d:	8b 94 95 dc ef ff ff 	mov    -0x1024(%ebp,%edx,4),%edx
  101594:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
  for(i = 0; i < 1024; i++) {
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    for(i2 = 0; i2 < 1024; i2++) {
  101597:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10159a:	05 01 00 00 00       	add    $0x1,%eax
  10159f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1015a2:	e9 a3 ff ff ff       	jmp    10154a <vmm_create_pagedir+0x8a>
      uint32_t vaddr = (i << 24) + (i2 << 12);
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  1015a7:	e9 00 00 00 00       	jmp    1015ac <vmm_create_pagedir+0xec>
  uint32_t phys_pagedir = 0;
  context->pagedir = vmm_alloc(&phys_pagedir);
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  1015ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1015af:	05 01 00 00 00       	add    $0x1,%eax
  1015b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1015b7:	e9 48 ff ff ff       	jmp    101504 <vmm_create_pagedir+0x44>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  1015bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  1015c3:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  1015ca:	0f 83 5e 00 00 00    	jae    10162e <vmm_create_pagedir+0x16e>
  1015d0:	b8 00 00 00 00       	mov    $0x0,%eax
  1015d5:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
  1015db:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1015de:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1015e1:	8b 36                	mov    (%esi),%esi
  1015e3:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1015e6:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  1015ec:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  1015ef:	8b 15 04 41 10 00    	mov    0x104104,%edx
  1015f5:	8b 75 e0             	mov    -0x20(%ebp),%esi
  1015f8:	c1 e6 0c             	shl    $0xc,%esi
  1015fb:	01 f2                	add    %esi,%edx
  1015fd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  101600:	89 0c 24             	mov    %ecx,(%esp)
  101603:	89 54 24 04          	mov    %edx,0x4(%esp)
  101607:	89 74 24 08          	mov    %esi,0x8(%esp)
  10160b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101612:	00 
  101613:	89 85 c8 ef ff ff    	mov    %eax,-0x1038(%ebp)
  101619:	e8 b2 02 00 00       	call   1018d0 <map_address_context>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  10161e:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101621:	05 01 00 00 00       	add    $0x1,%eax
  101626:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101629:	e9 95 ff ff ff       	jmp    1015c3 <vmm_create_pagedir+0x103>
  10162e:	b8 00 00 00 00       	mov    $0x0,%eax
  101633:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  101639:	8b 15 08 41 10 00    	mov    0x104108,%edx
  10163f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101642:	89 0c 24             	mov    %ecx,(%esp)
  101645:	89 54 24 04          	mov    %edx,0x4(%esp)
  101649:	89 74 24 08          	mov    %esi,0x8(%esp)
  10164d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101654:	00 
  101655:	89 85 c4 ef ff ff    	mov    %eax,-0x103c(%ebp)
  10165b:	e8 70 02 00 00       	call   1018d0 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101660:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
  101667:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
  10166d:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  101670:	0f 83 3f 00 00 00    	jae    1016b5 <vmm_create_pagedir+0x1f5>
  101676:	b8 04 00 00 00       	mov    $0x4,%eax
  10167b:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  101681:	8b 55 e0             	mov    -0x20(%ebp),%edx
  101684:	8b 75 e0             	mov    -0x20(%ebp),%esi
  101687:	89 0c 24             	mov    %ecx,(%esp)
  10168a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10168e:	89 74 24 08          	mov    %esi,0x8(%esp)
  101692:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  101699:	00 
  10169a:	89 85 c0 ef ff ff    	mov    %eax,-0x1040(%ebp)
  1016a0:	e8 2b 02 00 00       	call   1018d0 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1016a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1016a8:	05 00 10 00 00       	add    $0x1000,%eax
  1016ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1016b0:	e9 b2 ff ff ff       	jmp    101667 <vmm_create_pagedir+0x1a7>
  1016b5:	b8 00 00 00 00       	mov    $0x0,%eax
  1016ba:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  }
  
  struct multiboot_module* modules = mb_info->mi_mods_addr;
  1016c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1016c3:	8b 52 18             	mov    0x18(%edx),%edx
  1016c6:	89 95 d4 ef ff ff    	mov    %edx,-0x102c(%ebp)

  map_address_context(pagedir_ptr, (uint32_t) mb_info, (uint32_t) mb_info, 0);
  1016cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1016cf:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1016d2:	89 0c 24             	mov    %ecx,(%esp)
  1016d5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1016d9:	89 74 24 08          	mov    %esi,0x8(%esp)
  1016dd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1016e4:	00 
  1016e5:	89 85 bc ef ff ff    	mov    %eax,-0x1044(%ebp)
  1016eb:	e8 e0 01 00 00       	call   1018d0 <map_address_context>
  1016f0:	b8 00 00 00 00       	mov    $0x0,%eax
  1016f5:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
  map_address_context(pagedir_ptr, (uint32_t) modules, (uint32_t) modules, 0);
  1016fb:	8b 95 d4 ef ff ff    	mov    -0x102c(%ebp),%edx
  101701:	8b b5 d4 ef ff ff    	mov    -0x102c(%ebp),%esi
  101707:	89 0c 24             	mov    %ecx,(%esp)
  10170a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10170e:	89 74 24 08          	mov    %esi,0x8(%esp)
  101712:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101719:	00 
  10171a:	89 85 b8 ef ff ff    	mov    %eax,-0x1048(%ebp)
  101720:	e8 ab 01 00 00       	call   1018d0 <map_address_context>

  uint32_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  101725:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  10172c:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10172f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101732:	3b 41 14             	cmp    0x14(%ecx),%eax
  101735:	0f 83 95 00 00 00    	jae    1017d0 <vmm_create_pagedir+0x310>
    addr = (uintptr_t)modules[i].start; 
  10173b:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10173e:	8b 8d d4 ef ff ff    	mov    -0x102c(%ebp),%ecx
  101744:	c1 e0 04             	shl    $0x4,%eax
  101747:	01 c1                	add    %eax,%ecx
  101749:	8b 01                	mov    (%ecx),%eax
  10174b:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
    
    while (addr < (uintptr_t)modules[i].end) {
  101751:	8b 85 d0 ef ff ff    	mov    -0x1030(%ebp),%eax
  101757:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10175a:	8b 95 d4 ef ff ff    	mov    -0x102c(%ebp),%edx
  101760:	c1 e1 04             	shl    $0x4,%ecx
  101763:	01 ca                	add    %ecx,%edx
  101765:	8b 4a 04             	mov    0x4(%edx),%ecx
  101768:	39 c8                	cmp    %ecx,%eax
  10176a:	0f 83 4b 00 00 00    	jae    1017bb <vmm_create_pagedir+0x2fb>
  101770:	b8 00 00 00 00       	mov    $0x0,%eax
  101775:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
      map_address_context(pagedir_ptr, (uint32_t) addr, (uint32_t) addr, 0);
  10177b:	8b 95 d0 ef ff ff    	mov    -0x1030(%ebp),%edx
  101781:	8b b5 d0 ef ff ff    	mov    -0x1030(%ebp),%esi
  101787:	89 0c 24             	mov    %ecx,(%esp)
  10178a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10178e:	89 74 24 08          	mov    %esi,0x8(%esp)
  101792:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101799:	00 
  10179a:	89 85 b4 ef ff ff    	mov    %eax,-0x104c(%ebp)
  1017a0:	e8 2b 01 00 00       	call   1018d0 <map_address_context>
      addr += 0x1000;
  1017a5:	8b 85 d0 ef ff ff    	mov    -0x1030(%ebp),%eax
  1017ab:	05 00 10 00 00       	add    $0x1000,%eax
  1017b0:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
    }
  1017b6:	e9 96 ff ff ff       	jmp    101751 <vmm_create_pagedir+0x291>
  }
  1017bb:	e9 00 00 00 00       	jmp    1017c0 <vmm_create_pagedir+0x300>

  map_address_context(pagedir_ptr, (uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_context(pagedir_ptr, (uint32_t) modules, (uint32_t) modules, 0);

  uint32_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1017c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1017c3:	05 01 00 00 00       	add    $0x1,%eax
  1017c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1017cb:	e9 5c ff ff ff       	jmp    10172c <vmm_create_pagedir+0x26c>
    }
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  1017d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  1017d7:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  1017de:	0f 83 22 00 00 00    	jae    101806 <vmm_create_pagedir+0x346>
    vmm_unmap((void*)pagedir_ptr[i]); 
  1017e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1017e7:	8b 84 85 dc ef ff ff 	mov    -0x1024(%ebp,%eax,4),%eax
  1017ee:	89 04 24             	mov    %eax,(%esp)
  1017f1:	e8 5a 01 00 00       	call   101950 <vmm_unmap>
    }
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  1017f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1017f9:	05 01 00 00 00       	add    $0x1,%eax
  1017fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101801:	e9 d1 ff ff ff       	jmp    1017d7 <vmm_create_pagedir+0x317>
  101806:	8d 85 dc ef ff ff    	lea    -0x1024(%ebp),%eax
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  10180c:	89 04 24             	mov    %eax,(%esp)
  10180f:	e8 3c 01 00 00       	call   101950 <vmm_unmap>
  
  uint32_t* pd_ptr = context->pagedir;
  101814:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101817:	8b 00                	mov    (%eax),%eax
  101819:	89 85 cc ef ff ff    	mov    %eax,-0x1034(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  10181f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101822:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101825:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  101827:	8b 85 cc ef ff ff    	mov    -0x1034(%ebp),%eax
  10182d:	89 04 24             	mov    %eax,(%esp)
  101830:	e8 1b 01 00 00       	call   101950 <vmm_unmap>
  vmm_unmap(context);
  101835:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101838:	89 04 24             	mov    %eax,(%esp)
  10183b:	e8 10 01 00 00       	call   101950 <vmm_unmap>
  
  return phys_pagedir;
  101840:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101843:	81 c4 60 10 00 00    	add    $0x1060,%esp
  101849:	5e                   	pop    %esi
  10184a:	5b                   	pop    %ebx
  10184b:	5d                   	pop    %ebp
  10184c:	c3                   	ret    
  10184d:	0f 1f 00             	nopl   (%eax)

00101850 <vmm_alloc>:
    asm volatile("invlpg %0" : : "m" (vaddr));
  }
}


void* vmm_alloc(uint32_t* retpaddr) {
  101850:	55                   	push   %ebp
  101851:	89 e5                	mov    %esp,%ebp
  101853:	83 ec 18             	sub    $0x18,%esp
  101856:	8b 45 08             	mov    0x8(%ebp),%eax
  101859:	89 45 fc             	mov    %eax,-0x4(%ebp)
  void* vaddr = 0;
  10185c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  101863:	c7 45 f4 00 00 00 10 	movl   $0x10000000,-0xc(%ebp)
  10186a:	81 7d f4 00 f0 ff ff 	cmpl   $0xfffff000,-0xc(%ebp)
  101871:	0f 87 3f 00 00 00    	ja     1018b6 <vmm_alloc+0x66>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == PT_ALLOCATABLE) {
  101877:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10187a:	c1 e8 0c             	shr    $0xc,%eax
  10187d:	8b 0d 04 41 10 00    	mov    0x104104,%ecx
  101883:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101886:	25 01 02 00 00       	and    $0x201,%eax
  10188b:	3d 00 02 00 00       	cmp    $0x200,%eax
  101890:	0f 85 0b 00 00 00    	jne    1018a1 <vmm_alloc+0x51>
      vaddr = (void*) i;
  101896:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101899:	89 45 f8             	mov    %eax,-0x8(%ebp)
      break;
  10189c:	e9 15 00 00 00       	jmp    1018b6 <vmm_alloc+0x66>
    }
  }
  1018a1:	e9 00 00 00 00       	jmp    1018a6 <vmm_alloc+0x56>


void* vmm_alloc(uint32_t* retpaddr) {
  void* vaddr = 0;

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  1018a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1018a9:	05 00 10 00 00       	add    $0x1000,%eax
  1018ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1018b1:	e9 b4 ff ff ff       	jmp    10186a <vmm_alloc+0x1a>
      vaddr = (void*) i;
      break;
    }
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
  1018b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1018b9:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1018bc:	89 04 24             	mov    %eax,(%esp)
  1018bf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018c3:	e8 a8 01 00 00       	call   101a70 <vmm_alloc_addr>
  1018c8:	83 c4 18             	add    $0x18,%esp
  1018cb:	5d                   	pop    %ebp
  1018cc:	c3                   	ret    
  1018cd:	0f 1f 00             	nopl   (%eax)

001018d0 <map_address_context>:
  vmm_unmap(context);
  
  return phys_pagedir;
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  1018d0:	56                   	push   %esi
  1018d1:	83 ec 18             	sub    $0x18,%esp
  1018d4:	8b 44 24 2c          	mov    0x2c(%esp),%eax
  1018d8:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  1018dc:	8b 54 24 24          	mov    0x24(%esp),%edx
  1018e0:	8b 74 24 20          	mov    0x20(%esp),%esi
  1018e4:	89 74 24 14          	mov    %esi,0x14(%esp)
  1018e8:	89 54 24 10          	mov    %edx,0x10(%esp)
  1018ec:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  1018f0:	89 44 24 08          	mov    %eax,0x8(%esp)
  uint32_t pd_entry =  vaddr >> 22;
  1018f4:	8b 44 24 10          	mov    0x10(%esp),%eax
  1018f8:	c1 e8 16             	shr    $0x16,%eax
  1018fb:	89 44 24 04          	mov    %eax,0x4(%esp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  1018ff:	8b 44 24 10          	mov    0x10(%esp),%eax
  101903:	c1 e8 0c             	shr    $0xc,%eax
  101906:	25 ff 03 00 00       	and    $0x3ff,%eax
  10190b:	89 04 24             	mov    %eax,(%esp)
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  10190e:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101912:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  101917:	0d 01 00 00 00       	or     $0x1,%eax
  10191c:	0d 02 00 00 00       	or     $0x2,%eax
  101921:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  101925:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  10192b:	09 c8                	or     %ecx,%eax
  10192d:	8b 0c 24             	mov    (%esp),%ecx
  101930:	8b 54 24 04          	mov    0x4(%esp),%edx
  101934:	8b 74 24 14          	mov    0x14(%esp),%esi
  101938:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10193b:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  101941:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
}
  101944:	83 c4 18             	add    $0x18,%esp
  101947:	5e                   	pop    %esi
  101948:	c3                   	ret    
  101949:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00101950 <vmm_unmap>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
    asm volatile("invlpg %0" : : "m" (vaddr));
  }
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  101950:	83 ec 08             	sub    $0x8,%esp
  101953:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101957:	89 44 24 04          	mov    %eax,0x4(%esp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  10195b:	8b 44 24 04          	mov    0x4(%esp),%eax
  10195f:	89 04 24             	mov    %eax,(%esp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  101962:	8b 04 24             	mov    (%esp),%eax
  101965:	c1 e8 0c             	shr    $0xc,%eax
  101968:	8b 0d 04 41 10 00    	mov    0x104104,%ecx
  10196e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101971:	25 01 02 00 00       	and    $0x201,%eax
  101976:	3d 01 02 00 00       	cmp    $0x201,%eax
  10197b:	0f 85 17 00 00 00    	jne    101998 <vmm_unmap+0x48>
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  101981:	8b 04 24             	mov    (%esp),%eax
  101984:	c1 e8 0c             	shr    $0xc,%eax
  101987:	8b 0d 04 41 10 00    	mov    0x104104,%ecx
  10198d:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  101994:	0f 01 3c 24          	invlpg (%esp)
  }
}
  101998:	83 c4 08             	add    $0x8,%esp
  10199b:	c3                   	ret    
  10199c:	0f 1f 40 00          	nopl   0x0(%eax)

001019a0 <map_address_active>:
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {  
  1019a0:	83 ec 0c             	sub    $0xc,%esp
  1019a3:	8b 44 24 18          	mov    0x18(%esp),%eax
  1019a7:	8b 4c 24 14          	mov    0x14(%esp),%ecx
  1019ab:	8b 54 24 10          	mov    0x10(%esp),%edx
  1019af:	89 54 24 08          	mov    %edx,0x8(%esp)
  1019b3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019b7:	89 04 24             	mov    %eax,(%esp)
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  1019ba:	8b 44 24 04          	mov    0x4(%esp),%eax
  1019be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1019c3:	0d 01 00 00 00       	or     $0x1,%eax
  1019c8:	0d 02 00 00 00       	or     $0x2,%eax
  1019cd:	8b 0c 24             	mov    (%esp),%ecx
  1019d0:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  1019d6:	09 c8                	or     %ecx,%eax
  1019d8:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  1019dc:	c1 e9 0c             	shr    $0xc,%ecx
  1019df:	8b 15 04 41 10 00    	mov    0x104104,%edx
  1019e5:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  1019e8:	0f 01 7c 24 08       	invlpg 0x8(%esp)
}
  1019ed:	83 c4 0c             	add    $0xc,%esp
  1019f0:	c3                   	ret    
  1019f1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1019f8:	0f 1f 84 00 00 00 00 
  1019ff:	00 

00101a00 <vmm_free>:

void vmm_free(void* p_vaddr) {
  101a00:	55                   	push   %ebp
  101a01:	89 e5                	mov    %esp,%ebp
  101a03:	83 ec 18             	sub    $0x18,%esp
  101a06:	8b 45 08             	mov    0x8(%ebp),%eax
  101a09:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  101a0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a0f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  101a12:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101a15:	c1 e8 0c             	shr    $0xc,%eax
  101a18:	8b 0d 04 41 10 00    	mov    0x104104,%ecx
  101a1e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101a21:	25 01 02 00 00       	and    $0x201,%eax
  101a26:	3d 01 02 00 00       	cmp    $0x201,%eax
  101a2b:	0f 85 33 00 00 00    	jne    101a64 <vmm_free+0x64>
    pmm_free((void*)(active_pagetables[vaddr >> 12] & 0xFFFFF000));
  101a31:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101a34:	c1 e8 0c             	shr    $0xc,%eax
  101a37:	8b 0d 04 41 10 00    	mov    0x104104,%ecx
  101a3d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101a40:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  101a45:	89 04 24             	mov    %eax,(%esp)
  101a48:	e8 93 eb ff ff       	call   1005e0 <pmm_free>
   
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  101a4d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101a50:	c1 e8 0c             	shr    $0xc,%eax
  101a53:	8b 0d 04 41 10 00    	mov    0x104104,%ecx
  101a59:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  101a60:	0f 01 7d f8          	invlpg -0x8(%ebp)
  }
}
  101a64:	83 c4 18             	add    $0x18,%esp
  101a67:	5d                   	pop    %ebp
  101a68:	c3                   	ret    
  101a69:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00101a70 <vmm_alloc_addr>:
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  101a70:	55                   	push   %ebp
  101a71:	89 e5                	mov    %esp,%ebp
  101a73:	83 ec 28             	sub    $0x28,%esp
  101a76:	8b 45 0c             	mov    0xc(%ebp),%eax
  101a79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101a7c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  101a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if((active_pagetables[(uint32_t)reqvaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) return 0;
  101a82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101a85:	c1 e8 0c             	shr    $0xc,%eax
  101a88:	8b 0d 04 41 10 00    	mov    0x104104,%ecx
  101a8e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101a91:	25 01 02 00 00       	and    $0x201,%eax
  101a96:	3d 00 02 00 00       	cmp    $0x200,%eax
  101a9b:	0f 84 0c 00 00 00    	je     101aad <vmm_alloc_addr+0x3d>
  101aa1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  101aa8:	e9 45 00 00 00       	jmp    101af2 <vmm_alloc_addr+0x82>
  101aad:	b8 04 02 00 00       	mov    $0x204,%eax

  uint32_t paddr = (uint32_t) pmm_alloc();
  101ab2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101ab5:	e8 36 ea ff ff       	call   1004f0 <pmm_alloc>
  101aba:	89 45 f0             	mov    %eax,-0x10(%ebp)
  map_address_active((uint32_t)reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  101abd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ac0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101ac3:	89 04 24             	mov    %eax,(%esp)
  101ac6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aca:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  101ad1:	00 
  101ad2:	e8 c9 fe ff ff       	call   1019a0 <map_address_active>
  
  if(retpaddr != 0) *retpaddr = paddr;
  101ad7:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  101ade:	0f 84 08 00 00 00    	je     101aec <vmm_alloc_addr+0x7c>
  101ae4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101ae7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101aea:	89 01                	mov    %eax,(%ecx)
  
  return reqvaddr;
  101aec:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101aef:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  101af2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101af5:	83 c4 28             	add    $0x28,%esp
  101af8:	5d                   	pop    %ebp
  101af9:	c3                   	ret    
  101afa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00101b00 <vmm_alloc_static>:

//TODO: VMM_ALLOC_STATIC will override already allocated memory

void* vmm_alloc_static(uint32_t offset, uint32_t flags) {
  101b00:	55                   	push   %ebp
  101b01:	89 e5                	mov    %esp,%ebp
  101b03:	83 ec 28             	sub    $0x28,%esp
  101b06:	8b 45 0c             	mov    0xc(%ebp),%eax
  101b09:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101b0c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  101b0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(offset < 0x100000) {
  101b12:	81 7d f8 00 00 10 00 	cmpl   $0x100000,-0x8(%ebp)
  101b19:	0f 83 5f 00 00 00    	jae    101b7e <vmm_alloc_static+0x7e>
    if((offset & 0xFFFFF000) != offset) {
  101b1f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101b22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  101b27:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  101b2a:	0f 84 11 00 00 00    	je     101b41 <vmm_alloc_static+0x41>
  101b30:	8d 05 7e 51 10 00    	lea    0x10517e,%eax
      kprintf("Tried to allocate not 4K-aligned static vaddr. \n");
  101b36:	89 04 24             	mov    %eax,(%esp)
  101b39:	e8 a2 ef ff ff       	call   100ae0 <kprintf>
  101b3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    }
    uint32_t vaddr = offset + STATIC_ALLOC_VADDR;
  101b41:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101b44:	05 00 00 90 01       	add    $0x1900000,%eax
  101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t paddr = (uint32_t) pmm_alloc();
  101b4c:	e8 9f e9 ff ff       	call   1004f0 <pmm_alloc>
  101b51:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    map_address_active(vaddr, paddr, flags & 0xFFF);
  101b54:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101b57:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101b5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101b5d:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  101b63:	89 04 24             	mov    %eax,(%esp)
  101b66:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b6a:	89 54 24 08          	mov    %edx,0x8(%esp)
  101b6e:	e8 2d fe ff ff       	call   1019a0 <map_address_active>
    return (void*) vaddr;
  101b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101b76:	89 45 fc             	mov    %eax,-0x4(%ebp)
  101b79:	e9 18 00 00 00       	jmp    101b96 <vmm_alloc_static+0x96>
  101b7e:	8d 05 af 51 10 00    	lea    0x1051af,%eax
  }
  else
  {
    kprintf("Tried to allocate static vaddr outside reserved range. \n");
  101b84:	89 04 24             	mov    %eax,(%esp)
  101b87:	e8 54 ef ff ff       	call   100ae0 <kprintf>
    return 0;
  101b8c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  101b93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }
}
  101b96:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101b99:	83 c4 28             	add    $0x28,%esp
  101b9c:	5d                   	pop    %ebp
  101b9d:	c3                   	ret    
  101b9e:	66 90                	xchg   %ax,%ax

00101ba0 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  101ba0:	50                   	push   %eax
  101ba1:	8b 44 24 08          	mov    0x8(%esp),%eax
  101ba5:	89 04 24             	mov    %eax,(%esp)
  active_pagedir = pdpaddr;
  101ba8:	8b 04 24             	mov    (%esp),%eax
  101bab:	a3 24 60 10 00       	mov    %eax,0x106024
  asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  101bb0:	8b 04 24             	mov    (%esp),%eax
  101bb3:	0f 22 d8             	mov    %eax,%cr3
}
  101bb6:	58                   	pop    %eax
  101bb7:	c3                   	ret    
  101bb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  101bbf:	00 

00101bc0 <vmm_init>:

uint32_t vmm_init(struct multiboot_info* mb_info)
{
  101bc0:	55                   	push   %ebp
  101bc1:	89 e5                	mov    %esp,%ebp
  101bc3:	53                   	push   %ebx
  101bc4:	56                   	push   %esi
  101bc5:	83 ec 50             	sub    $0x50,%esp
  101bc8:	8b 45 08             	mov    0x8(%ebp),%eax
  101bcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //CREATE CONTEXT ************************************************************
  
  struct vmm_context* context = pmm_alloc();
  101bce:	e8 1d e9 ff ff       	call   1004f0 <pmm_alloc>
  101bd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  101bd6:	e8 15 e9 ff ff       	call   1004f0 <pmm_alloc>
  101bdb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101bde:	89 01                	mov    %eax,(%ecx)
  
  for(i = 0; i < 1024; i++) {
  101be0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101be7:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  101bee:	0f 83 99 00 00 00    	jae    101c8d <vmm_init+0xcd>
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  101bf4:	e8 f7 e8 ff ff       	call   1004f0 <pmm_alloc>
  101bf9:	0d 01 00 00 00       	or     $0x1,%eax
  101bfe:	0d 02 00 00 00       	or     $0x2,%eax
  101c03:	0d 04 00 00 00       	or     $0x4,%eax
  101c08:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101c0b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101c0e:	8b 12                	mov    (%edx),%edx
  101c10:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        
    for(i2 = 0; i2 < 1024; i2++) {
  101c13:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  101c1a:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  101c21:	0f 83 51 00 00 00    	jae    101c78 <vmm_init+0xb8>
  101c27:	b8 00 02 00 00       	mov    $0x200,%eax
  101c2c:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  101c31:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101c34:	c1 e2 18             	shl    $0x18,%edx
  101c37:	8b 75 e8             	mov    -0x18(%ebp),%esi
  101c3a:	c1 e6 0c             	shl    $0xc,%esi
  101c3d:	01 f2                	add    %esi,%edx
  101c3f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  101c42:	81 7d e4 00 00 00 10 	cmpl   $0x10000000,-0x1c(%ebp)
  101c49:	0f 97 c3             	seta   %bl
  101c4c:	84 db                	test   %bl,%bl
  101c4e:	0f 44 c1             	cmove  %ecx,%eax
  101c51:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  101c54:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101c57:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101c5a:	8b 36                	mov    (%esi),%esi
  101c5c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  101c5f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  101c65:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
        
    for(i2 = 0; i2 < 1024; i2++) {
  101c68:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101c6b:	05 01 00 00 00       	add    $0x1,%eax
  101c70:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101c73:	e9 a2 ff ff ff       	jmp    101c1a <vmm_init+0x5a>
      uint32_t vaddr = (i << 24) + (i2 << 12);
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  101c78:	e9 00 00 00 00       	jmp    101c7d <vmm_init+0xbd>
  struct vmm_context* context = pmm_alloc();
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
  101c7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101c80:	05 01 00 00 00       	add    $0x1,%eax
  101c85:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101c88:	e9 5a ff ff ff       	jmp    101be7 <vmm_init+0x27>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101c8d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101c94:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  101c9b:	0f 83 5a 00 00 00    	jae    101cfb <vmm_init+0x13b>
  101ca1:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  101ca6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101ca9:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101cac:	8b 12                	mov    (%edx),%edx
  101cae:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  101cb1:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  101cb7:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  101cba:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101cbd:	8b 09                	mov    (%ecx),%ecx
  101cbf:	8b 15 04 41 10 00    	mov    0x104104,%edx
  101cc5:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101cc8:	c1 e6 0c             	shl    $0xc,%esi
  101ccb:	01 f2                	add    %esi,%edx
  101ccd:	8b 75 e0             	mov    -0x20(%ebp),%esi
  101cd0:	89 0c 24             	mov    %ecx,(%esp)
  101cd3:	89 54 24 04          	mov    %edx,0x4(%esp)
  101cd7:	89 74 24 08          	mov    %esi,0x8(%esp)
  101cdb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101ce2:	00 
  101ce3:	89 45 d0             	mov    %eax,-0x30(%ebp)
  101ce6:	e8 e5 fb ff ff       	call   1018d0 <map_address_context>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101ceb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101cee:	05 01 00 00 00       	add    $0x1,%eax
  101cf3:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101cf6:	e9 99 ff ff ff       	jmp    101c94 <vmm_init+0xd4>
  101cfb:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  101d00:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101d03:	8b 09                	mov    (%ecx),%ecx
  101d05:	8b 15 08 41 10 00    	mov    0x104108,%edx
  101d0b:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101d0e:	89 0c 24             	mov    %ecx,(%esp)
  101d11:	89 54 24 04          	mov    %edx,0x4(%esp)
  101d15:	89 74 24 08          	mov    %esi,0x8(%esp)
  101d19:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101d20:	00 
  101d21:	89 45 cc             	mov    %eax,-0x34(%ebp)
  101d24:	e8 a7 fb ff ff       	call   1018d0 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101d29:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  101d30:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
  101d36:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  101d39:	0f 83 3b 00 00 00    	jae    101d7a <vmm_init+0x1ba>
  101d3f:	b8 04 00 00 00       	mov    $0x4,%eax
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  101d44:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101d47:	8b 09                	mov    (%ecx),%ecx
  101d49:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101d4c:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101d4f:	89 0c 24             	mov    %ecx,(%esp)
  101d52:	89 54 24 04          	mov    %edx,0x4(%esp)
  101d56:	89 74 24 08          	mov    %esi,0x8(%esp)
  101d5a:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  101d61:	00 
  101d62:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101d65:	e8 66 fb ff ff       	call   1018d0 <map_address_context>
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101d6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101d6d:	05 00 10 00 00       	add    $0x1000,%eax
  101d72:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101d75:	e9 b6 ff ff ff       	jmp    101d30 <vmm_init+0x170>
  101d7a:	b8 00 00 00 00       	mov    $0x0,%eax
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  }
  
  struct multiboot_module* modules = mb_info->mi_mods_addr;
  101d7f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101d82:	8b 49 18             	mov    0x18(%ecx),%ecx
  101d85:	89 4d dc             	mov    %ecx,-0x24(%ebp)

  map_address_context(context->pagedir, (uint32_t) mb_info, (uint32_t) mb_info, 0);
  101d88:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101d8b:	8b 09                	mov    (%ecx),%ecx
  101d8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101d90:	8b 75 f4             	mov    -0xc(%ebp),%esi
  101d93:	89 0c 24             	mov    %ecx,(%esp)
  101d96:	89 54 24 04          	mov    %edx,0x4(%esp)
  101d9a:	89 74 24 08          	mov    %esi,0x8(%esp)
  101d9e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101da5:	00 
  101da6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101da9:	e8 22 fb ff ff       	call   1018d0 <map_address_context>
  101dae:	b8 00 00 00 00       	mov    $0x0,%eax
  map_address_context(context->pagedir, (uint32_t) modules, (uint32_t) modules, 0);
  101db3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101db6:	8b 09                	mov    (%ecx),%ecx
  101db8:	8b 55 dc             	mov    -0x24(%ebp),%edx
  101dbb:	8b 75 dc             	mov    -0x24(%ebp),%esi
  101dbe:	89 0c 24             	mov    %ecx,(%esp)
  101dc1:	89 54 24 04          	mov    %edx,0x4(%esp)
  101dc5:	89 74 24 08          	mov    %esi,0x8(%esp)
  101dc9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101dd0:	00 
  101dd1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101dd4:	e8 f7 fa ff ff       	call   1018d0 <map_address_context>

  uint32_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  101dd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101de0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101de3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101de6:	3b 41 14             	cmp    0x14(%ecx),%eax
  101de9:	0f 83 ad 00 00 00    	jae    101e9c <vmm_init+0x2dc>
  101def:	8d 05 e8 51 10 00    	lea    0x1051e8,%eax
    addr = (uintptr_t)modules[i].start;
  101df5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101df8:	8b 55 dc             	mov    -0x24(%ebp),%edx
  101dfb:	c1 e1 04             	shl    $0x4,%ecx
  101dfe:	01 ca                	add    %ecx,%edx
  101e00:	8b 0a                	mov    (%edx),%ecx
  101e02:	89 4d d8             	mov    %ecx,-0x28(%ebp)
    
    kprintf("Mapped module from %x to %x \n", modules[i].start, modules[i].end);   
  101e05:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101e08:	8b 55 dc             	mov    -0x24(%ebp),%edx
  101e0b:	c1 e1 04             	shl    $0x4,%ecx
  101e0e:	01 ca                	add    %ecx,%edx
  101e10:	8b 0a                	mov    (%edx),%ecx
  101e12:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101e15:	8b 75 dc             	mov    -0x24(%ebp),%esi
  101e18:	c1 e2 04             	shl    $0x4,%edx
  101e1b:	01 d6                	add    %edx,%esi
  101e1d:	8b 56 04             	mov    0x4(%esi),%edx
  101e20:	89 04 24             	mov    %eax,(%esp)
  101e23:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e27:	89 54 24 08          	mov    %edx,0x8(%esp)
  101e2b:	e8 b0 ec ff ff       	call   100ae0 <kprintf>
  101e30:	89 45 bc             	mov    %eax,-0x44(%ebp)
    
    while (addr < (uintptr_t)modules[i].end) {
  101e33:	8b 45 d8             	mov    -0x28(%ebp),%eax
  101e36:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101e39:	8b 55 dc             	mov    -0x24(%ebp),%edx
  101e3c:	c1 e1 04             	shl    $0x4,%ecx
  101e3f:	01 ca                	add    %ecx,%edx
  101e41:	8b 4a 04             	mov    0x4(%edx),%ecx
  101e44:	39 c8                	cmp    %ecx,%eax
  101e46:	0f 83 3b 00 00 00    	jae    101e87 <vmm_init+0x2c7>
  101e4c:	b8 00 00 00 00       	mov    $0x0,%eax
      map_address_context(context->pagedir, (uint32_t) addr, (uint32_t) addr, 0);
  101e51:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101e54:	8b 09                	mov    (%ecx),%ecx
  101e56:	8b 55 d8             	mov    -0x28(%ebp),%edx
  101e59:	8b 75 d8             	mov    -0x28(%ebp),%esi
  101e5c:	89 0c 24             	mov    %ecx,(%esp)
  101e5f:	89 54 24 04          	mov    %edx,0x4(%esp)
  101e63:	89 74 24 08          	mov    %esi,0x8(%esp)
  101e67:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101e6e:	00 
  101e6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  101e72:	e8 59 fa ff ff       	call   1018d0 <map_address_context>
      addr += 0x1000;
  101e77:	8b 45 d8             	mov    -0x28(%ebp),%eax
  101e7a:	05 00 10 00 00       	add    $0x1000,%eax
  101e7f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    }
  101e82:	e9 ac ff ff ff       	jmp    101e33 <vmm_init+0x273>
  }
  101e87:	e9 00 00 00 00       	jmp    101e8c <vmm_init+0x2cc>

  map_address_context(context->pagedir, (uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_context(context->pagedir, (uint32_t) modules, (uint32_t) modules, 0);

  uint32_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  101e8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101e8f:	05 01 00 00 00       	add    $0x1,%eax
  101e94:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101e97:	e9 44 ff ff ff       	jmp    101de0 <vmm_init+0x220>
    }
  }
  
  //END CREATE CONTEXT ********************************************************
  
  vmm_activate_pagedir((uint32_t) context->pagedir);
  101e9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101e9f:	8b 00                	mov    (%eax),%eax
  101ea1:	89 04 24             	mov    %eax,(%esp)
  101ea4:	e8 f7 fc ff ff       	call   101ba0 <vmm_activate_pagedir>

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  101ea9:	0f 20 c0             	mov    %cr0,%eax
  101eac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  cr0 |= (1 << 31);
  101eaf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101eb2:	0d 00 00 00 80       	or     $0x80000000,%eax
  101eb7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  101eba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101ebd:	0f 22 c0             	mov    %eax,%cr0
  
  return (uint32_t) active_context->pagedir;
  101ec0:	a1 08 41 10 00       	mov    0x104108,%eax
  101ec5:	8b 00                	mov    (%eax),%eax
  101ec7:	83 c4 50             	add    $0x50,%esp
  101eca:	5e                   	pop    %esi
  101ecb:	5b                   	pop    %ebx
  101ecc:	5d                   	pop    %ebp
  101ecd:	c3                   	ret    
  101ece:	66 90                	xchg   %ax,%ax

00101ed0 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101ed0:	53                   	push   %ebx
  101ed1:	57                   	push   %edi
  101ed2:	56                   	push   %esi
  101ed3:	83 ec 10             	sub    $0x10,%esp
  101ed6:	0f b7 44 24 28       	movzwl 0x28(%esp),%eax
  101edb:	66 89 c1             	mov    %ax,%cx
  101ede:	8a 54 24 2c          	mov    0x2c(%esp),%dl
  101ee2:	8b 44 24 24          	mov    0x24(%esp),%eax
  101ee6:	8b 74 24 20          	mov    0x20(%esp),%esi
  101eea:	89 74 24 0c          	mov    %esi,0xc(%esp)
  101eee:	89 44 24 08          	mov    %eax,0x8(%esp)
  101ef2:	66 89 4c 24 06       	mov    %cx,0x6(%esp)
  101ef7:	88 54 24 05          	mov    %dl,0x5(%esp)
	unsigned long int handler = (unsigned long int) fn;
  101efb:	8b 44 24 08          	mov    0x8(%esp),%eax
  101eff:	89 04 24             	mov    %eax,(%esp)
	idt[i] = handler & 0xffffLL;
  101f02:	8b 74 24 0c          	mov    0xc(%esp),%esi
  101f06:	66 89 c1             	mov    %ax,%cx
  101f09:	0f b7 c1             	movzwl %cx,%eax
  101f0c:	89 04 f5 28 60 10 00 	mov    %eax,0x106028(,%esi,8)
  101f13:	c7 04 f5 2c 60 10 00 	movl   $0x0,0x10602c(,%esi,8)
  101f1a:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  101f1e:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101f22:	8b 34 c5 28 60 10 00 	mov    0x106028(,%eax,8),%esi
  101f29:	8b 3c c5 2c 60 10 00 	mov    0x10602c(,%eax,8),%edi
  101f30:	0f b7 5c 24 06       	movzwl 0x6(%esp),%ebx
  101f35:	89 3c c5 2c 60 10 00 	mov    %edi,0x10602c(,%eax,8)
  101f3c:	c1 e3 10             	shl    $0x10,%ebx
  101f3f:	09 de                	or     %ebx,%esi
  101f41:	89 34 c5 28 60 10 00 	mov    %esi,0x106028(,%eax,8)
	idt[i] |= (flags & 0xffLL) << 40;
  101f48:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101f4c:	8b 34 c5 2c 60 10 00 	mov    0x10602c(,%eax,8),%esi
  101f53:	8b 3c c5 28 60 10 00 	mov    0x106028(,%eax,8),%edi
  101f5a:	0f b6 5c 24 05       	movzbl 0x5(%esp),%ebx
  101f5f:	89 3c c5 28 60 10 00 	mov    %edi,0x106028(,%eax,8)
  101f66:	c1 e3 08             	shl    $0x8,%ebx
  101f69:	09 de                	or     %ebx,%esi
  101f6b:	89 34 c5 2c 60 10 00 	mov    %esi,0x10602c(,%eax,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  101f72:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101f76:	8b 34 c5 2c 60 10 00 	mov    0x10602c(,%eax,8),%esi
  101f7d:	8b 3c c5 28 60 10 00 	mov    0x106028(,%eax,8),%edi
  101f84:	0f b7 5c 24 02       	movzwl 0x2(%esp),%ebx
  101f89:	89 3c c5 28 60 10 00 	mov    %edi,0x106028(,%eax,8)
  101f90:	c1 e3 10             	shl    $0x10,%ebx
  101f93:	09 de                	or     %ebx,%esi
  101f95:	89 34 c5 2c 60 10 00 	mov    %esi,0x10602c(,%eax,8)
}
  101f9c:	83 c4 10             	add    $0x10,%esp
  101f9f:	5e                   	pop    %esi
  101fa0:	5f                   	pop    %edi
  101fa1:	5b                   	pop    %ebx
  101fa2:	c3                   	ret    
  101fa3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101faa:	84 00 00 00 00 00 

00101fb0 <init_idt>:

void init_idt() {
  101fb0:	55                   	push   %ebp
  101fb1:	89 e5                	mov    %esp,%ebp
		  unsigned short int limit;
		  void* pointer;
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};
  101fb3:	56                   	push   %esi
  101fb4:	81 ec 34 02 00 00    	sub    $0x234,%esp
  101fba:	a1 2a 50 10 00       	mov    0x10502a,%eax
  101fbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101fc2:	66 8b 0d 2e 50 10 00 	mov    0x10502e,%cx
  101fc9:	66 89 4d f4          	mov    %cx,-0xc(%ebp)

	int i = 0;
  101fcd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  101fd4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101fdb:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  101fe2:	0f 8d 1e 00 00 00    	jge    102006 <init_idt+0x56>
		handler_set[i] = 0;
  101fe8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101feb:	c7 04 85 28 62 10 00 	movl   $0x0,0x106228(,%eax,4)
  101ff2:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  101ff6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101ff9:	05 01 00 00 00       	add    $0x1,%eax
  101ffe:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102001:	e9 d5 ff ff ff       	jmp    101fdb <init_idt+0x2b>
  102006:	b8 20 00 00 00       	mov    $0x20,%eax
  10200b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  102010:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  102017:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10201e:	00 
  10201f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102022:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  102025:	e8 86 0b 00 00       	call   102bb0 <outb>
  10202a:	b8 21 00 00 00       	mov    $0x21,%eax
  10202f:	b9 20 00 00 00       	mov    $0x20,%ecx
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  102034:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10203b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102042:	00 
  102043:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102046:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  102049:	e8 62 0b 00 00       	call   102bb0 <outb>
  10204e:	b8 21 00 00 00       	mov    $0x21,%eax
  102053:	b9 04 00 00 00       	mov    $0x4,%ecx
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  102058:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10205f:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  102066:	00 
  102067:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10206a:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10206d:	e8 3e 0b 00 00       	call   102bb0 <outb>
  102072:	b8 21 00 00 00       	mov    $0x21,%eax
  102077:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0x21, 0x01); // ICW 4
  10207c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  102083:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10208a:	00 
  10208b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10208e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  102091:	e8 1a 0b 00 00       	call   102bb0 <outb>
  102096:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10209b:	b9 11 00 00 00       	mov    $0x11,%ecx

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  1020a0:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1020a7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1020ae:	00 
  1020af:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1020b2:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  1020b5:	e8 f6 0a 00 00       	call   102bb0 <outb>
  1020ba:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1020bf:	b9 28 00 00 00       	mov    $0x28,%ecx
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  1020c4:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1020cb:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  1020d2:	00 
  1020d3:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1020d6:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  1020d9:	e8 d2 0a 00 00       	call   102bb0 <outb>
  1020de:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1020e3:	b9 02 00 00 00       	mov    $0x2,%ecx
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  1020e8:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1020ef:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1020f6:	00 
  1020f7:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1020fa:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  1020fd:	e8 ae 0a 00 00       	call   102bb0 <outb>
  102102:	b8 a1 00 00 00       	mov    $0xa1,%eax
  102107:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0xa1, 0x01); // ICW 4
  10210c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  102113:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10211a:	00 
  10211b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10211e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  102121:	e8 8a 0a 00 00       	call   102bb0 <outb>
  102126:	b8 20 00 00 00       	mov    $0x20,%eax
  10212b:	b9 00 00 00 00       	mov    $0x0,%ecx

  outb(0x20, 0x0);
  102130:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  102137:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10213e:	00 
  10213f:	89 45 a8             	mov    %eax,-0x58(%ebp)
  102142:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  102145:	e8 66 0a 00 00       	call   102bb0 <outb>
  10214a:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10214f:	b9 00 00 00 00       	mov    $0x0,%ecx
  outb(0xa0, 0x0);
  102154:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10215b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102162:	00 
  102163:	89 45 a0             	mov    %eax,-0x60(%ebp)
  102166:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  102169:	e8 42 0a 00 00       	call   102bb0 <outb>
  10216e:	b8 00 00 00 00       	mov    $0x0,%eax
  102173:	8d 0d 50 08 10 00    	lea    0x100850,%ecx
  102179:	ba 08 00 00 00       	mov    $0x8,%edx
  10217e:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102183:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10218a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10218e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102195:	00 
  102196:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10219d:	00 
  10219e:	89 45 98             	mov    %eax,-0x68(%ebp)
  1021a1:	89 75 94             	mov    %esi,-0x6c(%ebp)
  1021a4:	89 55 90             	mov    %edx,-0x70(%ebp)
  1021a7:	e8 24 fd ff ff       	call   101ed0 <idt_set_entry>
  1021ac:	b8 01 00 00 00       	mov    $0x1,%eax
  1021b1:	8d 0d 59 08 10 00    	lea    0x100859,%ecx
  1021b7:	ba 08 00 00 00       	mov    $0x8,%edx
  1021bc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1021c1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1021c8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1021cc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1021d3:	00 
  1021d4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1021db:	00 
  1021dc:	89 45 8c             	mov    %eax,-0x74(%ebp)
  1021df:	89 75 88             	mov    %esi,-0x78(%ebp)
  1021e2:	89 55 84             	mov    %edx,-0x7c(%ebp)
  1021e5:	e8 e6 fc ff ff       	call   101ed0 <idt_set_entry>
  1021ea:	b8 02 00 00 00       	mov    $0x2,%eax
  1021ef:	8d 0d 62 08 10 00    	lea    0x100862,%ecx
  1021f5:	ba 08 00 00 00       	mov    $0x8,%edx
  1021fa:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1021ff:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  102206:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10220a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102211:	00 
  102212:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102219:	00 
  10221a:	89 45 80             	mov    %eax,-0x80(%ebp)
  10221d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  102223:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  102229:	e8 a2 fc ff ff       	call   101ed0 <idt_set_entry>
  10222e:	b8 03 00 00 00       	mov    $0x3,%eax
  102233:	8d 0d 6b 08 10 00    	lea    0x10086b,%ecx
  102239:	ba 08 00 00 00       	mov    $0x8,%edx
  10223e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102243:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  10224a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10224e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102255:	00 
  102256:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10225d:	00 
  10225e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  102264:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  10226a:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  102270:	e8 5b fc ff ff       	call   101ed0 <idt_set_entry>
  102275:	b8 04 00 00 00       	mov    $0x4,%eax
  10227a:	8d 0d 74 08 10 00    	lea    0x100874,%ecx
  102280:	ba 08 00 00 00       	mov    $0x8,%edx
  102285:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10228a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  102291:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102295:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10229c:	00 
  10229d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1022a4:	00 
  1022a5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  1022ab:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  1022b1:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  1022b7:	e8 14 fc ff ff       	call   101ed0 <idt_set_entry>
  1022bc:	b8 05 00 00 00       	mov    $0x5,%eax
  1022c1:	8d 0d 7d 08 10 00    	lea    0x10087d,%ecx
  1022c7:	ba 08 00 00 00       	mov    $0x8,%edx
  1022cc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1022d1:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1022d8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1022dc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1022e3:	00 
  1022e4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1022eb:	00 
  1022ec:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  1022f2:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  1022f8:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  1022fe:	e8 cd fb ff ff       	call   101ed0 <idt_set_entry>
  102303:	b8 06 00 00 00       	mov    $0x6,%eax
  102308:	8d 0d 86 08 10 00    	lea    0x100886,%ecx
  10230e:	ba 08 00 00 00       	mov    $0x8,%edx
  102313:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102318:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10231f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102323:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10232a:	00 
  10232b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102332:	00 
  102333:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  102339:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  10233f:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  102345:	e8 86 fb ff ff       	call   101ed0 <idt_set_entry>
  10234a:	b8 07 00 00 00       	mov    $0x7,%eax
  10234f:	8d 0d 8f 08 10 00    	lea    0x10088f,%ecx
  102355:	ba 08 00 00 00       	mov    $0x8,%edx
  10235a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10235f:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  102366:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10236a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102371:	00 
  102372:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102379:	00 
  10237a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  102380:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  102386:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10238c:	e8 3f fb ff ff       	call   101ed0 <idt_set_entry>
  102391:	b8 08 00 00 00       	mov    $0x8,%eax
  102396:	8d 0d 98 08 10 00    	lea    0x100898,%ecx
  10239c:	ba 8e 00 00 00       	mov    $0x8e,%edx
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1023a1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1023a8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1023ac:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1023b3:	00 
  1023b4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1023bb:	00 
  1023bc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  1023c2:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  1023c8:	e8 03 fb ff ff       	call   101ed0 <idt_set_entry>
  1023cd:	b8 09 00 00 00       	mov    $0x9,%eax
  1023d2:	8d 0d 9f 08 10 00    	lea    0x10089f,%ecx
  1023d8:	ba 08 00 00 00       	mov    $0x8,%edx
  1023dd:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1023e2:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  1023e9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1023ed:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1023f4:	00 
  1023f5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1023fc:	00 
  1023fd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  102403:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  102409:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10240f:	e8 bc fa ff ff       	call   101ed0 <idt_set_entry>
  102414:	b8 0a 00 00 00       	mov    $0xa,%eax
  102419:	8d 0d a8 08 10 00    	lea    0x1008a8,%ecx
  10241f:	ba 08 00 00 00       	mov    $0x8,%edx
  102424:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102429:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  102430:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102434:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10243b:	00 
  10243c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102443:	00 
  102444:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  10244a:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  102450:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  102456:	e8 75 fa ff ff       	call   101ed0 <idt_set_entry>
  10245b:	b8 0b 00 00 00       	mov    $0xb,%eax
  102460:	8d 0d af 08 10 00    	lea    0x1008af,%ecx
  102466:	ba 08 00 00 00       	mov    $0x8,%edx
  10246b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102470:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  102477:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10247b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102482:	00 
  102483:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10248a:	00 
  10248b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  102491:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  102497:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10249d:	e8 2e fa ff ff       	call   101ed0 <idt_set_entry>
  1024a2:	b8 0c 00 00 00       	mov    $0xc,%eax
  1024a7:	8d 0d b6 08 10 00    	lea    0x1008b6,%ecx
  1024ad:	ba 08 00 00 00       	mov    $0x8,%edx
  1024b2:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1024b7:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  1024be:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1024c2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1024c9:	00 
  1024ca:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1024d1:	00 
  1024d2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  1024d8:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  1024de:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  1024e4:	e8 e7 f9 ff ff       	call   101ed0 <idt_set_entry>
  1024e9:	b8 0d 00 00 00       	mov    $0xd,%eax
  1024ee:	8d 0d bd 08 10 00    	lea    0x1008bd,%ecx
  1024f4:	ba 08 00 00 00       	mov    $0x8,%edx
  1024f9:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1024fe:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  102505:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102509:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102510:	00 
  102511:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102518:	00 
  102519:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10251f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  102525:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  10252b:	e8 a0 f9 ff ff       	call   101ed0 <idt_set_entry>
  102530:	b8 0e 00 00 00       	mov    $0xe,%eax
  102535:	8d 0d c4 08 10 00    	lea    0x1008c4,%ecx
  10253b:	ba 08 00 00 00       	mov    $0x8,%edx
  102540:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102545:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  10254c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102550:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102557:	00 
  102558:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10255f:	00 
  102560:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  102566:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  10256c:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  102572:	e8 59 f9 ff ff       	call   101ed0 <idt_set_entry>
  102577:	b8 0f 00 00 00       	mov    $0xf,%eax
  10257c:	8d 0d c8 08 10 00    	lea    0x1008c8,%ecx
  102582:	ba 08 00 00 00       	mov    $0x8,%edx
  102587:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10258c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  102593:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102597:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10259e:	00 
  10259f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1025a6:	00 
  1025a7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  1025ad:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  1025b3:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  1025b9:	e8 12 f9 ff ff       	call   101ed0 <idt_set_entry>
  1025be:	b8 10 00 00 00       	mov    $0x10,%eax
  1025c3:	8d 0d ce 08 10 00    	lea    0x1008ce,%ecx
  1025c9:	ba 08 00 00 00       	mov    $0x8,%edx
  1025ce:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1025d3:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1025da:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1025de:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1025e5:	00 
  1025e6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1025ed:	00 
  1025ee:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  1025f4:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  1025fa:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  102600:	e8 cb f8 ff ff       	call   101ed0 <idt_set_entry>
  102605:	b8 11 00 00 00       	mov    $0x11,%eax
  10260a:	8d 0d d4 08 10 00    	lea    0x1008d4,%ecx
  102610:	ba 08 00 00 00       	mov    $0x8,%edx
  102615:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10261a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  102621:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102625:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10262c:	00 
  10262d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102634:	00 
  102635:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  10263b:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  102641:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  102647:	e8 84 f8 ff ff       	call   101ed0 <idt_set_entry>
  10264c:	b8 12 00 00 00       	mov    $0x12,%eax
  102651:	8d 0d d8 08 10 00    	lea    0x1008d8,%ecx
  102657:	ba 08 00 00 00       	mov    $0x8,%edx
  10265c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102661:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  102668:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10266c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102673:	00 
  102674:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10267b:	00 
  10267c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  102682:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  102688:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10268e:	e8 3d f8 ff ff       	call   101ed0 <idt_set_entry>
  102693:	b8 20 00 00 00       	mov    $0x20,%eax
  102698:	8d 0d de 08 10 00    	lea    0x1008de,%ecx
  10269e:	ba 08 00 00 00       	mov    $0x8,%edx
  1026a3:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1026a8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1026af:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1026b3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1026ba:	00 
  1026bb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1026c2:	00 
  1026c3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  1026c9:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  1026cf:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  1026d5:	e8 f6 f7 ff ff       	call   101ed0 <idt_set_entry>
  1026da:	b8 21 00 00 00       	mov    $0x21,%eax
  1026df:	8d 0d e4 08 10 00    	lea    0x1008e4,%ecx
  1026e5:	ba 08 00 00 00       	mov    $0x8,%edx
  1026ea:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1026ef:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1026f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1026fa:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102701:	00 
  102702:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102709:	00 
  10270a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  102710:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  102716:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  10271c:	e8 af f7 ff ff       	call   101ed0 <idt_set_entry>
  102721:	b8 22 00 00 00       	mov    $0x22,%eax
  102726:	8d 0d ea 08 10 00    	lea    0x1008ea,%ecx
  10272c:	ba 08 00 00 00       	mov    $0x8,%edx
  102731:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(34, intr_stub_34, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102736:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  10273d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102741:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102748:	00 
  102749:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102750:	00 
  102751:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  102757:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  10275d:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  102763:	e8 68 f7 ff ff       	call   101ed0 <idt_set_entry>
  102768:	b8 23 00 00 00       	mov    $0x23,%eax
  10276d:	8d 0d f0 08 10 00    	lea    0x1008f0,%ecx
  102773:	ba 08 00 00 00       	mov    $0x8,%edx
  102778:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(35, intr_stub_35, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10277d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  102784:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102788:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10278f:	00 
  102790:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102797:	00 
  102798:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  10279e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  1027a4:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  1027aa:	e8 21 f7 ff ff       	call   101ed0 <idt_set_entry>
  1027af:	b8 24 00 00 00       	mov    $0x24,%eax
  1027b4:	8d 0d f6 08 10 00    	lea    0x1008f6,%ecx
  1027ba:	ba 08 00 00 00       	mov    $0x8,%edx
  1027bf:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(36, intr_stub_36, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1027c4:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  1027cb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1027cf:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1027d6:	00 
  1027d7:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1027de:	00 
  1027df:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  1027e5:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  1027eb:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  1027f1:	e8 da f6 ff ff       	call   101ed0 <idt_set_entry>
  1027f6:	b8 25 00 00 00       	mov    $0x25,%eax
  1027fb:	8d 0d fc 08 10 00    	lea    0x1008fc,%ecx
  102801:	ba 08 00 00 00       	mov    $0x8,%edx
  102806:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(37, intr_stub_37, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10280b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  102812:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102816:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10281d:	00 
  10281e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102825:	00 
  102826:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  10282c:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  102832:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  102838:	e8 93 f6 ff ff       	call   101ed0 <idt_set_entry>
  10283d:	b8 26 00 00 00       	mov    $0x26,%eax
  102842:	8d 0d 02 09 10 00    	lea    0x100902,%ecx
  102848:	ba 08 00 00 00       	mov    $0x8,%edx
  10284d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(38, intr_stub_38, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102852:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  102859:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10285d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102864:	00 
  102865:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10286c:	00 
  10286d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  102873:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  102879:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  10287f:	e8 4c f6 ff ff       	call   101ed0 <idt_set_entry>
  102884:	b8 27 00 00 00       	mov    $0x27,%eax
  102889:	8d 0d 08 09 10 00    	lea    0x100908,%ecx
  10288f:	ba 08 00 00 00       	mov    $0x8,%edx
  102894:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(39, intr_stub_39, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102899:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  1028a0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1028a4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1028ab:	00 
  1028ac:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1028b3:	00 
  1028b4:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  1028ba:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  1028c0:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  1028c6:	e8 05 f6 ff ff       	call   101ed0 <idt_set_entry>
  1028cb:	b8 28 00 00 00       	mov    $0x28,%eax
  1028d0:	8d 0d 0e 09 10 00    	lea    0x10090e,%ecx
  1028d6:	ba 08 00 00 00       	mov    $0x8,%edx
  1028db:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(40, intr_stub_40, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1028e0:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  1028e7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1028eb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1028f2:	00 
  1028f3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1028fa:	00 
  1028fb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  102901:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  102907:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  10290d:	e8 be f5 ff ff       	call   101ed0 <idt_set_entry>
  102912:	b8 29 00 00 00       	mov    $0x29,%eax
  102917:	8d 0d 14 09 10 00    	lea    0x100914,%ecx
  10291d:	ba 08 00 00 00       	mov    $0x8,%edx
  102922:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(41, intr_stub_41, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102927:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  10292e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102932:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102939:	00 
  10293a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102941:	00 
  102942:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  102948:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  10294e:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  102954:	e8 77 f5 ff ff       	call   101ed0 <idt_set_entry>
  102959:	b8 2a 00 00 00       	mov    $0x2a,%eax
  10295e:	8d 0d 1a 09 10 00    	lea    0x10091a,%ecx
  102964:	ba 08 00 00 00       	mov    $0x8,%edx
  102969:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(42, intr_stub_42, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10296e:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  102975:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102979:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102980:	00 
  102981:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102988:	00 
  102989:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  10298f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  102995:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  10299b:	e8 30 f5 ff ff       	call   101ed0 <idt_set_entry>
  1029a0:	b8 2b 00 00 00       	mov    $0x2b,%eax
  1029a5:	8d 0d 20 09 10 00    	lea    0x100920,%ecx
  1029ab:	ba 08 00 00 00       	mov    $0x8,%edx
  1029b0:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(43, intr_stub_43, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1029b5:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  1029bc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029c0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1029c7:	00 
  1029c8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1029cf:	00 
  1029d0:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  1029d6:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  1029dc:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  1029e2:	e8 e9 f4 ff ff       	call   101ed0 <idt_set_entry>
  1029e7:	b8 2c 00 00 00       	mov    $0x2c,%eax
  1029ec:	8d 0d 26 09 10 00    	lea    0x100926,%ecx
  1029f2:	ba 08 00 00 00       	mov    $0x8,%edx
  1029f7:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(44, intr_stub_44, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1029fc:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  102a03:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a07:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102a0e:	00 
  102a0f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102a16:	00 
  102a17:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  102a1d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  102a23:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  102a29:	e8 a2 f4 ff ff       	call   101ed0 <idt_set_entry>
  102a2e:	b8 2d 00 00 00       	mov    $0x2d,%eax
  102a33:	8d 0d 2c 09 10 00    	lea    0x10092c,%ecx
  102a39:	ba 08 00 00 00       	mov    $0x8,%edx
  102a3e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(45, intr_stub_45, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102a43:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  102a4a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a4e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102a55:	00 
  102a56:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102a5d:	00 
  102a5e:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  102a64:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  102a6a:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  102a70:	e8 5b f4 ff ff       	call   101ed0 <idt_set_entry>
  102a75:	b8 2e 00 00 00       	mov    $0x2e,%eax
  102a7a:	8d 0d 32 09 10 00    	lea    0x100932,%ecx
  102a80:	ba 08 00 00 00       	mov    $0x8,%edx
  102a85:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(46, intr_stub_46, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102a8a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  102a91:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a95:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102a9c:	00 
  102a9d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102aa4:	00 
  102aa5:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  102aab:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  102ab1:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  102ab7:	e8 14 f4 ff ff       	call   101ed0 <idt_set_entry>
  102abc:	b8 2f 00 00 00       	mov    $0x2f,%eax
  102ac1:	8d 0d 38 09 10 00    	lea    0x100938,%ecx
  102ac7:	ba 08 00 00 00       	mov    $0x8,%edx
  102acc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(47, intr_stub_47, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102ad1:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  102ad8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102adc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102ae3:	00 
  102ae4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102aeb:	00 
  102aec:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  102af2:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  102af8:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  102afe:	e8 cd f3 ff ff       	call   101ed0 <idt_set_entry>
  102b03:	b8 30 00 00 00       	mov    $0x30,%eax
  102b08:	8d 0d 3e 09 10 00    	lea    0x10093e,%ecx
  102b0e:	ba 08 00 00 00       	mov    $0x8,%edx
  102b13:	be ee 00 00 00       	mov    $0xee,%esi

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  102b18:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  102b1f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b23:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102b2a:	00 
  102b2b:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  102b32:	00 
  102b33:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  102b39:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  102b3f:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  102b45:	e8 86 f3 ff ff       	call   101ed0 <idt_set_entry>
  102b4a:	b8 05 00 00 00       	mov    $0x5,%eax
  102b4f:	8d 0d 0c 41 10 00    	lea    0x10410c,%ecx
  102b55:	ba 80 00 00 00       	mov    $0x80,%edx
  102b5a:	be e9 00 00 00       	mov    $0xe9,%esi

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  102b5f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  102b66:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b6a:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  102b71:	00 
  102b72:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  102b79:	00 
  102b7a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  102b80:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  102b86:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  102b8c:	e8 8f e6 ff ff       	call   101220 <set_gdt_entry>
  102b91:	b8 28 00 00 00       	mov    $0x28,%eax

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  102b96:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  102b99:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  102b9d:	fb                   	sti    
}
  102b9e:	81 c4 34 02 00 00    	add    $0x234,%esp
  102ba4:	5e                   	pop    %esi
  102ba5:	5d                   	pop    %ebp
  102ba6:	c3                   	ret    
  102ba7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  102bae:	00 00 

00102bb0 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  102bb0:	50                   	push   %eax
  102bb1:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
  102bb6:	66 89 c1             	mov    %ax,%cx
  102bb9:	8a 54 24 0c          	mov    0xc(%esp),%dl
  102bbd:	66 89 4c 24 02       	mov    %cx,0x2(%esp)
  102bc2:	88 54 24 01          	mov    %dl,0x1(%esp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  102bc6:	8a 44 24 01          	mov    0x1(%esp),%al
  102bca:	66 8b 54 24 02       	mov    0x2(%esp),%dx
  102bcf:	ee                   	out    %al,(%dx)
}
  102bd0:	58                   	pop    %eax
  102bd1:	c3                   	ret    
  102bd2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102bd9:	1f 84 00 00 00 00 00 

00102be0 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  102be0:	83 ec 08             	sub    $0x8,%esp
  102be3:	8b 44 24 10          	mov    0x10(%esp),%eax
  102be7:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  102beb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102bef:	89 04 24             	mov    %eax,(%esp)
	handlers[i] = fn;
  102bf2:	8b 04 24             	mov    (%esp),%eax
  102bf5:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  102bf9:	89 04 8d 28 63 10 00 	mov    %eax,0x106328(,%ecx,4)
	handler_set[i] = 1;
  102c00:	8b 44 24 04          	mov    0x4(%esp),%eax
  102c04:	c7 04 85 28 62 10 00 	movl   $0x1,0x106228(,%eax,4)
  102c0b:	01 00 00 00 
}
  102c0f:	83 c4 08             	add    $0x8,%esp
  102c12:	c3                   	ret    
  102c13:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102c1a:	84 00 00 00 00 00 

00102c20 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  102c20:	55                   	push   %ebp
  102c21:	89 e5                	mov    %esp,%ebp
  102c23:	83 ec 28             	sub    $0x28,%esp
  102c26:	8b 45 08             	mov    0x8(%ebp),%eax
  102c29:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct cpu_state* new_cpu = cpu;
  102c2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102c2f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if (cpu->intr <= 0x1f) {
  102c32:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102c35:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  102c3c:	0f 87 10 00 00 00    	ja     102c52 <handle_interrupt+0x32>
    show_cod(cpu);
  102c42:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102c45:	89 04 24             	mov    %eax,(%esp)
  102c48:	e8 33 dd ff ff       	call   100980 <show_cod>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  102c4d:	e9 16 01 00 00       	jmp    102d68 <handle_interrupt+0x148>
  102c52:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102c55:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  102c5c:	0f 82 b4 00 00 00    	jb     102d16 <handle_interrupt+0xf6>
  102c62:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102c65:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  102c6c:	0f 87 a4 00 00 00    	ja     102d16 <handle_interrupt+0xf6>
    if (cpu->intr >= 0x28) {
  102c72:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102c75:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  102c7c:	0f 82 24 00 00 00    	jb     102ca6 <handle_interrupt+0x86>
  102c82:	b8 a0 00 00 00       	mov    $0xa0,%eax
  102c87:	b9 20 00 00 00       	mov    $0x20,%ecx
      outb(0xa0, 0x20);
  102c8c:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  102c93:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102c9a:	00 
  102c9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102c9e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102ca1:	e8 0a ff ff ff       	call   102bb0 <outb>
    }
    if (cpu->intr == 0x20) {
  102ca6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102ca9:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  102cb0:	0f 85 1b 00 00 00    	jne    102cd1 <handle_interrupt+0xb1>
      new_cpu = schedule(cpu);
  102cb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102cb9:	89 04 24             	mov    %eax,(%esp)
  102cbc:	e8 bf 03 00 00       	call   103080 <schedule>
  102cc1:	89 45 f8             	mov    %eax,-0x8(%ebp)
      tss[1] = (uint32_t) (new_cpu + 1);
  102cc4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102cc7:	05 38 00 00 00       	add    $0x38,%eax
  102ccc:	a3 10 41 10 00       	mov    %eax,0x104110
  102cd1:	b8 20 00 00 00       	mov    $0x20,%eax
    }
    outb(0x20, 0x20);
  102cd6:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  102cdd:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102ce4:	00 
  102ce5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102ce8:	e8 c3 fe ff ff       	call   102bb0 <outb>
		if(handler_set[cpu->intr]) {
  102ced:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102cf0:	8b 40 1c             	mov    0x1c(%eax),%eax
  102cf3:	81 3c 85 28 62 10 00 	cmpl   $0x0,0x106228(,%eax,4)
  102cfa:	00 00 00 00 
  102cfe:	0f 84 0d 00 00 00    	je     102d11 <handle_interrupt+0xf1>
			handlers[cpu->intr]();
  102d04:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102d07:	8b 40 1c             	mov    0x1c(%eax),%eax
  102d0a:	ff 14 85 28 63 10 00 	call   *0x106328(,%eax,4)
		}
  } else if (cpu->intr == 0x30) {
  102d11:	e9 4d 00 00 00       	jmp    102d63 <handle_interrupt+0x143>
  102d16:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102d19:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  102d20:	0f 85 20 00 00 00    	jne    102d46 <handle_interrupt+0x126>
		new_cpu = syscall(new_cpu);
  102d26:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d29:	89 04 24             	mov    %eax,(%esp)
  102d2c:	e8 ff e1 ff ff       	call   100f30 <syscall>
  102d31:	89 45 f8             	mov    %eax,-0x8(%ebp)
    tss[1] = (uint32_t) (new_cpu + 1);
  102d34:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d37:	05 38 00 00 00       	add    $0x38,%eax
  102d3c:	a3 10 41 10 00       	mov    %eax,0x104110
  } else {
  102d41:	e9 18 00 00 00       	jmp    102d5e <handle_interrupt+0x13e>
  102d46:	8d 05 06 52 10 00    	lea    0x105206,%eax
    kprintf("Unbekannter Interrupt\n");
  102d4c:	89 04 24             	mov    %eax,(%esp)
  102d4f:	e8 8c dd ff ff       	call   100ae0 <kprintf>
  102d54:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  102d57:	fa                   	cli    
  102d58:	f4                   	hlt    
    }
  102d59:	e9 f9 ff ff ff       	jmp    102d57 <handle_interrupt+0x137>
  102d5e:	e9 00 00 00 00       	jmp    102d63 <handle_interrupt+0x143>
  102d63:	e9 00 00 00 00       	jmp    102d68 <handle_interrupt+0x148>
  }  

  return new_cpu;
  102d68:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d6b:	83 c4 28             	add    $0x28,%esp
  102d6e:	5d                   	pop    %ebp
  102d6f:	c3                   	ret    

00102d70 <memset>:
#include "vmm.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n)
{
  102d70:	83 ec 10             	sub    $0x10,%esp
  102d73:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  102d77:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  102d7b:	8b 54 24 14          	mov    0x14(%esp),%edx
  102d7f:	89 54 24 0c          	mov    %edx,0xc(%esp)
  102d83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  102d87:	89 44 24 04          	mov    %eax,0x4(%esp)
    unsigned char* p = buf;
  102d8b:	8b 44 24 0c          	mov    0xc(%esp),%eax
  102d8f:	89 04 24             	mov    %eax,(%esp)

    while (n--) {
  102d92:	8b 44 24 04          	mov    0x4(%esp),%eax
  102d96:	89 c1                	mov    %eax,%ecx
  102d98:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102d9e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102da2:	3d 00 00 00 00       	cmp    $0x0,%eax
  102da7:	0f 84 1b 00 00 00    	je     102dc8 <memset+0x58>
        *p++ = c;
  102dad:	8b 44 24 08          	mov    0x8(%esp),%eax
  102db1:	88 c1                	mov    %al,%cl
  102db3:	8b 04 24             	mov    (%esp),%eax
  102db6:	89 c2                	mov    %eax,%edx
  102db8:	81 c2 01 00 00 00    	add    $0x1,%edx
  102dbe:	89 14 24             	mov    %edx,(%esp)
  102dc1:	88 08                	mov    %cl,(%eax)
    }
  102dc3:	e9 ca ff ff ff       	jmp    102d92 <memset+0x22>

    return buf;
  102dc8:	8b 44 24 0c          	mov    0xc(%esp),%eax
  102dcc:	83 c4 10             	add    $0x10,%esp
  102dcf:	c3                   	ret    

00102dd0 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n)
{
  102dd0:	83 ec 14             	sub    $0x14,%esp
  102dd3:	8b 44 24 20          	mov    0x20(%esp),%eax
  102dd7:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  102ddb:	8b 54 24 18          	mov    0x18(%esp),%edx
  102ddf:	89 54 24 10          	mov    %edx,0x10(%esp)
  102de3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  102de7:	89 44 24 08          	mov    %eax,0x8(%esp)
    unsigned char* d = dest;
  102deb:	8b 44 24 10          	mov    0x10(%esp),%eax
  102def:	89 44 24 04          	mov    %eax,0x4(%esp)
    const unsigned char* s = src;
  102df3:	8b 44 24 0c          	mov    0xc(%esp),%eax
  102df7:	89 04 24             	mov    %eax,(%esp)

    while (n--) {
  102dfa:	8b 44 24 08          	mov    0x8(%esp),%eax
  102dfe:	89 c1                	mov    %eax,%ecx
  102e00:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102e06:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  102e0a:	3d 00 00 00 00       	cmp    $0x0,%eax
  102e0f:	0f 84 27 00 00 00    	je     102e3c <memcpy+0x6c>
        *d++ = *s++;
  102e15:	8b 04 24             	mov    (%esp),%eax
  102e18:	89 c1                	mov    %eax,%ecx
  102e1a:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102e20:	89 0c 24             	mov    %ecx,(%esp)
  102e23:	8a 10                	mov    (%eax),%dl
  102e25:	8b 44 24 04          	mov    0x4(%esp),%eax
  102e29:	89 c1                	mov    %eax,%ecx
  102e2b:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102e31:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102e35:	88 10                	mov    %dl,(%eax)
    }
  102e37:	e9 be ff ff ff       	jmp    102dfa <memcpy+0x2a>

    return dest;
  102e3c:	8b 44 24 10          	mov    0x10(%esp),%eax
  102e40:	83 c4 14             	add    $0x14,%esp
  102e43:	c3                   	ret    
  102e44:	66 90                	xchg   %ax,%ax
  102e46:	66 90                	xchg   %ax,%ax
  102e48:	66 90                	xchg   %ax,%ax
  102e4a:	66 90                	xchg   %ax,%ax
  102e4c:	66 90                	xchg   %ax,%ax
  102e4e:	66 90                	xchg   %ax,%ax

00102e50 <enable_scheduling>:

struct cpu_state* current_pdir_cpu = (void*) STATIC_ALLOC_VADDR + 4096 - sizeof(struct cpu_state);
uint32_t* next_pagedir = (void*) STATIC_ALLOC_VADDR + 0x2000;

void enable_scheduling(void) {
  scheduling_enabled = 1;
  102e50:	c7 05 2c 64 10 00 01 	movl   $0x1,0x10642c
  102e57:	00 00 00 
}
  102e5a:	c3                   	ret    
  102e5b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102e60 <init_task>:

uint32_t init_task(uint32_t task_pagedir, void* entry)
{
  102e60:	55                   	push   %ebp
  102e61:	89 e5                	mov    %esp,%ebp
  102e63:	57                   	push   %edi
  102e64:	56                   	push   %esi
  102e65:	81 ec a0 00 00 00    	sub    $0xa0,%esp
  102e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
  102e6e:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102e71:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102e74:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t old_fpd = first_pagedir;
  102e77:	a1 28 64 10 00       	mov    0x106428,%eax
  102e7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t old_pagedir = vmm_get_current_pagedir();
  102e7f:	e8 2c e6 ff ff       	call   1014b0 <vmm_get_current_pagedir>
  102e84:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t task_next_pagedir = 0;    
  102e87:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  
  if(first_pagedir == 0) {
  102e8e:	81 3d 28 64 10 00 00 	cmpl   $0x0,0x106428
  102e95:	00 00 00 
  102e98:	0f 85 0d 00 00 00    	jne    102eab <init_task+0x4b>
    first_pagedir = task_pagedir;
  102e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ea1:	a3 28 64 10 00       	mov    %eax,0x106428
  }
  102ea6:	e9 10 00 00 00       	jmp    102ebb <init_task+0x5b>
  else
  {
    task_next_pagedir = first_pagedir;
  102eab:	a1 28 64 10 00       	mov    0x106428,%eax
  102eb0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    first_pagedir = task_pagedir;
  102eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102eb6:	a3 28 64 10 00       	mov    %eax,0x106428
  }
  
  vmm_activate_pagedir(task_pagedir);
  102ebb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ebe:	89 04 24             	mov    %eax,(%esp)
  102ec1:	e8 da ec ff ff       	call   101ba0 <vmm_activate_pagedir>
  102ec6:	b8 00 00 00 00       	mov    $0x0,%eax
  
                        vmm_alloc_static(0x0000, 0);
  102ecb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102ed2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ed9:	00 
  102eda:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102edd:	e8 1e ec ff ff       	call   101b00 <vmm_alloc_static>
  102ee2:	b9 00 10 00 00       	mov    $0x1000,%ecx
  102ee7:	ba 04 00 00 00       	mov    $0x4,%edx
  uint8_t* user_stack = vmm_alloc_static(0x1000, PT_PUBLIC);
  102eec:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  102ef3:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  102efa:	00 
  102efb:	89 45 a0             	mov    %eax,-0x60(%ebp)
  102efe:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  102f01:	89 55 98             	mov    %edx,-0x68(%ebp)
  102f04:	e8 f7 eb ff ff       	call   101b00 <vmm_alloc_static>
  102f09:	b9 00 20 00 00       	mov    $0x2000,%ecx
  102f0e:	ba 00 00 00 00       	mov    $0x0,%edx
  102f13:	89 45 e0             	mov    %eax,-0x20(%ebp)
                        vmm_alloc_static(0x2000, 0);
  102f16:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  102f1d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f24:	00 
  102f25:	89 55 94             	mov    %edx,-0x6c(%ebp)
  102f28:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  102f2b:	e8 d0 eb ff ff       	call   101b00 <vmm_alloc_static>
  102f30:	b9 38 00 00 00       	mov    $0x38,%ecx
  102f35:	8d 55 a8             	lea    -0x58(%ebp),%edx
  
  *next_pagedir = task_next_pagedir;
  102f38:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  102f3b:	8b 3d 90 41 10 00    	mov    0x104190,%edi
  102f41:	89 37                	mov    %esi,(%edi)
      /* Ring-3-Segmentregister */
      .cs  = 0x18 | 0x03,
      .ss  = 0x20 | 0x03,
      
      .eflags = 0x202,
  };
  102f43:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
  102f4a:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  102f51:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  102f58:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  102f5f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  102f66:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  102f6d:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  102f74:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  102f7b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  102f82:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102f85:	89 75 cc             	mov    %esi,-0x34(%ebp)
  102f88:	c7 45 d0 1b 00 00 00 	movl   $0x1b,-0x30(%ebp)
  102f8f:	c7 45 d4 02 02 00 00 	movl   $0x202,-0x2c(%ebp)
  102f96:	8b 75 e0             	mov    -0x20(%ebp),%esi
  102f99:	81 c6 00 10 00 00    	add    $0x1000,%esi
  102f9f:	89 75 d8             	mov    %esi,-0x28(%ebp)
  102fa2:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%ebp)
      
  *current_pdir_cpu = new_state;
  102fa9:	8b 35 8c 41 10 00    	mov    0x10418c,%esi
  102faf:	89 34 24             	mov    %esi,(%esp)
  102fb2:	89 54 24 04          	mov    %edx,0x4(%esp)
  102fb6:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  102fbd:	00 
  102fbe:	89 45 8c             	mov    %eax,-0x74(%ebp)
  102fc1:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  102fc4:	e8 07 fe ff ff       	call   102dd0 <memcpy>
  
  vmm_activate_pagedir(old_pagedir);
  102fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102fcc:	89 04 24             	mov    %eax,(%esp)
  102fcf:	e8 cc eb ff ff       	call   101ba0 <vmm_activate_pagedir>
  
  if(old_fpd == 0) {
  102fd4:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  102fdb:	0f 85 8b 00 00 00    	jne    10306c <init_task+0x20c>
  102fe1:	b8 00 00 00 00       	mov    $0x0,%eax
    vmm_alloc_static(0x0000, 0);
  102fe6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102fed:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ff4:	00 
  102ff5:	89 45 84             	mov    %eax,-0x7c(%ebp)
  102ff8:	e8 03 eb ff ff       	call   101b00 <vmm_alloc_static>
  102ffd:	b9 00 10 00 00       	mov    $0x1000,%ecx
  103002:	ba 04 00 00 00       	mov    $0x4,%edx
    vmm_alloc_static(0x1000, PT_PUBLIC);
  103007:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  10300e:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  103015:	00 
  103016:	89 45 80             	mov    %eax,-0x80(%ebp)
  103019:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  10301f:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  103025:	e8 d6 ea ff ff       	call   101b00 <vmm_alloc_static>
  10302a:	b9 00 20 00 00       	mov    $0x2000,%ecx
  10302f:	ba 00 00 00 00       	mov    $0x0,%edx
    vmm_alloc_static(0x2000, 0);
  103034:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  10303b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103042:	00 
  103043:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  103049:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  10304f:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  103055:	e8 a6 ea ff ff       	call   101b00 <vmm_alloc_static>
    *next_pagedir = 0;
  10305a:	8b 0d 90 41 10 00    	mov    0x104190,%ecx
  103060:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
  103066:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  }
  
  return task_pagedir;
  10306c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10306f:	81 c4 a0 00 00 00    	add    $0xa0,%esp
  103075:	5e                   	pop    %esi
  103076:	5f                   	pop    %edi
  103077:	5d                   	pop    %ebp
  103078:	c3                   	ret    
  103079:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00103080 <schedule>:
}

struct cpu_state* schedule(struct cpu_state* cpu)
{
  103080:	55                   	push   %ebp
  103081:	89 e5                	mov    %esp,%ebp
  103083:	83 ec 18             	sub    $0x18,%esp
  103086:	8b 45 08             	mov    0x8(%ebp),%eax
  103089:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t newCPU = 0;
  10308c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  if(first_pagedir != 0 && scheduling_enabled) {  
  103093:	81 3d 28 64 10 00 00 	cmpl   $0x0,0x106428
  10309a:	00 00 00 
  10309d:	0f 84 41 00 00 00    	je     1030e4 <schedule+0x64>
  1030a3:	81 3d 2c 64 10 00 00 	cmpl   $0x0,0x10642c
  1030aa:	00 00 00 
  1030ad:	0f 84 31 00 00 00    	je     1030e4 <schedule+0x64>
    uint32_t next = *next_pagedir;
  1030b3:	a1 90 41 10 00       	mov    0x104190,%eax
  1030b8:	8b 00                	mov    (%eax),%eax
  1030ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next == 0) next = first_pagedir;
  1030bd:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1030c4:	0f 85 08 00 00 00    	jne    1030d2 <schedule+0x52>
  1030ca:	a1 28 64 10 00       	mov    0x106428,%eax
  1030cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    newCPU = 1;            
  1030d2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    vmm_activate_pagedir(next);
  1030d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030dc:	89 04 24             	mov    %eax,(%esp)
  1030df:	e8 bc ea ff ff       	call   101ba0 <vmm_activate_pagedir>
  }
  
  if(newCPU != 0) return current_pdir_cpu;
  1030e4:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1030eb:	0f 84 0d 00 00 00    	je     1030fe <schedule+0x7e>
  1030f1:	a1 8c 41 10 00       	mov    0x10418c,%eax
  1030f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1030f9:	e9 06 00 00 00       	jmp    103104 <schedule+0x84>
  return cpu;
  1030fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103101:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  103104:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103107:	83 c4 18             	add    $0x18,%esp
  10310a:	5d                   	pop    %ebp
  10310b:	c3                   	ret    
  10310c:	66 90                	xchg   %ax,%ax
  10310e:	66 90                	xchg   %ax,%ax

00103110 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  103110:	55                   	push   %ebp
  103111:	89 e5                	mov    %esp,%ebp
  103113:	83 ec 28             	sub    $0x28,%esp
  103116:	8b 45 08             	mov    0x8(%ebp),%eax
  103119:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10311c:	e8 6f d9 ff ff       	call   100a90 <clrscr>
  pmm_init(mb_info);
  103121:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103124:	89 04 24             	mov    %eax,(%esp)
  103127:	e8 74 d5 ff ff       	call   1006a0 <pmm_init>
  10312c:	8d 05 1d 52 10 00    	lea    0x10521d,%eax
  103132:	8d 0d 40 52 10 00    	lea    0x105240,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  103138:	89 04 24             	mov    %eax,(%esp)
  10313b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10313f:	e8 9c d9 ff ff       	call   100ae0 <kprintf>
  103144:	8d 0d 4a 52 10 00    	lea    0x10524a,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10314a:	89 0c 24             	mov    %ecx,(%esp)
  10314d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  103150:	e8 8b d9 ff ff       	call   100ae0 <kprintf>
  103155:	8d 0d 89 52 10 00    	lea    0x105289,%ecx

	kprintf("Initializing GDT...\n");
  10315b:	89 0c 24             	mov    %ecx,(%esp)
  10315e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103161:	e8 7a d9 ff ff       	call   100ae0 <kprintf>
	
	init_gdt();
  103166:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103169:	e8 f2 e1 ff ff       	call   101360 <init_gdt>
  10316e:	8d 05 9e 52 10 00    	lea    0x10529e,%eax

	kprintf("Initializing IDT...\n");
  103174:	89 04 24             	mov    %eax,(%esp)
  103177:	e8 64 d9 ff ff       	call   100ae0 <kprintf>
  10317c:	8d 0d b3 52 10 00    	lea    0x1052b3,%ecx

	init_idt();
  103182:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103185:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  103188:	e8 23 ee ff ff       	call   101fb0 <init_idt>

	kprintf("init_drivers()\n");
  10318d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103190:	89 04 24             	mov    %eax,(%esp)
  103193:	e8 48 d9 ff ff       	call   100ae0 <kprintf>

	init_drivers();
  103198:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10319b:	e8 30 00 00 00       	call   1031d0 <init_drivers>
  1031a0:	8d 05 c3 52 10 00    	lea    0x1052c3,%eax
	
	kprintf("switching to kernel_main()\n");
  1031a6:	89 04 24             	mov    %eax,(%esp)
  1031a9:	e8 32 d9 ff ff       	call   100ae0 <kprintf>

	kernel_main(mb_info);
  1031ae:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1031b1:	89 0c 24             	mov    %ecx,(%esp)
  1031b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1031b7:	e8 24 df ff ff       	call   1010e0 <kernel_main>

  return;
  1031bc:	83 c4 28             	add    $0x28,%esp
  1031bf:	5d                   	pop    %ebp
  1031c0:	c3                   	ret    
  1031c1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1031c8:	0f 1f 84 00 00 00 00 
  1031cf:	00 

001031d0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1031d0:	55                   	push   %ebp
  1031d1:	89 e5                	mov    %esp,%ebp
	init_keyboard_drv();
  1031d3:	83 ec 08             	sub    $0x8,%esp
  1031d6:	e8 85 d2 ff ff       	call   100460 <init_keyboard_drv>
}
  1031db:	83 c4 08             	add    $0x8,%esp
  1031de:	5d                   	pop    %ebp
  1031df:	c3                   	ret    

001031e0 <_start>:
  1031e0:	bc 30 84 10 00       	mov    $0x108430,%esp
  1031e5:	53                   	push   %ebx
  1031e6:	e8 25 ff ff ff       	call   103110 <init>

001031eb <_stop>:
  1031eb:	fa                   	cli    
  1031ec:	f4                   	hlt    
  1031ed:	eb fc                	jmp    1031eb <_stop>
