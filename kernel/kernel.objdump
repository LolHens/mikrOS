
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 bc                	in     $0xbc,%al

0010000c <_start>:
  10000c:	bc 00 80 10 00       	mov    $0x108000,%esp
  100011:	53                   	push   %ebx
  100012:	e8 09 00 00 00       	call   100020 <init>

00100017 <_stop>:
  100017:	fa                   	cli    
  100018:	f4                   	hlt    
  100019:	eb fc                	jmp    100017 <_stop>
  10001b:	66 90                	xchg   %ax,%ax
  10001d:	66 90                	xchg   %ax,%ax
  10001f:	90                   	nop

00100020 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  100020:	55                   	push   %ebp
  100021:	89 e5                	mov    %esp,%ebp
  100023:	83 ec 28             	sub    $0x28,%esp
  100026:	8b 45 08             	mov    0x8(%ebp),%eax
  100029:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10002c:	e8 cf 22 00 00       	call   102300 <clrscr>
  pmm_init(mb_info);
  100031:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100034:	89 04 24             	mov    %eax,(%esp)
  100037:	e8 44 07 00 00       	call   100780 <pmm_init>
  10003c:	8d 05 32 50 10 00    	lea    0x105032,%eax
  100042:	8d 0d 55 50 10 00    	lea    0x105055,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100048:	89 04 24             	mov    %eax,(%esp)
  10004b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10004f:	e8 fc 22 00 00       	call   102350 <kprintf>
  100054:	8d 0d 5f 50 10 00    	lea    0x10505f,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10005a:	89 0c 24             	mov    %ecx,(%esp)
  10005d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100060:	e8 eb 22 00 00       	call   102350 <kprintf>
  100065:	8d 0d 9e 50 10 00    	lea    0x10509e,%ecx

	kprintf("Initializing GDT...\n");
  10006b:	89 0c 24             	mov    %ecx,(%esp)
  10006e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100071:	e8 da 22 00 00       	call   102350 <kprintf>
	
	init_gdt();
  100076:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100079:	e8 32 2d 00 00       	call   102db0 <init_gdt>
  10007e:	8d 05 b3 50 10 00    	lea    0x1050b3,%eax

	kprintf("Initializing IDT...\n");
  100084:	89 04 24             	mov    %eax,(%esp)
  100087:	e8 c4 22 00 00       	call   102350 <kprintf>
  10008c:	8d 0d c8 50 10 00    	lea    0x1050c8,%ecx

	init_idt();
  100092:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100095:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100098:	e8 93 13 00 00       	call   101430 <init_idt>

	kprintf("init_drivers()\n");
  10009d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1000a0:	89 04 24             	mov    %eax,(%esp)
  1000a3:	e8 a8 22 00 00       	call   102350 <kprintf>

	init_drivers();
  1000a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1000ab:	e8 30 00 00 00       	call   1000e0 <init_drivers>
  1000b0:	8d 05 d8 50 10 00    	lea    0x1050d8,%eax
	
	kprintf("switching to kernel_main()\n");
  1000b6:	89 04 24             	mov    %eax,(%esp)
  1000b9:	e8 92 22 00 00       	call   102350 <kprintf>

	kernel_main(mb_info);
  1000be:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1000c1:	89 0c 24             	mov    %ecx,(%esp)
  1000c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000c7:	e8 54 29 00 00       	call   102a20 <kernel_main>

  return;
  1000cc:	83 c4 28             	add    $0x28,%esp
  1000cf:	5d                   	pop    %ebp
  1000d0:	c3                   	ret    
  1000d1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1000d8:	0f 1f 84 00 00 00 00 
  1000df:	00 

001000e0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
	init_keyboard_drv();
  1000e3:	83 ec 08             	sub    $0x8,%esp
  1000e6:	e8 55 04 00 00       	call   100540 <init_keyboard_drv>
}
  1000eb:	83 c4 08             	add    $0x8,%esp
  1000ee:	5d                   	pop    %ebp
  1000ef:	c3                   	ret    

001000f0 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000f0:	55                   	push   %ebp
  1000f1:	89 e5                	mov    %esp,%ebp
  1000f3:	83 ec 28             	sub    $0x28,%esp
  1000f6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000fa:	66 89 c1             	mov    %ax,%cx
  1000fd:	8b 45 08             	mov    0x8(%ebp),%eax
  100100:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100103:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  100107:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  10010b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10010e:	89 c2                	mov    %eax,%edx
  100110:	83 ea 02             	sub    $0x2,%edx
  100113:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100116:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100119:	0f 84 4f 00 00 00    	je     10016e <translate_scancode+0x7e>
  10011f:	e9 00 00 00 00       	jmp    100124 <translate_scancode+0x34>
  100124:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100127:	83 e8 01             	sub    $0x1,%eax
  10012a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10012d:	0f 84 28 00 00 00    	je     10015b <translate_scancode+0x6b>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x48>
  100138:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10013b:	85 c0                	test   %eax,%eax
  10013d:	0f 85 54 00 00 00    	jne    100197 <translate_scancode+0xa7>
  100143:	e9 00 00 00 00       	jmp    100148 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100148:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014c:	8a 0c 05 00 40 10 00 	mov    0x104000(,%eax,1),%cl
  100153:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100156:	e9 3c 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10015b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10015f:	8a 0c 05 80 40 10 00 	mov    0x104080(,%eax,1),%cl
  100166:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100169:	e9 29 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10016e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100172:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100177:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10017a:	0f 85 0e 00 00 00    	jne    10018e <translate_scancode+0x9e>
  100180:	e9 00 00 00 00       	jmp    100185 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100185:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100189:	e9 04 00 00 00       	jmp    100192 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10018e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100192:	e9 00 00 00 00       	jmp    100197 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100197:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10019b:	3d 00 00 00 00       	cmp    $0x0,%eax
  1001a0:	0f 85 20 00 00 00    	jne    1001c6 <translate_scancode+0xd6>
  1001a6:	8d 05 f4 50 10 00    	lea    0x1050f4,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1001ac:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001b3:	89 04 24             	mov    %eax,(%esp)
  1001b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001ba:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001be:	e8 8d 21 00 00       	call   102350 <kprintf>
  1001c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001c6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ca:	83 c4 28             	add    $0x28,%esp
  1001cd:	5d                   	pop    %ebp
  1001ce:	c3                   	ret    
  1001cf:	90                   	nop

001001d0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
  1001d3:	57                   	push   %edi
  1001d4:	56                   	push   %esi
  1001d5:	83 ec 20             	sub    $0x20,%esp
  1001d8:	b8 60 00 00 00       	mov    $0x60,%eax
  uint8_t scancode;
  uint8_t keycode = 0;
  1001dd:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
  int break_code = 0;
  1001e1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  1001e8:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1001ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1001f2:	e8 29 02 00 00       	call   100420 <inb>
  1001f7:	88 45 f7             	mov    %al,-0x9(%ebp)

  if (!init_done) {
  1001fa:	81 3d 0c a0 10 00 00 	cmpl   $0x0,0x10a00c
  100201:	00 00 00 
  100204:	0f 85 05 00 00 00    	jne    10020f <keyboard_handler+0x3f>
    return;
  10020a:	e9 ff 01 00 00       	jmp    10040e <keyboard_handler+0x23e>
  }

  if ((scancode & 0x80) &&
  10020f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100213:	25 80 00 00 00       	and    $0x80,%eax
  100218:	3d 00 00 00 00       	cmp    $0x0,%eax
  10021d:	0f 84 53 00 00 00    	je     100276 <keyboard_handler+0xa6>
  100223:	81 3d 04 a0 10 00 00 	cmpl   $0x0,0x10a004
  10022a:	00 00 00 
  10022d:	0f 85 0f 00 00 00    	jne    100242 <keyboard_handler+0x72>
  100233:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100237:	3d e1 00 00 00       	cmp    $0xe1,%eax
  10023c:	0f 84 34 00 00 00    	je     100276 <keyboard_handler+0xa6>
  100242:	81 3d 00 a0 10 00 00 	cmpl   $0x0,0x10a000
  100249:	00 00 00 
  10024c:	0f 85 0f 00 00 00    	jne    100261 <keyboard_handler+0x91>
  100252:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100256:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10025b:	0f 84 15 00 00 00    	je     100276 <keyboard_handler+0xa6>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  {
      break_code = 1;
  100261:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
      scancode &= ~0x80;
  100268:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10026c:	25 7f ff ff ff       	and    $0xffffff7f,%eax
  100271:	88 c1                	mov    %al,%cl
  100273:	88 4d f7             	mov    %cl,-0x9(%ebp)
  }

  if (e0_code) {
  100276:	81 3d 00 a0 10 00 00 	cmpl   $0x0,0x10a000
  10027d:	00 00 00 
  100280:	0f 84 63 00 00 00    	je     1002e9 <keyboard_handler+0x119>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  100286:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10028a:	3d 2a 00 00 00       	cmp    $0x2a,%eax
  10028f:	0f 84 0f 00 00 00    	je     1002a4 <keyboard_handler+0xd4>
  100295:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100299:	3d 36 00 00 00       	cmp    $0x36,%eax
  10029e:	0f 85 0f 00 00 00    	jne    1002b3 <keyboard_handler+0xe3>
          e0_code = 0;
  1002a4:	c7 05 00 a0 10 00 00 	movl   $0x0,0x10a000
  1002ab:	00 00 00 
          return;
  1002ae:	e9 5b 01 00 00       	jmp    10040e <keyboard_handler+0x23e>
  1002b3:	b8 01 00 00 00       	mov    $0x1,%eax
      }
      keycode = translate_scancode(1, scancode);
  1002b8:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1002bb:	0f b6 d1             	movzbl %cl,%edx
  1002be:	66 89 d6             	mov    %dx,%si
  1002c1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1002c8:	0f b7 d6             	movzwl %si,%edx
  1002cb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1002cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1002d2:	e8 19 fe ff ff       	call   1000f0 <translate_scancode>
  1002d7:	88 45 f6             	mov    %al,-0xa(%ebp)
      e0_code = 0;
  1002da:	c7 05 00 a0 10 00 00 	movl   $0x0,0x10a000
  1002e1:	00 00 00 
  } else if (e1_code == 2) {
  1002e4:	e9 11 01 00 00       	jmp    1003fa <keyboard_handler+0x22a>
  1002e9:	81 3d 04 a0 10 00 02 	cmpl   $0x2,0x10a004
  1002f0:	00 00 00 
  1002f3:	0f 85 53 00 00 00    	jne    10034c <keyboard_handler+0x17c>
  1002f9:	b8 02 00 00 00       	mov    $0x2,%eax
      e1_prev |= ((uint16_t) scancode << 8);
  1002fe:	8a 4d f7             	mov    -0x9(%ebp),%cl
  100301:	0f b6 d1             	movzbl %cl,%edx
  100304:	66 89 d6             	mov    %dx,%si
  100307:	0f b7 d6             	movzwl %si,%edx
  10030a:	c1 e2 08             	shl    $0x8,%edx
  10030d:	0f b7 3d 08 a0 10 00 	movzwl 0x10a008,%edi
  100314:	09 d7                	or     %edx,%edi
  100316:	66 89 fe             	mov    %di,%si
  100319:	66 89 35 08 a0 10 00 	mov    %si,0x10a008
      keycode = translate_scancode(2, e1_prev);
  100320:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100327:	0f b7 15 08 a0 10 00 	movzwl 0x10a008,%edx
  10032e:	89 54 24 04          	mov    %edx,0x4(%esp)
  100332:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100335:	e8 b6 fd ff ff       	call   1000f0 <translate_scancode>
  10033a:	88 45 f6             	mov    %al,-0xa(%ebp)
      e1_code = 0;
  10033d:	c7 05 04 a0 10 00 00 	movl   $0x0,0x10a004
  100344:	00 00 00 
  } else if (e1_code == 1) {
  100347:	e9 a9 00 00 00       	jmp    1003f5 <keyboard_handler+0x225>
  10034c:	81 3d 04 a0 10 00 01 	cmpl   $0x1,0x10a004
  100353:	00 00 00 
  100356:	0f 85 27 00 00 00    	jne    100383 <keyboard_handler+0x1b3>
      e1_prev = scancode;
  10035c:	8a 45 f7             	mov    -0x9(%ebp),%al
  10035f:	0f b6 c8             	movzbl %al,%ecx
  100362:	66 89 ca             	mov    %cx,%dx
  100365:	66 89 15 08 a0 10 00 	mov    %dx,0x10a008
      e1_code++;
  10036c:	8b 0d 04 a0 10 00    	mov    0x10a004,%ecx
  100372:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100378:	89 0d 04 a0 10 00    	mov    %ecx,0x10a004
  } else if (scancode == 0xE0) {
  10037e:	e9 6d 00 00 00       	jmp    1003f0 <keyboard_handler+0x220>
  100383:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100387:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10038c:	0f 85 0f 00 00 00    	jne    1003a1 <keyboard_handler+0x1d1>
      e0_code = 1;
  100392:	c7 05 00 a0 10 00 01 	movl   $0x1,0x10a000
  100399:	00 00 00 
  } else if (scancode == 0xE1) {
  10039c:	e9 4a 00 00 00       	jmp    1003eb <keyboard_handler+0x21b>
  1003a1:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1003a5:	3d e1 00 00 00       	cmp    $0xe1,%eax
  1003aa:	0f 85 0f 00 00 00    	jne    1003bf <keyboard_handler+0x1ef>
      e1_code = 1;
  1003b0:	c7 05 04 a0 10 00 01 	movl   $0x1,0x10a004
  1003b7:	00 00 00 
  } else {
  1003ba:	e9 27 00 00 00       	jmp    1003e6 <keyboard_handler+0x216>
  1003bf:	b8 00 00 00 00       	mov    $0x0,%eax
      keycode = translate_scancode(0, scancode);
  1003c4:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1003c7:	0f b6 d1             	movzbl %cl,%edx
  1003ca:	66 89 d6             	mov    %dx,%si
  1003cd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1003d4:	0f b7 d6             	movzwl %si,%edx
  1003d7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1003db:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1003de:	e8 0d fd ff ff       	call   1000f0 <translate_scancode>
  1003e3:	88 45 f6             	mov    %al,-0xa(%ebp)
  1003e6:	e9 00 00 00 00       	jmp    1003eb <keyboard_handler+0x21b>
  1003eb:	e9 00 00 00 00       	jmp    1003f0 <keyboard_handler+0x220>
  1003f0:	e9 00 00 00 00       	jmp    1003f5 <keyboard_handler+0x225>
  1003f5:	e9 00 00 00 00       	jmp    1003fa <keyboard_handler+0x22a>
  }

	if(keycode != 0x0) {
  1003fa:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  1003fe:	3d 00 00 00 00       	cmp    $0x0,%eax
  100403:	0f 84 05 00 00 00    	je     10040e <keyboard_handler+0x23e>
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
  100409:	e9 00 00 00 00       	jmp    10040e <keyboard_handler+0x23e>
}
  10040e:	83 c4 20             	add    $0x20,%esp
  100411:	5e                   	pop    %esi
  100412:	5f                   	pop    %edi
  100413:	5d                   	pop    %ebp
  100414:	c3                   	ret    
  100415:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10041c:	00 00 00 00 

00100420 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  100420:	55                   	push   %ebp
  100421:	89 e5                	mov    %esp,%ebp
  100423:	50                   	push   %eax
  100424:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100428:	66 89 c1             	mov    %ax,%cx
  10042b:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  10042f:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  100433:	ec                   	in     (%dx),%al
  100434:	88 45 fd             	mov    %al,-0x3(%ebp)
	return result;
  100437:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  10043b:	83 c4 04             	add    $0x4,%esp
  10043e:	5d                   	pop    %ebp
  10043f:	c3                   	ret    

00100440 <getc>:

char getc() {
  100440:	55                   	push   %ebp
  100441:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  100443:	83 ec 08             	sub    $0x8,%esp
  100446:	a1 10 a0 10 00       	mov    0x10a010,%eax
  10044b:	8a 08                	mov    (%eax),%cl
  10044d:	88 4d ff             	mov    %cl,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100450:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100457:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10045a:	3b 05 14 a0 10 00    	cmp    0x10a014,%eax
  100460:	0f 8d 29 00 00 00    	jge    10048f <getc+0x4f>
		buffer[i] = buffer[i+1];	
  100466:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100469:	8b 0d 10 a0 10 00    	mov    0x10a010,%ecx
  10046f:	8a 54 01 01          	mov    0x1(%ecx,%eax,1),%dl
  100473:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100476:	8b 0d 10 a0 10 00    	mov    0x10a010,%ecx
  10047c:	88 14 01             	mov    %dl,(%ecx,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10047f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100482:	05 01 00 00 00       	add    $0x1,%eax
  100487:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10048a:	e9 c8 ff ff ff       	jmp    100457 <getc+0x17>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  10048f:	a1 14 a0 10 00       	mov    0x10a014,%eax
  100494:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100499:	a3 14 a0 10 00       	mov    %eax,0x10a014

	return ret;
  10049e:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1004a2:	83 c4 08             	add    $0x8,%esp
  1004a5:	5d                   	pop    %ebp
  1004a6:	c3                   	ret    
  1004a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1004ae:	00 00 

001004b0 <send_command>:
}

void send_command(uint8_t command) {
  1004b0:	55                   	push   %ebp
  1004b1:	89 e5                	mov    %esp,%ebp
  1004b3:	83 ec 18             	sub    $0x18,%esp
  1004b6:	8a 45 08             	mov    0x8(%ebp),%al
  1004b9:	88 45 ff             	mov    %al,-0x1(%ebp)
  1004bc:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  1004c1:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1004c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1004cb:	e8 50 ff ff ff       	call   100420 <inb>
  1004d0:	0f b6 c8             	movzbl %al,%ecx
  1004d3:	81 e1 02 00 00 00    	and    $0x2,%ecx
  1004d9:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  1004df:	0f 84 05 00 00 00    	je     1004ea <send_command+0x3a>
  1004e5:	e9 d2 ff ff ff       	jmp    1004bc <send_command+0xc>
  1004ea:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  1004ef:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1004f6:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  1004fa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1004fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100501:	e8 0a 00 00 00       	call   100510 <outb>
}
  100506:	83 c4 18             	add    $0x18,%esp
  100509:	5d                   	pop    %ebp
  10050a:	c3                   	ret    
  10050b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100510 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  100510:	55                   	push   %ebp
  100511:	89 e5                	mov    %esp,%ebp
  100513:	50                   	push   %eax
  100514:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100518:	66 89 c1             	mov    %ax,%cx
  10051b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10051e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  100522:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100525:	8a 45 fd             	mov    -0x3(%ebp),%al
  100528:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10052c:	ee                   	out    %al,(%dx)
}
  10052d:	83 c4 04             	add    $0x4,%esp
  100530:	5d                   	pop    %ebp
  100531:	c3                   	ret    
  100532:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100539:	1f 84 00 00 00 00 00 

00100540 <init_keyboard_drv>:

void init_keyboard_drv() {
  100540:	55                   	push   %ebp
  100541:	89 e5                	mov    %esp,%ebp
  100543:	83 ec 28             	sub    $0x28,%esp
  100546:	b8 21 00 00 00       	mov    $0x21,%eax
  10054b:	8d 0d d0 01 10 00    	lea    0x1001d0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  100551:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100558:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10055c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10055f:	e8 fc 1a 00 00       	call   102060 <register_intr_handler>
  100564:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100569:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100570:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100573:	e8 a8 fe ff ff       	call   100420 <inb>
  100578:	0f b6 c8             	movzbl %al,%ecx
  10057b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100581:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100587:	0f 84 1c 00 00 00    	je     1005a9 <init_keyboard_drv+0x69>
  10058d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100592:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100599:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10059c:	e8 7f fe ff ff       	call   100420 <inb>
	}
  1005a1:	88 45 f3             	mov    %al,-0xd(%ebp)
  1005a4:	e9 bb ff ff ff       	jmp    100564 <init_keyboard_drv+0x24>
  1005a9:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  1005ae:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  1005b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1005b8:	e8 f3 fe ff ff       	call   1004b0 <send_command>

	init_done = 1;
  1005bd:	c7 05 0c a0 10 00 01 	movl   $0x1,0x10a00c
  1005c4:	00 00 00 
}
  1005c7:	83 c4 28             	add    $0x28,%esp
  1005ca:	5d                   	pop    %ebp
  1005cb:	c3                   	ret    
  1005cc:	66 90                	xchg   %ax,%ax
  1005ce:	66 90                	xchg   %ax,%ax

001005d0 <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  1005d0:	55                   	push   %ebp
  1005d1:	89 e5                	mov    %esp,%ebp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  1005d3:	56                   	push   %esi
  1005d4:	83 ec 10             	sub    $0x10,%esp
  1005d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1005de:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  1005e5:	0f 8d b7 00 00 00    	jge    1006a2 <pmm_alloc+0xd2>
		if(allocatable[i]) {
  1005eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1005ee:	81 3c 85 34 a4 10 00 	cmpl   $0x0,0x10a434(,%eax,4)
  1005f5:	00 00 00 00 
  1005f9:	0f 84 8e 00 00 00    	je     10068d <pmm_alloc+0xbd>
			int s;
			for(s = 0; s < 32; s++) {
  1005ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100606:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  10060d:	0f 8d 75 00 00 00    	jge    100688 <pmm_alloc+0xb8>
  100613:	b8 01 00 00 00       	mov    $0x1,%eax
				if(allocatable[i] & (1 << s)) {
  100618:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10061b:	8b 0c 8d 34 a4 10 00 	mov    0x10a434(,%ecx,4),%ecx
  100622:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100625:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100628:	89 d1                	mov    %edx,%ecx
  10062a:	d3 e0                	shl    %cl,%eax
  10062c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10062f:	21 c2                	and    %eax,%edx
  100631:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  100637:	0f 84 36 00 00 00    	je     100673 <pmm_alloc+0xa3>
  10063d:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  100642:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100645:	d3 e0                	shl    %cl,%eax
  100647:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  10064c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10064f:	8b 34 95 34 a4 10 00 	mov    0x10a434(,%edx,4),%esi
  100656:	21 c6                	and    %eax,%esi
  100658:	89 34 95 34 a4 10 00 	mov    %esi,0x10a434(,%edx,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  10065f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100662:	c1 e0 05             	shl    $0x5,%eax
  100665:	03 45 f0             	add    -0x10(%ebp),%eax
  100668:	c1 e0 0c             	shl    $0xc,%eax
  10066b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10066e:	e9 36 00 00 00       	jmp    1006a9 <pmm_alloc+0xd9>
				}
			}
  100673:	e9 00 00 00 00       	jmp    100678 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100678:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10067b:	05 01 00 00 00       	add    $0x1,%eax
  100680:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100683:	e9 7e ff ff ff       	jmp    100606 <pmm_alloc+0x36>
				if(allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
  100688:	e9 00 00 00 00       	jmp    10068d <pmm_alloc+0xbd>
	}
  10068d:	e9 00 00 00 00       	jmp    100692 <pmm_alloc+0xc2>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100692:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100695:	05 01 00 00 00       	add    $0x1,%eax
  10069a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10069d:	e9 3c ff ff ff       	jmp    1005de <pmm_alloc+0xe>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  1006a2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  1006a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1006ac:	83 c4 10             	add    $0x10,%esp
  1006af:	5e                   	pop    %esi
  1006b0:	5d                   	pop    %ebp
  1006b1:	c3                   	ret    
  1006b2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1006b9:	1f 84 00 00 00 00 00 

001006c0 <pmm_free>:

void pmm_free(void* addr) {
  1006c0:	55                   	push   %ebp
  1006c1:	89 e5                	mov    %esp,%ebp
  1006c3:	56                   	push   %esi
  1006c4:	83 ec 14             	sub    $0x14,%esp
  1006c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1006ca:	b9 01 00 00 00       	mov    $0x1,%ecx
  1006cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  1006d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1006d5:	c1 e8 0c             	shr    $0xc,%eax
  1006d8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  1006db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1006de:	25 1f 00 00 00       	and    $0x1f,%eax
  1006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  1006e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1006e9:	c1 e8 05             	shr    $0x5,%eax
  1006ec:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  1006ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1006f2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1006f5:	89 c1                	mov    %eax,%ecx
  1006f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1006fa:	d3 e0                	shl    %cl,%eax
  1006fc:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1006ff:	8b 34 95 34 a4 10 00 	mov    0x10a434(,%edx,4),%esi
  100706:	09 c6                	or     %eax,%esi
  100708:	89 34 95 34 a4 10 00 	mov    %esi,0x10a434(,%edx,4)
}
  10070f:	83 c4 14             	add    $0x14,%esp
  100712:	5e                   	pop    %esi
  100713:	5d                   	pop    %ebp
  100714:	c3                   	ret    
  100715:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10071c:	00 00 00 00 

00100720 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100720:	55                   	push   %ebp
  100721:	89 e5                	mov    %esp,%ebp
  100723:	56                   	push   %esi
  100724:	83 ec 14             	sub    $0x14,%esp
  100727:	8b 45 08             	mov    0x8(%ebp),%eax
  10072a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10072f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100732:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100735:	c1 e8 0c             	shr    $0xc,%eax
  100738:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10073b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10073e:	25 1f 00 00 00       	and    $0x1f,%eax
  100743:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  100746:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100749:	c1 e8 05             	shr    $0x5,%eax
  10074c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  10074f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100752:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100755:	89 c1                	mov    %eax,%ecx
  100757:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10075a:	d3 e0                	shl    %cl,%eax
  10075c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100761:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100764:	8b 34 95 34 a4 10 00 	mov    0x10a434(,%edx,4),%esi
  10076b:	21 c6                	and    %eax,%esi
  10076d:	89 34 95 34 a4 10 00 	mov    %esi,0x10a434(,%edx,4)
}
  100774:	83 c4 14             	add    $0x14,%esp
  100777:	5e                   	pop    %esi
  100778:	5d                   	pop    %ebp
  100779:	c3                   	ret    
  10077a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100780 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100780:	55                   	push   %ebp
  100781:	89 e5                	mov    %esp,%ebp
  100783:	53                   	push   %ebx
  100784:	57                   	push   %edi
  100785:	56                   	push   %esi
  100786:	83 ec 5c             	sub    $0x5c,%esp
  100789:	8b 45 08             	mov    0x8(%ebp),%eax
  10078c:	8d 0d 1a 51 10 00    	lea    0x10511a,%ecx
  100792:	8d 15 34 a4 10 00    	lea    0x10a434,%edx
  100798:	89 d6                	mov    %edx,%esi
  10079a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  1007a0:	89 d7                	mov    %edx,%edi
  1007a2:	bb 00 00 00 00       	mov    $0x0,%ebx
  1007a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1007aa:	b8 00 00 02 00       	mov    $0x20000,%eax
  1007af:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1007b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1007b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  1007b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007bb:	8b 40 30             	mov    0x30(%eax),%eax
  1007be:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
  1007c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007c4:	8b 40 30             	mov    0x30(%eax),%eax
  1007c7:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1007ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007cd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1007d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1007d3:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  1007d6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  1007d9:	03 41 2c             	add    0x2c(%ecx),%eax
  1007dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  1007df:	89 3c 24             	mov    %edi,(%esp)
  1007e2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1007e9:	00 
  1007ea:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1007f1:	00 
  1007f2:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  1007f5:	89 55 b8             	mov    %edx,-0x48(%ebp)
  1007f8:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  1007fb:	e8 a0 1f 00 00       	call   1027a0 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  100800:	8b 45 c0             	mov    -0x40(%ebp),%eax
  100803:	89 04 24             	mov    %eax,(%esp)
  100806:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  100809:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10080d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  100810:	89 54 24 08          	mov    %edx,0x8(%esp)
  100814:	e8 37 1b 00 00       	call   102350 <kprintf>
  100819:	89 45 b0             	mov    %eax,-0x50(%ebp)
	 
	while (mmap < mmap_end) {
  10081c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10081f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  100822:	0f 83 60 00 00 00    	jae    100888 <pmm_init+0x108>
		  if (mmap->mm_type == 1) {
  100828:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10082b:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  100832:	0f 85 40 00 00 00    	jne    100878 <pmm_init+0xf8>
		      uintptr_t addr = mmap->mm_base_addr;
  100838:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10083b:	8b 40 04             	mov    0x4(%eax),%eax
  10083e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  100841:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100844:	8b 49 0c             	mov    0xc(%ecx),%ecx
  100847:	01 c8                	add    %ecx,%eax
  100849:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 
		      while (addr < end_addr) {
  10084c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10084f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100852:	0f 83 1b 00 00 00    	jae    100873 <pmm_init+0xf3>
		          pmm_free((void*) addr);
  100858:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10085b:	89 04 24             	mov    %eax,(%esp)
  10085e:	e8 5d fe ff ff       	call   1006c0 <pmm_free>
		          addr += 0x1000;
  100863:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100866:	05 00 10 00 00       	add    $0x1000,%eax
  10086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      }
  10086e:	e9 d9 ff ff ff       	jmp    10084c <pmm_init+0xcc>
		  }
  100873:	e9 00 00 00 00       	jmp    100878 <pmm_init+0xf8>
		  mmap++;
  100878:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10087b:	05 18 00 00 00       	add    $0x18,%eax
  100880:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  100883:	e9 94 ff ff ff       	jmp    10081c <pmm_init+0x9c>
  100888:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10088e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100891:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  100897:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  10089a:	0f 83 1b 00 00 00    	jae    1008bb <pmm_init+0x13b>
		  pmm_mark_used((void*) addr);
  1008a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1008a3:	89 04 24             	mov    %eax,(%esp)
  1008a6:	e8 75 fe ff ff       	call   100720 <pmm_mark_used>
		  addr += 0x1000;
  1008ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1008ae:	05 00 10 00 00       	add    $0x1000,%eax
  1008b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  1008b6:	e9 d6 ff ff ff       	jmp    100891 <pmm_init+0x111>

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  1008bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1008be:	8b 40 18             	mov    0x18(%eax),%eax
  1008c1:	89 45 d8             	mov    %eax,-0x28(%ebp)

  pmm_mark_used(mb_info);
  1008c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1008c7:	89 04 24             	mov    %eax,(%esp)
  1008ca:	e8 51 fe ff ff       	call   100720 <pmm_mark_used>
  pmm_mark_used(modules);
  1008cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1008d2:	89 04 24             	mov    %eax,(%esp)
  1008d5:	e8 46 fe ff ff       	call   100720 <pmm_mark_used>

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1008da:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  1008e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1008e4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1008e7:	3b 41 14             	cmp    0x14(%ecx),%eax
  1008ea:	0f 83 59 00 00 00    	jae    100949 <pmm_init+0x1c9>
      addr = (uintptr_t)modules[i].start;
  1008f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1008f3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1008f6:	c1 e0 04             	shl    $0x4,%eax
  1008f9:	01 c1                	add    %eax,%ecx
  1008fb:	8b 01                	mov    (%ecx),%eax
  1008fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  100900:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100903:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  100906:	8b 55 d8             	mov    -0x28(%ebp),%edx
  100909:	c1 e1 04             	shl    $0x4,%ecx
  10090c:	01 ca                	add    %ecx,%edx
  10090e:	8b 4a 04             	mov    0x4(%edx),%ecx
  100911:	39 c8                	cmp    %ecx,%eax
  100913:	0f 83 1b 00 00 00    	jae    100934 <pmm_init+0x1b4>
          pmm_mark_used((void*) addr);
  100919:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10091c:	89 04 24             	mov    %eax,(%esp)
  10091f:	e8 fc fd ff ff       	call   100720 <pmm_mark_used>
          addr += 0x1000;
  100924:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100927:	05 00 10 00 00       	add    $0x1000,%eax
  10092c:	89 45 dc             	mov    %eax,-0x24(%ebp)
      }
  10092f:	e9 cc ff ff ff       	jmp    100900 <pmm_init+0x180>
  }
  100934:	e9 00 00 00 00       	jmp    100939 <pmm_init+0x1b9>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100939:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10093c:	05 01 00 00 00       	add    $0x1,%eax
  100941:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100944:	e9 98 ff ff ff       	jmp    1008e1 <pmm_init+0x161>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  100949:	83 c4 5c             	add    $0x5c,%esp
  10094c:	5e                   	pop    %esi
  10094d:	5f                   	pop    %edi
  10094e:	5b                   	pop    %ebx
  10094f:	5d                   	pop    %ebp
  100950:	c3                   	ret    
  100951:	66 90                	xchg   %ax,%ax
  100953:	66 90                	xchg   %ax,%ax
  100955:	66 90                	xchg   %ax,%ax
  100957:	66 90                	xchg   %ax,%ax
  100959:	66 90                	xchg   %ax,%ax
  10095b:	66 90                	xchg   %ax,%ax
  10095d:	66 90                	xchg   %ax,%ax
  10095f:	90                   	nop

00100960 <vmm_get_current_pagedir>:
uint32_t* active_pagetables        = (void*)(ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*)(ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

uint32_t vmm_get_current_pagedir(void) {
  100960:	55                   	push   %ebp
  100961:	89 e5                	mov    %esp,%ebp
  return active_pagedir;
  100963:	a1 18 a0 10 00       	mov    0x10a018,%eax
  100968:	5d                   	pop    %ebp
  100969:	c3                   	ret    
  10096a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100970 <vmm_create_pagedir>:
}

uint32_t vmm_create_pagedir(struct multiboot_info* mb_info)
{
  100970:	55                   	push   %ebp
  100971:	89 e5                	mov    %esp,%ebp
  100973:	53                   	push   %ebx
  100974:	56                   	push   %esi
  100975:	81 ec 60 10 00 00    	sub    $0x1060,%esp
  10097b:	8b 45 08             	mov    0x8(%ebp),%eax
  10097e:	8d 4d f0             	lea    -0x10(%ebp),%ecx
  100981:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t phys_context = 0;
  100984:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  10098b:	89 0c 24             	mov    %ecx,(%esp)
  10098e:	e8 6d 03 00 00       	call   100d00 <vmm_alloc>
  100993:	8d 4d e8             	lea    -0x18(%ebp),%ecx
  100996:	89 45 ec             	mov    %eax,-0x14(%ebp)
  
  uint32_t phys_pagedir = 0;
  100999:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  1009a0:	89 0c 24             	mov    %ecx,(%esp)
  1009a3:	e8 58 03 00 00       	call   100d00 <vmm_alloc>
  1009a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1009ab:	89 01                	mov    %eax,(%ecx)
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  1009ad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  1009b4:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  1009bb:	0f 83 ab 00 00 00    	jae    100a6c <vmm_create_pagedir+0xfc>
  1009c1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  1009c4:	89 04 24             	mov    %eax,(%esp)
  1009c7:	e8 34 03 00 00       	call   100d00 <vmm_alloc>
  1009cc:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1009cf:	89 84 8d dc ef ff ff 	mov    %eax,-0x1024(%ebp,%ecx,4)
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  1009d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1009d9:	0d 01 00 00 00       	or     $0x1,%eax
  1009de:	0d 02 00 00 00       	or     $0x2,%eax
  1009e3:	0d 04 00 00 00       	or     $0x4,%eax
  1009e8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1009eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1009ee:	8b 12                	mov    (%edx),%edx
  1009f0:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    for(i2 = 0; i2 < 1024; i2++) {
  1009f3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  1009fa:	81 7d dc 00 04 00 00 	cmpl   $0x400,-0x24(%ebp)
  100a01:	0f 83 50 00 00 00    	jae    100a57 <vmm_create_pagedir+0xe7>
  100a07:	b8 00 02 00 00       	mov    $0x200,%eax
  100a0c:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  100a11:	8b 55 e0             	mov    -0x20(%ebp),%edx
  100a14:	c1 e2 18             	shl    $0x18,%edx
  100a17:	8b 75 dc             	mov    -0x24(%ebp),%esi
  100a1a:	c1 e6 0c             	shl    $0xc,%esi
  100a1d:	01 f2                	add    %esi,%edx
  100a1f:	89 95 d8 ef ff ff    	mov    %edx,-0x1028(%ebp)
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  100a25:	81 bd d8 ef ff ff 00 	cmpl   $0x10000000,-0x1028(%ebp)
  100a2c:	00 00 10 
  100a2f:	0f 97 c3             	seta   %bl
  100a32:	84 db                	test   %bl,%bl
  100a34:	0f 44 c1             	cmove  %ecx,%eax
  100a37:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  100a3a:	8b 55 e0             	mov    -0x20(%ebp),%edx
  100a3d:	8b 94 95 dc ef ff ff 	mov    -0x1024(%ebp,%edx,4),%edx
  100a44:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
  for(i = 0; i < 1024; i++) {
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    for(i2 = 0; i2 < 1024; i2++) {
  100a47:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100a4a:	05 01 00 00 00       	add    $0x1,%eax
  100a4f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100a52:	e9 a3 ff ff ff       	jmp    1009fa <vmm_create_pagedir+0x8a>
      uint32_t vaddr = (i << 24) + (i2 << 12);
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  100a57:	e9 00 00 00 00       	jmp    100a5c <vmm_create_pagedir+0xec>
  uint32_t phys_pagedir = 0;
  context->pagedir = vmm_alloc(&phys_pagedir);
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100a5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100a5f:	05 01 00 00 00       	add    $0x1,%eax
  100a64:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100a67:	e9 48 ff ff ff       	jmp    1009b4 <vmm_create_pagedir+0x44>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100a6c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  100a73:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100a7a:	0f 83 5e 00 00 00    	jae    100ade <vmm_create_pagedir+0x16e>
  100a80:	b8 00 00 00 00       	mov    $0x0,%eax
  100a85:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
  100a8b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  100a8e:	8b 75 ec             	mov    -0x14(%ebp),%esi
  100a91:	8b 36                	mov    (%esi),%esi
  100a93:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100a96:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100a9c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  100a9f:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100aa5:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100aa8:	c1 e6 0c             	shl    $0xc,%esi
  100aab:	01 f2                	add    %esi,%edx
  100aad:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  100ab0:	89 0c 24             	mov    %ecx,(%esp)
  100ab3:	89 54 24 04          	mov    %edx,0x4(%esp)
  100ab7:	89 74 24 08          	mov    %esi,0x8(%esp)
  100abb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100ac2:	00 
  100ac3:	89 85 c8 ef ff ff    	mov    %eax,-0x1038(%ebp)
  100ac9:	e8 b2 02 00 00       	call   100d80 <map_address_context>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100ace:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ad1:	05 01 00 00 00       	add    $0x1,%eax
  100ad6:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100ad9:	e9 95 ff ff ff       	jmp    100a73 <vmm_create_pagedir+0x103>
  100ade:	b8 00 00 00 00       	mov    $0x0,%eax
  100ae3:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  100ae9:	8b 15 04 41 10 00    	mov    0x104104,%edx
  100aef:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100af2:	89 0c 24             	mov    %ecx,(%esp)
  100af5:	89 54 24 04          	mov    %edx,0x4(%esp)
  100af9:	89 74 24 08          	mov    %esi,0x8(%esp)
  100afd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100b04:	00 
  100b05:	89 85 c4 ef ff ff    	mov    %eax,-0x103c(%ebp)
  100b0b:	e8 70 02 00 00       	call   100d80 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100b10:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
  100b17:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
  100b1d:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  100b20:	0f 83 3f 00 00 00    	jae    100b65 <vmm_create_pagedir+0x1f5>
  100b26:	b8 04 00 00 00       	mov    $0x4,%eax
  100b2b:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  100b31:	8b 55 e0             	mov    -0x20(%ebp),%edx
  100b34:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100b37:	89 0c 24             	mov    %ecx,(%esp)
  100b3a:	89 54 24 04          	mov    %edx,0x4(%esp)
  100b3e:	89 74 24 08          	mov    %esi,0x8(%esp)
  100b42:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  100b49:	00 
  100b4a:	89 85 c0 ef ff ff    	mov    %eax,-0x1040(%ebp)
  100b50:	e8 2b 02 00 00       	call   100d80 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100b55:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100b58:	05 00 10 00 00       	add    $0x1000,%eax
  100b5d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100b60:	e9 b2 ff ff ff       	jmp    100b17 <vmm_create_pagedir+0x1a7>
  100b65:	b8 00 00 00 00       	mov    $0x0,%eax
  100b6a:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  }
  
  struct multiboot_module* modules = mb_info->mi_mods_addr;
  100b70:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100b73:	8b 52 18             	mov    0x18(%edx),%edx
  100b76:	89 95 d4 ef ff ff    	mov    %edx,-0x102c(%ebp)

  map_address_context(pagedir_ptr, (uint32_t) mb_info, (uint32_t) mb_info, 0);
  100b7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100b7f:	8b 75 f4             	mov    -0xc(%ebp),%esi
  100b82:	89 0c 24             	mov    %ecx,(%esp)
  100b85:	89 54 24 04          	mov    %edx,0x4(%esp)
  100b89:	89 74 24 08          	mov    %esi,0x8(%esp)
  100b8d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100b94:	00 
  100b95:	89 85 bc ef ff ff    	mov    %eax,-0x1044(%ebp)
  100b9b:	e8 e0 01 00 00       	call   100d80 <map_address_context>
  100ba0:	b8 00 00 00 00       	mov    $0x0,%eax
  100ba5:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
  map_address_context(pagedir_ptr, (uint32_t) modules, (uint32_t) modules, 0);
  100bab:	8b 95 d4 ef ff ff    	mov    -0x102c(%ebp),%edx
  100bb1:	8b b5 d4 ef ff ff    	mov    -0x102c(%ebp),%esi
  100bb7:	89 0c 24             	mov    %ecx,(%esp)
  100bba:	89 54 24 04          	mov    %edx,0x4(%esp)
  100bbe:	89 74 24 08          	mov    %esi,0x8(%esp)
  100bc2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100bc9:	00 
  100bca:	89 85 b8 ef ff ff    	mov    %eax,-0x1048(%ebp)
  100bd0:	e8 ab 01 00 00       	call   100d80 <map_address_context>

  uint32_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100bd5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  100bdc:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100bdf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100be2:	3b 41 14             	cmp    0x14(%ecx),%eax
  100be5:	0f 83 95 00 00 00    	jae    100c80 <vmm_create_pagedir+0x310>
    addr = (uintptr_t)modules[i].start; 
  100beb:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100bee:	8b 8d d4 ef ff ff    	mov    -0x102c(%ebp),%ecx
  100bf4:	c1 e0 04             	shl    $0x4,%eax
  100bf7:	01 c1                	add    %eax,%ecx
  100bf9:	8b 01                	mov    (%ecx),%eax
  100bfb:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
    
    while (addr < (uintptr_t)modules[i].end) {
  100c01:	8b 85 d0 ef ff ff    	mov    -0x1030(%ebp),%eax
  100c07:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100c0a:	8b 95 d4 ef ff ff    	mov    -0x102c(%ebp),%edx
  100c10:	c1 e1 04             	shl    $0x4,%ecx
  100c13:	01 ca                	add    %ecx,%edx
  100c15:	8b 4a 04             	mov    0x4(%edx),%ecx
  100c18:	39 c8                	cmp    %ecx,%eax
  100c1a:	0f 83 4b 00 00 00    	jae    100c6b <vmm_create_pagedir+0x2fb>
  100c20:	b8 00 00 00 00       	mov    $0x0,%eax
  100c25:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
      map_address_context(pagedir_ptr, (uint32_t) addr, (uint32_t) addr, 0);
  100c2b:	8b 95 d0 ef ff ff    	mov    -0x1030(%ebp),%edx
  100c31:	8b b5 d0 ef ff ff    	mov    -0x1030(%ebp),%esi
  100c37:	89 0c 24             	mov    %ecx,(%esp)
  100c3a:	89 54 24 04          	mov    %edx,0x4(%esp)
  100c3e:	89 74 24 08          	mov    %esi,0x8(%esp)
  100c42:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100c49:	00 
  100c4a:	89 85 b4 ef ff ff    	mov    %eax,-0x104c(%ebp)
  100c50:	e8 2b 01 00 00       	call   100d80 <map_address_context>
      addr += 0x1000;
  100c55:	8b 85 d0 ef ff ff    	mov    -0x1030(%ebp),%eax
  100c5b:	05 00 10 00 00       	add    $0x1000,%eax
  100c60:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
    }
  100c66:	e9 96 ff ff ff       	jmp    100c01 <vmm_create_pagedir+0x291>
  }
  100c6b:	e9 00 00 00 00       	jmp    100c70 <vmm_create_pagedir+0x300>

  map_address_context(pagedir_ptr, (uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_context(pagedir_ptr, (uint32_t) modules, (uint32_t) modules, 0);

  uint32_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100c70:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100c73:	05 01 00 00 00       	add    $0x1,%eax
  100c78:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100c7b:	e9 5c ff ff ff       	jmp    100bdc <vmm_create_pagedir+0x26c>
    }
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100c80:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  100c87:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100c8e:	0f 83 22 00 00 00    	jae    100cb6 <vmm_create_pagedir+0x346>
    vmm_unmap((void*)pagedir_ptr[i]); 
  100c94:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100c97:	8b 84 85 dc ef ff ff 	mov    -0x1024(%ebp,%eax,4),%eax
  100c9e:	89 04 24             	mov    %eax,(%esp)
  100ca1:	e8 4a 01 00 00       	call   100df0 <vmm_unmap>
    }
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ca9:	05 01 00 00 00       	add    $0x1,%eax
  100cae:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100cb1:	e9 d1 ff ff ff       	jmp    100c87 <vmm_create_pagedir+0x317>
  100cb6:	8d 85 dc ef ff ff    	lea    -0x1024(%ebp),%eax
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  100cbc:	89 04 24             	mov    %eax,(%esp)
  100cbf:	e8 2c 01 00 00       	call   100df0 <vmm_unmap>
  
  uint32_t* pd_ptr = context->pagedir;
  100cc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100cc7:	8b 00                	mov    (%eax),%eax
  100cc9:	89 85 cc ef ff ff    	mov    %eax,-0x1034(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  100ccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100cd2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100cd5:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  100cd7:	8b 85 cc ef ff ff    	mov    -0x1034(%ebp),%eax
  100cdd:	89 04 24             	mov    %eax,(%esp)
  100ce0:	e8 0b 01 00 00       	call   100df0 <vmm_unmap>
  vmm_unmap(context);
  100ce5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ce8:	89 04 24             	mov    %eax,(%esp)
  100ceb:	e8 00 01 00 00       	call   100df0 <vmm_unmap>
  
  return phys_pagedir;
  100cf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100cf3:	81 c4 60 10 00 00    	add    $0x1060,%esp
  100cf9:	5e                   	pop    %esi
  100cfa:	5b                   	pop    %ebx
  100cfb:	5d                   	pop    %ebp
  100cfc:	c3                   	ret    
  100cfd:	0f 1f 00             	nopl   (%eax)

00100d00 <vmm_alloc>:
    asm volatile("invlpg %0" : : "m" (vaddr));
  }
}


void* vmm_alloc(uint32_t* retpaddr) {
  100d00:	55                   	push   %ebp
  100d01:	89 e5                	mov    %esp,%ebp
  100d03:	83 ec 18             	sub    $0x18,%esp
  100d06:	8b 45 08             	mov    0x8(%ebp),%eax
  100d09:	89 45 fc             	mov    %eax,-0x4(%ebp)
  void* vaddr = 0;
  100d0c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  100d13:	c7 45 f4 00 00 00 10 	movl   $0x10000000,-0xc(%ebp)
  100d1a:	81 7d f4 00 f0 ff ff 	cmpl   $0xfffff000,-0xc(%ebp)
  100d21:	0f 87 3f 00 00 00    	ja     100d66 <vmm_alloc+0x66>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == PT_ALLOCATABLE) {
  100d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100d2a:	c1 e8 0c             	shr    $0xc,%eax
  100d2d:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100d33:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100d36:	25 01 02 00 00       	and    $0x201,%eax
  100d3b:	3d 00 02 00 00       	cmp    $0x200,%eax
  100d40:	0f 85 0b 00 00 00    	jne    100d51 <vmm_alloc+0x51>
      vaddr = (void*) i;
  100d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100d49:	89 45 f8             	mov    %eax,-0x8(%ebp)
      break;
  100d4c:	e9 15 00 00 00       	jmp    100d66 <vmm_alloc+0x66>
    }
  }
  100d51:	e9 00 00 00 00       	jmp    100d56 <vmm_alloc+0x56>


void* vmm_alloc(uint32_t* retpaddr) {
  void* vaddr = 0;

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  100d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100d59:	05 00 10 00 00       	add    $0x1000,%eax
  100d5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100d61:	e9 b4 ff ff ff       	jmp    100d1a <vmm_alloc+0x1a>
      vaddr = (void*) i;
      break;
    }
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
  100d66:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100d69:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100d6c:	89 04 24             	mov    %eax,(%esp)
  100d6f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100d73:	e8 88 01 00 00       	call   100f00 <vmm_alloc_addr>
  100d78:	83 c4 18             	add    $0x18,%esp
  100d7b:	5d                   	pop    %ebp
  100d7c:	c3                   	ret    
  100d7d:	0f 1f 00             	nopl   (%eax)

00100d80 <map_address_context>:
  vmm_unmap(context);
  
  return phys_pagedir;
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  100d80:	55                   	push   %ebp
  100d81:	89 e5                	mov    %esp,%ebp
  100d83:	56                   	push   %esi
  100d84:	83 ec 18             	sub    $0x18,%esp
  100d87:	8b 45 14             	mov    0x14(%ebp),%eax
  100d8a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100d8d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100d90:	8b 75 08             	mov    0x8(%ebp),%esi
  100d93:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100d96:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100d99:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100d9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t pd_entry =  vaddr >> 22;
  100d9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100da2:	c1 e8 16             	shr    $0x16,%eax
  100da5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  100da8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100dab:	c1 e8 0c             	shr    $0xc,%eax
  100dae:	25 ff 03 00 00       	and    $0x3ff,%eax
  100db3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  100db6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100db9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100dbe:	0d 01 00 00 00       	or     $0x1,%eax
  100dc3:	0d 02 00 00 00       	or     $0x2,%eax
  100dc8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100dcb:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100dd1:	09 c8                	or     %ecx,%eax
  100dd3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100dd6:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100dd9:	8b 75 f8             	mov    -0x8(%ebp),%esi
  100ddc:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100ddf:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100de5:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
}
  100de8:	83 c4 18             	add    $0x18,%esp
  100deb:	5e                   	pop    %esi
  100dec:	5d                   	pop    %ebp
  100ded:	c3                   	ret    
  100dee:	66 90                	xchg   %ax,%ax

00100df0 <vmm_unmap>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
    asm volatile("invlpg %0" : : "m" (vaddr));
  }
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  100df0:	55                   	push   %ebp
  100df1:	89 e5                	mov    %esp,%ebp
  100df3:	83 ec 08             	sub    $0x8,%esp
  100df6:	8b 45 08             	mov    0x8(%ebp),%eax
  100df9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100dfc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100dff:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100e02:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e05:	c1 e8 0c             	shr    $0xc,%eax
  100e08:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e0e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e11:	25 01 02 00 00       	and    $0x201,%eax
  100e16:	3d 01 02 00 00       	cmp    $0x201,%eax
  100e1b:	0f 85 17 00 00 00    	jne    100e38 <vmm_unmap+0x48>
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  100e21:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e24:	c1 e8 0c             	shr    $0xc,%eax
  100e27:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e2d:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  100e34:	0f 01 7d f8          	invlpg -0x8(%ebp)
  }
}
  100e38:	83 c4 08             	add    $0x8,%esp
  100e3b:	5d                   	pop    %ebp
  100e3c:	c3                   	ret    
  100e3d:	0f 1f 00             	nopl   (%eax)

00100e40 <map_address_active>:
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {  
  100e40:	55                   	push   %ebp
  100e41:	89 e5                	mov    %esp,%ebp
  100e43:	83 ec 0c             	sub    $0xc,%esp
  100e46:	8b 45 10             	mov    0x10(%ebp),%eax
  100e49:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100e4c:	8b 55 08             	mov    0x8(%ebp),%edx
  100e4f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100e52:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100e55:	89 45 f4             	mov    %eax,-0xc(%ebp)
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  100e58:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e5b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100e60:	0d 01 00 00 00       	or     $0x1,%eax
  100e65:	0d 02 00 00 00       	or     $0x2,%eax
  100e6a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100e6d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100e73:	09 c8                	or     %ecx,%eax
  100e75:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100e78:	c1 e9 0c             	shr    $0xc,%ecx
  100e7b:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100e81:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  100e84:	0f 01 7d fc          	invlpg -0x4(%ebp)
}
  100e88:	83 c4 0c             	add    $0xc,%esp
  100e8b:	5d                   	pop    %ebp
  100e8c:	c3                   	ret    
  100e8d:	0f 1f 00             	nopl   (%eax)

00100e90 <vmm_free>:

void vmm_free(void* p_vaddr) {
  100e90:	55                   	push   %ebp
  100e91:	89 e5                	mov    %esp,%ebp
  100e93:	83 ec 18             	sub    $0x18,%esp
  100e96:	8b 45 08             	mov    0x8(%ebp),%eax
  100e99:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100e9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e9f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100ea2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ea5:	c1 e8 0c             	shr    $0xc,%eax
  100ea8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100eae:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100eb1:	25 01 02 00 00       	and    $0x201,%eax
  100eb6:	3d 01 02 00 00       	cmp    $0x201,%eax
  100ebb:	0f 85 33 00 00 00    	jne    100ef4 <vmm_free+0x64>
    pmm_free((void*)(active_pagetables[vaddr >> 12] & 0xFFFFF000));
  100ec1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ec4:	c1 e8 0c             	shr    $0xc,%eax
  100ec7:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100ecd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100ed0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100ed5:	89 04 24             	mov    %eax,(%esp)
  100ed8:	e8 e3 f7 ff ff       	call   1006c0 <pmm_free>
   
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  100edd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ee0:	c1 e8 0c             	shr    $0xc,%eax
  100ee3:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100ee9:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  100ef0:	0f 01 7d f8          	invlpg -0x8(%ebp)
  }
}
  100ef4:	83 c4 18             	add    $0x18,%esp
  100ef7:	5d                   	pop    %ebp
  100ef8:	c3                   	ret    
  100ef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00100f00 <vmm_alloc_addr>:
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  100f00:	55                   	push   %ebp
  100f01:	89 e5                	mov    %esp,%ebp
  100f03:	83 ec 28             	sub    $0x28,%esp
  100f06:	8b 45 0c             	mov    0xc(%ebp),%eax
  100f09:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100f0c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if((active_pagetables[(uint32_t)reqvaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) return 0;
  100f12:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f15:	c1 e8 0c             	shr    $0xc,%eax
  100f18:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100f1e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100f21:	25 01 02 00 00       	and    $0x201,%eax
  100f26:	3d 00 02 00 00       	cmp    $0x200,%eax
  100f2b:	0f 84 0c 00 00 00    	je     100f3d <vmm_alloc_addr+0x3d>
  100f31:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100f38:	e9 45 00 00 00       	jmp    100f82 <vmm_alloc_addr+0x82>
  100f3d:	b8 04 02 00 00       	mov    $0x204,%eax

  uint32_t paddr = (uint32_t) pmm_alloc();
  100f42:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100f45:	e8 86 f6 ff ff       	call   1005d0 <pmm_alloc>
  100f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  map_address_active((uint32_t)reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  100f4d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f50:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100f53:	89 04 24             	mov    %eax,(%esp)
  100f56:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f5a:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  100f61:	00 
  100f62:	e8 d9 fe ff ff       	call   100e40 <map_address_active>
  
  if(retpaddr != 0) *retpaddr = paddr;
  100f67:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  100f6e:	0f 84 08 00 00 00    	je     100f7c <vmm_alloc_addr+0x7c>
  100f74:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f77:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100f7a:	89 01                	mov    %eax,(%ecx)
  
  return reqvaddr;
  100f7c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  100f82:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f85:	83 c4 28             	add    $0x28,%esp
  100f88:	5d                   	pop    %ebp
  100f89:	c3                   	ret    
  100f8a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100f90 <vmm_alloc_static>:

//TODO: VMM_ALLOC_STATIC will override already allocated memory

void* vmm_alloc_static(uint32_t offset, uint32_t flags) {
  100f90:	55                   	push   %ebp
  100f91:	89 e5                	mov    %esp,%ebp
  100f93:	83 ec 28             	sub    $0x28,%esp
  100f96:	8b 45 0c             	mov    0xc(%ebp),%eax
  100f99:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100f9c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100f9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(offset < 0x100000) {
  100fa2:	81 7d f8 00 00 10 00 	cmpl   $0x100000,-0x8(%ebp)
  100fa9:	0f 83 5f 00 00 00    	jae    10100e <vmm_alloc_static+0x7e>
    if((offset & 0xFFFFF000) != offset) {
  100faf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100fb2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100fb7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  100fba:	0f 84 11 00 00 00    	je     100fd1 <vmm_alloc_static+0x41>
  100fc0:	8d 05 30 51 10 00    	lea    0x105130,%eax
      kprintf("Tried to allocate not 4K-aligned static vaddr. \n");
  100fc6:	89 04 24             	mov    %eax,(%esp)
  100fc9:	e8 82 13 00 00       	call   102350 <kprintf>
  100fce:	89 45 e8             	mov    %eax,-0x18(%ebp)
    }
    uint32_t vaddr = offset + STATIC_ALLOC_VADDR;
  100fd1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100fd4:	05 00 00 90 01       	add    $0x1900000,%eax
  100fd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t paddr = (uint32_t) pmm_alloc();
  100fdc:	e8 ef f5 ff ff       	call   1005d0 <pmm_alloc>
  100fe1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    map_address_active(vaddr, paddr, flags & 0xFFF);
  100fe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fe7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100fea:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100fed:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  100ff3:	89 04 24             	mov    %eax,(%esp)
  100ff6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100ffa:	89 54 24 08          	mov    %edx,0x8(%esp)
  100ffe:	e8 3d fe ff ff       	call   100e40 <map_address_active>
    return (void*) vaddr;
  101003:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101006:	89 45 fc             	mov    %eax,-0x4(%ebp)
  101009:	e9 18 00 00 00       	jmp    101026 <vmm_alloc_static+0x96>
  10100e:	8d 05 61 51 10 00    	lea    0x105161,%eax
  }
  else
  {
    kprintf("Tried to allocate static vaddr outside reserved range. \n");
  101014:	89 04 24             	mov    %eax,(%esp)
  101017:	e8 34 13 00 00       	call   102350 <kprintf>
    return 0;
  10101c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  101023:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }
}
  101026:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101029:	83 c4 28             	add    $0x28,%esp
  10102c:	5d                   	pop    %ebp
  10102d:	c3                   	ret    
  10102e:	66 90                	xchg   %ax,%ax

00101030 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  101030:	55                   	push   %ebp
  101031:	89 e5                	mov    %esp,%ebp
  101033:	50                   	push   %eax
  101034:	8b 45 08             	mov    0x8(%ebp),%eax
  101037:	89 45 fc             	mov    %eax,-0x4(%ebp)
  active_pagedir = pdpaddr;
  10103a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10103d:	a3 18 a0 10 00       	mov    %eax,0x10a018
  asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  101042:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101045:	0f 22 d8             	mov    %eax,%cr3
}
  101048:	83 c4 04             	add    $0x4,%esp
  10104b:	5d                   	pop    %ebp
  10104c:	c3                   	ret    
  10104d:	0f 1f 00             	nopl   (%eax)

00101050 <vmm_init>:

uint32_t vmm_init(struct multiboot_info* mb_info)
{
  101050:	55                   	push   %ebp
  101051:	89 e5                	mov    %esp,%ebp
  101053:	53                   	push   %ebx
  101054:	56                   	push   %esi
  101055:	83 ec 50             	sub    $0x50,%esp
  101058:	8b 45 08             	mov    0x8(%ebp),%eax
  10105b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  //CREATE CONTEXT ************************************************************
  
  struct vmm_context* context = pmm_alloc();
  10105e:	e8 6d f5 ff ff       	call   1005d0 <pmm_alloc>
  101063:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  101066:	e8 65 f5 ff ff       	call   1005d0 <pmm_alloc>
  10106b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10106e:	89 01                	mov    %eax,(%ecx)
  
  for(i = 0; i < 1024; i++) {
  101070:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101077:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  10107e:	0f 83 99 00 00 00    	jae    10111d <vmm_init+0xcd>
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  101084:	e8 47 f5 ff ff       	call   1005d0 <pmm_alloc>
  101089:	0d 01 00 00 00       	or     $0x1,%eax
  10108e:	0d 02 00 00 00       	or     $0x2,%eax
  101093:	0d 04 00 00 00       	or     $0x4,%eax
  101098:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10109b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10109e:	8b 12                	mov    (%edx),%edx
  1010a0:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        
    for(i2 = 0; i2 < 1024; i2++) {
  1010a3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1010aa:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  1010b1:	0f 83 51 00 00 00    	jae    101108 <vmm_init+0xb8>
  1010b7:	b8 00 02 00 00       	mov    $0x200,%eax
  1010bc:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  1010c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1010c4:	c1 e2 18             	shl    $0x18,%edx
  1010c7:	8b 75 e8             	mov    -0x18(%ebp),%esi
  1010ca:	c1 e6 0c             	shl    $0xc,%esi
  1010cd:	01 f2                	add    %esi,%edx
  1010cf:	89 55 e4             	mov    %edx,-0x1c(%ebp)
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  1010d2:	81 7d e4 00 00 00 10 	cmpl   $0x10000000,-0x1c(%ebp)
  1010d9:	0f 97 c3             	seta   %bl
  1010dc:	84 db                	test   %bl,%bl
  1010de:	0f 44 c1             	cmove  %ecx,%eax
  1010e1:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1010e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1010e7:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1010ea:	8b 36                	mov    (%esi),%esi
  1010ec:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1010ef:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  1010f5:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
        
    for(i2 = 0; i2 < 1024; i2++) {
  1010f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1010fb:	05 01 00 00 00       	add    $0x1,%eax
  101100:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101103:	e9 a2 ff ff ff       	jmp    1010aa <vmm_init+0x5a>
      uint32_t vaddr = (i << 24) + (i2 << 12);
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  101108:	e9 00 00 00 00       	jmp    10110d <vmm_init+0xbd>
  struct vmm_context* context = pmm_alloc();
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
  10110d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101110:	05 01 00 00 00       	add    $0x1,%eax
  101115:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101118:	e9 5a ff ff ff       	jmp    101077 <vmm_init+0x27>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  10111d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101124:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  10112b:	0f 83 5a 00 00 00    	jae    10118b <vmm_init+0x13b>
  101131:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  101136:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101139:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10113c:	8b 12                	mov    (%edx),%edx
  10113e:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  101141:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  101147:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  10114a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10114d:	8b 09                	mov    (%ecx),%ecx
  10114f:	8b 15 00 41 10 00    	mov    0x104100,%edx
  101155:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101158:	c1 e6 0c             	shl    $0xc,%esi
  10115b:	01 f2                	add    %esi,%edx
  10115d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  101160:	89 0c 24             	mov    %ecx,(%esp)
  101163:	89 54 24 04          	mov    %edx,0x4(%esp)
  101167:	89 74 24 08          	mov    %esi,0x8(%esp)
  10116b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101172:	00 
  101173:	89 45 d0             	mov    %eax,-0x30(%ebp)
  101176:	e8 05 fc ff ff       	call   100d80 <map_address_context>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  10117b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10117e:	05 01 00 00 00       	add    $0x1,%eax
  101183:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101186:	e9 99 ff ff ff       	jmp    101124 <vmm_init+0xd4>
  10118b:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  101190:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101193:	8b 09                	mov    (%ecx),%ecx
  101195:	8b 15 04 41 10 00    	mov    0x104104,%edx
  10119b:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10119e:	89 0c 24             	mov    %ecx,(%esp)
  1011a1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1011a5:	89 74 24 08          	mov    %esi,0x8(%esp)
  1011a9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1011b0:	00 
  1011b1:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1011b4:	e8 c7 fb ff ff       	call   100d80 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1011b9:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  1011c0:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
  1011c6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  1011c9:	0f 83 3b 00 00 00    	jae    10120a <vmm_init+0x1ba>
  1011cf:	b8 04 00 00 00       	mov    $0x4,%eax
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  1011d4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1011d7:	8b 09                	mov    (%ecx),%ecx
  1011d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1011dc:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1011df:	89 0c 24             	mov    %ecx,(%esp)
  1011e2:	89 54 24 04          	mov    %edx,0x4(%esp)
  1011e6:	89 74 24 08          	mov    %esi,0x8(%esp)
  1011ea:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  1011f1:	00 
  1011f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1011f5:	e8 86 fb ff ff       	call   100d80 <map_address_context>
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1011fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1011fd:	05 00 10 00 00       	add    $0x1000,%eax
  101202:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101205:	e9 b6 ff ff ff       	jmp    1011c0 <vmm_init+0x170>
  10120a:	b8 00 00 00 00       	mov    $0x0,%eax
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  }
  
  struct multiboot_module* modules = mb_info->mi_mods_addr;
  10120f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101212:	8b 49 18             	mov    0x18(%ecx),%ecx
  101215:	89 4d dc             	mov    %ecx,-0x24(%ebp)

  map_address_context(context->pagedir, (uint32_t) mb_info, (uint32_t) mb_info, 0);
  101218:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10121b:	8b 09                	mov    (%ecx),%ecx
  10121d:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101220:	8b 75 f4             	mov    -0xc(%ebp),%esi
  101223:	89 0c 24             	mov    %ecx,(%esp)
  101226:	89 54 24 04          	mov    %edx,0x4(%esp)
  10122a:	89 74 24 08          	mov    %esi,0x8(%esp)
  10122e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101235:	00 
  101236:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101239:	e8 42 fb ff ff       	call   100d80 <map_address_context>
  10123e:	b8 00 00 00 00       	mov    $0x0,%eax
  map_address_context(context->pagedir, (uint32_t) modules, (uint32_t) modules, 0);
  101243:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101246:	8b 09                	mov    (%ecx),%ecx
  101248:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10124b:	8b 75 dc             	mov    -0x24(%ebp),%esi
  10124e:	89 0c 24             	mov    %ecx,(%esp)
  101251:	89 54 24 04          	mov    %edx,0x4(%esp)
  101255:	89 74 24 08          	mov    %esi,0x8(%esp)
  101259:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101260:	00 
  101261:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101264:	e8 17 fb ff ff       	call   100d80 <map_address_context>

  uint32_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  101269:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101270:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101273:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101276:	3b 41 14             	cmp    0x14(%ecx),%eax
  101279:	0f 83 ad 00 00 00    	jae    10132c <vmm_init+0x2dc>
  10127f:	8d 05 9a 51 10 00    	lea    0x10519a,%eax
    addr = (uintptr_t)modules[i].start;
  101285:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101288:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10128b:	c1 e1 04             	shl    $0x4,%ecx
  10128e:	01 ca                	add    %ecx,%edx
  101290:	8b 0a                	mov    (%edx),%ecx
  101292:	89 4d d8             	mov    %ecx,-0x28(%ebp)
    
    kprintf("Mapped module from %x to %x \n", modules[i].start, modules[i].end);   
  101295:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101298:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10129b:	c1 e1 04             	shl    $0x4,%ecx
  10129e:	01 ca                	add    %ecx,%edx
  1012a0:	8b 0a                	mov    (%edx),%ecx
  1012a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1012a5:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1012a8:	c1 e2 04             	shl    $0x4,%edx
  1012ab:	01 d6                	add    %edx,%esi
  1012ad:	8b 56 04             	mov    0x4(%esi),%edx
  1012b0:	89 04 24             	mov    %eax,(%esp)
  1012b3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1012b7:	89 54 24 08          	mov    %edx,0x8(%esp)
  1012bb:	e8 90 10 00 00       	call   102350 <kprintf>
  1012c0:	89 45 bc             	mov    %eax,-0x44(%ebp)
    
    while (addr < (uintptr_t)modules[i].end) {
  1012c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1012c6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1012c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1012cc:	c1 e1 04             	shl    $0x4,%ecx
  1012cf:	01 ca                	add    %ecx,%edx
  1012d1:	8b 4a 04             	mov    0x4(%edx),%ecx
  1012d4:	39 c8                	cmp    %ecx,%eax
  1012d6:	0f 83 3b 00 00 00    	jae    101317 <vmm_init+0x2c7>
  1012dc:	b8 00 00 00 00       	mov    $0x0,%eax
      map_address_context(context->pagedir, (uint32_t) addr, (uint32_t) addr, 0);
  1012e1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1012e4:	8b 09                	mov    (%ecx),%ecx
  1012e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1012e9:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1012ec:	89 0c 24             	mov    %ecx,(%esp)
  1012ef:	89 54 24 04          	mov    %edx,0x4(%esp)
  1012f3:	89 74 24 08          	mov    %esi,0x8(%esp)
  1012f7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1012fe:	00 
  1012ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
  101302:	e8 79 fa ff ff       	call   100d80 <map_address_context>
      addr += 0x1000;
  101307:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10130a:	05 00 10 00 00       	add    $0x1000,%eax
  10130f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    }
  101312:	e9 ac ff ff ff       	jmp    1012c3 <vmm_init+0x273>
  }
  101317:	e9 00 00 00 00       	jmp    10131c <vmm_init+0x2cc>

  map_address_context(context->pagedir, (uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_context(context->pagedir, (uint32_t) modules, (uint32_t) modules, 0);

  uint32_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  10131c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10131f:	05 01 00 00 00       	add    $0x1,%eax
  101324:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101327:	e9 44 ff ff ff       	jmp    101270 <vmm_init+0x220>
    }
  }
  
  //END CREATE CONTEXT ********************************************************
  
  vmm_activate_pagedir((uint32_t) context->pagedir);
  10132c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10132f:	8b 00                	mov    (%eax),%eax
  101331:	89 04 24             	mov    %eax,(%esp)
  101334:	e8 f7 fc ff ff       	call   101030 <vmm_activate_pagedir>

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  101339:	0f 20 c0             	mov    %cr0,%eax
  10133c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  cr0 |= (1 << 31);
  10133f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101342:	0d 00 00 00 80       	or     $0x80000000,%eax
  101347:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  10134a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10134d:	0f 22 c0             	mov    %eax,%cr0
  
  return (uint32_t) active_context->pagedir;
  101350:	a1 04 41 10 00       	mov    0x104104,%eax
  101355:	8b 00                	mov    (%eax),%eax
  101357:	83 c4 50             	add    $0x50,%esp
  10135a:	5e                   	pop    %esi
  10135b:	5b                   	pop    %ebx
  10135c:	5d                   	pop    %ebp
  10135d:	c3                   	ret    
  10135e:	66 90                	xchg   %ax,%ax

00101360 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101360:	55                   	push   %ebp
  101361:	89 e5                	mov    %esp,%ebp
  101363:	53                   	push   %ebx
  101364:	57                   	push   %edi
  101365:	56                   	push   %esi
  101366:	83 ec 10             	sub    $0x10,%esp
  101369:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  10136d:	66 89 c1             	mov    %ax,%cx
  101370:	8a 55 14             	mov    0x14(%ebp),%dl
  101373:	8b 45 0c             	mov    0xc(%ebp),%eax
  101376:	8b 75 08             	mov    0x8(%ebp),%esi
  101379:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10137c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10137f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  101383:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101386:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101389:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  10138c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  101390:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101393:	89 04 f5 20 a0 10 00 	mov    %eax,0x10a020(,%esi,8)
  10139a:	c7 04 f5 24 a0 10 00 	movl   $0x0,0x10a024(,%esi,8)
  1013a1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  1013a5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  1013a9:	c1 e0 10             	shl    $0x10,%eax
  1013ac:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1013af:	8b 3c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%edi
  1013b6:	8b 1c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%ebx
  1013bd:	09 c3                	or     %eax,%ebx
  1013bf:	89 3c f5 24 a0 10 00 	mov    %edi,0x10a024(,%esi,8)
  1013c6:	89 1c f5 20 a0 10 00 	mov    %ebx,0x10a020(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  1013cd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  1013d1:	c1 e0 08             	shl    $0x8,%eax
  1013d4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1013d7:	8b 3c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%edi
  1013de:	8b 1c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%ebx
  1013e5:	09 c3                	or     %eax,%ebx
  1013e7:	89 3c f5 20 a0 10 00 	mov    %edi,0x10a020(,%esi,8)
  1013ee:	89 1c f5 24 a0 10 00 	mov    %ebx,0x10a024(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  1013f5:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  1013f9:	c1 e0 10             	shl    $0x10,%eax
  1013fc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1013ff:	8b 3c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%edi
  101406:	8b 1c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%ebx
  10140d:	09 c3                	or     %eax,%ebx
  10140f:	89 3c f5 20 a0 10 00 	mov    %edi,0x10a020(,%esi,8)
  101416:	89 1c f5 24 a0 10 00 	mov    %ebx,0x10a024(,%esi,8)
}
  10141d:	83 c4 10             	add    $0x10,%esp
  101420:	5e                   	pop    %esi
  101421:	5f                   	pop    %edi
  101422:	5b                   	pop    %ebx
  101423:	5d                   	pop    %ebp
  101424:	c3                   	ret    
  101425:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10142c:	00 00 00 00 

00101430 <init_idt>:

void init_idt() {
  101430:	55                   	push   %ebp
  101431:	89 e5                	mov    %esp,%ebp
	struct {
  101433:	56                   	push   %esi
  101434:	81 ec 34 02 00 00    	sub    $0x234,%esp
  10143a:	a1 00 50 10 00       	mov    0x105000,%eax
  10143f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101442:	66 8b 0d 04 50 10 00 	mov    0x105004,%cx
  101449:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};

	int i = 0;
  10144d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  101454:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10145b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  101462:	0f 8d 1e 00 00 00    	jge    101486 <init_idt+0x56>
		handler_set[i] = 0;
  101468:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10146b:	c7 04 85 20 a2 10 00 	movl   $0x0,0x10a220(,%eax,4)
  101472:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  101476:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101479:	05 01 00 00 00       	add    $0x1,%eax
  10147e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101481:	e9 d5 ff ff ff       	jmp    10145b <init_idt+0x2b>
  101486:	b8 20 00 00 00       	mov    $0x20,%eax
  10148b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  101490:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101497:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10149e:	00 
  10149f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1014a2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1014a5:	e8 86 0b 00 00       	call   102030 <outb>
  1014aa:	b8 21 00 00 00       	mov    $0x21,%eax
  1014af:	b9 20 00 00 00       	mov    $0x20,%ecx
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  1014b4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1014bb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1014c2:	00 
  1014c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1014c6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1014c9:	e8 62 0b 00 00       	call   102030 <outb>
  1014ce:	b8 21 00 00 00       	mov    $0x21,%eax
  1014d3:	b9 04 00 00 00       	mov    $0x4,%ecx
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  1014d8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1014df:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1014e6:	00 
  1014e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1014ea:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1014ed:	e8 3e 0b 00 00       	call   102030 <outb>
  1014f2:	b8 21 00 00 00       	mov    $0x21,%eax
  1014f7:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0x21, 0x01); // ICW 4
  1014fc:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101503:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10150a:	00 
  10150b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10150e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  101511:	e8 1a 0b 00 00       	call   102030 <outb>
  101516:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10151b:	b9 11 00 00 00       	mov    $0x11,%ecx

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  101520:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101527:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10152e:	00 
  10152f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101532:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101535:	e8 f6 0a 00 00       	call   102030 <outb>
  10153a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  10153f:	b9 28 00 00 00       	mov    $0x28,%ecx
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101544:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10154b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101552:	00 
  101553:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101556:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101559:	e8 d2 0a 00 00       	call   102030 <outb>
  10155e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101563:	b9 02 00 00 00       	mov    $0x2,%ecx
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101568:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10156f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101576:	00 
  101577:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10157a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10157d:	e8 ae 0a 00 00       	call   102030 <outb>
  101582:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101587:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0xa1, 0x01); // ICW 4
  10158c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101593:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10159a:	00 
  10159b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10159e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  1015a1:	e8 8a 0a 00 00       	call   102030 <outb>
  1015a6:	b8 20 00 00 00       	mov    $0x20,%eax
  1015ab:	b9 00 00 00 00       	mov    $0x0,%ecx

  outb(0x20, 0x0);
  1015b0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1015b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1015be:	00 
  1015bf:	89 45 a8             	mov    %eax,-0x58(%ebp)
  1015c2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  1015c5:	e8 66 0a 00 00       	call   102030 <outb>
  1015ca:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1015cf:	b9 00 00 00 00       	mov    $0x0,%ecx
  outb(0xa0, 0x0);
  1015d4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1015db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1015e2:	00 
  1015e3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1015e6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1015e9:	e8 42 0a 00 00       	call   102030 <outb>
  1015ee:	b8 00 00 00 00       	mov    $0x0,%eax
  1015f3:	8d 0d 1c 2b 10 00    	lea    0x102b1c,%ecx
  1015f9:	ba 08 00 00 00       	mov    $0x8,%edx
  1015fe:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101603:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10160a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10160e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101615:	00 
  101616:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10161d:	00 
  10161e:	89 45 98             	mov    %eax,-0x68(%ebp)
  101621:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101624:	89 55 90             	mov    %edx,-0x70(%ebp)
  101627:	e8 34 fd ff ff       	call   101360 <idt_set_entry>
  10162c:	b8 01 00 00 00       	mov    $0x1,%eax
  101631:	8d 0d 25 2b 10 00    	lea    0x102b25,%ecx
  101637:	ba 08 00 00 00       	mov    $0x8,%edx
  10163c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101641:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101648:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10164c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101653:	00 
  101654:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10165b:	00 
  10165c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10165f:	89 75 88             	mov    %esi,-0x78(%ebp)
  101662:	89 55 84             	mov    %edx,-0x7c(%ebp)
  101665:	e8 f6 fc ff ff       	call   101360 <idt_set_entry>
  10166a:	b8 02 00 00 00       	mov    $0x2,%eax
  10166f:	8d 0d 2e 2b 10 00    	lea    0x102b2e,%ecx
  101675:	ba 08 00 00 00       	mov    $0x8,%edx
  10167a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10167f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101686:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10168a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101691:	00 
  101692:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101699:	00 
  10169a:	89 45 80             	mov    %eax,-0x80(%ebp)
  10169d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  1016a3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  1016a9:	e8 b2 fc ff ff       	call   101360 <idt_set_entry>
  1016ae:	b8 03 00 00 00       	mov    $0x3,%eax
  1016b3:	8d 0d 37 2b 10 00    	lea    0x102b37,%ecx
  1016b9:	ba 08 00 00 00       	mov    $0x8,%edx
  1016be:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016c3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1016ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016ce:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016d5:	00 
  1016d6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016dd:	00 
  1016de:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  1016e4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  1016ea:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  1016f0:	e8 6b fc ff ff       	call   101360 <idt_set_entry>
  1016f5:	b8 04 00 00 00       	mov    $0x4,%eax
  1016fa:	8d 0d 40 2b 10 00    	lea    0x102b40,%ecx
  101700:	ba 08 00 00 00       	mov    $0x8,%edx
  101705:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10170a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101711:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101715:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10171c:	00 
  10171d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101724:	00 
  101725:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10172b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101731:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101737:	e8 24 fc ff ff       	call   101360 <idt_set_entry>
  10173c:	b8 05 00 00 00       	mov    $0x5,%eax
  101741:	8d 0d 49 2b 10 00    	lea    0x102b49,%ecx
  101747:	ba 08 00 00 00       	mov    $0x8,%edx
  10174c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101751:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101758:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10175c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101763:	00 
  101764:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10176b:	00 
  10176c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101772:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101778:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10177e:	e8 dd fb ff ff       	call   101360 <idt_set_entry>
  101783:	b8 06 00 00 00       	mov    $0x6,%eax
  101788:	8d 0d 52 2b 10 00    	lea    0x102b52,%ecx
  10178e:	ba 08 00 00 00       	mov    $0x8,%edx
  101793:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101798:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10179f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017a3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017aa:	00 
  1017ab:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017b2:	00 
  1017b3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1017b9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1017bf:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1017c5:	e8 96 fb ff ff       	call   101360 <idt_set_entry>
  1017ca:	b8 07 00 00 00       	mov    $0x7,%eax
  1017cf:	8d 0d 5b 2b 10 00    	lea    0x102b5b,%ecx
  1017d5:	ba 08 00 00 00       	mov    $0x8,%edx
  1017da:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017df:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1017e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017ea:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017f1:	00 
  1017f2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017f9:	00 
  1017fa:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101800:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101806:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10180c:	e8 4f fb ff ff       	call   101360 <idt_set_entry>
  101811:	b8 08 00 00 00       	mov    $0x8,%eax
  101816:	8d 0d 64 2b 10 00    	lea    0x102b64,%ecx
  10181c:	ba 8e 00 00 00       	mov    $0x8e,%edx
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101821:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101828:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10182c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101833:	00 
  101834:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10183b:	00 
  10183c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101842:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101848:	e8 13 fb ff ff       	call   101360 <idt_set_entry>
  10184d:	b8 09 00 00 00       	mov    $0x9,%eax
  101852:	8d 0d 6b 2b 10 00    	lea    0x102b6b,%ecx
  101858:	ba 08 00 00 00       	mov    $0x8,%edx
  10185d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101862:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101869:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10186d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101874:	00 
  101875:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10187c:	00 
  10187d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101883:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101889:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10188f:	e8 cc fa ff ff       	call   101360 <idt_set_entry>
  101894:	b8 0a 00 00 00       	mov    $0xa,%eax
  101899:	8d 0d 74 2b 10 00    	lea    0x102b74,%ecx
  10189f:	ba 08 00 00 00       	mov    $0x8,%edx
  1018a4:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018a9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1018b0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018b4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018bb:	00 
  1018bc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018c3:	00 
  1018c4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1018ca:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1018d0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1018d6:	e8 85 fa ff ff       	call   101360 <idt_set_entry>
  1018db:	b8 0b 00 00 00       	mov    $0xb,%eax
  1018e0:	8d 0d 7b 2b 10 00    	lea    0x102b7b,%ecx
  1018e6:	ba 08 00 00 00       	mov    $0x8,%edx
  1018eb:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018f0:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  1018f7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018fb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101902:	00 
  101903:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10190a:	00 
  10190b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101911:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101917:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10191d:	e8 3e fa ff ff       	call   101360 <idt_set_entry>
  101922:	b8 0c 00 00 00       	mov    $0xc,%eax
  101927:	8d 0d 82 2b 10 00    	lea    0x102b82,%ecx
  10192d:	ba 08 00 00 00       	mov    $0x8,%edx
  101932:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101937:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10193e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101942:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101949:	00 
  10194a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101951:	00 
  101952:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101958:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10195e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101964:	e8 f7 f9 ff ff       	call   101360 <idt_set_entry>
  101969:	b8 0d 00 00 00       	mov    $0xd,%eax
  10196e:	8d 0d 89 2b 10 00    	lea    0x102b89,%ecx
  101974:	ba 08 00 00 00       	mov    $0x8,%edx
  101979:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10197e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101985:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101989:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101990:	00 
  101991:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101998:	00 
  101999:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10199f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  1019a5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  1019ab:	e8 b0 f9 ff ff       	call   101360 <idt_set_entry>
  1019b0:	b8 0e 00 00 00       	mov    $0xe,%eax
  1019b5:	8d 0d 90 2b 10 00    	lea    0x102b90,%ecx
  1019bb:	ba 08 00 00 00       	mov    $0x8,%edx
  1019c0:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019c5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1019cc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019d0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019d7:	00 
  1019d8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019df:	00 
  1019e0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1019e6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1019ec:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  1019f2:	e8 69 f9 ff ff       	call   101360 <idt_set_entry>
  1019f7:	b8 0f 00 00 00       	mov    $0xf,%eax
  1019fc:	8d 0d 94 2b 10 00    	lea    0x102b94,%ecx
  101a02:	ba 08 00 00 00       	mov    $0x8,%edx
  101a07:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a0c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101a13:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a17:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a1e:	00 
  101a1f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a26:	00 
  101a27:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  101a2d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101a33:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101a39:	e8 22 f9 ff ff       	call   101360 <idt_set_entry>
  101a3e:	b8 10 00 00 00       	mov    $0x10,%eax
  101a43:	8d 0d 9a 2b 10 00    	lea    0x102b9a,%ecx
  101a49:	ba 08 00 00 00       	mov    $0x8,%edx
  101a4e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a53:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  101a5a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a5e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a65:	00 
  101a66:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a6d:	00 
  101a6e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101a74:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  101a7a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101a80:	e8 db f8 ff ff       	call   101360 <idt_set_entry>
  101a85:	b8 11 00 00 00       	mov    $0x11,%eax
  101a8a:	8d 0d a0 2b 10 00    	lea    0x102ba0,%ecx
  101a90:	ba 08 00 00 00       	mov    $0x8,%edx
  101a95:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a9a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101aa1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aa5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101aac:	00 
  101aad:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ab4:	00 
  101ab5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  101abb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  101ac1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  101ac7:	e8 94 f8 ff ff       	call   101360 <idt_set_entry>
  101acc:	b8 12 00 00 00       	mov    $0x12,%eax
  101ad1:	8d 0d a4 2b 10 00    	lea    0x102ba4,%ecx
  101ad7:	ba 08 00 00 00       	mov    $0x8,%edx
  101adc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ae1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  101ae8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aec:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101af3:	00 
  101af4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101afb:	00 
  101afc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101b02:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101b08:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  101b0e:	e8 4d f8 ff ff       	call   101360 <idt_set_entry>
  101b13:	b8 20 00 00 00       	mov    $0x20,%eax
  101b18:	8d 0d aa 2b 10 00    	lea    0x102baa,%ecx
  101b1e:	ba 08 00 00 00       	mov    $0x8,%edx
  101b23:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b28:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101b2f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b33:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b3a:	00 
  101b3b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b42:	00 
  101b43:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101b49:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  101b4f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101b55:	e8 06 f8 ff ff       	call   101360 <idt_set_entry>
  101b5a:	b8 21 00 00 00       	mov    $0x21,%eax
  101b5f:	8d 0d b0 2b 10 00    	lea    0x102bb0,%ecx
  101b65:	ba 08 00 00 00       	mov    $0x8,%edx
  101b6a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b6f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101b76:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b7a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b81:	00 
  101b82:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b89:	00 
  101b8a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  101b90:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  101b96:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  101b9c:	e8 bf f7 ff ff       	call   101360 <idt_set_entry>
  101ba1:	b8 22 00 00 00       	mov    $0x22,%eax
  101ba6:	8d 0d b6 2b 10 00    	lea    0x102bb6,%ecx
  101bac:	ba 08 00 00 00       	mov    $0x8,%edx
  101bb1:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(34, intr_stub_34, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101bb6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  101bbd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101bc1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bc8:	00 
  101bc9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bd0:	00 
  101bd1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  101bd7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  101bdd:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  101be3:	e8 78 f7 ff ff       	call   101360 <idt_set_entry>
  101be8:	b8 23 00 00 00       	mov    $0x23,%eax
  101bed:	8d 0d bc 2b 10 00    	lea    0x102bbc,%ecx
  101bf3:	ba 08 00 00 00       	mov    $0x8,%edx
  101bf8:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(35, intr_stub_35, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101bfd:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101c04:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c08:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c0f:	00 
  101c10:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c17:	00 
  101c18:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101c1e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101c24:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101c2a:	e8 31 f7 ff ff       	call   101360 <idt_set_entry>
  101c2f:	b8 24 00 00 00       	mov    $0x24,%eax
  101c34:	8d 0d c2 2b 10 00    	lea    0x102bc2,%ecx
  101c3a:	ba 08 00 00 00       	mov    $0x8,%edx
  101c3f:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(36, intr_stub_36, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c44:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101c4b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c4f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c56:	00 
  101c57:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c5e:	00 
  101c5f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101c65:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101c6b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101c71:	e8 ea f6 ff ff       	call   101360 <idt_set_entry>
  101c76:	b8 25 00 00 00       	mov    $0x25,%eax
  101c7b:	8d 0d c8 2b 10 00    	lea    0x102bc8,%ecx
  101c81:	ba 08 00 00 00       	mov    $0x8,%edx
  101c86:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(37, intr_stub_37, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c8b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101c92:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c96:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c9d:	00 
  101c9e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ca5:	00 
  101ca6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101cac:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101cb2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101cb8:	e8 a3 f6 ff ff       	call   101360 <idt_set_entry>
  101cbd:	b8 26 00 00 00       	mov    $0x26,%eax
  101cc2:	8d 0d ce 2b 10 00    	lea    0x102bce,%ecx
  101cc8:	ba 08 00 00 00       	mov    $0x8,%edx
  101ccd:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(38, intr_stub_38, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101cd2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101cd9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cdd:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ce4:	00 
  101ce5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101cec:	00 
  101ced:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101cf3:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101cf9:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101cff:	e8 5c f6 ff ff       	call   101360 <idt_set_entry>
  101d04:	b8 27 00 00 00       	mov    $0x27,%eax
  101d09:	8d 0d d4 2b 10 00    	lea    0x102bd4,%ecx
  101d0f:	ba 08 00 00 00       	mov    $0x8,%edx
  101d14:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(39, intr_stub_39, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d19:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101d20:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d24:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d2b:	00 
  101d2c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d33:	00 
  101d34:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101d3a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101d40:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101d46:	e8 15 f6 ff ff       	call   101360 <idt_set_entry>
  101d4b:	b8 28 00 00 00       	mov    $0x28,%eax
  101d50:	8d 0d da 2b 10 00    	lea    0x102bda,%ecx
  101d56:	ba 08 00 00 00       	mov    $0x8,%edx
  101d5b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(40, intr_stub_40, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d60:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101d67:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d6b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d72:	00 
  101d73:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d7a:	00 
  101d7b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101d81:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101d87:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101d8d:	e8 ce f5 ff ff       	call   101360 <idt_set_entry>
  101d92:	b8 29 00 00 00       	mov    $0x29,%eax
  101d97:	8d 0d e0 2b 10 00    	lea    0x102be0,%ecx
  101d9d:	ba 08 00 00 00       	mov    $0x8,%edx
  101da2:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(41, intr_stub_41, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101da7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101dae:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101db2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101db9:	00 
  101dba:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101dc1:	00 
  101dc2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101dc8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101dce:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101dd4:	e8 87 f5 ff ff       	call   101360 <idt_set_entry>
  101dd9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101dde:	8d 0d e6 2b 10 00    	lea    0x102be6,%ecx
  101de4:	ba 08 00 00 00       	mov    $0x8,%edx
  101de9:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(42, intr_stub_42, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101dee:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101df5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101df9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e00:	00 
  101e01:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e08:	00 
  101e09:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101e0f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101e15:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101e1b:	e8 40 f5 ff ff       	call   101360 <idt_set_entry>
  101e20:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101e25:	8d 0d ec 2b 10 00    	lea    0x102bec,%ecx
  101e2b:	ba 08 00 00 00       	mov    $0x8,%edx
  101e30:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(43, intr_stub_43, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e35:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101e3c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e40:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e47:	00 
  101e48:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e4f:	00 
  101e50:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101e56:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101e5c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101e62:	e8 f9 f4 ff ff       	call   101360 <idt_set_entry>
  101e67:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101e6c:	8d 0d f2 2b 10 00    	lea    0x102bf2,%ecx
  101e72:	ba 08 00 00 00       	mov    $0x8,%edx
  101e77:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(44, intr_stub_44, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e7c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101e83:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e87:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e8e:	00 
  101e8f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e96:	00 
  101e97:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101e9d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101ea3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101ea9:	e8 b2 f4 ff ff       	call   101360 <idt_set_entry>
  101eae:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101eb3:	8d 0d f8 2b 10 00    	lea    0x102bf8,%ecx
  101eb9:	ba 08 00 00 00       	mov    $0x8,%edx
  101ebe:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(45, intr_stub_45, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ec3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101eca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ece:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ed5:	00 
  101ed6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101edd:	00 
  101ede:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  101ee4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  101eea:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101ef0:	e8 6b f4 ff ff       	call   101360 <idt_set_entry>
  101ef5:	b8 2e 00 00 00       	mov    $0x2e,%eax
  101efa:	8d 0d fe 2b 10 00    	lea    0x102bfe,%ecx
  101f00:	ba 08 00 00 00       	mov    $0x8,%edx
  101f05:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(46, intr_stub_46, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101f0a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101f11:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f15:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f1c:	00 
  101f1d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f24:	00 
  101f25:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  101f2b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101f31:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101f37:	e8 24 f4 ff ff       	call   101360 <idt_set_entry>
  101f3c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101f41:	8d 0d 04 2c 10 00    	lea    0x102c04,%ecx
  101f47:	ba 08 00 00 00       	mov    $0x8,%edx
  101f4c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(47, intr_stub_47, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101f51:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101f58:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f5c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f63:	00 
  101f64:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f6b:	00 
  101f6c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101f72:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101f78:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  101f7e:	e8 dd f3 ff ff       	call   101360 <idt_set_entry>
  101f83:	b8 30 00 00 00       	mov    $0x30,%eax
  101f88:	8d 0d 0a 2c 10 00    	lea    0x102c0a,%ecx
  101f8e:	ba 08 00 00 00       	mov    $0x8,%edx
  101f93:	be ee 00 00 00       	mov    $0xee,%esi

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101f98:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101f9f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101fa3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101faa:	00 
  101fab:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101fb2:	00 
  101fb3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  101fb9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  101fbf:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  101fc5:	e8 96 f3 ff ff       	call   101360 <idt_set_entry>
  101fca:	b8 05 00 00 00       	mov    $0x5,%eax
  101fcf:	8d 0d 08 41 10 00    	lea    0x104108,%ecx
  101fd5:	ba 80 00 00 00       	mov    $0x80,%edx
  101fda:	be e9 00 00 00       	mov    $0xe9,%esi

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101fdf:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101fe6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101fea:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101ff1:	00 
  101ff2:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101ff9:	00 
  101ffa:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  102000:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  102006:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  10200c:	e8 7f 0c 00 00       	call   102c90 <set_gdt_entry>
  102011:	b8 28 00 00 00       	mov    $0x28,%eax

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  102016:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  102019:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  10201d:	fb                   	sti    
}
  10201e:	81 c4 34 02 00 00    	add    $0x234,%esp
  102024:	5e                   	pop    %esi
  102025:	5d                   	pop    %ebp
  102026:	c3                   	ret    
  102027:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10202e:	00 00 

00102030 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  102030:	55                   	push   %ebp
  102031:	89 e5                	mov    %esp,%ebp
  102033:	50                   	push   %eax
  102034:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  102038:	66 89 c1             	mov    %ax,%cx
  10203b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10203e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  102042:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  102045:	8a 45 fd             	mov    -0x3(%ebp),%al
  102048:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10204c:	ee                   	out    %al,(%dx)
}
  10204d:	83 c4 04             	add    $0x4,%esp
  102050:	5d                   	pop    %ebp
  102051:	c3                   	ret    
  102052:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102059:	1f 84 00 00 00 00 00 

00102060 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  102060:	55                   	push   %ebp
  102061:	89 e5                	mov    %esp,%ebp
  102063:	83 ec 08             	sub    $0x8,%esp
  102066:	8b 45 0c             	mov    0xc(%ebp),%eax
  102069:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10206c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10206f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  102072:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102075:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102078:	89 04 8d 20 a3 10 00 	mov    %eax,0x10a320(,%ecx,4)
	handler_set[i] = 1;
  10207f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102082:	c7 04 85 20 a2 10 00 	movl   $0x1,0x10a220(,%eax,4)
  102089:	01 00 00 00 
}
  10208d:	83 c4 08             	add    $0x8,%esp
  102090:	5d                   	pop    %ebp
  102091:	c3                   	ret    
  102092:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102099:	1f 84 00 00 00 00 00 

001020a0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  1020a0:	55                   	push   %ebp
  1020a1:	89 e5                	mov    %esp,%ebp
  1020a3:	83 ec 28             	sub    $0x28,%esp
  1020a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1020a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct cpu_state* new_cpu = cpu;
  1020ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020af:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if (cpu->intr <= 0x1f) {
  1020b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020b5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  1020bc:	0f 87 10 00 00 00    	ja     1020d2 <handle_interrupt+0x32>
    show_cod(cpu);
  1020c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020c5:	89 04 24             	mov    %eax,(%esp)
  1020c8:	e8 23 01 00 00       	call   1021f0 <show_cod>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  1020cd:	e9 16 01 00 00       	jmp    1021e8 <handle_interrupt+0x148>
  1020d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020d5:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  1020dc:	0f 82 b4 00 00 00    	jb     102196 <handle_interrupt+0xf6>
  1020e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020e5:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  1020ec:	0f 87 a4 00 00 00    	ja     102196 <handle_interrupt+0xf6>
    if (cpu->intr >= 0x28) {
  1020f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020f5:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  1020fc:	0f 82 24 00 00 00    	jb     102126 <handle_interrupt+0x86>
  102102:	b8 a0 00 00 00       	mov    $0xa0,%eax
  102107:	b9 20 00 00 00       	mov    $0x20,%ecx
      outb(0xa0, 0x20);
  10210c:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  102113:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  10211a:	00 
  10211b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10211e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102121:	e8 0a ff ff ff       	call   102030 <outb>
    }
    if (cpu->intr == 0x20) {
  102126:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102129:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  102130:	0f 85 1b 00 00 00    	jne    102151 <handle_interrupt+0xb1>
      new_cpu = schedule(cpu);
  102136:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102139:	89 04 24             	mov    %eax,(%esp)
  10213c:	e8 ef 0f 00 00       	call   103130 <schedule>
  102141:	89 45 f8             	mov    %eax,-0x8(%ebp)
      tss[1] = (uint32_t) (new_cpu + 1);
  102144:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102147:	05 38 00 00 00       	add    $0x38,%eax
  10214c:	a3 0c 41 10 00       	mov    %eax,0x10410c
  102151:	b8 20 00 00 00       	mov    $0x20,%eax
    }
    outb(0x20, 0x20);
  102156:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10215d:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102164:	00 
  102165:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102168:	e8 c3 fe ff ff       	call   102030 <outb>
		if(handler_set[cpu->intr]) {
  10216d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102170:	8b 40 1c             	mov    0x1c(%eax),%eax
  102173:	81 3c 85 20 a2 10 00 	cmpl   $0x0,0x10a220(,%eax,4)
  10217a:	00 00 00 00 
  10217e:	0f 84 0d 00 00 00    	je     102191 <handle_interrupt+0xf1>
			handlers[cpu->intr]();
  102184:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102187:	8b 40 1c             	mov    0x1c(%eax),%eax
  10218a:	ff 14 85 20 a3 10 00 	call   *0x10a320(,%eax,4)
		}
  } else if (cpu->intr == 0x30) {
  102191:	e9 4d 00 00 00       	jmp    1021e3 <handle_interrupt+0x143>
  102196:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102199:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  1021a0:	0f 85 20 00 00 00    	jne    1021c6 <handle_interrupt+0x126>
		new_cpu = syscall(new_cpu);
  1021a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021a9:	89 04 24             	mov    %eax,(%esp)
  1021ac:	e8 bf 06 00 00       	call   102870 <syscall>
  1021b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    tss[1] = (uint32_t) (new_cpu + 1);
  1021b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021b7:	05 38 00 00 00       	add    $0x38,%eax
  1021bc:	a3 0c 41 10 00       	mov    %eax,0x10410c
  } else {
  1021c1:	e9 18 00 00 00       	jmp    1021de <handle_interrupt+0x13e>
  1021c6:	8d 05 b8 51 10 00    	lea    0x1051b8,%eax
    kprintf("Unbekannter Interrupt\n");
  1021cc:	89 04 24             	mov    %eax,(%esp)
  1021cf:	e8 7c 01 00 00       	call   102350 <kprintf>
  1021d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  1021d7:	fa                   	cli    
  1021d8:	f4                   	hlt    
    }
  1021d9:	e9 f9 ff ff ff       	jmp    1021d7 <handle_interrupt+0x137>
  1021de:	e9 00 00 00 00       	jmp    1021e3 <handle_interrupt+0x143>
  1021e3:	e9 00 00 00 00       	jmp    1021e8 <handle_interrupt+0x148>
  }  

  return new_cpu;
  1021e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021eb:	83 c4 28             	add    $0x28,%esp
  1021ee:	5d                   	pop    %ebp
  1021ef:	c3                   	ret    

001021f0 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu) {
  1021f0:	55                   	push   %ebp
  1021f1:	89 e5                	mov    %esp,%ebp
  1021f3:	53                   	push   %ebx
  1021f4:	57                   	push   %edi
  1021f5:	56                   	push   %esi
  1021f6:	83 ec 3c             	sub    $0x3c,%esp
  1021f9:	8b 45 08             	mov    0x8(%ebp),%eax
  1021fc:	8d 0d cf 51 10 00    	lea    0x1051cf,%ecx
  102202:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf ("          '''  \\   `-._.'`---^_))) \n");
  kprintf ("                `-._ )))       ``` \n");
  kprintf ("                     ```            \n");
  #endif
  
  kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  102205:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102208:	8b 40 1c             	mov    0x1c(%eax),%eax
  10220b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10220e:	8b 52 20             	mov    0x20(%edx),%edx
  102211:	89 0c 24             	mov    %ecx,(%esp)
  102214:	89 44 24 04          	mov    %eax,0x4(%esp)
  102218:	89 54 24 08          	mov    %edx,0x8(%esp)
  10221c:	e8 2f 01 00 00       	call   102350 <kprintf>
  102221:	8d 0d f3 51 10 00    	lea    0x1051f3,%ecx

  kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  102227:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10222a:	8b 12                	mov    (%edx),%edx
  10222c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10222f:	8b 76 04             	mov    0x4(%esi),%esi
  102232:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102235:	8b 7f 08             	mov    0x8(%edi),%edi
  102238:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10223b:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  10223e:	89 0c 24             	mov    %ecx,(%esp)
  102241:	89 54 24 04          	mov    %edx,0x4(%esp)
  102245:	89 74 24 08          	mov    %esi,0x8(%esp)
  102249:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10224d:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  102251:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102254:	e8 f7 00 00 00       	call   102350 <kprintf>
  102259:	8d 0d 14 52 10 00    	lea    0x105214,%ecx
  kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  10225f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102262:	8b 52 10             	mov    0x10(%edx),%edx
  102265:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102268:	8b 76 14             	mov    0x14(%esi),%esi
  10226b:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10226e:	8b 7f 18             	mov    0x18(%edi),%edi
  102271:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  102274:	8b 5b 24             	mov    0x24(%ebx),%ebx
  102277:	89 0c 24             	mov    %ecx,(%esp)
  10227a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10227e:	89 74 24 08          	mov    %esi,0x8(%esp)
  102282:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  102286:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  10228a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10228d:	e8 be 00 00 00       	call   102350 <kprintf>
  102292:	8d 0d 35 52 10 00    	lea    0x105235,%ecx
  kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  102298:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10229b:	8b 52 28             	mov    0x28(%edx),%edx
  10229e:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1022a1:	8b 76 2c             	mov    0x2c(%esi),%esi
  1022a4:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1022a7:	8b 7f 30             	mov    0x30(%edi),%edi
  1022aa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1022ad:	8b 5b 34             	mov    0x34(%ebx),%ebx
  1022b0:	89 0c 24             	mov    %ecx,(%esp)
  1022b3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022b7:	89 74 24 08          	mov    %esi,0x8(%esp)
  1022bb:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1022bf:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1022c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1022c6:	e8 85 00 00 00       	call   102350 <kprintf>
  1022cb:	8d 0d 57 52 10 00    	lea    0x105257,%ecx

  uint32_t cr2 = 0;
  1022d1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  asm volatile("mov %%cr2, %0" : "=r" (cr2));
  1022d8:	0f 20 d2             	mov    %cr2,%edx
  1022db:	89 55 ec             	mov    %edx,-0x14(%ebp)

  kprintf("CR2: %x \n", cr2);
  1022de:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1022e1:	89 0c 24             	mov    %ecx,(%esp)
  1022e4:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1022eb:	e8 60 00 00 00       	call   102350 <kprintf>
  1022f0:	89 45 d8             	mov    %eax,-0x28(%ebp)

  while(1) {
    asm volatile("cli; hlt");
  1022f3:	fa                   	cli    
  1022f4:	f4                   	hlt    
  }
  1022f5:	e9 f9 ff ff ff       	jmp    1022f3 <show_cod+0x103>
  1022fa:	66 90                	xchg   %ax,%ax
  1022fc:	66 90                	xchg   %ax,%ax
  1022fe:	66 90                	xchg   %ax,%ax

00102300 <clrscr>:
    } while (x);
    kputs(p);
}

void clrscr(void)
{
  102300:	55                   	push   %ebp
  102301:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102303:	50                   	push   %eax
  102304:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10230b:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  102312:	0f 8d 1d 00 00 00    	jge    102335 <clrscr+0x35>
        video[i] = 0;
  102318:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10231b:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102321:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102325:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102328:	05 01 00 00 00       	add    $0x1,%eax
  10232d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102330:	e9 d6 ff ff ff       	jmp    10230b <clrscr+0xb>
        video[i] = 0;
    }

    x = y = 0;
  102335:	c7 05 20 a4 10 00 00 	movl   $0x0,0x10a420
  10233c:	00 00 00 
  10233f:	c7 05 24 a4 10 00 00 	movl   $0x0,0x10a424
  102346:	00 00 00 
}
  102349:	83 c4 04             	add    $0x4,%esp
  10234c:	5d                   	pop    %ebp
  10234d:	c3                   	ret    
  10234e:	66 90                	xchg   %ax,%ax

00102350 <kprintf>:

int kprintf(const char* fmt, ...)
{
  102350:	55                   	push   %ebp
  102351:	89 e5                	mov    %esp,%ebp
  102353:	83 ec 58             	sub    $0x58,%esp
  102356:	8b 45 08             	mov    0x8(%ebp),%eax
  102359:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  10235c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10235f:	8d 45 0c             	lea    0xc(%ebp),%eax
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  102362:	89 01                	mov    %eax,(%ecx)
  kprintf_res = 0;
  102364:	c7 05 28 a4 10 00 00 	movl   $0x0,0x10a428
  10236b:	00 00 00 
  while (*fmt) {
  10236e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102371:	80 38 00             	cmpb   $0x0,(%eax)
  102374:	0f 84 dd 01 00 00    	je     102557 <kprintf+0x207>
    if (*fmt == '%') {
  10237a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10237d:	0f be 00             	movsbl (%eax),%eax
  102380:	3d 25 00 00 00       	cmp    $0x25,%eax
  102385:	0f 85 ae 01 00 00    	jne    102539 <kprintf+0x1e9>
      fmt++;
  10238b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10238e:	89 c1                	mov    %eax,%ecx
  102390:	41                   	inc    %ecx
  102391:	89 4d fc             	mov    %ecx,-0x4(%ebp)
      switch (*fmt) {
  102394:	0f be 40 01          	movsbl 0x1(%eax),%eax
  102398:	89 c1                	mov    %eax,%ecx
  10239a:	83 e9 24             	sub    $0x24,%ecx
  10239d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1023a0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1023a3:	0f 8f 15 00 00 00    	jg     1023be <kprintf+0x6e>
  1023a9:	e9 00 00 00 00       	jmp    1023ae <kprintf+0x5e>
  1023ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023b1:	85 c0                	test   %eax,%eax
  1023b3:	0f 84 54 01 00 00    	je     10250d <kprintf+0x1bd>
  1023b9:	e9 54 01 00 00       	jmp    102512 <kprintf+0x1c2>
  1023be:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023c1:	83 e8 62             	sub    $0x62,%eax
  1023c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1023c7:	0f 8f 19 00 00 00    	jg     1023e6 <kprintf+0x96>
  1023cd:	e9 00 00 00 00       	jmp    1023d2 <kprintf+0x82>
  1023d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023d5:	83 e8 25             	sub    $0x25,%eax
  1023d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1023db:	0f 84 13 01 00 00    	je     1024f4 <kprintf+0x1a4>
  1023e1:	e9 2c 01 00 00       	jmp    102512 <kprintf+0x1c2>
  1023e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023e9:	83 e8 6f             	sub    $0x6f,%eax
  1023ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1023ef:	0f 8f 2d 00 00 00    	jg     102422 <kprintf+0xd2>
  1023f5:	e9 00 00 00 00       	jmp    1023fa <kprintf+0xaa>
  1023fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023fd:	83 e8 63             	sub    $0x63,%eax
  102400:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102403:	0f 84 c5 00 00 00    	je     1024ce <kprintf+0x17e>
  102409:	e9 00 00 00 00       	jmp    10240e <kprintf+0xbe>
  10240e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102411:	83 e8 64             	sub    $0x64,%eax
  102414:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102417:	0f 84 4b 00 00 00    	je     102468 <kprintf+0x118>
  10241d:	e9 f0 00 00 00       	jmp    102512 <kprintf+0x1c2>
  102422:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102425:	83 c0 90             	add    $0xffffff90,%eax
  102428:	89 c1                	mov    %eax,%ecx
  10242a:	83 e9 08             	sub    $0x8,%ecx
  10242d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102430:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  102433:	0f 87 d9 00 00 00    	ja     102512 <kprintf+0x1c2>
  102439:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10243c:	8b 0c 85 08 50 10 00 	mov    0x105008(,%eax,4),%ecx
  102443:	ff e1                	jmp    *%ecx
        case 's':
          s = va_arg(ap, char*);
  102445:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102448:	89 c1                	mov    %eax,%ecx
  10244a:	81 c1 04 00 00 00    	add    $0x4,%ecx
  102450:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102453:	8b 00                	mov    (%eax),%eax
  102455:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  102458:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10245b:	89 04 24             	mov    %eax,(%esp)
  10245e:	e8 0d 01 00 00       	call   102570 <kputs>
          break;
  102463:	e9 cc 00 00 00       	jmp    102534 <kprintf+0x1e4>
  102468:	b8 0a 00 00 00       	mov    $0xa,%eax
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  10246d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102470:	89 ca                	mov    %ecx,%edx
  102472:	81 c2 04 00 00 00    	add    $0x4,%edx
  102478:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10247b:	8b 09                	mov    (%ecx),%ecx
  10247d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 10);
  102480:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102483:	89 0c 24             	mov    %ecx,(%esp)
  102486:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10248d:	00 
  10248e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102491:	e8 1a 01 00 00       	call   1025b0 <kputn>
          break;
  102496:	e9 99 00 00 00       	jmp    102534 <kprintf+0x1e4>
  10249b:	b8 10 00 00 00       	mov    $0x10,%eax
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  1024a0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1024a3:	89 ca                	mov    %ecx,%edx
  1024a5:	81 c2 04 00 00 00    	add    $0x4,%edx
  1024ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1024ae:	8b 09                	mov    (%ecx),%ecx
  1024b0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 16);
  1024b3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1024b6:	89 0c 24             	mov    %ecx,(%esp)
  1024b9:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1024c0:	00 
  1024c1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1024c4:	e8 e7 00 00 00       	call   1025b0 <kputn>
          break;
  1024c9:	e9 66 00 00 00       	jmp    102534 <kprintf+0x1e4>
        case 'c':
          c = va_arg(ap, int);
  1024ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1024d1:	89 c1                	mov    %eax,%ecx
  1024d3:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1024d9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1024dc:	8b 00                	mov    (%eax),%eax
  1024de:	88 c2                	mov    %al,%dl
  1024e0:	88 55 ef             	mov    %dl,-0x11(%ebp)
          kputc(c);
  1024e3:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  1024e7:	89 04 24             	mov    %eax,(%esp)
  1024ea:	e8 61 01 00 00       	call   102650 <kputc>
          break;
  1024ef:	e9 40 00 00 00       	jmp    102534 <kprintf+0x1e4>
  1024f4:	b8 25 00 00 00       	mov    $0x25,%eax
        case '%':
          kputc('%');
  1024f9:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  102500:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102503:	e8 48 01 00 00       	call   102650 <kputc>
          break;
  102508:	e9 27 00 00 00       	jmp    102534 <kprintf+0x1e4>
        case '\0':
          goto out;
  10250d:	e9 4a 00 00 00       	jmp    10255c <kprintf+0x20c>
  102512:	b8 25 00 00 00       	mov    $0x25,%eax
        default:
          kputc('%');
  102517:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10251e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102521:	e8 2a 01 00 00       	call   102650 <kputc>
          kputc(*fmt);
  102526:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102529:	0f be 00             	movsbl (%eax),%eax
  10252c:	89 04 24             	mov    %eax,(%esp)
  10252f:	e8 1c 01 00 00       	call   102650 <kputc>
          break;
      }
    } else {
  102534:	e9 0e 00 00 00       	jmp    102547 <kprintf+0x1f7>
      kputc(*fmt);
  102539:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10253c:	0f be 00             	movsbl (%eax),%eax
  10253f:	89 04 24             	mov    %eax,(%esp)
  102542:	e8 09 01 00 00       	call   102650 <kputc>
    }

    fmt++;
  102547:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10254a:	05 01 00 00 00       	add    $0x1,%eax
  10254f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  102552:	e9 17 fe ff ff       	jmp    10236e <kprintf+0x1e>
  102557:	e9 00 00 00 00       	jmp    10255c <kprintf+0x20c>

out:
  va_end(ap);

  return kprintf_res;
  10255c:	a1 28 a4 10 00       	mov    0x10a428,%eax
  102561:	83 c4 58             	add    $0x58,%esp
  102564:	5d                   	pop    %ebp
  102565:	c3                   	ret    
  102566:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10256d:	00 00 00 

00102570 <kputs>:
    x++;
    kprintf_res++;
}

static void kputs(const char* s)
{
  102570:	55                   	push   %ebp
  102571:	89 e5                	mov    %esp,%ebp
  102573:	83 ec 08             	sub    $0x8,%esp
  102576:	8b 45 08             	mov    0x8(%ebp),%eax
  102579:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  10257c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10257f:	80 38 00             	cmpb   $0x0,(%eax)
  102582:	0f 84 1e 00 00 00    	je     1025a6 <kputs+0x36>
        kputc(*s++);
  102588:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10258b:	89 c1                	mov    %eax,%ecx
  10258d:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102593:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  102596:	0f be 00             	movsbl (%eax),%eax
  102599:	89 04 24             	mov    %eax,(%esp)
  10259c:	e8 af 00 00 00       	call   102650 <kputc>
    }
  1025a1:	e9 d6 ff ff ff       	jmp    10257c <kputs+0xc>
}
  1025a6:	83 c4 08             	add    $0x8,%esp
  1025a9:	5d                   	pop    %ebp
  1025aa:	c3                   	ret    
  1025ab:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001025b0 <kputn>:

static void kputn(unsigned long x, int base)
{
  1025b0:	55                   	push   %ebp
  1025b1:	89 e5                	mov    %esp,%ebp
  1025b3:	56                   	push   %esi
  1025b4:	83 ec 64             	sub    $0x64,%esp
  1025b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1025ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1025bd:	8d 15 61 52 10 00    	lea    0x105261,%edx
  1025c3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1025c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1025c9:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  1025cc:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  1025d3:	0f 8e 05 00 00 00    	jle    1025de <kputn+0x2e>
        return;
  1025d9:	e9 5d 00 00 00       	jmp    10263b <kputn+0x8b>
  1025de:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  1025e1:	05 40 00 00 00       	add    $0x40,%eax
  1025e6:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  1025e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1025ec:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  1025ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1025f2:	31 d2                	xor    %edx,%edx
  1025f4:	f7 75 f4             	divl   -0xc(%ebp)
  1025f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
  1025fa:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  1025fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102600:	89 c2                	mov    %eax,%edx
  102602:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  102608:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10260b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10260e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102611:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102614:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102617:	89 d0                	mov    %edx,%eax
  102619:	31 d2                	xor    %edx,%edx
  10261b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10261e:	f7 f6                	div    %esi
  102620:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  102623:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10262a:	0f 85 bf ff ff ff    	jne    1025ef <kputn+0x3f>
    kputs(p);
  102630:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102633:	89 04 24             	mov    %eax,(%esp)
  102636:	e8 35 ff ff ff       	call   102570 <kputs>
}
  10263b:	83 c4 64             	add    $0x64,%esp
  10263e:	5e                   	pop    %esi
  10263f:	5d                   	pop    %ebp
  102640:	c3                   	ret    
  102641:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102648:	0f 1f 84 00 00 00 00 
  10264f:	00 

00102650 <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  102650:	55                   	push   %ebp
  102651:	89 e5                	mov    %esp,%ebp
  102653:	83 ec 08             	sub    $0x8,%esp
  102656:	8a 45 08             	mov    0x8(%ebp),%al
  102659:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((c == '\n') || (x > 79)) {
  10265c:	0f be 4d ff          	movsbl -0x1(%ebp),%ecx
  102660:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  102666:	0f 84 10 00 00 00    	je     10267c <kputc+0x2c>
  10266c:	81 3d 24 a4 10 00 4f 	cmpl   $0x4f,0x10a424
  102673:	00 00 00 
  102676:	0f 8e 19 00 00 00    	jle    102695 <kputc+0x45>
        x = 0;
  10267c:	c7 05 24 a4 10 00 00 	movl   $0x0,0x10a424
  102683:	00 00 00 
        y++;
  102686:	a1 20 a4 10 00       	mov    0x10a420,%eax
  10268b:	05 01 00 00 00       	add    $0x1,%eax
  102690:	a3 20 a4 10 00       	mov    %eax,0x10a420
    }

    if (c == '\n') {
  102695:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  102699:	3d 0a 00 00 00       	cmp    $0xa,%eax
  10269e:	0f 85 05 00 00 00    	jne    1026a9 <kputc+0x59>
        return;
  1026a4:	e9 ef 00 00 00       	jmp    102798 <kputc+0x148>
    }

    if (y > 24) {
  1026a9:	81 3d 20 a4 10 00 18 	cmpl   $0x18,0x10a420
  1026b0:	00 00 00 
  1026b3:	0f 8e 7e 00 00 00    	jle    102737 <kputc+0xe7>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1026b9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1026c0:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  1026c7:	0f 8d 2c 00 00 00    	jge    1026f9 <kputc+0xa9>
            video[i] = video[i + 160];
  1026cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1026d0:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  1026d6:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  1026dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1026e0:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  1026e6:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1026e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1026ec:	05 01 00 00 00       	add    $0x1,%eax
  1026f1:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1026f4:	e9 c7 ff ff ff       	jmp    1026c0 <kputc+0x70>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  1026f9:	e9 00 00 00 00       	jmp    1026fe <kputc+0xae>
  1026fe:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  102705:	0f 8d 1d 00 00 00    	jge    102728 <kputc+0xd8>
            video[i] = 0;
  10270b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10270e:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102714:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102718:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10271b:	05 01 00 00 00       	add    $0x1,%eax
  102720:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102723:	e9 d6 ff ff ff       	jmp    1026fe <kputc+0xae>
            video[i] = 0;
        }
        y--;
  102728:	a1 20 a4 10 00       	mov    0x10a420,%eax
  10272d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  102732:	a3 20 a4 10 00       	mov    %eax,0x10a420
    }

    video[2 * (y * 80 + x)] = c;
  102737:	8a 45 ff             	mov    -0x1(%ebp),%al
  10273a:	69 0d 20 a4 10 00 50 	imul   $0x50,0x10a420,%ecx
  102741:	00 00 00 
  102744:	03 0d 24 a4 10 00    	add    0x10a424,%ecx
  10274a:	c1 e1 01             	shl    $0x1,%ecx
  10274d:	8b 15 88 41 10 00    	mov    0x104188,%edx
  102753:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = 0x07;
  102756:	69 0d 20 a4 10 00 50 	imul   $0x50,0x10a420,%ecx
  10275d:	00 00 00 
  102760:	03 0d 24 a4 10 00    	add    0x10a424,%ecx
  102766:	c1 e1 01             	shl    $0x1,%ecx
  102769:	8b 15 88 41 10 00    	mov    0x104188,%edx
  10276f:	c6 44 0a 01 07       	movb   $0x7,0x1(%edx,%ecx,1)

    x++;
  102774:	8b 0d 24 a4 10 00    	mov    0x10a424,%ecx
  10277a:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102780:	89 0d 24 a4 10 00    	mov    %ecx,0x10a424
    kprintf_res++;
  102786:	8b 0d 28 a4 10 00    	mov    0x10a428,%ecx
  10278c:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102792:	89 0d 28 a4 10 00    	mov    %ecx,0x10a428
}
  102798:	83 c4 08             	add    $0x8,%esp
  10279b:	5d                   	pop    %ebp
  10279c:	c3                   	ret    
  10279d:	66 90                	xchg   %ax,%ax
  10279f:	90                   	nop

001027a0 <memset>:
#include "vmm.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n)
{
  1027a0:	55                   	push   %ebp
  1027a1:	89 e5                	mov    %esp,%ebp
  1027a3:	83 ec 10             	sub    $0x10,%esp
  1027a6:	8b 45 10             	mov    0x10(%ebp),%eax
  1027a9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1027ac:	8b 55 08             	mov    0x8(%ebp),%edx
  1027af:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1027b2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1027b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  1027b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1027bb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  1027be:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027c1:	89 c1                	mov    %eax,%ecx
  1027c3:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1027c9:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1027cc:	3d 00 00 00 00       	cmp    $0x0,%eax
  1027d1:	0f 84 1a 00 00 00    	je     1027f1 <memset+0x51>
        *p++ = c;
  1027d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1027da:	88 c1                	mov    %al,%cl
  1027dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1027df:	89 c2                	mov    %eax,%edx
  1027e1:	81 c2 01 00 00 00    	add    $0x1,%edx
  1027e7:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1027ea:	88 08                	mov    %cl,(%eax)
    }
  1027ec:	e9 cd ff ff ff       	jmp    1027be <memset+0x1e>

    return buf;
  1027f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1027f4:	83 c4 10             	add    $0x10,%esp
  1027f7:	5d                   	pop    %ebp
  1027f8:	c3                   	ret    
  1027f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102800 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n)
{
  102800:	55                   	push   %ebp
  102801:	89 e5                	mov    %esp,%ebp
  102803:	83 ec 14             	sub    $0x14,%esp
  102806:	8b 45 10             	mov    0x10(%ebp),%eax
  102809:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10280c:	8b 55 08             	mov    0x8(%ebp),%edx
  10280f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102812:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102815:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  102818:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10281b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  10281e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102821:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  102824:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102827:	89 c1                	mov    %eax,%ecx
  102829:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10282f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102832:	3d 00 00 00 00       	cmp    $0x0,%eax
  102837:	0f 84 25 00 00 00    	je     102862 <memcpy+0x62>
        *d++ = *s++;
  10283d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102840:	89 c1                	mov    %eax,%ecx
  102842:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102848:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10284b:	8a 10                	mov    (%eax),%dl
  10284d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102850:	89 c1                	mov    %eax,%ecx
  102852:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102858:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10285b:	88 10                	mov    %dl,(%eax)
    }
  10285d:	e9 c2 ff ff ff       	jmp    102824 <memcpy+0x24>

    return dest;
  102862:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102865:	83 c4 14             	add    $0x14,%esp
  102868:	5d                   	pop    %ebp
  102869:	c3                   	ret    
  10286a:	66 90                	xchg   %ax,%ax
  10286c:	66 90                	xchg   %ax,%ax
  10286e:	66 90                	xchg   %ax,%ax

00102870 <syscall>:
#include "elf.h"
#include "vmm.h"
#include "idt.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  102870:	55                   	push   %ebp
  102871:	89 e5                	mov    %esp,%ebp
  102873:	83 ec 08             	sub    $0x8,%esp
  102876:	8b 45 08             	mov    0x8(%ebp),%eax
  102879:	89 45 fc             	mov    %eax,-0x4(%ebp)
  switch (cpu->eax) {
  10287c:	8b 00                	mov    (%eax),%eax
  10287e:	85 c0                	test   %eax,%eax
  102880:	0f 85 13 00 00 00    	jne    102899 <syscall+0x29>
  102886:	e9 00 00 00 00       	jmp    10288b <syscall+0x1b>
    case 0: /* free_cpu */
      cpu = schedule(cpu);
  10288b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10288e:	89 04 24             	mov    %eax,(%esp)
  102891:	e8 9a 08 00 00       	call   103130 <schedule>
  102896:	89 45 fc             	mov    %eax,-0x4(%ebp)
      break;
  }

  return cpu;
  102899:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10289c:	83 c4 08             	add    $0x8,%esp
  10289f:	5d                   	pop    %ebp
  1028a0:	c3                   	ret    
  1028a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1028a8:	0f 1f 84 00 00 00 00 
  1028af:	00 

001028b0 <init_elf>:
}

void init_elf(void* image)
{
  1028b0:	55                   	push   %ebp
  1028b1:	89 e5                	mov    %esp,%ebp
  1028b3:	83 ec 38             	sub    $0x38,%esp
  1028b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1028b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    /*
     * FIXME Wir muessen eigentlich die Laenge vom Image pruefen, damit wir bei
     * korrupten ELF-Dateien nicht ueber das Dateiende hinauslesen.
     */
 
    struct elf_header* header = image;
  1028bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct elf_program_header* ph;
    int i;
 
    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  1028c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028c5:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  1028cb:	0f 84 16 00 00 00    	je     1028e7 <init_elf+0x37>
  1028d1:	8d 05 86 52 10 00    	lea    0x105286,%eax
        kprintf("Keine gueltige ELF-Magic!\n");
  1028d7:	89 04 24             	mov    %eax,(%esp)
  1028da:	e8 71 fa ff ff       	call   102350 <kprintf>
        return;
  1028df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1028e2:	e9 aa 00 00 00       	jmp    102991 <init_elf+0xe1>
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
  1028e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028ea:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1028ed:	03 41 1c             	add    0x1c(%ecx),%eax
  1028f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  1028f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1028fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028fd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102900:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  102904:	39 c8                	cmp    %ecx,%eax
  102906:	0f 8d 85 00 00 00    	jge    102991 <init_elf+0xe1>
        void* dest = (void*) ph->virt_addr;
  10290c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10290f:	8b 40 08             	mov    0x8(%eax),%eax
  102912:	89 45 ec             	mov    %eax,-0x14(%ebp)
        void* src = ((char*) image) + ph->offset;
  102915:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102918:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10291b:	03 41 04             	add    0x4(%ecx),%eax
  10291e:	89 45 e8             	mov    %eax,-0x18(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  102921:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102924:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  10292a:	0f 84 05 00 00 00    	je     102935 <init_elf+0x85>
            continue;
  102930:	e9 41 00 00 00       	jmp    102976 <init_elf+0xc6>
  102935:	b8 00 00 00 00       	mov    $0x0,%eax
        }
 
        memset(dest, 0, ph->mem_size);
  10293a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10293d:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102940:	8b 52 14             	mov    0x14(%edx),%edx
  102943:	89 0c 24             	mov    %ecx,(%esp)
  102946:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10294d:	00 
  10294e:	89 54 24 08          	mov    %edx,0x8(%esp)
  102952:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102955:	e8 46 fe ff ff       	call   1027a0 <memset>
        memcpy(dest, src, ph->file_size);
  10295a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10295d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102960:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102963:	8b 52 10             	mov    0x10(%edx),%edx
  102966:	89 04 24             	mov    %eax,(%esp)
  102969:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10296d:	89 54 24 08          	mov    %edx,0x8(%esp)
  102971:	e8 8a fe ff ff       	call   102800 <memcpy>
        kprintf("Keine gueltige ELF-Magic!\n");
        return;
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  102976:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102979:	05 01 00 00 00       	add    $0x1,%eax
  10297e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102981:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102984:	05 20 00 00 00       	add    $0x20,%eax
  102989:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10298c:	e9 69 ff ff ff       	jmp    1028fa <init_elf+0x4a>
        memset(dest, 0, ph->mem_size);
        memcpy(dest, src, ph->file_size);
    }
 
    //init_task((void*) header->entry);
}
  102991:	83 c4 38             	add    $0x38,%esp
  102994:	5d                   	pop    %ebp
  102995:	c3                   	ret    
  102996:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10299d:	00 00 00 

001029a0 <task2>:

void task2() {
  1029a0:	55                   	push   %ebp
  1029a1:	89 e5                	mov    %esp,%ebp
  1029a3:	83 ec 18             	sub    $0x18,%esp
  1029a6:	8d 05 a1 52 10 00    	lea    0x1052a1,%eax
  uint32_t n = 0;
  1029ac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("2222: %x \n", n);
  1029b3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029b6:	89 04 24             	mov    %eax,(%esp)
  1029b9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029bd:	e8 8e f9 ff ff       	call   102350 <kprintf>
  1029c2:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while(1) { 
    n++;
  1029c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1029c8:	05 01 00 00 00       	add    $0x1,%eax
  1029cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  1029d0:	e9 f0 ff ff ff       	jmp    1029c5 <task2+0x25>
  1029d5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1029dc:	00 00 00 00 

001029e0 <task1>:
}

void task1() {
  1029e0:	55                   	push   %ebp
  1029e1:	89 e5                	mov    %esp,%ebp
  1029e3:	83 ec 18             	sub    $0x18,%esp
  1029e6:	8d 05 ac 52 10 00    	lea    0x1052ac,%eax
  uint32_t n = 0;
  1029ec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("1111: %x \n", n);
  1029f3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029f6:	89 04 24             	mov    %eax,(%esp)
  1029f9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029fd:	e8 4e f9 ff ff       	call   102350 <kprintf>
  102a02:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while(1) { 
    n++;
  102a05:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a08:	05 01 00 00 00       	add    $0x1,%eax
  102a0d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  102a10:	e9 f0 ff ff ff       	jmp    102a05 <task1+0x25>
  102a15:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102a1c:	00 00 00 00 

00102a20 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  102a20:	55                   	push   %ebp
  102a21:	89 e5                	mov    %esp,%ebp
  102a23:	83 ec 38             	sub    $0x38,%esp
  102a26:	8b 45 08             	mov    0x8(%ebp),%eax
  102a29:	89 45 fc             	mov    %eax,-0x4(%ebp)
	vmm_init(mb_info);
  102a2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a2f:	89 04 24             	mov    %eax,(%esp)
  102a32:	e8 19 e6 ff ff       	call   101050 <vmm_init>
  102a37:	b9 00 00 00 00       	mov    $0x0,%ecx
	
	void* alloc = vmm_alloc(0);
  102a3c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102a46:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102a49:	e8 b2 e2 ff ff       	call   100d00 <vmm_alloc>
  102a4e:	8d 0d b7 52 10 00    	lea    0x1052b7,%ecx
  102a54:	89 45 f8             	mov    %eax,-0x8(%ebp)
	kprintf("alloc 1: %x \n", alloc);
  102a57:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102a5a:	89 0c 24             	mov    %ecx,(%esp)
  102a5d:	89 44 24 04          	mov    %eax,0x4(%esp)
  102a61:	e8 ea f8 ff ff       	call   102350 <kprintf>
  102a66:	b9 00 00 00 00       	mov    $0x0,%ecx
	
	alloc = vmm_alloc(0);
  102a6b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102a72:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102a75:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102a78:	e8 83 e2 ff ff       	call   100d00 <vmm_alloc>
  102a7d:	8d 0d c5 52 10 00    	lea    0x1052c5,%ecx
  102a83:	89 45 f8             	mov    %eax,-0x8(%ebp)
	kprintf("alloc 2: %x \n", alloc);
  102a86:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102a89:	89 0c 24             	mov    %ecx,(%esp)
  102a8c:	89 44 24 04          	mov    %eax,0x4(%esp)
  102a90:	e8 bb f8 ff ff       	call   102350 <kprintf>
	
	vmm_free(alloc);
  102a95:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102a98:	89 0c 24             	mov    %ecx,(%esp)
  102a9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102a9e:	e8 ed e3 ff ff       	call   100e90 <vmm_free>
  102aa3:	b8 00 00 00 00       	mov    $0x0,%eax
	alloc = vmm_alloc(0);
  102aa8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102aaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102ab2:	e8 49 e2 ff ff       	call   100d00 <vmm_alloc>
  102ab7:	8d 0d d3 52 10 00    	lea    0x1052d3,%ecx
  102abd:	89 45 f8             	mov    %eax,-0x8(%ebp)
	kprintf("alloc 3: %x \n", alloc);
  102ac0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102ac3:	89 0c 24             	mov    %ecx,(%esp)
  102ac6:	89 44 24 04          	mov    %eax,0x4(%esp)
  102aca:	e8 81 f8 ff ff       	call   102350 <kprintf>
	
	init_task(vmm_create_pagedir(mb_info), task2);
  102acf:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102ad2:	89 0c 24             	mov    %ecx,(%esp)
  102ad5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102ad8:	e8 93 de ff ff       	call   100970 <vmm_create_pagedir>
  102add:	8d 0d a0 29 10 00    	lea    0x1029a0,%ecx
  102ae3:	89 04 24             	mov    %eax,(%esp)
  102ae6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102aea:	e8 21 04 00 00       	call   102f10 <init_task>
	init_task(vmm_create_pagedir(mb_info), task1);
  102aef:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102af2:	89 0c 24             	mov    %ecx,(%esp)
  102af5:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102af8:	e8 73 de ff ff       	call   100970 <vmm_create_pagedir>
  102afd:	8d 0d e0 29 10 00    	lea    0x1029e0,%ecx
  102b03:	89 04 24             	mov    %eax,(%esp)
  102b06:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b0a:	e8 01 04 00 00       	call   102f10 <init_task>
	  
	enable_scheduling();
  102b0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102b12:	e8 e9 03 00 00       	call   102f00 <enable_scheduling>
	else
	{
	  kprintf("No Modules loadable. Microkernel shutting down.\nThank you for using this pointless version of mikrOS\n");
	}*/

	while(1) {  }
  102b17:	e9 fb ff ff ff       	jmp    102b17 <kernel_main+0xf7>

00102b1c <intr_stub_0>:
  102b1c:	6a 00                	push   $0x0
  102b1e:	6a 00                	push   $0x0
  102b20:	e9 eb 00 00 00       	jmp    102c10 <intr_common_handler>

00102b25 <intr_stub_1>:
  102b25:	6a 00                	push   $0x0
  102b27:	6a 01                	push   $0x1
  102b29:	e9 e2 00 00 00       	jmp    102c10 <intr_common_handler>

00102b2e <intr_stub_2>:
  102b2e:	6a 00                	push   $0x0
  102b30:	6a 02                	push   $0x2
  102b32:	e9 d9 00 00 00       	jmp    102c10 <intr_common_handler>

00102b37 <intr_stub_3>:
  102b37:	6a 00                	push   $0x0
  102b39:	6a 03                	push   $0x3
  102b3b:	e9 d0 00 00 00       	jmp    102c10 <intr_common_handler>

00102b40 <intr_stub_4>:
  102b40:	6a 00                	push   $0x0
  102b42:	6a 04                	push   $0x4
  102b44:	e9 c7 00 00 00       	jmp    102c10 <intr_common_handler>

00102b49 <intr_stub_5>:
  102b49:	6a 00                	push   $0x0
  102b4b:	6a 05                	push   $0x5
  102b4d:	e9 be 00 00 00       	jmp    102c10 <intr_common_handler>

00102b52 <intr_stub_6>:
  102b52:	6a 00                	push   $0x0
  102b54:	6a 06                	push   $0x6
  102b56:	e9 b5 00 00 00       	jmp    102c10 <intr_common_handler>

00102b5b <intr_stub_7>:
  102b5b:	6a 00                	push   $0x0
  102b5d:	6a 07                	push   $0x7
  102b5f:	e9 ac 00 00 00       	jmp    102c10 <intr_common_handler>

00102b64 <intr_stub_8>:
  102b64:	6a 08                	push   $0x8
  102b66:	e9 a5 00 00 00       	jmp    102c10 <intr_common_handler>

00102b6b <intr_stub_9>:
  102b6b:	6a 00                	push   $0x0
  102b6d:	6a 09                	push   $0x9
  102b6f:	e9 9c 00 00 00       	jmp    102c10 <intr_common_handler>

00102b74 <intr_stub_10>:
  102b74:	6a 0a                	push   $0xa
  102b76:	e9 95 00 00 00       	jmp    102c10 <intr_common_handler>

00102b7b <intr_stub_11>:
  102b7b:	6a 0b                	push   $0xb
  102b7d:	e9 8e 00 00 00       	jmp    102c10 <intr_common_handler>

00102b82 <intr_stub_12>:
  102b82:	6a 0c                	push   $0xc
  102b84:	e9 87 00 00 00       	jmp    102c10 <intr_common_handler>

00102b89 <intr_stub_13>:
  102b89:	6a 0d                	push   $0xd
  102b8b:	e9 80 00 00 00       	jmp    102c10 <intr_common_handler>

00102b90 <intr_stub_14>:
  102b90:	6a 0e                	push   $0xe
  102b92:	eb 7c                	jmp    102c10 <intr_common_handler>

00102b94 <intr_stub_15>:
  102b94:	6a 00                	push   $0x0
  102b96:	6a 0f                	push   $0xf
  102b98:	eb 76                	jmp    102c10 <intr_common_handler>

00102b9a <intr_stub_16>:
  102b9a:	6a 00                	push   $0x0
  102b9c:	6a 10                	push   $0x10
  102b9e:	eb 70                	jmp    102c10 <intr_common_handler>

00102ba0 <intr_stub_17>:
  102ba0:	6a 11                	push   $0x11
  102ba2:	eb 6c                	jmp    102c10 <intr_common_handler>

00102ba4 <intr_stub_18>:
  102ba4:	6a 00                	push   $0x0
  102ba6:	6a 12                	push   $0x12
  102ba8:	eb 66                	jmp    102c10 <intr_common_handler>

00102baa <intr_stub_32>:
  102baa:	6a 00                	push   $0x0
  102bac:	6a 20                	push   $0x20
  102bae:	eb 60                	jmp    102c10 <intr_common_handler>

00102bb0 <intr_stub_33>:
  102bb0:	6a 00                	push   $0x0
  102bb2:	6a 21                	push   $0x21
  102bb4:	eb 5a                	jmp    102c10 <intr_common_handler>

00102bb6 <intr_stub_34>:
  102bb6:	6a 00                	push   $0x0
  102bb8:	6a 22                	push   $0x22
  102bba:	eb 54                	jmp    102c10 <intr_common_handler>

00102bbc <intr_stub_35>:
  102bbc:	6a 00                	push   $0x0
  102bbe:	6a 23                	push   $0x23
  102bc0:	eb 4e                	jmp    102c10 <intr_common_handler>

00102bc2 <intr_stub_36>:
  102bc2:	6a 00                	push   $0x0
  102bc4:	6a 24                	push   $0x24
  102bc6:	eb 48                	jmp    102c10 <intr_common_handler>

00102bc8 <intr_stub_37>:
  102bc8:	6a 00                	push   $0x0
  102bca:	6a 25                	push   $0x25
  102bcc:	eb 42                	jmp    102c10 <intr_common_handler>

00102bce <intr_stub_38>:
  102bce:	6a 00                	push   $0x0
  102bd0:	6a 26                	push   $0x26
  102bd2:	eb 3c                	jmp    102c10 <intr_common_handler>

00102bd4 <intr_stub_39>:
  102bd4:	6a 00                	push   $0x0
  102bd6:	6a 27                	push   $0x27
  102bd8:	eb 36                	jmp    102c10 <intr_common_handler>

00102bda <intr_stub_40>:
  102bda:	6a 00                	push   $0x0
  102bdc:	6a 28                	push   $0x28
  102bde:	eb 30                	jmp    102c10 <intr_common_handler>

00102be0 <intr_stub_41>:
  102be0:	6a 00                	push   $0x0
  102be2:	6a 29                	push   $0x29
  102be4:	eb 2a                	jmp    102c10 <intr_common_handler>

00102be6 <intr_stub_42>:
  102be6:	6a 00                	push   $0x0
  102be8:	6a 2a                	push   $0x2a
  102bea:	eb 24                	jmp    102c10 <intr_common_handler>

00102bec <intr_stub_43>:
  102bec:	6a 00                	push   $0x0
  102bee:	6a 2b                	push   $0x2b
  102bf0:	eb 1e                	jmp    102c10 <intr_common_handler>

00102bf2 <intr_stub_44>:
  102bf2:	6a 00                	push   $0x0
  102bf4:	6a 2c                	push   $0x2c
  102bf6:	eb 18                	jmp    102c10 <intr_common_handler>

00102bf8 <intr_stub_45>:
  102bf8:	6a 00                	push   $0x0
  102bfa:	6a 2d                	push   $0x2d
  102bfc:	eb 12                	jmp    102c10 <intr_common_handler>

00102bfe <intr_stub_46>:
  102bfe:	6a 00                	push   $0x0
  102c00:	6a 2e                	push   $0x2e
  102c02:	eb 0c                	jmp    102c10 <intr_common_handler>

00102c04 <intr_stub_47>:
  102c04:	6a 00                	push   $0x0
  102c06:	6a 2f                	push   $0x2f
  102c08:	eb 06                	jmp    102c10 <intr_common_handler>

00102c0a <intr_stub_48>:
  102c0a:	6a 00                	push   $0x0
  102c0c:	6a 30                	push   $0x30
  102c0e:	eb 00                	jmp    102c10 <intr_common_handler>

00102c10 <intr_common_handler>:
  102c10:	55                   	push   %ebp
  102c11:	57                   	push   %edi
  102c12:	56                   	push   %esi
  102c13:	52                   	push   %edx
  102c14:	51                   	push   %ecx
  102c15:	53                   	push   %ebx
  102c16:	50                   	push   %eax
  102c17:	66 b8 10 00          	mov    $0x10,%ax
  102c1b:	66 8e d8             	mov    %ax,%ds
  102c1e:	66 8e c0             	mov    %ax,%es
  102c21:	89 e0                	mov    %esp,%eax
  102c23:	bc 00 a0 10 00       	mov    $0x10a000,%esp
  102c28:	50                   	push   %eax
  102c29:	e8 72 f4 ff ff       	call   1020a0 <handle_interrupt>
  102c2e:	89 c4                	mov    %eax,%esp
  102c30:	66 b8 23 00          	mov    $0x23,%ax
  102c34:	66 8e d8             	mov    %ax,%ds
  102c37:	66 8e c0             	mov    %ax,%es
  102c3a:	58                   	pop    %eax
  102c3b:	5b                   	pop    %ebx
  102c3c:	59                   	pop    %ecx
  102c3d:	5a                   	pop    %edx
  102c3e:	5e                   	pop    %esi
  102c3f:	5f                   	pop    %edi
  102c40:	5d                   	pop    %ebp
  102c41:	83 c4 08             	add    $0x8,%esp
  102c44:	cf                   	iret   
  102c45:	66 90                	xchg   %ax,%ax
  102c47:	66 90                	xchg   %ax,%ax
  102c49:	66 90                	xchg   %ax,%ax
  102c4b:	66 90                	xchg   %ax,%ax
  102c4d:	66 90                	xchg   %ax,%ax
  102c4f:	90                   	nop

00102c50 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  102c50:	55                   	push   %ebp
  102c51:	89 e5                	mov    %esp,%ebp
	struct {
  102c53:	83 ec 08             	sub    $0x8,%esp
  102c56:	a1 2c 50 10 00       	mov    0x10502c,%eax
  102c5b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102c5e:	66 8b 0d 30 50 10 00 	mov    0x105030,%cx
  102c65:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
	asm volatile("lgdt %0" : : "m" (gdtp));
  102c69:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  102c6d:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  102c71:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  102c74:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  102c77:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  102c7a:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  102c7d:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  102c80:	83 c4 08             	add    $0x8,%esp
  102c83:	5d                   	pop    %ebp
  102c84:	c3                   	ret    
  102c85:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102c8c:	00 00 00 00 

00102c90 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  102c90:	55                   	push   %ebp
  102c91:	89 e5                	mov    %esp,%ebp
  102c93:	56                   	push   %esi
  102c94:	83 ec 10             	sub    $0x10,%esp
  102c97:	8b 45 14             	mov    0x14(%ebp),%eax
  102c9a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102c9d:	8b 55 0c             	mov    0xc(%ebp),%edx
  102ca0:	8b 75 08             	mov    0x8(%ebp),%esi
  102ca3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  102ca6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  102ca9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102cac:	89 45 ec             	mov    %eax,-0x14(%ebp)
    gdt[i] = limit & 0xffffLL;
  102caf:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  102cb3:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102cb6:	89 04 cd 38 a4 12 00 	mov    %eax,0x12a438(,%ecx,8)
  102cbd:	c7 04 cd 3c a4 12 00 	movl   $0x0,0x12a43c(,%ecx,8)
  102cc4:	00 00 00 00 
    gdt[i] |= (base & 0xffffffLL) << 16;
  102cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ccb:	25 ff ff ff 00       	and    $0xffffff,%eax
  102cd0:	89 c1                	mov    %eax,%ecx
  102cd2:	c1 e1 10             	shl    $0x10,%ecx
  102cd5:	c1 e8 10             	shr    $0x10,%eax
  102cd8:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102cdb:	8b 34 d5 3c a4 12 00 	mov    0x12a43c(,%edx,8),%esi
  102ce2:	09 f0                	or     %esi,%eax
  102ce4:	8b 34 d5 38 a4 12 00 	mov    0x12a438(,%edx,8),%esi
  102ceb:	09 ce                	or     %ecx,%esi
  102ced:	89 04 d5 3c a4 12 00 	mov    %eax,0x12a43c(,%edx,8)
  102cf4:	89 34 d5 38 a4 12 00 	mov    %esi,0x12a438(,%edx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  102cfb:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  102cff:	c1 e0 08             	shl    $0x8,%eax
  102d02:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102d05:	8b 14 cd 38 a4 12 00 	mov    0x12a438(,%ecx,8),%edx
  102d0c:	8b 34 cd 3c a4 12 00 	mov    0x12a43c(,%ecx,8),%esi
  102d13:	09 c6                	or     %eax,%esi
  102d15:	89 14 cd 38 a4 12 00 	mov    %edx,0x12a438(,%ecx,8)
  102d1c:	89 34 cd 3c a4 12 00 	mov    %esi,0x12a43c(,%ecx,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  102d23:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  102d27:	83 e0 0f             	and    $0xf,%eax
  102d2a:	c1 e0 10             	shl    $0x10,%eax
  102d2d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102d30:	8b 14 cd 38 a4 12 00 	mov    0x12a438(,%ecx,8),%edx
  102d37:	8b 34 cd 3c a4 12 00 	mov    0x12a43c(,%ecx,8),%esi
  102d3e:	09 c6                	or     %eax,%esi
  102d40:	89 14 cd 38 a4 12 00 	mov    %edx,0x12a438(,%ecx,8)
  102d47:	89 34 cd 3c a4 12 00 	mov    %esi,0x12a43c(,%ecx,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  102d4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102d51:	c1 e0 0c             	shl    $0xc,%eax
  102d54:	25 00 00 f0 0f       	and    $0xff00000,%eax
  102d59:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102d5c:	8b 14 cd 38 a4 12 00 	mov    0x12a438(,%ecx,8),%edx
  102d63:	8b 34 cd 3c a4 12 00 	mov    0x12a43c(,%ecx,8),%esi
  102d6a:	09 c6                	or     %eax,%esi
  102d6c:	89 14 cd 38 a4 12 00 	mov    %edx,0x12a438(,%ecx,8)
  102d73:	89 34 cd 3c a4 12 00 	mov    %esi,0x12a43c(,%ecx,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  102d7a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  102d7e:	c1 e0 18             	shl    $0x18,%eax
  102d81:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102d84:	8b 14 cd 38 a4 12 00 	mov    0x12a438(,%ecx,8),%edx
  102d8b:	8b 34 cd 3c a4 12 00 	mov    0x12a43c(,%ecx,8),%esi
  102d92:	09 c6                	or     %eax,%esi
  102d94:	89 14 cd 38 a4 12 00 	mov    %edx,0x12a438(,%ecx,8)
  102d9b:	89 34 cd 3c a4 12 00 	mov    %esi,0x12a43c(,%ecx,8)
}
  102da2:	83 c4 10             	add    $0x10,%esp
  102da5:	5e                   	pop    %esi
  102da6:	5d                   	pop    %ebp
  102da7:	c3                   	ret    
  102da8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  102daf:	00 

00102db0 <init_gdt>:

void init_gdt(void)
{
  102db0:	55                   	push   %ebp
  102db1:	89 e5                	mov    %esp,%ebp
  102db3:	56                   	push   %esi
  102db4:	83 ec 54             	sub    $0x54,%esp
  102db7:	b8 00 00 00 00       	mov    $0x0,%eax
    set_gdt_entry(0, 0, 0, 0);
  102dbc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102dc3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102dca:	00 
  102dcb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102dd2:	00 
  102dd3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102dda:	00 
  102ddb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102dde:	e8 ad fe ff ff       	call   102c90 <set_gdt_entry>
  102de3:	b8 01 00 00 00       	mov    $0x1,%eax
  102de8:	b9 00 00 00 00       	mov    $0x0,%ecx
  102ded:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102df2:	be 9a 0c 00 00       	mov    $0xc9a,%esi
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102df7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  102dfe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102e05:	00 
  102e06:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102e0d:	00 
  102e0e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  102e15:	00 
  102e16:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102e19:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102e1c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102e1f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  102e22:	e8 69 fe ff ff       	call   102c90 <set_gdt_entry>
  102e27:	b8 02 00 00 00       	mov    $0x2,%eax
  102e2c:	b9 00 00 00 00       	mov    $0x0,%ecx
  102e31:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102e36:	be 92 0c 00 00       	mov    $0xc92,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102e3b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  102e42:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102e49:	00 
  102e4a:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102e51:	00 
  102e52:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  102e59:	00 
  102e5a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102e5d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  102e60:	89 55 dc             	mov    %edx,-0x24(%ebp)
  102e63:	89 75 d8             	mov    %esi,-0x28(%ebp)
  102e66:	e8 25 fe ff ff       	call   102c90 <set_gdt_entry>
  102e6b:	b8 03 00 00 00       	mov    $0x3,%eax
  102e70:	b9 00 00 00 00       	mov    $0x0,%ecx
  102e75:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102e7a:	be fa 0c 00 00       	mov    $0xcfa,%esi
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102e7f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  102e86:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102e8d:	00 
  102e8e:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102e95:	00 
  102e96:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  102e9d:	00 
  102e9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102ea1:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  102ea4:	89 55 cc             	mov    %edx,-0x34(%ebp)
  102ea7:	89 75 c8             	mov    %esi,-0x38(%ebp)
  102eaa:	e8 e1 fd ff ff       	call   102c90 <set_gdt_entry>
  102eaf:	b8 04 00 00 00       	mov    $0x4,%eax
  102eb4:	b9 00 00 00 00       	mov    $0x0,%ecx
  102eb9:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102ebe:	be f2 0c 00 00       	mov    $0xcf2,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102ec3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  102eca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ed1:	00 
  102ed2:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102ed9:	00 
  102eda:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  102ee1:	00 
  102ee2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102ee5:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  102ee8:	89 55 bc             	mov    %edx,-0x44(%ebp)
  102eeb:	89 75 b8             	mov    %esi,-0x48(%ebp)
  102eee:	e8 9d fd ff ff       	call   102c90 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  102ef3:	e8 58 fd ff ff       	call   102c50 <load_gdt>
}
  102ef8:	83 c4 54             	add    $0x54,%esp
  102efb:	5e                   	pop    %esi
  102efc:	5d                   	pop    %ebp
  102efd:	c3                   	ret    
  102efe:	66 90                	xchg   %ax,%ax

00102f00 <enable_scheduling>:
uint32_t scheduling_enabled = 0;

struct cpu_state* current_pdir_cpu = (void*) STATIC_ALLOC_VADDR + 4096 - sizeof(struct cpu_state);
uint32_t* next_pagedir = (void*) STATIC_ALLOC_VADDR + 0x2000;

void enable_scheduling(void) {
  102f00:	55                   	push   %ebp
  102f01:	89 e5                	mov    %esp,%ebp
  scheduling_enabled = 1;
  102f03:	c7 05 30 a4 10 00 01 	movl   $0x1,0x10a430
  102f0a:	00 00 00 
}
  102f0d:	5d                   	pop    %ebp
  102f0e:	c3                   	ret    
  102f0f:	90                   	nop

00102f10 <init_task>:

uint32_t init_task(uint32_t task_pagedir, void* entry)
{
  102f10:	55                   	push   %ebp
  102f11:	89 e5                	mov    %esp,%ebp
  102f13:	57                   	push   %edi
  102f14:	56                   	push   %esi
  102f15:	81 ec a0 00 00 00    	sub    $0xa0,%esp
  102f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
  102f1e:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102f21:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102f24:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t old_fpd = first_pagedir;
  102f27:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  102f2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t old_pagedir = vmm_get_current_pagedir();
  102f2f:	e8 2c da ff ff       	call   100960 <vmm_get_current_pagedir>
  102f34:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t task_next_pagedir = 0;    
  102f37:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  
  if(first_pagedir == 0) {
  102f3e:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  102f45:	00 00 00 
  102f48:	0f 85 0d 00 00 00    	jne    102f5b <init_task+0x4b>
    first_pagedir = task_pagedir;
  102f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102f51:	a3 2c a4 10 00       	mov    %eax,0x10a42c
  }
  102f56:	e9 10 00 00 00       	jmp    102f6b <init_task+0x5b>
  else
  {
    task_next_pagedir = first_pagedir;
  102f5b:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  102f60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    first_pagedir = task_pagedir;
  102f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102f66:	a3 2c a4 10 00       	mov    %eax,0x10a42c
  }
  
  vmm_activate_pagedir(task_pagedir);
  102f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102f6e:	89 04 24             	mov    %eax,(%esp)
  102f71:	e8 ba e0 ff ff       	call   101030 <vmm_activate_pagedir>
  102f76:	b8 00 00 00 00       	mov    $0x0,%eax
  
                        vmm_alloc_static(0x0000, 0);
  102f7b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102f82:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f89:	00 
  102f8a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102f8d:	e8 fe df ff ff       	call   100f90 <vmm_alloc_static>
  102f92:	b9 00 10 00 00       	mov    $0x1000,%ecx
  102f97:	ba 04 00 00 00       	mov    $0x4,%edx
  uint8_t* user_stack = vmm_alloc_static(0x1000, PT_PUBLIC);
  102f9c:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  102fa3:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  102faa:	00 
  102fab:	89 45 a0             	mov    %eax,-0x60(%ebp)
  102fae:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  102fb1:	89 55 98             	mov    %edx,-0x68(%ebp)
  102fb4:	e8 d7 df ff ff       	call   100f90 <vmm_alloc_static>
  102fb9:	b9 00 20 00 00       	mov    $0x2000,%ecx
  102fbe:	ba 00 00 00 00       	mov    $0x0,%edx
  102fc3:	89 45 e0             	mov    %eax,-0x20(%ebp)
                        vmm_alloc_static(0x2000, 0);
  102fc6:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  102fcd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102fd4:	00 
  102fd5:	89 55 94             	mov    %edx,-0x6c(%ebp)
  102fd8:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  102fdb:	e8 b0 df ff ff       	call   100f90 <vmm_alloc_static>
  102fe0:	b9 38 00 00 00       	mov    $0x38,%ecx
  102fe5:	8d 55 a8             	lea    -0x58(%ebp),%edx
  
  *next_pagedir = task_next_pagedir;
  102fe8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  102feb:	8b 3d 90 41 10 00    	mov    0x104190,%edi
  102ff1:	89 37                	mov    %esi,(%edi)

  struct cpu_state new_state = {
  102ff3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
  102ffa:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  103001:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  103008:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  10300f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  103016:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  10301d:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  103024:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  10302b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  103032:	8b 75 f0             	mov    -0x10(%ebp),%esi
  103035:	89 75 cc             	mov    %esi,-0x34(%ebp)
  103038:	c7 45 d0 1b 00 00 00 	movl   $0x1b,-0x30(%ebp)
  10303f:	c7 45 d4 02 02 00 00 	movl   $0x202,-0x2c(%ebp)
  103046:	8b 75 e0             	mov    -0x20(%ebp),%esi
  103049:	81 c6 00 10 00 00    	add    $0x1000,%esi
  10304f:	89 75 d8             	mov    %esi,-0x28(%ebp)
  103052:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%ebp)
      .ss  = 0x20 | 0x03,
      
      .eflags = 0x202,
  };
      
  *current_pdir_cpu = new_state;
  103059:	8b 35 8c 41 10 00    	mov    0x10418c,%esi
  10305f:	89 34 24             	mov    %esi,(%esp)
  103062:	89 54 24 04          	mov    %edx,0x4(%esp)
  103066:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  10306d:	00 
  10306e:	89 45 8c             	mov    %eax,-0x74(%ebp)
  103071:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  103074:	e8 87 f7 ff ff       	call   102800 <memcpy>
  
  vmm_activate_pagedir(old_pagedir);
  103079:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10307c:	89 04 24             	mov    %eax,(%esp)
  10307f:	e8 ac df ff ff       	call   101030 <vmm_activate_pagedir>
  
  if(old_fpd == 0) {
  103084:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  10308b:	0f 85 8b 00 00 00    	jne    10311c <init_task+0x20c>
  103091:	b8 00 00 00 00       	mov    $0x0,%eax
    vmm_alloc_static(0x0000, 0);
  103096:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10309d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1030a4:	00 
  1030a5:	89 45 84             	mov    %eax,-0x7c(%ebp)
  1030a8:	e8 e3 de ff ff       	call   100f90 <vmm_alloc_static>
  1030ad:	b9 00 10 00 00       	mov    $0x1000,%ecx
  1030b2:	ba 04 00 00 00       	mov    $0x4,%edx
    vmm_alloc_static(0x1000, PT_PUBLIC);
  1030b7:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  1030be:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1030c5:	00 
  1030c6:	89 45 80             	mov    %eax,-0x80(%ebp)
  1030c9:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  1030cf:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  1030d5:	e8 b6 de ff ff       	call   100f90 <vmm_alloc_static>
  1030da:	b9 00 20 00 00       	mov    $0x2000,%ecx
  1030df:	ba 00 00 00 00       	mov    $0x0,%edx
    vmm_alloc_static(0x2000, 0);
  1030e4:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  1030eb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1030f2:	00 
  1030f3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  1030f9:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  1030ff:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  103105:	e8 86 de ff ff       	call   100f90 <vmm_alloc_static>
    *next_pagedir = 0;
  10310a:	8b 0d 90 41 10 00    	mov    0x104190,%ecx
  103110:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
  103116:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  }
  
  return task_pagedir;
  10311c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10311f:	81 c4 a0 00 00 00    	add    $0xa0,%esp
  103125:	5e                   	pop    %esi
  103126:	5f                   	pop    %edi
  103127:	5d                   	pop    %ebp
  103128:	c3                   	ret    
  103129:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00103130 <schedule>:
}

struct cpu_state* schedule(struct cpu_state* cpu)
{
  103130:	55                   	push   %ebp
  103131:	89 e5                	mov    %esp,%ebp
  103133:	83 ec 18             	sub    $0x18,%esp
  103136:	8b 45 08             	mov    0x8(%ebp),%eax
  103139:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t newCPU = 0;
  10313c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  if(first_pagedir != 0 && scheduling_enabled) {  
  103143:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  10314a:	00 00 00 
  10314d:	0f 84 41 00 00 00    	je     103194 <schedule+0x64>
  103153:	81 3d 30 a4 10 00 00 	cmpl   $0x0,0x10a430
  10315a:	00 00 00 
  10315d:	0f 84 31 00 00 00    	je     103194 <schedule+0x64>
    uint32_t next = *next_pagedir;
  103163:	a1 90 41 10 00       	mov    0x104190,%eax
  103168:	8b 00                	mov    (%eax),%eax
  10316a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next == 0) next = first_pagedir;
  10316d:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103174:	0f 85 08 00 00 00    	jne    103182 <schedule+0x52>
  10317a:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  10317f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    newCPU = 1;            
  103182:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    vmm_activate_pagedir(next);
  103189:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10318c:	89 04 24             	mov    %eax,(%esp)
  10318f:	e8 9c de ff ff       	call   101030 <vmm_activate_pagedir>
  }
  
  if(newCPU != 0) return current_pdir_cpu;
  103194:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10319b:	0f 84 0d 00 00 00    	je     1031ae <schedule+0x7e>
  1031a1:	a1 8c 41 10 00       	mov    0x10418c,%eax
  1031a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1031a9:	e9 06 00 00 00       	jmp    1031b4 <schedule+0x84>
  return cpu;
  1031ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1031b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1031b7:	83 c4 18             	add    $0x18,%esp
  1031ba:	5d                   	pop    %ebp
  1031bb:	c3                   	ret    
