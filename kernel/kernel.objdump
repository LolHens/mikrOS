
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 bc                	in     $0xbc,%al

0010000c <_start>:
  10000c:	bc 00 80 10 00       	mov    $0x108000,%esp
  100011:	53                   	push   %ebx
  100012:	e8 09 00 00 00       	call   100020 <init>

00100017 <_stop>:
  100017:	fa                   	cli    
  100018:	f4                   	hlt    
  100019:	eb fc                	jmp    100017 <_stop>
  10001b:	66 90                	xchg   %ax,%ax
  10001d:	66 90                	xchg   %ax,%ax
  10001f:	90                   	nop

00100020 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  100020:	55                   	push   %ebp
  100021:	89 e5                	mov    %esp,%ebp
  100023:	83 ec 28             	sub    $0x28,%esp
  100026:	8b 45 08             	mov    0x8(%ebp),%eax
  100029:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10002c:	e8 2f 21 00 00       	call   102160 <clrscr>
  pmm_init(mb_info);
  100031:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100034:	89 04 24             	mov    %eax,(%esp)
  100037:	e8 44 07 00 00       	call   100780 <pmm_init>
  10003c:	8d 05 32 50 10 00    	lea    0x105032,%eax
  100042:	8d 0d 55 50 10 00    	lea    0x105055,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100048:	89 04 24             	mov    %eax,(%esp)
  10004b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10004f:	e8 5c 21 00 00       	call   1021b0 <kprintf>
  100054:	8d 0d 5f 50 10 00    	lea    0x10505f,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10005a:	89 0c 24             	mov    %ecx,(%esp)
  10005d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100060:	e8 4b 21 00 00       	call   1021b0 <kprintf>
  100065:	8d 0d 9e 50 10 00    	lea    0x10509e,%ecx

	kprintf("Initializing GDT...\n");
  10006b:	89 0c 24             	mov    %ecx,(%esp)
  10006e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100071:	e8 3a 21 00 00       	call   1021b0 <kprintf>
	
	init_gdt();
  100076:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100079:	e8 92 2c 00 00       	call   102d10 <init_gdt>
  10007e:	8d 05 b3 50 10 00    	lea    0x1050b3,%eax

	kprintf("Initializing IDT...\n");
  100084:	89 04 24             	mov    %eax,(%esp)
  100087:	e8 24 21 00 00       	call   1021b0 <kprintf>
  10008c:	8d 0d c8 50 10 00    	lea    0x1050c8,%ecx

	init_idt();
  100092:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100095:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100098:	e8 f3 11 00 00       	call   101290 <init_idt>

	kprintf("init_drivers()\n");
  10009d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1000a0:	89 04 24             	mov    %eax,(%esp)
  1000a3:	e8 08 21 00 00       	call   1021b0 <kprintf>

	init_drivers();
  1000a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1000ab:	e8 30 00 00 00       	call   1000e0 <init_drivers>
  1000b0:	8d 05 d8 50 10 00    	lea    0x1050d8,%eax
	
	kprintf("switching to kernel_main()\n");
  1000b6:	89 04 24             	mov    %eax,(%esp)
  1000b9:	e8 f2 20 00 00       	call   1021b0 <kprintf>

	kernel_main(mb_info);
  1000be:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1000c1:	89 0c 24             	mov    %ecx,(%esp)
  1000c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000c7:	e8 04 27 00 00       	call   1027d0 <kernel_main>

  return;
  1000cc:	83 c4 28             	add    $0x28,%esp
  1000cf:	5d                   	pop    %ebp
  1000d0:	c3                   	ret    
  1000d1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1000d8:	0f 1f 84 00 00 00 00 
  1000df:	00 

001000e0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
	init_keyboard_drv();
  1000e3:	83 ec 08             	sub    $0x8,%esp
  1000e6:	e8 55 04 00 00       	call   100540 <init_keyboard_drv>
}
  1000eb:	83 c4 08             	add    $0x8,%esp
  1000ee:	5d                   	pop    %ebp
  1000ef:	c3                   	ret    

001000f0 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000f0:	55                   	push   %ebp
  1000f1:	89 e5                	mov    %esp,%ebp
  1000f3:	83 ec 28             	sub    $0x28,%esp
  1000f6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000fa:	66 89 c1             	mov    %ax,%cx
  1000fd:	8b 45 08             	mov    0x8(%ebp),%eax
  100100:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100103:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  100107:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  10010b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10010e:	89 c2                	mov    %eax,%edx
  100110:	83 ea 02             	sub    $0x2,%edx
  100113:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100116:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100119:	0f 84 4f 00 00 00    	je     10016e <translate_scancode+0x7e>
  10011f:	e9 00 00 00 00       	jmp    100124 <translate_scancode+0x34>
  100124:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100127:	83 e8 01             	sub    $0x1,%eax
  10012a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10012d:	0f 84 28 00 00 00    	je     10015b <translate_scancode+0x6b>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x48>
  100138:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10013b:	85 c0                	test   %eax,%eax
  10013d:	0f 85 54 00 00 00    	jne    100197 <translate_scancode+0xa7>
  100143:	e9 00 00 00 00       	jmp    100148 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100148:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014c:	8a 0c 05 00 40 10 00 	mov    0x104000(,%eax,1),%cl
  100153:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100156:	e9 3c 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10015b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10015f:	8a 0c 05 80 40 10 00 	mov    0x104080(,%eax,1),%cl
  100166:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100169:	e9 29 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10016e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100172:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100177:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10017a:	0f 85 0e 00 00 00    	jne    10018e <translate_scancode+0x9e>
  100180:	e9 00 00 00 00       	jmp    100185 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100185:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100189:	e9 04 00 00 00       	jmp    100192 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10018e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100192:	e9 00 00 00 00       	jmp    100197 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100197:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10019b:	3d 00 00 00 00       	cmp    $0x0,%eax
  1001a0:	0f 85 20 00 00 00    	jne    1001c6 <translate_scancode+0xd6>
  1001a6:	8d 05 f4 50 10 00    	lea    0x1050f4,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1001ac:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001b3:	89 04 24             	mov    %eax,(%esp)
  1001b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001ba:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001be:	e8 ed 1f 00 00       	call   1021b0 <kprintf>
  1001c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001c6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ca:	83 c4 28             	add    $0x28,%esp
  1001cd:	5d                   	pop    %ebp
  1001ce:	c3                   	ret    
  1001cf:	90                   	nop

001001d0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
  1001d3:	57                   	push   %edi
  1001d4:	56                   	push   %esi
  1001d5:	83 ec 20             	sub    $0x20,%esp
  1001d8:	b8 60 00 00 00       	mov    $0x60,%eax
  uint8_t scancode;
  uint8_t keycode = 0;
  1001dd:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
  int break_code = 0;
  1001e1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  1001e8:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1001ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1001f2:	e8 29 02 00 00       	call   100420 <inb>
  1001f7:	88 45 f7             	mov    %al,-0x9(%ebp)

  if (!init_done) {
  1001fa:	81 3d 0c a0 10 00 00 	cmpl   $0x0,0x10a00c
  100201:	00 00 00 
  100204:	0f 85 05 00 00 00    	jne    10020f <keyboard_handler+0x3f>
    return;
  10020a:	e9 ff 01 00 00       	jmp    10040e <keyboard_handler+0x23e>
  }

  if ((scancode & 0x80) &&
  10020f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100213:	25 80 00 00 00       	and    $0x80,%eax
  100218:	3d 00 00 00 00       	cmp    $0x0,%eax
  10021d:	0f 84 53 00 00 00    	je     100276 <keyboard_handler+0xa6>
  100223:	81 3d 04 a0 10 00 00 	cmpl   $0x0,0x10a004
  10022a:	00 00 00 
  10022d:	0f 85 0f 00 00 00    	jne    100242 <keyboard_handler+0x72>
  100233:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100237:	3d e1 00 00 00       	cmp    $0xe1,%eax
  10023c:	0f 84 34 00 00 00    	je     100276 <keyboard_handler+0xa6>
  100242:	81 3d 00 a0 10 00 00 	cmpl   $0x0,0x10a000
  100249:	00 00 00 
  10024c:	0f 85 0f 00 00 00    	jne    100261 <keyboard_handler+0x91>
  100252:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100256:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10025b:	0f 84 15 00 00 00    	je     100276 <keyboard_handler+0xa6>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  {
      break_code = 1;
  100261:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
      scancode &= ~0x80;
  100268:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10026c:	25 7f ff ff ff       	and    $0xffffff7f,%eax
  100271:	88 c1                	mov    %al,%cl
  100273:	88 4d f7             	mov    %cl,-0x9(%ebp)
  }

  if (e0_code) {
  100276:	81 3d 00 a0 10 00 00 	cmpl   $0x0,0x10a000
  10027d:	00 00 00 
  100280:	0f 84 63 00 00 00    	je     1002e9 <keyboard_handler+0x119>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  100286:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10028a:	3d 2a 00 00 00       	cmp    $0x2a,%eax
  10028f:	0f 84 0f 00 00 00    	je     1002a4 <keyboard_handler+0xd4>
  100295:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100299:	3d 36 00 00 00       	cmp    $0x36,%eax
  10029e:	0f 85 0f 00 00 00    	jne    1002b3 <keyboard_handler+0xe3>
          e0_code = 0;
  1002a4:	c7 05 00 a0 10 00 00 	movl   $0x0,0x10a000
  1002ab:	00 00 00 
          return;
  1002ae:	e9 5b 01 00 00       	jmp    10040e <keyboard_handler+0x23e>
  1002b3:	b8 01 00 00 00       	mov    $0x1,%eax
      }
      keycode = translate_scancode(1, scancode);
  1002b8:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1002bb:	0f b6 d1             	movzbl %cl,%edx
  1002be:	66 89 d6             	mov    %dx,%si
  1002c1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1002c8:	0f b7 d6             	movzwl %si,%edx
  1002cb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1002cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1002d2:	e8 19 fe ff ff       	call   1000f0 <translate_scancode>
  1002d7:	88 45 f6             	mov    %al,-0xa(%ebp)
      e0_code = 0;
  1002da:	c7 05 00 a0 10 00 00 	movl   $0x0,0x10a000
  1002e1:	00 00 00 
  } else if (e1_code == 2) {
  1002e4:	e9 11 01 00 00       	jmp    1003fa <keyboard_handler+0x22a>
  1002e9:	81 3d 04 a0 10 00 02 	cmpl   $0x2,0x10a004
  1002f0:	00 00 00 
  1002f3:	0f 85 53 00 00 00    	jne    10034c <keyboard_handler+0x17c>
  1002f9:	b8 02 00 00 00       	mov    $0x2,%eax
      e1_prev |= ((uint16_t) scancode << 8);
  1002fe:	8a 4d f7             	mov    -0x9(%ebp),%cl
  100301:	0f b6 d1             	movzbl %cl,%edx
  100304:	66 89 d6             	mov    %dx,%si
  100307:	0f b7 d6             	movzwl %si,%edx
  10030a:	c1 e2 08             	shl    $0x8,%edx
  10030d:	0f b7 3d 08 a0 10 00 	movzwl 0x10a008,%edi
  100314:	09 d7                	or     %edx,%edi
  100316:	66 89 fe             	mov    %di,%si
  100319:	66 89 35 08 a0 10 00 	mov    %si,0x10a008
      keycode = translate_scancode(2, e1_prev);
  100320:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100327:	0f b7 15 08 a0 10 00 	movzwl 0x10a008,%edx
  10032e:	89 54 24 04          	mov    %edx,0x4(%esp)
  100332:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100335:	e8 b6 fd ff ff       	call   1000f0 <translate_scancode>
  10033a:	88 45 f6             	mov    %al,-0xa(%ebp)
      e1_code = 0;
  10033d:	c7 05 04 a0 10 00 00 	movl   $0x0,0x10a004
  100344:	00 00 00 
  } else if (e1_code == 1) {
  100347:	e9 a9 00 00 00       	jmp    1003f5 <keyboard_handler+0x225>
  10034c:	81 3d 04 a0 10 00 01 	cmpl   $0x1,0x10a004
  100353:	00 00 00 
  100356:	0f 85 27 00 00 00    	jne    100383 <keyboard_handler+0x1b3>
      e1_prev = scancode;
  10035c:	8a 45 f7             	mov    -0x9(%ebp),%al
  10035f:	0f b6 c8             	movzbl %al,%ecx
  100362:	66 89 ca             	mov    %cx,%dx
  100365:	66 89 15 08 a0 10 00 	mov    %dx,0x10a008
      e1_code++;
  10036c:	8b 0d 04 a0 10 00    	mov    0x10a004,%ecx
  100372:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100378:	89 0d 04 a0 10 00    	mov    %ecx,0x10a004
  } else if (scancode == 0xE0) {
  10037e:	e9 6d 00 00 00       	jmp    1003f0 <keyboard_handler+0x220>
  100383:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100387:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10038c:	0f 85 0f 00 00 00    	jne    1003a1 <keyboard_handler+0x1d1>
      e0_code = 1;
  100392:	c7 05 00 a0 10 00 01 	movl   $0x1,0x10a000
  100399:	00 00 00 
  } else if (scancode == 0xE1) {
  10039c:	e9 4a 00 00 00       	jmp    1003eb <keyboard_handler+0x21b>
  1003a1:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1003a5:	3d e1 00 00 00       	cmp    $0xe1,%eax
  1003aa:	0f 85 0f 00 00 00    	jne    1003bf <keyboard_handler+0x1ef>
      e1_code = 1;
  1003b0:	c7 05 04 a0 10 00 01 	movl   $0x1,0x10a004
  1003b7:	00 00 00 
  } else {
  1003ba:	e9 27 00 00 00       	jmp    1003e6 <keyboard_handler+0x216>
  1003bf:	b8 00 00 00 00       	mov    $0x0,%eax
      keycode = translate_scancode(0, scancode);
  1003c4:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1003c7:	0f b6 d1             	movzbl %cl,%edx
  1003ca:	66 89 d6             	mov    %dx,%si
  1003cd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1003d4:	0f b7 d6             	movzwl %si,%edx
  1003d7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1003db:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1003de:	e8 0d fd ff ff       	call   1000f0 <translate_scancode>
  1003e3:	88 45 f6             	mov    %al,-0xa(%ebp)
  1003e6:	e9 00 00 00 00       	jmp    1003eb <keyboard_handler+0x21b>
  1003eb:	e9 00 00 00 00       	jmp    1003f0 <keyboard_handler+0x220>
  1003f0:	e9 00 00 00 00       	jmp    1003f5 <keyboard_handler+0x225>
  1003f5:	e9 00 00 00 00       	jmp    1003fa <keyboard_handler+0x22a>
  }

	if(keycode != 0x0) {
  1003fa:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  1003fe:	3d 00 00 00 00       	cmp    $0x0,%eax
  100403:	0f 84 05 00 00 00    	je     10040e <keyboard_handler+0x23e>
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
  100409:	e9 00 00 00 00       	jmp    10040e <keyboard_handler+0x23e>
}
  10040e:	83 c4 20             	add    $0x20,%esp
  100411:	5e                   	pop    %esi
  100412:	5f                   	pop    %edi
  100413:	5d                   	pop    %ebp
  100414:	c3                   	ret    
  100415:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10041c:	00 00 00 00 

00100420 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  100420:	55                   	push   %ebp
  100421:	89 e5                	mov    %esp,%ebp
  100423:	50                   	push   %eax
  100424:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100428:	66 89 c1             	mov    %ax,%cx
  10042b:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  10042f:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  100433:	ec                   	in     (%dx),%al
  100434:	88 45 fd             	mov    %al,-0x3(%ebp)
	return result;
  100437:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  10043b:	83 c4 04             	add    $0x4,%esp
  10043e:	5d                   	pop    %ebp
  10043f:	c3                   	ret    

00100440 <getc>:

char getc() {
  100440:	55                   	push   %ebp
  100441:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  100443:	83 ec 08             	sub    $0x8,%esp
  100446:	a1 10 a0 10 00       	mov    0x10a010,%eax
  10044b:	8a 08                	mov    (%eax),%cl
  10044d:	88 4d ff             	mov    %cl,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100450:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100457:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10045a:	3b 05 14 a0 10 00    	cmp    0x10a014,%eax
  100460:	0f 8d 29 00 00 00    	jge    10048f <getc+0x4f>
		buffer[i] = buffer[i+1];	
  100466:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100469:	8b 0d 10 a0 10 00    	mov    0x10a010,%ecx
  10046f:	8a 54 01 01          	mov    0x1(%ecx,%eax,1),%dl
  100473:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100476:	8b 0d 10 a0 10 00    	mov    0x10a010,%ecx
  10047c:	88 14 01             	mov    %dl,(%ecx,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10047f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100482:	05 01 00 00 00       	add    $0x1,%eax
  100487:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10048a:	e9 c8 ff ff ff       	jmp    100457 <getc+0x17>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  10048f:	a1 14 a0 10 00       	mov    0x10a014,%eax
  100494:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100499:	a3 14 a0 10 00       	mov    %eax,0x10a014

	return ret;
  10049e:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1004a2:	83 c4 08             	add    $0x8,%esp
  1004a5:	5d                   	pop    %ebp
  1004a6:	c3                   	ret    
  1004a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1004ae:	00 00 

001004b0 <send_command>:
}

void send_command(uint8_t command) {
  1004b0:	55                   	push   %ebp
  1004b1:	89 e5                	mov    %esp,%ebp
  1004b3:	83 ec 18             	sub    $0x18,%esp
  1004b6:	8a 45 08             	mov    0x8(%ebp),%al
  1004b9:	88 45 ff             	mov    %al,-0x1(%ebp)
  1004bc:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  1004c1:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1004c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1004cb:	e8 50 ff ff ff       	call   100420 <inb>
  1004d0:	0f b6 c8             	movzbl %al,%ecx
  1004d3:	81 e1 02 00 00 00    	and    $0x2,%ecx
  1004d9:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  1004df:	0f 84 05 00 00 00    	je     1004ea <send_command+0x3a>
  1004e5:	e9 d2 ff ff ff       	jmp    1004bc <send_command+0xc>
  1004ea:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  1004ef:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1004f6:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  1004fa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1004fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100501:	e8 0a 00 00 00       	call   100510 <outb>
}
  100506:	83 c4 18             	add    $0x18,%esp
  100509:	5d                   	pop    %ebp
  10050a:	c3                   	ret    
  10050b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100510 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  100510:	55                   	push   %ebp
  100511:	89 e5                	mov    %esp,%ebp
  100513:	50                   	push   %eax
  100514:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100518:	66 89 c1             	mov    %ax,%cx
  10051b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10051e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  100522:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100525:	8a 45 fd             	mov    -0x3(%ebp),%al
  100528:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10052c:	ee                   	out    %al,(%dx)
}
  10052d:	83 c4 04             	add    $0x4,%esp
  100530:	5d                   	pop    %ebp
  100531:	c3                   	ret    
  100532:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100539:	1f 84 00 00 00 00 00 

00100540 <init_keyboard_drv>:

void init_keyboard_drv() {
  100540:	55                   	push   %ebp
  100541:	89 e5                	mov    %esp,%ebp
  100543:	83 ec 28             	sub    $0x28,%esp
  100546:	b8 21 00 00 00       	mov    $0x21,%eax
  10054b:	8d 0d d0 01 10 00    	lea    0x1001d0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  100551:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100558:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10055c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10055f:	e8 5c 19 00 00       	call   101ec0 <register_intr_handler>
  100564:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100569:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100570:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100573:	e8 a8 fe ff ff       	call   100420 <inb>
  100578:	0f b6 c8             	movzbl %al,%ecx
  10057b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100581:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100587:	0f 84 1c 00 00 00    	je     1005a9 <init_keyboard_drv+0x69>
  10058d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100592:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100599:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10059c:	e8 7f fe ff ff       	call   100420 <inb>
	}
  1005a1:	88 45 f3             	mov    %al,-0xd(%ebp)
  1005a4:	e9 bb ff ff ff       	jmp    100564 <init_keyboard_drv+0x24>
  1005a9:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  1005ae:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  1005b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1005b8:	e8 f3 fe ff ff       	call   1004b0 <send_command>

	init_done = 1;
  1005bd:	c7 05 0c a0 10 00 01 	movl   $0x1,0x10a00c
  1005c4:	00 00 00 
}
  1005c7:	83 c4 28             	add    $0x28,%esp
  1005ca:	5d                   	pop    %ebp
  1005cb:	c3                   	ret    
  1005cc:	66 90                	xchg   %ax,%ax
  1005ce:	66 90                	xchg   %ax,%ax

001005d0 <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  1005d0:	55                   	push   %ebp
  1005d1:	89 e5                	mov    %esp,%ebp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  1005d3:	56                   	push   %esi
  1005d4:	83 ec 10             	sub    $0x10,%esp
  1005d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1005de:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  1005e5:	0f 8d b7 00 00 00    	jge    1006a2 <pmm_alloc+0xd2>
		if(allocatable[i]) {
  1005eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1005ee:	81 3c 85 34 a4 10 00 	cmpl   $0x0,0x10a434(,%eax,4)
  1005f5:	00 00 00 00 
  1005f9:	0f 84 8e 00 00 00    	je     10068d <pmm_alloc+0xbd>
			int s;
			for(s = 0; s < 32; s++) {
  1005ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100606:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  10060d:	0f 8d 75 00 00 00    	jge    100688 <pmm_alloc+0xb8>
  100613:	b8 01 00 00 00       	mov    $0x1,%eax
				if(allocatable[i] & (1 << s)) {
  100618:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10061b:	8b 0c 8d 34 a4 10 00 	mov    0x10a434(,%ecx,4),%ecx
  100622:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100625:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100628:	89 d1                	mov    %edx,%ecx
  10062a:	d3 e0                	shl    %cl,%eax
  10062c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10062f:	21 c2                	and    %eax,%edx
  100631:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  100637:	0f 84 36 00 00 00    	je     100673 <pmm_alloc+0xa3>
  10063d:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  100642:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100645:	d3 e0                	shl    %cl,%eax
  100647:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  10064c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10064f:	8b 34 95 34 a4 10 00 	mov    0x10a434(,%edx,4),%esi
  100656:	21 c6                	and    %eax,%esi
  100658:	89 34 95 34 a4 10 00 	mov    %esi,0x10a434(,%edx,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  10065f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100662:	c1 e0 05             	shl    $0x5,%eax
  100665:	03 45 f0             	add    -0x10(%ebp),%eax
  100668:	c1 e0 0c             	shl    $0xc,%eax
  10066b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10066e:	e9 36 00 00 00       	jmp    1006a9 <pmm_alloc+0xd9>
				}
			}
  100673:	e9 00 00 00 00       	jmp    100678 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100678:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10067b:	05 01 00 00 00       	add    $0x1,%eax
  100680:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100683:	e9 7e ff ff ff       	jmp    100606 <pmm_alloc+0x36>
				if(allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
  100688:	e9 00 00 00 00       	jmp    10068d <pmm_alloc+0xbd>
	}
  10068d:	e9 00 00 00 00       	jmp    100692 <pmm_alloc+0xc2>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100692:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100695:	05 01 00 00 00       	add    $0x1,%eax
  10069a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10069d:	e9 3c ff ff ff       	jmp    1005de <pmm_alloc+0xe>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  1006a2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  1006a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1006ac:	83 c4 10             	add    $0x10,%esp
  1006af:	5e                   	pop    %esi
  1006b0:	5d                   	pop    %ebp
  1006b1:	c3                   	ret    
  1006b2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1006b9:	1f 84 00 00 00 00 00 

001006c0 <pmm_free>:

void pmm_free(void* addr) {
  1006c0:	55                   	push   %ebp
  1006c1:	89 e5                	mov    %esp,%ebp
  1006c3:	56                   	push   %esi
  1006c4:	83 ec 14             	sub    $0x14,%esp
  1006c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1006ca:	b9 01 00 00 00       	mov    $0x1,%ecx
  1006cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  1006d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1006d5:	c1 e8 0c             	shr    $0xc,%eax
  1006d8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  1006db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1006de:	25 1f 00 00 00       	and    $0x1f,%eax
  1006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  1006e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1006e9:	c1 e8 05             	shr    $0x5,%eax
  1006ec:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  1006ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1006f2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1006f5:	89 c1                	mov    %eax,%ecx
  1006f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1006fa:	d3 e0                	shl    %cl,%eax
  1006fc:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1006ff:	8b 34 95 34 a4 10 00 	mov    0x10a434(,%edx,4),%esi
  100706:	09 c6                	or     %eax,%esi
  100708:	89 34 95 34 a4 10 00 	mov    %esi,0x10a434(,%edx,4)
}
  10070f:	83 c4 14             	add    $0x14,%esp
  100712:	5e                   	pop    %esi
  100713:	5d                   	pop    %ebp
  100714:	c3                   	ret    
  100715:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10071c:	00 00 00 00 

00100720 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100720:	55                   	push   %ebp
  100721:	89 e5                	mov    %esp,%ebp
  100723:	56                   	push   %esi
  100724:	83 ec 14             	sub    $0x14,%esp
  100727:	8b 45 08             	mov    0x8(%ebp),%eax
  10072a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10072f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100732:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100735:	c1 e8 0c             	shr    $0xc,%eax
  100738:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10073b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10073e:	25 1f 00 00 00       	and    $0x1f,%eax
  100743:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  100746:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100749:	c1 e8 05             	shr    $0x5,%eax
  10074c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  10074f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100752:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100755:	89 c1                	mov    %eax,%ecx
  100757:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10075a:	d3 e0                	shl    %cl,%eax
  10075c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100761:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100764:	8b 34 95 34 a4 10 00 	mov    0x10a434(,%edx,4),%esi
  10076b:	21 c6                	and    %eax,%esi
  10076d:	89 34 95 34 a4 10 00 	mov    %esi,0x10a434(,%edx,4)
}
  100774:	83 c4 14             	add    $0x14,%esp
  100777:	5e                   	pop    %esi
  100778:	5d                   	pop    %ebp
  100779:	c3                   	ret    
  10077a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100780 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100780:	55                   	push   %ebp
  100781:	89 e5                	mov    %esp,%ebp
  100783:	53                   	push   %ebx
  100784:	57                   	push   %edi
  100785:	56                   	push   %esi
  100786:	83 ec 5c             	sub    $0x5c,%esp
  100789:	8b 45 08             	mov    0x8(%ebp),%eax
  10078c:	8d 0d 1a 51 10 00    	lea    0x10511a,%ecx
  100792:	8d 15 34 a4 10 00    	lea    0x10a434,%edx
  100798:	89 d6                	mov    %edx,%esi
  10079a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  1007a0:	89 d7                	mov    %edx,%edi
  1007a2:	bb 00 00 00 00       	mov    $0x0,%ebx
  1007a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1007aa:	b8 00 00 02 00       	mov    $0x20000,%eax
  1007af:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1007b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1007b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  1007b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007bb:	8b 40 30             	mov    0x30(%eax),%eax
  1007be:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
  1007c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007c4:	8b 40 30             	mov    0x30(%eax),%eax
  1007c7:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1007ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007cd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1007d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1007d3:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  1007d6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  1007d9:	03 41 2c             	add    0x2c(%ecx),%eax
  1007dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  1007df:	89 3c 24             	mov    %edi,(%esp)
  1007e2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1007e9:	00 
  1007ea:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1007f1:	00 
  1007f2:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  1007f5:	89 55 b8             	mov    %edx,-0x48(%ebp)
  1007f8:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  1007fb:	e8 00 1e 00 00       	call   102600 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  100800:	8b 45 c0             	mov    -0x40(%ebp),%eax
  100803:	89 04 24             	mov    %eax,(%esp)
  100806:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  100809:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10080d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  100810:	89 54 24 08          	mov    %edx,0x8(%esp)
  100814:	e8 97 19 00 00       	call   1021b0 <kprintf>
  100819:	89 45 b0             	mov    %eax,-0x50(%ebp)
	 
	while (mmap < mmap_end) {
  10081c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10081f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  100822:	0f 83 60 00 00 00    	jae    100888 <pmm_init+0x108>
		  if (mmap->mm_type == 1) {
  100828:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10082b:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  100832:	0f 85 40 00 00 00    	jne    100878 <pmm_init+0xf8>
		      uintptr_t addr = mmap->mm_base_addr;
  100838:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10083b:	8b 40 04             	mov    0x4(%eax),%eax
  10083e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  100841:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100844:	8b 49 0c             	mov    0xc(%ecx),%ecx
  100847:	01 c8                	add    %ecx,%eax
  100849:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 
		      while (addr < end_addr) {
  10084c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10084f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100852:	0f 83 1b 00 00 00    	jae    100873 <pmm_init+0xf3>
		          pmm_free((void*) addr);
  100858:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10085b:	89 04 24             	mov    %eax,(%esp)
  10085e:	e8 5d fe ff ff       	call   1006c0 <pmm_free>
		          addr += 0x1000;
  100863:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100866:	05 00 10 00 00       	add    $0x1000,%eax
  10086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      }
  10086e:	e9 d9 ff ff ff       	jmp    10084c <pmm_init+0xcc>
		  }
  100873:	e9 00 00 00 00       	jmp    100878 <pmm_init+0xf8>
		  mmap++;
  100878:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10087b:	05 18 00 00 00       	add    $0x18,%eax
  100880:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  100883:	e9 94 ff ff ff       	jmp    10081c <pmm_init+0x9c>
  100888:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10088e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100891:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  100897:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  10089a:	0f 83 1b 00 00 00    	jae    1008bb <pmm_init+0x13b>
		  pmm_mark_used((void*) addr);
  1008a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1008a3:	89 04 24             	mov    %eax,(%esp)
  1008a6:	e8 75 fe ff ff       	call   100720 <pmm_mark_used>
		  addr += 0x1000;
  1008ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1008ae:	05 00 10 00 00       	add    $0x1000,%eax
  1008b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  1008b6:	e9 d6 ff ff ff       	jmp    100891 <pmm_init+0x111>

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  1008bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1008be:	8b 40 18             	mov    0x18(%eax),%eax
  1008c1:	89 45 d8             	mov    %eax,-0x28(%ebp)

  pmm_mark_used(mb_info);
  1008c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1008c7:	89 04 24             	mov    %eax,(%esp)
  1008ca:	e8 51 fe ff ff       	call   100720 <pmm_mark_used>
  pmm_mark_used(modules);
  1008cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1008d2:	89 04 24             	mov    %eax,(%esp)
  1008d5:	e8 46 fe ff ff       	call   100720 <pmm_mark_used>

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1008da:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  1008e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1008e4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1008e7:	3b 41 14             	cmp    0x14(%ecx),%eax
  1008ea:	0f 83 59 00 00 00    	jae    100949 <pmm_init+0x1c9>
      addr = (uintptr_t)modules[i].start;
  1008f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1008f3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1008f6:	c1 e0 04             	shl    $0x4,%eax
  1008f9:	01 c1                	add    %eax,%ecx
  1008fb:	8b 01                	mov    (%ecx),%eax
  1008fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  100900:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100903:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  100906:	8b 55 d8             	mov    -0x28(%ebp),%edx
  100909:	c1 e1 04             	shl    $0x4,%ecx
  10090c:	01 ca                	add    %ecx,%edx
  10090e:	8b 4a 04             	mov    0x4(%edx),%ecx
  100911:	39 c8                	cmp    %ecx,%eax
  100913:	0f 83 1b 00 00 00    	jae    100934 <pmm_init+0x1b4>
          pmm_mark_used((void*) addr);
  100919:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10091c:	89 04 24             	mov    %eax,(%esp)
  10091f:	e8 fc fd ff ff       	call   100720 <pmm_mark_used>
          addr += 0x1000;
  100924:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100927:	05 00 10 00 00       	add    $0x1000,%eax
  10092c:	89 45 dc             	mov    %eax,-0x24(%ebp)
      }
  10092f:	e9 cc ff ff ff       	jmp    100900 <pmm_init+0x180>
  }
  100934:	e9 00 00 00 00       	jmp    100939 <pmm_init+0x1b9>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100939:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10093c:	05 01 00 00 00       	add    $0x1,%eax
  100941:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100944:	e9 98 ff ff ff       	jmp    1008e1 <pmm_init+0x161>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  100949:	83 c4 5c             	add    $0x5c,%esp
  10094c:	5e                   	pop    %esi
  10094d:	5f                   	pop    %edi
  10094e:	5b                   	pop    %ebx
  10094f:	5d                   	pop    %ebp
  100950:	c3                   	ret    
  100951:	66 90                	xchg   %ax,%ax
  100953:	66 90                	xchg   %ax,%ax
  100955:	66 90                	xchg   %ax,%ax
  100957:	66 90                	xchg   %ax,%ax
  100959:	66 90                	xchg   %ax,%ax
  10095b:	66 90                	xchg   %ax,%ax
  10095d:	66 90                	xchg   %ax,%ax
  10095f:	90                   	nop

00100960 <vmm_get_current_pagedir>:
uint32_t* active_pagetables        = (void*)(ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*)(ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

uint32_t vmm_get_current_pagedir(void) {
  100960:	55                   	push   %ebp
  100961:	89 e5                	mov    %esp,%ebp
  return active_pagedir;
  100963:	a1 18 a0 10 00       	mov    0x10a018,%eax
  100968:	5d                   	pop    %ebp
  100969:	c3                   	ret    
  10096a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100970 <vmm_create_pagedir>:
}

uint32_t vmm_create_pagedir()
{
  100970:	55                   	push   %ebp
  100971:	89 e5                	mov    %esp,%ebp
  100973:	53                   	push   %ebx
  100974:	56                   	push   %esi
  100975:	81 ec 40 10 00 00    	sub    $0x1040,%esp
  10097b:	8d 45 f4             	lea    -0xc(%ebp),%eax
  uint32_t phys_context = 0;
  10097e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  100985:	89 04 24             	mov    %eax,(%esp)
  100988:	e8 53 02 00 00       	call   100be0 <vmm_alloc>
  10098d:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  100990:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  uint32_t phys_pagedir = 0;
  100993:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  10099a:	89 0c 24             	mov    %ecx,(%esp)
  10099d:	e8 3e 02 00 00       	call   100be0 <vmm_alloc>
  1009a2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1009a5:	89 01                	mov    %eax,(%ecx)
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  1009a7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  1009ae:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  1009b5:	0f 83 ab 00 00 00    	jae    100a66 <vmm_create_pagedir+0xf6>
  1009bb:	8d 45 e8             	lea    -0x18(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  1009be:	89 04 24             	mov    %eax,(%esp)
  1009c1:	e8 1a 02 00 00       	call   100be0 <vmm_alloc>
  1009c6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1009c9:	89 84 8d e0 ef ff ff 	mov    %eax,-0x1020(%ebp,%ecx,4)
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  1009d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1009d3:	0d 01 00 00 00       	or     $0x1,%eax
  1009d8:	0d 02 00 00 00       	or     $0x2,%eax
  1009dd:	0d 04 00 00 00       	or     $0x4,%eax
  1009e2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1009e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1009e8:	8b 12                	mov    (%edx),%edx
  1009ea:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    for(i2 = 0; i2 < 1024; i2++) {
  1009ed:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  1009f4:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  1009fb:	0f 83 50 00 00 00    	jae    100a51 <vmm_create_pagedir+0xe1>
  100a01:	b8 00 02 00 00       	mov    $0x200,%eax
  100a06:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  100a0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100a0e:	c1 e2 18             	shl    $0x18,%edx
  100a11:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100a14:	c1 e6 0c             	shl    $0xc,%esi
  100a17:	01 f2                	add    %esi,%edx
  100a19:	89 95 dc ef ff ff    	mov    %edx,-0x1024(%ebp)
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  100a1f:	81 bd dc ef ff ff 00 	cmpl   $0x2000000,-0x1024(%ebp)
  100a26:	00 00 02 
  100a29:	0f 97 c3             	seta   %bl
  100a2c:	84 db                	test   %bl,%bl
  100a2e:	0f 44 c1             	cmove  %ecx,%eax
  100a31:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100a34:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100a37:	8b 94 95 e0 ef ff ff 	mov    -0x1020(%ebp,%edx,4),%edx
  100a3e:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
  for(i = 0; i < 1024; i++) {
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    for(i2 = 0; i2 < 1024; i2++) {
  100a41:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100a44:	05 01 00 00 00       	add    $0x1,%eax
  100a49:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100a4c:	e9 a3 ff ff ff       	jmp    1009f4 <vmm_create_pagedir+0x84>
      uint32_t vaddr = (i << 24) + (i2 << 12);
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  100a51:	e9 00 00 00 00       	jmp    100a56 <vmm_create_pagedir+0xe6>
  uint32_t phys_pagedir = 0;
  context->pagedir = vmm_alloc(&phys_pagedir);
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100a56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100a59:	05 01 00 00 00       	add    $0x1,%eax
  100a5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100a61:	e9 48 ff ff ff       	jmp    1009ae <vmm_create_pagedir+0x3e>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100a66:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100a6d:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  100a74:	0f 83 5e 00 00 00    	jae    100ad8 <vmm_create_pagedir+0x168>
  100a7a:	b8 00 00 00 00       	mov    $0x0,%eax
  100a7f:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
  100a85:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100a88:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100a8b:	8b 36                	mov    (%esi),%esi
  100a8d:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100a90:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100a96:	89 55 e8             	mov    %edx,-0x18(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  100a99:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100a9f:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  100aa2:	c1 e6 0c             	shl    $0xc,%esi
  100aa5:	01 f2                	add    %esi,%edx
  100aa7:	8b 75 e8             	mov    -0x18(%ebp),%esi
  100aaa:	89 0c 24             	mov    %ecx,(%esp)
  100aad:	89 54 24 04          	mov    %edx,0x4(%esp)
  100ab1:	89 74 24 08          	mov    %esi,0x8(%esp)
  100ab5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100abc:	00 
  100abd:	89 85 d4 ef ff ff    	mov    %eax,-0x102c(%ebp)
  100ac3:	e8 98 01 00 00       	call   100c60 <map_address_context>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100ac8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100acb:	05 01 00 00 00       	add    $0x1,%eax
  100ad0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100ad3:	e9 95 ff ff ff       	jmp    100a6d <vmm_create_pagedir+0xfd>
  100ad8:	b8 00 00 00 00       	mov    $0x0,%eax
  100add:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  100ae3:	8b 15 04 41 10 00    	mov    0x104104,%edx
  100ae9:	8b 75 f4             	mov    -0xc(%ebp),%esi
  100aec:	89 0c 24             	mov    %ecx,(%esp)
  100aef:	89 54 24 04          	mov    %edx,0x4(%esp)
  100af3:	89 74 24 08          	mov    %esi,0x8(%esp)
  100af7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100afe:	00 
  100aff:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
  100b05:	e8 56 01 00 00       	call   100c60 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100b0a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
  100b11:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
  100b17:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  100b1a:	0f 83 3f 00 00 00    	jae    100b5f <vmm_create_pagedir+0x1ef>
  100b20:	b8 00 00 00 00       	mov    $0x0,%eax
  100b25:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, 0); //TODO: no PT_PUBLIC flag here!... only for task testing
  100b2b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100b2e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  100b31:	89 0c 24             	mov    %ecx,(%esp)
  100b34:	89 54 24 04          	mov    %edx,0x4(%esp)
  100b38:	89 74 24 08          	mov    %esi,0x8(%esp)
  100b3c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100b43:	00 
  100b44:	89 85 cc ef ff ff    	mov    %eax,-0x1034(%ebp)
  100b4a:	e8 11 01 00 00       	call   100c60 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100b4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b52:	05 00 10 00 00       	add    $0x1000,%eax
  100b57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100b5a:	e9 b2 ff ff ff       	jmp    100b11 <vmm_create_pagedir+0x1a1>
    }
  }*/
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100b5f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100b66:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  100b6d:	0f 83 22 00 00 00    	jae    100b95 <vmm_create_pagedir+0x225>
    vmm_unmap((void*)pagedir_ptr[i]); 
  100b73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b76:	8b 84 85 e0 ef ff ff 	mov    -0x1020(%ebp,%eax,4),%eax
  100b7d:	89 04 24             	mov    %eax,(%esp)
  100b80:	e8 4b 01 00 00       	call   100cd0 <vmm_unmap>
    }
  }*/
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100b85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b88:	05 01 00 00 00       	add    $0x1,%eax
  100b8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100b90:	e9 d1 ff ff ff       	jmp    100b66 <vmm_create_pagedir+0x1f6>
  100b95:	8d 85 e0 ef ff ff    	lea    -0x1020(%ebp),%eax
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  100b9b:	89 04 24             	mov    %eax,(%esp)
  100b9e:	e8 2d 01 00 00       	call   100cd0 <vmm_unmap>
  
  uint32_t* pd_ptr = context->pagedir;
  100ba3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100ba6:	8b 00                	mov    (%eax),%eax
  100ba8:	89 85 d8 ef ff ff    	mov    %eax,-0x1028(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  100bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100bb1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100bb4:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  100bb6:	8b 85 d8 ef ff ff    	mov    -0x1028(%ebp),%eax
  100bbc:	89 04 24             	mov    %eax,(%esp)
  100bbf:	e8 0c 01 00 00       	call   100cd0 <vmm_unmap>
  vmm_unmap(context);
  100bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100bc7:	89 04 24             	mov    %eax,(%esp)
  100bca:	e8 01 01 00 00       	call   100cd0 <vmm_unmap>
  
  return phys_pagedir;
  100bcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100bd2:	81 c4 40 10 00 00    	add    $0x1040,%esp
  100bd8:	5e                   	pop    %esi
  100bd9:	5b                   	pop    %ebx
  100bda:	5d                   	pop    %ebp
  100bdb:	c3                   	ret    
  100bdc:	0f 1f 40 00          	nopl   0x0(%eax)

00100be0 <vmm_alloc>:
    asm volatile("invlpg %0" : : "m" (vaddr));
  }
}


void* vmm_alloc(uint32_t* retpaddr) {
  100be0:	55                   	push   %ebp
  100be1:	89 e5                	mov    %esp,%ebp
  100be3:	83 ec 18             	sub    $0x18,%esp
  100be6:	8b 45 08             	mov    0x8(%ebp),%eax
  100be9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  void* vaddr = 0;
  100bec:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  100bf3:	c7 45 f4 00 00 00 02 	movl   $0x2000000,-0xc(%ebp)
  100bfa:	81 7d f4 00 f0 ff ff 	cmpl   $0xfffff000,-0xc(%ebp)
  100c01:	0f 87 3f 00 00 00    	ja     100c46 <vmm_alloc+0x66>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == PT_ALLOCATABLE) {
  100c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c0a:	c1 e8 0c             	shr    $0xc,%eax
  100c0d:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100c13:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100c16:	25 01 02 00 00       	and    $0x201,%eax
  100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
  100c20:	0f 85 0b 00 00 00    	jne    100c31 <vmm_alloc+0x51>
      vaddr = (void*) i;
  100c26:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c29:	89 45 f8             	mov    %eax,-0x8(%ebp)
      break;
  100c2c:	e9 15 00 00 00       	jmp    100c46 <vmm_alloc+0x66>
    }
  }
  100c31:	e9 00 00 00 00       	jmp    100c36 <vmm_alloc+0x56>


void* vmm_alloc(uint32_t* retpaddr) {
  void* vaddr = 0;

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  100c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c39:	05 00 10 00 00       	add    $0x1000,%eax
  100c3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100c41:	e9 b4 ff ff ff       	jmp    100bfa <vmm_alloc+0x1a>
      vaddr = (void*) i;
      break;
    }
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
  100c46:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100c49:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100c4c:	89 04 24             	mov    %eax,(%esp)
  100c4f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100c53:	e8 28 02 00 00       	call   100e80 <vmm_alloc_addr>
  100c58:	83 c4 18             	add    $0x18,%esp
  100c5b:	5d                   	pop    %ebp
  100c5c:	c3                   	ret    
  100c5d:	0f 1f 00             	nopl   (%eax)

00100c60 <map_address_context>:
  for(uint32_t i = 0; i < length; i+= 0x1000) {
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  100c60:	55                   	push   %ebp
  100c61:	89 e5                	mov    %esp,%ebp
  100c63:	56                   	push   %esi
  100c64:	83 ec 18             	sub    $0x18,%esp
  100c67:	8b 45 14             	mov    0x14(%ebp),%eax
  100c6a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100c6d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100c70:	8b 75 08             	mov    0x8(%ebp),%esi
  100c73:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100c76:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100c79:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100c7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t pd_entry =  vaddr >> 22;
  100c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c82:	c1 e8 16             	shr    $0x16,%eax
  100c85:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  100c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c8b:	c1 e8 0c             	shr    $0xc,%eax
  100c8e:	25 ff 03 00 00       	and    $0x3ff,%eax
  100c93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  100c96:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100c99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100c9e:	0d 01 00 00 00       	or     $0x1,%eax
  100ca3:	0d 02 00 00 00       	or     $0x2,%eax
  100ca8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100cab:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100cb1:	09 c8                	or     %ecx,%eax
  100cb3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100cb6:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100cb9:	8b 75 f8             	mov    -0x8(%ebp),%esi
  100cbc:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100cbf:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100cc5:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
}
  100cc8:	83 c4 18             	add    $0x18,%esp
  100ccb:	5e                   	pop    %esi
  100ccc:	5d                   	pop    %ebp
  100ccd:	c3                   	ret    
  100cce:	66 90                	xchg   %ax,%ax

00100cd0 <vmm_unmap>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
    asm volatile("invlpg %0" : : "m" (vaddr));
  }
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  100cd0:	55                   	push   %ebp
  100cd1:	89 e5                	mov    %esp,%ebp
  100cd3:	83 ec 08             	sub    $0x8,%esp
  100cd6:	8b 45 08             	mov    0x8(%ebp),%eax
  100cd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100cdc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100cdf:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100ce2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ce5:	c1 e8 0c             	shr    $0xc,%eax
  100ce8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100cee:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100cf1:	25 01 02 00 00       	and    $0x201,%eax
  100cf6:	3d 01 02 00 00       	cmp    $0x201,%eax
  100cfb:	0f 85 17 00 00 00    	jne    100d18 <vmm_unmap+0x48>
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  100d01:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100d04:	c1 e8 0c             	shr    $0xc,%eax
  100d07:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100d0d:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  100d14:	0f 01 7d f8          	invlpg -0x8(%ebp)
  }
}
  100d18:	83 c4 08             	add    $0x8,%esp
  100d1b:	5d                   	pop    %ebp
  100d1c:	c3                   	ret    
  100d1d:	0f 1f 00             	nopl   (%eax)

00100d20 <vmm_map_range>:
  vmm_unmap(context);
  
  return phys_pagedir;
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  100d20:	55                   	push   %ebp
  100d21:	89 e5                	mov    %esp,%ebp
  100d23:	56                   	push   %esi
  100d24:	83 ec 24             	sub    $0x24,%esp
  100d27:	8b 45 14             	mov    0x14(%ebp),%eax
  100d2a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100d2d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100d30:	8b 75 08             	mov    0x8(%ebp),%esi
  100d33:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100d36:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100d39:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100d3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if((uint32_t)vaddr & 0xFFF) return;
  100d3f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100d42:	25 ff 0f 00 00       	and    $0xfff,%eax
  100d47:	3d 00 00 00 00       	cmp    $0x0,%eax
  100d4c:	0f 84 05 00 00 00    	je     100d57 <vmm_map_range+0x37>
  100d52:	e9 5a 00 00 00       	jmp    100db1 <vmm_map_range+0x91>
  if((uint32_t)paddr & 0xFFF) return;
  100d57:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100d5a:	25 ff 0f 00 00       	and    $0xfff,%eax
  100d5f:	3d 00 00 00 00       	cmp    $0x0,%eax
  100d64:	0f 84 05 00 00 00    	je     100d6f <vmm_map_range+0x4f>
  100d6a:	e9 42 00 00 00       	jmp    100db1 <vmm_map_range+0x91>
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100d6f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  100d76:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100d79:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100d7c:	0f 83 2f 00 00 00    	jae    100db1 <vmm_map_range+0x91>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  100d82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100d85:	03 45 e8             	add    -0x18(%ebp),%eax
  100d88:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100d8b:	03 4d e8             	add    -0x18(%ebp),%ecx
  100d8e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100d91:	89 04 24             	mov    %eax,(%esp)
  100d94:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100d98:	89 54 24 08          	mov    %edx,0x8(%esp)
  100d9c:	e8 1f 00 00 00       	call   100dc0 <map_address_active>

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  if((uint32_t)vaddr & 0xFFF) return;
  if((uint32_t)paddr & 0xFFF) return;
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100da1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100da4:	05 00 10 00 00       	add    $0x1000,%eax
  100da9:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100dac:	e9 c5 ff ff ff       	jmp    100d76 <vmm_map_range+0x56>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}
  100db1:	83 c4 24             	add    $0x24,%esp
  100db4:	5e                   	pop    %esi
  100db5:	5d                   	pop    %ebp
  100db6:	c3                   	ret    
  100db7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  100dbe:	00 00 

00100dc0 <map_address_active>:
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {  
  100dc0:	55                   	push   %ebp
  100dc1:	89 e5                	mov    %esp,%ebp
  100dc3:	83 ec 0c             	sub    $0xc,%esp
  100dc6:	8b 45 10             	mov    0x10(%ebp),%eax
  100dc9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100dcc:	8b 55 08             	mov    0x8(%ebp),%edx
  100dcf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100dd2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100dd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  100dd8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ddb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100de0:	0d 01 00 00 00       	or     $0x1,%eax
  100de5:	0d 02 00 00 00       	or     $0x2,%eax
  100dea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100ded:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100df3:	09 c8                	or     %ecx,%eax
  100df5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100df8:	c1 e9 0c             	shr    $0xc,%ecx
  100dfb:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100e01:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  100e04:	0f 01 7d fc          	invlpg -0x4(%ebp)
}
  100e08:	83 c4 0c             	add    $0xc,%esp
  100e0b:	5d                   	pop    %ebp
  100e0c:	c3                   	ret    
  100e0d:	0f 1f 00             	nopl   (%eax)

00100e10 <vmm_free>:

void vmm_free(void* p_vaddr) {
  100e10:	55                   	push   %ebp
  100e11:	89 e5                	mov    %esp,%ebp
  100e13:	83 ec 18             	sub    $0x18,%esp
  100e16:	8b 45 08             	mov    0x8(%ebp),%eax
  100e19:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100e1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e1f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100e22:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e25:	c1 e8 0c             	shr    $0xc,%eax
  100e28:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e2e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e31:	25 01 02 00 00       	and    $0x201,%eax
  100e36:	3d 01 02 00 00       	cmp    $0x201,%eax
  100e3b:	0f 85 33 00 00 00    	jne    100e74 <vmm_free+0x64>
    pmm_free((void*)(active_pagetables[vaddr >> 12] & 0xFFFFF000));
  100e41:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e44:	c1 e8 0c             	shr    $0xc,%eax
  100e47:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e4d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100e55:	89 04 24             	mov    %eax,(%esp)
  100e58:	e8 63 f8 ff ff       	call   1006c0 <pmm_free>
   
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  100e5d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e60:	c1 e8 0c             	shr    $0xc,%eax
  100e63:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e69:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  100e70:	0f 01 7d f8          	invlpg -0x8(%ebp)
  }
}
  100e74:	83 c4 18             	add    $0x18,%esp
  100e77:	5d                   	pop    %ebp
  100e78:	c3                   	ret    
  100e79:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00100e80 <vmm_alloc_addr>:
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  100e80:	55                   	push   %ebp
  100e81:	89 e5                	mov    %esp,%ebp
  100e83:	83 ec 28             	sub    $0x28,%esp
  100e86:	8b 45 0c             	mov    0xc(%ebp),%eax
  100e89:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100e8c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100e8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if((active_pagetables[(uint32_t)reqvaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) return 0;
  100e92:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e95:	c1 e8 0c             	shr    $0xc,%eax
  100e98:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e9e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100ea1:	25 01 02 00 00       	and    $0x201,%eax
  100ea6:	3d 00 02 00 00       	cmp    $0x200,%eax
  100eab:	0f 84 0c 00 00 00    	je     100ebd <vmm_alloc_addr+0x3d>
  100eb1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100eb8:	e9 45 00 00 00       	jmp    100f02 <vmm_alloc_addr+0x82>
  100ebd:	b8 04 02 00 00       	mov    $0x204,%eax

  uint32_t paddr = (uint32_t) pmm_alloc();
  100ec2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100ec5:	e8 06 f7 ff ff       	call   1005d0 <pmm_alloc>
  100eca:	89 45 f0             	mov    %eax,-0x10(%ebp)
  map_address_active((uint32_t)reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  100ecd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ed0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100ed3:	89 04 24             	mov    %eax,(%esp)
  100ed6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100eda:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  100ee1:	00 
  100ee2:	e8 d9 fe ff ff       	call   100dc0 <map_address_active>
  
  if(retpaddr != 0) *retpaddr = paddr;
  100ee7:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  100eee:	0f 84 08 00 00 00    	je     100efc <vmm_alloc_addr+0x7c>
  100ef4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100ef7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100efa:	89 01                	mov    %eax,(%ecx)
  
  return reqvaddr;
  100efc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100eff:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  100f02:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f05:	83 c4 28             	add    $0x28,%esp
  100f08:	5d                   	pop    %ebp
  100f09:	c3                   	ret    
  100f0a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100f10 <vmm_alloc_static>:

//TODO: VMM_ALLOC_STATIC will override already allocated memory

void* vmm_alloc_static(uint32_t offset, uint32_t flags) {
  100f10:	55                   	push   %ebp
  100f11:	89 e5                	mov    %esp,%ebp
  100f13:	83 ec 28             	sub    $0x28,%esp
  100f16:	8b 45 0c             	mov    0xc(%ebp),%eax
  100f19:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100f1c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(offset < 0x100000) {
  100f22:	81 7d f8 00 00 10 00 	cmpl   $0x100000,-0x8(%ebp)
  100f29:	0f 83 5f 00 00 00    	jae    100f8e <vmm_alloc_static+0x7e>
    if((offset & 0xFFFFF000) != offset) {
  100f2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100f37:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  100f3a:	0f 84 11 00 00 00    	je     100f51 <vmm_alloc_static+0x41>
  100f40:	8d 05 30 51 10 00    	lea    0x105130,%eax
      kprintf("Tried to allocate not 4K-aligned static vaddr. \n");
  100f46:	89 04 24             	mov    %eax,(%esp)
  100f49:	e8 62 12 00 00       	call   1021b0 <kprintf>
  100f4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    }
    uint32_t vaddr = offset + STATIC_ALLOC_VADDR;
  100f51:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f54:	05 00 00 90 01       	add    $0x1900000,%eax
  100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t paddr = (uint32_t) pmm_alloc();
  100f5c:	e8 6f f6 ff ff       	call   1005d0 <pmm_alloc>
  100f61:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    map_address_active(vaddr, paddr, flags & 0xFFF);
  100f64:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f67:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100f6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100f6d:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  100f73:	89 04 24             	mov    %eax,(%esp)
  100f76:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f7a:	89 54 24 08          	mov    %edx,0x8(%esp)
  100f7e:	e8 3d fe ff ff       	call   100dc0 <map_address_active>
    return (void*) vaddr;
  100f83:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f86:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100f89:	e9 18 00 00 00       	jmp    100fa6 <vmm_alloc_static+0x96>
  100f8e:	8d 05 61 51 10 00    	lea    0x105161,%eax
  }
  else
  {
    kprintf("Tried to allocate static vaddr outside reserved range. \n");
  100f94:	89 04 24             	mov    %eax,(%esp)
  100f97:	e8 14 12 00 00       	call   1021b0 <kprintf>
    return 0;
  100f9c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100fa3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }
}
  100fa6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100fa9:	83 c4 28             	add    $0x28,%esp
  100fac:	5d                   	pop    %ebp
  100fad:	c3                   	ret    
  100fae:	66 90                	xchg   %ax,%ax

00100fb0 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  100fb0:	55                   	push   %ebp
  100fb1:	89 e5                	mov    %esp,%ebp
  100fb3:	50                   	push   %eax
  100fb4:	8b 45 08             	mov    0x8(%ebp),%eax
  100fb7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  active_pagedir = pdpaddr;
  100fba:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100fbd:	a3 18 a0 10 00       	mov    %eax,0x10a018
  asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  100fc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100fc5:	0f 22 d8             	mov    %eax,%cr3
}
  100fc8:	83 c4 04             	add    $0x4,%esp
  100fcb:	5d                   	pop    %ebp
  100fcc:	c3                   	ret    
  100fcd:	0f 1f 00             	nopl   (%eax)

00100fd0 <vmm_init>:

uint32_t vmm_init(void)
{
  100fd0:	55                   	push   %ebp
  100fd1:	89 e5                	mov    %esp,%ebp
  //CREATE CONTEXT ************************************************************
  
  struct vmm_context* context = pmm_alloc();
  100fd3:	53                   	push   %ebx
  100fd4:	56                   	push   %esi
  100fd5:	83 ec 40             	sub    $0x40,%esp
  100fd8:	e8 f3 f5 ff ff       	call   1005d0 <pmm_alloc>
  100fdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  100fe0:	e8 eb f5 ff ff       	call   1005d0 <pmm_alloc>
  100fe5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100fe8:	89 01                	mov    %eax,(%ecx)
  
  for(i = 0; i < 1024; i++) {
  100fea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100ff1:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  100ff8:	0f 83 99 00 00 00    	jae    101097 <vmm_init+0xc7>
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  100ffe:	e8 cd f5 ff ff       	call   1005d0 <pmm_alloc>
  101003:	0d 01 00 00 00       	or     $0x1,%eax
  101008:	0d 02 00 00 00       	or     $0x2,%eax
  10100d:	0d 04 00 00 00       	or     $0x4,%eax
  101012:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101015:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101018:	8b 12                	mov    (%edx),%edx
  10101a:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        
    for(i2 = 0; i2 < 1024; i2++) {
  10101d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101024:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  10102b:	0f 83 51 00 00 00    	jae    101082 <vmm_init+0xb2>
  101031:	b8 00 02 00 00       	mov    $0x200,%eax
  101036:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  10103b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10103e:	c1 e2 18             	shl    $0x18,%edx
  101041:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101044:	c1 e6 0c             	shl    $0xc,%esi
  101047:	01 f2                	add    %esi,%edx
  101049:	89 55 e8             	mov    %edx,-0x18(%ebp)
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  10104c:	81 7d e8 00 00 00 02 	cmpl   $0x2000000,-0x18(%ebp)
  101053:	0f 97 c3             	seta   %bl
  101056:	84 db                	test   %bl,%bl
  101058:	0f 44 c1             	cmove  %ecx,%eax
  10105b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10105e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101061:	8b 75 f4             	mov    -0xc(%ebp),%esi
  101064:	8b 36                	mov    (%esi),%esi
  101066:	8b 14 96             	mov    (%esi,%edx,4),%edx
  101069:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  10106f:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
        
    for(i2 = 0; i2 < 1024; i2++) {
  101072:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101075:	05 01 00 00 00       	add    $0x1,%eax
  10107a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10107d:	e9 a2 ff ff ff       	jmp    101024 <vmm_init+0x54>
      uint32_t vaddr = (i << 24) + (i2 << 12);
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  101082:	e9 00 00 00 00       	jmp    101087 <vmm_init+0xb7>
  struct vmm_context* context = pmm_alloc();
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
  101087:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10108a:	05 01 00 00 00       	add    $0x1,%eax
  10108f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101092:	e9 5a ff ff ff       	jmp    100ff1 <vmm_init+0x21>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101097:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10109e:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  1010a5:	0f 83 5a 00 00 00    	jae    101105 <vmm_init+0x135>
  1010ab:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  1010b0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1010b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1010b6:	8b 12                	mov    (%edx),%edx
  1010b8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1010bb:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  1010c1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  1010c4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1010c7:	8b 09                	mov    (%ecx),%ecx
  1010c9:	8b 15 00 41 10 00    	mov    0x104100,%edx
  1010cf:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1010d2:	c1 e6 0c             	shl    $0xc,%esi
  1010d5:	01 f2                	add    %esi,%edx
  1010d7:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  1010da:	89 0c 24             	mov    %ecx,(%esp)
  1010dd:	89 54 24 04          	mov    %edx,0x4(%esp)
  1010e1:	89 74 24 08          	mov    %esi,0x8(%esp)
  1010e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1010ec:	00 
  1010ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1010f0:	e8 6b fb ff ff       	call   100c60 <map_address_context>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  1010f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1010f8:	05 01 00 00 00       	add    $0x1,%eax
  1010fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101100:	e9 99 ff ff ff       	jmp    10109e <vmm_init+0xce>
  101105:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  10110a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10110d:	8b 09                	mov    (%ecx),%ecx
  10110f:	8b 15 04 41 10 00    	mov    0x104104,%edx
  101115:	8b 75 f4             	mov    -0xc(%ebp),%esi
  101118:	89 0c 24             	mov    %ecx,(%esp)
  10111b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10111f:	89 74 24 08          	mov    %esi,0x8(%esp)
  101123:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10112a:	00 
  10112b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10112e:	e8 2d fb ff ff       	call   100c60 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101133:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
  10113a:	8d 05 00 b0 12 00    	lea    0x12b000,%eax
  101140:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  101143:	0f 83 3b 00 00 00    	jae    101184 <vmm_init+0x1b4>
  101149:	b8 04 00 00 00       	mov    $0x4,%eax
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  10114e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101151:	8b 09                	mov    (%ecx),%ecx
  101153:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101156:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101159:	89 0c 24             	mov    %ecx,(%esp)
  10115c:	89 54 24 04          	mov    %edx,0x4(%esp)
  101160:	89 74 24 08          	mov    %esi,0x8(%esp)
  101164:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  10116b:	00 
  10116c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10116f:	e8 ec fa ff ff       	call   100c60 <map_address_context>
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101174:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101177:	05 00 10 00 00       	add    $0x1000,%eax
  10117c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10117f:	e9 b6 ff ff ff       	jmp    10113a <vmm_init+0x16a>
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  }
  
  //END CREATE CONTEXT ********************************************************
  
  vmm_activate_pagedir((uint32_t) context->pagedir);
  101184:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101187:	8b 00                	mov    (%eax),%eax
  101189:	89 04 24             	mov    %eax,(%esp)
  10118c:	e8 1f fe ff ff       	call   100fb0 <vmm_activate_pagedir>

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  101191:	0f 20 c0             	mov    %cr0,%eax
  101194:	89 45 e0             	mov    %eax,-0x20(%ebp)
  cr0 |= (1 << 31);
  101197:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10119a:	0d 00 00 00 80       	or     $0x80000000,%eax
  10119f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  1011a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1011a5:	0f 22 c0             	mov    %eax,%cr0
  
  return (uint32_t) active_context->pagedir;
  1011a8:	a1 04 41 10 00       	mov    0x104104,%eax
  1011ad:	8b 00                	mov    (%eax),%eax
  1011af:	83 c4 40             	add    $0x40,%esp
  1011b2:	5e                   	pop    %esi
  1011b3:	5b                   	pop    %ebx
  1011b4:	5d                   	pop    %ebp
  1011b5:	c3                   	ret    
  1011b6:	66 90                	xchg   %ax,%ax
  1011b8:	66 90                	xchg   %ax,%ax
  1011ba:	66 90                	xchg   %ax,%ax
  1011bc:	66 90                	xchg   %ax,%ax
  1011be:	66 90                	xchg   %ax,%ax

001011c0 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  1011c0:	55                   	push   %ebp
  1011c1:	89 e5                	mov    %esp,%ebp
  1011c3:	53                   	push   %ebx
  1011c4:	57                   	push   %edi
  1011c5:	56                   	push   %esi
  1011c6:	83 ec 10             	sub    $0x10,%esp
  1011c9:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  1011cd:	66 89 c1             	mov    %ax,%cx
  1011d0:	8a 55 14             	mov    0x14(%ebp),%dl
  1011d3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1011d6:	8b 75 08             	mov    0x8(%ebp),%esi
  1011d9:	89 75 f0             	mov    %esi,-0x10(%ebp)
  1011dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1011df:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  1011e3:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  1011e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1011e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  1011ec:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1011f0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011f3:	89 04 f5 20 a0 10 00 	mov    %eax,0x10a020(,%esi,8)
  1011fa:	c7 04 f5 24 a0 10 00 	movl   $0x0,0x10a024(,%esi,8)
  101201:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  101205:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  101209:	c1 e0 10             	shl    $0x10,%eax
  10120c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10120f:	8b 3c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%edi
  101216:	8b 1c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%ebx
  10121d:	09 c3                	or     %eax,%ebx
  10121f:	89 3c f5 24 a0 10 00 	mov    %edi,0x10a024(,%esi,8)
  101226:	89 1c f5 20 a0 10 00 	mov    %ebx,0x10a020(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  10122d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  101231:	c1 e0 08             	shl    $0x8,%eax
  101234:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101237:	8b 3c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%edi
  10123e:	8b 1c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%ebx
  101245:	09 c3                	or     %eax,%ebx
  101247:	89 3c f5 20 a0 10 00 	mov    %edi,0x10a020(,%esi,8)
  10124e:	89 1c f5 24 a0 10 00 	mov    %ebx,0x10a024(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  101255:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  101259:	c1 e0 10             	shl    $0x10,%eax
  10125c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10125f:	8b 3c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%edi
  101266:	8b 1c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%ebx
  10126d:	09 c3                	or     %eax,%ebx
  10126f:	89 3c f5 20 a0 10 00 	mov    %edi,0x10a020(,%esi,8)
  101276:	89 1c f5 24 a0 10 00 	mov    %ebx,0x10a024(,%esi,8)
}
  10127d:	83 c4 10             	add    $0x10,%esp
  101280:	5e                   	pop    %esi
  101281:	5f                   	pop    %edi
  101282:	5b                   	pop    %ebx
  101283:	5d                   	pop    %ebp
  101284:	c3                   	ret    
  101285:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10128c:	00 00 00 00 

00101290 <init_idt>:

void init_idt() {
  101290:	55                   	push   %ebp
  101291:	89 e5                	mov    %esp,%ebp
	struct {
  101293:	56                   	push   %esi
  101294:	81 ec 34 02 00 00    	sub    $0x234,%esp
  10129a:	a1 00 50 10 00       	mov    0x105000,%eax
  10129f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1012a2:	66 8b 0d 04 50 10 00 	mov    0x105004,%cx
  1012a9:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};

	int i = 0;
  1012ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  1012b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1012bb:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  1012c2:	0f 8d 1e 00 00 00    	jge    1012e6 <init_idt+0x56>
		handler_set[i] = 0;
  1012c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1012cb:	c7 04 85 20 a2 10 00 	movl   $0x0,0x10a220(,%eax,4)
  1012d2:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  1012d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1012d9:	05 01 00 00 00       	add    $0x1,%eax
  1012de:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1012e1:	e9 d5 ff ff ff       	jmp    1012bb <init_idt+0x2b>
  1012e6:	b8 20 00 00 00       	mov    $0x20,%eax
  1012eb:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  1012f0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1012f7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1012fe:	00 
  1012ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101302:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  101305:	e8 86 0b 00 00       	call   101e90 <outb>
  10130a:	b8 21 00 00 00       	mov    $0x21,%eax
  10130f:	b9 20 00 00 00       	mov    $0x20,%ecx
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  101314:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10131b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101322:	00 
  101323:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101326:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  101329:	e8 62 0b 00 00       	call   101e90 <outb>
  10132e:	b8 21 00 00 00       	mov    $0x21,%eax
  101333:	b9 04 00 00 00       	mov    $0x4,%ecx
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  101338:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10133f:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  101346:	00 
  101347:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10134a:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10134d:	e8 3e 0b 00 00       	call   101e90 <outb>
  101352:	b8 21 00 00 00       	mov    $0x21,%eax
  101357:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0x21, 0x01); // ICW 4
  10135c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101363:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10136a:	00 
  10136b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10136e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  101371:	e8 1a 0b 00 00       	call   101e90 <outb>
  101376:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10137b:	b9 11 00 00 00       	mov    $0x11,%ecx

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  101380:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101387:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10138e:	00 
  10138f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101392:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101395:	e8 f6 0a 00 00       	call   101e90 <outb>
  10139a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  10139f:	b9 28 00 00 00       	mov    $0x28,%ecx
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  1013a4:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1013ab:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  1013b2:	00 
  1013b3:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1013b6:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  1013b9:	e8 d2 0a 00 00       	call   101e90 <outb>
  1013be:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1013c3:	b9 02 00 00 00       	mov    $0x2,%ecx
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  1013c8:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1013cf:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1013d6:	00 
  1013d7:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1013da:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  1013dd:	e8 ae 0a 00 00       	call   101e90 <outb>
  1013e2:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1013e7:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0xa1, 0x01); // ICW 4
  1013ec:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1013f3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1013fa:	00 
  1013fb:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1013fe:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  101401:	e8 8a 0a 00 00       	call   101e90 <outb>
  101406:	b8 20 00 00 00       	mov    $0x20,%eax
  10140b:	b9 00 00 00 00       	mov    $0x0,%ecx

  outb(0x20, 0x0);
  101410:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101417:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10141e:	00 
  10141f:	89 45 a8             	mov    %eax,-0x58(%ebp)
  101422:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  101425:	e8 66 0a 00 00       	call   101e90 <outb>
  10142a:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10142f:	b9 00 00 00 00       	mov    $0x0,%ecx
  outb(0xa0, 0x0);
  101434:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10143b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101442:	00 
  101443:	89 45 a0             	mov    %eax,-0x60(%ebp)
  101446:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  101449:	e8 42 0a 00 00       	call   101e90 <outb>
  10144e:	b8 00 00 00 00       	mov    $0x0,%eax
  101453:	8d 0d 80 2a 10 00    	lea    0x102a80,%ecx
  101459:	ba 08 00 00 00       	mov    $0x8,%edx
  10145e:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101463:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10146a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10146e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101475:	00 
  101476:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10147d:	00 
  10147e:	89 45 98             	mov    %eax,-0x68(%ebp)
  101481:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101484:	89 55 90             	mov    %edx,-0x70(%ebp)
  101487:	e8 34 fd ff ff       	call   1011c0 <idt_set_entry>
  10148c:	b8 01 00 00 00       	mov    $0x1,%eax
  101491:	8d 0d 89 2a 10 00    	lea    0x102a89,%ecx
  101497:	ba 08 00 00 00       	mov    $0x8,%edx
  10149c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1014a1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1014a8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014ac:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014b3:	00 
  1014b4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014bb:	00 
  1014bc:	89 45 8c             	mov    %eax,-0x74(%ebp)
  1014bf:	89 75 88             	mov    %esi,-0x78(%ebp)
  1014c2:	89 55 84             	mov    %edx,-0x7c(%ebp)
  1014c5:	e8 f6 fc ff ff       	call   1011c0 <idt_set_entry>
  1014ca:	b8 02 00 00 00       	mov    $0x2,%eax
  1014cf:	8d 0d 92 2a 10 00    	lea    0x102a92,%ecx
  1014d5:	ba 08 00 00 00       	mov    $0x8,%edx
  1014da:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1014df:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1014e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014ea:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014f1:	00 
  1014f2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014f9:	00 
  1014fa:	89 45 80             	mov    %eax,-0x80(%ebp)
  1014fd:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  101503:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  101509:	e8 b2 fc ff ff       	call   1011c0 <idt_set_entry>
  10150e:	b8 03 00 00 00       	mov    $0x3,%eax
  101513:	8d 0d 9b 2a 10 00    	lea    0x102a9b,%ecx
  101519:	ba 08 00 00 00       	mov    $0x8,%edx
  10151e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101523:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  10152a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10152e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101535:	00 
  101536:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10153d:	00 
  10153e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  101544:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  10154a:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101550:	e8 6b fc ff ff       	call   1011c0 <idt_set_entry>
  101555:	b8 04 00 00 00       	mov    $0x4,%eax
  10155a:	8d 0d a4 2a 10 00    	lea    0x102aa4,%ecx
  101560:	ba 08 00 00 00       	mov    $0x8,%edx
  101565:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10156a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101571:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101575:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10157c:	00 
  10157d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101584:	00 
  101585:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10158b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101591:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101597:	e8 24 fc ff ff       	call   1011c0 <idt_set_entry>
  10159c:	b8 05 00 00 00       	mov    $0x5,%eax
  1015a1:	8d 0d ad 2a 10 00    	lea    0x102aad,%ecx
  1015a7:	ba 08 00 00 00       	mov    $0x8,%edx
  1015ac:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015b1:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1015b8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015bc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015c3:	00 
  1015c4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015cb:	00 
  1015cc:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  1015d2:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  1015d8:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  1015de:	e8 dd fb ff ff       	call   1011c0 <idt_set_entry>
  1015e3:	b8 06 00 00 00       	mov    $0x6,%eax
  1015e8:	8d 0d b6 2a 10 00    	lea    0x102ab6,%ecx
  1015ee:	ba 08 00 00 00       	mov    $0x8,%edx
  1015f3:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015f8:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  1015ff:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101603:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10160a:	00 
  10160b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101612:	00 
  101613:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  101619:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  10161f:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  101625:	e8 96 fb ff ff       	call   1011c0 <idt_set_entry>
  10162a:	b8 07 00 00 00       	mov    $0x7,%eax
  10162f:	8d 0d bf 2a 10 00    	lea    0x102abf,%ecx
  101635:	ba 08 00 00 00       	mov    $0x8,%edx
  10163a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10163f:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101646:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10164a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101651:	00 
  101652:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101659:	00 
  10165a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101660:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101666:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10166c:	e8 4f fb ff ff       	call   1011c0 <idt_set_entry>
  101671:	b8 08 00 00 00       	mov    $0x8,%eax
  101676:	8d 0d c8 2a 10 00    	lea    0x102ac8,%ecx
  10167c:	ba 8e 00 00 00       	mov    $0x8e,%edx
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101681:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101688:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10168c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101693:	00 
  101694:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10169b:	00 
  10169c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  1016a2:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  1016a8:	e8 13 fb ff ff       	call   1011c0 <idt_set_entry>
  1016ad:	b8 09 00 00 00       	mov    $0x9,%eax
  1016b2:	8d 0d cf 2a 10 00    	lea    0x102acf,%ecx
  1016b8:	ba 08 00 00 00       	mov    $0x8,%edx
  1016bd:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016c2:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  1016c9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016cd:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016d4:	00 
  1016d5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016dc:	00 
  1016dd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  1016e3:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  1016e9:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  1016ef:	e8 cc fa ff ff       	call   1011c0 <idt_set_entry>
  1016f4:	b8 0a 00 00 00       	mov    $0xa,%eax
  1016f9:	8d 0d d8 2a 10 00    	lea    0x102ad8,%ecx
  1016ff:	ba 08 00 00 00       	mov    $0x8,%edx
  101704:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101709:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  101710:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101714:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10171b:	00 
  10171c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101723:	00 
  101724:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  10172a:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  101730:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  101736:	e8 85 fa ff ff       	call   1011c0 <idt_set_entry>
  10173b:	b8 0b 00 00 00       	mov    $0xb,%eax
  101740:	8d 0d df 2a 10 00    	lea    0x102adf,%ecx
  101746:	ba 08 00 00 00       	mov    $0x8,%edx
  10174b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101750:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101757:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10175b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101762:	00 
  101763:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10176a:	00 
  10176b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101771:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101777:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10177d:	e8 3e fa ff ff       	call   1011c0 <idt_set_entry>
  101782:	b8 0c 00 00 00       	mov    $0xc,%eax
  101787:	8d 0d e6 2a 10 00    	lea    0x102ae6,%ecx
  10178d:	ba 08 00 00 00       	mov    $0x8,%edx
  101792:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101797:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10179e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017a2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017a9:	00 
  1017aa:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017b1:	00 
  1017b2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  1017b8:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  1017be:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  1017c4:	e8 f7 f9 ff ff       	call   1011c0 <idt_set_entry>
  1017c9:	b8 0d 00 00 00       	mov    $0xd,%eax
  1017ce:	8d 0d ed 2a 10 00    	lea    0x102aed,%ecx
  1017d4:	ba 08 00 00 00       	mov    $0x8,%edx
  1017d9:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017de:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  1017e5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017e9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017f0:	00 
  1017f1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017f8:	00 
  1017f9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  1017ff:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  101805:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  10180b:	e8 b0 f9 ff ff       	call   1011c0 <idt_set_entry>
  101810:	b8 0e 00 00 00       	mov    $0xe,%eax
  101815:	8d 0d f4 2a 10 00    	lea    0x102af4,%ecx
  10181b:	ba 08 00 00 00       	mov    $0x8,%edx
  101820:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101825:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  10182c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101830:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101837:	00 
  101838:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10183f:	00 
  101840:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  101846:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  10184c:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101852:	e8 69 f9 ff ff       	call   1011c0 <idt_set_entry>
  101857:	b8 0f 00 00 00       	mov    $0xf,%eax
  10185c:	8d 0d f8 2a 10 00    	lea    0x102af8,%ecx
  101862:	ba 08 00 00 00       	mov    $0x8,%edx
  101867:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10186c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101873:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101877:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10187e:	00 
  10187f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101886:	00 
  101887:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10188d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101893:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101899:	e8 22 f9 ff ff       	call   1011c0 <idt_set_entry>
  10189e:	b8 10 00 00 00       	mov    $0x10,%eax
  1018a3:	8d 0d fe 2a 10 00    	lea    0x102afe,%ecx
  1018a9:	ba 08 00 00 00       	mov    $0x8,%edx
  1018ae:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018b3:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1018ba:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018be:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018c5:	00 
  1018c6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018cd:	00 
  1018ce:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  1018d4:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  1018da:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  1018e0:	e8 db f8 ff ff       	call   1011c0 <idt_set_entry>
  1018e5:	b8 11 00 00 00       	mov    $0x11,%eax
  1018ea:	8d 0d 04 2b 10 00    	lea    0x102b04,%ecx
  1018f0:	ba 08 00 00 00       	mov    $0x8,%edx
  1018f5:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018fa:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101901:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101905:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10190c:	00 
  10190d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101914:	00 
  101915:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  10191b:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  101921:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  101927:	e8 94 f8 ff ff       	call   1011c0 <idt_set_entry>
  10192c:	b8 12 00 00 00       	mov    $0x12,%eax
  101931:	8d 0d 08 2b 10 00    	lea    0x102b08,%ecx
  101937:	ba 08 00 00 00       	mov    $0x8,%edx
  10193c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101941:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  101948:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10194c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101953:	00 
  101954:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10195b:	00 
  10195c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101962:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101968:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10196e:	e8 4d f8 ff ff       	call   1011c0 <idt_set_entry>
  101973:	b8 20 00 00 00       	mov    $0x20,%eax
  101978:	8d 0d 0e 2b 10 00    	lea    0x102b0e,%ecx
  10197e:	ba 08 00 00 00       	mov    $0x8,%edx
  101983:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101988:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10198f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101993:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10199a:	00 
  10199b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019a2:	00 
  1019a3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  1019a9:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  1019af:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  1019b5:	e8 06 f8 ff ff       	call   1011c0 <idt_set_entry>
  1019ba:	b8 21 00 00 00       	mov    $0x21,%eax
  1019bf:	8d 0d 14 2b 10 00    	lea    0x102b14,%ecx
  1019c5:	ba 08 00 00 00       	mov    $0x8,%edx
  1019ca:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019cf:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1019d6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019da:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019e1:	00 
  1019e2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019e9:	00 
  1019ea:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  1019f0:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  1019f6:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  1019fc:	e8 bf f7 ff ff       	call   1011c0 <idt_set_entry>
  101a01:	b8 22 00 00 00       	mov    $0x22,%eax
  101a06:	8d 0d 1a 2b 10 00    	lea    0x102b1a,%ecx
  101a0c:	ba 08 00 00 00       	mov    $0x8,%edx
  101a11:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(34, intr_stub_34, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a16:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  101a1d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a21:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a28:	00 
  101a29:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a30:	00 
  101a31:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  101a37:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  101a3d:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  101a43:	e8 78 f7 ff ff       	call   1011c0 <idt_set_entry>
  101a48:	b8 23 00 00 00       	mov    $0x23,%eax
  101a4d:	8d 0d 20 2b 10 00    	lea    0x102b20,%ecx
  101a53:	ba 08 00 00 00       	mov    $0x8,%edx
  101a58:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(35, intr_stub_35, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a5d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101a64:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a68:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a6f:	00 
  101a70:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a77:	00 
  101a78:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101a7e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101a84:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101a8a:	e8 31 f7 ff ff       	call   1011c0 <idt_set_entry>
  101a8f:	b8 24 00 00 00       	mov    $0x24,%eax
  101a94:	8d 0d 26 2b 10 00    	lea    0x102b26,%ecx
  101a9a:	ba 08 00 00 00       	mov    $0x8,%edx
  101a9f:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(36, intr_stub_36, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101aa4:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101aab:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aaf:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ab6:	00 
  101ab7:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101abe:	00 
  101abf:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101ac5:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101acb:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101ad1:	e8 ea f6 ff ff       	call   1011c0 <idt_set_entry>
  101ad6:	b8 25 00 00 00       	mov    $0x25,%eax
  101adb:	8d 0d 2c 2b 10 00    	lea    0x102b2c,%ecx
  101ae1:	ba 08 00 00 00       	mov    $0x8,%edx
  101ae6:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(37, intr_stub_37, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101aeb:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101af2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101af6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101afd:	00 
  101afe:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b05:	00 
  101b06:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101b0c:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101b12:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101b18:	e8 a3 f6 ff ff       	call   1011c0 <idt_set_entry>
  101b1d:	b8 26 00 00 00       	mov    $0x26,%eax
  101b22:	8d 0d 32 2b 10 00    	lea    0x102b32,%ecx
  101b28:	ba 08 00 00 00       	mov    $0x8,%edx
  101b2d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(38, intr_stub_38, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b32:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101b39:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b3d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b44:	00 
  101b45:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b4c:	00 
  101b4d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101b53:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101b59:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101b5f:	e8 5c f6 ff ff       	call   1011c0 <idt_set_entry>
  101b64:	b8 27 00 00 00       	mov    $0x27,%eax
  101b69:	8d 0d 38 2b 10 00    	lea    0x102b38,%ecx
  101b6f:	ba 08 00 00 00       	mov    $0x8,%edx
  101b74:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(39, intr_stub_39, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b79:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101b80:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b84:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b8b:	00 
  101b8c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b93:	00 
  101b94:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101b9a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101ba0:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101ba6:	e8 15 f6 ff ff       	call   1011c0 <idt_set_entry>
  101bab:	b8 28 00 00 00       	mov    $0x28,%eax
  101bb0:	8d 0d 3e 2b 10 00    	lea    0x102b3e,%ecx
  101bb6:	ba 08 00 00 00       	mov    $0x8,%edx
  101bbb:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(40, intr_stub_40, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101bc0:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101bc7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101bcb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bd2:	00 
  101bd3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bda:	00 
  101bdb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101be1:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101be7:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101bed:	e8 ce f5 ff ff       	call   1011c0 <idt_set_entry>
  101bf2:	b8 29 00 00 00       	mov    $0x29,%eax
  101bf7:	8d 0d 44 2b 10 00    	lea    0x102b44,%ecx
  101bfd:	ba 08 00 00 00       	mov    $0x8,%edx
  101c02:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(41, intr_stub_41, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c07:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101c0e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c12:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c19:	00 
  101c1a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c21:	00 
  101c22:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101c28:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101c2e:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101c34:	e8 87 f5 ff ff       	call   1011c0 <idt_set_entry>
  101c39:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101c3e:	8d 0d 4a 2b 10 00    	lea    0x102b4a,%ecx
  101c44:	ba 08 00 00 00       	mov    $0x8,%edx
  101c49:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(42, intr_stub_42, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c4e:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101c55:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c59:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c60:	00 
  101c61:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c68:	00 
  101c69:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101c6f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101c75:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101c7b:	e8 40 f5 ff ff       	call   1011c0 <idt_set_entry>
  101c80:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101c85:	8d 0d 50 2b 10 00    	lea    0x102b50,%ecx
  101c8b:	ba 08 00 00 00       	mov    $0x8,%edx
  101c90:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(43, intr_stub_43, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c95:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101c9c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ca0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ca7:	00 
  101ca8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101caf:	00 
  101cb0:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101cb6:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101cbc:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101cc2:	e8 f9 f4 ff ff       	call   1011c0 <idt_set_entry>
  101cc7:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101ccc:	8d 0d 56 2b 10 00    	lea    0x102b56,%ecx
  101cd2:	ba 08 00 00 00       	mov    $0x8,%edx
  101cd7:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(44, intr_stub_44, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101cdc:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101ce3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ce7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101cee:	00 
  101cef:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101cf6:	00 
  101cf7:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101cfd:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101d03:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101d09:	e8 b2 f4 ff ff       	call   1011c0 <idt_set_entry>
  101d0e:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101d13:	8d 0d 5c 2b 10 00    	lea    0x102b5c,%ecx
  101d19:	ba 08 00 00 00       	mov    $0x8,%edx
  101d1e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(45, intr_stub_45, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d23:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101d2a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d2e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d35:	00 
  101d36:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d3d:	00 
  101d3e:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  101d44:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  101d4a:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101d50:	e8 6b f4 ff ff       	call   1011c0 <idt_set_entry>
  101d55:	b8 2e 00 00 00       	mov    $0x2e,%eax
  101d5a:	8d 0d 62 2b 10 00    	lea    0x102b62,%ecx
  101d60:	ba 08 00 00 00       	mov    $0x8,%edx
  101d65:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(46, intr_stub_46, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d6a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101d71:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d75:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d7c:	00 
  101d7d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d84:	00 
  101d85:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  101d8b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101d91:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101d97:	e8 24 f4 ff ff       	call   1011c0 <idt_set_entry>
  101d9c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101da1:	8d 0d 68 2b 10 00    	lea    0x102b68,%ecx
  101da7:	ba 08 00 00 00       	mov    $0x8,%edx
  101dac:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(47, intr_stub_47, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101db1:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101db8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101dbc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101dc3:	00 
  101dc4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101dcb:	00 
  101dcc:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101dd2:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101dd8:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  101dde:	e8 dd f3 ff ff       	call   1011c0 <idt_set_entry>
  101de3:	b8 30 00 00 00       	mov    $0x30,%eax
  101de8:	8d 0d 6e 2b 10 00    	lea    0x102b6e,%ecx
  101dee:	ba 08 00 00 00       	mov    $0x8,%edx
  101df3:	be ee 00 00 00       	mov    $0xee,%esi

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101df8:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101dff:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e03:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e0a:	00 
  101e0b:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101e12:	00 
  101e13:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  101e19:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  101e1f:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  101e25:	e8 96 f3 ff ff       	call   1011c0 <idt_set_entry>
  101e2a:	b8 05 00 00 00       	mov    $0x5,%eax
  101e2f:	8d 0d 08 41 10 00    	lea    0x104108,%ecx
  101e35:	ba 80 00 00 00       	mov    $0x80,%edx
  101e3a:	be e9 00 00 00       	mov    $0xe9,%esi

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101e3f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101e46:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e4a:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101e51:	00 
  101e52:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101e59:	00 
  101e5a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101e60:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101e66:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  101e6c:	e8 7f 0d 00 00       	call   102bf0 <set_gdt_entry>
  101e71:	b8 28 00 00 00       	mov    $0x28,%eax

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101e76:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101e79:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  101e7d:	fb                   	sti    
}
  101e7e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101e84:	5e                   	pop    %esi
  101e85:	5d                   	pop    %ebp
  101e86:	c3                   	ret    
  101e87:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  101e8e:	00 00 

00101e90 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  101e90:	55                   	push   %ebp
  101e91:	89 e5                	mov    %esp,%ebp
  101e93:	50                   	push   %eax
  101e94:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101e98:	66 89 c1             	mov    %ax,%cx
  101e9b:	8a 55 0c             	mov    0xc(%ebp),%dl
  101e9e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101ea2:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101ea5:	8a 45 fd             	mov    -0x3(%ebp),%al
  101ea8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101eac:	ee                   	out    %al,(%dx)
}
  101ead:	83 c4 04             	add    $0x4,%esp
  101eb0:	5d                   	pop    %ebp
  101eb1:	c3                   	ret    
  101eb2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101eb9:	1f 84 00 00 00 00 00 

00101ec0 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  101ec0:	55                   	push   %ebp
  101ec1:	89 e5                	mov    %esp,%ebp
  101ec3:	83 ec 08             	sub    $0x8,%esp
  101ec6:	8b 45 0c             	mov    0xc(%ebp),%eax
  101ec9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101ecc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  101ecf:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101ed2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ed5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101ed8:	89 04 8d 20 a3 10 00 	mov    %eax,0x10a320(,%ecx,4)
	handler_set[i] = 1;
  101edf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ee2:	c7 04 85 20 a2 10 00 	movl   $0x1,0x10a220(,%eax,4)
  101ee9:	01 00 00 00 
}
  101eed:	83 c4 08             	add    $0x8,%esp
  101ef0:	5d                   	pop    %ebp
  101ef1:	c3                   	ret    
  101ef2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101ef9:	1f 84 00 00 00 00 00 

00101f00 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  101f00:	55                   	push   %ebp
  101f01:	89 e5                	mov    %esp,%ebp
  101f03:	83 ec 28             	sub    $0x28,%esp
  101f06:	8b 45 08             	mov    0x8(%ebp),%eax
  101f09:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct cpu_state* new_cpu = cpu;
  101f0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f0f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if (cpu->intr <= 0x1f) {
  101f12:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f15:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  101f1c:	0f 87 10 00 00 00    	ja     101f32 <handle_interrupt+0x32>
    show_cod(cpu);
  101f22:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f25:	89 04 24             	mov    %eax,(%esp)
  101f28:	e8 23 01 00 00       	call   102050 <show_cod>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101f2d:	e9 16 01 00 00       	jmp    102048 <handle_interrupt+0x148>
  101f32:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f35:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101f3c:	0f 82 b4 00 00 00    	jb     101ff6 <handle_interrupt+0xf6>
  101f42:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f45:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  101f4c:	0f 87 a4 00 00 00    	ja     101ff6 <handle_interrupt+0xf6>
    if (cpu->intr >= 0x28) {
  101f52:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f55:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  101f5c:	0f 82 24 00 00 00    	jb     101f86 <handle_interrupt+0x86>
  101f62:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101f67:	b9 20 00 00 00       	mov    $0x20,%ecx
      outb(0xa0, 0x20);
  101f6c:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101f73:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101f7a:	00 
  101f7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101f7e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101f81:	e8 0a ff ff ff       	call   101e90 <outb>
    }
    if (cpu->intr == 0x20) {
  101f86:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f89:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101f90:	0f 85 1b 00 00 00    	jne    101fb1 <handle_interrupt+0xb1>
      new_cpu = schedule(cpu);
  101f96:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f99:	89 04 24             	mov    %eax,(%esp)
  101f9c:	e8 ef 10 00 00       	call   103090 <schedule>
  101fa1:	89 45 f8             	mov    %eax,-0x8(%ebp)
      tss[1] = (uint32_t) (new_cpu + 1);
  101fa4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fa7:	05 38 00 00 00       	add    $0x38,%eax
  101fac:	a3 0c 41 10 00       	mov    %eax,0x10410c
  101fb1:	b8 20 00 00 00       	mov    $0x20,%eax
    }
    outb(0x20, 0x20);
  101fb6:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101fbd:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101fc4:	00 
  101fc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101fc8:	e8 c3 fe ff ff       	call   101e90 <outb>
		if(handler_set[cpu->intr]) {
  101fcd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101fd0:	8b 40 1c             	mov    0x1c(%eax),%eax
  101fd3:	81 3c 85 20 a2 10 00 	cmpl   $0x0,0x10a220(,%eax,4)
  101fda:	00 00 00 00 
  101fde:	0f 84 0d 00 00 00    	je     101ff1 <handle_interrupt+0xf1>
			handlers[cpu->intr]();
  101fe4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101fe7:	8b 40 1c             	mov    0x1c(%eax),%eax
  101fea:	ff 14 85 20 a3 10 00 	call   *0x10a320(,%eax,4)
		}
  } else if (cpu->intr == 0x30) {
  101ff1:	e9 4d 00 00 00       	jmp    102043 <handle_interrupt+0x143>
  101ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ff9:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  102000:	0f 85 20 00 00 00    	jne    102026 <handle_interrupt+0x126>
		new_cpu = syscall(new_cpu);
  102006:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102009:	89 04 24             	mov    %eax,(%esp)
  10200c:	e8 bf 06 00 00       	call   1026d0 <syscall>
  102011:	89 45 f8             	mov    %eax,-0x8(%ebp)
    tss[1] = (uint32_t) (new_cpu + 1);
  102014:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102017:	05 38 00 00 00       	add    $0x38,%eax
  10201c:	a3 0c 41 10 00       	mov    %eax,0x10410c
  } else {
  102021:	e9 18 00 00 00       	jmp    10203e <handle_interrupt+0x13e>
  102026:	8d 05 9a 51 10 00    	lea    0x10519a,%eax
    kprintf("Unbekannter Interrupt\n");
  10202c:	89 04 24             	mov    %eax,(%esp)
  10202f:	e8 7c 01 00 00       	call   1021b0 <kprintf>
  102034:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  102037:	fa                   	cli    
  102038:	f4                   	hlt    
    }
  102039:	e9 f9 ff ff ff       	jmp    102037 <handle_interrupt+0x137>
  10203e:	e9 00 00 00 00       	jmp    102043 <handle_interrupt+0x143>
  102043:	e9 00 00 00 00       	jmp    102048 <handle_interrupt+0x148>
  }  

  return new_cpu;
  102048:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10204b:	83 c4 28             	add    $0x28,%esp
  10204e:	5d                   	pop    %ebp
  10204f:	c3                   	ret    

00102050 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu) {
  102050:	55                   	push   %ebp
  102051:	89 e5                	mov    %esp,%ebp
  102053:	53                   	push   %ebx
  102054:	57                   	push   %edi
  102055:	56                   	push   %esi
  102056:	83 ec 3c             	sub    $0x3c,%esp
  102059:	8b 45 08             	mov    0x8(%ebp),%eax
  10205c:	8d 0d b1 51 10 00    	lea    0x1051b1,%ecx
  102062:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf ("          '''  \\   `-._.'`---^_))) \n");
  kprintf ("                `-._ )))       ``` \n");
  kprintf ("                     ```            \n");
  #endif
  
  kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  102065:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102068:	8b 40 1c             	mov    0x1c(%eax),%eax
  10206b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10206e:	8b 52 20             	mov    0x20(%edx),%edx
  102071:	89 0c 24             	mov    %ecx,(%esp)
  102074:	89 44 24 04          	mov    %eax,0x4(%esp)
  102078:	89 54 24 08          	mov    %edx,0x8(%esp)
  10207c:	e8 2f 01 00 00       	call   1021b0 <kprintf>
  102081:	8d 0d d5 51 10 00    	lea    0x1051d5,%ecx

  kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  102087:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10208a:	8b 12                	mov    (%edx),%edx
  10208c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10208f:	8b 76 04             	mov    0x4(%esi),%esi
  102092:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102095:	8b 7f 08             	mov    0x8(%edi),%edi
  102098:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10209b:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  10209e:	89 0c 24             	mov    %ecx,(%esp)
  1020a1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1020a5:	89 74 24 08          	mov    %esi,0x8(%esp)
  1020a9:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1020ad:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1020b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1020b4:	e8 f7 00 00 00       	call   1021b0 <kprintf>
  1020b9:	8d 0d f6 51 10 00    	lea    0x1051f6,%ecx
  kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  1020bf:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1020c2:	8b 52 10             	mov    0x10(%edx),%edx
  1020c5:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1020c8:	8b 76 14             	mov    0x14(%esi),%esi
  1020cb:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1020ce:	8b 7f 18             	mov    0x18(%edi),%edi
  1020d1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1020d4:	8b 5b 24             	mov    0x24(%ebx),%ebx
  1020d7:	89 0c 24             	mov    %ecx,(%esp)
  1020da:	89 54 24 04          	mov    %edx,0x4(%esp)
  1020de:	89 74 24 08          	mov    %esi,0x8(%esp)
  1020e2:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1020e6:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1020ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1020ed:	e8 be 00 00 00       	call   1021b0 <kprintf>
  1020f2:	8d 0d 17 52 10 00    	lea    0x105217,%ecx
  kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  1020f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1020fb:	8b 52 28             	mov    0x28(%edx),%edx
  1020fe:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102101:	8b 76 2c             	mov    0x2c(%esi),%esi
  102104:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102107:	8b 7f 30             	mov    0x30(%edi),%edi
  10210a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10210d:	8b 5b 34             	mov    0x34(%ebx),%ebx
  102110:	89 0c 24             	mov    %ecx,(%esp)
  102113:	89 54 24 04          	mov    %edx,0x4(%esp)
  102117:	89 74 24 08          	mov    %esi,0x8(%esp)
  10211b:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10211f:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  102123:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102126:	e8 85 00 00 00       	call   1021b0 <kprintf>
  10212b:	8d 0d 39 52 10 00    	lea    0x105239,%ecx

  uint32_t cr2 = 0;
  102131:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  asm volatile("mov %%cr2, %0" : "=r" (cr2));
  102138:	0f 20 d2             	mov    %cr2,%edx
  10213b:	89 55 ec             	mov    %edx,-0x14(%ebp)

  kprintf("CR2: %x \n", cr2);
  10213e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102141:	89 0c 24             	mov    %ecx,(%esp)
  102144:	89 54 24 04          	mov    %edx,0x4(%esp)
  102148:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10214b:	e8 60 00 00 00       	call   1021b0 <kprintf>
  102150:	89 45 d8             	mov    %eax,-0x28(%ebp)

  while(1) {
    asm volatile("cli; hlt");
  102153:	fa                   	cli    
  102154:	f4                   	hlt    
  }
  102155:	e9 f9 ff ff ff       	jmp    102153 <show_cod+0x103>
  10215a:	66 90                	xchg   %ax,%ax
  10215c:	66 90                	xchg   %ax,%ax
  10215e:	66 90                	xchg   %ax,%ax

00102160 <clrscr>:
    } while (x);
    kputs(p);
}

void clrscr(void)
{
  102160:	55                   	push   %ebp
  102161:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102163:	50                   	push   %eax
  102164:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10216b:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  102172:	0f 8d 1d 00 00 00    	jge    102195 <clrscr+0x35>
        video[i] = 0;
  102178:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10217b:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102181:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102185:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102188:	05 01 00 00 00       	add    $0x1,%eax
  10218d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102190:	e9 d6 ff ff ff       	jmp    10216b <clrscr+0xb>
        video[i] = 0;
    }

    x = y = 0;
  102195:	c7 05 20 a4 10 00 00 	movl   $0x0,0x10a420
  10219c:	00 00 00 
  10219f:	c7 05 24 a4 10 00 00 	movl   $0x0,0x10a424
  1021a6:	00 00 00 
}
  1021a9:	83 c4 04             	add    $0x4,%esp
  1021ac:	5d                   	pop    %ebp
  1021ad:	c3                   	ret    
  1021ae:	66 90                	xchg   %ax,%ax

001021b0 <kprintf>:

int kprintf(const char* fmt, ...)
{
  1021b0:	55                   	push   %ebp
  1021b1:	89 e5                	mov    %esp,%ebp
  1021b3:	83 ec 58             	sub    $0x58,%esp
  1021b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1021b9:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  1021bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1021bf:	8d 45 0c             	lea    0xc(%ebp),%eax
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  1021c2:	89 01                	mov    %eax,(%ecx)
  kprintf_res = 0;
  1021c4:	c7 05 28 a4 10 00 00 	movl   $0x0,0x10a428
  1021cb:	00 00 00 
  while (*fmt) {
  1021ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1021d1:	80 38 00             	cmpb   $0x0,(%eax)
  1021d4:	0f 84 dd 01 00 00    	je     1023b7 <kprintf+0x207>
    if (*fmt == '%') {
  1021da:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1021dd:	0f be 00             	movsbl (%eax),%eax
  1021e0:	3d 25 00 00 00       	cmp    $0x25,%eax
  1021e5:	0f 85 ae 01 00 00    	jne    102399 <kprintf+0x1e9>
      fmt++;
  1021eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1021ee:	89 c1                	mov    %eax,%ecx
  1021f0:	41                   	inc    %ecx
  1021f1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
      switch (*fmt) {
  1021f4:	0f be 40 01          	movsbl 0x1(%eax),%eax
  1021f8:	89 c1                	mov    %eax,%ecx
  1021fa:	83 e9 24             	sub    $0x24,%ecx
  1021fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102200:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  102203:	0f 8f 15 00 00 00    	jg     10221e <kprintf+0x6e>
  102209:	e9 00 00 00 00       	jmp    10220e <kprintf+0x5e>
  10220e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102211:	85 c0                	test   %eax,%eax
  102213:	0f 84 54 01 00 00    	je     10236d <kprintf+0x1bd>
  102219:	e9 54 01 00 00       	jmp    102372 <kprintf+0x1c2>
  10221e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102221:	83 e8 62             	sub    $0x62,%eax
  102224:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102227:	0f 8f 19 00 00 00    	jg     102246 <kprintf+0x96>
  10222d:	e9 00 00 00 00       	jmp    102232 <kprintf+0x82>
  102232:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102235:	83 e8 25             	sub    $0x25,%eax
  102238:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10223b:	0f 84 13 01 00 00    	je     102354 <kprintf+0x1a4>
  102241:	e9 2c 01 00 00       	jmp    102372 <kprintf+0x1c2>
  102246:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102249:	83 e8 6f             	sub    $0x6f,%eax
  10224c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10224f:	0f 8f 2d 00 00 00    	jg     102282 <kprintf+0xd2>
  102255:	e9 00 00 00 00       	jmp    10225a <kprintf+0xaa>
  10225a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10225d:	83 e8 63             	sub    $0x63,%eax
  102260:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102263:	0f 84 c5 00 00 00    	je     10232e <kprintf+0x17e>
  102269:	e9 00 00 00 00       	jmp    10226e <kprintf+0xbe>
  10226e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102271:	83 e8 64             	sub    $0x64,%eax
  102274:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102277:	0f 84 4b 00 00 00    	je     1022c8 <kprintf+0x118>
  10227d:	e9 f0 00 00 00       	jmp    102372 <kprintf+0x1c2>
  102282:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102285:	83 c0 90             	add    $0xffffff90,%eax
  102288:	89 c1                	mov    %eax,%ecx
  10228a:	83 e9 08             	sub    $0x8,%ecx
  10228d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102290:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  102293:	0f 87 d9 00 00 00    	ja     102372 <kprintf+0x1c2>
  102299:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10229c:	8b 0c 85 08 50 10 00 	mov    0x105008(,%eax,4),%ecx
  1022a3:	ff e1                	jmp    *%ecx
        case 's':
          s = va_arg(ap, char*);
  1022a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1022a8:	89 c1                	mov    %eax,%ecx
  1022aa:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1022b0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1022b3:	8b 00                	mov    (%eax),%eax
  1022b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  1022b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022bb:	89 04 24             	mov    %eax,(%esp)
  1022be:	e8 0d 01 00 00       	call   1023d0 <kputs>
          break;
  1022c3:	e9 cc 00 00 00       	jmp    102394 <kprintf+0x1e4>
  1022c8:	b8 0a 00 00 00       	mov    $0xa,%eax
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  1022cd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1022d0:	89 ca                	mov    %ecx,%edx
  1022d2:	81 c2 04 00 00 00    	add    $0x4,%edx
  1022d8:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1022db:	8b 09                	mov    (%ecx),%ecx
  1022dd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 10);
  1022e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1022e3:	89 0c 24             	mov    %ecx,(%esp)
  1022e6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1022ed:	00 
  1022ee:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1022f1:	e8 1a 01 00 00       	call   102410 <kputn>
          break;
  1022f6:	e9 99 00 00 00       	jmp    102394 <kprintf+0x1e4>
  1022fb:	b8 10 00 00 00       	mov    $0x10,%eax
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  102300:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102303:	89 ca                	mov    %ecx,%edx
  102305:	81 c2 04 00 00 00    	add    $0x4,%edx
  10230b:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10230e:	8b 09                	mov    (%ecx),%ecx
  102310:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 16);
  102313:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102316:	89 0c 24             	mov    %ecx,(%esp)
  102319:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  102320:	00 
  102321:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102324:	e8 e7 00 00 00       	call   102410 <kputn>
          break;
  102329:	e9 66 00 00 00       	jmp    102394 <kprintf+0x1e4>
        case 'c':
          c = va_arg(ap, int);
  10232e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102331:	89 c1                	mov    %eax,%ecx
  102333:	81 c1 04 00 00 00    	add    $0x4,%ecx
  102339:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10233c:	8b 00                	mov    (%eax),%eax
  10233e:	88 c2                	mov    %al,%dl
  102340:	88 55 ef             	mov    %dl,-0x11(%ebp)
          kputc(c);
  102343:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  102347:	89 04 24             	mov    %eax,(%esp)
  10234a:	e8 61 01 00 00       	call   1024b0 <kputc>
          break;
  10234f:	e9 40 00 00 00       	jmp    102394 <kprintf+0x1e4>
  102354:	b8 25 00 00 00       	mov    $0x25,%eax
        case '%':
          kputc('%');
  102359:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  102360:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102363:	e8 48 01 00 00       	call   1024b0 <kputc>
          break;
  102368:	e9 27 00 00 00       	jmp    102394 <kprintf+0x1e4>
        case '\0':
          goto out;
  10236d:	e9 4a 00 00 00       	jmp    1023bc <kprintf+0x20c>
  102372:	b8 25 00 00 00       	mov    $0x25,%eax
        default:
          kputc('%');
  102377:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10237e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102381:	e8 2a 01 00 00       	call   1024b0 <kputc>
          kputc(*fmt);
  102386:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102389:	0f be 00             	movsbl (%eax),%eax
  10238c:	89 04 24             	mov    %eax,(%esp)
  10238f:	e8 1c 01 00 00       	call   1024b0 <kputc>
          break;
      }
    } else {
  102394:	e9 0e 00 00 00       	jmp    1023a7 <kprintf+0x1f7>
      kputc(*fmt);
  102399:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10239c:	0f be 00             	movsbl (%eax),%eax
  10239f:	89 04 24             	mov    %eax,(%esp)
  1023a2:	e8 09 01 00 00       	call   1024b0 <kputc>
    }

    fmt++;
  1023a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023aa:	05 01 00 00 00       	add    $0x1,%eax
  1023af:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  1023b2:	e9 17 fe ff ff       	jmp    1021ce <kprintf+0x1e>
  1023b7:	e9 00 00 00 00       	jmp    1023bc <kprintf+0x20c>

out:
  va_end(ap);

  return kprintf_res;
  1023bc:	a1 28 a4 10 00       	mov    0x10a428,%eax
  1023c1:	83 c4 58             	add    $0x58,%esp
  1023c4:	5d                   	pop    %ebp
  1023c5:	c3                   	ret    
  1023c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1023cd:	00 00 00 

001023d0 <kputs>:
    x++;
    kprintf_res++;
}

static void kputs(const char* s)
{
  1023d0:	55                   	push   %ebp
  1023d1:	89 e5                	mov    %esp,%ebp
  1023d3:	83 ec 08             	sub    $0x8,%esp
  1023d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1023d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  1023dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023df:	80 38 00             	cmpb   $0x0,(%eax)
  1023e2:	0f 84 1e 00 00 00    	je     102406 <kputs+0x36>
        kputc(*s++);
  1023e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023eb:	89 c1                	mov    %eax,%ecx
  1023ed:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1023f3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1023f6:	0f be 00             	movsbl (%eax),%eax
  1023f9:	89 04 24             	mov    %eax,(%esp)
  1023fc:	e8 af 00 00 00       	call   1024b0 <kputc>
    }
  102401:	e9 d6 ff ff ff       	jmp    1023dc <kputs+0xc>
}
  102406:	83 c4 08             	add    $0x8,%esp
  102409:	5d                   	pop    %ebp
  10240a:	c3                   	ret    
  10240b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102410 <kputn>:

static void kputn(unsigned long x, int base)
{
  102410:	55                   	push   %ebp
  102411:	89 e5                	mov    %esp,%ebp
  102413:	56                   	push   %esi
  102414:	83 ec 64             	sub    $0x64,%esp
  102417:	8b 45 0c             	mov    0xc(%ebp),%eax
  10241a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10241d:	8d 15 43 52 10 00    	lea    0x105243,%edx
  102423:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102426:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  102429:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  10242c:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  102433:	0f 8e 05 00 00 00    	jle    10243e <kputn+0x2e>
        return;
  102439:	e9 5d 00 00 00       	jmp    10249b <kputn+0x8b>
  10243e:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  102441:	05 40 00 00 00       	add    $0x40,%eax
  102446:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  102449:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10244c:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  10244f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102452:	31 d2                	xor    %edx,%edx
  102454:	f7 75 f4             	divl   -0xc(%ebp)
  102457:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10245a:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  10245d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102460:	89 c2                	mov    %eax,%edx
  102462:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  102468:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10246b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10246e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102471:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102474:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102477:	89 d0                	mov    %edx,%eax
  102479:	31 d2                	xor    %edx,%edx
  10247b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10247e:	f7 f6                	div    %esi
  102480:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  102483:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10248a:	0f 85 bf ff ff ff    	jne    10244f <kputn+0x3f>
    kputs(p);
  102490:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102493:	89 04 24             	mov    %eax,(%esp)
  102496:	e8 35 ff ff ff       	call   1023d0 <kputs>
}
  10249b:	83 c4 64             	add    $0x64,%esp
  10249e:	5e                   	pop    %esi
  10249f:	5d                   	pop    %ebp
  1024a0:	c3                   	ret    
  1024a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1024a8:	0f 1f 84 00 00 00 00 
  1024af:	00 

001024b0 <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  1024b0:	55                   	push   %ebp
  1024b1:	89 e5                	mov    %esp,%ebp
  1024b3:	83 ec 08             	sub    $0x8,%esp
  1024b6:	8a 45 08             	mov    0x8(%ebp),%al
  1024b9:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((c == '\n') || (x > 79)) {
  1024bc:	0f be 4d ff          	movsbl -0x1(%ebp),%ecx
  1024c0:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  1024c6:	0f 84 10 00 00 00    	je     1024dc <kputc+0x2c>
  1024cc:	81 3d 24 a4 10 00 4f 	cmpl   $0x4f,0x10a424
  1024d3:	00 00 00 
  1024d6:	0f 8e 19 00 00 00    	jle    1024f5 <kputc+0x45>
        x = 0;
  1024dc:	c7 05 24 a4 10 00 00 	movl   $0x0,0x10a424
  1024e3:	00 00 00 
        y++;
  1024e6:	a1 20 a4 10 00       	mov    0x10a420,%eax
  1024eb:	05 01 00 00 00       	add    $0x1,%eax
  1024f0:	a3 20 a4 10 00       	mov    %eax,0x10a420
    }

    if (c == '\n') {
  1024f5:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1024f9:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1024fe:	0f 85 05 00 00 00    	jne    102509 <kputc+0x59>
        return;
  102504:	e9 ef 00 00 00       	jmp    1025f8 <kputc+0x148>
    }

    if (y > 24) {
  102509:	81 3d 20 a4 10 00 18 	cmpl   $0x18,0x10a420
  102510:	00 00 00 
  102513:	0f 8e 7e 00 00 00    	jle    102597 <kputc+0xe7>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  102519:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  102520:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  102527:	0f 8d 2c 00 00 00    	jge    102559 <kputc+0xa9>
            video[i] = video[i + 160];
  10252d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102530:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102536:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  10253d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102540:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102546:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  102549:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10254c:	05 01 00 00 00       	add    $0x1,%eax
  102551:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102554:	e9 c7 ff ff ff       	jmp    102520 <kputc+0x70>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102559:	e9 00 00 00 00       	jmp    10255e <kputc+0xae>
  10255e:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  102565:	0f 8d 1d 00 00 00    	jge    102588 <kputc+0xd8>
            video[i] = 0;
  10256b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10256e:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102574:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102578:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10257b:	05 01 00 00 00       	add    $0x1,%eax
  102580:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102583:	e9 d6 ff ff ff       	jmp    10255e <kputc+0xae>
            video[i] = 0;
        }
        y--;
  102588:	a1 20 a4 10 00       	mov    0x10a420,%eax
  10258d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  102592:	a3 20 a4 10 00       	mov    %eax,0x10a420
    }

    video[2 * (y * 80 + x)] = c;
  102597:	8a 45 ff             	mov    -0x1(%ebp),%al
  10259a:	69 0d 20 a4 10 00 50 	imul   $0x50,0x10a420,%ecx
  1025a1:	00 00 00 
  1025a4:	03 0d 24 a4 10 00    	add    0x10a424,%ecx
  1025aa:	c1 e1 01             	shl    $0x1,%ecx
  1025ad:	8b 15 88 41 10 00    	mov    0x104188,%edx
  1025b3:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = 0x07;
  1025b6:	69 0d 20 a4 10 00 50 	imul   $0x50,0x10a420,%ecx
  1025bd:	00 00 00 
  1025c0:	03 0d 24 a4 10 00    	add    0x10a424,%ecx
  1025c6:	c1 e1 01             	shl    $0x1,%ecx
  1025c9:	8b 15 88 41 10 00    	mov    0x104188,%edx
  1025cf:	c6 44 0a 01 07       	movb   $0x7,0x1(%edx,%ecx,1)

    x++;
  1025d4:	8b 0d 24 a4 10 00    	mov    0x10a424,%ecx
  1025da:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1025e0:	89 0d 24 a4 10 00    	mov    %ecx,0x10a424
    kprintf_res++;
  1025e6:	8b 0d 28 a4 10 00    	mov    0x10a428,%ecx
  1025ec:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1025f2:	89 0d 28 a4 10 00    	mov    %ecx,0x10a428
}
  1025f8:	83 c4 08             	add    $0x8,%esp
  1025fb:	5d                   	pop    %ebp
  1025fc:	c3                   	ret    
  1025fd:	66 90                	xchg   %ax,%ax
  1025ff:	90                   	nop

00102600 <memset>:
#include "vmm.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n)
{
  102600:	55                   	push   %ebp
  102601:	89 e5                	mov    %esp,%ebp
  102603:	83 ec 10             	sub    $0x10,%esp
  102606:	8b 45 10             	mov    0x10(%ebp),%eax
  102609:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10260c:	8b 55 08             	mov    0x8(%ebp),%edx
  10260f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102612:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102615:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  102618:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10261b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  10261e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102621:	89 c1                	mov    %eax,%ecx
  102623:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102629:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10262c:	3d 00 00 00 00       	cmp    $0x0,%eax
  102631:	0f 84 1a 00 00 00    	je     102651 <memset+0x51>
        *p++ = c;
  102637:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10263a:	88 c1                	mov    %al,%cl
  10263c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10263f:	89 c2                	mov    %eax,%edx
  102641:	81 c2 01 00 00 00    	add    $0x1,%edx
  102647:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10264a:	88 08                	mov    %cl,(%eax)
    }
  10264c:	e9 cd ff ff ff       	jmp    10261e <memset+0x1e>

    return buf;
  102651:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102654:	83 c4 10             	add    $0x10,%esp
  102657:	5d                   	pop    %ebp
  102658:	c3                   	ret    
  102659:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102660 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n)
{
  102660:	55                   	push   %ebp
  102661:	89 e5                	mov    %esp,%ebp
  102663:	83 ec 14             	sub    $0x14,%esp
  102666:	8b 45 10             	mov    0x10(%ebp),%eax
  102669:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10266c:	8b 55 08             	mov    0x8(%ebp),%edx
  10266f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102672:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102675:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  102678:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10267b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  10267e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102681:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  102684:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102687:	89 c1                	mov    %eax,%ecx
  102689:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10268f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102692:	3d 00 00 00 00       	cmp    $0x0,%eax
  102697:	0f 84 25 00 00 00    	je     1026c2 <memcpy+0x62>
        *d++ = *s++;
  10269d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1026a0:	89 c1                	mov    %eax,%ecx
  1026a2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1026a8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1026ab:	8a 10                	mov    (%eax),%dl
  1026ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1026b0:	89 c1                	mov    %eax,%ecx
  1026b2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1026b8:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1026bb:	88 10                	mov    %dl,(%eax)
    }
  1026bd:	e9 c2 ff ff ff       	jmp    102684 <memcpy+0x24>

    return dest;
  1026c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1026c5:	83 c4 14             	add    $0x14,%esp
  1026c8:	5d                   	pop    %ebp
  1026c9:	c3                   	ret    
  1026ca:	66 90                	xchg   %ax,%ax
  1026cc:	66 90                	xchg   %ax,%ax
  1026ce:	66 90                	xchg   %ax,%ax

001026d0 <syscall>:
#include "elf.h"
#include "vmm.h"
#include "idt.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  1026d0:	55                   	push   %ebp
  1026d1:	89 e5                	mov    %esp,%ebp
  1026d3:	83 ec 18             	sub    $0x18,%esp
  1026d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1026d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  switch (cpu->eax) {
  1026dc:	8b 00                	mov    (%eax),%eax
  1026de:	89 c1                	mov    %eax,%ecx
  1026e0:	83 e9 01             	sub    $0x1,%ecx
  1026e3:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1026e6:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1026e9:	0f 84 28 00 00 00    	je     102717 <syscall+0x47>
  1026ef:	e9 00 00 00 00       	jmp    1026f4 <syscall+0x24>
  1026f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1026f7:	85 c0                	test   %eax,%eax
  1026f9:	0f 85 33 00 00 00    	jne    102732 <syscall+0x62>
  1026ff:	e9 00 00 00 00       	jmp    102704 <syscall+0x34>
    case 0: /* free_cpu */
      cpu = schedule(cpu);
  102704:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102707:	89 04 24             	mov    %eax,(%esp)
  10270a:	e8 81 09 00 00       	call   103090 <schedule>
  10270f:	89 45 fc             	mov    %eax,-0x4(%ebp)
      break;
  102712:	e9 1b 00 00 00       	jmp    102732 <syscall+0x62>
  102717:	8d 05 68 52 10 00    	lea    0x105268,%eax

    case 1: /* putc */
        kprintf("%c", cpu->ebx);
  10271d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102720:	8b 49 04             	mov    0x4(%ecx),%ecx
  102723:	89 04 24             	mov    %eax,(%esp)
  102726:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10272a:	e8 81 fa ff ff       	call   1021b0 <kprintf>
  10272f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        break;
  }

  return cpu;
  102732:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102735:	83 c4 18             	add    $0x18,%esp
  102738:	5d                   	pop    %ebp
  102739:	c3                   	ret    
  10273a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00102740 <init_elf>:
}

void init_elf(void* image)
{
  102740:	55                   	push   %ebp
  102741:	89 e5                	mov    %esp,%ebp
  102743:	50                   	push   %eax
  102744:	8b 45 08             	mov    0x8(%ebp),%eax
  102747:	89 45 fc             	mov    %eax,-0x4(%ebp)

 

 
    //init_task((void*) header->entry);
}
  10274a:	83 c4 04             	add    $0x4,%esp
  10274d:	5d                   	pop    %ebp
  10274e:	c3                   	ret    
  10274f:	90                   	nop

00102750 <task2>:

void task2() {
  102750:	55                   	push   %ebp
  102751:	89 e5                	mov    %esp,%ebp
  102753:	83 ec 18             	sub    $0x18,%esp
  102756:	8d 05 6b 52 10 00    	lea    0x10526b,%eax
  uint32_t n = 0;
  10275c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("2222: %x \n", n);
  102763:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102766:	89 04 24             	mov    %eax,(%esp)
  102769:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10276d:	e8 3e fa ff ff       	call   1021b0 <kprintf>
  102772:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while(1) { 
    n++;
  102775:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102778:	05 01 00 00 00       	add    $0x1,%eax
  10277d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  102780:	e9 f0 ff ff ff       	jmp    102775 <task2+0x25>
  102785:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10278c:	00 00 00 00 

00102790 <task1>:
}

void task1() {
  102790:	55                   	push   %ebp
  102791:	89 e5                	mov    %esp,%ebp
  102793:	83 ec 18             	sub    $0x18,%esp
  102796:	8d 05 76 52 10 00    	lea    0x105276,%eax
  uint32_t n = 0;
  10279c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("1111: %x \n", n);
  1027a3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1027a6:	89 04 24             	mov    %eax,(%esp)
  1027a9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1027ad:	e8 fe f9 ff ff       	call   1021b0 <kprintf>
  1027b2:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while(1) { 
    n++;
  1027b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1027b8:	05 01 00 00 00       	add    $0x1,%eax
  1027bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  1027c0:	e9 f0 ff ff ff       	jmp    1027b5 <task1+0x25>
  1027c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1027cc:	00 00 00 00 

001027d0 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  1027d0:	55                   	push   %ebp
  1027d1:	89 e5                	mov    %esp,%ebp
  1027d3:	53                   	push   %ebx
  1027d4:	57                   	push   %edi
  1027d5:	56                   	push   %esi
  1027d6:	83 ec 6c             	sub    $0x6c,%esp
  1027d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1027dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  1027df:	e8 ec e7 ff ff       	call   100fd0 <vmm_init>
  1027e4:	b9 00 00 00 00       	mov    $0x0,%ecx
  1027e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  1027ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1027ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1027f2:	89 04 24             	mov    %eax,(%esp)
  1027f5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1027f9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102800:	00 
  102801:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  102804:	e8 b7 e5 ff ff       	call   100dc0 <map_address_active>
  102809:	b8 00 00 00 00       	mov    $0x0,%eax
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
  10280e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102811:	8b 49 18             	mov    0x18(%ecx),%ecx
  102814:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102817:	8b 52 18             	mov    0x18(%edx),%edx
  10281a:	89 0c 24             	mov    %ecx,(%esp)
  10281d:	89 54 24 04          	mov    %edx,0x4(%esp)
  102821:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102828:	00 
  102829:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10282c:	e8 8f e5 ff ff       	call   100dc0 <map_address_active>
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  102831:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102834:	8b 00                	mov    (%eax),%eax
  102836:	25 08 00 00 00       	and    $0x8,%eax
  10283b:	3d 00 00 00 00       	cmp    $0x0,%eax
  102840:	0f 84 1e 02 00 00    	je     102a64 <kernel_main+0x294>
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102846:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10284d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102850:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102853:	3b 41 14             	cmp    0x14(%ecx),%eax
  102856:	0f 83 fe 01 00 00    	jae    102a5a <kernel_main+0x28a>
  10285c:	8d 05 81 52 10 00    	lea    0x105281,%eax
	    kprintf("Loading mod at %x", mb_info->mi_mods_addr[i].start);
  102862:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102865:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102868:	8b 52 18             	mov    0x18(%edx),%edx
  10286b:	c1 e1 04             	shl    $0x4,%ecx
  10286e:	01 ca                	add    %ecx,%edx
  102870:	8b 0a                	mov    (%edx),%ecx
  102872:	89 04 24             	mov    %eax,(%esp)
  102875:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102879:	e8 32 f9 ff ff       	call   1021b0 <kprintf>
	    
	    uint32_t elf_mod_pdir = vmm_create_pagedir();
  10287e:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102881:	e8 ea e0 ff ff       	call   100970 <vmm_create_pagedir>
  102886:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    void* elf_mod_entry = 0;
  102889:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	    
	    vmm_activate_pagedir(elf_mod_pdir);
  102890:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102893:	89 04 24             	mov    %eax,(%esp)
  102896:	e8 15 e7 ff ff       	call   100fb0 <vmm_activate_pagedir>
  10289b:	b8 00 00 00 00       	mov    $0x0,%eax
	    
	    vmm_map_range(mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].end - mb_info->mi_mods_addr[i].start, 0);
  1028a0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1028a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1028a6:	8b 52 18             	mov    0x18(%edx),%edx
  1028a9:	c1 e1 04             	shl    $0x4,%ecx
  1028ac:	01 ca                	add    %ecx,%edx
  1028ae:	8b 0a                	mov    (%edx),%ecx
  1028b0:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1028b3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1028b6:	8b 76 18             	mov    0x18(%esi),%esi
  1028b9:	c1 e2 04             	shl    $0x4,%edx
  1028bc:	01 d6                	add    %edx,%esi
  1028be:	8b 16                	mov    (%esi),%edx
  1028c0:	8b 75 e8             	mov    -0x18(%ebp),%esi
  1028c3:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1028c6:	8b 7f 18             	mov    0x18(%edi),%edi
  1028c9:	c1 e6 04             	shl    $0x4,%esi
  1028cc:	01 f7                	add    %esi,%edi
  1028ce:	8b 77 04             	mov    0x4(%edi),%esi
  1028d1:	8b 7d e8             	mov    -0x18(%ebp),%edi
  1028d4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1028d7:	8b 5b 18             	mov    0x18(%ebx),%ebx
  1028da:	c1 e7 04             	shl    $0x4,%edi
  1028dd:	01 fb                	add    %edi,%ebx
  1028df:	8b 3b                	mov    (%ebx),%edi
  1028e1:	29 fe                	sub    %edi,%esi
  1028e3:	89 0c 24             	mov    %ecx,(%esp)
  1028e6:	89 54 24 04          	mov    %edx,0x4(%esp)
  1028ea:	89 74 24 08          	mov    %esi,0x8(%esp)
  1028ee:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1028f5:	00 
  1028f6:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1028f9:	e8 22 e4 ff ff       	call   100d20 <vmm_map_range>
      
      struct elf_header* header = mb_info->mi_mods_addr[i].start;
  1028fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102901:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102904:	8b 49 18             	mov    0x18(%ecx),%ecx
  102907:	c1 e0 04             	shl    $0x4,%eax
  10290a:	01 c1                	add    %eax,%ecx
  10290c:	8b 01                	mov    (%ecx),%eax
  10290e:	89 45 dc             	mov    %eax,-0x24(%ebp)
      struct elf_program_header* ph;

      /* Ist es ueberhaupt eine ELF-Datei? */
      if (header->magic != ELF_MAGIC) {
  102911:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102914:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  10291a:	0f 84 16 00 00 00    	je     102936 <kernel_main+0x166>
  102920:	8d 05 93 52 10 00    	lea    0x105293,%eax
        kprintf("Invalid ELF-Magic!\n");
  102926:	89 04 24             	mov    %eax,(%esp)
  102929:	e8 82 f8 ff ff       	call   1021b0 <kprintf>
        continue;
  10292e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  102931:	e9 14 01 00 00       	jmp    102a4a <kernel_main+0x27a>
      }
      
      elf_mod_entry = (void*)( header->entry );
  102936:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102939:	8b 40 18             	mov    0x18(%eax),%eax
  10293c:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  10293f:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102942:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102945:	03 41 1c             	add    0x1c(%ecx),%eax
  102948:	89 45 d8             	mov    %eax,-0x28(%ebp)
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  10294b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102952:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102955:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102958:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  10295c:	39 c8                	cmp    %ecx,%eax
  10295e:	0f 83 c6 00 00 00    	jae    102a2a <kernel_main+0x25a>
        void* dest = (void*) ph->virt_addr;
  102964:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102967:	8b 40 08             	mov    0x8(%eax),%eax
  10296a:	89 45 d0             	mov    %eax,-0x30(%ebp)
        void* src = ((char*) header) + ph->offset;
  10296d:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102970:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102973:	03 41 04             	add    0x4(%ecx),%eax
  102976:	89 45 cc             	mov    %eax,-0x34(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  102979:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10297c:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  102982:	0f 84 05 00 00 00    	je     10298d <kernel_main+0x1bd>
            continue;
  102988:	e9 82 00 00 00       	jmp    102a0f <kernel_main+0x23f>
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  10298d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  102994:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102997:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10299a:	3b 41 14             	cmp    0x14(%ecx),%eax
  10299d:	0f 83 31 00 00 00    	jae    1029d4 <kernel_main+0x204>
  1029a3:	b8 00 00 00 00       	mov    $0x0,%eax
          vmm_alloc_addr(dest + offset, 0);
  1029a8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1029ab:	03 4d c8             	add    -0x38(%ebp),%ecx
  1029ae:	89 0c 24             	mov    %ecx,(%esp)
  1029b1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1029b8:	00 
  1029b9:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1029bc:	e8 bf e4 ff ff       	call   100e80 <vmm_alloc_addr>
  1029c1:	89 45 ac             	mov    %eax,-0x54(%ebp)
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  1029c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1029c7:	05 00 10 00 00       	add    $0x1000,%eax
  1029cc:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1029cf:	e9 c0 ff ff ff       	jmp    102994 <kernel_main+0x1c4>
  1029d4:	8d 05 a7 52 10 00    	lea    0x1052a7,%eax
          vmm_alloc_addr(dest + offset, 0);
        }
        
        kprintf("Copied binary from %x to %x \n", src, dest);
  1029da:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  1029dd:	8b 55 d0             	mov    -0x30(%ebp),%edx
  1029e0:	89 04 24             	mov    %eax,(%esp)
  1029e3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029e7:	89 54 24 08          	mov    %edx,0x8(%esp)
  1029eb:	e8 c0 f7 ff ff       	call   1021b0 <kprintf>
        
        memcpy(dest, src, ph->file_size);
  1029f0:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1029f3:	8b 55 cc             	mov    -0x34(%ebp),%edx
  1029f6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1029f9:	8b 76 10             	mov    0x10(%esi),%esi
  1029fc:	89 0c 24             	mov    %ecx,(%esp)
  1029ff:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a03:	89 74 24 08          	mov    %esi,0x8(%esp)
  102a07:	89 45 a8             	mov    %eax,-0x58(%ebp)
  102a0a:	e8 51 fc ff ff       	call   102660 <memcpy>
      }
      
      elf_mod_entry = (void*)( header->entry );
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102a0f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102a12:	05 01 00 00 00       	add    $0x1,%eax
  102a17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102a1a:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102a1d:	05 20 00 00 00       	add    $0x20,%eax
  102a22:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102a25:	e9 28 ff ff ff       	jmp    102952 <kernel_main+0x182>
        kprintf("Copied binary from %x to %x \n", src, dest);
        
        memcpy(dest, src, ph->file_size);
      }
      
      vmm_activate_pagedir(kernel_init_pdir);
  102a2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102a2d:	89 04 24             	mov    %eax,(%esp)
  102a30:	e8 7b e5 ff ff       	call   100fb0 <vmm_activate_pagedir>
      
      init_task(elf_mod_pdir, elf_mod_entry);
  102a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102a38:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  102a3b:	89 04 24             	mov    %eax,(%esp)
  102a3e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a42:	e8 29 04 00 00       	call   102e70 <init_task>
  102a47:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102a4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102a4d:	05 01 00 00 00       	add    $0x1,%eax
  102a52:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102a55:	e9 f3 fd ff ff       	jmp    10284d <kernel_main+0x7d>
      vmm_activate_pagedir(kernel_init_pdir);
      
      init_task(elf_mod_pdir, elf_mod_entry);
	  }
	
	  enable_scheduling();
  102a5a:	e8 01 04 00 00       	call   102e60 <enable_scheduling>
	}
  102a5f:	e9 11 00 00 00       	jmp    102a75 <kernel_main+0x2a5>
  102a64:	8d 05 c5 52 10 00    	lea    0x1052c5,%eax
	else
	{
	  kprintf("No Modules loadable. Microkernel shutting down.\nThank you for using this pointless version of mikrOS\n");
  102a6a:	89 04 24             	mov    %eax,(%esp)
  102a6d:	e8 3e f7 ff ff       	call   1021b0 <kprintf>
  102a72:	89 45 a0             	mov    %eax,-0x60(%ebp)
	}

	while(1) {  }
  102a75:	e9 00 00 00 00       	jmp    102a7a <kernel_main+0x2aa>
  102a7a:	e9 fb ff ff ff       	jmp    102a7a <kernel_main+0x2aa>
  102a7f:	90                   	nop

00102a80 <intr_stub_0>:
  102a80:	6a 00                	push   $0x0
  102a82:	6a 00                	push   $0x0
  102a84:	e9 eb 00 00 00       	jmp    102b74 <intr_common_handler>

00102a89 <intr_stub_1>:
  102a89:	6a 00                	push   $0x0
  102a8b:	6a 01                	push   $0x1
  102a8d:	e9 e2 00 00 00       	jmp    102b74 <intr_common_handler>

00102a92 <intr_stub_2>:
  102a92:	6a 00                	push   $0x0
  102a94:	6a 02                	push   $0x2
  102a96:	e9 d9 00 00 00       	jmp    102b74 <intr_common_handler>

00102a9b <intr_stub_3>:
  102a9b:	6a 00                	push   $0x0
  102a9d:	6a 03                	push   $0x3
  102a9f:	e9 d0 00 00 00       	jmp    102b74 <intr_common_handler>

00102aa4 <intr_stub_4>:
  102aa4:	6a 00                	push   $0x0
  102aa6:	6a 04                	push   $0x4
  102aa8:	e9 c7 00 00 00       	jmp    102b74 <intr_common_handler>

00102aad <intr_stub_5>:
  102aad:	6a 00                	push   $0x0
  102aaf:	6a 05                	push   $0x5
  102ab1:	e9 be 00 00 00       	jmp    102b74 <intr_common_handler>

00102ab6 <intr_stub_6>:
  102ab6:	6a 00                	push   $0x0
  102ab8:	6a 06                	push   $0x6
  102aba:	e9 b5 00 00 00       	jmp    102b74 <intr_common_handler>

00102abf <intr_stub_7>:
  102abf:	6a 00                	push   $0x0
  102ac1:	6a 07                	push   $0x7
  102ac3:	e9 ac 00 00 00       	jmp    102b74 <intr_common_handler>

00102ac8 <intr_stub_8>:
  102ac8:	6a 08                	push   $0x8
  102aca:	e9 a5 00 00 00       	jmp    102b74 <intr_common_handler>

00102acf <intr_stub_9>:
  102acf:	6a 00                	push   $0x0
  102ad1:	6a 09                	push   $0x9
  102ad3:	e9 9c 00 00 00       	jmp    102b74 <intr_common_handler>

00102ad8 <intr_stub_10>:
  102ad8:	6a 0a                	push   $0xa
  102ada:	e9 95 00 00 00       	jmp    102b74 <intr_common_handler>

00102adf <intr_stub_11>:
  102adf:	6a 0b                	push   $0xb
  102ae1:	e9 8e 00 00 00       	jmp    102b74 <intr_common_handler>

00102ae6 <intr_stub_12>:
  102ae6:	6a 0c                	push   $0xc
  102ae8:	e9 87 00 00 00       	jmp    102b74 <intr_common_handler>

00102aed <intr_stub_13>:
  102aed:	6a 0d                	push   $0xd
  102aef:	e9 80 00 00 00       	jmp    102b74 <intr_common_handler>

00102af4 <intr_stub_14>:
  102af4:	6a 0e                	push   $0xe
  102af6:	eb 7c                	jmp    102b74 <intr_common_handler>

00102af8 <intr_stub_15>:
  102af8:	6a 00                	push   $0x0
  102afa:	6a 0f                	push   $0xf
  102afc:	eb 76                	jmp    102b74 <intr_common_handler>

00102afe <intr_stub_16>:
  102afe:	6a 00                	push   $0x0
  102b00:	6a 10                	push   $0x10
  102b02:	eb 70                	jmp    102b74 <intr_common_handler>

00102b04 <intr_stub_17>:
  102b04:	6a 11                	push   $0x11
  102b06:	eb 6c                	jmp    102b74 <intr_common_handler>

00102b08 <intr_stub_18>:
  102b08:	6a 00                	push   $0x0
  102b0a:	6a 12                	push   $0x12
  102b0c:	eb 66                	jmp    102b74 <intr_common_handler>

00102b0e <intr_stub_32>:
  102b0e:	6a 00                	push   $0x0
  102b10:	6a 20                	push   $0x20
  102b12:	eb 60                	jmp    102b74 <intr_common_handler>

00102b14 <intr_stub_33>:
  102b14:	6a 00                	push   $0x0
  102b16:	6a 21                	push   $0x21
  102b18:	eb 5a                	jmp    102b74 <intr_common_handler>

00102b1a <intr_stub_34>:
  102b1a:	6a 00                	push   $0x0
  102b1c:	6a 22                	push   $0x22
  102b1e:	eb 54                	jmp    102b74 <intr_common_handler>

00102b20 <intr_stub_35>:
  102b20:	6a 00                	push   $0x0
  102b22:	6a 23                	push   $0x23
  102b24:	eb 4e                	jmp    102b74 <intr_common_handler>

00102b26 <intr_stub_36>:
  102b26:	6a 00                	push   $0x0
  102b28:	6a 24                	push   $0x24
  102b2a:	eb 48                	jmp    102b74 <intr_common_handler>

00102b2c <intr_stub_37>:
  102b2c:	6a 00                	push   $0x0
  102b2e:	6a 25                	push   $0x25
  102b30:	eb 42                	jmp    102b74 <intr_common_handler>

00102b32 <intr_stub_38>:
  102b32:	6a 00                	push   $0x0
  102b34:	6a 26                	push   $0x26
  102b36:	eb 3c                	jmp    102b74 <intr_common_handler>

00102b38 <intr_stub_39>:
  102b38:	6a 00                	push   $0x0
  102b3a:	6a 27                	push   $0x27
  102b3c:	eb 36                	jmp    102b74 <intr_common_handler>

00102b3e <intr_stub_40>:
  102b3e:	6a 00                	push   $0x0
  102b40:	6a 28                	push   $0x28
  102b42:	eb 30                	jmp    102b74 <intr_common_handler>

00102b44 <intr_stub_41>:
  102b44:	6a 00                	push   $0x0
  102b46:	6a 29                	push   $0x29
  102b48:	eb 2a                	jmp    102b74 <intr_common_handler>

00102b4a <intr_stub_42>:
  102b4a:	6a 00                	push   $0x0
  102b4c:	6a 2a                	push   $0x2a
  102b4e:	eb 24                	jmp    102b74 <intr_common_handler>

00102b50 <intr_stub_43>:
  102b50:	6a 00                	push   $0x0
  102b52:	6a 2b                	push   $0x2b
  102b54:	eb 1e                	jmp    102b74 <intr_common_handler>

00102b56 <intr_stub_44>:
  102b56:	6a 00                	push   $0x0
  102b58:	6a 2c                	push   $0x2c
  102b5a:	eb 18                	jmp    102b74 <intr_common_handler>

00102b5c <intr_stub_45>:
  102b5c:	6a 00                	push   $0x0
  102b5e:	6a 2d                	push   $0x2d
  102b60:	eb 12                	jmp    102b74 <intr_common_handler>

00102b62 <intr_stub_46>:
  102b62:	6a 00                	push   $0x0
  102b64:	6a 2e                	push   $0x2e
  102b66:	eb 0c                	jmp    102b74 <intr_common_handler>

00102b68 <intr_stub_47>:
  102b68:	6a 00                	push   $0x0
  102b6a:	6a 2f                	push   $0x2f
  102b6c:	eb 06                	jmp    102b74 <intr_common_handler>

00102b6e <intr_stub_48>:
  102b6e:	6a 00                	push   $0x0
  102b70:	6a 30                	push   $0x30
  102b72:	eb 00                	jmp    102b74 <intr_common_handler>

00102b74 <intr_common_handler>:
  102b74:	55                   	push   %ebp
  102b75:	57                   	push   %edi
  102b76:	56                   	push   %esi
  102b77:	52                   	push   %edx
  102b78:	51                   	push   %ecx
  102b79:	53                   	push   %ebx
  102b7a:	50                   	push   %eax
  102b7b:	66 b8 10 00          	mov    $0x10,%ax
  102b7f:	66 8e d8             	mov    %ax,%ds
  102b82:	66 8e c0             	mov    %ax,%es
  102b85:	89 e0                	mov    %esp,%eax
  102b87:	bc 00 a0 10 00       	mov    $0x10a000,%esp
  102b8c:	50                   	push   %eax
  102b8d:	e8 6e f3 ff ff       	call   101f00 <handle_interrupt>
  102b92:	89 c4                	mov    %eax,%esp
  102b94:	66 b8 23 00          	mov    $0x23,%ax
  102b98:	66 8e d8             	mov    %ax,%ds
  102b9b:	66 8e c0             	mov    %ax,%es
  102b9e:	58                   	pop    %eax
  102b9f:	5b                   	pop    %ebx
  102ba0:	59                   	pop    %ecx
  102ba1:	5a                   	pop    %edx
  102ba2:	5e                   	pop    %esi
  102ba3:	5f                   	pop    %edi
  102ba4:	5d                   	pop    %ebp
  102ba5:	83 c4 08             	add    $0x8,%esp
  102ba8:	cf                   	iret   
  102ba9:	66 90                	xchg   %ax,%ax
  102bab:	66 90                	xchg   %ax,%ax
  102bad:	66 90                	xchg   %ax,%ax
  102baf:	90                   	nop

00102bb0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  102bb0:	55                   	push   %ebp
  102bb1:	89 e5                	mov    %esp,%ebp
	struct {
  102bb3:	83 ec 08             	sub    $0x8,%esp
  102bb6:	a1 2c 50 10 00       	mov    0x10502c,%eax
  102bbb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102bbe:	66 8b 0d 30 50 10 00 	mov    0x105030,%cx
  102bc5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
	asm volatile("lgdt %0" : : "m" (gdtp));
  102bc9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  102bcd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  102bd1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  102bd4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  102bd7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  102bda:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  102bdd:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  102be0:	83 c4 08             	add    $0x8,%esp
  102be3:	5d                   	pop    %ebp
  102be4:	c3                   	ret    
  102be5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102bec:	00 00 00 00 

00102bf0 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  102bf0:	55                   	push   %ebp
  102bf1:	89 e5                	mov    %esp,%ebp
  102bf3:	56                   	push   %esi
  102bf4:	83 ec 10             	sub    $0x10,%esp
  102bf7:	8b 45 14             	mov    0x14(%ebp),%eax
  102bfa:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102bfd:	8b 55 0c             	mov    0xc(%ebp),%edx
  102c00:	8b 75 08             	mov    0x8(%ebp),%esi
  102c03:	89 75 f8             	mov    %esi,-0x8(%ebp)
  102c06:	89 55 f4             	mov    %edx,-0xc(%ebp)
  102c09:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102c0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    gdt[i] = limit & 0xffffLL;
  102c0f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  102c13:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102c16:	89 04 cd 38 a4 12 00 	mov    %eax,0x12a438(,%ecx,8)
  102c1d:	c7 04 cd 3c a4 12 00 	movl   $0x0,0x12a43c(,%ecx,8)
  102c24:	00 00 00 00 
    gdt[i] |= (base & 0xffffffLL) << 16;
  102c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c2b:	25 ff ff ff 00       	and    $0xffffff,%eax
  102c30:	89 c1                	mov    %eax,%ecx
  102c32:	c1 e1 10             	shl    $0x10,%ecx
  102c35:	c1 e8 10             	shr    $0x10,%eax
  102c38:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102c3b:	8b 34 d5 3c a4 12 00 	mov    0x12a43c(,%edx,8),%esi
  102c42:	09 f0                	or     %esi,%eax
  102c44:	8b 34 d5 38 a4 12 00 	mov    0x12a438(,%edx,8),%esi
  102c4b:	09 ce                	or     %ecx,%esi
  102c4d:	89 04 d5 3c a4 12 00 	mov    %eax,0x12a43c(,%edx,8)
  102c54:	89 34 d5 38 a4 12 00 	mov    %esi,0x12a438(,%edx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  102c5b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  102c5f:	c1 e0 08             	shl    $0x8,%eax
  102c62:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102c65:	8b 14 cd 38 a4 12 00 	mov    0x12a438(,%ecx,8),%edx
  102c6c:	8b 34 cd 3c a4 12 00 	mov    0x12a43c(,%ecx,8),%esi
  102c73:	09 c6                	or     %eax,%esi
  102c75:	89 14 cd 38 a4 12 00 	mov    %edx,0x12a438(,%ecx,8)
  102c7c:	89 34 cd 3c a4 12 00 	mov    %esi,0x12a43c(,%ecx,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  102c83:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  102c87:	83 e0 0f             	and    $0xf,%eax
  102c8a:	c1 e0 10             	shl    $0x10,%eax
  102c8d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102c90:	8b 14 cd 38 a4 12 00 	mov    0x12a438(,%ecx,8),%edx
  102c97:	8b 34 cd 3c a4 12 00 	mov    0x12a43c(,%ecx,8),%esi
  102c9e:	09 c6                	or     %eax,%esi
  102ca0:	89 14 cd 38 a4 12 00 	mov    %edx,0x12a438(,%ecx,8)
  102ca7:	89 34 cd 3c a4 12 00 	mov    %esi,0x12a43c(,%ecx,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  102cae:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102cb1:	c1 e0 0c             	shl    $0xc,%eax
  102cb4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  102cb9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102cbc:	8b 14 cd 38 a4 12 00 	mov    0x12a438(,%ecx,8),%edx
  102cc3:	8b 34 cd 3c a4 12 00 	mov    0x12a43c(,%ecx,8),%esi
  102cca:	09 c6                	or     %eax,%esi
  102ccc:	89 14 cd 38 a4 12 00 	mov    %edx,0x12a438(,%ecx,8)
  102cd3:	89 34 cd 3c a4 12 00 	mov    %esi,0x12a43c(,%ecx,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  102cda:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  102cde:	c1 e0 18             	shl    $0x18,%eax
  102ce1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102ce4:	8b 14 cd 38 a4 12 00 	mov    0x12a438(,%ecx,8),%edx
  102ceb:	8b 34 cd 3c a4 12 00 	mov    0x12a43c(,%ecx,8),%esi
  102cf2:	09 c6                	or     %eax,%esi
  102cf4:	89 14 cd 38 a4 12 00 	mov    %edx,0x12a438(,%ecx,8)
  102cfb:	89 34 cd 3c a4 12 00 	mov    %esi,0x12a43c(,%ecx,8)
}
  102d02:	83 c4 10             	add    $0x10,%esp
  102d05:	5e                   	pop    %esi
  102d06:	5d                   	pop    %ebp
  102d07:	c3                   	ret    
  102d08:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  102d0f:	00 

00102d10 <init_gdt>:

void init_gdt(void)
{
  102d10:	55                   	push   %ebp
  102d11:	89 e5                	mov    %esp,%ebp
  102d13:	56                   	push   %esi
  102d14:	83 ec 54             	sub    $0x54,%esp
  102d17:	b8 00 00 00 00       	mov    $0x0,%eax
    set_gdt_entry(0, 0, 0, 0);
  102d1c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102d23:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102d2a:	00 
  102d2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102d32:	00 
  102d33:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102d3a:	00 
  102d3b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102d3e:	e8 ad fe ff ff       	call   102bf0 <set_gdt_entry>
  102d43:	b8 01 00 00 00       	mov    $0x1,%eax
  102d48:	b9 00 00 00 00       	mov    $0x0,%ecx
  102d4d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102d52:	be 9a 0c 00 00       	mov    $0xc9a,%esi
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102d57:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  102d5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102d65:	00 
  102d66:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102d6d:	00 
  102d6e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  102d75:	00 
  102d76:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102d79:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102d7c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102d7f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  102d82:	e8 69 fe ff ff       	call   102bf0 <set_gdt_entry>
  102d87:	b8 02 00 00 00       	mov    $0x2,%eax
  102d8c:	b9 00 00 00 00       	mov    $0x0,%ecx
  102d91:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102d96:	be 92 0c 00 00       	mov    $0xc92,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102d9b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  102da2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102da9:	00 
  102daa:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102db1:	00 
  102db2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  102db9:	00 
  102dba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102dbd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  102dc0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  102dc3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  102dc6:	e8 25 fe ff ff       	call   102bf0 <set_gdt_entry>
  102dcb:	b8 03 00 00 00       	mov    $0x3,%eax
  102dd0:	b9 00 00 00 00       	mov    $0x0,%ecx
  102dd5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102dda:	be fa 0c 00 00       	mov    $0xcfa,%esi
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102ddf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  102de6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ded:	00 
  102dee:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102df5:	00 
  102df6:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  102dfd:	00 
  102dfe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102e01:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  102e04:	89 55 cc             	mov    %edx,-0x34(%ebp)
  102e07:	89 75 c8             	mov    %esi,-0x38(%ebp)
  102e0a:	e8 e1 fd ff ff       	call   102bf0 <set_gdt_entry>
  102e0f:	b8 04 00 00 00       	mov    $0x4,%eax
  102e14:	b9 00 00 00 00       	mov    $0x0,%ecx
  102e19:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102e1e:	be f2 0c 00 00       	mov    $0xcf2,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102e23:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  102e2a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102e31:	00 
  102e32:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102e39:	00 
  102e3a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  102e41:	00 
  102e42:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102e45:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  102e48:	89 55 bc             	mov    %edx,-0x44(%ebp)
  102e4b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  102e4e:	e8 9d fd ff ff       	call   102bf0 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  102e53:	e8 58 fd ff ff       	call   102bb0 <load_gdt>
}
  102e58:	83 c4 54             	add    $0x54,%esp
  102e5b:	5e                   	pop    %esi
  102e5c:	5d                   	pop    %ebp
  102e5d:	c3                   	ret    
  102e5e:	66 90                	xchg   %ax,%ax

00102e60 <enable_scheduling>:
uint32_t scheduling_enabled = 0;

struct cpu_state* current_pdir_cpu = (void*) STATIC_ALLOC_VADDR + 4096 - sizeof(struct cpu_state);
uint32_t* next_pagedir = (void*) STATIC_ALLOC_VADDR + 0x2000;

void enable_scheduling(void) {
  102e60:	55                   	push   %ebp
  102e61:	89 e5                	mov    %esp,%ebp
  scheduling_enabled = 1;
  102e63:	c7 05 30 a4 10 00 01 	movl   $0x1,0x10a430
  102e6a:	00 00 00 
}
  102e6d:	5d                   	pop    %ebp
  102e6e:	c3                   	ret    
  102e6f:	90                   	nop

00102e70 <init_task>:

uint32_t init_task(uint32_t task_pagedir, void* entry)
{
  102e70:	55                   	push   %ebp
  102e71:	89 e5                	mov    %esp,%ebp
  102e73:	57                   	push   %edi
  102e74:	56                   	push   %esi
  102e75:	81 ec a0 00 00 00    	sub    $0xa0,%esp
  102e7b:	8b 45 0c             	mov    0xc(%ebp),%eax
  102e7e:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102e81:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t old_fpd = first_pagedir;
  102e87:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  102e8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t old_pagedir = vmm_get_current_pagedir();
  102e8f:	e8 cc da ff ff       	call   100960 <vmm_get_current_pagedir>
  102e94:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t task_next_pagedir = 0;    
  102e97:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  
  if(first_pagedir == 0) {
  102e9e:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  102ea5:	00 00 00 
  102ea8:	0f 85 0d 00 00 00    	jne    102ebb <init_task+0x4b>
    first_pagedir = task_pagedir;
  102eae:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102eb1:	a3 2c a4 10 00       	mov    %eax,0x10a42c
  }
  102eb6:	e9 10 00 00 00       	jmp    102ecb <init_task+0x5b>
  else
  {
    task_next_pagedir = first_pagedir;
  102ebb:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  102ec0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    first_pagedir = task_pagedir;
  102ec3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ec6:	a3 2c a4 10 00       	mov    %eax,0x10a42c
  }
  
  vmm_activate_pagedir(task_pagedir);
  102ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ece:	89 04 24             	mov    %eax,(%esp)
  102ed1:	e8 da e0 ff ff       	call   100fb0 <vmm_activate_pagedir>
  102ed6:	b8 00 00 00 00       	mov    $0x0,%eax
  
                        vmm_alloc_static(0x0000, 0);
  102edb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102ee2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ee9:	00 
  102eea:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102eed:	e8 1e e0 ff ff       	call   100f10 <vmm_alloc_static>
  102ef2:	b9 00 10 00 00       	mov    $0x1000,%ecx
  102ef7:	ba 04 00 00 00       	mov    $0x4,%edx
  uint8_t* user_stack = vmm_alloc_static(0x1000, PT_PUBLIC);
  102efc:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  102f03:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  102f0a:	00 
  102f0b:	89 45 a0             	mov    %eax,-0x60(%ebp)
  102f0e:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  102f11:	89 55 98             	mov    %edx,-0x68(%ebp)
  102f14:	e8 f7 df ff ff       	call   100f10 <vmm_alloc_static>
  102f19:	b9 00 20 00 00       	mov    $0x2000,%ecx
  102f1e:	ba 00 00 00 00       	mov    $0x0,%edx
  102f23:	89 45 e0             	mov    %eax,-0x20(%ebp)
                        vmm_alloc_static(0x2000, 0);
  102f26:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  102f2d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f34:	00 
  102f35:	89 55 94             	mov    %edx,-0x6c(%ebp)
  102f38:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  102f3b:	e8 d0 df ff ff       	call   100f10 <vmm_alloc_static>
  102f40:	b9 38 00 00 00       	mov    $0x38,%ecx
  102f45:	8d 55 a8             	lea    -0x58(%ebp),%edx
  
  *next_pagedir = task_next_pagedir;
  102f48:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  102f4b:	8b 3d 90 41 10 00    	mov    0x104190,%edi
  102f51:	89 37                	mov    %esi,(%edi)

  struct cpu_state new_state = {
  102f53:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
  102f5a:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  102f61:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  102f68:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  102f6f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  102f76:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  102f7d:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  102f84:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  102f8b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  102f92:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102f95:	89 75 cc             	mov    %esi,-0x34(%ebp)
  102f98:	c7 45 d0 1b 00 00 00 	movl   $0x1b,-0x30(%ebp)
  102f9f:	c7 45 d4 02 02 00 00 	movl   $0x202,-0x2c(%ebp)
  102fa6:	8b 75 e0             	mov    -0x20(%ebp),%esi
  102fa9:	81 c6 00 10 00 00    	add    $0x1000,%esi
  102faf:	89 75 d8             	mov    %esi,-0x28(%ebp)
  102fb2:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%ebp)
      .ss  = 0x20 | 0x03,
      
      .eflags = 0x202,
  };
      
  *current_pdir_cpu = new_state;
  102fb9:	8b 35 8c 41 10 00    	mov    0x10418c,%esi
  102fbf:	89 34 24             	mov    %esi,(%esp)
  102fc2:	89 54 24 04          	mov    %edx,0x4(%esp)
  102fc6:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  102fcd:	00 
  102fce:	89 45 8c             	mov    %eax,-0x74(%ebp)
  102fd1:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  102fd4:	e8 87 f6 ff ff       	call   102660 <memcpy>
  
  vmm_activate_pagedir(old_pagedir);
  102fd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102fdc:	89 04 24             	mov    %eax,(%esp)
  102fdf:	e8 cc df ff ff       	call   100fb0 <vmm_activate_pagedir>
  
  if(old_fpd == 0) {
  102fe4:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  102feb:	0f 85 8b 00 00 00    	jne    10307c <init_task+0x20c>
  102ff1:	b8 00 00 00 00       	mov    $0x0,%eax
    vmm_alloc_static(0x0000, 0);
  102ff6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102ffd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103004:	00 
  103005:	89 45 84             	mov    %eax,-0x7c(%ebp)
  103008:	e8 03 df ff ff       	call   100f10 <vmm_alloc_static>
  10300d:	b9 00 10 00 00       	mov    $0x1000,%ecx
  103012:	ba 04 00 00 00       	mov    $0x4,%edx
    vmm_alloc_static(0x1000, PT_PUBLIC);
  103017:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  10301e:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  103025:	00 
  103026:	89 45 80             	mov    %eax,-0x80(%ebp)
  103029:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  10302f:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  103035:	e8 d6 de ff ff       	call   100f10 <vmm_alloc_static>
  10303a:	b9 00 20 00 00       	mov    $0x2000,%ecx
  10303f:	ba 00 00 00 00       	mov    $0x0,%edx
    vmm_alloc_static(0x2000, 0);
  103044:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  10304b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103052:	00 
  103053:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  103059:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  10305f:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  103065:	e8 a6 de ff ff       	call   100f10 <vmm_alloc_static>
    *next_pagedir = 0;
  10306a:	8b 0d 90 41 10 00    	mov    0x104190,%ecx
  103070:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
  103076:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  }
  
  return task_pagedir;
  10307c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10307f:	81 c4 a0 00 00 00    	add    $0xa0,%esp
  103085:	5e                   	pop    %esi
  103086:	5f                   	pop    %edi
  103087:	5d                   	pop    %ebp
  103088:	c3                   	ret    
  103089:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00103090 <schedule>:
}

struct cpu_state* schedule(struct cpu_state* cpu)
{
  103090:	55                   	push   %ebp
  103091:	89 e5                	mov    %esp,%ebp
  103093:	83 ec 18             	sub    $0x18,%esp
  103096:	8b 45 08             	mov    0x8(%ebp),%eax
  103099:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t newCPU = 0;
  10309c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  if(first_pagedir != 0 && scheduling_enabled) {  
  1030a3:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  1030aa:	00 00 00 
  1030ad:	0f 84 41 00 00 00    	je     1030f4 <schedule+0x64>
  1030b3:	81 3d 30 a4 10 00 00 	cmpl   $0x0,0x10a430
  1030ba:	00 00 00 
  1030bd:	0f 84 31 00 00 00    	je     1030f4 <schedule+0x64>
    uint32_t next = *next_pagedir;
  1030c3:	a1 90 41 10 00       	mov    0x104190,%eax
  1030c8:	8b 00                	mov    (%eax),%eax
  1030ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next == 0) next = first_pagedir;
  1030cd:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1030d4:	0f 85 08 00 00 00    	jne    1030e2 <schedule+0x52>
  1030da:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  1030df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    newCPU = 1;            
  1030e2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    vmm_activate_pagedir(next);
  1030e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030ec:	89 04 24             	mov    %eax,(%esp)
  1030ef:	e8 bc de ff ff       	call   100fb0 <vmm_activate_pagedir>
  }
  
  if(newCPU != 0) return current_pdir_cpu;
  1030f4:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1030fb:	0f 84 0d 00 00 00    	je     10310e <schedule+0x7e>
  103101:	a1 8c 41 10 00       	mov    0x10418c,%eax
  103106:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103109:	e9 06 00 00 00       	jmp    103114 <schedule+0x84>
  return cpu;
  10310e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103111:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  103114:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103117:	83 c4 18             	add    $0x18,%esp
  10311a:	5d                   	pop    %ebp
  10311b:	c3                   	ret    
