
kernel:     Dateiformat elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <pmm_alloc>:

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100010:	56                   	push   %esi
  100011:	83 ec 10             	sub    $0x10,%esp
  100014:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10001b:	00 
  10001c:	81 7c 24 08 00 80 00 	cmpl   $0x8000,0x8(%esp)
  100023:	00 
  100024:	0f 8d c5 00 00 00    	jge    1000ef <pmm_alloc+0xdf>
		if(allocatable[i]) {
  10002a:	8b 44 24 08          	mov    0x8(%esp),%eax
  10002e:	81 3c 85 30 94 10 00 	cmpl   $0x0,0x109430(,%eax,4)
  100035:	00 00 00 00 
  100039:	0f 84 99 00 00 00    	je     1000d8 <pmm_alloc+0xc8>
			int s;
			for(s = 0; s < 32; s++) {
  10003f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100046:	00 
  100047:	81 7c 24 04 20 00 00 	cmpl   $0x20,0x4(%esp)
  10004e:	00 
  10004f:	0f 8d 7e 00 00 00    	jge    1000d3 <pmm_alloc+0xc3>
  100055:	b8 01 00 00 00       	mov    $0x1,%eax
				if(allocatable[i] & (1 << s)) {
  10005a:	8b 4c 24 08          	mov    0x8(%esp),%ecx
  10005e:	8b 0c 8d 30 94 10 00 	mov    0x109430(,%ecx,4),%ecx
  100065:	8b 54 24 04          	mov    0x4(%esp),%edx
  100069:	89 0c 24             	mov    %ecx,(%esp)
  10006c:	89 d1                	mov    %edx,%ecx
  10006e:	d3 e0                	shl    %cl,%eax
  100070:	8b 14 24             	mov    (%esp),%edx
  100073:	21 c2                	and    %eax,%edx
  100075:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  10007b:	0f 84 3b 00 00 00    	je     1000bc <pmm_alloc+0xac>
  100081:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  100086:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  10008a:	d3 e0                	shl    %cl,%eax
  10008c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100091:	8b 54 24 08          	mov    0x8(%esp),%edx
  100095:	8b 34 95 30 94 10 00 	mov    0x109430(,%edx,4),%esi
  10009c:	21 c6                	and    %eax,%esi
  10009e:	89 34 95 30 94 10 00 	mov    %esi,0x109430(,%edx,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  1000a5:	8b 44 24 08          	mov    0x8(%esp),%eax
  1000a9:	c1 e0 05             	shl    $0x5,%eax
  1000ac:	03 44 24 04          	add    0x4(%esp),%eax
  1000b0:	c1 e0 0c             	shl    $0xc,%eax
  1000b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
  1000b7:	e9 3b 00 00 00       	jmp    1000f7 <pmm_alloc+0xe7>
				}
			}
  1000bc:	e9 00 00 00 00       	jmp    1000c1 <pmm_alloc+0xb1>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  1000c1:	8b 44 24 04          	mov    0x4(%esp),%eax
  1000c5:	05 01 00 00 00       	add    $0x1,%eax
  1000ca:	89 44 24 04          	mov    %eax,0x4(%esp)
  1000ce:	e9 74 ff ff ff       	jmp    100047 <pmm_alloc+0x37>
				if(allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
  1000d3:	e9 00 00 00 00       	jmp    1000d8 <pmm_alloc+0xc8>
	}
  1000d8:	e9 00 00 00 00       	jmp    1000dd <pmm_alloc+0xcd>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  1000dd:	8b 44 24 08          	mov    0x8(%esp),%eax
  1000e1:	05 01 00 00 00       	add    $0x1,%eax
  1000e6:	89 44 24 08          	mov    %eax,0x8(%esp)
  1000ea:	e9 2d ff ff ff       	jmp    10001c <pmm_alloc+0xc>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  1000ef:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1000f6:	00 
}
  1000f7:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1000fb:	83 c4 10             	add    $0x10,%esp
  1000fe:	5e                   	pop    %esi
  1000ff:	c3                   	ret    

00100100 <pmm_free>:

void pmm_free(void* addr) {
  100100:	56                   	push   %esi
  100101:	83 ec 14             	sub    $0x14,%esp
  100104:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  100108:	b9 01 00 00 00       	mov    $0x1,%ecx
  10010d:	89 44 24 10          	mov    %eax,0x10(%esp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100111:	8b 44 24 10          	mov    0x10(%esp),%eax
  100115:	c1 e8 0c             	shr    $0xc,%eax
  100118:	89 44 24 0c          	mov    %eax,0xc(%esp)

	uintptr_t s = ptr % 32;
  10011c:	8b 44 24 0c          	mov    0xc(%esp),%eax
  100120:	25 1f 00 00 00       	and    $0x1f,%eax
  100125:	89 44 24 08          	mov    %eax,0x8(%esp)
	uintptr_t i = ptr / 32;
  100129:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10012d:	c1 e8 05             	shr    $0x5,%eax
  100130:	89 44 24 04          	mov    %eax,0x4(%esp)

	allocatable[i] |= (1 << s);
  100134:	8b 44 24 08          	mov    0x8(%esp),%eax
  100138:	89 0c 24             	mov    %ecx,(%esp)
  10013b:	89 c1                	mov    %eax,%ecx
  10013d:	8b 04 24             	mov    (%esp),%eax
  100140:	d3 e0                	shl    %cl,%eax
  100142:	8b 54 24 04          	mov    0x4(%esp),%edx
  100146:	8b 34 95 30 94 10 00 	mov    0x109430(,%edx,4),%esi
  10014d:	09 c6                	or     %eax,%esi
  10014f:	89 34 95 30 94 10 00 	mov    %esi,0x109430(,%edx,4)
}
  100156:	83 c4 14             	add    $0x14,%esp
  100159:	5e                   	pop    %esi
  10015a:	c3                   	ret    
  10015b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100160 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100160:	56                   	push   %esi
  100161:	83 ec 14             	sub    $0x14,%esp
  100164:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  100168:	b9 01 00 00 00       	mov    $0x1,%ecx
  10016d:	89 44 24 10          	mov    %eax,0x10(%esp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100171:	8b 44 24 10          	mov    0x10(%esp),%eax
  100175:	c1 e8 0c             	shr    $0xc,%eax
  100178:	89 44 24 0c          	mov    %eax,0xc(%esp)

	uintptr_t s = ptr % 32;
  10017c:	8b 44 24 0c          	mov    0xc(%esp),%eax
  100180:	25 1f 00 00 00       	and    $0x1f,%eax
  100185:	89 44 24 08          	mov    %eax,0x8(%esp)
	uintptr_t i = ptr / 32;
  100189:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10018d:	c1 e8 05             	shr    $0x5,%eax
  100190:	89 44 24 04          	mov    %eax,0x4(%esp)

	allocatable[i] &= ~(1 << s);
  100194:	8b 44 24 08          	mov    0x8(%esp),%eax
  100198:	89 0c 24             	mov    %ecx,(%esp)
  10019b:	89 c1                	mov    %eax,%ecx
  10019d:	8b 04 24             	mov    (%esp),%eax
  1001a0:	d3 e0                	shl    %cl,%eax
  1001a2:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  1001a7:	8b 54 24 04          	mov    0x4(%esp),%edx
  1001ab:	8b 34 95 30 94 10 00 	mov    0x109430(,%edx,4),%esi
  1001b2:	21 c6                	and    %eax,%esi
  1001b4:	89 34 95 30 94 10 00 	mov    %esi,0x109430(,%edx,4)
}
  1001bb:	83 c4 14             	add    $0x14,%esp
  1001be:	5e                   	pop    %esi
  1001bf:	c3                   	ret    

001001c0 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  1001c0:	55                   	push   %ebp
  1001c1:	89 e5                	mov    %esp,%ebp
  1001c3:	57                   	push   %edi
  1001c4:	56                   	push   %esi
  1001c5:	83 ec 40             	sub    $0x40,%esp
  1001c8:	8b 45 08             	mov    0x8(%ebp),%eax
  1001cb:	8d 0d 30 94 10 00    	lea    0x109430,%ecx
  1001d1:	ba 00 00 00 00       	mov    $0x0,%edx
  1001d6:	be 00 00 02 00       	mov    $0x20000,%esi
  1001db:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  1001de:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1001e1:	8b 40 30             	mov    0x30(%eax),%eax
  1001e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);
  1001e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1001ea:	8b 40 30             	mov    0x30(%eax),%eax
  1001ed:	8b 7d f4             	mov    -0xc(%ebp),%edi
  1001f0:	03 47 2c             	add    0x2c(%edi),%eax
  1001f3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	memset(allocatable, 0, sizeof(allocatable));
  1001f6:	89 0c 24             	mov    %ecx,(%esp)
  1001f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100200:	00 
  100201:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  100208:	00 
  100209:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  10020c:	89 55 d0             	mov    %edx,-0x30(%ebp)
  10020f:	e8 9c 25 00 00       	call   1027b0 <memset>
  100214:	8d 05 30 40 10 00    	lea    0x104030,%eax
  10021a:	8d 0d 30 94 10 00    	lea    0x109430,%ecx
  100220:	89 ca                	mov    %ecx,%edx
  100222:	81 c2 00 00 02 00    	add    $0x20000,%edx

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  100228:	89 04 24             	mov    %eax,(%esp)
  10022b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10022f:	89 54 24 08          	mov    %edx,0x8(%esp)
  100233:	e8 98 07 00 00       	call   1009d0 <kprintf>
  100238:	89 45 cc             	mov    %eax,-0x34(%ebp)
	 
	while (mmap < mmap_end) {
  10023b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10023e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  100241:	0f 83 60 00 00 00    	jae    1002a7 <pmm_init+0xe7>
		  if (mmap->mm_type == 1) {
  100247:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10024a:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  100251:	0f 85 40 00 00 00    	jne    100297 <pmm_init+0xd7>
		      uintptr_t addr = mmap->mm_base_addr;
  100257:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10025a:	8b 40 04             	mov    0x4(%eax),%eax
  10025d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  100260:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100263:	8b 49 0c             	mov    0xc(%ecx),%ecx
  100266:	01 c8                	add    %ecx,%eax
  100268:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	 
		      while (addr < end_addr) {
  10026b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10026e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  100271:	0f 83 1b 00 00 00    	jae    100292 <pmm_init+0xd2>
		          pmm_free((void*) addr);
  100277:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10027a:	89 04 24             	mov    %eax,(%esp)
  10027d:	e8 7e fe ff ff       	call   100100 <pmm_free>
		          addr += 0x1000;
  100282:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100285:	05 00 10 00 00       	add    $0x1000,%eax
  10028a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		      }
  10028d:	e9 d9 ff ff ff       	jmp    10026b <pmm_init+0xab>
		  }
  100292:	e9 00 00 00 00       	jmp    100297 <pmm_init+0xd7>
		  mmap++;
  100297:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10029a:	05 18 00 00 00       	add    $0x18,%eax
  10029f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	}
  1002a2:	e9 94 ff ff ff       	jmp    10023b <pmm_init+0x7b>
  1002a7:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  1002ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1002b0:	8d 05 00 a0 12 00    	lea    0x12a000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  1002b6:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  1002b9:	0f 83 1b 00 00 00    	jae    1002da <pmm_init+0x11a>
		  pmm_mark_used((void*) addr);
  1002bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1002c2:	89 04 24             	mov    %eax,(%esp)
  1002c5:	e8 96 fe ff ff       	call   100160 <pmm_mark_used>
		  addr += 0x1000;
  1002ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1002cd:	05 00 10 00 00       	add    $0x1000,%eax
  1002d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	}
  1002d5:	e9 d6 ff ff ff       	jmp    1002b0 <pmm_init+0xf0>

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  1002da:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1002dd:	8b 40 18             	mov    0x18(%eax),%eax
  1002e0:	89 45 dc             	mov    %eax,-0x24(%ebp)

  pmm_mark_used(mb_info);
  1002e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1002e6:	89 04 24             	mov    %eax,(%esp)
  1002e9:	e8 72 fe ff ff       	call   100160 <pmm_mark_used>
  pmm_mark_used(modules);
  1002ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1002f1:	89 04 24             	mov    %eax,(%esp)
  1002f4:	e8 67 fe ff ff       	call   100160 <pmm_mark_used>

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1002f9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  100300:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100303:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100306:	3b 41 14             	cmp    0x14(%ecx),%eax
  100309:	0f 83 59 00 00 00    	jae    100368 <pmm_init+0x1a8>
      addr = (uintptr_t)modules[i].start;
  10030f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100312:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  100315:	c1 e0 04             	shl    $0x4,%eax
  100318:	01 c1                	add    %eax,%ecx
  10031a:	8b 01                	mov    (%ecx),%eax
  10031c:	89 45 e0             	mov    %eax,-0x20(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  10031f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100322:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  100325:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100328:	c1 e1 04             	shl    $0x4,%ecx
  10032b:	01 ca                	add    %ecx,%edx
  10032d:	8b 4a 04             	mov    0x4(%edx),%ecx
  100330:	39 c8                	cmp    %ecx,%eax
  100332:	0f 83 1b 00 00 00    	jae    100353 <pmm_init+0x193>
          pmm_mark_used((void*) addr);
  100338:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10033b:	89 04 24             	mov    %eax,(%esp)
  10033e:	e8 1d fe ff ff       	call   100160 <pmm_mark_used>
          addr += 0x1000;
  100343:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100346:	05 00 10 00 00       	add    $0x1000,%eax
  10034b:	89 45 e0             	mov    %eax,-0x20(%ebp)
      }
  10034e:	e9 cc ff ff ff       	jmp    10031f <pmm_init+0x15f>
  }
  100353:	e9 00 00 00 00       	jmp    100358 <pmm_init+0x198>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100358:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10035b:	05 01 00 00 00       	add    $0x1,%eax
  100360:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100363:	e9 98 ff ff ff       	jmp    100300 <pmm_init+0x140>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  100368:	83 c4 40             	add    $0x40,%esp
  10036b:	5e                   	pop    %esi
  10036c:	5f                   	pop    %edi
  10036d:	5d                   	pop    %ebp
  10036e:	c3                   	ret    
  10036f:	90                   	nop

00100370 <intr_stub_0>:
  100370:	6a 00                	push   $0x0
  100372:	6a 00                	push   $0x0
  100374:	e9 eb 00 00 00       	jmp    100464 <intr_common_handler>

00100379 <intr_stub_1>:
  100379:	6a 00                	push   $0x0
  10037b:	6a 01                	push   $0x1
  10037d:	e9 e2 00 00 00       	jmp    100464 <intr_common_handler>

00100382 <intr_stub_2>:
  100382:	6a 00                	push   $0x0
  100384:	6a 02                	push   $0x2
  100386:	e9 d9 00 00 00       	jmp    100464 <intr_common_handler>

0010038b <intr_stub_3>:
  10038b:	6a 00                	push   $0x0
  10038d:	6a 03                	push   $0x3
  10038f:	e9 d0 00 00 00       	jmp    100464 <intr_common_handler>

00100394 <intr_stub_4>:
  100394:	6a 00                	push   $0x0
  100396:	6a 04                	push   $0x4
  100398:	e9 c7 00 00 00       	jmp    100464 <intr_common_handler>

0010039d <intr_stub_5>:
  10039d:	6a 00                	push   $0x0
  10039f:	6a 05                	push   $0x5
  1003a1:	e9 be 00 00 00       	jmp    100464 <intr_common_handler>

001003a6 <intr_stub_6>:
  1003a6:	6a 00                	push   $0x0
  1003a8:	6a 06                	push   $0x6
  1003aa:	e9 b5 00 00 00       	jmp    100464 <intr_common_handler>

001003af <intr_stub_7>:
  1003af:	6a 00                	push   $0x0
  1003b1:	6a 07                	push   $0x7
  1003b3:	e9 ac 00 00 00       	jmp    100464 <intr_common_handler>

001003b8 <intr_stub_8>:
  1003b8:	6a 08                	push   $0x8
  1003ba:	e9 a5 00 00 00       	jmp    100464 <intr_common_handler>

001003bf <intr_stub_9>:
  1003bf:	6a 00                	push   $0x0
  1003c1:	6a 09                	push   $0x9
  1003c3:	e9 9c 00 00 00       	jmp    100464 <intr_common_handler>

001003c8 <intr_stub_10>:
  1003c8:	6a 0a                	push   $0xa
  1003ca:	e9 95 00 00 00       	jmp    100464 <intr_common_handler>

001003cf <intr_stub_11>:
  1003cf:	6a 0b                	push   $0xb
  1003d1:	e9 8e 00 00 00       	jmp    100464 <intr_common_handler>

001003d6 <intr_stub_12>:
  1003d6:	6a 0c                	push   $0xc
  1003d8:	e9 87 00 00 00       	jmp    100464 <intr_common_handler>

001003dd <intr_stub_13>:
  1003dd:	6a 0d                	push   $0xd
  1003df:	e9 80 00 00 00       	jmp    100464 <intr_common_handler>

001003e4 <intr_stub_14>:
  1003e4:	6a 0e                	push   $0xe
  1003e6:	eb 7c                	jmp    100464 <intr_common_handler>

001003e8 <intr_stub_15>:
  1003e8:	6a 00                	push   $0x0
  1003ea:	6a 0f                	push   $0xf
  1003ec:	eb 76                	jmp    100464 <intr_common_handler>

001003ee <intr_stub_16>:
  1003ee:	6a 00                	push   $0x0
  1003f0:	6a 10                	push   $0x10
  1003f2:	eb 70                	jmp    100464 <intr_common_handler>

001003f4 <intr_stub_17>:
  1003f4:	6a 11                	push   $0x11
  1003f6:	eb 6c                	jmp    100464 <intr_common_handler>

001003f8 <intr_stub_18>:
  1003f8:	6a 00                	push   $0x0
  1003fa:	6a 12                	push   $0x12
  1003fc:	eb 66                	jmp    100464 <intr_common_handler>

001003fe <intr_stub_32>:
  1003fe:	6a 00                	push   $0x0
  100400:	6a 20                	push   $0x20
  100402:	eb 60                	jmp    100464 <intr_common_handler>

00100404 <intr_stub_33>:
  100404:	6a 00                	push   $0x0
  100406:	6a 21                	push   $0x21
  100408:	eb 5a                	jmp    100464 <intr_common_handler>

0010040a <intr_stub_34>:
  10040a:	6a 00                	push   $0x0
  10040c:	6a 22                	push   $0x22
  10040e:	eb 54                	jmp    100464 <intr_common_handler>

00100410 <intr_stub_35>:
  100410:	6a 00                	push   $0x0
  100412:	6a 23                	push   $0x23
  100414:	eb 4e                	jmp    100464 <intr_common_handler>

00100416 <intr_stub_36>:
  100416:	6a 00                	push   $0x0
  100418:	6a 24                	push   $0x24
  10041a:	eb 48                	jmp    100464 <intr_common_handler>

0010041c <intr_stub_37>:
  10041c:	6a 00                	push   $0x0
  10041e:	6a 25                	push   $0x25
  100420:	eb 42                	jmp    100464 <intr_common_handler>

00100422 <intr_stub_38>:
  100422:	6a 00                	push   $0x0
  100424:	6a 26                	push   $0x26
  100426:	eb 3c                	jmp    100464 <intr_common_handler>

00100428 <intr_stub_39>:
  100428:	6a 00                	push   $0x0
  10042a:	6a 27                	push   $0x27
  10042c:	eb 36                	jmp    100464 <intr_common_handler>

0010042e <intr_stub_40>:
  10042e:	6a 00                	push   $0x0
  100430:	6a 28                	push   $0x28
  100432:	eb 30                	jmp    100464 <intr_common_handler>

00100434 <intr_stub_41>:
  100434:	6a 00                	push   $0x0
  100436:	6a 29                	push   $0x29
  100438:	eb 2a                	jmp    100464 <intr_common_handler>

0010043a <intr_stub_42>:
  10043a:	6a 00                	push   $0x0
  10043c:	6a 2a                	push   $0x2a
  10043e:	eb 24                	jmp    100464 <intr_common_handler>

00100440 <intr_stub_43>:
  100440:	6a 00                	push   $0x0
  100442:	6a 2b                	push   $0x2b
  100444:	eb 1e                	jmp    100464 <intr_common_handler>

00100446 <intr_stub_44>:
  100446:	6a 00                	push   $0x0
  100448:	6a 2c                	push   $0x2c
  10044a:	eb 18                	jmp    100464 <intr_common_handler>

0010044c <intr_stub_45>:
  10044c:	6a 00                	push   $0x0
  10044e:	6a 2d                	push   $0x2d
  100450:	eb 12                	jmp    100464 <intr_common_handler>

00100452 <intr_stub_46>:
  100452:	6a 00                	push   $0x0
  100454:	6a 2e                	push   $0x2e
  100456:	eb 0c                	jmp    100464 <intr_common_handler>

00100458 <intr_stub_47>:
  100458:	6a 00                	push   $0x0
  10045a:	6a 2f                	push   $0x2f
  10045c:	eb 06                	jmp    100464 <intr_common_handler>

0010045e <intr_stub_48>:
  10045e:	6a 00                	push   $0x0
  100460:	6a 30                	push   $0x30
  100462:	eb 00                	jmp    100464 <intr_common_handler>

00100464 <intr_common_handler>:
  100464:	55                   	push   %ebp
  100465:	57                   	push   %edi
  100466:	56                   	push   %esi
  100467:	52                   	push   %edx
  100468:	51                   	push   %ecx
  100469:	53                   	push   %ebx
  10046a:	50                   	push   %eax
  10046b:	66 b8 10 00          	mov    $0x10,%ax
  10046f:	66 8e d8             	mov    %ax,%ds
  100472:	66 8e c0             	mov    %ax,%es
  100475:	89 e0                	mov    %esp,%eax
  100477:	bc 30 94 10 00       	mov    $0x109430,%esp
  10047c:	50                   	push   %eax
  10047d:	e8 ee 20 00 00       	call   102570 <handle_interrupt>
  100482:	89 c4                	mov    %eax,%esp
  100484:	66 b8 23 00          	mov    $0x23,%ax
  100488:	66 8e d8             	mov    %ax,%ds
  10048b:	66 8e c0             	mov    %ax,%es
  10048e:	58                   	pop    %eax
  10048f:	5b                   	pop    %ebx
  100490:	59                   	pop    %ecx
  100491:	5a                   	pop    %edx
  100492:	5e                   	pop    %esi
  100493:	5f                   	pop    %edi
  100494:	5d                   	pop    %ebp
  100495:	83 c4 08             	add    $0x8,%esp
  100498:	cf                   	iret   
  100499:	66 90                	xchg   %ax,%ax
  10049b:	66 90                	xchg   %ax,%ax
  10049d:	66 90                	xchg   %ax,%ax
  10049f:	90                   	nop

001004a0 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1004a0:	55                   	push   %ebp
  1004a1:	89 e5                	mov    %esp,%ebp
  1004a3:	83 ec 28             	sub    $0x28,%esp
  1004a6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1004aa:	66 89 c1             	mov    %ax,%cx
  1004ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1004b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1004b3:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  1004b7:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  1004bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004be:	89 c2                	mov    %eax,%edx
  1004c0:	83 ea 02             	sub    $0x2,%edx
  1004c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1004c6:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1004c9:	0f 84 4f 00 00 00    	je     10051e <translate_scancode+0x7e>
  1004cf:	e9 00 00 00 00       	jmp    1004d4 <translate_scancode+0x34>
  1004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004d7:	83 e8 01             	sub    $0x1,%eax
  1004da:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1004dd:	0f 84 28 00 00 00    	je     10050b <translate_scancode+0x6b>
  1004e3:	e9 00 00 00 00       	jmp    1004e8 <translate_scancode+0x48>
  1004e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004eb:	85 c0                	test   %eax,%eax
  1004ed:	0f 85 54 00 00 00    	jne    100547 <translate_scancode+0xa7>
  1004f3:	e9 00 00 00 00       	jmp    1004f8 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  1004f8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  1004fc:	8a 0c 05 00 30 10 00 	mov    0x103000(,%eax,1),%cl
  100503:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100506:	e9 3c 00 00 00       	jmp    100547 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10050b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10050f:	8a 0c 05 80 30 10 00 	mov    0x103080(,%eax,1),%cl
  100516:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100519:	e9 29 00 00 00       	jmp    100547 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10051e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100522:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100527:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10052a:	0f 85 0e 00 00 00    	jne    10053e <translate_scancode+0x9e>
  100530:	e9 00 00 00 00       	jmp    100535 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100535:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100539:	e9 04 00 00 00       	jmp    100542 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10053e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100542:	e9 00 00 00 00       	jmp    100547 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100547:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10054b:	3d 00 00 00 00       	cmp    $0x0,%eax
  100550:	0f 85 20 00 00 00    	jne    100576 <translate_scancode+0xd6>
  100556:	8d 05 46 40 10 00    	lea    0x104046,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  10055c:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  100560:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100563:	89 04 24             	mov    %eax,(%esp)
  100566:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10056a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10056e:	e8 5d 04 00 00       	call   1009d0 <kprintf>
  100573:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  100576:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10057a:	83 c4 28             	add    $0x28,%esp
  10057d:	5d                   	pop    %ebp
  10057e:	c3                   	ret    
  10057f:	90                   	nop

00100580 <keyboard_handler>:
}

void keyboard_handler() {    
  100580:	55                   	push   %ebp
  100581:	89 e5                	mov    %esp,%ebp
  100583:	57                   	push   %edi
  100584:	56                   	push   %esi
  100585:	83 ec 20             	sub    $0x20,%esp
  100588:	b8 60 00 00 00       	mov    $0x60,%eax
  uint8_t scancode;
  uint8_t keycode = 0;
  10058d:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
  int break_code = 0;
  100591:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  100598:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  10059f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1005a2:	e8 29 02 00 00       	call   1007d0 <inb>
  1005a7:	88 45 f7             	mov    %al,-0x9(%ebp)

  if (!init_done) {
  1005aa:	81 3d 0c 50 10 00 00 	cmpl   $0x0,0x10500c
  1005b1:	00 00 00 
  1005b4:	0f 85 05 00 00 00    	jne    1005bf <keyboard_handler+0x3f>
    return;
  1005ba:	e9 ff 01 00 00       	jmp    1007be <keyboard_handler+0x23e>
  }

  if ((scancode & 0x80) &&
  1005bf:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1005c3:	25 80 00 00 00       	and    $0x80,%eax
  1005c8:	3d 00 00 00 00       	cmp    $0x0,%eax
  1005cd:	0f 84 53 00 00 00    	je     100626 <keyboard_handler+0xa6>
  1005d3:	81 3d 04 50 10 00 00 	cmpl   $0x0,0x105004
  1005da:	00 00 00 
  1005dd:	0f 85 0f 00 00 00    	jne    1005f2 <keyboard_handler+0x72>
  1005e3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1005e7:	3d e1 00 00 00       	cmp    $0xe1,%eax
  1005ec:	0f 84 34 00 00 00    	je     100626 <keyboard_handler+0xa6>
  1005f2:	81 3d 00 50 10 00 00 	cmpl   $0x0,0x105000
  1005f9:	00 00 00 
  1005fc:	0f 85 0f 00 00 00    	jne    100611 <keyboard_handler+0x91>
  100602:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100606:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10060b:	0f 84 15 00 00 00    	je     100626 <keyboard_handler+0xa6>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  {
      break_code = 1;
  100611:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
      scancode &= ~0x80;
  100618:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10061c:	25 7f ff ff ff       	and    $0xffffff7f,%eax
  100621:	88 c1                	mov    %al,%cl
  100623:	88 4d f7             	mov    %cl,-0x9(%ebp)
  }

  if (e0_code) {
  100626:	81 3d 00 50 10 00 00 	cmpl   $0x0,0x105000
  10062d:	00 00 00 
  100630:	0f 84 63 00 00 00    	je     100699 <keyboard_handler+0x119>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  100636:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10063a:	3d 2a 00 00 00       	cmp    $0x2a,%eax
  10063f:	0f 84 0f 00 00 00    	je     100654 <keyboard_handler+0xd4>
  100645:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100649:	3d 36 00 00 00       	cmp    $0x36,%eax
  10064e:	0f 85 0f 00 00 00    	jne    100663 <keyboard_handler+0xe3>
          e0_code = 0;
  100654:	c7 05 00 50 10 00 00 	movl   $0x0,0x105000
  10065b:	00 00 00 
          return;
  10065e:	e9 5b 01 00 00       	jmp    1007be <keyboard_handler+0x23e>
  100663:	b8 01 00 00 00       	mov    $0x1,%eax
      }
      keycode = translate_scancode(1, scancode);
  100668:	8a 4d f7             	mov    -0x9(%ebp),%cl
  10066b:	0f b6 d1             	movzbl %cl,%edx
  10066e:	66 89 d6             	mov    %dx,%si
  100671:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100678:	0f b7 d6             	movzwl %si,%edx
  10067b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10067f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100682:	e8 19 fe ff ff       	call   1004a0 <translate_scancode>
  100687:	88 45 f6             	mov    %al,-0xa(%ebp)
      e0_code = 0;
  10068a:	c7 05 00 50 10 00 00 	movl   $0x0,0x105000
  100691:	00 00 00 
  } else if (e1_code == 2) {
  100694:	e9 11 01 00 00       	jmp    1007aa <keyboard_handler+0x22a>
  100699:	81 3d 04 50 10 00 02 	cmpl   $0x2,0x105004
  1006a0:	00 00 00 
  1006a3:	0f 85 53 00 00 00    	jne    1006fc <keyboard_handler+0x17c>
  1006a9:	b8 02 00 00 00       	mov    $0x2,%eax
      e1_prev |= ((uint16_t) scancode << 8);
  1006ae:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1006b1:	0f b6 d1             	movzbl %cl,%edx
  1006b4:	66 89 d6             	mov    %dx,%si
  1006b7:	0f b7 d6             	movzwl %si,%edx
  1006ba:	c1 e2 08             	shl    $0x8,%edx
  1006bd:	0f b7 3d 08 50 10 00 	movzwl 0x105008,%edi
  1006c4:	09 d7                	or     %edx,%edi
  1006c6:	66 89 fe             	mov    %di,%si
  1006c9:	66 89 35 08 50 10 00 	mov    %si,0x105008
      keycode = translate_scancode(2, e1_prev);
  1006d0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1006d7:	0f b7 15 08 50 10 00 	movzwl 0x105008,%edx
  1006de:	89 54 24 04          	mov    %edx,0x4(%esp)
  1006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1006e5:	e8 b6 fd ff ff       	call   1004a0 <translate_scancode>
  1006ea:	88 45 f6             	mov    %al,-0xa(%ebp)
      e1_code = 0;
  1006ed:	c7 05 04 50 10 00 00 	movl   $0x0,0x105004
  1006f4:	00 00 00 
  } else if (e1_code == 1) {
  1006f7:	e9 a9 00 00 00       	jmp    1007a5 <keyboard_handler+0x225>
  1006fc:	81 3d 04 50 10 00 01 	cmpl   $0x1,0x105004
  100703:	00 00 00 
  100706:	0f 85 27 00 00 00    	jne    100733 <keyboard_handler+0x1b3>
      e1_prev = scancode;
  10070c:	8a 45 f7             	mov    -0x9(%ebp),%al
  10070f:	0f b6 c8             	movzbl %al,%ecx
  100712:	66 89 ca             	mov    %cx,%dx
  100715:	66 89 15 08 50 10 00 	mov    %dx,0x105008
      e1_code++;
  10071c:	8b 0d 04 50 10 00    	mov    0x105004,%ecx
  100722:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100728:	89 0d 04 50 10 00    	mov    %ecx,0x105004
  } else if (scancode == 0xE0) {
  10072e:	e9 6d 00 00 00       	jmp    1007a0 <keyboard_handler+0x220>
  100733:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100737:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10073c:	0f 85 0f 00 00 00    	jne    100751 <keyboard_handler+0x1d1>
      e0_code = 1;
  100742:	c7 05 00 50 10 00 01 	movl   $0x1,0x105000
  100749:	00 00 00 
  } else if (scancode == 0xE1) {
  10074c:	e9 4a 00 00 00       	jmp    10079b <keyboard_handler+0x21b>
  100751:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100755:	3d e1 00 00 00       	cmp    $0xe1,%eax
  10075a:	0f 85 0f 00 00 00    	jne    10076f <keyboard_handler+0x1ef>
      e1_code = 1;
  100760:	c7 05 04 50 10 00 01 	movl   $0x1,0x105004
  100767:	00 00 00 
  } else {
  10076a:	e9 27 00 00 00       	jmp    100796 <keyboard_handler+0x216>
  10076f:	b8 00 00 00 00       	mov    $0x0,%eax
      keycode = translate_scancode(0, scancode);
  100774:	8a 4d f7             	mov    -0x9(%ebp),%cl
  100777:	0f b6 d1             	movzbl %cl,%edx
  10077a:	66 89 d6             	mov    %dx,%si
  10077d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100784:	0f b7 d6             	movzwl %si,%edx
  100787:	89 54 24 04          	mov    %edx,0x4(%esp)
  10078b:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10078e:	e8 0d fd ff ff       	call   1004a0 <translate_scancode>
  100793:	88 45 f6             	mov    %al,-0xa(%ebp)
  100796:	e9 00 00 00 00       	jmp    10079b <keyboard_handler+0x21b>
  10079b:	e9 00 00 00 00       	jmp    1007a0 <keyboard_handler+0x220>
  1007a0:	e9 00 00 00 00       	jmp    1007a5 <keyboard_handler+0x225>
  1007a5:	e9 00 00 00 00       	jmp    1007aa <keyboard_handler+0x22a>
  }

	if(keycode != 0x0) {
  1007aa:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  1007ae:	3d 00 00 00 00       	cmp    $0x0,%eax
  1007b3:	0f 84 05 00 00 00    	je     1007be <keyboard_handler+0x23e>
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
  1007b9:	e9 00 00 00 00       	jmp    1007be <keyboard_handler+0x23e>
}
  1007be:	83 c4 20             	add    $0x20,%esp
  1007c1:	5e                   	pop    %esi
  1007c2:	5f                   	pop    %edi
  1007c3:	5d                   	pop    %ebp
  1007c4:	c3                   	ret    
  1007c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1007cc:	00 00 00 00 

001007d0 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  1007d0:	50                   	push   %eax
  1007d1:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
  1007d6:	66 89 c1             	mov    %ax,%cx
  1007d9:	66 89 4c 24 02       	mov    %cx,0x2(%esp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  1007de:	66 8b 54 24 02       	mov    0x2(%esp),%dx
  1007e3:	ec                   	in     (%dx),%al
  1007e4:	88 44 24 01          	mov    %al,0x1(%esp)
	return result;
  1007e8:	0f b6 44 24 01       	movzbl 0x1(%esp),%eax
  1007ed:	5a                   	pop    %edx
  1007ee:	c3                   	ret    
  1007ef:	90                   	nop

001007f0 <getc>:

char getc() {
	char ret = buffer[0];
  1007f0:	83 ec 08             	sub    $0x8,%esp
  1007f3:	a1 10 50 10 00       	mov    0x105010,%eax
  1007f8:	8a 08                	mov    (%eax),%cl
  1007fa:	88 4c 24 07          	mov    %cl,0x7(%esp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1007fe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100805:	8b 04 24             	mov    (%esp),%eax
  100808:	3b 05 14 50 10 00    	cmp    0x105014,%eax
  10080e:	0f 8d 29 00 00 00    	jge    10083d <getc+0x4d>
		buffer[i] = buffer[i+1];	
  100814:	8b 04 24             	mov    (%esp),%eax
  100817:	8b 0d 10 50 10 00    	mov    0x105010,%ecx
  10081d:	8a 54 01 01          	mov    0x1(%ecx,%eax,1),%dl
  100821:	8b 04 24             	mov    (%esp),%eax
  100824:	8b 0d 10 50 10 00    	mov    0x105010,%ecx
  10082a:	88 14 01             	mov    %dl,(%ecx,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10082d:	8b 04 24             	mov    (%esp),%eax
  100830:	05 01 00 00 00       	add    $0x1,%eax
  100835:	89 04 24             	mov    %eax,(%esp)
  100838:	e9 c8 ff ff ff       	jmp    100805 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  10083d:	a1 14 50 10 00       	mov    0x105014,%eax
  100842:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100847:	a3 14 50 10 00       	mov    %eax,0x105014

	return ret;
  10084c:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
  100851:	83 c4 08             	add    $0x8,%esp
  100854:	c3                   	ret    
  100855:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10085c:	00 00 00 00 

00100860 <send_command>:
}

void send_command(uint8_t command) {
  100860:	55                   	push   %ebp
  100861:	89 e5                	mov    %esp,%ebp
  100863:	83 ec 18             	sub    $0x18,%esp
  100866:	8a 45 08             	mov    0x8(%ebp),%al
  100869:	88 45 ff             	mov    %al,-0x1(%ebp)
  10086c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100871:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100878:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10087b:	e8 50 ff ff ff       	call   1007d0 <inb>
  100880:	0f b6 c8             	movzbl %al,%ecx
  100883:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100889:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10088f:	0f 84 05 00 00 00    	je     10089a <send_command+0x3a>
  100895:	e9 d2 ff ff ff       	jmp    10086c <send_command+0xc>
  10089a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10089f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1008a6:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  1008aa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1008ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1008b1:	e8 0a 00 00 00       	call   1008c0 <outb>
}
  1008b6:	83 c4 18             	add    $0x18,%esp
  1008b9:	5d                   	pop    %ebp
  1008ba:	c3                   	ret    
  1008bb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001008c0 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  1008c0:	50                   	push   %eax
  1008c1:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
  1008c6:	66 89 c1             	mov    %ax,%cx
  1008c9:	8a 54 24 0c          	mov    0xc(%esp),%dl
  1008cd:	66 89 4c 24 02       	mov    %cx,0x2(%esp)
  1008d2:	88 54 24 01          	mov    %dl,0x1(%esp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1008d6:	8a 44 24 01          	mov    0x1(%esp),%al
  1008da:	66 8b 54 24 02       	mov    0x2(%esp),%dx
  1008df:	ee                   	out    %al,(%dx)
}
  1008e0:	58                   	pop    %eax
  1008e1:	c3                   	ret    
  1008e2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1008e9:	1f 84 00 00 00 00 00 

001008f0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1008f0:	55                   	push   %ebp
  1008f1:	89 e5                	mov    %esp,%ebp
  1008f3:	83 ec 28             	sub    $0x28,%esp
  1008f6:	b8 21 00 00 00       	mov    $0x21,%eax
  1008fb:	8d 0d 80 05 10 00    	lea    0x100580,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  100901:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100908:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10090c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10090f:	e8 1c 1c 00 00       	call   102530 <register_intr_handler>
  100914:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100919:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100920:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100923:	e8 a8 fe ff ff       	call   1007d0 <inb>
  100928:	0f b6 c8             	movzbl %al,%ecx
  10092b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100931:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100937:	0f 84 1c 00 00 00    	je     100959 <init_keyboard_drv+0x69>
  10093d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100942:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100949:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10094c:	e8 7f fe ff ff       	call   1007d0 <inb>
	}
  100951:	88 45 f3             	mov    %al,-0xd(%ebp)
  100954:	e9 bb ff ff ff       	jmp    100914 <init_keyboard_drv+0x24>
  100959:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10095e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100965:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100968:	e8 f3 fe ff ff       	call   100860 <send_command>

	init_done = 1;
  10096d:	c7 05 0c 50 10 00 01 	movl   $0x1,0x10500c
  100974:	00 00 00 
}
  100977:	83 c4 28             	add    $0x28,%esp
  10097a:	5d                   	pop    %ebp
  10097b:	c3                   	ret    
  10097c:	66 90                	xchg   %ax,%ax
  10097e:	66 90                	xchg   %ax,%ax

00100980 <clrscr>:
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100980:	50                   	push   %eax
  100981:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100988:	81 3c 24 a0 0f 00 00 	cmpl   $0xfa0,(%esp)
  10098f:	0f 8d 1d 00 00 00    	jge    1009b2 <clrscr+0x32>
        video[i] = 0;
  100995:	8b 04 24             	mov    (%esp),%eax
  100998:	8b 0d 00 31 10 00    	mov    0x103100,%ecx
  10099e:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1009a2:	8b 04 24             	mov    (%esp),%eax
  1009a5:	05 01 00 00 00       	add    $0x1,%eax
  1009aa:	89 04 24             	mov    %eax,(%esp)
  1009ad:	e9 d6 ff ff ff       	jmp    100988 <clrscr+0x8>
        video[i] = 0;
    }

    x = y = 0;
  1009b2:	c7 05 18 50 10 00 00 	movl   $0x0,0x105018
  1009b9:	00 00 00 
  1009bc:	c7 05 1c 50 10 00 00 	movl   $0x0,0x10501c
  1009c3:	00 00 00 
}
  1009c6:	58                   	pop    %eax
  1009c7:	c3                   	ret    
  1009c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  1009cf:	00 

001009d0 <kprintf>:

int kprintf(const char* fmt, ...)
{
  1009d0:	55                   	push   %ebp
  1009d1:	89 e5                	mov    %esp,%ebp
  1009d3:	83 ec 58             	sub    $0x58,%esp
  1009d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1009d9:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  1009dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1009df:	8d 45 0c             	lea    0xc(%ebp),%eax
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  1009e2:	89 01                	mov    %eax,(%ecx)
  kprintf_res = 0;
  1009e4:	c7 05 20 50 10 00 00 	movl   $0x0,0x105020
  1009eb:	00 00 00 
  while (*fmt) {
  1009ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1009f1:	80 38 00             	cmpb   $0x0,(%eax)
  1009f4:	0f 84 dd 01 00 00    	je     100bd7 <kprintf+0x207>
    if (*fmt == '%') {
  1009fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1009fd:	0f be 00             	movsbl (%eax),%eax
  100a00:	3d 25 00 00 00       	cmp    $0x25,%eax
  100a05:	0f 85 ae 01 00 00    	jne    100bb9 <kprintf+0x1e9>
      fmt++;
  100a0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100a0e:	89 c1                	mov    %eax,%ecx
  100a10:	41                   	inc    %ecx
  100a11:	89 4d fc             	mov    %ecx,-0x4(%ebp)
      switch (*fmt) {
  100a14:	0f be 40 01          	movsbl 0x1(%eax),%eax
  100a18:	89 c1                	mov    %eax,%ecx
  100a1a:	83 e9 24             	sub    $0x24,%ecx
  100a1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100a20:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100a23:	0f 87 15 00 00 00    	ja     100a3e <kprintf+0x6e>
  100a29:	e9 00 00 00 00       	jmp    100a2e <kprintf+0x5e>
  100a2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a31:	85 c0                	test   %eax,%eax
  100a33:	0f 84 54 01 00 00    	je     100b8d <kprintf+0x1bd>
  100a39:	e9 54 01 00 00       	jmp    100b92 <kprintf+0x1c2>
  100a3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a41:	83 e8 62             	sub    $0x62,%eax
  100a44:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100a47:	0f 87 19 00 00 00    	ja     100a66 <kprintf+0x96>
  100a4d:	e9 00 00 00 00       	jmp    100a52 <kprintf+0x82>
  100a52:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a55:	83 e8 25             	sub    $0x25,%eax
  100a58:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100a5b:	0f 84 13 01 00 00    	je     100b74 <kprintf+0x1a4>
  100a61:	e9 2c 01 00 00       	jmp    100b92 <kprintf+0x1c2>
  100a66:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a69:	83 e8 6f             	sub    $0x6f,%eax
  100a6c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100a6f:	0f 87 2d 00 00 00    	ja     100aa2 <kprintf+0xd2>
  100a75:	e9 00 00 00 00       	jmp    100a7a <kprintf+0xaa>
  100a7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a7d:	83 e8 63             	sub    $0x63,%eax
  100a80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100a83:	0f 84 c5 00 00 00    	je     100b4e <kprintf+0x17e>
  100a89:	e9 00 00 00 00       	jmp    100a8e <kprintf+0xbe>
  100a8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a91:	83 e8 64             	sub    $0x64,%eax
  100a94:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100a97:	0f 84 4b 00 00 00    	je     100ae8 <kprintf+0x118>
  100a9d:	e9 f0 00 00 00       	jmp    100b92 <kprintf+0x1c2>
  100aa2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100aa5:	83 c0 90             	add    $0xffffff90,%eax
  100aa8:	89 c1                	mov    %eax,%ecx
  100aaa:	83 e9 08             	sub    $0x8,%ecx
  100aad:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100ab0:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100ab3:	0f 87 d9 00 00 00    	ja     100b92 <kprintf+0x1c2>
  100ab9:	8b 45 cc             	mov    -0x34(%ebp),%eax
  100abc:	8b 0c 85 00 40 10 00 	mov    0x104000(,%eax,4),%ecx
  100ac3:	ff e1                	jmp    *%ecx
        case 's':
          s = va_arg(ap, char*);
  100ac5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ac8:	89 c1                	mov    %eax,%ecx
  100aca:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100ad0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100ad3:	8b 00                	mov    (%eax),%eax
  100ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  100ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100adb:	89 04 24             	mov    %eax,(%esp)
  100ade:	e8 0d 01 00 00       	call   100bf0 <kputs>
          break;
  100ae3:	e9 cc 00 00 00       	jmp    100bb4 <kprintf+0x1e4>
  100ae8:	b8 0a 00 00 00       	mov    $0xa,%eax
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  100aed:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100af0:	89 ca                	mov    %ecx,%edx
  100af2:	81 c2 04 00 00 00    	add    $0x4,%edx
  100af8:	89 55 f8             	mov    %edx,-0x8(%ebp)
  100afb:	8b 09                	mov    (%ecx),%ecx
  100afd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 10);
  100b00:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100b03:	89 0c 24             	mov    %ecx,(%esp)
  100b06:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100b0d:	00 
  100b0e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100b11:	e8 1a 01 00 00       	call   100c30 <kputn>
          break;
  100b16:	e9 99 00 00 00       	jmp    100bb4 <kprintf+0x1e4>
  100b1b:	b8 10 00 00 00       	mov    $0x10,%eax
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  100b20:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100b23:	89 ca                	mov    %ecx,%edx
  100b25:	81 c2 04 00 00 00    	add    $0x4,%edx
  100b2b:	89 55 f8             	mov    %edx,-0x8(%ebp)
  100b2e:	8b 09                	mov    (%ecx),%ecx
  100b30:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 16);
  100b33:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100b36:	89 0c 24             	mov    %ecx,(%esp)
  100b39:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  100b40:	00 
  100b41:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100b44:	e8 e7 00 00 00       	call   100c30 <kputn>
          break;
  100b49:	e9 66 00 00 00       	jmp    100bb4 <kprintf+0x1e4>
        case 'c':
          c = va_arg(ap, int);
  100b4e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100b51:	89 c1                	mov    %eax,%ecx
  100b53:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100b59:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100b5c:	8b 00                	mov    (%eax),%eax
  100b5e:	88 c2                	mov    %al,%dl
  100b60:	88 55 ef             	mov    %dl,-0x11(%ebp)
          kputc(c);
  100b63:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100b67:	89 04 24             	mov    %eax,(%esp)
  100b6a:	e8 61 01 00 00       	call   100cd0 <kputc>
          break;
  100b6f:	e9 40 00 00 00       	jmp    100bb4 <kprintf+0x1e4>
  100b74:	b8 25 00 00 00       	mov    $0x25,%eax
        case '%':
          kputc('%');
  100b79:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100b80:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100b83:	e8 48 01 00 00       	call   100cd0 <kputc>
          break;
  100b88:	e9 27 00 00 00       	jmp    100bb4 <kprintf+0x1e4>
        case '\0':
          goto out;
  100b8d:	e9 4a 00 00 00       	jmp    100bdc <kprintf+0x20c>
  100b92:	b8 25 00 00 00       	mov    $0x25,%eax
        default:
          kputc('%');
  100b97:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100b9e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100ba1:	e8 2a 01 00 00       	call   100cd0 <kputc>
          kputc(*fmt);
  100ba6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100ba9:	0f be 00             	movsbl (%eax),%eax
  100bac:	89 04 24             	mov    %eax,(%esp)
  100baf:	e8 1c 01 00 00       	call   100cd0 <kputc>
          break;
      }
    } else {
  100bb4:	e9 0e 00 00 00       	jmp    100bc7 <kprintf+0x1f7>
      kputc(*fmt);
  100bb9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100bbc:	0f be 00             	movsbl (%eax),%eax
  100bbf:	89 04 24             	mov    %eax,(%esp)
  100bc2:	e8 09 01 00 00       	call   100cd0 <kputc>
    }

    fmt++;
  100bc7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100bca:	05 01 00 00 00       	add    $0x1,%eax
  100bcf:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  100bd2:	e9 17 fe ff ff       	jmp    1009ee <kprintf+0x1e>
  100bd7:	e9 00 00 00 00       	jmp    100bdc <kprintf+0x20c>

out:
  va_end(ap);

  return kprintf_res;
  100bdc:	a1 20 50 10 00       	mov    0x105020,%eax
  100be1:	83 c4 58             	add    $0x58,%esp
  100be4:	5d                   	pop    %ebp
  100be5:	c3                   	ret    
  100be6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100bed:	00 00 00 

00100bf0 <kputs>:
    x++;
    kprintf_res++;
}

static void kputs(const char* s)
{
  100bf0:	55                   	push   %ebp
  100bf1:	89 e5                	mov    %esp,%ebp
  100bf3:	83 ec 08             	sub    $0x8,%esp
  100bf6:	8b 45 08             	mov    0x8(%ebp),%eax
  100bf9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  100bfc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100bff:	80 38 00             	cmpb   $0x0,(%eax)
  100c02:	0f 84 1e 00 00 00    	je     100c26 <kputs+0x36>
        kputc(*s++);
  100c08:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100c0b:	89 c1                	mov    %eax,%ecx
  100c0d:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100c13:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100c16:	0f be 00             	movsbl (%eax),%eax
  100c19:	89 04 24             	mov    %eax,(%esp)
  100c1c:	e8 af 00 00 00       	call   100cd0 <kputc>
    }
  100c21:	e9 d6 ff ff ff       	jmp    100bfc <kputs+0xc>
}
  100c26:	83 c4 08             	add    $0x8,%esp
  100c29:	5d                   	pop    %ebp
  100c2a:	c3                   	ret    
  100c2b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100c30 <kputn>:

static void kputn(unsigned long x, int base)
{
  100c30:	55                   	push   %ebp
  100c31:	89 e5                	mov    %esp,%ebp
  100c33:	53                   	push   %ebx
  100c34:	56                   	push   %esi
  100c35:	83 ec 60             	sub    $0x60,%esp
  100c38:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c3b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100c3e:	8d 15 6c 40 10 00    	lea    0x10406c,%edx
  100c44:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  100c47:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  100c4a:	89 55 a8             	mov    %edx,-0x58(%ebp)
    char* p;

    if (base > 36) {
  100c4d:	81 7d f0 24 00 00 00 	cmpl   $0x24,-0x10(%ebp)
  100c54:	0f 8e 05 00 00 00    	jle    100c5f <kputn+0x2f>
        return;
  100c5a:	e9 62 00 00 00       	jmp    100cc1 <kputn+0x91>
  100c5f:	8d 45 af             	lea    -0x51(%ebp),%eax
    }

    p = buf + 64;
  100c62:	05 40 00 00 00       	add    $0x40,%eax
  100c67:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *p = '\0';
  100c6a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  100c6d:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  100c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c73:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100c76:	8b 55 a8             	mov    -0x58(%ebp),%edx
  100c79:	31 f6                	xor    %esi,%esi
  100c7b:	89 55 a0             	mov    %edx,-0x60(%ebp)
  100c7e:	89 f2                	mov    %esi,%edx
  100c80:	f7 f1                	div    %ecx
  100c82:	8b 45 a0             	mov    -0x60(%ebp),%eax
  100c85:	8a 1c 10             	mov    (%eax,%edx,1),%bl
  100c88:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  100c8b:	89 c1                	mov    %eax,%ecx
  100c8d:	49                   	dec    %ecx
  100c8e:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  100c91:	88 58 ff             	mov    %bl,-0x1(%eax)
        x /= base;
  100c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100c97:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100c9a:	89 45 9c             	mov    %eax,-0x64(%ebp)
  100c9d:	89 c8                	mov    %ecx,%eax
  100c9f:	89 f2                	mov    %esi,%edx
  100ca1:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  100ca4:	f7 f1                	div    %ecx
  100ca6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    } while (x);
  100ca9:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  100cb0:	0f 85 ba ff ff ff    	jne    100c70 <kputn+0x40>
    kputs(p);
  100cb6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  100cb9:	89 04 24             	mov    %eax,(%esp)
  100cbc:	e8 2f ff ff ff       	call   100bf0 <kputs>
}
  100cc1:	83 c4 60             	add    $0x60,%esp
  100cc4:	5e                   	pop    %esi
  100cc5:	5b                   	pop    %ebx
  100cc6:	5d                   	pop    %ebp
  100cc7:	c3                   	ret    
  100cc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100ccf:	00 

00100cd0 <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  100cd0:	83 ec 08             	sub    $0x8,%esp
  100cd3:	8a 44 24 0c          	mov    0xc(%esp),%al
  100cd7:	88 44 24 07          	mov    %al,0x7(%esp)
    if ((c == '\n') || (x > 79)) {
  100cdb:	0f be 4c 24 07       	movsbl 0x7(%esp),%ecx
  100ce0:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  100ce6:	0f 84 10 00 00 00    	je     100cfc <kputc+0x2c>
  100cec:	81 3d 1c 50 10 00 4f 	cmpl   $0x4f,0x10501c
  100cf3:	00 00 00 
  100cf6:	0f 8e 19 00 00 00    	jle    100d15 <kputc+0x45>
        x = 0;
  100cfc:	c7 05 1c 50 10 00 00 	movl   $0x0,0x10501c
  100d03:	00 00 00 
        y++;
  100d06:	a1 18 50 10 00       	mov    0x105018,%eax
  100d0b:	05 01 00 00 00       	add    $0x1,%eax
  100d10:	a3 18 50 10 00       	mov    %eax,0x105018
    }

    if (c == '\n') {
  100d15:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
  100d1a:	3d 0a 00 00 00       	cmp    $0xa,%eax
  100d1f:	0f 85 05 00 00 00    	jne    100d2a <kputc+0x5a>
        return;
  100d25:	e9 f0 00 00 00       	jmp    100e1a <kputc+0x14a>
    }

    if (y > 24) {
  100d2a:	81 3d 18 50 10 00 18 	cmpl   $0x18,0x105018
  100d31:	00 00 00 
  100d34:	0f 8e 7e 00 00 00    	jle    100db8 <kputc+0xe8>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100d3a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d41:	81 3c 24 00 0f 00 00 	cmpl   $0xf00,(%esp)
  100d48:	0f 8d 2c 00 00 00    	jge    100d7a <kputc+0xaa>
            video[i] = video[i + 160];
  100d4e:	8b 04 24             	mov    (%esp),%eax
  100d51:	8b 0d 00 31 10 00    	mov    0x103100,%ecx
  100d57:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  100d5e:	8b 04 24             	mov    (%esp),%eax
  100d61:	8b 0d 00 31 10 00    	mov    0x103100,%ecx
  100d67:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100d6a:	8b 04 24             	mov    (%esp),%eax
  100d6d:	05 01 00 00 00       	add    $0x1,%eax
  100d72:	89 04 24             	mov    %eax,(%esp)
  100d75:	e9 c7 ff ff ff       	jmp    100d41 <kputc+0x71>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100d7a:	e9 00 00 00 00       	jmp    100d7f <kputc+0xaf>
  100d7f:	81 3c 24 a0 0f 00 00 	cmpl   $0xfa0,(%esp)
  100d86:	0f 8d 1d 00 00 00    	jge    100da9 <kputc+0xd9>
            video[i] = 0;
  100d8c:	8b 04 24             	mov    (%esp),%eax
  100d8f:	8b 0d 00 31 10 00    	mov    0x103100,%ecx
  100d95:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100d99:	8b 04 24             	mov    (%esp),%eax
  100d9c:	05 01 00 00 00       	add    $0x1,%eax
  100da1:	89 04 24             	mov    %eax,(%esp)
  100da4:	e9 d6 ff ff ff       	jmp    100d7f <kputc+0xaf>
            video[i] = 0;
        }
        y--;
  100da9:	a1 18 50 10 00       	mov    0x105018,%eax
  100dae:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100db3:	a3 18 50 10 00       	mov    %eax,0x105018
    }

    video[2 * (y * 80 + x)] = c;
  100db8:	8a 44 24 07          	mov    0x7(%esp),%al
  100dbc:	69 0d 18 50 10 00 50 	imul   $0x50,0x105018,%ecx
  100dc3:	00 00 00 
  100dc6:	03 0d 1c 50 10 00    	add    0x10501c,%ecx
  100dcc:	c1 e1 01             	shl    $0x1,%ecx
  100dcf:	8b 15 00 31 10 00    	mov    0x103100,%edx
  100dd5:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = 0x07;
  100dd8:	69 0d 18 50 10 00 50 	imul   $0x50,0x105018,%ecx
  100ddf:	00 00 00 
  100de2:	03 0d 1c 50 10 00    	add    0x10501c,%ecx
  100de8:	c1 e1 01             	shl    $0x1,%ecx
  100deb:	8b 15 00 31 10 00    	mov    0x103100,%edx
  100df1:	c6 44 0a 01 07       	movb   $0x7,0x1(%edx,%ecx,1)

    x++;
  100df6:	8b 0d 1c 50 10 00    	mov    0x10501c,%ecx
  100dfc:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100e02:	89 0d 1c 50 10 00    	mov    %ecx,0x10501c
    kprintf_res++;
  100e08:	8b 0d 20 50 10 00    	mov    0x105020,%ecx
  100e0e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100e14:	89 0d 20 50 10 00    	mov    %ecx,0x105020
}
  100e1a:	83 c4 08             	add    $0x8,%esp
  100e1d:	c3                   	ret    
  100e1e:	66 90                	xchg   %ax,%ax

00100e20 <syscall>:
#include "stdlib.h"
#include "elf.h"
#include "vmm.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  100e20:	55                   	push   %ebp
  100e21:	89 e5                	mov    %esp,%ebp
  100e23:	83 ec 18             	sub    $0x18,%esp
  100e26:	8b 45 08             	mov    0x8(%ebp),%eax
  100e29:	89 45 fc             	mov    %eax,-0x4(%ebp)
    switch (cpu->eax) {
  100e2c:	8b 00                	mov    (%eax),%eax
  100e2e:	85 c0                	test   %eax,%eax
  100e30:	0f 85 20 00 00 00    	jne    100e56 <syscall+0x36>
  100e36:	e9 00 00 00 00       	jmp    100e3b <syscall+0x1b>
  100e3b:	8d 05 91 40 10 00    	lea    0x104091,%eax
        case 0: /* putc */
            kprintf("%c", cpu->ebx);
  100e41:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100e44:	8b 49 04             	mov    0x4(%ecx),%ecx
  100e47:	89 04 24             	mov    %eax,(%esp)
  100e4a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100e4e:	e8 7d fb ff ff       	call   1009d0 <kprintf>
  100e53:	89 45 f8             	mov    %eax,-0x8(%ebp)
            break;
    }
 
    return cpu;
  100e56:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e59:	83 c4 18             	add    $0x18,%esp
  100e5c:	5d                   	pop    %ebp
  100e5d:	c3                   	ret    
  100e5e:	66 90                	xchg   %ax,%ax

00100e60 <init_elf>:
}

void init_elf(void* image)
{
  100e60:	55                   	push   %ebp
  100e61:	89 e5                	mov    %esp,%ebp
  100e63:	83 ec 38             	sub    $0x38,%esp
  100e66:	8b 45 08             	mov    0x8(%ebp),%eax
  100e69:	89 45 fc             	mov    %eax,-0x4(%ebp)
    /*
     * FIXME Wir muessen eigentlich die Laenge vom Image pruefen, damit wir bei
     * korrupten ELF-Dateien nicht ueber das Dateiende hinauslesen.
     */
 
    struct elf_header* header = image;
  100e6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e6f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct elf_program_header* ph;
    int i;
 
    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  100e72:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e75:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  100e7b:	0f 84 16 00 00 00    	je     100e97 <init_elf+0x37>
  100e81:	8d 05 94 40 10 00    	lea    0x104094,%eax
        kprintf("Keine gueltige ELF-Magic!\n");
  100e87:	89 04 24             	mov    %eax,(%esp)
  100e8a:	e8 41 fb ff ff       	call   1009d0 <kprintf>
        return;
  100e8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100e92:	e9 aa 00 00 00       	jmp    100f41 <init_elf+0xe1>
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
  100e97:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e9a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100e9d:	03 41 1c             	add    0x1c(%ecx),%eax
  100ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100ea3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100eaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100ead:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100eb0:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  100eb4:	39 c8                	cmp    %ecx,%eax
  100eb6:	0f 8d 85 00 00 00    	jge    100f41 <init_elf+0xe1>
        void* dest = (void*) ph->virt_addr;
  100ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ebf:	8b 40 08             	mov    0x8(%eax),%eax
  100ec2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        void* src = ((char*) image) + ph->offset;
  100ec5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100ec8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100ecb:	03 41 04             	add    0x4(%ecx),%eax
  100ece:	89 45 e8             	mov    %eax,-0x18(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  100ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ed4:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  100eda:	0f 84 05 00 00 00    	je     100ee5 <init_elf+0x85>
            continue;
  100ee0:	e9 41 00 00 00       	jmp    100f26 <init_elf+0xc6>
  100ee5:	b8 00 00 00 00       	mov    $0x0,%eax
        }
 
        memset(dest, 0, ph->mem_size);
  100eea:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100eed:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100ef0:	8b 52 14             	mov    0x14(%edx),%edx
  100ef3:	89 0c 24             	mov    %ecx,(%esp)
  100ef6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100efd:	00 
  100efe:	89 54 24 08          	mov    %edx,0x8(%esp)
  100f02:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100f05:	e8 a6 18 00 00       	call   1027b0 <memset>
        memcpy(dest, src, ph->file_size);
  100f0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100f0d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100f10:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100f13:	8b 52 10             	mov    0x10(%edx),%edx
  100f16:	89 04 24             	mov    %eax,(%esp)
  100f19:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f1d:	89 54 24 08          	mov    %edx,0x8(%esp)
  100f21:	e8 ea 18 00 00       	call   102810 <memcpy>
        kprintf("Keine gueltige ELF-Magic!\n");
        return;
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100f26:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f29:	05 01 00 00 00       	add    $0x1,%eax
  100f2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100f34:	05 20 00 00 00       	add    $0x20,%eax
  100f39:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100f3c:	e9 69 ff ff ff       	jmp    100eaa <init_elf+0x4a>
        memset(dest, 0, ph->mem_size);
        memcpy(dest, src, ph->file_size);
    }
 
    //init_task((void*) header->entry);
}
  100f41:	83 c4 38             	add    $0x38,%esp
  100f44:	5d                   	pop    %ebp
  100f45:	c3                   	ret    
  100f46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100f4d:	00 00 00 

00100f50 <task2>:

void task2() {
  100f50:	55                   	push   %ebp
  100f51:	89 e5                	mov    %esp,%ebp
  uint32_t n = 0;
  100f53:	83 ec 18             	sub    $0x18,%esp
  100f56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100f5d:	8d 05 af 40 10 00    	lea    0x1040af,%eax

  while(1) { 
    n++;
  100f63:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100f66:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100f6c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
    kprintf("1111: %x \n", n);
  100f6f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100f72:	89 04 24             	mov    %eax,(%esp)
  100f75:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f79:	e8 52 fa ff ff       	call   1009d0 <kprintf>
  }
  100f7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100f81:	e9 d7 ff ff ff       	jmp    100f5d <task2+0xd>
  100f86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100f8d:	00 00 00 

00100f90 <task1>:
}

void task1() {
  100f90:	55                   	push   %ebp
  100f91:	89 e5                	mov    %esp,%ebp


  asm("cli; hlt;");
  100f93:	83 ec 18             	sub    $0x18,%esp
  100f96:	fa                   	cli    
  100f97:	f4                   	hlt    
  uint32_t n = 0;
  100f98:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100f9f:	8d 05 ba 40 10 00    	lea    0x1040ba,%eax
  
  while(1) { 
    n++;
  100fa5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100fa8:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100fae:	89 4d fc             	mov    %ecx,-0x4(%ebp)
    kprintf("2222: %x \n", n);
  100fb1:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100fb4:	89 04 24             	mov    %eax,(%esp)
  100fb7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100fbb:	e8 10 fa ff ff       	call   1009d0 <kprintf>
  }
  100fc0:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100fc3:	e9 d7 ff ff ff       	jmp    100f9f <task1+0xf>
  100fc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100fcf:	00 

00100fd0 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  100fd0:	55                   	push   %ebp
  100fd1:	89 e5                	mov    %esp,%ebp
  100fd3:	83 ec 18             	sub    $0x18,%esp
  100fd6:	8b 45 08             	mov    0x8(%ebp),%eax
  100fd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	vmm_init();
  100fdc:	e8 9f 06 00 00       	call   101680 <vmm_init>
	
	init_task(vmm_create_pagedir(), task1);
  100fe1:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100fe4:	e8 27 03 00 00       	call   101310 <vmm_create_pagedir>
  100fe9:	8d 0d 90 0f 10 00    	lea    0x100f90,%ecx
  100fef:	89 04 24             	mov    %eax,(%esp)
  100ff2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100ff6:	e8 a5 18 00 00       	call   1028a0 <init_task>
	init_task(vmm_create_pagedir(), task2);
  100ffb:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100ffe:	e8 0d 03 00 00       	call   101310 <vmm_create_pagedir>
  101003:	8d 0d 50 0f 10 00    	lea    0x100f50,%ecx
  101009:	89 04 24             	mov    %eax,(%esp)
  10100c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101010:	e8 8b 18 00 00       	call   1028a0 <init_task>
	enable_scheduling();
  101015:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101018:	e8 73 18 00 00       	call   102890 <enable_scheduling>

	while(1) {  }
  10101d:	e9 fb ff ff ff       	jmp    10101d <kernel_main+0x4d>
  101022:	66 90                	xchg   %ax,%ax
  101024:	66 90                	xchg   %ax,%ax
  101026:	66 90                	xchg   %ax,%ax
  101028:	66 90                	xchg   %ax,%ax
  10102a:	66 90                	xchg   %ax,%ax
  10102c:	66 90                	xchg   %ax,%ax
  10102e:	66 90                	xchg   %ax,%ax

00101030 <load_gdt>:
		  uint16_t limit;
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
  101030:	83 ec 0c             	sub    $0xc,%esp
  101033:	a1 24 40 10 00       	mov    0x104024,%eax
  101038:	89 04 24             	mov    %eax,(%esp)
  10103b:	66 8b 0d 28 40 10 00 	mov    0x104028,%cx
  101042:	66 89 4c 24 04       	mov    %cx,0x4(%esp)
	asm volatile("lgdt %0" : : "m" (gdtp));
  101047:	0f 01 14 24          	lgdtl  (%esp)

	asm ("mov $0x10, %ax");
  10104b:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  10104f:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  101052:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  101055:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  101058:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  10105b:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  10105e:	83 c4 0c             	add    $0xc,%esp
  101061:	c3                   	ret    
  101062:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101069:	1f 84 00 00 00 00 00 

00101070 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  101070:	53                   	push   %ebx
  101071:	57                   	push   %edi
  101072:	56                   	push   %esi
  101073:	83 ec 10             	sub    $0x10,%esp
  101076:	8b 44 24 2c          	mov    0x2c(%esp),%eax
  10107a:	8b 4c 24 28          	mov    0x28(%esp),%ecx
  10107e:	8b 54 24 24          	mov    0x24(%esp),%edx
  101082:	8b 74 24 20          	mov    0x20(%esp),%esi
  101086:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10108a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10108e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101092:	89 04 24             	mov    %eax,(%esp)
    gdt[i] = limit & 0xffffLL;
  101095:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101099:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  10109d:	66 89 cf             	mov    %cx,%di
  1010a0:	0f b7 cf             	movzwl %di,%ecx
  1010a3:	89 0c c5 30 94 12 00 	mov    %ecx,0x129430(,%eax,8)
  1010aa:	c7 04 c5 34 94 12 00 	movl   $0x0,0x129434(,%eax,8)
  1010b1:	00 00 00 00 
    gdt[i] |= (base & 0xffffffLL) << 16;
  1010b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1010b9:	8b 0c c5 34 94 12 00 	mov    0x129434(,%eax,8),%ecx
  1010c0:	8b 54 24 08          	mov    0x8(%esp),%edx
  1010c4:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
  1010ca:	89 d6                	mov    %edx,%esi
  1010cc:	c1 ee 10             	shr    $0x10,%esi
  1010cf:	09 ce                	or     %ecx,%esi
  1010d1:	8b 0c c5 30 94 12 00 	mov    0x129430(,%eax,8),%ecx
  1010d8:	89 34 c5 34 94 12 00 	mov    %esi,0x129434(,%eax,8)
  1010df:	c1 e2 10             	shl    $0x10,%edx
  1010e2:	09 d1                	or     %edx,%ecx
  1010e4:	89 0c c5 30 94 12 00 	mov    %ecx,0x129430(,%eax,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  1010eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1010ef:	8b 0c c5 34 94 12 00 	mov    0x129434(,%eax,8),%ecx
  1010f6:	8b 14 c5 30 94 12 00 	mov    0x129430(,%eax,8),%edx
  1010fd:	8b 34 24             	mov    (%esp),%esi
  101100:	89 14 c5 30 94 12 00 	mov    %edx,0x129430(,%eax,8)
  101107:	89 f2                	mov    %esi,%edx
  101109:	88 d3                	mov    %dl,%bl
  10110b:	0f b6 d3             	movzbl %bl,%edx
  10110e:	c1 e2 08             	shl    $0x8,%edx
  101111:	09 d1                	or     %edx,%ecx
  101113:	89 0c c5 34 94 12 00 	mov    %ecx,0x129434(,%eax,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  10111a:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10111e:	8b 0c c5 34 94 12 00 	mov    0x129434(,%eax,8),%ecx
  101125:	8b 14 c5 30 94 12 00 	mov    0x129430(,%eax,8),%edx
  10112c:	0f b7 74 24 06       	movzwl 0x6(%esp),%esi
  101131:	89 14 c5 30 94 12 00 	mov    %edx,0x129430(,%eax,8)
  101138:	83 e6 0f             	and    $0xf,%esi
  10113b:	c1 e6 10             	shl    $0x10,%esi
  10113e:	09 f1                	or     %esi,%ecx
  101140:	89 0c c5 34 94 12 00 	mov    %ecx,0x129434(,%eax,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  101147:	8b 04 24             	mov    (%esp),%eax
  10114a:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  10114e:	8b 14 cd 34 94 12 00 	mov    0x129434(,%ecx,8),%edx
  101155:	8b 34 cd 30 94 12 00 	mov    0x129430(,%ecx,8),%esi
  10115c:	89 34 cd 30 94 12 00 	mov    %esi,0x129430(,%ecx,8)
  101163:	c1 e0 0c             	shl    $0xc,%eax
  101166:	25 00 00 f0 0f       	and    $0xff00000,%eax
  10116b:	09 c2                	or     %eax,%edx
  10116d:	89 14 cd 34 94 12 00 	mov    %edx,0x129434(,%ecx,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  101174:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101178:	8b 0c c5 34 94 12 00 	mov    0x129434(,%eax,8),%ecx
  10117f:	8b 14 c5 30 94 12 00 	mov    0x129430(,%eax,8),%edx
  101186:	0f b6 74 24 0b       	movzbl 0xb(%esp),%esi
  10118b:	89 14 c5 30 94 12 00 	mov    %edx,0x129430(,%eax,8)
  101192:	c1 e6 18             	shl    $0x18,%esi
  101195:	09 f1                	or     %esi,%ecx
  101197:	89 0c c5 34 94 12 00 	mov    %ecx,0x129434(,%eax,8)
}
  10119e:	83 c4 10             	add    $0x10,%esp
  1011a1:	5e                   	pop    %esi
  1011a2:	5f                   	pop    %edi
  1011a3:	5b                   	pop    %ebx
  1011a4:	c3                   	ret    
  1011a5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1011ac:	00 00 00 00 

001011b0 <init_gdt>:

void init_gdt(void)
{
  1011b0:	55                   	push   %ebp
  1011b1:	89 e5                	mov    %esp,%ebp
  1011b3:	56                   	push   %esi
  1011b4:	83 ec 54             	sub    $0x54,%esp
  1011b7:	b8 00 00 00 00       	mov    $0x0,%eax
    set_gdt_entry(0, 0, 0, 0);
  1011bc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1011c3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1011ca:	00 
  1011cb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1011d2:	00 
  1011d3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1011da:	00 
  1011db:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1011de:	e8 8d fe ff ff       	call   101070 <set_gdt_entry>
  1011e3:	b8 01 00 00 00       	mov    $0x1,%eax
  1011e8:	b9 00 00 00 00       	mov    $0x0,%ecx
  1011ed:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1011f2:	be 9a 0c 00 00       	mov    $0xc9a,%esi
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1011f7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1011fe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101205:	00 
  101206:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  10120d:	00 
  10120e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  101215:	00 
  101216:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101219:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10121c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10121f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  101222:	e8 49 fe ff ff       	call   101070 <set_gdt_entry>
  101227:	b8 02 00 00 00       	mov    $0x2,%eax
  10122c:	b9 00 00 00 00       	mov    $0x0,%ecx
  101231:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  101236:	be 92 0c 00 00       	mov    $0xc92,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10123b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101242:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101249:	00 
  10124a:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101251:	00 
  101252:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  101259:	00 
  10125a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10125d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  101260:	89 55 dc             	mov    %edx,-0x24(%ebp)
  101263:	89 75 d8             	mov    %esi,-0x28(%ebp)
  101266:	e8 05 fe ff ff       	call   101070 <set_gdt_entry>
  10126b:	b8 03 00 00 00       	mov    $0x3,%eax
  101270:	b9 00 00 00 00       	mov    $0x0,%ecx
  101275:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10127a:	be fa 0c 00 00       	mov    $0xcfa,%esi
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10127f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  101286:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10128d:	00 
  10128e:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101295:	00 
  101296:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10129d:	00 
  10129e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1012a1:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  1012a4:	89 55 cc             	mov    %edx,-0x34(%ebp)
  1012a7:	89 75 c8             	mov    %esi,-0x38(%ebp)
  1012aa:	e8 c1 fd ff ff       	call   101070 <set_gdt_entry>
  1012af:	b8 04 00 00 00       	mov    $0x4,%eax
  1012b4:	b9 00 00 00 00       	mov    $0x0,%ecx
  1012b9:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1012be:	be f2 0c 00 00       	mov    $0xcf2,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1012c3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1012ca:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1012d1:	00 
  1012d2:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1012d9:	00 
  1012da:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  1012e1:	00 
  1012e2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1012e5:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  1012e8:	89 55 bc             	mov    %edx,-0x44(%ebp)
  1012eb:	89 75 b8             	mov    %esi,-0x48(%ebp)
  1012ee:	e8 7d fd ff ff       	call   101070 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  1012f3:	e8 38 fd ff ff       	call   101030 <load_gdt>
}
  1012f8:	83 c4 54             	add    $0x54,%esp
  1012fb:	5e                   	pop    %esi
  1012fc:	5d                   	pop    %ebp
  1012fd:	c3                   	ret    
  1012fe:	66 90                	xchg   %ax,%ax

00101300 <vmm_get_current_pagedir>:
struct vmm_context* active_context = (void*)(ACTIVE_CONTEXT_VADDR + 0x400000);

uint32_t active_pagedir = 0;

uint32_t vmm_get_current_pagedir(void) {
  return active_pagedir;
  101300:	a1 24 50 10 00       	mov    0x105024,%eax
  101305:	c3                   	ret    
  101306:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10130d:	00 00 00 

00101310 <vmm_create_pagedir>:
}

uint32_t vmm_create_pagedir(void)
{
  101310:	55                   	push   %ebp
  101311:	89 e5                	mov    %esp,%ebp
  101313:	81 ec 28 10 00 00    	sub    $0x1028,%esp
  101319:	8d 45 fc             	lea    -0x4(%ebp),%eax
  uint32_t phys_context = 0;
  10131c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  101323:	89 04 24             	mov    %eax,(%esp)
  101326:	e8 85 01 00 00       	call   1014b0 <vmm_alloc>
  10132b:	8d 4d f4             	lea    -0xc(%ebp),%ecx
  10132e:	89 45 f8             	mov    %eax,-0x8(%ebp)
  
  uint32_t phys_pagedir = 0;
  101331:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  101338:	89 0c 24             	mov    %ecx,(%esp)
  10133b:	e8 70 01 00 00       	call   1014b0 <vmm_alloc>
  101340:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101343:	89 01                	mov    %eax,(%ecx)
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
  for(i = 0; i < 1024; i++) {
  101345:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10134c:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  101353:	0f 83 7f 00 00 00    	jae    1013d8 <vmm_create_pagedir+0xc8>
  101359:	8d 45 f0             	lea    -0x10(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  10135c:	89 04 24             	mov    %eax,(%esp)
  10135f:	e8 4c 01 00 00       	call   1014b0 <vmm_alloc>
  101364:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101367:	89 84 8d e8 ef ff ff 	mov    %eax,-0x1018(%ebp,%ecx,4)
    context->pagedir[i] = paddr | PD_EXIST | PD_WRITE | PD_PUBLIC;
  10136e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101371:	0d 01 00 00 00       	or     $0x1,%eax
  101376:	0d 02 00 00 00       	or     $0x2,%eax
  10137b:	0d 04 00 00 00       	or     $0x4,%eax
  101380:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101383:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101386:	8b 12                	mov    (%edx),%edx
  101388:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    for(i2 = 0; i2 < 1024; i2++) {
  10138b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  101392:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  101399:	0f 83 24 00 00 00    	jae    1013c3 <vmm_create_pagedir+0xb3>
      ((uint32_t*)(pagedir_ptr[i]))[i2] = 0;
  10139f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1013a2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1013a5:	8b 8c 8d e8 ef ff ff 	mov    -0x1018(%ebp,%ecx,4),%ecx
  1013ac:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
  uint32_t paddr, i, i2, pagedir_ptr[1024];
  for(i = 0; i < 1024; i++) {
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
    context->pagedir[i] = paddr | PD_EXIST | PD_WRITE | PD_PUBLIC;
    
    for(i2 = 0; i2 < 1024; i2++) {
  1013b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1013b6:	05 01 00 00 00       	add    $0x1,%eax
  1013bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1013be:	e9 cf ff ff ff       	jmp    101392 <vmm_create_pagedir+0x82>
      ((uint32_t*)(pagedir_ptr[i]))[i2] = 0;
    }
  }
  1013c3:	e9 00 00 00 00       	jmp    1013c8 <vmm_create_pagedir+0xb8>
  
  uint32_t phys_pagedir = 0;
  context->pagedir = vmm_alloc(&phys_pagedir);
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
  for(i = 0; i < 1024; i++) {
  1013c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1013cb:	05 01 00 00 00       	add    $0x1,%eax
  1013d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1013d3:	e9 74 ff ff ff       	jmp    10134c <vmm_create_pagedir+0x3c>
    for(i2 = 0; i2 < 1024; i2++) {
      ((uint32_t*)(pagedir_ptr[i]))[i2] = 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  1013d8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1013df:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  1013e6:	0f 83 49 00 00 00    	jae    101435 <vmm_create_pagedir+0x125>
  1013ec:	8d 85 e8 ef ff ff    	lea    -0x1018(%ebp),%eax
    paddr = context->pagedir[i] & 0xFFFFF000;
  1013f2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1013f5:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1013f8:	8b 12                	mov    (%edx),%edx
  1013fa:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1013fd:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  101403:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    map_address_context(pagedir_ptr, ACTIVE_CONTEXT_VADDR + i * 0x1000, paddr);
  101406:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101409:	c1 e1 0c             	shl    $0xc,%ecx
  10140c:	81 c1 00 00 00 02    	add    $0x2000000,%ecx
  101412:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101415:	89 04 24             	mov    %eax,(%esp)
  101418:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10141c:	89 54 24 08          	mov    %edx,0x8(%esp)
  101420:	e8 fb 00 00 00       	call   101520 <map_address_context>
    for(i2 = 0; i2 < 1024; i2++) {
      ((uint32_t*)(pagedir_ptr[i]))[i2] = 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  101425:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101428:	05 01 00 00 00       	add    $0x1,%eax
  10142d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101430:	e9 aa ff ff ff       	jmp    1013df <vmm_create_pagedir+0xcf>
  101435:	8d 85 e8 ef ff ff    	lea    -0x1018(%ebp),%eax
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, ACTIVE_CONTEXT_VADDR + i * 0x1000, paddr);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context);
  10143b:	8b 0d 04 31 10 00    	mov    0x103104,%ecx
  101441:	8b 55 fc             	mov    -0x4(%ebp),%edx
  101444:	89 04 24             	mov    %eax,(%esp)
  101447:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10144b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10144f:	e8 cc 00 00 00       	call   101520 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101454:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  10145b:	8d 05 00 a0 12 00    	lea    0x12a000,%eax
  101461:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  101464:	0f 83 2c 00 00 00    	jae    101496 <vmm_create_pagedir+0x186>
  10146a:	8d 85 e8 ef ff ff    	lea    -0x1018(%ebp),%eax
    map_address_context(pagedir_ptr, i, i);
  101470:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101473:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101476:	89 04 24             	mov    %eax,(%esp)
  101479:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10147d:	89 54 24 08          	mov    %edx,0x8(%esp)
  101481:	e8 9a 00 00 00       	call   101520 <map_address_context>
    map_address_context(pagedir_ptr, ACTIVE_CONTEXT_VADDR + i * 0x1000, paddr);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101486:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101489:	05 00 10 00 00       	add    $0x1000,%eax
  10148e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101491:	e9 c5 ff ff ff       	jmp    10145b <vmm_create_pagedir+0x14b>
    map_address_context(pagedir_ptr, i, i);
  }
  
  context->pagedir = (uint32_t*) phys_pagedir;
  101496:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101499:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10149c:	89 01                	mov    %eax,(%ecx)
  
  return phys_pagedir;
  10149e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1014a1:	81 c4 28 10 00 00    	add    $0x1028,%esp
  1014a7:	5d                   	pop    %ebp
  1014a8:	c3                   	ret    
  1014a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

001014b0 <vmm_alloc>:
  ((uint32_t*)(ACTIVE_CONTEXT_VADDR))[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_EXIST | PT_WRITE | PT_PUBLIC;
}

//TODO: VMM_ALLOC can't free memory

void* vmm_alloc(uint32_t* retpaddr) {
  1014b0:	55                   	push   %ebp
  1014b1:	89 e5                	mov    %esp,%ebp
  1014b3:	83 ec 18             	sub    $0x18,%esp
  1014b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1014b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  void* retaddr = (void*) active_context->alloc_addr_count;
  1014bc:	a1 04 31 10 00       	mov    0x103104,%eax
  1014c1:	8b 40 04             	mov    0x4(%eax),%eax
  1014c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  
  uint32_t paddr = (uint32_t) pmm_alloc();
  1014c7:	e8 44 eb ff ff       	call   100010 <pmm_alloc>
  1014cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
  map_address_active(active_context->alloc_addr_count, paddr);
  1014cf:	a1 04 31 10 00       	mov    0x103104,%eax
  1014d4:	8b 40 04             	mov    0x4(%eax),%eax
  1014d7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1014da:	89 04 24             	mov    %eax,(%esp)
  1014dd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014e1:	e8 aa 00 00 00       	call   101590 <map_address_active>
  
  if(retpaddr != 0) *retpaddr = paddr;
  1014e6:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  1014ed:	0f 84 08 00 00 00    	je     1014fb <vmm_alloc+0x4b>
  1014f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1014f6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1014f9:	89 01                	mov    %eax,(%ecx)
  active_context->alloc_addr_count += 0x1000;
  1014fb:	a1 04 31 10 00       	mov    0x103104,%eax
  101500:	8b 48 04             	mov    0x4(%eax),%ecx
  101503:	81 c1 00 10 00 00    	add    $0x1000,%ecx
  101509:	89 48 04             	mov    %ecx,0x4(%eax)
  
  return retaddr;
  10150c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10150f:	83 c4 18             	add    $0x18,%esp
  101512:	5d                   	pop    %ebp
  101513:	c3                   	ret    
  101514:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10151b:	00 00 00 00 00 

00101520 <map_address_context>:
  context->pagedir = (uint32_t*) phys_pagedir;
  
  return phys_pagedir;
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr) {
  101520:	56                   	push   %esi
  101521:	83 ec 14             	sub    $0x14,%esp
  101524:	8b 44 24 24          	mov    0x24(%esp),%eax
  101528:	8b 4c 24 20          	mov    0x20(%esp),%ecx
  10152c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
  101530:	89 54 24 10          	mov    %edx,0x10(%esp)
  101534:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101538:	89 44 24 08          	mov    %eax,0x8(%esp)
  uint32_t pd_entry =  vaddr >> 22;
  10153c:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101540:	c1 e8 16             	shr    $0x16,%eax
  101543:	89 44 24 04          	mov    %eax,0x4(%esp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  101547:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10154b:	c1 e8 0c             	shr    $0xc,%eax
  10154e:	25 ff 03 00 00       	and    $0x3ff,%eax
  101553:	89 04 24             	mov    %eax,(%esp)
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_EXIST | PT_WRITE | PT_PUBLIC;
  101556:	8b 44 24 08          	mov    0x8(%esp),%eax
  10155a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10155f:	0d 01 00 00 00       	or     $0x1,%eax
  101564:	0d 02 00 00 00       	or     $0x2,%eax
  101569:	0d 04 00 00 00       	or     $0x4,%eax
  10156e:	8b 0c 24             	mov    (%esp),%ecx
  101571:	8b 54 24 04          	mov    0x4(%esp),%edx
  101575:	8b 74 24 10          	mov    0x10(%esp),%esi
  101579:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10157c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  101582:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
}
  101585:	83 c4 14             	add    $0x14,%esp
  101588:	5e                   	pop    %esi
  101589:	c3                   	ret    
  10158a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00101590 <map_address_active>:

void map_address_active(uint32_t vaddr, uint32_t paddr) {  
  101590:	83 ec 08             	sub    $0x8,%esp
  101593:	8b 44 24 10          	mov    0x10(%esp),%eax
  101597:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  10159b:	ba 00 00 00 02       	mov    $0x2000000,%edx
  1015a0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015a4:	89 04 24             	mov    %eax,(%esp)
  ((uint32_t*)(ACTIVE_CONTEXT_VADDR))[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_EXIST | PT_WRITE | PT_PUBLIC;
  1015a7:	8b 04 24             	mov    (%esp),%eax
  1015aa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1015af:	0d 01 00 00 00       	or     $0x1,%eax
  1015b4:	0d 02 00 00 00       	or     $0x2,%eax
  1015b9:	0d 04 00 00 00       	or     $0x4,%eax
  1015be:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  1015c2:	c1 e9 0c             	shr    $0xc,%ecx
  1015c5:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
}
  1015c8:	83 c4 08             	add    $0x8,%esp
  1015cb:	c3                   	ret    
  1015cc:	0f 1f 40 00          	nopl   0x0(%eax)

001015d0 <vmm_alloc_static>:
  return retaddr;
}

//TODO: VMM_ALLOC_STATIC will override already allocated memory

void* vmm_alloc_static(uint32_t offset) {
  1015d0:	55                   	push   %ebp
  1015d1:	89 e5                	mov    %esp,%ebp
  1015d3:	83 ec 28             	sub    $0x28,%esp
  1015d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1015d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(offset < 0x100000) {
  1015dc:	81 7d f8 00 00 10 00 	cmpl   $0x100000,-0x8(%ebp)
  1015e3:	0f 83 52 00 00 00    	jae    10163b <vmm_alloc_static+0x6b>
    if((offset & 0xFFFFF000) != offset) {
  1015e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1015ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1015f1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1015f4:	0f 84 11 00 00 00    	je     10160b <vmm_alloc_static+0x3b>
  1015fa:	8d 05 c5 40 10 00    	lea    0x1040c5,%eax
      kprintf("Tried to allocate not 4K-aligned static vaddr. \n");
  101600:	89 04 24             	mov    %eax,(%esp)
  101603:	e8 c8 f3 ff ff       	call   1009d0 <kprintf>
  101608:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
    uint32_t vaddr = offset + STATIC_ALLOC_VADDR;
  10160b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10160e:	05 00 00 90 01       	add    $0x1900000,%eax
  101613:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t paddr = (uint32_t) pmm_alloc();
  101616:	e8 f5 e9 ff ff       	call   100010 <pmm_alloc>
  10161b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    map_address_active(vaddr, paddr);
  10161e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101621:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101624:	89 04 24             	mov    %eax,(%esp)
  101627:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10162b:	e8 60 ff ff ff       	call   101590 <map_address_active>
    return (void*) vaddr;
  101630:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101633:	89 45 fc             	mov    %eax,-0x4(%ebp)
  101636:	e9 18 00 00 00       	jmp    101653 <vmm_alloc_static+0x83>
  10163b:	8d 05 f6 40 10 00    	lea    0x1040f6,%eax
  }
  else
  {
    kprintf("Tried to allocate static vaddr outside reserved range. \n");
  101641:	89 04 24             	mov    %eax,(%esp)
  101644:	e8 87 f3 ff ff       	call   1009d0 <kprintf>
    return 0;
  101649:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  101650:	89 45 e8             	mov    %eax,-0x18(%ebp)
  }
}
  101653:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101656:	83 c4 28             	add    $0x28,%esp
  101659:	5d                   	pop    %ebp
  10165a:	c3                   	ret    
  10165b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00101660 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  101660:	50                   	push   %eax
  101661:	8b 44 24 08          	mov    0x8(%esp),%eax
  101665:	89 04 24             	mov    %eax,(%esp)
  active_pagedir = pdpaddr;
  101668:	8b 04 24             	mov    (%esp),%eax
  10166b:	a3 24 50 10 00       	mov    %eax,0x105024
  asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  101670:	8b 04 24             	mov    (%esp),%eax
  101673:	0f 22 d8             	mov    %eax,%cr3
}
  101676:	58                   	pop    %eax
  101677:	c3                   	ret    
  101678:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10167f:	00 

00101680 <vmm_init>:

uint32_t vmm_init(void)
{
  101680:	55                   	push   %ebp
  101681:	89 e5                	mov    %esp,%ebp
  //CREATE CONTEXT ************************************************************
  
  struct vmm_context* context = pmm_alloc();
  101683:	83 ec 28             	sub    $0x28,%esp
  101686:	e8 85 e9 ff ff       	call   100010 <pmm_alloc>
  10168b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t i, i2;
  
  context->alloc_addr_count = USERSPACE_ZERO;
  10168e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101691:	c7 40 04 00 00 00 10 	movl   $0x10000000,0x4(%eax)
  context->alloc_byte_count = 0;
  101698:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10169b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  
  context->pagedir = pmm_alloc();
  1016a2:	e8 69 e9 ff ff       	call   100010 <pmm_alloc>
  1016a7:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1016aa:	89 01                	mov    %eax,(%ecx)
  
  for(i = 0; i < 1024; i++) {
  1016ac:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1016b3:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  1016ba:	0f 83 73 00 00 00    	jae    101733 <vmm_init+0xb3>
    context->pagedir[i] = ((int)pmm_alloc()) | PD_EXIST | PD_WRITE | PD_PUBLIC;
  1016c0:	e8 4b e9 ff ff       	call   100010 <pmm_alloc>
  1016c5:	0d 01 00 00 00       	or     $0x1,%eax
  1016ca:	0d 02 00 00 00       	or     $0x2,%eax
  1016cf:	0d 04 00 00 00       	or     $0x4,%eax
  1016d4:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1016d7:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1016da:	8b 12                	mov    (%edx),%edx
  1016dc:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        
    for(i2 = 0; i2 < 1024; i2++) {
  1016df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1016e6:	81 7d f4 00 04 00 00 	cmpl   $0x400,-0xc(%ebp)
  1016ed:	0f 83 2b 00 00 00    	jae    10171e <vmm_init+0x9e>
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = 0;
  1016f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1016f6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1016f9:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1016fc:	8b 12                	mov    (%edx),%edx
  1016fe:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  101701:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  101707:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
    context->pagedir[i] = ((int)pmm_alloc()) | PD_EXIST | PD_WRITE | PD_PUBLIC;
        
    for(i2 = 0; i2 < 1024; i2++) {
  10170e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101711:	05 01 00 00 00       	add    $0x1,%eax
  101716:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101719:	e9 c8 ff ff ff       	jmp    1016e6 <vmm_init+0x66>
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = 0;
    }
  }
  10171e:	e9 00 00 00 00       	jmp    101723 <vmm_init+0xa3>
  context->alloc_addr_count = USERSPACE_ZERO;
  context->alloc_byte_count = 0;
  
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
  101723:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101726:	05 01 00 00 00       	add    $0x1,%eax
  10172b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10172e:	e9 80 ff ff ff       	jmp    1016b3 <vmm_init+0x33>
    for(i2 = 0; i2 < 1024; i2++) {
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101733:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10173a:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  101741:	0f 83 47 00 00 00    	jae    10178e <vmm_init+0x10e>
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  101747:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10174a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10174d:	8b 09                	mov    (%ecx),%ecx
  10174f:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101752:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  101757:	89 45 f0             	mov    %eax,-0x10(%ebp)
    map_address_context(context->pagedir, ACTIVE_CONTEXT_VADDR + i * 0x1000, paddr);
  10175a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10175d:	8b 00                	mov    (%eax),%eax
  10175f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101762:	c1 e1 0c             	shl    $0xc,%ecx
  101765:	81 c1 00 00 00 02    	add    $0x2000000,%ecx
  10176b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10176e:	89 04 24             	mov    %eax,(%esp)
  101771:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101775:	89 54 24 08          	mov    %edx,0x8(%esp)
  101779:	e8 a2 fd ff ff       	call   101520 <map_address_context>
    for(i2 = 0; i2 < 1024; i2++) {
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  10177e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101781:	05 01 00 00 00       	add    $0x1,%eax
  101786:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101789:	e9 ac ff ff ff       	jmp    10173a <vmm_init+0xba>
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(context->pagedir, ACTIVE_CONTEXT_VADDR + i * 0x1000, paddr);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context);
  10178e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101791:	8b 00                	mov    (%eax),%eax
  101793:	8b 0d 04 31 10 00    	mov    0x103104,%ecx
  101799:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10179c:	89 04 24             	mov    %eax,(%esp)
  10179f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017a3:	89 54 24 08          	mov    %edx,0x8(%esp)
  1017a7:	e8 74 fd ff ff       	call   101520 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1017ac:	c7 45 f8 00 10 00 00 	movl   $0x1000,-0x8(%ebp)
  1017b3:	8d 05 00 a0 12 00    	lea    0x12a000,%eax
  1017b9:	39 45 f8             	cmp    %eax,-0x8(%ebp)
  1017bc:	0f 83 2b 00 00 00    	jae    1017ed <vmm_init+0x16d>
    map_address_context(context->pagedir, i, i);
  1017c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1017c5:	8b 00                	mov    (%eax),%eax
  1017c7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1017ca:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1017cd:	89 04 24             	mov    %eax,(%esp)
  1017d0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017d4:	89 54 24 08          	mov    %edx,0x8(%esp)
  1017d8:	e8 43 fd ff ff       	call   101520 <map_address_context>
    map_address_context(context->pagedir, ACTIVE_CONTEXT_VADDR + i * 0x1000, paddr);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1017dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1017e0:	05 00 10 00 00       	add    $0x1000,%eax
  1017e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1017e8:	e9 c6 ff ff ff       	jmp    1017b3 <vmm_init+0x133>
    map_address_context(context->pagedir, i, i);
  }
  
  //END CREATE CONTEXT ********************************************************
  
  vmm_activate_pagedir((uint32_t) context->pagedir);
  1017ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1017f0:	8b 00                	mov    (%eax),%eax
  1017f2:	89 04 24             	mov    %eax,(%esp)
  1017f5:	e8 66 fe ff ff       	call   101660 <vmm_activate_pagedir>

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  1017fa:	0f 20 c0             	mov    %cr0,%eax
  1017fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  cr0 |= (1 << 31);
  101800:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101803:	0d 00 00 00 80       	or     $0x80000000,%eax
  101808:	89 45 ec             	mov    %eax,-0x14(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  10180b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10180e:	0f 22 c0             	mov    %eax,%cr0
  
  return (uint32_t) active_context->pagedir;
  101811:	a1 04 31 10 00       	mov    0x103104,%eax
  101816:	8b 00                	mov    (%eax),%eax
  101818:	83 c4 28             	add    $0x28,%esp
  10181b:	5d                   	pop    %ebp
  10181c:	c3                   	ret    
  10181d:	66 90                	xchg   %ax,%ax
  10181f:	90                   	nop

00101820 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101820:	53                   	push   %ebx
  101821:	57                   	push   %edi
  101822:	56                   	push   %esi
  101823:	83 ec 10             	sub    $0x10,%esp
  101826:	0f b7 44 24 28       	movzwl 0x28(%esp),%eax
  10182b:	66 89 c1             	mov    %ax,%cx
  10182e:	8a 54 24 2c          	mov    0x2c(%esp),%dl
  101832:	8b 44 24 24          	mov    0x24(%esp),%eax
  101836:	8b 74 24 20          	mov    0x20(%esp),%esi
  10183a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10183e:	89 44 24 08          	mov    %eax,0x8(%esp)
  101842:	66 89 4c 24 06       	mov    %cx,0x6(%esp)
  101847:	88 54 24 05          	mov    %dl,0x5(%esp)
	unsigned long int handler = (unsigned long int) fn;
  10184b:	8b 44 24 08          	mov    0x8(%esp),%eax
  10184f:	89 04 24             	mov    %eax,(%esp)
	idt[i] = handler & 0xffffLL;
  101852:	8b 74 24 0c          	mov    0xc(%esp),%esi
  101856:	66 89 c1             	mov    %ax,%cx
  101859:	0f b7 c1             	movzwl %cx,%eax
  10185c:	89 04 f5 28 50 10 00 	mov    %eax,0x105028(,%esi,8)
  101863:	c7 04 f5 2c 50 10 00 	movl   $0x0,0x10502c(,%esi,8)
  10186a:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  10186e:	8b 44 24 0c          	mov    0xc(%esp),%eax
  101872:	8b 34 c5 28 50 10 00 	mov    0x105028(,%eax,8),%esi
  101879:	8b 3c c5 2c 50 10 00 	mov    0x10502c(,%eax,8),%edi
  101880:	0f b7 5c 24 06       	movzwl 0x6(%esp),%ebx
  101885:	89 3c c5 2c 50 10 00 	mov    %edi,0x10502c(,%eax,8)
  10188c:	c1 e3 10             	shl    $0x10,%ebx
  10188f:	09 de                	or     %ebx,%esi
  101891:	89 34 c5 28 50 10 00 	mov    %esi,0x105028(,%eax,8)
	idt[i] |= (flags & 0xffLL) << 40;
  101898:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10189c:	8b 34 c5 2c 50 10 00 	mov    0x10502c(,%eax,8),%esi
  1018a3:	8b 3c c5 28 50 10 00 	mov    0x105028(,%eax,8),%edi
  1018aa:	0f b6 5c 24 05       	movzbl 0x5(%esp),%ebx
  1018af:	89 3c c5 28 50 10 00 	mov    %edi,0x105028(,%eax,8)
  1018b6:	c1 e3 08             	shl    $0x8,%ebx
  1018b9:	09 de                	or     %ebx,%esi
  1018bb:	89 34 c5 2c 50 10 00 	mov    %esi,0x10502c(,%eax,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  1018c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1018c6:	8b 34 c5 2c 50 10 00 	mov    0x10502c(,%eax,8),%esi
  1018cd:	8b 3c c5 28 50 10 00 	mov    0x105028(,%eax,8),%edi
  1018d4:	0f b7 5c 24 02       	movzwl 0x2(%esp),%ebx
  1018d9:	89 3c c5 28 50 10 00 	mov    %edi,0x105028(,%eax,8)
  1018e0:	c1 e3 10             	shl    $0x10,%ebx
  1018e3:	09 de                	or     %ebx,%esi
  1018e5:	89 34 c5 2c 50 10 00 	mov    %esi,0x10502c(,%eax,8)
}
  1018ec:	83 c4 10             	add    $0x10,%esp
  1018ef:	5e                   	pop    %esi
  1018f0:	5f                   	pop    %edi
  1018f1:	5b                   	pop    %ebx
  1018f2:	c3                   	ret    
  1018f3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1018fa:	84 00 00 00 00 00 

00101900 <init_idt>:

void init_idt() {
  101900:	55                   	push   %ebp
  101901:	89 e5                	mov    %esp,%ebp
		  unsigned short int limit;
		  void* pointer;
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};
  101903:	56                   	push   %esi
  101904:	81 ec 34 02 00 00    	sub    $0x234,%esp
  10190a:	a1 2a 40 10 00       	mov    0x10402a,%eax
  10190f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101912:	66 8b 0d 2e 40 10 00 	mov    0x10402e,%cx
  101919:	66 89 4d f4          	mov    %cx,-0xc(%ebp)

	int i = 0;
  10191d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  101924:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10192b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  101932:	0f 8d 1e 00 00 00    	jge    101956 <init_idt+0x56>
		handler_set[i] = 0;
  101938:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10193b:	c7 04 85 28 52 10 00 	movl   $0x0,0x105228(,%eax,4)
  101942:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  101946:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101949:	05 01 00 00 00       	add    $0x1,%eax
  10194e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101951:	e9 d5 ff ff ff       	jmp    10192b <init_idt+0x2b>
  101956:	b8 20 00 00 00       	mov    $0x20,%eax
  10195b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  101960:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101967:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10196e:	00 
  10196f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101972:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  101975:	e8 86 0b 00 00       	call   102500 <outb>
  10197a:	b8 21 00 00 00       	mov    $0x21,%eax
  10197f:	b9 20 00 00 00       	mov    $0x20,%ecx
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  101984:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10198b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101992:	00 
  101993:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101996:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  101999:	e8 62 0b 00 00       	call   102500 <outb>
  10199e:	b8 21 00 00 00       	mov    $0x21,%eax
  1019a3:	b9 04 00 00 00       	mov    $0x4,%ecx
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  1019a8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1019af:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1019b6:	00 
  1019b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1019ba:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1019bd:	e8 3e 0b 00 00       	call   102500 <outb>
  1019c2:	b8 21 00 00 00       	mov    $0x21,%eax
  1019c7:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0x21, 0x01); // ICW 4
  1019cc:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1019d3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1019da:	00 
  1019db:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1019de:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  1019e1:	e8 1a 0b 00 00       	call   102500 <outb>
  1019e6:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1019eb:	b9 11 00 00 00       	mov    $0x11,%ecx

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  1019f0:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1019f7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1019fe:	00 
  1019ff:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101a02:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101a05:	e8 f6 0a 00 00       	call   102500 <outb>
  101a0a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101a0f:	b9 28 00 00 00       	mov    $0x28,%ecx
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101a14:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101a1b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101a22:	00 
  101a23:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101a26:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101a29:	e8 d2 0a 00 00       	call   102500 <outb>
  101a2e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101a33:	b9 02 00 00 00       	mov    $0x2,%ecx
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101a38:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101a3f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101a46:	00 
  101a47:	89 45 b8             	mov    %eax,-0x48(%ebp)
  101a4a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  101a4d:	e8 ae 0a 00 00       	call   102500 <outb>
  101a52:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101a57:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0xa1, 0x01); // ICW 4
  101a5c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101a63:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  101a6a:	00 
  101a6b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  101a6e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  101a71:	e8 8a 0a 00 00       	call   102500 <outb>
  101a76:	b8 20 00 00 00       	mov    $0x20,%eax
  101a7b:	b9 00 00 00 00       	mov    $0x0,%ecx

  outb(0x20, 0x0);
  101a80:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101a87:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101a8e:	00 
  101a8f:	89 45 a8             	mov    %eax,-0x58(%ebp)
  101a92:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  101a95:	e8 66 0a 00 00       	call   102500 <outb>
  101a9a:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101a9f:	b9 00 00 00 00       	mov    $0x0,%ecx
  outb(0xa0, 0x0);
  101aa4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101aab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101ab2:	00 
  101ab3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  101ab6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  101ab9:	e8 42 0a 00 00       	call   102500 <outb>
  101abe:	b8 00 00 00 00       	mov    $0x0,%eax
  101ac3:	8d 0d 70 03 10 00    	lea    0x100370,%ecx
  101ac9:	ba 08 00 00 00       	mov    $0x8,%edx
  101ace:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ad3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101ada:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ade:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ae5:	00 
  101ae6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101aed:	00 
  101aee:	89 45 98             	mov    %eax,-0x68(%ebp)
  101af1:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101af4:	89 55 90             	mov    %edx,-0x70(%ebp)
  101af7:	e8 24 fd ff ff       	call   101820 <idt_set_entry>
  101afc:	b8 01 00 00 00       	mov    $0x1,%eax
  101b01:	8d 0d 79 03 10 00    	lea    0x100379,%ecx
  101b07:	ba 08 00 00 00       	mov    $0x8,%edx
  101b0c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b11:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101b18:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b1c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b23:	00 
  101b24:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b2b:	00 
  101b2c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  101b2f:	89 75 88             	mov    %esi,-0x78(%ebp)
  101b32:	89 55 84             	mov    %edx,-0x7c(%ebp)
  101b35:	e8 e6 fc ff ff       	call   101820 <idt_set_entry>
  101b3a:	b8 02 00 00 00       	mov    $0x2,%eax
  101b3f:	8d 0d 82 03 10 00    	lea    0x100382,%ecx
  101b45:	ba 08 00 00 00       	mov    $0x8,%edx
  101b4a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b4f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101b56:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b5a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b61:	00 
  101b62:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b69:	00 
  101b6a:	89 45 80             	mov    %eax,-0x80(%ebp)
  101b6d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  101b73:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  101b79:	e8 a2 fc ff ff       	call   101820 <idt_set_entry>
  101b7e:	b8 03 00 00 00       	mov    $0x3,%eax
  101b83:	8d 0d 8b 03 10 00    	lea    0x10038b,%ecx
  101b89:	ba 08 00 00 00       	mov    $0x8,%edx
  101b8e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b93:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  101b9a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b9e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ba5:	00 
  101ba6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bad:	00 
  101bae:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  101bb4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  101bba:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101bc0:	e8 5b fc ff ff       	call   101820 <idt_set_entry>
  101bc5:	b8 04 00 00 00       	mov    $0x4,%eax
  101bca:	8d 0d 94 03 10 00    	lea    0x100394,%ecx
  101bd0:	ba 08 00 00 00       	mov    $0x8,%edx
  101bd5:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101bda:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101be1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101be5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bec:	00 
  101bed:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bf4:	00 
  101bf5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  101bfb:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101c01:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101c07:	e8 14 fc ff ff       	call   101820 <idt_set_entry>
  101c0c:	b8 05 00 00 00       	mov    $0x5,%eax
  101c11:	8d 0d 9d 03 10 00    	lea    0x10039d,%ecx
  101c17:	ba 08 00 00 00       	mov    $0x8,%edx
  101c1c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c21:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101c28:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c2c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c33:	00 
  101c34:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c3b:	00 
  101c3c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101c42:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101c48:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  101c4e:	e8 cd fb ff ff       	call   101820 <idt_set_entry>
  101c53:	b8 06 00 00 00       	mov    $0x6,%eax
  101c58:	8d 0d a6 03 10 00    	lea    0x1003a6,%ecx
  101c5e:	ba 08 00 00 00       	mov    $0x8,%edx
  101c63:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c68:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  101c6f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c73:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c7a:	00 
  101c7b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c82:	00 
  101c83:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  101c89:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  101c8f:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  101c95:	e8 86 fb ff ff       	call   101820 <idt_set_entry>
  101c9a:	b8 07 00 00 00       	mov    $0x7,%eax
  101c9f:	8d 0d af 03 10 00    	lea    0x1003af,%ecx
  101ca5:	ba 08 00 00 00       	mov    $0x8,%edx
  101caa:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101caf:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101cb6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cba:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101cc1:	00 
  101cc2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101cc9:	00 
  101cca:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101cd0:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101cd6:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  101cdc:	e8 3f fb ff ff       	call   101820 <idt_set_entry>
  101ce1:	b8 08 00 00 00       	mov    $0x8,%eax
  101ce6:	8d 0d b8 03 10 00    	lea    0x1003b8,%ecx
  101cec:	ba 8e 00 00 00       	mov    $0x8e,%edx
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101cf1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101cf8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cfc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d03:	00 
  101d04:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d0b:	00 
  101d0c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101d12:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101d18:	e8 03 fb ff ff       	call   101820 <idt_set_entry>
  101d1d:	b8 09 00 00 00       	mov    $0x9,%eax
  101d22:	8d 0d bf 03 10 00    	lea    0x1003bf,%ecx
  101d28:	ba 08 00 00 00       	mov    $0x8,%edx
  101d2d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d32:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101d39:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d3d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d44:	00 
  101d45:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d4c:	00 
  101d4d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101d53:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101d59:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  101d5f:	e8 bc fa ff ff       	call   101820 <idt_set_entry>
  101d64:	b8 0a 00 00 00       	mov    $0xa,%eax
  101d69:	8d 0d c8 03 10 00    	lea    0x1003c8,%ecx
  101d6f:	ba 08 00 00 00       	mov    $0x8,%edx
  101d74:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d79:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  101d80:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d84:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d8b:	00 
  101d8c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d93:	00 
  101d94:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  101d9a:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  101da0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  101da6:	e8 75 fa ff ff       	call   101820 <idt_set_entry>
  101dab:	b8 0b 00 00 00       	mov    $0xb,%eax
  101db0:	8d 0d cf 03 10 00    	lea    0x1003cf,%ecx
  101db6:	ba 08 00 00 00       	mov    $0x8,%edx
  101dbb:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101dc0:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101dc7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101dcb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101dd2:	00 
  101dd3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101dda:	00 
  101ddb:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101de1:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101de7:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  101ded:	e8 2e fa ff ff       	call   101820 <idt_set_entry>
  101df2:	b8 0c 00 00 00       	mov    $0xc,%eax
  101df7:	8d 0d d6 03 10 00    	lea    0x1003d6,%ecx
  101dfd:	ba 08 00 00 00       	mov    $0x8,%edx
  101e02:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e07:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  101e0e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e12:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e19:	00 
  101e1a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e21:	00 
  101e22:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101e28:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  101e2e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101e34:	e8 e7 f9 ff ff       	call   101820 <idt_set_entry>
  101e39:	b8 0d 00 00 00       	mov    $0xd,%eax
  101e3e:	8d 0d dd 03 10 00    	lea    0x1003dd,%ecx
  101e44:	ba 08 00 00 00       	mov    $0x8,%edx
  101e49:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e4e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101e55:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e59:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e60:	00 
  101e61:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e68:	00 
  101e69:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  101e6f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  101e75:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  101e7b:	e8 a0 f9 ff ff       	call   101820 <idt_set_entry>
  101e80:	b8 0e 00 00 00       	mov    $0xe,%eax
  101e85:	8d 0d e4 03 10 00    	lea    0x1003e4,%ecx
  101e8b:	ba 08 00 00 00       	mov    $0x8,%edx
  101e90:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e95:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  101e9c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ea0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ea7:	00 
  101ea8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101eaf:	00 
  101eb0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  101eb6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  101ebc:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101ec2:	e8 59 f9 ff ff       	call   101820 <idt_set_entry>
  101ec7:	b8 0f 00 00 00       	mov    $0xf,%eax
  101ecc:	8d 0d e8 03 10 00    	lea    0x1003e8,%ecx
  101ed2:	ba 08 00 00 00       	mov    $0x8,%edx
  101ed7:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101edc:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101ee3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ee7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101eee:	00 
  101eef:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ef6:	00 
  101ef7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  101efd:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101f03:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101f09:	e8 12 f9 ff ff       	call   101820 <idt_set_entry>
  101f0e:	b8 10 00 00 00       	mov    $0x10,%eax
  101f13:	8d 0d ee 03 10 00    	lea    0x1003ee,%ecx
  101f19:	ba 08 00 00 00       	mov    $0x8,%edx
  101f1e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101f23:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  101f2a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f2e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f35:	00 
  101f36:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f3d:	00 
  101f3e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101f44:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  101f4a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101f50:	e8 cb f8 ff ff       	call   101820 <idt_set_entry>
  101f55:	b8 11 00 00 00       	mov    $0x11,%eax
  101f5a:	8d 0d f4 03 10 00    	lea    0x1003f4,%ecx
  101f60:	ba 08 00 00 00       	mov    $0x8,%edx
  101f65:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101f6a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101f71:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f75:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f7c:	00 
  101f7d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f84:	00 
  101f85:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  101f8b:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  101f91:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  101f97:	e8 84 f8 ff ff       	call   101820 <idt_set_entry>
  101f9c:	b8 12 00 00 00       	mov    $0x12,%eax
  101fa1:	8d 0d f8 03 10 00    	lea    0x1003f8,%ecx
  101fa7:	ba 08 00 00 00       	mov    $0x8,%edx
  101fac:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101fb1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  101fb8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101fbc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101fc3:	00 
  101fc4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101fcb:	00 
  101fcc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101fd2:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101fd8:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  101fde:	e8 3d f8 ff ff       	call   101820 <idt_set_entry>
  101fe3:	b8 20 00 00 00       	mov    $0x20,%eax
  101fe8:	8d 0d fe 03 10 00    	lea    0x1003fe,%ecx
  101fee:	ba 08 00 00 00       	mov    $0x8,%edx
  101ff3:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ff8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101fff:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102003:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10200a:	00 
  10200b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102012:	00 
  102013:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  102019:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  10201f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  102025:	e8 f6 f7 ff ff       	call   101820 <idt_set_entry>
  10202a:	b8 21 00 00 00       	mov    $0x21,%eax
  10202f:	8d 0d 04 04 10 00    	lea    0x100404,%ecx
  102035:	ba 08 00 00 00       	mov    $0x8,%edx
  10203a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10203f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  102046:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10204a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102051:	00 
  102052:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102059:	00 
  10205a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  102060:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  102066:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  10206c:	e8 af f7 ff ff       	call   101820 <idt_set_entry>
  102071:	b8 22 00 00 00       	mov    $0x22,%eax
  102076:	8d 0d 0a 04 10 00    	lea    0x10040a,%ecx
  10207c:	ba 08 00 00 00       	mov    $0x8,%edx
  102081:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(34, intr_stub_34, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102086:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  10208d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102091:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102098:	00 
  102099:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1020a0:	00 
  1020a1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  1020a7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  1020ad:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  1020b3:	e8 68 f7 ff ff       	call   101820 <idt_set_entry>
  1020b8:	b8 23 00 00 00       	mov    $0x23,%eax
  1020bd:	8d 0d 10 04 10 00    	lea    0x100410,%ecx
  1020c3:	ba 08 00 00 00       	mov    $0x8,%edx
  1020c8:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(35, intr_stub_35, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1020cd:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  1020d4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1020d8:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1020df:	00 
  1020e0:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1020e7:	00 
  1020e8:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  1020ee:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  1020f4:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  1020fa:	e8 21 f7 ff ff       	call   101820 <idt_set_entry>
  1020ff:	b8 24 00 00 00       	mov    $0x24,%eax
  102104:	8d 0d 16 04 10 00    	lea    0x100416,%ecx
  10210a:	ba 08 00 00 00       	mov    $0x8,%edx
  10210f:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(36, intr_stub_36, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102114:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  10211b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10211f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102126:	00 
  102127:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10212e:	00 
  10212f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  102135:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  10213b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  102141:	e8 da f6 ff ff       	call   101820 <idt_set_entry>
  102146:	b8 25 00 00 00       	mov    $0x25,%eax
  10214b:	8d 0d 1c 04 10 00    	lea    0x10041c,%ecx
  102151:	ba 08 00 00 00       	mov    $0x8,%edx
  102156:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(37, intr_stub_37, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10215b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  102162:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102166:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10216d:	00 
  10216e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102175:	00 
  102176:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  10217c:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  102182:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  102188:	e8 93 f6 ff ff       	call   101820 <idt_set_entry>
  10218d:	b8 26 00 00 00       	mov    $0x26,%eax
  102192:	8d 0d 22 04 10 00    	lea    0x100422,%ecx
  102198:	ba 08 00 00 00       	mov    $0x8,%edx
  10219d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(38, intr_stub_38, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1021a2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  1021a9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1021ad:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1021b4:	00 
  1021b5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1021bc:	00 
  1021bd:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  1021c3:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  1021c9:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  1021cf:	e8 4c f6 ff ff       	call   101820 <idt_set_entry>
  1021d4:	b8 27 00 00 00       	mov    $0x27,%eax
  1021d9:	8d 0d 28 04 10 00    	lea    0x100428,%ecx
  1021df:	ba 08 00 00 00       	mov    $0x8,%edx
  1021e4:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(39, intr_stub_39, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1021e9:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  1021f0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1021f4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1021fb:	00 
  1021fc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102203:	00 
  102204:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  10220a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  102210:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  102216:	e8 05 f6 ff ff       	call   101820 <idt_set_entry>
  10221b:	b8 28 00 00 00       	mov    $0x28,%eax
  102220:	8d 0d 2e 04 10 00    	lea    0x10042e,%ecx
  102226:	ba 08 00 00 00       	mov    $0x8,%edx
  10222b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(40, intr_stub_40, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102230:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  102237:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10223b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102242:	00 
  102243:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10224a:	00 
  10224b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  102251:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  102257:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  10225d:	e8 be f5 ff ff       	call   101820 <idt_set_entry>
  102262:	b8 29 00 00 00       	mov    $0x29,%eax
  102267:	8d 0d 34 04 10 00    	lea    0x100434,%ecx
  10226d:	ba 08 00 00 00       	mov    $0x8,%edx
  102272:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(41, intr_stub_41, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102277:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  10227e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102282:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102289:	00 
  10228a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102291:	00 
  102292:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  102298:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  10229e:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  1022a4:	e8 77 f5 ff ff       	call   101820 <idt_set_entry>
  1022a9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  1022ae:	8d 0d 3a 04 10 00    	lea    0x10043a,%ecx
  1022b4:	ba 08 00 00 00       	mov    $0x8,%edx
  1022b9:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(42, intr_stub_42, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1022be:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  1022c5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1022c9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1022d0:	00 
  1022d1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1022d8:	00 
  1022d9:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  1022df:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  1022e5:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  1022eb:	e8 30 f5 ff ff       	call   101820 <idt_set_entry>
  1022f0:	b8 2b 00 00 00       	mov    $0x2b,%eax
  1022f5:	8d 0d 40 04 10 00    	lea    0x100440,%ecx
  1022fb:	ba 08 00 00 00       	mov    $0x8,%edx
  102300:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(43, intr_stub_43, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102305:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  10230c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102310:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102317:	00 
  102318:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10231f:	00 
  102320:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  102326:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  10232c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  102332:	e8 e9 f4 ff ff       	call   101820 <idt_set_entry>
  102337:	b8 2c 00 00 00       	mov    $0x2c,%eax
  10233c:	8d 0d 46 04 10 00    	lea    0x100446,%ecx
  102342:	ba 08 00 00 00       	mov    $0x8,%edx
  102347:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(44, intr_stub_44, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10234c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  102353:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102357:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10235e:	00 
  10235f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102366:	00 
  102367:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  10236d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  102373:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  102379:	e8 a2 f4 ff ff       	call   101820 <idt_set_entry>
  10237e:	b8 2d 00 00 00       	mov    $0x2d,%eax
  102383:	8d 0d 4c 04 10 00    	lea    0x10044c,%ecx
  102389:	ba 08 00 00 00       	mov    $0x8,%edx
  10238e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(45, intr_stub_45, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102393:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  10239a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10239e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1023a5:	00 
  1023a6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1023ad:	00 
  1023ae:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  1023b4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  1023ba:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  1023c0:	e8 5b f4 ff ff       	call   101820 <idt_set_entry>
  1023c5:	b8 2e 00 00 00       	mov    $0x2e,%eax
  1023ca:	8d 0d 52 04 10 00    	lea    0x100452,%ecx
  1023d0:	ba 08 00 00 00       	mov    $0x8,%edx
  1023d5:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(46, intr_stub_46, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1023da:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  1023e1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1023e5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1023ec:	00 
  1023ed:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1023f4:	00 
  1023f5:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  1023fb:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  102401:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  102407:	e8 14 f4 ff ff       	call   101820 <idt_set_entry>
  10240c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  102411:	8d 0d 58 04 10 00    	lea    0x100458,%ecx
  102417:	ba 08 00 00 00       	mov    $0x8,%edx
  10241c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(47, intr_stub_47, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102421:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  102428:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10242c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102433:	00 
  102434:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10243b:	00 
  10243c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  102442:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  102448:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  10244e:	e8 cd f3 ff ff       	call   101820 <idt_set_entry>
  102453:	b8 30 00 00 00       	mov    $0x30,%eax
  102458:	8d 0d 5e 04 10 00    	lea    0x10045e,%ecx
  10245e:	ba 08 00 00 00       	mov    $0x8,%edx
  102463:	be ee 00 00 00       	mov    $0xee,%esi

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  102468:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  10246f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102473:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10247a:	00 
  10247b:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  102482:	00 
  102483:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  102489:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  10248f:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  102495:	e8 86 f3 ff ff       	call   101820 <idt_set_entry>
  10249a:	b8 05 00 00 00       	mov    $0x5,%eax
  10249f:	8d 0d 08 31 10 00    	lea    0x103108,%ecx
  1024a5:	ba 80 00 00 00       	mov    $0x80,%edx
  1024aa:	be e9 00 00 00       	mov    $0xe9,%esi

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  1024af:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1024b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1024ba:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  1024c1:	00 
  1024c2:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  1024c9:	00 
  1024ca:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  1024d0:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  1024d6:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  1024dc:	e8 8f eb ff ff       	call   101070 <set_gdt_entry>
  1024e1:	b8 28 00 00 00       	mov    $0x28,%eax

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  1024e6:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  1024e9:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  1024ed:	fb                   	sti    
}
  1024ee:	81 c4 34 02 00 00    	add    $0x234,%esp
  1024f4:	5e                   	pop    %esi
  1024f5:	5d                   	pop    %ebp
  1024f6:	c3                   	ret    
  1024f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1024fe:	00 00 

00102500 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  102500:	50                   	push   %eax
  102501:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
  102506:	66 89 c1             	mov    %ax,%cx
  102509:	8a 54 24 0c          	mov    0xc(%esp),%dl
  10250d:	66 89 4c 24 02       	mov    %cx,0x2(%esp)
  102512:	88 54 24 01          	mov    %dl,0x1(%esp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  102516:	8a 44 24 01          	mov    0x1(%esp),%al
  10251a:	66 8b 54 24 02       	mov    0x2(%esp),%dx
  10251f:	ee                   	out    %al,(%dx)
}
  102520:	58                   	pop    %eax
  102521:	c3                   	ret    
  102522:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102529:	1f 84 00 00 00 00 00 

00102530 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  102530:	83 ec 08             	sub    $0x8,%esp
  102533:	8b 44 24 10          	mov    0x10(%esp),%eax
  102537:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
  10253b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10253f:	89 04 24             	mov    %eax,(%esp)
	handlers[i] = fn;
  102542:	8b 04 24             	mov    (%esp),%eax
  102545:	8b 4c 24 04          	mov    0x4(%esp),%ecx
  102549:	89 04 8d 28 53 10 00 	mov    %eax,0x105328(,%ecx,4)
	handler_set[i] = 1;
  102550:	8b 44 24 04          	mov    0x4(%esp),%eax
  102554:	c7 04 85 28 52 10 00 	movl   $0x1,0x105228(,%eax,4)
  10255b:	01 00 00 00 
}
  10255f:	83 c4 08             	add    $0x8,%esp
  102562:	c3                   	ret    
  102563:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10256a:	84 00 00 00 00 00 

00102570 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  102570:	55                   	push   %ebp
  102571:	89 e5                	mov    %esp,%ebp
  102573:	53                   	push   %ebx
  102574:	57                   	push   %edi
  102575:	56                   	push   %esi
  102576:	83 ec 4c             	sub    $0x4c,%esp
  102579:	8b 45 08             	mov    0x8(%ebp),%eax
  10257c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct cpu_state* new_cpu = cpu;
  10257f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102582:	89 45 ec             	mov    %eax,-0x14(%ebp)

  if (cpu->intr <= 0x1f) {
  102585:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102588:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  10258f:	0f 87 fb 00 00 00    	ja     102690 <handle_interrupt+0x120>
  102595:	8d 05 2f 41 10 00    	lea    0x10412f,%eax
    kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  10259b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10259e:	8b 49 1c             	mov    0x1c(%ecx),%ecx
  1025a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1025a4:	8b 52 20             	mov    0x20(%edx),%edx
  1025a7:	89 04 24             	mov    %eax,(%esp)
  1025aa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1025ae:	89 54 24 08          	mov    %edx,0x8(%esp)
  1025b2:	e8 19 e4 ff ff       	call   1009d0 <kprintf>
  1025b7:	8d 0d 53 41 10 00    	lea    0x104153,%ecx

		kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  1025bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1025c0:	8b 12                	mov    (%edx),%edx
  1025c2:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1025c5:	8b 76 04             	mov    0x4(%esi),%esi
  1025c8:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1025cb:	8b 7f 08             	mov    0x8(%edi),%edi
  1025ce:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1025d1:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  1025d4:	89 0c 24             	mov    %ecx,(%esp)
  1025d7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1025db:	89 74 24 08          	mov    %esi,0x8(%esp)
  1025df:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1025e3:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1025e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1025ea:	e8 e1 e3 ff ff       	call   1009d0 <kprintf>
  1025ef:	8d 0d 74 41 10 00    	lea    0x104174,%ecx
		kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  1025f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1025f8:	8b 52 10             	mov    0x10(%edx),%edx
  1025fb:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1025fe:	8b 76 14             	mov    0x14(%esi),%esi
  102601:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102604:	8b 7f 18             	mov    0x18(%edi),%edi
  102607:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10260a:	8b 5b 24             	mov    0x24(%ebx),%ebx
  10260d:	89 0c 24             	mov    %ecx,(%esp)
  102610:	89 54 24 04          	mov    %edx,0x4(%esp)
  102614:	89 74 24 08          	mov    %esi,0x8(%esp)
  102618:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10261c:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  102620:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102623:	e8 a8 e3 ff ff       	call   1009d0 <kprintf>
  102628:	8d 0d 95 41 10 00    	lea    0x104195,%ecx
		kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  10262e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102631:	8b 52 28             	mov    0x28(%edx),%edx
  102634:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102637:	8b 76 2c             	mov    0x2c(%esi),%esi
  10263a:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10263d:	8b 7f 30             	mov    0x30(%edi),%edi
  102640:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  102643:	8b 5b 34             	mov    0x34(%ebx),%ebx
  102646:	89 0c 24             	mov    %ecx,(%esp)
  102649:	89 54 24 04          	mov    %edx,0x4(%esp)
  10264d:	89 74 24 08          	mov    %esi,0x8(%esp)
  102651:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  102655:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  102659:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10265c:	e8 6f e3 ff ff       	call   1009d0 <kprintf>
  102661:	8d 0d b7 41 10 00    	lea    0x1041b7,%ecx

		uint32_t cr2 = 0;
  102667:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

		asm volatile("mov %%cr2, %0" : "=r" (cr2));
  10266e:	0f 20 d2             	mov    %cr2,%edx
  102671:	89 55 e8             	mov    %edx,-0x18(%ebp)

		kprintf("CR2: %x", cr2);
  102674:	8b 55 e8             	mov    -0x18(%ebp),%edx
  102677:	89 0c 24             	mov    %ecx,(%esp)
  10267a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10267e:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102681:	e8 4a e3 ff ff       	call   1009d0 <kprintf>
  102686:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	
    while(1) {
      asm volatile("cli; hlt");
  102689:	fa                   	cli    
  10268a:	f4                   	hlt    
    }
  10268b:	e9 f9 ff ff ff       	jmp    102689 <handle_interrupt+0x119>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  102690:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102693:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  10269a:	0f 82 b4 00 00 00    	jb     102754 <handle_interrupt+0x1e4>
  1026a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1026a3:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  1026aa:	0f 87 a4 00 00 00    	ja     102754 <handle_interrupt+0x1e4>
    if (cpu->intr >= 0x28) {
  1026b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1026b3:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  1026ba:	0f 82 24 00 00 00    	jb     1026e4 <handle_interrupt+0x174>
  1026c0:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1026c5:	b9 20 00 00 00       	mov    $0x20,%ecx
      outb(0xa0, 0x20);
  1026ca:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1026d1:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1026d8:	00 
  1026d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1026dc:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  1026df:	e8 1c fe ff ff       	call   102500 <outb>
    }
    if (cpu->intr == 0x20) {
  1026e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1026e7:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  1026ee:	0f 85 1b 00 00 00    	jne    10270f <handle_interrupt+0x19f>
      new_cpu = schedule(cpu);
  1026f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1026f7:	89 04 24             	mov    %eax,(%esp)
  1026fa:	e8 b1 03 00 00       	call   102ab0 <schedule>
  1026ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
      tss[1] = (uint32_t) (new_cpu + 1);
  102702:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102705:	05 38 00 00 00       	add    $0x38,%eax
  10270a:	a3 0c 31 10 00       	mov    %eax,0x10310c
  10270f:	b8 20 00 00 00       	mov    $0x20,%eax
    }
    outb(0x20, 0x20);
  102714:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10271b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102722:	00 
  102723:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102726:	e8 d5 fd ff ff       	call   102500 <outb>
		if(handler_set[cpu->intr]) {
  10272b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10272e:	8b 40 1c             	mov    0x1c(%eax),%eax
  102731:	81 3c 85 28 52 10 00 	cmpl   $0x0,0x105228(,%eax,4)
  102738:	00 00 00 00 
  10273c:	0f 84 0d 00 00 00    	je     10274f <handle_interrupt+0x1df>
			handlers[cpu->intr]();
  102742:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102745:	8b 40 1c             	mov    0x1c(%eax),%eax
  102748:	ff 14 85 28 53 10 00 	call   *0x105328(,%eax,4)
		}
  } else if (cpu->intr == 0x30) {
  10274f:	e9 40 00 00 00       	jmp    102794 <handle_interrupt+0x224>
  102754:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102757:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  10275e:	0f 85 13 00 00 00    	jne    102777 <handle_interrupt+0x207>
		new_cpu = syscall(new_cpu);
  102764:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102767:	89 04 24             	mov    %eax,(%esp)
  10276a:	e8 b1 e6 ff ff       	call   100e20 <syscall>
  10276f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  } else {
  102772:	e9 18 00 00 00       	jmp    10278f <handle_interrupt+0x21f>
  102777:	8d 05 bf 41 10 00    	lea    0x1041bf,%eax
    kprintf("Unbekannter Interrupt\n");
  10277d:	89 04 24             	mov    %eax,(%esp)
  102780:	e8 4b e2 ff ff       	call   1009d0 <kprintf>
  102785:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  102788:	fa                   	cli    
  102789:	f4                   	hlt    
    }
  10278a:	e9 f9 ff ff ff       	jmp    102788 <handle_interrupt+0x218>
  10278f:	e9 00 00 00 00       	jmp    102794 <handle_interrupt+0x224>
  102794:	e9 00 00 00 00       	jmp    102799 <handle_interrupt+0x229>
  }  

  return new_cpu;
  102799:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10279c:	83 c4 4c             	add    $0x4c,%esp
  10279f:	5e                   	pop    %esi
  1027a0:	5f                   	pop    %edi
  1027a1:	5b                   	pop    %ebx
  1027a2:	5d                   	pop    %ebp
  1027a3:	c3                   	ret    
  1027a4:	66 90                	xchg   %ax,%ax
  1027a6:	66 90                	xchg   %ax,%ax
  1027a8:	66 90                	xchg   %ax,%ax
  1027aa:	66 90                	xchg   %ax,%ax
  1027ac:	66 90                	xchg   %ax,%ax
  1027ae:	66 90                	xchg   %ax,%ax

001027b0 <memset>:
#include "vmm.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n)
{
  1027b0:	83 ec 10             	sub    $0x10,%esp
  1027b3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
  1027b7:	8b 4c 24 18          	mov    0x18(%esp),%ecx
  1027bb:	8b 54 24 14          	mov    0x14(%esp),%edx
  1027bf:	89 54 24 0c          	mov    %edx,0xc(%esp)
  1027c3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  1027c7:	89 44 24 04          	mov    %eax,0x4(%esp)
    unsigned char* p = buf;
  1027cb:	8b 44 24 0c          	mov    0xc(%esp),%eax
  1027cf:	89 04 24             	mov    %eax,(%esp)

    while (n--) {
  1027d2:	8b 44 24 04          	mov    0x4(%esp),%eax
  1027d6:	89 c1                	mov    %eax,%ecx
  1027d8:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1027de:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1027e2:	3d 00 00 00 00       	cmp    $0x0,%eax
  1027e7:	0f 84 1b 00 00 00    	je     102808 <memset+0x58>
        *p++ = c;
  1027ed:	8b 44 24 08          	mov    0x8(%esp),%eax
  1027f1:	88 c1                	mov    %al,%cl
  1027f3:	8b 04 24             	mov    (%esp),%eax
  1027f6:	89 c2                	mov    %eax,%edx
  1027f8:	81 c2 01 00 00 00    	add    $0x1,%edx
  1027fe:	89 14 24             	mov    %edx,(%esp)
  102801:	88 08                	mov    %cl,(%eax)
    }
  102803:	e9 ca ff ff ff       	jmp    1027d2 <memset+0x22>

    return buf;
  102808:	8b 44 24 0c          	mov    0xc(%esp),%eax
  10280c:	83 c4 10             	add    $0x10,%esp
  10280f:	c3                   	ret    

00102810 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n)
{
  102810:	83 ec 14             	sub    $0x14,%esp
  102813:	8b 44 24 20          	mov    0x20(%esp),%eax
  102817:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
  10281b:	8b 54 24 18          	mov    0x18(%esp),%edx
  10281f:	89 54 24 10          	mov    %edx,0x10(%esp)
  102823:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  102827:	89 44 24 08          	mov    %eax,0x8(%esp)
    unsigned char* d = dest;
  10282b:	8b 44 24 10          	mov    0x10(%esp),%eax
  10282f:	89 44 24 04          	mov    %eax,0x4(%esp)
    const unsigned char* s = src;
  102833:	8b 44 24 0c          	mov    0xc(%esp),%eax
  102837:	89 04 24             	mov    %eax,(%esp)

    while (n--) {
  10283a:	8b 44 24 08          	mov    0x8(%esp),%eax
  10283e:	89 c1                	mov    %eax,%ecx
  102840:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102846:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  10284a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10284f:	0f 84 27 00 00 00    	je     10287c <memcpy+0x6c>
        *d++ = *s++;
  102855:	8b 04 24             	mov    (%esp),%eax
  102858:	89 c1                	mov    %eax,%ecx
  10285a:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102860:	89 0c 24             	mov    %ecx,(%esp)
  102863:	8a 10                	mov    (%eax),%dl
  102865:	8b 44 24 04          	mov    0x4(%esp),%eax
  102869:	89 c1                	mov    %eax,%ecx
  10286b:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102871:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102875:	88 10                	mov    %dl,(%eax)
    }
  102877:	e9 be ff ff ff       	jmp    10283a <memcpy+0x2a>

    return dest;
  10287c:	8b 44 24 10          	mov    0x10(%esp),%eax
  102880:	83 c4 14             	add    $0x14,%esp
  102883:	c3                   	ret    
  102884:	66 90                	xchg   %ax,%ax
  102886:	66 90                	xchg   %ax,%ax
  102888:	66 90                	xchg   %ax,%ax
  10288a:	66 90                	xchg   %ax,%ax
  10288c:	66 90                	xchg   %ax,%ax
  10288e:	66 90                	xchg   %ax,%ax

00102890 <enable_scheduling>:

struct cpu_state* current_pdir_cpu = (void*) STATIC_ALLOC_VADDR + 4096 - sizeof(struct cpu_state);
uint32_t* next_pagedir = (void*) STATIC_ALLOC_VADDR + 0x2000;

void enable_scheduling(void) {
  scheduling_enabled = 1;
  102890:	c7 05 2c 54 10 00 01 	movl   $0x1,0x10542c
  102897:	00 00 00 
}
  10289a:	c3                   	ret    
  10289b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001028a0 <init_task>:

uint32_t init_task(uint32_t task_pagedir, void* entry)
{
  1028a0:	55                   	push   %ebp
  1028a1:	89 e5                	mov    %esp,%ebp
  1028a3:	53                   	push   %ebx
  1028a4:	57                   	push   %edi
  1028a5:	56                   	push   %esi
  1028a6:	81 ec ac 00 00 00    	sub    $0xac,%esp
  1028ac:	8b 45 0c             	mov    0xc(%ebp),%eax
  1028af:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1028b2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1028b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t old_fpd = first_pagedir;
  1028b8:	a1 28 54 10 00       	mov    0x105428,%eax
  1028bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t old_pagedir = vmm_get_current_pagedir();
  1028c0:	e8 3b ea ff ff       	call   101300 <vmm_get_current_pagedir>
  1028c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  uint32_t task_next_pagedir = 0;    
  1028c8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  
  if(first_pagedir == 0) {
  1028cf:	81 3d 28 54 10 00 00 	cmpl   $0x0,0x105428
  1028d6:	00 00 00 
  1028d9:	0f 85 0d 00 00 00    	jne    1028ec <init_task+0x4c>
    first_pagedir = task_pagedir;
  1028df:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028e2:	a3 28 54 10 00       	mov    %eax,0x105428
  }
  1028e7:	e9 10 00 00 00       	jmp    1028fc <init_task+0x5c>
  else
  {
    task_next_pagedir = first_pagedir;
  1028ec:	a1 28 54 10 00       	mov    0x105428,%eax
  1028f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    first_pagedir = task_pagedir;
  1028f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028f7:	a3 28 54 10 00       	mov    %eax,0x105428
  }
  
  vmm_activate_pagedir(task_pagedir);
  1028fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028ff:	89 04 24             	mov    %eax,(%esp)
  102902:	e8 59 ed ff ff       	call   101660 <vmm_activate_pagedir>
  102907:	b8 00 00 00 00       	mov    $0x0,%eax
  
                        vmm_alloc_static(0x0000);
  10290c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102913:	89 45 9c             	mov    %eax,-0x64(%ebp)
  102916:	e8 b5 ec ff ff       	call   1015d0 <vmm_alloc_static>
  10291b:	b9 00 10 00 00       	mov    $0x1000,%ecx
  uint8_t* user_stack = vmm_alloc_static(0x1000);
  102920:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  102927:	89 45 98             	mov    %eax,-0x68(%ebp)
  10292a:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  10292d:	e8 9e ec ff ff       	call   1015d0 <vmm_alloc_static>
  102932:	b9 00 20 00 00       	mov    $0x2000,%ecx
  102937:	89 45 dc             	mov    %eax,-0x24(%ebp)
                        vmm_alloc_static(0x2000);
  10293a:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  102941:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  102944:	e8 87 ec ff ff       	call   1015d0 <vmm_alloc_static>
  102949:	b9 38 00 00 00       	mov    $0x38,%ecx
  10294e:	8d 55 a0             	lea    -0x60(%ebp),%edx
  
  *next_pagedir = task_next_pagedir;
  102951:	8b 75 e0             	mov    -0x20(%ebp),%esi
  102954:	8b 3d 8c 31 10 00    	mov    0x10318c,%edi
  10295a:	89 37                	mov    %esi,(%edi)
      /* Ring-3-Segmentregister */
      .cs  = 0x18 | 0x03,
      .ss  = 0x20 | 0x03,
      
      .eflags = 0x202,
  };
  10295c:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
  102963:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
  10296a:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
  102971:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  102978:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  10297f:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  102986:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10298d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  102994:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  10299b:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10299e:	89 75 c4             	mov    %esi,-0x3c(%ebp)
  1029a1:	c7 45 c8 1b 00 00 00 	movl   $0x1b,-0x38(%ebp)
  1029a8:	c7 45 cc 02 02 00 00 	movl   $0x202,-0x34(%ebp)
  1029af:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1029b2:	81 c6 00 10 00 00    	add    $0x1000,%esi
  1029b8:	89 75 d0             	mov    %esi,-0x30(%ebp)
  1029bb:	c7 45 d4 23 00 00 00 	movl   $0x23,-0x2c(%ebp)
      
  *current_pdir_cpu = new_state;
  1029c2:	8b 35 88 31 10 00    	mov    0x103188,%esi
  1029c8:	89 34 24             	mov    %esi,(%esp)
  1029cb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1029cf:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1029d6:	00 
  1029d7:	89 45 8c             	mov    %eax,-0x74(%ebp)
  1029da:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  1029dd:	e8 2e fe ff ff       	call   102810 <memcpy>
  
  vmm_activate_pagedir(old_pagedir);
  1029e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1029e5:	89 04 24             	mov    %eax,(%esp)
  1029e8:	e8 73 ec ff ff       	call   101660 <vmm_activate_pagedir>
  
  if(old_fpd == 0) {
  1029ed:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  1029f4:	0f 85 5d 00 00 00    	jne    102a57 <init_task+0x1b7>
  1029fa:	b8 00 00 00 00       	mov    $0x0,%eax
    vmm_alloc_static(0x0000);
  1029ff:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102a06:	89 45 84             	mov    %eax,-0x7c(%ebp)
  102a09:	e8 c2 eb ff ff       	call   1015d0 <vmm_alloc_static>
  102a0e:	b9 00 10 00 00       	mov    $0x1000,%ecx
    vmm_alloc_static(0x1000);
  102a13:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  102a1a:	89 45 80             	mov    %eax,-0x80(%ebp)
  102a1d:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  102a23:	e8 a8 eb ff ff       	call   1015d0 <vmm_alloc_static>
  102a28:	b9 00 20 00 00       	mov    $0x2000,%ecx
    vmm_alloc_static(0x2000);
  102a2d:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  102a34:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  102a3a:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
  102a40:	e8 8b eb ff ff       	call   1015d0 <vmm_alloc_static>
    *next_pagedir = 0;
  102a45:	8b 0d 8c 31 10 00    	mov    0x10318c,%ecx
  102a4b:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
  102a51:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  102a57:	8d 05 d6 41 10 00    	lea    0x1041d6,%eax
  }
  
  kprintf("Init Task PD:%x FPD:%x CPD:%x TNPD:%x CNPD:%x \n", task_pagedir, old_fpd, old_pagedir, task_next_pagedir, *next_pagedir);
  102a5d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102a60:	8b 55 e8             	mov    -0x18(%ebp),%edx
  102a63:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  102a66:	8b 7d e0             	mov    -0x20(%ebp),%edi
  102a69:	8b 1d 8c 31 10 00    	mov    0x10318c,%ebx
  102a6f:	8b 1b                	mov    (%ebx),%ebx
  102a71:	89 04 24             	mov    %eax,(%esp)
  102a74:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a78:	89 54 24 08          	mov    %edx,0x8(%esp)
  102a7c:	89 74 24 0c          	mov    %esi,0xc(%esp)
  102a80:	89 7c 24 10          	mov    %edi,0x10(%esp)
  102a84:	89 5c 24 14          	mov    %ebx,0x14(%esp)
  102a88:	e8 43 df ff ff       	call   1009d0 <kprintf>
  
  return task_pagedir;
  102a8d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102a90:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  102a96:	89 c8                	mov    %ecx,%eax
  102a98:	81 c4 ac 00 00 00    	add    $0xac,%esp
  102a9e:	5e                   	pop    %esi
  102a9f:	5f                   	pop    %edi
  102aa0:	5b                   	pop    %ebx
  102aa1:	5d                   	pop    %ebp
  102aa2:	c3                   	ret    
  102aa3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102aaa:	84 00 00 00 00 00 

00102ab0 <schedule>:
}

struct cpu_state* schedule(struct cpu_state* cpu)
{
  102ab0:	55                   	push   %ebp
  102ab1:	89 e5                	mov    %esp,%ebp
  102ab3:	56                   	push   %esi
  102ab4:	83 ec 34             	sub    $0x34,%esp
  102ab7:	8b 45 08             	mov    0x8(%ebp),%eax
  102aba:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t newCPU = 0;
  102abd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  
  if(first_pagedir != 0 && scheduling_enabled) {  
  102ac4:	81 3d 28 54 10 00 00 	cmpl   $0x0,0x105428
  102acb:	00 00 00 
  102ace:	0f 84 79 00 00 00    	je     102b4d <schedule+0x9d>
  102ad4:	81 3d 2c 54 10 00 00 	cmpl   $0x0,0x10542c
  102adb:	00 00 00 
  102ade:	0f 84 69 00 00 00    	je     102b4d <schedule+0x9d>
    uint32_t next = *next_pagedir;
  102ae4:	a1 8c 31 10 00       	mov    0x10318c,%eax
  102ae9:	8b 00                	mov    (%eax),%eax
  102aeb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(next == 0) next = first_pagedir;
  102aee:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  102af5:	0f 85 08 00 00 00    	jne    102b03 <schedule+0x53>
  102afb:	a1 28 54 10 00       	mov    0x105428,%eax
  102b00:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    newCPU = 1;
  102b03:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    
    kprintf("Schedule CPU:%x CPD:%x NPD:%x CPDCPU:%x \n", cpu, vmm_get_current_pagedir(), next, current_pdir_cpu);
  102b0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b0d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102b10:	e8 eb e7 ff ff       	call   101300 <vmm_get_current_pagedir>
  102b15:	8d 0d 06 42 10 00    	lea    0x104206,%ecx
  102b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102b1e:	8b 35 88 31 10 00    	mov    0x103188,%esi
  102b24:	89 0c 24             	mov    %ecx,(%esp)
  102b27:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102b2a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b2e:	89 44 24 08          	mov    %eax,0x8(%esp)
  102b32:	89 54 24 0c          	mov    %edx,0xc(%esp)
  102b36:	89 74 24 10          	mov    %esi,0x10(%esp)
  102b3a:	e8 91 de ff ff       	call   1009d0 <kprintf>
            
    vmm_activate_pagedir(next);
  102b3f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102b42:	89 0c 24             	mov    %ecx,(%esp)
  102b45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102b48:	e8 13 eb ff ff       	call   101660 <vmm_activate_pagedir>
  }
  
  if(newCPU != 0) return current_pdir_cpu;
  102b4d:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  102b54:	0f 84 0d 00 00 00    	je     102b67 <schedule+0xb7>
  102b5a:	a1 88 31 10 00       	mov    0x103188,%eax
  102b5f:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102b62:	e9 06 00 00 00       	jmp    102b6d <schedule+0xbd>
  return cpu;
  102b67:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b6a:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  102b6d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102b70:	83 c4 34             	add    $0x34,%esp
  102b73:	5e                   	pop    %esi
  102b74:	5d                   	pop    %ebp
  102b75:	c3                   	ret    
  102b76:	66 90                	xchg   %ax,%ax
  102b78:	66 90                	xchg   %ax,%ax
  102b7a:	66 90                	xchg   %ax,%ax
  102b7c:	66 90                	xchg   %ax,%ax
  102b7e:	66 90                	xchg   %ax,%ax

00102b80 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  102b80:	55                   	push   %ebp
  102b81:	89 e5                	mov    %esp,%ebp
  102b83:	83 ec 28             	sub    $0x28,%esp
  102b86:	8b 45 08             	mov    0x8(%ebp),%eax
  102b89:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  102b8c:	e8 ef dd ff ff       	call   100980 <clrscr>
  pmm_init(mb_info);
  102b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102b94:	89 04 24             	mov    %eax,(%esp)
  102b97:	e8 24 d6 ff ff       	call   1001c0 <pmm_init>
  102b9c:	8d 05 30 42 10 00    	lea    0x104230,%eax
  102ba2:	8d 0d 53 42 10 00    	lea    0x104253,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  102ba8:	89 04 24             	mov    %eax,(%esp)
  102bab:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102baf:	e8 1c de ff ff       	call   1009d0 <kprintf>
  102bb4:	8d 0d 5d 42 10 00    	lea    0x10425d,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  102bba:	89 0c 24             	mov    %ecx,(%esp)
  102bbd:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102bc0:	e8 0b de ff ff       	call   1009d0 <kprintf>
  102bc5:	8d 0d 9c 42 10 00    	lea    0x10429c,%ecx

	kprintf("Initializing GDT...\n");
  102bcb:	89 0c 24             	mov    %ecx,(%esp)
  102bce:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102bd1:	e8 fa dd ff ff       	call   1009d0 <kprintf>
	
	init_gdt();
  102bd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102bd9:	e8 d2 e5 ff ff       	call   1011b0 <init_gdt>
  102bde:	8d 05 b1 42 10 00    	lea    0x1042b1,%eax

	kprintf("Initializing IDT...\n");
  102be4:	89 04 24             	mov    %eax,(%esp)
  102be7:	e8 e4 dd ff ff       	call   1009d0 <kprintf>
  102bec:	8d 0d c6 42 10 00    	lea    0x1042c6,%ecx

	init_idt();
  102bf2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102bf5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102bf8:	e8 03 ed ff ff       	call   101900 <init_idt>

	kprintf("init_drivers()\n");
  102bfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102c00:	89 04 24             	mov    %eax,(%esp)
  102c03:	e8 c8 dd ff ff       	call   1009d0 <kprintf>

	init_drivers();
  102c08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102c0b:	e8 30 00 00 00       	call   102c40 <init_drivers>
  102c10:	8d 05 d6 42 10 00    	lea    0x1042d6,%eax
	
	kprintf("switching to kernel_main()\n");
  102c16:	89 04 24             	mov    %eax,(%esp)
  102c19:	e8 b2 dd ff ff       	call   1009d0 <kprintf>

	kernel_main(mb_info);
  102c1e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102c21:	89 0c 24             	mov    %ecx,(%esp)
  102c24:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102c27:	e8 a4 e3 ff ff       	call   100fd0 <kernel_main>

  return;
  102c2c:	83 c4 28             	add    $0x28,%esp
  102c2f:	5d                   	pop    %ebp
  102c30:	c3                   	ret    
  102c31:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102c38:	0f 1f 84 00 00 00 00 
  102c3f:	00 

00102c40 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  102c40:	55                   	push   %ebp
  102c41:	89 e5                	mov    %esp,%ebp
	init_keyboard_drv();
  102c43:	83 ec 08             	sub    $0x8,%esp
  102c46:	e8 a5 dc ff ff       	call   1008f0 <init_keyboard_drv>
}
  102c4b:	83 c4 08             	add    $0x8,%esp
  102c4e:	5d                   	pop    %ebp
  102c4f:	c3                   	ret    

00102c50 <_start>:
  102c50:	bc 30 74 10 00       	mov    $0x107430,%esp
  102c55:	53                   	push   %ebx
  102c56:	e8 25 ff ff ff       	call   102b80 <init>

00102c5b <_stop>:
  102c5b:	fa                   	cli    
  102c5c:	f4                   	hlt    
  102c5d:	eb fc                	jmp    102c5b <_stop>
