
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 bc                	in     $0xbc,%al

0010000c <_start>:
  10000c:	bc 00 80 10 00       	mov    $0x108000,%esp
  100011:	53                   	push   %ebx
  100012:	e8 09 00 00 00       	call   100020 <init>

00100017 <_stop>:
  100017:	fa                   	cli    
  100018:	f4                   	hlt    
  100019:	eb fc                	jmp    100017 <_stop>
  10001b:	66 90                	xchg   %ax,%ax
  10001d:	66 90                	xchg   %ax,%ax
  10001f:	90                   	nop

00100020 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  100020:	55                   	push   %ebp
  100021:	89 e5                	mov    %esp,%ebp
  100023:	83 ec 28             	sub    $0x28,%esp
  100026:	8b 45 08             	mov    0x8(%ebp),%eax
  100029:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10002c:	e8 7f 24 00 00       	call   1024b0 <clrscr>
  pmm_init(mb_info);
  100031:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100034:	89 04 24             	mov    %eax,(%esp)
  100037:	e8 f4 04 00 00       	call   100530 <pmm_init>
  10003c:	8d 05 32 50 10 00    	lea    0x105032,%eax
  100042:	8d 0d 55 50 10 00    	lea    0x105055,%ecx
  
	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100048:	89 04 24             	mov    %eax,(%esp)
  10004b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10004f:	e8 dc 24 00 00       	call   102530 <kprintf>
  100054:	8d 0d 69 50 10 00    	lea    0x105069,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10005a:	89 0c 24             	mov    %ecx,(%esp)
  10005d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100060:	e8 cb 24 00 00       	call   102530 <kprintf>
  100065:	8d 0d a8 50 10 00    	lea    0x1050a8,%ecx

	kprintf("Initializing GDT...\n");
  10006b:	89 0c 24             	mov    %ecx,(%esp)
  10006e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100071:	e8 ba 24 00 00       	call   102530 <kprintf>
	
	init_gdt();
  100076:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100079:	e8 22 30 00 00       	call   1030a0 <init_gdt>
  10007e:	8d 05 bd 50 10 00    	lea    0x1050bd,%eax

	kprintf("Initializing IDT...\n");
  100084:	89 04 24             	mov    %eax,(%esp)
  100087:	e8 a4 24 00 00       	call   102530 <kprintf>
  10008c:	8d 0d d2 50 10 00    	lea    0x1050d2,%ecx

	init_idt();
  100092:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100095:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100098:	e8 d3 14 00 00       	call   101570 <init_idt>

	kprintf("Initializing Drivers...\n");
  10009d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1000a0:	89 04 24             	mov    %eax,(%esp)
  1000a3:	e8 88 24 00 00       	call   102530 <kprintf>

	init_drivers();
  1000a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1000ab:	e8 30 00 00 00       	call   1000e0 <init_drivers>
  1000b0:	8d 05 eb 50 10 00    	lea    0x1050eb,%eax
	
	kprintf("Initializing Kernel...\n");
  1000b6:	89 04 24             	mov    %eax,(%esp)
  1000b9:	e8 72 24 00 00       	call   102530 <kprintf>

	kernel_main(mb_info);
  1000be:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1000c1:	89 0c 24             	mov    %ecx,(%esp)
  1000c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000c7:	e8 e4 29 00 00       	call   102ab0 <kernel_main>

  return;
  1000cc:	83 c4 28             	add    $0x28,%esp
  1000cf:	5d                   	pop    %ebp
  1000d0:	c3                   	ret    
  1000d1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1000d8:	0f 1f 84 00 00 00 00 
  1000df:	00 

001000e0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
	init_keyboard_drv();
  1000e3:	83 ec 08             	sub    $0x8,%esp
  1000e6:	e8 05 02 00 00       	call   1002f0 <init_keyboard_drv>
}
  1000eb:	83 c4 08             	add    $0x8,%esp
  1000ee:	5d                   	pop    %ebp
  1000ef:	c3                   	ret    

001000f0 <translate_scancode>:

static uint8_t buffer[4096];
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000f0:	55                   	push   %ebp
  1000f1:	89 e5                	mov    %esp,%ebp
  1000f3:	83 ec 28             	sub    $0x28,%esp
  1000f6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000fa:	66 89 c1             	mov    %ax,%cx
  1000fd:	8b 45 08             	mov    0x8(%ebp),%eax
  100100:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100103:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  100107:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  10010b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10010e:	89 c2                	mov    %eax,%edx
  100110:	83 ea 02             	sub    $0x2,%edx
  100113:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100116:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100119:	0f 84 4f 00 00 00    	je     10016e <translate_scancode+0x7e>
  10011f:	e9 00 00 00 00       	jmp    100124 <translate_scancode+0x34>
  100124:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100127:	83 e8 01             	sub    $0x1,%eax
  10012a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10012d:	0f 84 28 00 00 00    	je     10015b <translate_scancode+0x6b>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x48>
  100138:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10013b:	85 c0                	test   %eax,%eax
  10013d:	0f 85 54 00 00 00    	jne    100197 <translate_scancode+0xa7>
  100143:	e9 00 00 00 00       	jmp    100148 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100148:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014c:	8a 0c 05 00 40 10 00 	mov    0x104000(,%eax,1),%cl
  100153:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100156:	e9 3c 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10015b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10015f:	8a 0c 05 80 40 10 00 	mov    0x104080(,%eax,1),%cl
  100166:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100169:	e9 29 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10016e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100172:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100177:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10017a:	0f 85 0e 00 00 00    	jne    10018e <translate_scancode+0x9e>
  100180:	e9 00 00 00 00       	jmp    100185 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100185:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100189:	e9 04 00 00 00       	jmp    100192 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10018e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100192:	e9 00 00 00 00       	jmp    100197 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100197:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10019b:	3d 00 00 00 00       	cmp    $0x0,%eax
  1001a0:	0f 85 20 00 00 00    	jne    1001c6 <translate_scancode+0xd6>
  1001a6:	8d 05 03 51 10 00    	lea    0x105103,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1001ac:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001b3:	89 04 24             	mov    %eax,(%esp)
  1001b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001ba:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001be:	e8 6d 23 00 00       	call   102530 <kprintf>
  1001c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001c6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ca:	83 c4 28             	add    $0x28,%esp
  1001cd:	5d                   	pop    %ebp
  1001ce:	c3                   	ret    
  1001cf:	90                   	nop

001001d0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
  return;
  1001d3:	5d                   	pop    %ebp
  1001d4:	c3                   	ret    
  1001d5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1001dc:	00 00 00 00 

001001e0 <getc>:
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}

char getc() {
  1001e0:	55                   	push   %ebp
  1001e1:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  1001e3:	83 ec 08             	sub    $0x8,%esp
  1001e6:	a0 0a a0 10 00       	mov    0x10a00a,%al
  1001eb:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1001ee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001f8:	3b 05 0c b0 10 00    	cmp    0x10b00c,%eax
  1001fe:	0f 8d 24 00 00 00    	jge    100228 <getc+0x48>
		buffer[i] = buffer[i+1];	
  100204:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100207:	8a 0c 05 0b a0 10 00 	mov    0x10a00b(,%eax,1),%cl
  10020e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100211:	88 0c 05 0a a0 10 00 	mov    %cl,0x10a00a(,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100218:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10021b:	05 01 00 00 00       	add    $0x1,%eax
  100220:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100223:	e9 cd ff ff ff       	jmp    1001f5 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100228:	a1 0c b0 10 00       	mov    0x10b00c,%eax
  10022d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100232:	a3 0c b0 10 00       	mov    %eax,0x10b00c

	return ret;
  100237:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10023b:	83 c4 08             	add    $0x8,%esp
  10023e:	5d                   	pop    %ebp
  10023f:	c3                   	ret    

00100240 <send_command>:
}

void send_command(uint8_t command) {
  100240:	55                   	push   %ebp
  100241:	89 e5                	mov    %esp,%ebp
  100243:	83 ec 18             	sub    $0x18,%esp
  100246:	8a 45 08             	mov    0x8(%ebp),%al
  100249:	88 45 ff             	mov    %al,-0x1(%ebp)
  10024c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100251:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100258:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10025b:	e8 40 00 00 00       	call   1002a0 <inb>
  100260:	0f b6 c8             	movzbl %al,%ecx
  100263:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100269:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10026f:	0f 84 05 00 00 00    	je     10027a <send_command+0x3a>
  100275:	e9 d2 ff ff ff       	jmp    10024c <send_command+0xc>
  10027a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10027f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100286:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10028a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10028e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100291:	e8 2a 00 00 00       	call   1002c0 <outb>
}
  100296:	83 c4 18             	add    $0x18,%esp
  100299:	5d                   	pop    %ebp
  10029a:	c3                   	ret    
  10029b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001002a0 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  1002a0:	55                   	push   %ebp
  1002a1:	89 e5                	mov    %esp,%ebp
  1002a3:	50                   	push   %eax
  1002a4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002a8:	66 89 c1             	mov    %ax,%cx
  1002ab:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  1002af:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002b3:	ec                   	in     (%dx),%al
  1002b4:	88 45 fd             	mov    %al,-0x3(%ebp)
	return result;
  1002b7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  1002bb:	83 c4 04             	add    $0x4,%esp
  1002be:	5d                   	pop    %ebp
  1002bf:	c3                   	ret    

001002c0 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  1002c0:	55                   	push   %ebp
  1002c1:	89 e5                	mov    %esp,%ebp
  1002c3:	50                   	push   %eax
  1002c4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002c8:	66 89 c1             	mov    %ax,%cx
  1002cb:	8a 55 0c             	mov    0xc(%ebp),%dl
  1002ce:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  1002d2:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1002d5:	8a 45 fd             	mov    -0x3(%ebp),%al
  1002d8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002dc:	ee                   	out    %al,(%dx)
}
  1002dd:	83 c4 04             	add    $0x4,%esp
  1002e0:	5d                   	pop    %ebp
  1002e1:	c3                   	ret    
  1002e2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1002e9:	1f 84 00 00 00 00 00 

001002f0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1002f0:	55                   	push   %ebp
  1002f1:	89 e5                	mov    %esp,%ebp
  1002f3:	83 ec 28             	sub    $0x28,%esp
  1002f6:	b8 21 00 00 00       	mov    $0x21,%eax
  1002fb:	8d 0d d0 01 10 00    	lea    0x1001d0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  100301:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100308:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10030c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10030f:	e8 8c 1e 00 00       	call   1021a0 <register_intr_handler>
  100314:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100319:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100320:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100323:	e8 78 ff ff ff       	call   1002a0 <inb>
  100328:	0f b6 c8             	movzbl %al,%ecx
  10032b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100331:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100337:	0f 84 1c 00 00 00    	je     100359 <init_keyboard_drv+0x69>
  10033d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100342:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100349:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10034c:	e8 4f ff ff ff       	call   1002a0 <inb>
	}
  100351:	88 45 f3             	mov    %al,-0xd(%ebp)
  100354:	e9 bb ff ff ff       	jmp    100314 <init_keyboard_drv+0x24>
  100359:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10035e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100365:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100368:	e8 d3 fe ff ff       	call   100240 <send_command>

	init_done = 1;
  10036d:	c7 05 10 b0 10 00 01 	movl   $0x1,0x10b010
  100374:	00 00 00 
}
  100377:	83 c4 28             	add    $0x28,%esp
  10037a:	5d                   	pop    %ebp
  10037b:	c3                   	ret    
  10037c:	66 90                	xchg   %ax,%ax
  10037e:	66 90                	xchg   %ax,%ax

00100380 <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  100380:	55                   	push   %ebp
  100381:	89 e5                	mov    %esp,%ebp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100383:	56                   	push   %esi
  100384:	83 ec 10             	sub    $0x10,%esp
  100387:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10038e:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  100395:	0f 8d b7 00 00 00    	jge    100452 <pmm_alloc+0xd2>
		if(allocatable[i]) {
  10039b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10039e:	81 3c 85 3c b4 10 00 	cmpl   $0x0,0x10b43c(,%eax,4)
  1003a5:	00 00 00 00 
  1003a9:	0f 84 8e 00 00 00    	je     10043d <pmm_alloc+0xbd>
			int s;
			for(s = 0; s < 32; s++) {
  1003af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1003b6:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  1003bd:	0f 8d 75 00 00 00    	jge    100438 <pmm_alloc+0xb8>
  1003c3:	b8 01 00 00 00       	mov    $0x1,%eax
				if(allocatable[i] & (1 << s)) {
  1003c8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1003cb:	8b 0c 8d 3c b4 10 00 	mov    0x10b43c(,%ecx,4),%ecx
  1003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1003d5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1003d8:	89 d1                	mov    %edx,%ecx
  1003da:	d3 e0                	shl    %cl,%eax
  1003dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1003df:	21 c2                	and    %eax,%edx
  1003e1:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  1003e7:	0f 84 36 00 00 00    	je     100423 <pmm_alloc+0xa3>
  1003ed:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  1003f2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1003f5:	d3 e0                	shl    %cl,%eax
  1003f7:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  1003fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1003ff:	8b 34 95 3c b4 10 00 	mov    0x10b43c(,%edx,4),%esi
  100406:	21 c6                	and    %eax,%esi
  100408:	89 34 95 3c b4 10 00 	mov    %esi,0x10b43c(,%edx,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  10040f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100412:	c1 e0 05             	shl    $0x5,%eax
  100415:	03 45 f0             	add    -0x10(%ebp),%eax
  100418:	c1 e0 0c             	shl    $0xc,%eax
  10041b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10041e:	e9 36 00 00 00       	jmp    100459 <pmm_alloc+0xd9>
				}
			}
  100423:	e9 00 00 00 00       	jmp    100428 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100428:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10042b:	05 01 00 00 00       	add    $0x1,%eax
  100430:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100433:	e9 7e ff ff ff       	jmp    1003b6 <pmm_alloc+0x36>
				if(allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
  100438:	e9 00 00 00 00       	jmp    10043d <pmm_alloc+0xbd>
	}
  10043d:	e9 00 00 00 00       	jmp    100442 <pmm_alloc+0xc2>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100442:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100445:	05 01 00 00 00       	add    $0x1,%eax
  10044a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10044d:	e9 3c ff ff ff       	jmp    10038e <pmm_alloc+0xe>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  100452:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  100459:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10045c:	83 c4 10             	add    $0x10,%esp
  10045f:	5e                   	pop    %esi
  100460:	5d                   	pop    %ebp
  100461:	c3                   	ret    
  100462:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100469:	1f 84 00 00 00 00 00 

00100470 <pmm_free>:

void pmm_free(void* addr) {
  100470:	55                   	push   %ebp
  100471:	89 e5                	mov    %esp,%ebp
  100473:	56                   	push   %esi
  100474:	83 ec 14             	sub    $0x14,%esp
  100477:	8b 45 08             	mov    0x8(%ebp),%eax
  10047a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10047f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100482:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100485:	c1 e8 0c             	shr    $0xc,%eax
  100488:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10048b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10048e:	25 1f 00 00 00       	and    $0x1f,%eax
  100493:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  100496:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100499:	c1 e8 05             	shr    $0x5,%eax
  10049c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  10049f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1004a2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1004a5:	89 c1                	mov    %eax,%ecx
  1004a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004aa:	d3 e0                	shl    %cl,%eax
  1004ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1004af:	8b 34 95 3c b4 10 00 	mov    0x10b43c(,%edx,4),%esi
  1004b6:	09 c6                	or     %eax,%esi
  1004b8:	89 34 95 3c b4 10 00 	mov    %esi,0x10b43c(,%edx,4)
}
  1004bf:	83 c4 14             	add    $0x14,%esp
  1004c2:	5e                   	pop    %esi
  1004c3:	5d                   	pop    %ebp
  1004c4:	c3                   	ret    
  1004c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1004cc:	00 00 00 00 

001004d0 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
  1004d3:	56                   	push   %esi
  1004d4:	83 ec 14             	sub    $0x14,%esp
  1004d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1004da:	b9 01 00 00 00       	mov    $0x1,%ecx
  1004df:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  1004e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1004e5:	c1 e8 0c             	shr    $0xc,%eax
  1004e8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  1004eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004ee:	25 1f 00 00 00       	and    $0x1f,%eax
  1004f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  1004f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004f9:	c1 e8 05             	shr    $0x5,%eax
  1004fc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  1004ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100502:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100505:	89 c1                	mov    %eax,%ecx
  100507:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10050a:	d3 e0                	shl    %cl,%eax
  10050c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100511:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100514:	8b 34 95 3c b4 10 00 	mov    0x10b43c(,%edx,4),%esi
  10051b:	21 c6                	and    %eax,%esi
  10051d:	89 34 95 3c b4 10 00 	mov    %esi,0x10b43c(,%edx,4)
}
  100524:	83 c4 14             	add    $0x14,%esp
  100527:	5e                   	pop    %esi
  100528:	5d                   	pop    %ebp
  100529:	c3                   	ret    
  10052a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100530 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100530:	55                   	push   %ebp
  100531:	89 e5                	mov    %esp,%ebp
  100533:	53                   	push   %ebx
  100534:	57                   	push   %edi
  100535:	56                   	push   %esi
  100536:	83 ec 5c             	sub    $0x5c,%esp
  100539:	8b 45 08             	mov    0x8(%ebp),%eax
  10053c:	8d 0d 29 51 10 00    	lea    0x105129,%ecx
  100542:	8d 15 3c b4 10 00    	lea    0x10b43c,%edx
  100548:	89 d6                	mov    %edx,%esi
  10054a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  100550:	89 d7                	mov    %edx,%edi
  100552:	bb 00 00 00 00       	mov    $0x0,%ebx
  100557:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10055a:	b8 00 00 02 00       	mov    $0x20000,%eax
  10055f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100562:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100565:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  100568:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10056b:	8b 40 30             	mov    0x30(%eax),%eax
  10056e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
  100571:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100574:	8b 40 30             	mov    0x30(%eax),%eax
  100577:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10057a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10057d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100580:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100583:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  100586:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  100589:	03 41 2c             	add    0x2c(%ecx),%eax
  10058c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  10058f:	89 3c 24             	mov    %edi,(%esp)
  100592:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100599:	00 
  10059a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1005a1:	00 
  1005a2:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  1005a5:	89 55 b8             	mov    %edx,-0x48(%ebp)
  1005a8:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  1005ab:	e8 c0 28 00 00       	call   102e70 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  1005b0:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1005b3:	89 04 24             	mov    %eax,(%esp)
  1005b6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  1005b9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1005bd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1005c0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1005c4:	e8 67 1f 00 00       	call   102530 <kprintf>
  1005c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
	 
	while (mmap < mmap_end) {
  1005cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005cf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  1005d2:	0f 83 60 00 00 00    	jae    100638 <pmm_init+0x108>
		  if (mmap->mm_type == 1) {
  1005d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005db:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  1005e2:	0f 85 40 00 00 00    	jne    100628 <pmm_init+0xf8>
		      uintptr_t addr = mmap->mm_base_addr;
  1005e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005eb:	8b 40 04             	mov    0x4(%eax),%eax
  1005ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  1005f1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1005f4:	8b 49 0c             	mov    0xc(%ecx),%ecx
  1005f7:	01 c8                	add    %ecx,%eax
  1005f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 
		      while (addr < end_addr) {
  1005fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1005ff:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100602:	0f 83 1b 00 00 00    	jae    100623 <pmm_init+0xf3>
		          pmm_free((void*) addr);
  100608:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10060b:	89 04 24             	mov    %eax,(%esp)
  10060e:	e8 5d fe ff ff       	call   100470 <pmm_free>
		          addr += 0x1000;
  100613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100616:	05 00 10 00 00       	add    $0x1000,%eax
  10061b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      }
  10061e:	e9 d9 ff ff ff       	jmp    1005fc <pmm_init+0xcc>
		  }
  100623:	e9 00 00 00 00       	jmp    100628 <pmm_init+0xf8>
		  mmap++;
  100628:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10062b:	05 18 00 00 00       	add    $0x18,%eax
  100630:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  100633:	e9 94 ff ff ff       	jmp    1005cc <pmm_init+0x9c>
  100638:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10063e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100641:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  100647:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  10064a:	0f 83 1b 00 00 00    	jae    10066b <pmm_init+0x13b>
		  pmm_mark_used((void*) addr);
  100650:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100653:	89 04 24             	mov    %eax,(%esp)
  100656:	e8 75 fe ff ff       	call   1004d0 <pmm_mark_used>
		  addr += 0x1000;
  10065b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10065e:	05 00 10 00 00       	add    $0x1000,%eax
  100663:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  100666:	e9 d6 ff ff ff       	jmp    100641 <pmm_init+0x111>

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  10066b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10066e:	8b 40 18             	mov    0x18(%eax),%eax
  100671:	89 45 d8             	mov    %eax,-0x28(%ebp)

  pmm_mark_used(mb_info);
  100674:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100677:	89 04 24             	mov    %eax,(%esp)
  10067a:	e8 51 fe ff ff       	call   1004d0 <pmm_mark_used>
  pmm_mark_used(modules);
  10067f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100682:	89 04 24             	mov    %eax,(%esp)
  100685:	e8 46 fe ff ff       	call   1004d0 <pmm_mark_used>

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  10068a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  100691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100694:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100697:	3b 41 14             	cmp    0x14(%ecx),%eax
  10069a:	0f 83 59 00 00 00    	jae    1006f9 <pmm_init+0x1c9>
      addr = (uintptr_t)modules[i].start;
  1006a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1006a3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1006a6:	c1 e0 04             	shl    $0x4,%eax
  1006a9:	01 c1                	add    %eax,%ecx
  1006ab:	8b 01                	mov    (%ecx),%eax
  1006ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  1006b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006b3:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  1006b6:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1006b9:	c1 e1 04             	shl    $0x4,%ecx
  1006bc:	01 ca                	add    %ecx,%edx
  1006be:	8b 4a 04             	mov    0x4(%edx),%ecx
  1006c1:	39 c8                	cmp    %ecx,%eax
  1006c3:	0f 83 1b 00 00 00    	jae    1006e4 <pmm_init+0x1b4>
          pmm_mark_used((void*) addr);
  1006c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006cc:	89 04 24             	mov    %eax,(%esp)
  1006cf:	e8 fc fd ff ff       	call   1004d0 <pmm_mark_used>
          addr += 0x1000;
  1006d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006d7:	05 00 10 00 00       	add    $0x1000,%eax
  1006dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
      }
  1006df:	e9 cc ff ff ff       	jmp    1006b0 <pmm_init+0x180>
  }
  1006e4:	e9 00 00 00 00       	jmp    1006e9 <pmm_init+0x1b9>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1006e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1006ec:	05 01 00 00 00       	add    $0x1,%eax
  1006f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1006f4:	e9 98 ff ff ff       	jmp    100691 <pmm_init+0x161>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  1006f9:	83 c4 5c             	add    $0x5c,%esp
  1006fc:	5e                   	pop    %esi
  1006fd:	5f                   	pop    %edi
  1006fe:	5b                   	pop    %ebx
  1006ff:	5d                   	pop    %ebp
  100700:	c3                   	ret    
  100701:	66 90                	xchg   %ax,%ax
  100703:	66 90                	xchg   %ax,%ax
  100705:	66 90                	xchg   %ax,%ax
  100707:	66 90                	xchg   %ax,%ax
  100709:	66 90                	xchg   %ax,%ax
  10070b:	66 90                	xchg   %ax,%ax
  10070d:	66 90                	xchg   %ax,%ax
  10070f:	90                   	nop

00100710 <vmm_get_current_pagedir>:
  }
  
  vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  100710:	55                   	push   %ebp
  100711:	89 e5                	mov    %esp,%ebp
  return active_pagedir;
  100713:	a1 14 b0 10 00       	mov    0x10b014,%eax
  100718:	5d                   	pop    %ebp
  100719:	c3                   	ret    
  10071a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100720 <vmm_fork_current>:
}

uint32_t vmm_fork_current(void)
{
  100720:	55                   	push   %ebp
  100721:	89 e5                	mov    %esp,%ebp
  100723:	56                   	push   %esi
  100724:	83 ec 34             	sub    $0x34,%esp
  100727:	8d 45 f8             	lea    -0x8(%ebp),%eax
  uint32_t phys_pagedir, paddr, i;
  uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  10072a:	89 04 24             	mov    %eax,(%esp)
  10072d:	e8 ce 00 00 00       	call   100800 <vmm_create_vpdraw>
  100732:	89 45 ec             	mov    %eax,-0x14(%ebp)
  
  for(i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  100735:	c7 45 f0 00 10 40 20 	movl   $0x20401000,-0x10(%ebp)
  10073c:	81 7d f0 00 f0 ff ff 	cmpl   $0xfffff000,-0x10(%ebp)
  100743:	0f 83 98 00 00 00    	jae    1007e1 <vmm_fork_current+0xc1>
    if(active_pagetables[i >> 12] & PT_PRESENT) {      
  100749:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10074c:	c1 e8 0c             	shr    $0xc,%eax
  10074f:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100755:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100758:	25 01 00 00 00       	and    $0x1,%eax
  10075d:	3d 00 00 00 00       	cmp    $0x0,%eax
  100762:	0f 84 64 00 00 00    	je     1007cc <vmm_fork_current+0xac>
  100768:	8d 45 f4             	lea    -0xc(%ebp),%eax
      void* newp = vmm_alloc_user(&paddr);
  10076b:	89 04 24             	mov    %eax,(%esp)
  10076e:	e8 4d 03 00 00       	call   100ac0 <vmm_alloc_user>
  100773:	b9 00 00 00 00       	mov    $0x0,%ecx
  100778:	ba 00 10 00 00       	mov    $0x1000,%edx
  10077d:	89 45 e8             	mov    %eax,-0x18(%ebp)
      
      memcpy(newp, (void*)i, 0x1000);
  100780:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100783:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100786:	89 04 24             	mov    %eax,(%esp)
  100789:	89 74 24 04          	mov    %esi,0x4(%esp)
  10078d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  100794:	00 
  100795:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  100798:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10079b:	e8 30 27 00 00       	call   102ed0 <memcpy>
      map_address_context(pdptr, i, paddr, 0);
  1007a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1007a3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1007a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1007a9:	89 04 24             	mov    %eax,(%esp)
  1007ac:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1007b0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1007b4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1007bb:	00 
  1007bc:	e8 4f 03 00 00       	call   100b10 <map_address_context>
      
      vmm_unmap(newp);
  1007c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1007c4:	89 04 24             	mov    %eax,(%esp)
  1007c7:	e8 d4 03 00 00       	call   100ba0 <vmm_unmap>
    }
    
  }
  1007cc:	e9 00 00 00 00       	jmp    1007d1 <vmm_fork_current+0xb1>
uint32_t vmm_fork_current(void)
{
  uint32_t phys_pagedir, paddr, i;
  uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  
  for(i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  1007d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007d4:	05 00 10 00 00       	add    $0x1000,%eax
  1007d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1007dc:	e9 5b ff ff ff       	jmp    10073c <vmm_fork_current+0x1c>
      vmm_unmap(newp);
    }
    
  }
    
  vmm_free_pdptr(pdptr);
  1007e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1007e4:	89 04 24             	mov    %eax,(%esp)
  1007e7:	e8 24 04 00 00       	call   100c10 <vmm_free_pdptr>
                    
  return phys_pagedir;
  1007ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1007ef:	83 c4 34             	add    $0x34,%esp
  1007f2:	5e                   	pop    %esi
  1007f3:	5d                   	pop    %ebp
  1007f4:	c3                   	ret    
  1007f5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1007fc:	00 00 00 00 

00100800 <vmm_create_vpdraw>:
uint32_t*           active_pagetables = (uint32_t*)(ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context    = (void*)(ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  100800:	55                   	push   %ebp
  100801:	89 e5                	mov    %esp,%ebp
  100803:	53                   	push   %ebx
  100804:	57                   	push   %edi
  100805:	56                   	push   %esi
  100806:	83 ec 4c             	sub    $0x4c,%esp
  100809:	8b 45 08             	mov    0x8(%ebp),%eax
  10080c:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  10080f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t phys_context = 0;
  100812:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  100819:	89 0c 24             	mov    %ecx,(%esp)
  10081c:	e8 6f 05 00 00       	call   100d90 <vmm_alloc>
  100821:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  100824:	89 45 e8             	mov    %eax,-0x18(%ebp)
  
  uint32_t phys_pagedir = 0;
  100827:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  10082e:	89 0c 24             	mov    %ecx,(%esp)
  100831:	e8 5a 05 00 00       	call   100d90 <vmm_alloc>
  100836:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100839:	89 01                	mov    %eax,(%ecx)
  if(pagedir != 0) *pagedir = phys_pagedir;
  10083b:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  100842:	0f 84 08 00 00 00    	je     100850 <vmm_create_vpdraw+0x50>
  100848:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10084b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10084e:	89 01                	mov    %eax,(%ecx)
  100850:	b8 00 00 00 00       	mov    $0x0,%eax
  
  uint32_t* pagedir_ptr = vmm_alloc(0);
  100855:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10085c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10085f:	e8 2c 05 00 00       	call   100d90 <vmm_alloc>
  100864:	89 45 e0             	mov    %eax,-0x20(%ebp)
  uint32_t  paddr, i, i2;
    
  for(i = 0; i < 1024; i++) {
  100867:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  10086e:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  100875:	0f 83 25 01 00 00    	jae    1009a0 <vmm_create_vpdraw+0x1a0>
  10087b:	8d 45 dc             	lea    -0x24(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  10087e:	89 04 24             	mov    %eax,(%esp)
  100881:	e8 0a 05 00 00       	call   100d90 <vmm_alloc>
  100886:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  100889:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10088c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    if(i < PMEM_TABLES) {
  10088f:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  100896:	0f 83 4d 00 00 00    	jae    1008e9 <vmm_create_vpdraw+0xe9>
      vmm_free((void*)(pagedir_ptr[i]));
  10089c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10089f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1008a2:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1008a5:	89 04 24             	mov    %eax,(%esp)
  1008a8:	e8 33 05 00 00       	call   100de0 <vmm_free>
  1008ad:	b8 00 00 00 00       	mov    $0x0,%eax
      map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  1008b2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1008b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1008b8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1008bb:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1008be:	8b 14 95 3c b4 12 00 	mov    0x12b43c(,%edx,4),%edx
  1008c5:	89 0c 24             	mov    %ecx,(%esp)
  1008c8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1008cc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1008d3:	00 
  1008d4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1008d7:	e8 84 05 00 00       	call   100e60 <map_address_active>
      paddr = kernel_pagetables[i];
  1008dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1008df:	8b 04 85 3c b4 12 00 	mov    0x12b43c(,%eax,4),%eax
  1008e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
    }
      
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  1008e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1008ec:	0d 01 00 00 00       	or     $0x1,%eax
  1008f1:	0d 02 00 00 00       	or     $0x2,%eax
  1008f6:	0d 04 00 00 00       	or     $0x4,%eax
  1008fb:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1008fe:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100901:	8b 12                	mov    (%edx),%edx
  100903:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    if(i >= PMEM_TABLES) { //don't override kernel tables ;)
  100906:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  10090d:	0f 82 78 00 00 00    	jb     10098b <vmm_create_vpdraw+0x18b>
      for(i2 = 0; i2 < 1024; i2++) {
  100913:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  10091a:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  100921:	0f 83 5f 00 00 00    	jae    100986 <vmm_create_vpdraw+0x186>
  100927:	b8 04 00 00 00       	mov    $0x4,%eax
  10092c:	b9 00 00 00 00       	mov    $0x0,%ecx
  100931:	ba 00 02 00 00       	mov    $0x200,%edx
        uint32_t vaddr = (i << 22) + (i2 << 12);
  100936:	8b 75 d8             	mov    -0x28(%ebp),%esi
  100939:	c1 e6 16             	shl    $0x16,%esi
  10093c:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  10093f:	c1 e7 0c             	shl    $0xc,%edi
  100942:	01 fe                	add    %edi,%esi
  100944:	89 75 d0             	mov    %esi,-0x30(%ebp)
      
        ((uint32_t*)(pagedir_ptr[i]))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
  100947:	81 7d d0 00 00 80 00 	cmpl   $0x800000,-0x30(%ebp)
  10094e:	0f 97 c3             	seta   %bl
  100951:	84 db                	test   %bl,%bl
  100953:	0f 44 d1             	cmove  %ecx,%edx
  100956:	81 7d d0 00 10 40 20 	cmpl   $0x20401000,-0x30(%ebp)
  10095d:	0f 97 c3             	seta   %bl
  100960:	84 db                	test   %bl,%bl
  100962:	0f 44 c1             	cmove  %ecx,%eax
  100965:	09 c2                	or     %eax,%edx
  100967:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10096a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10096d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100970:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  100973:	89 14 81             	mov    %edx,(%ecx,%eax,4)
    }
      
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    if(i >= PMEM_TABLES) { //don't override kernel tables ;)
      for(i2 = 0; i2 < 1024; i2++) {
  100976:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100979:	05 01 00 00 00       	add    $0x1,%eax
  10097e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100981:	e9 94 ff ff ff       	jmp    10091a <vmm_create_vpdraw+0x11a>
        uint32_t vaddr = (i << 22) + (i2 << 12);
      
        ((uint32_t*)(pagedir_ptr[i]))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
      }
    }
  100986:	e9 00 00 00 00       	jmp    10098b <vmm_create_vpdraw+0x18b>
  }
  10098b:	e9 00 00 00 00       	jmp    100990 <vmm_create_vpdraw+0x190>
  if(pagedir != 0) *pagedir = phys_pagedir;
  
  uint32_t* pagedir_ptr = vmm_alloc(0);
  uint32_t  paddr, i, i2;
    
  for(i = 0; i < 1024; i++) {
  100990:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100993:	05 01 00 00 00       	add    $0x1,%eax
  100998:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10099b:	e9 ce fe ff ff       	jmp    10086e <vmm_create_vpdraw+0x6e>
        ((uint32_t*)(pagedir_ptr[i]))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
      }
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  1009a0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  1009a7:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  1009ae:	0f 83 58 00 00 00    	jae    100a0c <vmm_create_vpdraw+0x20c>
  1009b4:	b8 00 00 00 00       	mov    $0x0,%eax
    paddr = context->pagedir[i] & 0xFFFFF000;
  1009b9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1009bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1009bf:	8b 12                	mov    (%edx),%edx
  1009c1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1009c4:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  1009ca:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  1009cd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1009d0:	8b 15 00 41 10 00    	mov    0x104100,%edx
  1009d6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1009d9:	c1 e6 0c             	shl    $0xc,%esi
  1009dc:	01 f2                	add    %esi,%edx
  1009de:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1009e1:	89 0c 24             	mov    %ecx,(%esp)
  1009e4:	89 54 24 04          	mov    %edx,0x4(%esp)
  1009e8:	89 74 24 08          	mov    %esi,0x8(%esp)
  1009ec:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1009f3:	00 
  1009f4:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1009f7:	e8 14 01 00 00       	call   100b10 <map_address_context>
        ((uint32_t*)(pagedir_ptr[i]))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
      }
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  1009fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1009ff:	05 01 00 00 00       	add    $0x1,%eax
  100a04:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100a07:	e9 9b ff ff ff       	jmp    1009a7 <vmm_create_vpdraw+0x1a7>
  100a0c:	b8 00 00 00 00       	mov    $0x0,%eax
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  100a11:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100a14:	8b 15 04 41 10 00    	mov    0x104104,%edx
  100a1a:	8b 75 ec             	mov    -0x14(%ebp),%esi
  100a1d:	89 0c 24             	mov    %ecx,(%esp)
  100a20:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a24:	89 74 24 08          	mov    %esi,0x8(%esp)
  100a28:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100a2f:	00 
  100a30:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100a33:	e8 d8 00 00 00       	call   100b10 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100a38:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  100a3f:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  100a45:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  100a48:	0f 83 39 00 00 00    	jae    100a87 <vmm_create_vpdraw+0x287>
  100a4e:	b8 00 00 00 00       	mov    $0x0,%eax
    map_address_context(pagedir_ptr, i, i, 0);
  100a53:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100a56:	8b 55 d8             	mov    -0x28(%ebp),%edx
  100a59:	8b 75 d8             	mov    -0x28(%ebp),%esi
  100a5c:	89 0c 24             	mov    %ecx,(%esp)
  100a5f:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a63:	89 74 24 08          	mov    %esi,0x8(%esp)
  100a67:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100a6e:	00 
  100a6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100a72:	e8 99 00 00 00       	call   100b10 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100a77:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100a7a:	05 00 10 00 00       	add    $0x1000,%eax
  100a7f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100a82:	e9 b8 ff ff ff       	jmp    100a3f <vmm_create_vpdraw+0x23f>
    map_address_context(pagedir_ptr, i, i, 0);
  }
    
  uint32_t* pd_ptr = context->pagedir;
  100a87:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a8a:	8b 00                	mov    (%eax),%eax
  100a8c:	89 45 cc             	mov    %eax,-0x34(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  100a8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100a92:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100a95:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  100a97:	8b 45 cc             	mov    -0x34(%ebp),%eax
  100a9a:	89 04 24             	mov    %eax,(%esp)
  100a9d:	e8 fe 00 00 00       	call   100ba0 <vmm_unmap>
  vmm_unmap(context);
  100aa2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100aa5:	89 04 24             	mov    %eax,(%esp)
  100aa8:	e8 f3 00 00 00       	call   100ba0 <vmm_unmap>
  
  return pagedir_ptr;
  100aad:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ab0:	83 c4 4c             	add    $0x4c,%esp
  100ab3:	5e                   	pop    %esi
  100ab4:	5f                   	pop    %edi
  100ab5:	5b                   	pop    %ebx
  100ab6:	5d                   	pop    %ebp
  100ab7:	c3                   	ret    
  100ab8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100abf:	00 

00100ac0 <vmm_alloc_user>:

void* vmm_alloc_ucont(uint32_t cont) {
  return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  100ac0:	55                   	push   %ebp
  100ac1:	89 e5                	mov    %esp,%ebp
  100ac3:	56                   	push   %esi
  100ac4:	83 ec 24             	sub    $0x24,%esp
  100ac7:	8b 45 08             	mov    0x8(%ebp),%eax
  100aca:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  100acf:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  100ad4:	be 01 00 00 00       	mov    $0x1,%esi
  100ad9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  100adc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100adf:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  100ae6:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  100aed:	ff 
  100aee:	89 44 24 08          	mov    %eax,0x8(%esp)
  100af2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100af9:	00 
  100afa:	89 75 f4             	mov    %esi,-0xc(%ebp)
  100afd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100b00:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100b03:	e8 b8 04 00 00       	call   100fc0 <vmm_alloc_in_range>
  100b08:	83 c4 24             	add    $0x24,%esp
  100b0b:	5e                   	pop    %esi
  100b0c:	5d                   	pop    %ebp
  100b0d:	c3                   	ret    
  100b0e:	66 90                	xchg   %ax,%ax

00100b10 <map_address_context>:
  for(uint32_t i = 0; i < length; i+= 0x1000) {
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  100b10:	55                   	push   %ebp
  100b11:	89 e5                	mov    %esp,%ebp
  100b13:	56                   	push   %esi
  100b14:	83 ec 18             	sub    $0x18,%esp
  100b17:	8b 45 14             	mov    0x14(%ebp),%eax
  100b1a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100b1d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100b20:	8b 75 08             	mov    0x8(%ebp),%esi
  100b23:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100b26:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100b29:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100b2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t pd_entry =  vaddr >> 22;
  100b2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b32:	c1 e8 16             	shr    $0x16,%eax
  100b35:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  100b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b3b:	c1 e8 0c             	shr    $0xc,%eax
  100b3e:	25 ff 03 00 00       	and    $0x3ff,%eax
  100b43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | 
  100b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100b49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100b4e:	0d 01 00 00 00       	or     $0x1,%eax
  100b53:	0d 02 00 00 00       	or     $0x2,%eax
  100b58:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100b5b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100b61:	09 c8                	or     %ecx,%eax
  100b63:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100b66:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b69:	8b 75 f8             	mov    -0x8(%ebp),%esi
  100b6c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100b6f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100b75:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  100b78:	81 e1 04 02 00 00    	and    $0x204,%ecx
  100b7e:	09 c8                	or     %ecx,%eax
  100b80:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100b83:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b86:	8b 75 f8             	mov    -0x8(%ebp),%esi
  100b89:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100b8c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100b92:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
                                                            (flags & 0xFFF) | (((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] & (PT_PUBLIC | PT_ALLOCATABLE));
}
  100b95:	83 c4 18             	add    $0x18,%esp
  100b98:	5e                   	pop    %esi
  100b99:	5d                   	pop    %ebp
  100b9a:	c3                   	ret    
  100b9b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100ba0 <vmm_unmap>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE | (active_pagetables[vaddr >> 12] & PT_PUBLIC);
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  }
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  100ba0:	55                   	push   %ebp
  100ba1:	89 e5                	mov    %esp,%ebp
  100ba3:	83 ec 08             	sub    $0x8,%esp
  100ba6:	8b 45 08             	mov    0x8(%ebp),%eax
  100ba9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100bac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100baf:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100bb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100bb5:	c1 e8 0c             	shr    $0xc,%eax
  100bb8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100bbe:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100bc1:	25 01 02 00 00       	and    $0x201,%eax
  100bc6:	3d 01 02 00 00       	cmp    $0x201,%eax
  100bcb:	0f 85 2e 00 00 00    	jne    100bff <vmm_unmap+0x5f>
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE | (active_pagetables[vaddr >> 12] & PT_PUBLIC);
  100bd1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100bd4:	c1 e8 0c             	shr    $0xc,%eax
  100bd7:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100bdd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100be0:	25 04 00 00 00       	and    $0x4,%eax
  100be5:	0d 00 02 00 00       	or     $0x200,%eax
  100bea:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100bed:	c1 e9 0c             	shr    $0xc,%ecx
  100bf0:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100bf6:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100bf9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100bfc:	0f 01 38             	invlpg (%eax)
  }
}
  100bff:	83 c4 08             	add    $0x8,%esp
  100c02:	5d                   	pop    %ebp
  100c03:	c3                   	ret    
  100c04:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100c0b:	00 00 00 00 00 

00100c10 <vmm_free_pdptr>:
  vmm_unmap(context);
  
  return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  100c10:	55                   	push   %ebp
  100c11:	89 e5                	mov    %esp,%ebp
  100c13:	83 ec 18             	sub    $0x18,%esp
  100c16:	8b 45 08             	mov    0x8(%ebp),%eax
  100c19:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for(uint32_t i = 0; i < 1024; i++) {       
  100c1c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100c23:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  100c2a:	0f 83 21 00 00 00    	jae    100c51 <vmm_free_pdptr+0x41>
    vmm_unmap((void*)pagedir_ptr[i]); 
  100c30:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100c33:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100c36:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100c39:	89 04 24             	mov    %eax,(%esp)
  100c3c:	e8 5f ff ff ff       	call   100ba0 <vmm_unmap>
  
  return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  for(uint32_t i = 0; i < 1024; i++) {       
  100c41:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100c44:	05 01 00 00 00       	add    $0x1,%eax
  100c49:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100c4c:	e9 d2 ff ff ff       	jmp    100c23 <vmm_free_pdptr+0x13>
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  100c51:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100c54:	89 04 24             	mov    %eax,(%esp)
  100c57:	e8 44 ff ff ff       	call   100ba0 <vmm_unmap>
}
  100c5c:	83 c4 18             	add    $0x18,%esp
  100c5f:	5d                   	pop    %ebp
  100c60:	c3                   	ret    
  100c61:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100c68:	0f 1f 84 00 00 00 00 
  100c6f:	00 

00100c70 <vmm_create_pagedir>:
                    
  return phys_pagedir;
}

uint32_t vmm_create_pagedir()
{
  100c70:	55                   	push   %ebp
  100c71:	89 e5                	mov    %esp,%ebp
  100c73:	83 ec 18             	sub    $0x18,%esp
  100c76:	8d 45 fc             	lea    -0x4(%ebp),%eax
  uint32_t phys_pagedir;
  uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  100c79:	89 04 24             	mov    %eax,(%esp)
  100c7c:	e8 7f fb ff ff       	call   100800 <vmm_create_vpdraw>
  100c81:	89 45 f8             	mov    %eax,-0x8(%ebp)
                    vmm_free_pdptr(pdptr);  
  100c84:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100c87:	89 04 24             	mov    %eax,(%esp)
  100c8a:	e8 81 ff ff ff       	call   100c10 <vmm_free_pdptr>
  
  return phys_pagedir;
  100c8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100c92:	83 c4 18             	add    $0x18,%esp
  100c95:	5d                   	pop    %ebp
  100c96:	c3                   	ret    
  100c97:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  100c9e:	00 00 

00100ca0 <vmm_resolve>:
}

uint32_t vmm_resolve(void* vaddr) {
  100ca0:	55                   	push   %ebp
  100ca1:	89 e5                	mov    %esp,%ebp
  100ca3:	50                   	push   %eax
  100ca4:	8b 45 08             	mov    0x8(%ebp),%eax
  100ca7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return active_pagetables[(uint32_t)vaddr >> 12] & 0xFFFFF000;
  100caa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100cad:	c1 e8 0c             	shr    $0xc,%eax
  100cb0:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100cb6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100cb9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100cbe:	83 c4 04             	add    $0x4,%esp
  100cc1:	5d                   	pop    %ebp
  100cc2:	c3                   	ret    
  100cc3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100cca:	84 00 00 00 00 00 

00100cd0 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  100cd0:	55                   	push   %ebp
  100cd1:	89 e5                	mov    %esp,%ebp
  100cd3:	83 ec 38             	sub    $0x38,%esp
  100cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
  100cd9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100cdc:	ba 00 00 00 00       	mov    $0x0,%edx
  100ce1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100ce4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t pd_entry =  (uint32_t)vaddr >> 22;
  100ce7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100cea:	c1 e8 16             	shr    $0x16,%eax
  100ced:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t pt_entry = ((uint32_t)vaddr >> 12) % 1024;
  100cf0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100cf3:	c1 e8 0c             	shr    $0xc,%eax
  100cf6:	25 ff 03 00 00       	and    $0x3ff,%eax
  100cfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  uint32_t* vpd = vmm_alloc(0);
  100cfe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d05:	89 55 e0             	mov    %edx,-0x20(%ebp)
  100d08:	e8 83 00 00 00       	call   100d90 <vmm_alloc>
  100d0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  vmm_free(vpd);
  100d10:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d13:	89 04 24             	mov    %eax,(%esp)
  100d16:	e8 c5 00 00 00       	call   100de0 <vmm_free>
  100d1b:	b8 00 00 00 00       	mov    $0x0,%eax
  
  map_address_active((uint32_t)vpd, pdir, 0);
  100d20:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100d23:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100d26:	89 0c 24             	mov    %ecx,(%esp)
  100d29:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d2d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100d34:	00 
  100d35:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100d38:	e8 23 01 00 00       	call   100e60 <map_address_active>
  100d3d:	b8 00 00 00 00       	mov    $0x0,%eax
  uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  100d42:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100d45:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100d48:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  100d4b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  100d51:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  
  map_address_active((uint32_t)vpd, table, 0);
  100d54:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100d57:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100d5a:	89 0c 24             	mov    %ecx,(%esp)
  100d5d:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d61:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100d68:	00 
  100d69:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100d6c:	e8 ef 00 00 00       	call   100e60 <map_address_active>
  uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  100d71:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100d74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100d77:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100d7a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100d7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  return addr & 0xFFFFF000;
  100d82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100d85:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100d8a:	83 c4 38             	add    $0x38,%esp
  100d8d:	5d                   	pop    %ebp
  100d8e:	c3                   	ret    
  100d8f:	90                   	nop

00100d90 <vmm_alloc>:

void* vmm_alloc_cont(uint32_t cont) {
  return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
}

void* vmm_alloc(uint32_t* retpaddr) {
  100d90:	55                   	push   %ebp
  100d91:	89 e5                	mov    %esp,%ebp
  100d93:	56                   	push   %esi
  100d94:	83 ec 24             	sub    $0x24,%esp
  100d97:	8b 45 08             	mov    0x8(%ebp),%eax
  100d9a:	b9 00 00 80 00       	mov    $0x800000,%ecx
  100d9f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  100da4:	be 01 00 00 00       	mov    $0x1,%esi
  100da9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  100dac:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100daf:	c7 04 24 00 00 80 00 	movl   $0x800000,(%esp)
  100db6:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  100dbd:	20 
  100dbe:	89 44 24 08          	mov    %eax,0x8(%esp)
  100dc2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100dc9:	00 
  100dca:	89 75 f4             	mov    %esi,-0xc(%ebp)
  100dcd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100dd0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100dd3:	e8 e8 01 00 00       	call   100fc0 <vmm_alloc_in_range>
  100dd8:	83 c4 24             	add    $0x24,%esp
  100ddb:	5e                   	pop    %esi
  100ddc:	5d                   	pop    %ebp
  100ddd:	c3                   	ret    
  100dde:	66 90                	xchg   %ax,%ax

00100de0 <vmm_free>:
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | 
                                   (flags & 0xFFF) | (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
  asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  100de0:	55                   	push   %ebp
  100de1:	89 e5                	mov    %esp,%ebp
  100de3:	83 ec 18             	sub    $0x18,%esp
  100de6:	8b 45 08             	mov    0x8(%ebp),%eax
  100de9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100dec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100def:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100df2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100df5:	c1 e8 0c             	shr    $0xc,%eax
  100df8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100dfe:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e01:	25 01 02 00 00       	and    $0x201,%eax
  100e06:	3d 01 02 00 00       	cmp    $0x201,%eax
  100e0b:	0f 85 4a 00 00 00    	jne    100e5b <vmm_free+0x7b>
    pmm_free((void*)(active_pagetables[vaddr >> 12] & 0xFFFFF000));
  100e11:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e14:	c1 e8 0c             	shr    $0xc,%eax
  100e17:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e1d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100e25:	89 04 24             	mov    %eax,(%esp)
  100e28:	e8 43 f6 ff ff       	call   100470 <pmm_free>
   
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE | (active_pagetables[vaddr >> 12] & PT_PUBLIC);
  100e2d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e30:	c1 e8 0c             	shr    $0xc,%eax
  100e33:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e39:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e3c:	25 04 00 00 00       	and    $0x4,%eax
  100e41:	0d 00 02 00 00       	or     $0x200,%eax
  100e46:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100e49:	c1 e9 0c             	shr    $0xc,%ecx
  100e4c:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100e52:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100e55:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e58:	0f 01 38             	invlpg (%eax)
  }
}
  100e5b:	83 c4 18             	add    $0x18,%esp
  100e5e:	5d                   	pop    %ebp
  100e5f:	c3                   	ret    

00100e60 <map_address_active>:
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | 
                                                            (flags & 0xFFF) | (((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] & (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {  
  100e60:	55                   	push   %ebp
  100e61:	89 e5                	mov    %esp,%ebp
  100e63:	83 ec 0c             	sub    $0xc,%esp
  100e66:	8b 45 10             	mov    0x10(%ebp),%eax
  100e69:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100e6c:	8b 55 08             	mov    0x8(%ebp),%edx
  100e6f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100e72:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100e75:	89 45 f4             	mov    %eax,-0xc(%ebp)
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | 
  100e78:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100e80:	0d 01 00 00 00       	or     $0x1,%eax
  100e85:	0d 02 00 00 00       	or     $0x2,%eax
  100e8a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100e8d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100e93:	09 c8                	or     %ecx,%eax
  100e95:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100e98:	c1 e9 0c             	shr    $0xc,%ecx
  100e9b:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100ea1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  100ea4:	81 e1 04 02 00 00    	and    $0x204,%ecx
  100eaa:	09 c8                	or     %ecx,%eax
  100eac:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100eaf:	c1 e9 0c             	shr    $0xc,%ecx
  100eb2:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100eb8:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
                                   (flags & 0xFFF) | (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
  asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100ebb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100ebe:	0f 01 38             	invlpg (%eax)
}
  100ec1:	83 c4 0c             	add    $0xc,%esp
  100ec4:	5d                   	pop    %ebp
  100ec5:	c3                   	ret    
  100ec6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100ecd:	00 00 00 

00100ed0 <vmm_map_range>:
  uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  
  return addr & 0xFFFFF000;
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  100ed0:	55                   	push   %ebp
  100ed1:	89 e5                	mov    %esp,%ebp
  100ed3:	56                   	push   %esi
  100ed4:	83 ec 24             	sub    $0x24,%esp
  100ed7:	8b 45 14             	mov    0x14(%ebp),%eax
  100eda:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100edd:	8b 55 0c             	mov    0xc(%ebp),%edx
  100ee0:	8b 75 08             	mov    0x8(%ebp),%esi
  100ee3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100ee6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100ee9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100eec:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if((uint32_t)vaddr & 0xFFF) return;
  100eef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ef2:	25 ff 0f 00 00       	and    $0xfff,%eax
  100ef7:	3d 00 00 00 00       	cmp    $0x0,%eax
  100efc:	0f 84 05 00 00 00    	je     100f07 <vmm_map_range+0x37>
  100f02:	e9 5a 00 00 00       	jmp    100f61 <vmm_map_range+0x91>
  if((uint32_t)paddr & 0xFFF) return;
  100f07:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100f0a:	25 ff 0f 00 00       	and    $0xfff,%eax
  100f0f:	3d 00 00 00 00       	cmp    $0x0,%eax
  100f14:	0f 84 05 00 00 00    	je     100f1f <vmm_map_range+0x4f>
  100f1a:	e9 42 00 00 00       	jmp    100f61 <vmm_map_range+0x91>
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100f1f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  100f26:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f29:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100f2c:	0f 83 2f 00 00 00    	jae    100f61 <vmm_map_range+0x91>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  100f32:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f35:	03 45 e8             	add    -0x18(%ebp),%eax
  100f38:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100f3b:	03 4d e8             	add    -0x18(%ebp),%ecx
  100f3e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100f41:	89 04 24             	mov    %eax,(%esp)
  100f44:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f48:	89 54 24 08          	mov    %edx,0x8(%esp)
  100f4c:	e8 0f ff ff ff       	call   100e60 <map_address_active>

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  if((uint32_t)vaddr & 0xFFF) return;
  if((uint32_t)paddr & 0xFFF) return;
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100f51:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f54:	05 00 10 00 00       	add    $0x1000,%eax
  100f59:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100f5c:	e9 c5 ff ff ff       	jmp    100f26 <vmm_map_range+0x56>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}
  100f61:	83 c4 24             	add    $0x24,%esp
  100f64:	5e                   	pop    %esi
  100f65:	5d                   	pop    %ebp
  100f66:	c3                   	ret    
  100f67:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  100f6e:	00 00 

00100f70 <vmm_alloc_ucont>:
  }
  
  return vaddr;
}

void* vmm_alloc_ucont(uint32_t cont) {
  100f70:	55                   	push   %ebp
  100f71:	89 e5                	mov    %esp,%ebp
  100f73:	56                   	push   %esi
  100f74:	83 ec 24             	sub    $0x24,%esp
  100f77:	8b 45 08             	mov    0x8(%ebp),%eax
  100f7a:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  100f7f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  100f84:	be 00 00 00 00       	mov    $0x0,%esi
  100f89:	89 45 f8             	mov    %eax,-0x8(%ebp)
  return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  100f8c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f8f:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  100f96:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  100f9d:	ff 
  100f9e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100fa5:	00 
  100fa6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  100faa:	89 75 f4             	mov    %esi,-0xc(%ebp)
  100fad:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100fb0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100fb3:	e8 08 00 00 00       	call   100fc0 <vmm_alloc_in_range>
  100fb8:	83 c4 24             	add    $0x24,%esp
  100fbb:	5e                   	pop    %esi
  100fbc:	5d                   	pop    %ebp
  100fbd:	c3                   	ret    
  100fbe:	66 90                	xchg   %ax,%ax

00100fc0 <vmm_alloc_in_range>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE | (active_pagetables[vaddr >> 12] & PT_PUBLIC);
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  }
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr, uint32_t cont) {
  100fc0:	55                   	push   %ebp
  100fc1:	89 e5                	mov    %esp,%ebp
  100fc3:	56                   	push   %esi
  100fc4:	83 ec 34             	sub    $0x34,%esp
  100fc7:	8b 45 14             	mov    0x14(%ebp),%eax
  100fca:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100fcd:	8b 55 0c             	mov    0xc(%ebp),%edx
  100fd0:	8b 75 08             	mov    0x8(%ebp),%esi
  100fd3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100fd6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100fd9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100fdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  void* vaddr = 0;
  100fdf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  uint32_t i = 0;
  100fe6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  uint32_t c = 0;
  100fed:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

  for(i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  100ff4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ff7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100ffc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100fff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101002:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  101005:	0f 83 6f 00 00 00    	jae    10107a <vmm_alloc_in_range+0xba>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == PT_ALLOCATABLE) {
  10100b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10100e:	c1 e8 0c             	shr    $0xc,%eax
  101011:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  101017:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10101a:	25 01 02 00 00       	and    $0x201,%eax
  10101f:	3d 00 02 00 00       	cmp    $0x200,%eax
  101024:	0f 85 34 00 00 00    	jne    10105e <vmm_alloc_in_range+0x9e>
      if(c == 0) vaddr = (void*) i;
  10102a:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  101031:	0f 85 06 00 00 00    	jne    10103d <vmm_alloc_in_range+0x7d>
  101037:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10103a:	89 45 e8             	mov    %eax,-0x18(%ebp)
      c++;
  10103d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101040:	05 01 00 00 00       	add    $0x1,%eax
  101045:	89 45 e0             	mov    %eax,-0x20(%ebp)
      if(c >= cont)
  101048:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10104b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10104e:	0f 82 05 00 00 00    	jb     101059 <vmm_alloc_in_range+0x99>
        break;
  101054:	e9 21 00 00 00       	jmp    10107a <vmm_alloc_in_range+0xba>
    }
  101059:	e9 07 00 00 00       	jmp    101065 <vmm_alloc_in_range+0xa5>
    else
    {
      c = 0;
  10105e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    }
  }
  101065:	e9 00 00 00 00       	jmp    10106a <vmm_alloc_in_range+0xaa>
static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr, uint32_t cont) {
  void* vaddr = 0;
  uint32_t i = 0;
  uint32_t c = 0;

  for(i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  10106a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10106d:	05 00 10 00 00       	add    $0x1000,%eax
  101072:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  101075:	e9 85 ff ff ff       	jmp    100fff <vmm_alloc_in_range+0x3f>
    {
      c = 0;
    }
  }
  
  uint32_t off = 0;
  10107a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 
  while(c--) {
  101081:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101084:	89 c1                	mov    %eax,%ecx
  101086:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10108c:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10108f:	3d 00 00 00 00       	cmp    $0x0,%eax
  101094:	0f 84 59 00 00 00    	je     1010f3 <vmm_alloc_in_range+0x133>
    vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);  
  10109a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10109d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1010a0:	c1 e1 0c             	shl    $0xc,%ecx
  1010a3:	01 c8                	add    %ecx,%eax
  1010a5:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  1010ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1010af:	0f 85 0b 00 00 00    	jne    1010c0 <vmm_alloc_in_range+0x100>
  1010b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1010b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1010bb:	e9 0d 00 00 00       	jmp    1010cd <vmm_alloc_in_range+0x10d>
  1010c0:	b8 00 00 00 00       	mov    $0x0,%eax
  1010c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1010c8:	e9 00 00 00 00       	jmp    1010cd <vmm_alloc_in_range+0x10d>
  1010cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1010d0:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1010d3:	89 0c 24             	mov    %ecx,(%esp)
  1010d6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1010da:	e8 71 00 00 00       	call   101150 <vmm_alloc_addr>
    off++;
  1010df:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1010e2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1010e8:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  }
  1010eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1010ee:	e9 8e ff ff ff       	jmp    101081 <vmm_alloc_in_range+0xc1>
  
  return vaddr;
  1010f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1010f6:	83 c4 34             	add    $0x34,%esp
  1010f9:	5e                   	pop    %esi
  1010fa:	5d                   	pop    %ebp
  1010fb:	c3                   	ret    
  1010fc:	0f 1f 40 00          	nopl   0x0(%eax)

00101100 <vmm_alloc_cont>:

void* vmm_alloc_user(uint32_t* retpaddr) {
  return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
}

void* vmm_alloc_cont(uint32_t cont) {
  101100:	55                   	push   %ebp
  101101:	89 e5                	mov    %esp,%ebp
  101103:	56                   	push   %esi
  101104:	83 ec 24             	sub    $0x24,%esp
  101107:	8b 45 08             	mov    0x8(%ebp),%eax
  10110a:	b9 00 00 80 00       	mov    $0x800000,%ecx
  10110f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  101114:	be 00 00 00 00       	mov    $0x0,%esi
  101119:	89 45 f8             	mov    %eax,-0x8(%ebp)
  return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  10111c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10111f:	c7 04 24 00 00 80 00 	movl   $0x800000,(%esp)
  101126:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  10112d:	20 
  10112e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101135:	00 
  101136:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10113a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10113d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101140:	89 55 ec             	mov    %edx,-0x14(%ebp)
  101143:	e8 78 fe ff ff       	call   100fc0 <vmm_alloc_in_range>
  101148:	83 c4 24             	add    $0x24,%esp
  10114b:	5e                   	pop    %esi
  10114c:	5d                   	pop    %ebp
  10114d:	c3                   	ret    
  10114e:	66 90                	xchg   %ax,%ax

00101150 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
  return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  101150:	55                   	push   %ebp
  101151:	89 e5                	mov    %esp,%ebp
  101153:	56                   	push   %esi
  101154:	83 ec 34             	sub    $0x34,%esp
  101157:	8b 45 0c             	mov    0xc(%ebp),%eax
  10115a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10115d:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  101160:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(reqvaddr == 0) {
  101163:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10116a:	0f 85 34 00 00 00    	jne    1011a4 <vmm_alloc_addr+0x54>
  101170:	8d 05 3f 51 10 00    	lea    0x10513f,%eax
  101176:	b9 00 00 00 00       	mov    $0x0,%ecx
    kprintf("Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n", reqvaddr, 0);
  10117b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10117e:	89 04 24             	mov    %eax,(%esp)
  101181:	89 54 24 04          	mov    %edx,0x4(%esp)
  101185:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10118c:	00 
  10118d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  101190:	e8 9b 13 00 00       	call   102530 <kprintf>
    return 0;
  101195:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10119c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10119f:	e9 9b 00 00 00       	jmp    10123f <vmm_alloc_addr+0xef>
  }

  if((active_pagetables[(uint32_t)reqvaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
  1011a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1011a7:	c1 e8 0c             	shr    $0xc,%eax
  1011aa:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  1011b0:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1011b3:	25 01 02 00 00       	and    $0x201,%eax
  1011b8:	3d 00 02 00 00       	cmp    $0x200,%eax
  1011bd:	0f 84 37 00 00 00    	je     1011fa <vmm_alloc_addr+0xaa>
  1011c3:	8d 05 3f 51 10 00    	lea    0x10513f,%eax
    kprintf("Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n", reqvaddr, active_pagetables[(uint32_t)reqvaddr >> 12]);
  1011c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1011cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1011cf:	c1 ea 0c             	shr    $0xc,%edx
  1011d2:	8b 35 00 41 10 00    	mov    0x104100,%esi
  1011d8:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1011db:	89 04 24             	mov    %eax,(%esp)
  1011de:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011e2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1011e6:	e8 45 13 00 00       	call   102530 <kprintf>
    return 0;
  1011eb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1011f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1011f5:	e9 45 00 00 00       	jmp    10123f <vmm_alloc_addr+0xef>
  1011fa:	b8 04 02 00 00       	mov    $0x204,%eax
  }

  uint32_t paddr = (uint32_t) pmm_alloc();
  1011ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
  101202:	e8 79 f1 ff ff       	call   100380 <pmm_alloc>
  101207:	89 45 ec             	mov    %eax,-0x14(%ebp)
  map_address_active((uint32_t)reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  10120a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10120d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101210:	89 04 24             	mov    %eax,(%esp)
  101213:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101217:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  10121e:	00 
  10121f:	e8 3c fc ff ff       	call   100e60 <map_address_active>
  
  if(retpaddr != 0) *retpaddr = paddr;
  101224:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10122b:	0f 84 08 00 00 00    	je     101239 <vmm_alloc_addr+0xe9>
  101231:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101234:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101237:	89 01                	mov    %eax,(%ecx)
  
  return reqvaddr;
  101239:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10123c:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  10123f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101242:	83 c4 34             	add    $0x34,%esp
  101245:	5e                   	pop    %esi
  101246:	5d                   	pop    %ebp
  101247:	c3                   	ret    
  101248:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10124f:	00 

00101250 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  101250:	55                   	push   %ebp
  101251:	89 e5                	mov    %esp,%ebp
  101253:	50                   	push   %eax
  101254:	8b 45 08             	mov    0x8(%ebp),%eax
  101257:	89 45 fc             	mov    %eax,-0x4(%ebp)
  active_pagedir = pdpaddr;
  10125a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10125d:	a3 14 b0 10 00       	mov    %eax,0x10b014
  asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  101262:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101265:	0f 22 d8             	mov    %eax,%cr3
}
  101268:	83 c4 04             	add    $0x4,%esp
  10126b:	5d                   	pop    %ebp
  10126c:	c3                   	ret    
  10126d:	0f 1f 00             	nopl   (%eax)

00101270 <vmm_init>:

uint32_t vmm_init(void)
{
  101270:	55                   	push   %ebp
  101271:	89 e5                	mov    %esp,%ebp
  //CREATE CONTEXT ************************************************************
  
  struct vmm_context* context = pmm_alloc();
  101273:	53                   	push   %ebx
  101274:	57                   	push   %edi
  101275:	56                   	push   %esi
  101276:	83 ec 3c             	sub    $0x3c,%esp
  101279:	e8 02 f1 ff ff       	call   100380 <pmm_alloc>
  10127e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  101281:	e8 fa f0 ff ff       	call   100380 <pmm_alloc>
  101286:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101289:	89 01                	mov    %eax,(%ecx)
  
  for(i = 0; i < 1024; i++) {
  10128b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101292:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  101299:	0f 83 d6 00 00 00    	jae    101375 <vmm_init+0x105>
    context->pagedir[i] = ((uint32_t)pmm_alloc());
  10129f:	e8 dc f0 ff ff       	call   100380 <pmm_alloc>
  1012a4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1012a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1012aa:	8b 12                	mov    (%edx),%edx
  1012ac:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    if(i < PMEM_TABLES) {
  1012af:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  1012b6:	0f 83 15 00 00 00    	jae    1012d1 <vmm_init+0x61>
      kernel_pagetables[i] = context->pagedir[i];
  1012bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1012bf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1012c2:	8b 09                	mov    (%ecx),%ecx
  1012c4:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1012c7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1012ca:	89 04 8d 3c b4 12 00 	mov    %eax,0x12b43c(,%ecx,4)
    }
    
    context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  1012d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1012d4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1012d7:	8b 09                	mov    (%ecx),%ecx
  1012d9:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  1012dc:	81 ca 07 00 00 00    	or     $0x7,%edx
  1012e2:	89 14 81             	mov    %edx,(%ecx,%eax,4)
        
    for(i2 = 0; i2 < 1024; i2++) {
  1012e5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1012ec:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  1012f3:	0f 83 67 00 00 00    	jae    101360 <vmm_init+0xf0>
  1012f9:	b8 04 00 00 00       	mov    $0x4,%eax
  1012fe:	b9 00 00 00 00       	mov    $0x0,%ecx
  101303:	ba 00 02 00 00       	mov    $0x200,%edx
      uint32_t vaddr = (i << 22) + (i2 << 12);
  101308:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10130b:	c1 e6 16             	shl    $0x16,%esi
  10130e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  101311:	c1 e7 0c             	shl    $0xc,%edi
  101314:	01 fe                	add    %edi,%esi
  101316:	89 75 e4             	mov    %esi,-0x1c(%ebp)
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
  101319:	81 7d e4 00 00 80 00 	cmpl   $0x800000,-0x1c(%ebp)
  101320:	0f 97 c3             	seta   %bl
  101323:	84 db                	test   %bl,%bl
  101325:	0f 44 d1             	cmove  %ecx,%edx
  101328:	81 7d e4 00 10 40 20 	cmpl   $0x20401000,-0x1c(%ebp)
  10132f:	0f 97 c3             	seta   %bl
  101332:	84 db                	test   %bl,%bl
  101334:	0f 44 c1             	cmove  %ecx,%eax
  101337:	09 c2                	or     %eax,%edx
  101339:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10133c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10133f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101342:	8b 36                	mov    (%esi),%esi
  101344:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  101347:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10134d:	89 14 81             	mov    %edx,(%ecx,%eax,4)
      kernel_pagetables[i] = context->pagedir[i];
    }
    
    context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
        
    for(i2 = 0; i2 < 1024; i2++) {
  101350:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101353:	05 01 00 00 00       	add    $0x1,%eax
  101358:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10135b:	e9 8c ff ff ff       	jmp    1012ec <vmm_init+0x7c>
      uint32_t vaddr = (i << 22) + (i2 << 12);
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
    }
  }
  101360:	e9 00 00 00 00       	jmp    101365 <vmm_init+0xf5>
  struct vmm_context* context = pmm_alloc();
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
  101365:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101368:	05 01 00 00 00       	add    $0x1,%eax
  10136d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101370:	e9 1d ff ff ff       	jmp    101292 <vmm_init+0x22>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101375:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10137c:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  101383:	0f 83 5a 00 00 00    	jae    1013e3 <vmm_init+0x173>
  101389:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  10138e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101391:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101394:	8b 12                	mov    (%edx),%edx
  101396:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  101399:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10139f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  1013a2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1013a5:	8b 09                	mov    (%ecx),%ecx
  1013a7:	8b 15 00 41 10 00    	mov    0x104100,%edx
  1013ad:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1013b0:	c1 e6 0c             	shl    $0xc,%esi
  1013b3:	01 f2                	add    %esi,%edx
  1013b5:	8b 75 e0             	mov    -0x20(%ebp),%esi
  1013b8:	89 0c 24             	mov    %ecx,(%esp)
  1013bb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1013bf:	89 74 24 08          	mov    %esi,0x8(%esp)
  1013c3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1013ca:	00 
  1013cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1013ce:	e8 3d f7 ff ff       	call   100b10 <map_address_context>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  1013d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1013d6:	05 01 00 00 00       	add    $0x1,%eax
  1013db:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1013de:	e9 99 ff ff ff       	jmp    10137c <vmm_init+0x10c>
  1013e3:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  1013e8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1013eb:	8b 09                	mov    (%ecx),%ecx
  1013ed:	8b 15 04 41 10 00    	mov    0x104104,%edx
  1013f3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1013f6:	89 0c 24             	mov    %ecx,(%esp)
  1013f9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1013fd:	89 74 24 08          	mov    %esi,0x8(%esp)
  101401:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101408:	00 
  101409:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10140c:	e8 ff f6 ff ff       	call   100b10 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101411:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  101418:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  10141e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  101421:	0f 83 3b 00 00 00    	jae    101462 <vmm_init+0x1f2>
  101427:	b8 00 00 00 00       	mov    $0x0,%eax
    map_address_context(context->pagedir, i, i, 0);
  10142c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10142f:	8b 09                	mov    (%ecx),%ecx
  101431:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101434:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101437:	89 0c 24             	mov    %ecx,(%esp)
  10143a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10143e:	89 74 24 08          	mov    %esi,0x8(%esp)
  101442:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  101449:	00 
  10144a:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10144d:	e8 be f6 ff ff       	call   100b10 <map_address_context>
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101452:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101455:	05 00 10 00 00       	add    $0x1000,%eax
  10145a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10145d:	e9 b6 ff ff ff       	jmp    101418 <vmm_init+0x1a8>
    map_address_context(context->pagedir, i, i, 0);
  }
  
  //END CREATE CONTEXT ********************************************************
  
  vmm_activate_pagedir((uint32_t) context->pagedir);
  101462:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101465:	8b 00                	mov    (%eax),%eax
  101467:	89 04 24             	mov    %eax,(%esp)
  10146a:	e8 e1 fd ff ff       	call   101250 <vmm_activate_pagedir>

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  10146f:	0f 20 c0             	mov    %cr0,%eax
  101472:	89 45 dc             	mov    %eax,-0x24(%ebp)
  cr0 |= (1 << 31);
  101475:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101478:	0d 00 00 00 80       	or     $0x80000000,%eax
  10147d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  101480:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101483:	0f 22 c0             	mov    %eax,%cr0
  
  return (uint32_t) active_context->pagedir;
  101486:	a1 04 41 10 00       	mov    0x104104,%eax
  10148b:	8b 00                	mov    (%eax),%eax
  10148d:	83 c4 3c             	add    $0x3c,%esp
  101490:	5e                   	pop    %esi
  101491:	5f                   	pop    %edi
  101492:	5b                   	pop    %ebx
  101493:	5d                   	pop    %ebp
  101494:	c3                   	ret    
  101495:	66 90                	xchg   %ax,%ax
  101497:	66 90                	xchg   %ax,%ax
  101499:	66 90                	xchg   %ax,%ax
  10149b:	66 90                	xchg   %ax,%ax
  10149d:	66 90                	xchg   %ax,%ax
  10149f:	90                   	nop

001014a0 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  1014a0:	55                   	push   %ebp
  1014a1:	89 e5                	mov    %esp,%ebp
  1014a3:	53                   	push   %ebx
  1014a4:	57                   	push   %edi
  1014a5:	56                   	push   %esi
  1014a6:	83 ec 10             	sub    $0x10,%esp
  1014a9:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  1014ad:	66 89 c1             	mov    %ax,%cx
  1014b0:	8a 55 14             	mov    0x14(%ebp),%dl
  1014b3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1014b6:	8b 75 08             	mov    0x8(%ebp),%esi
  1014b9:	89 75 f0             	mov    %esi,-0x10(%ebp)
  1014bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1014bf:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  1014c3:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  1014c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1014c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  1014cc:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1014d0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1014d3:	89 04 f5 18 b0 10 00 	mov    %eax,0x10b018(,%esi,8)
  1014da:	c7 04 f5 1c b0 10 00 	movl   $0x0,0x10b01c(,%esi,8)
  1014e1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  1014e5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  1014e9:	c1 e0 10             	shl    $0x10,%eax
  1014ec:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1014ef:	8b 3c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%edi
  1014f6:	8b 1c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%ebx
  1014fd:	09 c3                	or     %eax,%ebx
  1014ff:	89 3c f5 1c b0 10 00 	mov    %edi,0x10b01c(,%esi,8)
  101506:	89 1c f5 18 b0 10 00 	mov    %ebx,0x10b018(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  10150d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  101511:	c1 e0 08             	shl    $0x8,%eax
  101514:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101517:	8b 3c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%edi
  10151e:	8b 1c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%ebx
  101525:	09 c3                	or     %eax,%ebx
  101527:	89 3c f5 18 b0 10 00 	mov    %edi,0x10b018(,%esi,8)
  10152e:	89 1c f5 1c b0 10 00 	mov    %ebx,0x10b01c(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  101535:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  101539:	c1 e0 10             	shl    $0x10,%eax
  10153c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10153f:	8b 3c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%edi
  101546:	8b 1c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%ebx
  10154d:	09 c3                	or     %eax,%ebx
  10154f:	89 3c f5 18 b0 10 00 	mov    %edi,0x10b018(,%esi,8)
  101556:	89 1c f5 1c b0 10 00 	mov    %ebx,0x10b01c(,%esi,8)
}
  10155d:	83 c4 10             	add    $0x10,%esp
  101560:	5e                   	pop    %esi
  101561:	5f                   	pop    %edi
  101562:	5b                   	pop    %ebx
  101563:	5d                   	pop    %ebp
  101564:	c3                   	ret    
  101565:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10156c:	00 00 00 00 

00101570 <init_idt>:

void init_idt() {
  101570:	55                   	push   %ebp
  101571:	89 e5                	mov    %esp,%ebp
	struct {
  101573:	56                   	push   %esi
  101574:	81 ec 34 02 00 00    	sub    $0x234,%esp
  10157a:	a1 00 50 10 00       	mov    0x105000,%eax
  10157f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101582:	66 8b 0d 04 50 10 00 	mov    0x105004,%cx
  101589:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};

	int i = 0;
  10158d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  101594:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10159b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  1015a2:	0f 8d 1e 00 00 00    	jge    1015c6 <init_idt+0x56>
		handler_set[i] = 0;
  1015a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1015ab:	c7 04 85 18 b2 10 00 	movl   $0x0,0x10b218(,%eax,4)
  1015b2:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  1015b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1015b9:	05 01 00 00 00       	add    $0x1,%eax
  1015be:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1015c1:	e9 d5 ff ff ff       	jmp    10159b <init_idt+0x2b>
  1015c6:	b8 20 00 00 00       	mov    $0x20,%eax
  1015cb:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  1015d0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1015d7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1015de:	00 
  1015df:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1015e2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1015e5:	e8 86 0b 00 00       	call   102170 <outb>
  1015ea:	b8 21 00 00 00       	mov    $0x21,%eax
  1015ef:	b9 20 00 00 00       	mov    $0x20,%ecx
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  1015f4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1015fb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101602:	00 
  101603:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101606:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  101609:	e8 62 0b 00 00       	call   102170 <outb>
  10160e:	b8 21 00 00 00       	mov    $0x21,%eax
  101613:	b9 04 00 00 00       	mov    $0x4,%ecx
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  101618:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10161f:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  101626:	00 
  101627:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10162a:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10162d:	e8 3e 0b 00 00       	call   102170 <outb>
  101632:	b8 21 00 00 00       	mov    $0x21,%eax
  101637:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0x21, 0x01); // ICW 4
  10163c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101643:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10164a:	00 
  10164b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10164e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  101651:	e8 1a 0b 00 00       	call   102170 <outb>
  101656:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10165b:	b9 11 00 00 00       	mov    $0x11,%ecx

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  101660:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101667:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10166e:	00 
  10166f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101672:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101675:	e8 f6 0a 00 00       	call   102170 <outb>
  10167a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  10167f:	b9 28 00 00 00       	mov    $0x28,%ecx
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101684:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10168b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101692:	00 
  101693:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101696:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101699:	e8 d2 0a 00 00       	call   102170 <outb>
  10169e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1016a3:	b9 02 00 00 00       	mov    $0x2,%ecx
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  1016a8:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1016af:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1016b6:	00 
  1016b7:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1016ba:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  1016bd:	e8 ae 0a 00 00       	call   102170 <outb>
  1016c2:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1016c7:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0xa1, 0x01); // ICW 4
  1016cc:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1016d3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1016da:	00 
  1016db:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1016de:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  1016e1:	e8 8a 0a 00 00       	call   102170 <outb>
  1016e6:	b8 20 00 00 00       	mov    $0x20,%eax
  1016eb:	b9 00 00 00 00       	mov    $0x0,%ecx

  outb(0x20, 0x0);
  1016f0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1016f7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1016fe:	00 
  1016ff:	89 45 a8             	mov    %eax,-0x58(%ebp)
  101702:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  101705:	e8 66 0a 00 00       	call   102170 <outb>
  10170a:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10170f:	b9 00 00 00 00       	mov    $0x0,%ecx
  outb(0xa0, 0x0);
  101714:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10171b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101722:	00 
  101723:	89 45 a0             	mov    %eax,-0x60(%ebp)
  101726:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  101729:	e8 42 0a 00 00       	call   102170 <outb>
  10172e:	b8 00 00 00 00       	mov    $0x0,%eax
  101733:	8d 0d 40 2d 10 00    	lea    0x102d40,%ecx
  101739:	ba 08 00 00 00       	mov    $0x8,%edx
  10173e:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101743:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10174a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10174e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101755:	00 
  101756:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10175d:	00 
  10175e:	89 45 98             	mov    %eax,-0x68(%ebp)
  101761:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101764:	89 55 90             	mov    %edx,-0x70(%ebp)
  101767:	e8 34 fd ff ff       	call   1014a0 <idt_set_entry>
  10176c:	b8 01 00 00 00       	mov    $0x1,%eax
  101771:	8d 0d 49 2d 10 00    	lea    0x102d49,%ecx
  101777:	ba 08 00 00 00       	mov    $0x8,%edx
  10177c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101781:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101788:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10178c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101793:	00 
  101794:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10179b:	00 
  10179c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10179f:	89 75 88             	mov    %esi,-0x78(%ebp)
  1017a2:	89 55 84             	mov    %edx,-0x7c(%ebp)
  1017a5:	e8 f6 fc ff ff       	call   1014a0 <idt_set_entry>
  1017aa:	b8 02 00 00 00       	mov    $0x2,%eax
  1017af:	8d 0d 52 2d 10 00    	lea    0x102d52,%ecx
  1017b5:	ba 08 00 00 00       	mov    $0x8,%edx
  1017ba:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017bf:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1017c6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017ca:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017d1:	00 
  1017d2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017d9:	00 
  1017da:	89 45 80             	mov    %eax,-0x80(%ebp)
  1017dd:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  1017e3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  1017e9:	e8 b2 fc ff ff       	call   1014a0 <idt_set_entry>
  1017ee:	b8 03 00 00 00       	mov    $0x3,%eax
  1017f3:	8d 0d 5b 2d 10 00    	lea    0x102d5b,%ecx
  1017f9:	ba 08 00 00 00       	mov    $0x8,%edx
  1017fe:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101803:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  10180a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10180e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101815:	00 
  101816:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10181d:	00 
  10181e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  101824:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  10182a:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101830:	e8 6b fc ff ff       	call   1014a0 <idt_set_entry>
  101835:	b8 04 00 00 00       	mov    $0x4,%eax
  10183a:	8d 0d 64 2d 10 00    	lea    0x102d64,%ecx
  101840:	ba 08 00 00 00       	mov    $0x8,%edx
  101845:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10184a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101851:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101855:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10185c:	00 
  10185d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101864:	00 
  101865:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10186b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101871:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101877:	e8 24 fc ff ff       	call   1014a0 <idt_set_entry>
  10187c:	b8 05 00 00 00       	mov    $0x5,%eax
  101881:	8d 0d 6d 2d 10 00    	lea    0x102d6d,%ecx
  101887:	ba 08 00 00 00       	mov    $0x8,%edx
  10188c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101891:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101898:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10189c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018a3:	00 
  1018a4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018ab:	00 
  1018ac:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  1018b2:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  1018b8:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  1018be:	e8 dd fb ff ff       	call   1014a0 <idt_set_entry>
  1018c3:	b8 06 00 00 00       	mov    $0x6,%eax
  1018c8:	8d 0d 76 2d 10 00    	lea    0x102d76,%ecx
  1018ce:	ba 08 00 00 00       	mov    $0x8,%edx
  1018d3:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018d8:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  1018df:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018e3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018ea:	00 
  1018eb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018f2:	00 
  1018f3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1018f9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1018ff:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  101905:	e8 96 fb ff ff       	call   1014a0 <idt_set_entry>
  10190a:	b8 07 00 00 00       	mov    $0x7,%eax
  10190f:	8d 0d 7f 2d 10 00    	lea    0x102d7f,%ecx
  101915:	ba 08 00 00 00       	mov    $0x8,%edx
  10191a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10191f:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101926:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10192a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101931:	00 
  101932:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101939:	00 
  10193a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101940:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101946:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10194c:	e8 4f fb ff ff       	call   1014a0 <idt_set_entry>
  101951:	b8 08 00 00 00       	mov    $0x8,%eax
  101956:	8d 0d 88 2d 10 00    	lea    0x102d88,%ecx
  10195c:	ba 8e 00 00 00       	mov    $0x8e,%edx
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101961:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101968:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10196c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101973:	00 
  101974:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10197b:	00 
  10197c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101982:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101988:	e8 13 fb ff ff       	call   1014a0 <idt_set_entry>
  10198d:	b8 09 00 00 00       	mov    $0x9,%eax
  101992:	8d 0d 8f 2d 10 00    	lea    0x102d8f,%ecx
  101998:	ba 08 00 00 00       	mov    $0x8,%edx
  10199d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019a2:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  1019a9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019ad:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019b4:	00 
  1019b5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019bc:	00 
  1019bd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  1019c3:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  1019c9:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  1019cf:	e8 cc fa ff ff       	call   1014a0 <idt_set_entry>
  1019d4:	b8 0a 00 00 00       	mov    $0xa,%eax
  1019d9:	8d 0d 98 2d 10 00    	lea    0x102d98,%ecx
  1019df:	ba 08 00 00 00       	mov    $0x8,%edx
  1019e4:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019e9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1019f0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019f4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019fb:	00 
  1019fc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a03:	00 
  101a04:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  101a0a:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  101a10:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  101a16:	e8 85 fa ff ff       	call   1014a0 <idt_set_entry>
  101a1b:	b8 0b 00 00 00       	mov    $0xb,%eax
  101a20:	8d 0d 9f 2d 10 00    	lea    0x102d9f,%ecx
  101a26:	ba 08 00 00 00       	mov    $0x8,%edx
  101a2b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a30:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101a37:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a3b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a42:	00 
  101a43:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a4a:	00 
  101a4b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101a51:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101a57:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  101a5d:	e8 3e fa ff ff       	call   1014a0 <idt_set_entry>
  101a62:	b8 0c 00 00 00       	mov    $0xc,%eax
  101a67:	8d 0d a6 2d 10 00    	lea    0x102da6,%ecx
  101a6d:	ba 08 00 00 00       	mov    $0x8,%edx
  101a72:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a77:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  101a7e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a82:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a89:	00 
  101a8a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a91:	00 
  101a92:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101a98:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  101a9e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101aa4:	e8 f7 f9 ff ff       	call   1014a0 <idt_set_entry>
  101aa9:	b8 0d 00 00 00       	mov    $0xd,%eax
  101aae:	8d 0d ad 2d 10 00    	lea    0x102dad,%ecx
  101ab4:	ba 08 00 00 00       	mov    $0x8,%edx
  101ab9:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101abe:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101ac5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ac9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ad0:	00 
  101ad1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ad8:	00 
  101ad9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  101adf:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  101ae5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  101aeb:	e8 b0 f9 ff ff       	call   1014a0 <idt_set_entry>
  101af0:	b8 0e 00 00 00       	mov    $0xe,%eax
  101af5:	8d 0d b4 2d 10 00    	lea    0x102db4,%ecx
  101afb:	ba 08 00 00 00       	mov    $0x8,%edx
  101b00:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b05:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  101b0c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b10:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b17:	00 
  101b18:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b1f:	00 
  101b20:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  101b26:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  101b2c:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101b32:	e8 69 f9 ff ff       	call   1014a0 <idt_set_entry>
  101b37:	b8 0f 00 00 00       	mov    $0xf,%eax
  101b3c:	8d 0d b8 2d 10 00    	lea    0x102db8,%ecx
  101b42:	ba 08 00 00 00       	mov    $0x8,%edx
  101b47:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b4c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101b53:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b57:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b5e:	00 
  101b5f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b66:	00 
  101b67:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  101b6d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101b73:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101b79:	e8 22 f9 ff ff       	call   1014a0 <idt_set_entry>
  101b7e:	b8 10 00 00 00       	mov    $0x10,%eax
  101b83:	8d 0d be 2d 10 00    	lea    0x102dbe,%ecx
  101b89:	ba 08 00 00 00       	mov    $0x8,%edx
  101b8e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b93:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  101b9a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b9e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ba5:	00 
  101ba6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bad:	00 
  101bae:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101bb4:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  101bba:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101bc0:	e8 db f8 ff ff       	call   1014a0 <idt_set_entry>
  101bc5:	b8 11 00 00 00       	mov    $0x11,%eax
  101bca:	8d 0d c4 2d 10 00    	lea    0x102dc4,%ecx
  101bd0:	ba 08 00 00 00       	mov    $0x8,%edx
  101bd5:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101bda:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101be1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101be5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bec:	00 
  101bed:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bf4:	00 
  101bf5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  101bfb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  101c01:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  101c07:	e8 94 f8 ff ff       	call   1014a0 <idt_set_entry>
  101c0c:	b8 12 00 00 00       	mov    $0x12,%eax
  101c11:	8d 0d c8 2d 10 00    	lea    0x102dc8,%ecx
  101c17:	ba 08 00 00 00       	mov    $0x8,%edx
  101c1c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c21:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  101c28:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c2c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c33:	00 
  101c34:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c3b:	00 
  101c3c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101c42:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101c48:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  101c4e:	e8 4d f8 ff ff       	call   1014a0 <idt_set_entry>
  101c53:	b8 20 00 00 00       	mov    $0x20,%eax
  101c58:	8d 0d ce 2d 10 00    	lea    0x102dce,%ecx
  101c5e:	ba 08 00 00 00       	mov    $0x8,%edx
  101c63:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c68:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101c6f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c73:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c7a:	00 
  101c7b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c82:	00 
  101c83:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101c89:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  101c8f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101c95:	e8 06 f8 ff ff       	call   1014a0 <idt_set_entry>
  101c9a:	b8 21 00 00 00       	mov    $0x21,%eax
  101c9f:	8d 0d d4 2d 10 00    	lea    0x102dd4,%ecx
  101ca5:	ba 08 00 00 00       	mov    $0x8,%edx
  101caa:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101caf:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101cb6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cba:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101cc1:	00 
  101cc2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101cc9:	00 
  101cca:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  101cd0:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  101cd6:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  101cdc:	e8 bf f7 ff ff       	call   1014a0 <idt_set_entry>
  101ce1:	b8 22 00 00 00       	mov    $0x22,%eax
  101ce6:	8d 0d da 2d 10 00    	lea    0x102dda,%ecx
  101cec:	ba 08 00 00 00       	mov    $0x8,%edx
  101cf1:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(34, intr_stub_34, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101cf6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  101cfd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d01:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d08:	00 
  101d09:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d10:	00 
  101d11:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  101d17:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  101d1d:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  101d23:	e8 78 f7 ff ff       	call   1014a0 <idt_set_entry>
  101d28:	b8 23 00 00 00       	mov    $0x23,%eax
  101d2d:	8d 0d e0 2d 10 00    	lea    0x102de0,%ecx
  101d33:	ba 08 00 00 00       	mov    $0x8,%edx
  101d38:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(35, intr_stub_35, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d3d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101d44:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d48:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d4f:	00 
  101d50:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d57:	00 
  101d58:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101d5e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101d64:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101d6a:	e8 31 f7 ff ff       	call   1014a0 <idt_set_entry>
  101d6f:	b8 24 00 00 00       	mov    $0x24,%eax
  101d74:	8d 0d e6 2d 10 00    	lea    0x102de6,%ecx
  101d7a:	ba 08 00 00 00       	mov    $0x8,%edx
  101d7f:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(36, intr_stub_36, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d84:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101d8b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d8f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d96:	00 
  101d97:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d9e:	00 
  101d9f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101da5:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101dab:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101db1:	e8 ea f6 ff ff       	call   1014a0 <idt_set_entry>
  101db6:	b8 25 00 00 00       	mov    $0x25,%eax
  101dbb:	8d 0d ec 2d 10 00    	lea    0x102dec,%ecx
  101dc1:	ba 08 00 00 00       	mov    $0x8,%edx
  101dc6:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(37, intr_stub_37, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101dcb:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101dd2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101dd6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ddd:	00 
  101dde:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101de5:	00 
  101de6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101dec:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101df2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101df8:	e8 a3 f6 ff ff       	call   1014a0 <idt_set_entry>
  101dfd:	b8 26 00 00 00       	mov    $0x26,%eax
  101e02:	8d 0d f2 2d 10 00    	lea    0x102df2,%ecx
  101e08:	ba 08 00 00 00       	mov    $0x8,%edx
  101e0d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(38, intr_stub_38, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e12:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101e19:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e1d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e24:	00 
  101e25:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e2c:	00 
  101e2d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101e33:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101e39:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101e3f:	e8 5c f6 ff ff       	call   1014a0 <idt_set_entry>
  101e44:	b8 27 00 00 00       	mov    $0x27,%eax
  101e49:	8d 0d f8 2d 10 00    	lea    0x102df8,%ecx
  101e4f:	ba 08 00 00 00       	mov    $0x8,%edx
  101e54:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(39, intr_stub_39, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e59:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101e60:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e64:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e6b:	00 
  101e6c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e73:	00 
  101e74:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101e7a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101e80:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101e86:	e8 15 f6 ff ff       	call   1014a0 <idt_set_entry>
  101e8b:	b8 28 00 00 00       	mov    $0x28,%eax
  101e90:	8d 0d fe 2d 10 00    	lea    0x102dfe,%ecx
  101e96:	ba 08 00 00 00       	mov    $0x8,%edx
  101e9b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(40, intr_stub_40, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ea0:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101ea7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101eab:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101eb2:	00 
  101eb3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101eba:	00 
  101ebb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101ec1:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101ec7:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101ecd:	e8 ce f5 ff ff       	call   1014a0 <idt_set_entry>
  101ed2:	b8 29 00 00 00       	mov    $0x29,%eax
  101ed7:	8d 0d 04 2e 10 00    	lea    0x102e04,%ecx
  101edd:	ba 08 00 00 00       	mov    $0x8,%edx
  101ee2:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(41, intr_stub_41, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ee7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101eee:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ef2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ef9:	00 
  101efa:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f01:	00 
  101f02:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101f08:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101f0e:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101f14:	e8 87 f5 ff ff       	call   1014a0 <idt_set_entry>
  101f19:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101f1e:	8d 0d 0a 2e 10 00    	lea    0x102e0a,%ecx
  101f24:	ba 08 00 00 00       	mov    $0x8,%edx
  101f29:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(42, intr_stub_42, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101f2e:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101f35:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f39:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f40:	00 
  101f41:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f48:	00 
  101f49:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101f4f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101f55:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101f5b:	e8 40 f5 ff ff       	call   1014a0 <idt_set_entry>
  101f60:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101f65:	8d 0d 10 2e 10 00    	lea    0x102e10,%ecx
  101f6b:	ba 08 00 00 00       	mov    $0x8,%edx
  101f70:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(43, intr_stub_43, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101f75:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101f7c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f80:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f87:	00 
  101f88:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f8f:	00 
  101f90:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101f96:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101f9c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101fa2:	e8 f9 f4 ff ff       	call   1014a0 <idt_set_entry>
  101fa7:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101fac:	8d 0d 16 2e 10 00    	lea    0x102e16,%ecx
  101fb2:	ba 08 00 00 00       	mov    $0x8,%edx
  101fb7:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(44, intr_stub_44, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101fbc:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101fc3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101fc7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101fce:	00 
  101fcf:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101fd6:	00 
  101fd7:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101fdd:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101fe3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101fe9:	e8 b2 f4 ff ff       	call   1014a0 <idt_set_entry>
  101fee:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101ff3:	8d 0d 1c 2e 10 00    	lea    0x102e1c,%ecx
  101ff9:	ba 08 00 00 00       	mov    $0x8,%edx
  101ffe:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(45, intr_stub_45, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102003:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  10200a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10200e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  102015:	00 
  102016:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10201d:	00 
  10201e:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  102024:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  10202a:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  102030:	e8 6b f4 ff ff       	call   1014a0 <idt_set_entry>
  102035:	b8 2e 00 00 00       	mov    $0x2e,%eax
  10203a:	8d 0d 22 2e 10 00    	lea    0x102e22,%ecx
  102040:	ba 08 00 00 00       	mov    $0x8,%edx
  102045:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(46, intr_stub_46, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10204a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  102051:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102055:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10205c:	00 
  10205d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  102064:	00 
  102065:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  10206b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  102071:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  102077:	e8 24 f4 ff ff       	call   1014a0 <idt_set_entry>
  10207c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  102081:	8d 0d 28 2e 10 00    	lea    0x102e28,%ecx
  102087:	ba 08 00 00 00       	mov    $0x8,%edx
  10208c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(47, intr_stub_47, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  102091:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  102098:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10209c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1020a3:	00 
  1020a4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1020ab:	00 
  1020ac:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  1020b2:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  1020b8:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  1020be:	e8 dd f3 ff ff       	call   1014a0 <idt_set_entry>
  1020c3:	b8 30 00 00 00       	mov    $0x30,%eax
  1020c8:	8d 0d 2e 2e 10 00    	lea    0x102e2e,%ecx
  1020ce:	ba 08 00 00 00       	mov    $0x8,%edx
  1020d3:	be ee 00 00 00       	mov    $0xee,%esi

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  1020d8:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  1020df:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1020e3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1020ea:	00 
  1020eb:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  1020f2:	00 
  1020f3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  1020f9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  1020ff:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  102105:	e8 96 f3 ff ff       	call   1014a0 <idt_set_entry>
  10210a:	b8 05 00 00 00       	mov    $0x5,%eax
  10210f:	8d 0d 08 41 10 00    	lea    0x104108,%ecx
  102115:	ba 80 00 00 00       	mov    $0x80,%edx
  10211a:	be e9 00 00 00       	mov    $0xe9,%esi

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  10211f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  102126:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10212a:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  102131:	00 
  102132:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  102139:	00 
  10213a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  102140:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  102146:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  10214c:	e8 2f 0e 00 00       	call   102f80 <set_gdt_entry>
  102151:	b8 28 00 00 00       	mov    $0x28,%eax

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  102156:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  102159:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  10215d:	fb                   	sti    
}
  10215e:	81 c4 34 02 00 00    	add    $0x234,%esp
  102164:	5e                   	pop    %esi
  102165:	5d                   	pop    %ebp
  102166:	c3                   	ret    
  102167:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10216e:	00 00 

00102170 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  102170:	55                   	push   %ebp
  102171:	89 e5                	mov    %esp,%ebp
  102173:	50                   	push   %eax
  102174:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  102178:	66 89 c1             	mov    %ax,%cx
  10217b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10217e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  102182:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  102185:	8a 45 fd             	mov    -0x3(%ebp),%al
  102188:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10218c:	ee                   	out    %al,(%dx)
}
  10218d:	83 c4 04             	add    $0x4,%esp
  102190:	5d                   	pop    %ebp
  102191:	c3                   	ret    
  102192:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102199:	1f 84 00 00 00 00 00 

001021a0 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  1021a0:	55                   	push   %ebp
  1021a1:	89 e5                	mov    %esp,%ebp
  1021a3:	83 ec 08             	sub    $0x8,%esp
  1021a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1021a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1021ac:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1021af:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  1021b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021b5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1021b8:	89 04 8d 18 b3 10 00 	mov    %eax,0x10b318(,%ecx,4)
	handler_set[i] = 1;
  1021bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1021c2:	c7 04 85 18 b2 10 00 	movl   $0x1,0x10b218(,%eax,4)
  1021c9:	01 00 00 00 
}
  1021cd:	83 c4 08             	add    $0x8,%esp
  1021d0:	5d                   	pop    %ebp
  1021d1:	c3                   	ret    
  1021d2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1021d9:	1f 84 00 00 00 00 00 

001021e0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  1021e0:	55                   	push   %ebp
  1021e1:	89 e5                	mov    %esp,%ebp
  1021e3:	83 ec 28             	sub    $0x28,%esp
  1021e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1021e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct cpu_state* new_cpu = cpu;
  1021ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1021ef:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if (cpu->intr <= 0x1f) {
  1021f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1021f5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  1021fc:	0f 87 3d 00 00 00    	ja     10223f <handle_interrupt+0x5f>
    if(!scheduling_enabled()) {
  102202:	e8 f9 0f 00 00       	call   103200 <scheduling_enabled>
  102207:	3d 00 00 00 00       	cmp    $0x0,%eax
  10220c:	0f 85 1a 00 00 00    	jne    10222c <handle_interrupt+0x4c>
  102212:	8d 05 8a 51 10 00    	lea    0x10518a,%eax
      show_cod(cpu, "Kernel PANIC!");
  102218:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10221b:	89 0c 24             	mov    %ecx,(%esp)
  10221e:	89 44 24 04          	mov    %eax,0x4(%esp)
  102222:	e8 29 01 00 00       	call   102350 <show_cod>
    }
  102227:	e9 0e 00 00 00       	jmp    10223a <handle_interrupt+0x5a>
    else
    {
      schedule_exception(cpu);
  10222c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10222f:	89 04 24             	mov    %eax,(%esp)
  102232:	e8 d9 0f 00 00       	call   103210 <schedule_exception>
  102237:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  10223a:	e9 fc 00 00 00       	jmp    10233b <handle_interrupt+0x15b>
  10223f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102242:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  102249:	0f 82 a7 00 00 00    	jb     1022f6 <handle_interrupt+0x116>
  10224f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102252:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  102259:	0f 87 97 00 00 00    	ja     1022f6 <handle_interrupt+0x116>
    if (cpu->intr >= 0x28) {
  10225f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102262:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  102269:	0f 82 24 00 00 00    	jb     102293 <handle_interrupt+0xb3>
  10226f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  102274:	b9 20 00 00 00       	mov    $0x20,%ecx
      outb(0xa0, 0x20);
  102279:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  102280:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102287:	00 
  102288:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10228b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10228e:	e8 dd fe ff ff       	call   102170 <outb>
    }
    if (cpu->intr == 0x20) {
  102293:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102296:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  10229d:	0f 85 0e 00 00 00    	jne    1022b1 <handle_interrupt+0xd1>
      new_cpu = schedule(cpu);
  1022a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1022a6:	89 04 24             	mov    %eax,(%esp)
  1022a9:	e8 b2 13 00 00       	call   103660 <schedule>
  1022ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1022b1:	b8 20 00 00 00       	mov    $0x20,%eax
    }
    outb(0x20, 0x20);
  1022b6:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1022bd:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1022c4:	00 
  1022c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1022c8:	e8 a3 fe ff ff       	call   102170 <outb>
		if(handler_set[cpu->intr]) {
  1022cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1022d0:	8b 40 1c             	mov    0x1c(%eax),%eax
  1022d3:	81 3c 85 18 b2 10 00 	cmpl   $0x0,0x10b218(,%eax,4)
  1022da:	00 00 00 00 
  1022de:	0f 84 0d 00 00 00    	je     1022f1 <handle_interrupt+0x111>
			handlers[cpu->intr]();
  1022e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1022e7:	8b 40 1c             	mov    0x1c(%eax),%eax
  1022ea:	ff 14 85 18 b3 10 00 	call   *0x10b318(,%eax,4)
		}
  } else if (cpu->intr == 0x30) {
  1022f1:	e9 40 00 00 00       	jmp    102336 <handle_interrupt+0x156>
  1022f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1022f9:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  102300:	0f 85 13 00 00 00    	jne    102319 <handle_interrupt+0x139>
		new_cpu = syscall(new_cpu);
  102306:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102309:	89 04 24             	mov    %eax,(%esp)
  10230c:	e8 7f 06 00 00       	call   102990 <syscall>
  102311:	89 45 f8             	mov    %eax,-0x8(%ebp)
  } else {
  102314:	e9 18 00 00 00       	jmp    102331 <handle_interrupt+0x151>
  102319:	8d 05 98 51 10 00    	lea    0x105198,%eax
    kprintf("Unbekannter Interrupt\n");
  10231f:	89 04 24             	mov    %eax,(%esp)
  102322:	e8 09 02 00 00       	call   102530 <kprintf>
  102327:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  10232a:	fa                   	cli    
  10232b:	f4                   	hlt    
    }
  10232c:	e9 f9 ff ff ff       	jmp    10232a <handle_interrupt+0x14a>
  102331:	e9 00 00 00 00       	jmp    102336 <handle_interrupt+0x156>
  102336:	e9 00 00 00 00       	jmp    10233b <handle_interrupt+0x15b>
  }  

  return new_cpu;
  10233b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10233e:	83 c4 28             	add    $0x28,%esp
  102341:	5d                   	pop    %ebp
  102342:	c3                   	ret    
  102343:	66 90                	xchg   %ax,%ax
  102345:	66 90                	xchg   %ax,%ax
  102347:	66 90                	xchg   %ax,%ax
  102349:	66 90                	xchg   %ax,%ax
  10234b:	66 90                	xchg   %ax,%ax
  10234d:	66 90                	xchg   %ax,%ax
  10234f:	90                   	nop

00102350 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu, char* fstr) {
  102350:	55                   	push   %ebp
  102351:	89 e5                	mov    %esp,%ebp
  102353:	56                   	push   %esi
  102354:	83 ec 24             	sub    $0x24,%esp
  102357:	8b 45 0c             	mov    0xc(%ebp),%eax
  10235a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10235d:	ba 04 00 00 00       	mov    $0x4,%edx
  102362:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102365:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kprintf ("          '''  \\   `-._.'`---^_))) \n");
  kprintf ("                `-._ )))       ``` \n");
  kprintf ("                     ```            \n");
  #endif
  
  setclr(0x04);
  102368:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10236f:	89 55 f0             	mov    %edx,-0x10(%ebp)
  102372:	e8 99 01 00 00       	call   102510 <setclr>
  kprintf(fstr);
  102377:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10237a:	89 04 24             	mov    %eax,(%esp)
  10237d:	e8 ae 01 00 00       	call   102530 <kprintf>
  102382:	8d 0d af 51 10 00    	lea    0x1051af,%ecx
  kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  102388:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10238b:	8b 52 1c             	mov    0x1c(%edx),%edx
  10238e:	8b 75 f8             	mov    -0x8(%ebp),%esi
  102391:	8b 76 20             	mov    0x20(%esi),%esi
  102394:	89 0c 24             	mov    %ecx,(%esp)
  102397:	89 54 24 04          	mov    %edx,0x4(%esp)
  10239b:	89 74 24 08          	mov    %esi,0x8(%esp)
  10239f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1023a2:	e8 89 01 00 00       	call   102530 <kprintf>
  show_dump(cpu);
  1023a7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1023aa:	89 0c 24             	mov    %ecx,(%esp)
  1023ad:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1023b0:	e8 0b 00 00 00       	call   1023c0 <show_dump>

  while(1) {
    asm volatile("cli; hlt");
  1023b5:	fa                   	cli    
  1023b6:	f4                   	hlt    
  }
  1023b7:	e9 f9 ff ff ff       	jmp    1023b5 <show_cod+0x65>
  1023bc:	0f 1f 40 00          	nopl   0x0(%eax)

001023c0 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  1023c0:	55                   	push   %ebp
  1023c1:	89 e5                	mov    %esp,%ebp
  1023c3:	53                   	push   %ebx
  1023c4:	57                   	push   %edi
  1023c5:	56                   	push   %esi
  1023c6:	83 ec 2c             	sub    $0x2c,%esp
  1023c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1023cc:	8d 0d d4 51 10 00    	lea    0x1051d4,%ecx
  1023d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  1023d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1023d8:	8b 00                	mov    (%eax),%eax
  1023da:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1023dd:	8b 52 04             	mov    0x4(%edx),%edx
  1023e0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1023e3:	8b 76 08             	mov    0x8(%esi),%esi
  1023e6:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1023e9:	8b 7f 0c             	mov    0xc(%edi),%edi
  1023ec:	89 0c 24             	mov    %ecx,(%esp)
  1023ef:	89 44 24 04          	mov    %eax,0x4(%esp)
  1023f3:	89 54 24 08          	mov    %edx,0x8(%esp)
  1023f7:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1023fb:	89 7c 24 10          	mov    %edi,0x10(%esp)
  1023ff:	e8 2c 01 00 00       	call   102530 <kprintf>
  102404:	8d 0d f5 51 10 00    	lea    0x1051f5,%ecx
  kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  10240a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10240d:	8b 52 10             	mov    0x10(%edx),%edx
  102410:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102413:	8b 76 14             	mov    0x14(%esi),%esi
  102416:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102419:	8b 7f 18             	mov    0x18(%edi),%edi
  10241c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10241f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  102422:	89 0c 24             	mov    %ecx,(%esp)
  102425:	89 54 24 04          	mov    %edx,0x4(%esp)
  102429:	89 74 24 08          	mov    %esi,0x8(%esp)
  10242d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  102431:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  102435:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102438:	e8 f3 00 00 00       	call   102530 <kprintf>
  10243d:	8d 0d 16 52 10 00    	lea    0x105216,%ecx
  kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  102443:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102446:	8b 52 28             	mov    0x28(%edx),%edx
  102449:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10244c:	8b 76 2c             	mov    0x2c(%esi),%esi
  10244f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102452:	8b 7f 30             	mov    0x30(%edi),%edi
  102455:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  102458:	8b 5b 34             	mov    0x34(%ebx),%ebx
  10245b:	89 0c 24             	mov    %ecx,(%esp)
  10245e:	89 54 24 04          	mov    %edx,0x4(%esp)
  102462:	89 74 24 08          	mov    %esi,0x8(%esp)
  102466:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10246a:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  10246e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102471:	e8 ba 00 00 00       	call   102530 <kprintf>
  102476:	8d 0d 38 52 10 00    	lea    0x105238,%ecx

  uint32_t cr2 = 0;
  10247c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  asm volatile("mov %%cr2, %0" : "=r" (cr2));
  102483:	0f 20 d2             	mov    %cr2,%edx
  102486:	89 55 ec             	mov    %edx,-0x14(%ebp)

  kprintf("CR2: %x \n", cr2);
  102489:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10248c:	89 0c 24             	mov    %ecx,(%esp)
  10248f:	89 54 24 04          	mov    %edx,0x4(%esp)
  102493:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102496:	e8 95 00 00 00       	call   102530 <kprintf>
}
  10249b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10249e:	83 c4 2c             	add    $0x2c,%esp
  1024a1:	5e                   	pop    %esi
  1024a2:	5f                   	pop    %edi
  1024a3:	5b                   	pop    %ebx
  1024a4:	5d                   	pop    %ebp
  1024a5:	c3                   	ret    
  1024a6:	66 90                	xchg   %ax,%ax
  1024a8:	66 90                	xchg   %ax,%ax
  1024aa:	66 90                	xchg   %ax,%ax
  1024ac:	66 90                	xchg   %ax,%ax
  1024ae:	66 90                	xchg   %ax,%ax

001024b0 <clrscr>:
    } while (x);
    kputs(p);
}

void clrscr(void)
{
  1024b0:	55                   	push   %ebp
  1024b1:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1024b3:	50                   	push   %eax
  1024b4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1024bb:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  1024c2:	0f 8d 1d 00 00 00    	jge    1024e5 <clrscr+0x35>
        video[i] = 0;
  1024c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1024cb:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  1024d1:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1024d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1024d8:	05 01 00 00 00       	add    $0x1,%eax
  1024dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1024e0:	e9 d6 ff ff ff       	jmp    1024bb <clrscr+0xb>
        video[i] = 0;
    }
    
    color = 0x07;
  1024e5:	c6 05 8c 41 10 00 07 	movb   $0x7,0x10418c

    x = y = 0;
  1024ec:	c7 05 18 b4 10 00 00 	movl   $0x0,0x10b418
  1024f3:	00 00 00 
  1024f6:	c7 05 1c b4 10 00 00 	movl   $0x0,0x10b41c
  1024fd:	00 00 00 
}
  102500:	83 c4 04             	add    $0x4,%esp
  102503:	5d                   	pop    %ebp
  102504:	c3                   	ret    
  102505:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10250c:	00 00 00 00 

00102510 <setclr>:

void setclr(char clr) {
  102510:	55                   	push   %ebp
  102511:	89 e5                	mov    %esp,%ebp
  102513:	50                   	push   %eax
  102514:	8a 45 08             	mov    0x8(%ebp),%al
  102517:	88 45 ff             	mov    %al,-0x1(%ebp)
  color = clr;
  10251a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10251d:	a2 8c 41 10 00       	mov    %al,0x10418c
}
  102522:	83 c4 04             	add    $0x4,%esp
  102525:	5d                   	pop    %ebp
  102526:	c3                   	ret    
  102527:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10252e:	00 00 

00102530 <kprintf>:

int kprintf(const char* fmt, ...)
{
  102530:	55                   	push   %ebp
  102531:	89 e5                	mov    %esp,%ebp
  102533:	83 ec 58             	sub    $0x58,%esp
  102536:	8b 45 08             	mov    0x8(%ebp),%eax
  102539:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  10253c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10253f:	8d 45 0c             	lea    0xc(%ebp),%eax
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  102542:	89 01                	mov    %eax,(%ecx)
  kprintf_res = 0;
  102544:	c7 05 20 b4 10 00 00 	movl   $0x0,0x10b420
  10254b:	00 00 00 
  while (*fmt) {
  10254e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102551:	80 38 00             	cmpb   $0x0,(%eax)
  102554:	0f 84 dd 01 00 00    	je     102737 <kprintf+0x207>
    if (*fmt == '%') {
  10255a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10255d:	0f be 00             	movsbl (%eax),%eax
  102560:	3d 25 00 00 00       	cmp    $0x25,%eax
  102565:	0f 85 ae 01 00 00    	jne    102719 <kprintf+0x1e9>
      fmt++;
  10256b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10256e:	89 c1                	mov    %eax,%ecx
  102570:	41                   	inc    %ecx
  102571:	89 4d fc             	mov    %ecx,-0x4(%ebp)
      switch (*fmt) {
  102574:	0f be 40 01          	movsbl 0x1(%eax),%eax
  102578:	89 c1                	mov    %eax,%ecx
  10257a:	83 e9 24             	sub    $0x24,%ecx
  10257d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102580:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  102583:	0f 8f 15 00 00 00    	jg     10259e <kprintf+0x6e>
  102589:	e9 00 00 00 00       	jmp    10258e <kprintf+0x5e>
  10258e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102591:	85 c0                	test   %eax,%eax
  102593:	0f 84 54 01 00 00    	je     1026ed <kprintf+0x1bd>
  102599:	e9 54 01 00 00       	jmp    1026f2 <kprintf+0x1c2>
  10259e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1025a1:	83 e8 62             	sub    $0x62,%eax
  1025a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1025a7:	0f 8f 19 00 00 00    	jg     1025c6 <kprintf+0x96>
  1025ad:	e9 00 00 00 00       	jmp    1025b2 <kprintf+0x82>
  1025b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1025b5:	83 e8 25             	sub    $0x25,%eax
  1025b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1025bb:	0f 84 13 01 00 00    	je     1026d4 <kprintf+0x1a4>
  1025c1:	e9 2c 01 00 00       	jmp    1026f2 <kprintf+0x1c2>
  1025c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1025c9:	83 e8 6f             	sub    $0x6f,%eax
  1025cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1025cf:	0f 8f 2d 00 00 00    	jg     102602 <kprintf+0xd2>
  1025d5:	e9 00 00 00 00       	jmp    1025da <kprintf+0xaa>
  1025da:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1025dd:	83 e8 63             	sub    $0x63,%eax
  1025e0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1025e3:	0f 84 c5 00 00 00    	je     1026ae <kprintf+0x17e>
  1025e9:	e9 00 00 00 00       	jmp    1025ee <kprintf+0xbe>
  1025ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1025f1:	83 e8 64             	sub    $0x64,%eax
  1025f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1025f7:	0f 84 4b 00 00 00    	je     102648 <kprintf+0x118>
  1025fd:	e9 f0 00 00 00       	jmp    1026f2 <kprintf+0x1c2>
  102602:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102605:	83 c0 90             	add    $0xffffff90,%eax
  102608:	89 c1                	mov    %eax,%ecx
  10260a:	83 e9 08             	sub    $0x8,%ecx
  10260d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102610:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  102613:	0f 87 d9 00 00 00    	ja     1026f2 <kprintf+0x1c2>
  102619:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10261c:	8b 0c 85 08 50 10 00 	mov    0x105008(,%eax,4),%ecx
  102623:	ff e1                	jmp    *%ecx
        case 's':
          s = va_arg(ap, char*);
  102625:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102628:	89 c1                	mov    %eax,%ecx
  10262a:	81 c1 04 00 00 00    	add    $0x4,%ecx
  102630:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102633:	8b 00                	mov    (%eax),%eax
  102635:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  102638:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10263b:	89 04 24             	mov    %eax,(%esp)
  10263e:	e8 0d 01 00 00       	call   102750 <kputs>
          break;
  102643:	e9 cc 00 00 00       	jmp    102714 <kprintf+0x1e4>
  102648:	b8 0a 00 00 00       	mov    $0xa,%eax
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  10264d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102650:	89 ca                	mov    %ecx,%edx
  102652:	81 c2 04 00 00 00    	add    $0x4,%edx
  102658:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10265b:	8b 09                	mov    (%ecx),%ecx
  10265d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 10);
  102660:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102663:	89 0c 24             	mov    %ecx,(%esp)
  102666:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10266d:	00 
  10266e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102671:	e8 1a 01 00 00       	call   102790 <kputn>
          break;
  102676:	e9 99 00 00 00       	jmp    102714 <kprintf+0x1e4>
  10267b:	b8 10 00 00 00       	mov    $0x10,%eax
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  102680:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102683:	89 ca                	mov    %ecx,%edx
  102685:	81 c2 04 00 00 00    	add    $0x4,%edx
  10268b:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10268e:	8b 09                	mov    (%ecx),%ecx
  102690:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 16);
  102693:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102696:	89 0c 24             	mov    %ecx,(%esp)
  102699:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1026a0:	00 
  1026a1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1026a4:	e8 e7 00 00 00       	call   102790 <kputn>
          break;
  1026a9:	e9 66 00 00 00       	jmp    102714 <kprintf+0x1e4>
        case 'c':
          c = va_arg(ap, int);
  1026ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1026b1:	89 c1                	mov    %eax,%ecx
  1026b3:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1026b9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1026bc:	8b 00                	mov    (%eax),%eax
  1026be:	88 c2                	mov    %al,%dl
  1026c0:	88 55 ef             	mov    %dl,-0x11(%ebp)
          kputc(c);
  1026c3:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  1026c7:	89 04 24             	mov    %eax,(%esp)
  1026ca:	e8 61 01 00 00       	call   102830 <kputc>
          break;
  1026cf:	e9 40 00 00 00       	jmp    102714 <kprintf+0x1e4>
  1026d4:	b8 25 00 00 00       	mov    $0x25,%eax
        case '%':
          kputc('%');
  1026d9:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1026e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
  1026e3:	e8 48 01 00 00       	call   102830 <kputc>
          break;
  1026e8:	e9 27 00 00 00       	jmp    102714 <kprintf+0x1e4>
        case '\0':
          goto out;
  1026ed:	e9 4a 00 00 00       	jmp    10273c <kprintf+0x20c>
  1026f2:	b8 25 00 00 00       	mov    $0x25,%eax
        default:
          kputc('%');
  1026f7:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1026fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102701:	e8 2a 01 00 00       	call   102830 <kputc>
          kputc(*fmt);
  102706:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102709:	0f be 00             	movsbl (%eax),%eax
  10270c:	89 04 24             	mov    %eax,(%esp)
  10270f:	e8 1c 01 00 00       	call   102830 <kputc>
          break;
      }
    } else {
  102714:	e9 0e 00 00 00       	jmp    102727 <kprintf+0x1f7>
      kputc(*fmt);
  102719:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10271c:	0f be 00             	movsbl (%eax),%eax
  10271f:	89 04 24             	mov    %eax,(%esp)
  102722:	e8 09 01 00 00       	call   102830 <kputc>
    }

    fmt++;
  102727:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10272a:	05 01 00 00 00       	add    $0x1,%eax
  10272f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  102732:	e9 17 fe ff ff       	jmp    10254e <kprintf+0x1e>
  102737:	e9 00 00 00 00       	jmp    10273c <kprintf+0x20c>

out:
  va_end(ap);

  return kprintf_res;
  10273c:	a1 20 b4 10 00       	mov    0x10b420,%eax
  102741:	83 c4 58             	add    $0x58,%esp
  102744:	5d                   	pop    %ebp
  102745:	c3                   	ret    
  102746:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10274d:	00 00 00 

00102750 <kputs>:
    x++;
    kprintf_res++;
}

static void kputs(const char* s)
{
  102750:	55                   	push   %ebp
  102751:	89 e5                	mov    %esp,%ebp
  102753:	83 ec 08             	sub    $0x8,%esp
  102756:	8b 45 08             	mov    0x8(%ebp),%eax
  102759:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  10275c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10275f:	80 38 00             	cmpb   $0x0,(%eax)
  102762:	0f 84 1e 00 00 00    	je     102786 <kputs+0x36>
        kputc(*s++);
  102768:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10276b:	89 c1                	mov    %eax,%ecx
  10276d:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102773:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  102776:	0f be 00             	movsbl (%eax),%eax
  102779:	89 04 24             	mov    %eax,(%esp)
  10277c:	e8 af 00 00 00       	call   102830 <kputc>
    }
  102781:	e9 d6 ff ff ff       	jmp    10275c <kputs+0xc>
}
  102786:	83 c4 08             	add    $0x8,%esp
  102789:	5d                   	pop    %ebp
  10278a:	c3                   	ret    
  10278b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102790 <kputn>:

static void kputn(unsigned long x, int base)
{
  102790:	55                   	push   %ebp
  102791:	89 e5                	mov    %esp,%ebp
  102793:	56                   	push   %esi
  102794:	83 ec 64             	sub    $0x64,%esp
  102797:	8b 45 0c             	mov    0xc(%ebp),%eax
  10279a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10279d:	8d 15 42 52 10 00    	lea    0x105242,%edx
  1027a3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1027a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1027a9:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  1027ac:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  1027b3:	0f 8e 05 00 00 00    	jle    1027be <kputn+0x2e>
        return;
  1027b9:	e9 5d 00 00 00       	jmp    10281b <kputn+0x8b>
  1027be:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  1027c1:	05 40 00 00 00       	add    $0x40,%eax
  1027c6:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  1027c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1027cc:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  1027cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1027d2:	31 d2                	xor    %edx,%edx
  1027d4:	f7 75 f4             	divl   -0xc(%ebp)
  1027d7:	8b 45 ac             	mov    -0x54(%ebp),%eax
  1027da:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  1027dd:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1027e0:	89 c2                	mov    %eax,%edx
  1027e2:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  1027e8:	89 55 a8             	mov    %edx,-0x58(%ebp)
  1027eb:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  1027ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027f1:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1027f4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  1027f7:	89 d0                	mov    %edx,%eax
  1027f9:	31 d2                	xor    %edx,%edx
  1027fb:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  1027fe:	f7 f6                	div    %esi
  102800:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  102803:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10280a:	0f 85 bf ff ff ff    	jne    1027cf <kputn+0x3f>
    kputs(p);
  102810:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102813:	89 04 24             	mov    %eax,(%esp)
  102816:	e8 35 ff ff ff       	call   102750 <kputs>
}
  10281b:	83 c4 64             	add    $0x64,%esp
  10281e:	5e                   	pop    %esi
  10281f:	5d                   	pop    %ebp
  102820:	c3                   	ret    
  102821:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102828:	0f 1f 84 00 00 00 00 
  10282f:	00 

00102830 <kputc>:
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c)
{
  102830:	55                   	push   %ebp
  102831:	89 e5                	mov    %esp,%ebp
  102833:	83 ec 08             	sub    $0x8,%esp
  102836:	8a 45 08             	mov    0x8(%ebp),%al
  102839:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((c == '\n') || (x > 79)) {
  10283c:	0f be 4d ff          	movsbl -0x1(%ebp),%ecx
  102840:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  102846:	0f 84 10 00 00 00    	je     10285c <kputc+0x2c>
  10284c:	81 3d 1c b4 10 00 4f 	cmpl   $0x4f,0x10b41c
  102853:	00 00 00 
  102856:	0f 8e 19 00 00 00    	jle    102875 <kputc+0x45>
        x = 0;
  10285c:	c7 05 1c b4 10 00 00 	movl   $0x0,0x10b41c
  102863:	00 00 00 
        y++;
  102866:	a1 18 b4 10 00       	mov    0x10b418,%eax
  10286b:	05 01 00 00 00       	add    $0x1,%eax
  102870:	a3 18 b4 10 00       	mov    %eax,0x10b418
    }

    if (c == '\n') {
  102875:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  102879:	3d 0a 00 00 00       	cmp    $0xa,%eax
  10287e:	0f 85 05 00 00 00    	jne    102889 <kputc+0x59>
        return;
  102884:	e9 f3 00 00 00       	jmp    10297c <kputc+0x14c>
    }

    if (y > 24) {
  102889:	81 3d 18 b4 10 00 18 	cmpl   $0x18,0x10b418
  102890:	00 00 00 
  102893:	0f 8e 7e 00 00 00    	jle    102917 <kputc+0xe7>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  102899:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1028a0:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  1028a7:	0f 8d 2c 00 00 00    	jge    1028d9 <kputc+0xa9>
            video[i] = video[i + 160];
  1028ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028b0:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  1028b6:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  1028bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028c0:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  1028c6:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1028c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028cc:	05 01 00 00 00       	add    $0x1,%eax
  1028d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1028d4:	e9 c7 ff ff ff       	jmp    1028a0 <kputc+0x70>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  1028d9:	e9 00 00 00 00       	jmp    1028de <kputc+0xae>
  1028de:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  1028e5:	0f 8d 1d 00 00 00    	jge    102908 <kputc+0xd8>
            video[i] = 0;
  1028eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028ee:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  1028f4:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  1028f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028fb:	05 01 00 00 00       	add    $0x1,%eax
  102900:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102903:	e9 d6 ff ff ff       	jmp    1028de <kputc+0xae>
            video[i] = 0;
        }
        y--;
  102908:	a1 18 b4 10 00       	mov    0x10b418,%eax
  10290d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  102912:	a3 18 b4 10 00       	mov    %eax,0x10b418
    }

    video[2 * (y * 80 + x)] = c;
  102917:	8a 45 ff             	mov    -0x1(%ebp),%al
  10291a:	69 0d 18 b4 10 00 50 	imul   $0x50,0x10b418,%ecx
  102921:	00 00 00 
  102924:	03 0d 1c b4 10 00    	add    0x10b41c,%ecx
  10292a:	c1 e1 01             	shl    $0x1,%ecx
  10292d:	8b 15 88 41 10 00    	mov    0x104188,%edx
  102933:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  102936:	a0 8c 41 10 00       	mov    0x10418c,%al
  10293b:	69 0d 18 b4 10 00 50 	imul   $0x50,0x10b418,%ecx
  102942:	00 00 00 
  102945:	03 0d 1c b4 10 00    	add    0x10b41c,%ecx
  10294b:	c1 e1 01             	shl    $0x1,%ecx
  10294e:	8b 15 88 41 10 00    	mov    0x104188,%edx
  102954:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  102958:	8b 0d 1c b4 10 00    	mov    0x10b41c,%ecx
  10295e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102964:	89 0d 1c b4 10 00    	mov    %ecx,0x10b41c
    kprintf_res++;
  10296a:	8b 0d 20 b4 10 00    	mov    0x10b420,%ecx
  102970:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102976:	89 0d 20 b4 10 00    	mov    %ecx,0x10b420
}
  10297c:	83 c4 08             	add    $0x8,%esp
  10297f:	5d                   	pop    %ebp
  102980:	c3                   	ret    
  102981:	66 90                	xchg   %ax,%ax
  102983:	66 90                	xchg   %ax,%ax
  102985:	66 90                	xchg   %ax,%ax
  102987:	66 90                	xchg   %ax,%ax
  102989:	66 90                	xchg   %ax,%ax
  10298b:	66 90                	xchg   %ax,%ax
  10298d:	66 90                	xchg   %ax,%ax
  10298f:	90                   	nop

00102990 <syscall>:
#include "kernel.h"

extern struct task* current_task;

struct cpu_state* syscall(struct cpu_state* cpu)
{
  102990:	55                   	push   %ebp
  102991:	89 e5                	mov    %esp,%ebp
  102993:	83 ec 38             	sub    $0x38,%esp
  102996:	8b 45 08             	mov    0x8(%ebp),%eax
  102999:	89 45 fc             	mov    %eax,-0x4(%ebp)
  switch (cpu->eax) {
  10299c:	8b 00                	mov    (%eax),%eax
  10299e:	89 c1                	mov    %eax,%ecx
  1029a0:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  1029a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1029a9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1029ac:	0f 8f 2d 00 00 00    	jg     1029df <syscall+0x4f>
  1029b2:	e9 00 00 00 00       	jmp    1029b7 <syscall+0x27>
  1029b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1029ba:	83 e8 01             	sub    $0x1,%eax
  1029bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1029c0:	0f 84 45 00 00 00    	je     102a0b <syscall+0x7b>
  1029c6:	e9 00 00 00 00       	jmp    1029cb <syscall+0x3b>
  1029cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1029ce:	83 e8 02             	sub    $0x2,%eax
  1029d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1029d4:	0f 84 44 00 00 00    	je     102a1e <syscall+0x8e>
  1029da:	e9 c9 00 00 00       	jmp    102aa8 <syscall+0x118>
  1029df:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1029e2:	2d c9 00 00 00       	sub    $0xc9,%eax
  1029e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1029ea:	0f 84 79 00 00 00    	je     102a69 <syscall+0xd9>
  1029f0:	e9 00 00 00 00       	jmp    1029f5 <syscall+0x65>
  1029f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1029f8:	2d ca 00 00 00       	sub    $0xca,%eax
  1029fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102a00:	0f 84 85 00 00 00    	je     102a8b <syscall+0xfb>
  102a06:	e9 9d 00 00 00       	jmp    102aa8 <syscall+0x118>
    case 1: /* exit */
      cpu = terminate_current(cpu);
  102a0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a0e:	89 04 24             	mov    %eax,(%esp)
  102a11:	e8 2a 09 00 00       	call   103340 <terminate_current>
  102a16:	89 45 fc             	mov    %eax,-0x4(%ebp)
      break;
  102a19:	e9 8a 00 00 00       	jmp    102aa8 <syscall+0x118>

    case 2: /* fork */
      {
        save_cpu_state(cpu);
  102a1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a21:	89 04 24             	mov    %eax,(%esp)
  102a24:	e8 f7 0b 00 00       	call   103620 <save_cpu_state>
  
        uint32_t forkpdir = vmm_fork_current();
  102a29:	e8 f2 dc ff ff       	call   100720 <vmm_fork_current>
  102a2e:	b9 00 00 00 00       	mov    $0x0,%ecx
  102a33:	89 45 f8             	mov    %eax,-0x8(%ebp)
        
        struct task* ntask = init_task(forkpdir, 0);
  102a36:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102a39:	89 04 24             	mov    %eax,(%esp)
  102a3c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102a43:	00 
  102a44:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  102a47:	e8 04 0a 00 00       	call   103450 <init_task>
  102a4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        fork_task_state(ntask);
  102a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a52:	89 04 24             	mov    %eax,(%esp)
  102a55:	e8 96 09 00 00       	call   1033f0 <fork_task_state>
                
        cpu->eax = ntask->PID;
  102a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a5d:	8b 00                	mov    (%eax),%eax
  102a5f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a62:	89 01                	mov    %eax,(%ecx)
      }           
      break;
  102a64:	e9 3f 00 00 00       	jmp    102aa8 <syscall+0x118>
  102a69:	8d 05 67 52 10 00    	lea    0x105267,%eax
      
    case 201: /* putc */
      cpu->eax = kprintf("%c", cpu->ebx);
  102a6f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a72:	8b 49 04             	mov    0x4(%ecx),%ecx
  102a75:	89 04 24             	mov    %eax,(%esp)
  102a78:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a7c:	e8 af fa ff ff       	call   102530 <kprintf>
  102a81:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a84:	89 01                	mov    %eax,(%ecx)
      break;
  102a86:	e9 1d 00 00 00       	jmp    102aa8 <syscall+0x118>
  102a8b:	8d 05 6a 52 10 00    	lea    0x10526a,%eax
    case 202: /* puts */
      cpu->eax = kprintf("%s", cpu->ebx);
  102a91:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a94:	8b 49 04             	mov    0x4(%ecx),%ecx
  102a97:	89 04 24             	mov    %eax,(%esp)
  102a9a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a9e:	e8 8d fa ff ff       	call   102530 <kprintf>
  102aa3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102aa6:	89 01                	mov    %eax,(%ecx)
      break;
  }

  return cpu;
  102aa8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102aab:	83 c4 38             	add    $0x38,%esp
  102aae:	5d                   	pop    %ebp
  102aaf:	c3                   	ret    

00102ab0 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  102ab0:	55                   	push   %ebp
  102ab1:	89 e5                	mov    %esp,%ebp
  102ab3:	53                   	push   %ebx
  102ab4:	57                   	push   %edi
  102ab5:	56                   	push   %esi
  102ab6:	83 ec 6c             	sub    $0x6c,%esp
  102ab9:	8b 45 08             	mov    0x8(%ebp),%eax
  102abc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  102abf:	e8 ac e7 ff ff       	call   101270 <vmm_init>
  102ac4:	b9 00 00 00 00       	mov    $0x0,%ecx
  102ac9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  102acc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102acf:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102ad2:	89 04 24             	mov    %eax,(%esp)
  102ad5:	89 54 24 04          	mov    %edx,0x4(%esp)
  102ad9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102ae0:	00 
  102ae1:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  102ae4:	e8 77 e3 ff ff       	call   100e60 <map_address_active>
  102ae9:	b8 00 00 00 00       	mov    $0x0,%eax
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
  102aee:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102af1:	8b 49 18             	mov    0x18(%ecx),%ecx
  102af4:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102af7:	8b 52 18             	mov    0x18(%edx),%edx
  102afa:	89 0c 24             	mov    %ecx,(%esp)
  102afd:	89 54 24 04          	mov    %edx,0x4(%esp)
  102b01:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102b08:	00 
  102b09:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102b0c:	e8 4f e3 ff ff       	call   100e60 <map_address_active>
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  102b11:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b14:	8b 00                	mov    (%eax),%eax
  102b16:	25 08 00 00 00       	and    $0x8,%eax
  102b1b:	3d 00 00 00 00       	cmp    $0x0,%eax
  102b20:	0f 84 ff 01 00 00    	je     102d25 <kernel_main+0x275>
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102b26:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  102b2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102b30:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102b33:	3b 41 14             	cmp    0x14(%ecx),%eax
  102b36:	0f 83 df 01 00 00    	jae    102d1b <kernel_main+0x26b>
  102b3c:	8d 05 6d 52 10 00    	lea    0x10526d,%eax
	    kprintf("Loading mod at %x \n", mb_info->mi_mods_addr[i].start);
  102b42:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102b48:	8b 52 18             	mov    0x18(%edx),%edx
  102b4b:	c1 e1 04             	shl    $0x4,%ecx
  102b4e:	01 ca                	add    %ecx,%edx
  102b50:	8b 0a                	mov    (%edx),%ecx
  102b52:	89 04 24             	mov    %eax,(%esp)
  102b55:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b59:	e8 d2 f9 ff ff       	call   102530 <kprintf>
	    
	    uint32_t elf_mod_pdir = vmm_create_pagedir();
  102b5e:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102b61:	e8 0a e1 ff ff       	call   100c70 <vmm_create_pagedir>
  102b66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    void* elf_mod_entry = 0;
  102b69:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	    
	    vmm_activate_pagedir(elf_mod_pdir);
  102b70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102b73:	89 04 24             	mov    %eax,(%esp)
  102b76:	e8 d5 e6 ff ff       	call   101250 <vmm_activate_pagedir>
  102b7b:	b8 00 00 00 00       	mov    $0x0,%eax
	    
	    vmm_map_range(mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].end - mb_info->mi_mods_addr[i].start, 0);
  102b80:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102b83:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102b86:	8b 52 18             	mov    0x18(%edx),%edx
  102b89:	c1 e1 04             	shl    $0x4,%ecx
  102b8c:	01 ca                	add    %ecx,%edx
  102b8e:	8b 0a                	mov    (%edx),%ecx
  102b90:	8b 55 e8             	mov    -0x18(%ebp),%edx
  102b93:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102b96:	8b 76 18             	mov    0x18(%esi),%esi
  102b99:	c1 e2 04             	shl    $0x4,%edx
  102b9c:	01 d6                	add    %edx,%esi
  102b9e:	8b 16                	mov    (%esi),%edx
  102ba0:	8b 75 e8             	mov    -0x18(%ebp),%esi
  102ba3:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102ba6:	8b 7f 18             	mov    0x18(%edi),%edi
  102ba9:	c1 e6 04             	shl    $0x4,%esi
  102bac:	01 f7                	add    %esi,%edi
  102bae:	8b 77 04             	mov    0x4(%edi),%esi
  102bb1:	8b 7d e8             	mov    -0x18(%ebp),%edi
  102bb4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  102bb7:	8b 5b 18             	mov    0x18(%ebx),%ebx
  102bba:	c1 e7 04             	shl    $0x4,%edi
  102bbd:	01 fb                	add    %edi,%ebx
  102bbf:	8b 3b                	mov    (%ebx),%edi
  102bc1:	29 fe                	sub    %edi,%esi
  102bc3:	89 0c 24             	mov    %ecx,(%esp)
  102bc6:	89 54 24 04          	mov    %edx,0x4(%esp)
  102bca:	89 74 24 08          	mov    %esi,0x8(%esp)
  102bce:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102bd5:	00 
  102bd6:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102bd9:	e8 f2 e2 ff ff       	call   100ed0 <vmm_map_range>
      
      struct elf_header* header = mb_info->mi_mods_addr[i].start;
  102bde:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102be1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102be4:	8b 49 18             	mov    0x18(%ecx),%ecx
  102be7:	c1 e0 04             	shl    $0x4,%eax
  102bea:	01 c1                	add    %eax,%ecx
  102bec:	8b 01                	mov    (%ecx),%eax
  102bee:	89 45 dc             	mov    %eax,-0x24(%ebp)
      struct elf_program_header* ph;

      /* Ist es ueberhaupt eine ELF-Datei? */
      if (header->magic != ELF_MAGIC) {
  102bf1:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102bf4:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  102bfa:	0f 84 16 00 00 00    	je     102c16 <kernel_main+0x166>
  102c00:	8d 05 81 52 10 00    	lea    0x105281,%eax
        kprintf("Invalid ELF-Magic!\n");
  102c06:	89 04 24             	mov    %eax,(%esp)
  102c09:	e8 22 f9 ff ff       	call   102530 <kprintf>
        continue;
  102c0e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  102c11:	e9 f5 00 00 00       	jmp    102d0b <kernel_main+0x25b>
      }
      
      elf_mod_entry = (void*)( header->entry );
  102c16:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102c19:	8b 40 18             	mov    0x18(%eax),%eax
  102c1c:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  102c1f:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102c22:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102c25:	03 41 1c             	add    0x1c(%ecx),%eax
  102c28:	89 45 d8             	mov    %eax,-0x28(%ebp)
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102c2b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102c32:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102c35:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102c38:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  102c3c:	39 c8                	cmp    %ecx,%eax
  102c3e:	0f 83 a7 00 00 00    	jae    102ceb <kernel_main+0x23b>
        void* dest = (void*) ph->virt_addr;
  102c44:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102c47:	8b 40 08             	mov    0x8(%eax),%eax
  102c4a:	89 45 d0             	mov    %eax,-0x30(%ebp)
        void* src = ((char*) header) + ph->offset;
  102c4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102c50:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102c53:	03 41 04             	add    0x4(%ecx),%eax
  102c56:	89 45 cc             	mov    %eax,-0x34(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  102c59:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102c5c:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  102c62:	0f 84 05 00 00 00    	je     102c6d <kernel_main+0x1bd>
            continue;
  102c68:	e9 63 00 00 00       	jmp    102cd0 <kernel_main+0x220>
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  102c6d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  102c74:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102c77:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102c7a:	3b 41 14             	cmp    0x14(%ecx),%eax
  102c7d:	0f 83 31 00 00 00    	jae    102cb4 <kernel_main+0x204>
  102c83:	b8 00 00 00 00       	mov    $0x0,%eax
          vmm_alloc_addr(dest + offset, 0);
  102c88:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  102c8b:	03 4d c8             	add    -0x38(%ebp),%ecx
  102c8e:	89 0c 24             	mov    %ecx,(%esp)
  102c91:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102c98:	00 
  102c99:	89 45 b0             	mov    %eax,-0x50(%ebp)
  102c9c:	e8 af e4 ff ff       	call   101150 <vmm_alloc_addr>
  102ca1:	89 45 ac             	mov    %eax,-0x54(%ebp)
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  102ca4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102ca7:	05 00 10 00 00       	add    $0x1000,%eax
  102cac:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102caf:	e9 c0 ff ff ff       	jmp    102c74 <kernel_main+0x1c4>
          vmm_alloc_addr(dest + offset, 0);
        }
        
        memcpy(dest, src, ph->file_size);
  102cb4:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102cb7:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  102cba:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102cbd:	8b 52 10             	mov    0x10(%edx),%edx
  102cc0:	89 04 24             	mov    %eax,(%esp)
  102cc3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102cc7:	89 54 24 08          	mov    %edx,0x8(%esp)
  102ccb:	e8 00 02 00 00       	call   102ed0 <memcpy>
      }
      
      elf_mod_entry = (void*)( header->entry );
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102cd0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102cd3:	05 01 00 00 00       	add    $0x1,%eax
  102cd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102cdb:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102cde:	05 20 00 00 00       	add    $0x20,%eax
  102ce3:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102ce6:	e9 47 ff ff ff       	jmp    102c32 <kernel_main+0x182>
        }
        
        memcpy(dest, src, ph->file_size);
      }
      
      vmm_activate_pagedir(kernel_init_pdir);
  102ceb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102cee:	89 04 24             	mov    %eax,(%esp)
  102cf1:	e8 5a e5 ff ff       	call   101250 <vmm_activate_pagedir>
      
      init_task(elf_mod_pdir, elf_mod_entry);
  102cf6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102cf9:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  102cfc:	89 04 24             	mov    %eax,(%esp)
  102cff:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102d03:	e8 48 07 00 00       	call   103450 <init_task>
  102d08:	89 45 a8             	mov    %eax,-0x58(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102d0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102d0e:	05 01 00 00 00       	add    $0x1,%eax
  102d13:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102d16:	e9 12 fe ff ff       	jmp    102b2d <kernel_main+0x7d>
      vmm_activate_pagedir(kernel_init_pdir);
      
      init_task(elf_mod_pdir, elf_mod_entry);
	  }
	
	  enable_scheduling();
  102d1b:	e8 d0 04 00 00       	call   1031f0 <enable_scheduling>
	}
  102d20:	e9 11 00 00 00       	jmp    102d36 <kernel_main+0x286>
  102d25:	8d 05 95 52 10 00    	lea    0x105295,%eax
	else
	{
	  kprintf("No Modules loadable. Microkernel shutting down.\nThank you for using this pointless version of mikrOS\n");
  102d2b:	89 04 24             	mov    %eax,(%esp)
  102d2e:	e8 fd f7 ff ff       	call   102530 <kprintf>
  102d33:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	}

	while(1) {  }
  102d36:	e9 00 00 00 00       	jmp    102d3b <kernel_main+0x28b>
  102d3b:	e9 fb ff ff ff       	jmp    102d3b <kernel_main+0x28b>

00102d40 <intr_stub_0>:
  102d40:	6a 00                	push   $0x0
  102d42:	6a 00                	push   $0x0
  102d44:	e9 eb 00 00 00       	jmp    102e34 <intr_common_handler>

00102d49 <intr_stub_1>:
  102d49:	6a 00                	push   $0x0
  102d4b:	6a 01                	push   $0x1
  102d4d:	e9 e2 00 00 00       	jmp    102e34 <intr_common_handler>

00102d52 <intr_stub_2>:
  102d52:	6a 00                	push   $0x0
  102d54:	6a 02                	push   $0x2
  102d56:	e9 d9 00 00 00       	jmp    102e34 <intr_common_handler>

00102d5b <intr_stub_3>:
  102d5b:	6a 00                	push   $0x0
  102d5d:	6a 03                	push   $0x3
  102d5f:	e9 d0 00 00 00       	jmp    102e34 <intr_common_handler>

00102d64 <intr_stub_4>:
  102d64:	6a 00                	push   $0x0
  102d66:	6a 04                	push   $0x4
  102d68:	e9 c7 00 00 00       	jmp    102e34 <intr_common_handler>

00102d6d <intr_stub_5>:
  102d6d:	6a 00                	push   $0x0
  102d6f:	6a 05                	push   $0x5
  102d71:	e9 be 00 00 00       	jmp    102e34 <intr_common_handler>

00102d76 <intr_stub_6>:
  102d76:	6a 00                	push   $0x0
  102d78:	6a 06                	push   $0x6
  102d7a:	e9 b5 00 00 00       	jmp    102e34 <intr_common_handler>

00102d7f <intr_stub_7>:
  102d7f:	6a 00                	push   $0x0
  102d81:	6a 07                	push   $0x7
  102d83:	e9 ac 00 00 00       	jmp    102e34 <intr_common_handler>

00102d88 <intr_stub_8>:
  102d88:	6a 08                	push   $0x8
  102d8a:	e9 a5 00 00 00       	jmp    102e34 <intr_common_handler>

00102d8f <intr_stub_9>:
  102d8f:	6a 00                	push   $0x0
  102d91:	6a 09                	push   $0x9
  102d93:	e9 9c 00 00 00       	jmp    102e34 <intr_common_handler>

00102d98 <intr_stub_10>:
  102d98:	6a 0a                	push   $0xa
  102d9a:	e9 95 00 00 00       	jmp    102e34 <intr_common_handler>

00102d9f <intr_stub_11>:
  102d9f:	6a 0b                	push   $0xb
  102da1:	e9 8e 00 00 00       	jmp    102e34 <intr_common_handler>

00102da6 <intr_stub_12>:
  102da6:	6a 0c                	push   $0xc
  102da8:	e9 87 00 00 00       	jmp    102e34 <intr_common_handler>

00102dad <intr_stub_13>:
  102dad:	6a 0d                	push   $0xd
  102daf:	e9 80 00 00 00       	jmp    102e34 <intr_common_handler>

00102db4 <intr_stub_14>:
  102db4:	6a 0e                	push   $0xe
  102db6:	eb 7c                	jmp    102e34 <intr_common_handler>

00102db8 <intr_stub_15>:
  102db8:	6a 00                	push   $0x0
  102dba:	6a 0f                	push   $0xf
  102dbc:	eb 76                	jmp    102e34 <intr_common_handler>

00102dbe <intr_stub_16>:
  102dbe:	6a 00                	push   $0x0
  102dc0:	6a 10                	push   $0x10
  102dc2:	eb 70                	jmp    102e34 <intr_common_handler>

00102dc4 <intr_stub_17>:
  102dc4:	6a 11                	push   $0x11
  102dc6:	eb 6c                	jmp    102e34 <intr_common_handler>

00102dc8 <intr_stub_18>:
  102dc8:	6a 00                	push   $0x0
  102dca:	6a 12                	push   $0x12
  102dcc:	eb 66                	jmp    102e34 <intr_common_handler>

00102dce <intr_stub_32>:
  102dce:	6a 00                	push   $0x0
  102dd0:	6a 20                	push   $0x20
  102dd2:	eb 60                	jmp    102e34 <intr_common_handler>

00102dd4 <intr_stub_33>:
  102dd4:	6a 00                	push   $0x0
  102dd6:	6a 21                	push   $0x21
  102dd8:	eb 5a                	jmp    102e34 <intr_common_handler>

00102dda <intr_stub_34>:
  102dda:	6a 00                	push   $0x0
  102ddc:	6a 22                	push   $0x22
  102dde:	eb 54                	jmp    102e34 <intr_common_handler>

00102de0 <intr_stub_35>:
  102de0:	6a 00                	push   $0x0
  102de2:	6a 23                	push   $0x23
  102de4:	eb 4e                	jmp    102e34 <intr_common_handler>

00102de6 <intr_stub_36>:
  102de6:	6a 00                	push   $0x0
  102de8:	6a 24                	push   $0x24
  102dea:	eb 48                	jmp    102e34 <intr_common_handler>

00102dec <intr_stub_37>:
  102dec:	6a 00                	push   $0x0
  102dee:	6a 25                	push   $0x25
  102df0:	eb 42                	jmp    102e34 <intr_common_handler>

00102df2 <intr_stub_38>:
  102df2:	6a 00                	push   $0x0
  102df4:	6a 26                	push   $0x26
  102df6:	eb 3c                	jmp    102e34 <intr_common_handler>

00102df8 <intr_stub_39>:
  102df8:	6a 00                	push   $0x0
  102dfa:	6a 27                	push   $0x27
  102dfc:	eb 36                	jmp    102e34 <intr_common_handler>

00102dfe <intr_stub_40>:
  102dfe:	6a 00                	push   $0x0
  102e00:	6a 28                	push   $0x28
  102e02:	eb 30                	jmp    102e34 <intr_common_handler>

00102e04 <intr_stub_41>:
  102e04:	6a 00                	push   $0x0
  102e06:	6a 29                	push   $0x29
  102e08:	eb 2a                	jmp    102e34 <intr_common_handler>

00102e0a <intr_stub_42>:
  102e0a:	6a 00                	push   $0x0
  102e0c:	6a 2a                	push   $0x2a
  102e0e:	eb 24                	jmp    102e34 <intr_common_handler>

00102e10 <intr_stub_43>:
  102e10:	6a 00                	push   $0x0
  102e12:	6a 2b                	push   $0x2b
  102e14:	eb 1e                	jmp    102e34 <intr_common_handler>

00102e16 <intr_stub_44>:
  102e16:	6a 00                	push   $0x0
  102e18:	6a 2c                	push   $0x2c
  102e1a:	eb 18                	jmp    102e34 <intr_common_handler>

00102e1c <intr_stub_45>:
  102e1c:	6a 00                	push   $0x0
  102e1e:	6a 2d                	push   $0x2d
  102e20:	eb 12                	jmp    102e34 <intr_common_handler>

00102e22 <intr_stub_46>:
  102e22:	6a 00                	push   $0x0
  102e24:	6a 2e                	push   $0x2e
  102e26:	eb 0c                	jmp    102e34 <intr_common_handler>

00102e28 <intr_stub_47>:
  102e28:	6a 00                	push   $0x0
  102e2a:	6a 2f                	push   $0x2f
  102e2c:	eb 06                	jmp    102e34 <intr_common_handler>

00102e2e <intr_stub_48>:
  102e2e:	6a 00                	push   $0x0
  102e30:	6a 30                	push   $0x30
  102e32:	eb 00                	jmp    102e34 <intr_common_handler>

00102e34 <intr_common_handler>:
  102e34:	55                   	push   %ebp
  102e35:	57                   	push   %edi
  102e36:	56                   	push   %esi
  102e37:	52                   	push   %edx
  102e38:	51                   	push   %ecx
  102e39:	53                   	push   %ebx
  102e3a:	50                   	push   %eax
  102e3b:	54                   	push   %esp
  102e3c:	66 b8 10 00          	mov    $0x10,%ax
  102e40:	66 8e d8             	mov    %ax,%ds
  102e43:	66 8e c0             	mov    %ax,%es
  102e46:	e8 95 f3 ff ff       	call   1021e0 <handle_interrupt>
  102e4b:	89 c4                	mov    %eax,%esp
  102e4d:	66 b8 23 00          	mov    $0x23,%ax
  102e51:	66 8e d8             	mov    %ax,%ds
  102e54:	66 8e c0             	mov    %ax,%es
  102e57:	58                   	pop    %eax
  102e58:	5b                   	pop    %ebx
  102e59:	59                   	pop    %ecx
  102e5a:	5a                   	pop    %edx
  102e5b:	5e                   	pop    %esi
  102e5c:	5f                   	pop    %edi
  102e5d:	5d                   	pop    %ebp
  102e5e:	83 c4 08             	add    $0x8,%esp
  102e61:	cf                   	iret   
  102e62:	66 90                	xchg   %ax,%ax
  102e64:	66 90                	xchg   %ax,%ax
  102e66:	66 90                	xchg   %ax,%ax
  102e68:	66 90                	xchg   %ax,%ax
  102e6a:	66 90                	xchg   %ax,%ax
  102e6c:	66 90                	xchg   %ax,%ax
  102e6e:	66 90                	xchg   %ax,%ax

00102e70 <memset>:
#include "vmm.h"
#include "string.h"

void* memset(void* buf, int c, size_t n)
{
  102e70:	55                   	push   %ebp
  102e71:	89 e5                	mov    %esp,%ebp
  102e73:	83 ec 10             	sub    $0x10,%esp
  102e76:	8b 45 10             	mov    0x10(%ebp),%eax
  102e79:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102e7c:	8b 55 08             	mov    0x8(%ebp),%edx
  102e7f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102e82:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102e85:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  102e88:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102e8b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  102e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e91:	89 c1                	mov    %eax,%ecx
  102e93:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102e99:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102e9c:	3d 00 00 00 00       	cmp    $0x0,%eax
  102ea1:	0f 84 1a 00 00 00    	je     102ec1 <memset+0x51>
        *p++ = c;
  102ea7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102eaa:	88 c1                	mov    %al,%cl
  102eac:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102eaf:	89 c2                	mov    %eax,%edx
  102eb1:	81 c2 01 00 00 00    	add    $0x1,%edx
  102eb7:	89 55 f0             	mov    %edx,-0x10(%ebp)
  102eba:	88 08                	mov    %cl,(%eax)
    }
  102ebc:	e9 cd ff ff ff       	jmp    102e8e <memset+0x1e>

    return buf;
  102ec1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102ec4:	83 c4 10             	add    $0x10,%esp
  102ec7:	5d                   	pop    %ebp
  102ec8:	c3                   	ret    
  102ec9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102ed0 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n)
{
  102ed0:	55                   	push   %ebp
  102ed1:	89 e5                	mov    %esp,%ebp
  102ed3:	83 ec 14             	sub    $0x14,%esp
  102ed6:	8b 45 10             	mov    0x10(%ebp),%eax
  102ed9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102edc:	8b 55 08             	mov    0x8(%ebp),%edx
  102edf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102ee2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102ee5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  102ee8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102eeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  102eee:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102ef1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  102ef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ef7:	89 c1                	mov    %eax,%ecx
  102ef9:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102eff:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102f02:	3d 00 00 00 00       	cmp    $0x0,%eax
  102f07:	0f 84 25 00 00 00    	je     102f32 <memcpy+0x62>
      *(d++) = *(s++);
  102f0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102f10:	89 c1                	mov    %eax,%ecx
  102f12:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102f18:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102f1b:	8a 10                	mov    (%eax),%dl
  102f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f20:	89 c1                	mov    %eax,%ecx
  102f22:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102f28:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102f2b:	88 10                	mov    %dl,(%eax)
    }
  102f2d:	e9 c2 ff ff ff       	jmp    102ef4 <memcpy+0x24>

    return dest;
  102f32:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f35:	83 c4 14             	add    $0x14,%esp
  102f38:	5d                   	pop    %ebp
  102f39:	c3                   	ret    
  102f3a:	66 90                	xchg   %ax,%ax
  102f3c:	66 90                	xchg   %ax,%ax
  102f3e:	66 90                	xchg   %ax,%ax

00102f40 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  102f40:	55                   	push   %ebp
  102f41:	89 e5                	mov    %esp,%ebp
	struct {
  102f43:	83 ec 08             	sub    $0x8,%esp
  102f46:	a1 2c 50 10 00       	mov    0x10502c,%eax
  102f4b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102f4e:	66 8b 0d 30 50 10 00 	mov    0x105030,%cx
  102f55:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
	asm volatile("lgdt %0" : : "m" (gdtp));
  102f59:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  102f5d:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  102f61:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  102f64:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  102f67:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  102f6a:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  102f6d:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  102f70:	83 c4 08             	add    $0x8,%esp
  102f73:	5d                   	pop    %ebp
  102f74:	c3                   	ret    
  102f75:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102f7c:	00 00 00 00 

00102f80 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  102f80:	55                   	push   %ebp
  102f81:	89 e5                	mov    %esp,%ebp
  102f83:	56                   	push   %esi
  102f84:	83 ec 10             	sub    $0x10,%esp
  102f87:	8b 45 14             	mov    0x14(%ebp),%eax
  102f8a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102f8d:	8b 55 0c             	mov    0xc(%ebp),%edx
  102f90:	8b 75 08             	mov    0x8(%ebp),%esi
  102f93:	89 75 f8             	mov    %esi,-0x8(%ebp)
  102f96:	89 55 f4             	mov    %edx,-0xc(%ebp)
  102f99:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102f9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    gdt[i] = limit & 0xffffLL;
  102f9f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  102fa3:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102fa6:	89 04 cd 40 b6 12 00 	mov    %eax,0x12b640(,%ecx,8)
  102fad:	c7 04 cd 44 b6 12 00 	movl   $0x0,0x12b644(,%ecx,8)
  102fb4:	00 00 00 00 
    gdt[i] |= (base & 0xffffffLL) << 16;
  102fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102fbb:	25 ff ff ff 00       	and    $0xffffff,%eax
  102fc0:	89 c1                	mov    %eax,%ecx
  102fc2:	c1 e1 10             	shl    $0x10,%ecx
  102fc5:	c1 e8 10             	shr    $0x10,%eax
  102fc8:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102fcb:	8b 34 d5 44 b6 12 00 	mov    0x12b644(,%edx,8),%esi
  102fd2:	09 f0                	or     %esi,%eax
  102fd4:	8b 34 d5 40 b6 12 00 	mov    0x12b640(,%edx,8),%esi
  102fdb:	09 ce                	or     %ecx,%esi
  102fdd:	89 04 d5 44 b6 12 00 	mov    %eax,0x12b644(,%edx,8)
  102fe4:	89 34 d5 40 b6 12 00 	mov    %esi,0x12b640(,%edx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  102feb:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  102fef:	c1 e0 08             	shl    $0x8,%eax
  102ff2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102ff5:	8b 14 cd 40 b6 12 00 	mov    0x12b640(,%ecx,8),%edx
  102ffc:	8b 34 cd 44 b6 12 00 	mov    0x12b644(,%ecx,8),%esi
  103003:	09 c6                	or     %eax,%esi
  103005:	89 14 cd 40 b6 12 00 	mov    %edx,0x12b640(,%ecx,8)
  10300c:	89 34 cd 44 b6 12 00 	mov    %esi,0x12b644(,%ecx,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  103013:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  103017:	83 e0 0f             	and    $0xf,%eax
  10301a:	c1 e0 10             	shl    $0x10,%eax
  10301d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103020:	8b 14 cd 40 b6 12 00 	mov    0x12b640(,%ecx,8),%edx
  103027:	8b 34 cd 44 b6 12 00 	mov    0x12b644(,%ecx,8),%esi
  10302e:	09 c6                	or     %eax,%esi
  103030:	89 14 cd 40 b6 12 00 	mov    %edx,0x12b640(,%ecx,8)
  103037:	89 34 cd 44 b6 12 00 	mov    %esi,0x12b644(,%ecx,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  10303e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103041:	c1 e0 0c             	shl    $0xc,%eax
  103044:	25 00 00 f0 0f       	and    $0xff00000,%eax
  103049:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10304c:	8b 14 cd 40 b6 12 00 	mov    0x12b640(,%ecx,8),%edx
  103053:	8b 34 cd 44 b6 12 00 	mov    0x12b644(,%ecx,8),%esi
  10305a:	09 c6                	or     %eax,%esi
  10305c:	89 14 cd 40 b6 12 00 	mov    %edx,0x12b640(,%ecx,8)
  103063:	89 34 cd 44 b6 12 00 	mov    %esi,0x12b644(,%ecx,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  10306a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10306e:	c1 e0 18             	shl    $0x18,%eax
  103071:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103074:	8b 14 cd 40 b6 12 00 	mov    0x12b640(,%ecx,8),%edx
  10307b:	8b 34 cd 44 b6 12 00 	mov    0x12b644(,%ecx,8),%esi
  103082:	09 c6                	or     %eax,%esi
  103084:	89 14 cd 40 b6 12 00 	mov    %edx,0x12b640(,%ecx,8)
  10308b:	89 34 cd 44 b6 12 00 	mov    %esi,0x12b644(,%ecx,8)
}
  103092:	83 c4 10             	add    $0x10,%esp
  103095:	5e                   	pop    %esi
  103096:	5d                   	pop    %ebp
  103097:	c3                   	ret    
  103098:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10309f:	00 

001030a0 <init_gdt>:

void init_gdt(void)
{
  1030a0:	55                   	push   %ebp
  1030a1:	89 e5                	mov    %esp,%ebp
  1030a3:	56                   	push   %esi
  1030a4:	83 ec 54             	sub    $0x54,%esp
  1030a7:	b8 00 00 00 00       	mov    $0x0,%eax
    set_gdt_entry(0, 0, 0, 0);
  1030ac:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1030b3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1030ba:	00 
  1030bb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1030c2:	00 
  1030c3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1030ca:	00 
  1030cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1030ce:	e8 ad fe ff ff       	call   102f80 <set_gdt_entry>
  1030d3:	b8 01 00 00 00       	mov    $0x1,%eax
  1030d8:	b9 00 00 00 00       	mov    $0x0,%ecx
  1030dd:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1030e2:	be 9a 0c 00 00       	mov    $0xc9a,%esi
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1030e7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1030ee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1030f5:	00 
  1030f6:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1030fd:	00 
  1030fe:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  103105:	00 
  103106:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103109:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10310c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10310f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  103112:	e8 69 fe ff ff       	call   102f80 <set_gdt_entry>
  103117:	b8 02 00 00 00       	mov    $0x2,%eax
  10311c:	b9 00 00 00 00       	mov    $0x0,%ecx
  103121:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  103126:	be 92 0c 00 00       	mov    $0xc92,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10312b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  103132:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103139:	00 
  10313a:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103141:	00 
  103142:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  103149:	00 
  10314a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10314d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  103150:	89 55 dc             	mov    %edx,-0x24(%ebp)
  103153:	89 75 d8             	mov    %esi,-0x28(%ebp)
  103156:	e8 25 fe ff ff       	call   102f80 <set_gdt_entry>
  10315b:	b8 03 00 00 00       	mov    $0x3,%eax
  103160:	b9 00 00 00 00       	mov    $0x0,%ecx
  103165:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10316a:	be fa 0c 00 00       	mov    $0xcfa,%esi
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10316f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  103176:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10317d:	00 
  10317e:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103185:	00 
  103186:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10318d:	00 
  10318e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  103191:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  103194:	89 55 cc             	mov    %edx,-0x34(%ebp)
  103197:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10319a:	e8 e1 fd ff ff       	call   102f80 <set_gdt_entry>
  10319f:	b8 04 00 00 00       	mov    $0x4,%eax
  1031a4:	b9 00 00 00 00       	mov    $0x0,%ecx
  1031a9:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1031ae:	be f2 0c 00 00       	mov    $0xcf2,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1031b3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1031ba:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1031c1:	00 
  1031c2:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1031c9:	00 
  1031ca:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  1031d1:	00 
  1031d2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1031d5:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  1031d8:	89 55 bc             	mov    %edx,-0x44(%ebp)
  1031db:	89 75 b8             	mov    %esi,-0x48(%ebp)
  1031de:	e8 9d fd ff ff       	call   102f80 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  1031e3:	e8 58 fd ff ff       	call   102f40 <load_gdt>
}
  1031e8:	83 c4 54             	add    $0x54,%esp
  1031eb:	5e                   	pop    %esi
  1031ec:	5d                   	pop    %ebp
  1031ed:	c3                   	ret    
  1031ee:	66 90                	xchg   %ax,%ax

001031f0 <enable_scheduling>:
struct task* first_task   = 0;
struct task* current_task = 0;

int nextPID = 1;

void enable_scheduling(void) {
  1031f0:	55                   	push   %ebp
  1031f1:	89 e5                	mov    %esp,%ebp
  sched_enabled = 1;
  1031f3:	c7 05 24 b4 10 00 01 	movl   $0x1,0x10b424
  1031fa:	00 00 00 
}
  1031fd:	5d                   	pop    %ebp
  1031fe:	c3                   	ret    
  1031ff:	90                   	nop

00103200 <scheduling_enabled>:

uint32_t scheduling_enabled(void) {
  103200:	55                   	push   %ebp
  103201:	89 e5                	mov    %esp,%ebp
  return sched_enabled;
  103203:	a1 24 b4 10 00       	mov    0x10b424,%eax
  103208:	5d                   	pop    %ebp
  103209:	c3                   	ret    
  10320a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103210 <schedule_exception>:
}

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  103210:	55                   	push   %ebp
  103211:	89 e5                	mov    %esp,%ebp
  103213:	56                   	push   %esi
  103214:	83 ec 34             	sub    $0x34,%esp
  103217:	8b 45 08             	mov    0x8(%ebp),%eax
  10321a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(current_task == first_task && current_task->next == 0) {
  10321d:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103222:	3b 05 28 b4 10 00    	cmp    0x10b428,%eax
  103228:	0f 85 71 00 00 00    	jne    10329f <schedule_exception+0x8f>
  10322e:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103233:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  10323a:	0f 85 5f 00 00 00    	jne    10329f <schedule_exception+0x8f>
  103240:	b8 04 00 00 00       	mov    $0x4,%eax
    //Only one process is running, which just crashed. Stop system.
    setclr(0x04);
  103245:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10324c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10324f:	e8 bc f2 ff ff       	call   102510 <setclr>
  103254:	8d 05 fb 52 10 00    	lea    0x1052fb,%eax
    kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n", current_task->PID, cpu->intr, cpu->error);
  10325a:	8b 0d 2c b4 10 00    	mov    0x10b42c,%ecx
  103260:	8b 09                	mov    (%ecx),%ecx
  103262:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103265:	8b 52 1c             	mov    0x1c(%edx),%edx
  103268:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10326b:	8b 76 20             	mov    0x20(%esi),%esi
  10326e:	89 04 24             	mov    %eax,(%esp)
  103271:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103275:	89 54 24 08          	mov    %edx,0x8(%esp)
  103279:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10327d:	e8 ae f2 ff ff       	call   102530 <kprintf>
  103282:	8d 0d 2f 53 10 00    	lea    0x10532f,%ecx
    show_cod(cpu, "Last task crashed. Terminating kernel...");
  103288:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10328b:	89 14 24             	mov    %edx,(%esp)
  10328e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103292:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103295:	e8 b6 f0 ff ff       	call   102350 <show_cod>
  }
  10329a:	e9 88 00 00 00       	jmp    103327 <schedule_exception+0x117>
  10329f:	b8 04 00 00 00       	mov    $0x4,%eax
  else
  {
    //Potential security leaks available in following code.
    setclr(0x04);
  1032a4:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1032ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1032ae:	e8 5d f2 ff ff       	call   102510 <setclr>
  1032b3:	8d 05 fb 52 10 00    	lea    0x1052fb,%eax
    kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n", current_task->PID, cpu->intr, cpu->error);
  1032b9:	8b 0d 2c b4 10 00    	mov    0x10b42c,%ecx
  1032bf:	8b 09                	mov    (%ecx),%ecx
  1032c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1032c4:	8b 52 1c             	mov    0x1c(%edx),%edx
  1032c7:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1032ca:	8b 76 20             	mov    0x20(%esi),%esi
  1032cd:	89 04 24             	mov    %eax,(%esp)
  1032d0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1032d4:	89 54 24 08          	mov    %edx,0x8(%esp)
  1032d8:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1032dc:	e8 4f f2 ff ff       	call   102530 <kprintf>
  1032e1:	8d 0d 88 51 10 00    	lea    0x105188,%ecx
    kprintf("\n");
  1032e7:	89 0c 24             	mov    %ecx,(%esp)
  1032ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1032ed:	e8 3e f2 ff ff       	call   102530 <kprintf>
    show_dump(cpu);
  1032f2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1032f5:	89 0c 24             	mov    %ecx,(%esp)
  1032f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1032fb:	e8 c0 f0 ff ff       	call   1023c0 <show_dump>
  103300:	b8 07 00 00 00       	mov    $0x7,%eax
    setclr(0x07);
  103305:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  10330c:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10330f:	e8 fc f1 ff ff       	call   102510 <setclr>
    
    return terminate_current(cpu);
  103314:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103317:	89 04 24             	mov    %eax,(%esp)
  10331a:	e8 21 00 00 00       	call   103340 <terminate_current>
  10331f:	89 45 f8             	mov    %eax,-0x8(%ebp)
  103322:	e9 06 00 00 00       	jmp    10332d <schedule_exception+0x11d>
  }
  return cpu;
  103327:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10332a:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  10332d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103330:	83 c4 34             	add    $0x34,%esp
  103333:	5e                   	pop    %esi
  103334:	5d                   	pop    %ebp
  103335:	c3                   	ret    
  103336:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10333d:	00 00 00 

00103340 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  103340:	55                   	push   %ebp
  103341:	89 e5                	mov    %esp,%ebp
  103343:	83 ec 18             	sub    $0x18,%esp
  103346:	8b 45 08             	mov    0x8(%ebp),%eax
  103349:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct task* next = current_task->next;
  10334c:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103351:	8b 40 08             	mov    0x8(%eax),%eax
  103354:	89 45 f8             	mov    %eax,-0x8(%ebp)
  struct task* prev = current_task->prev;
  103357:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  10335c:	8b 40 0c             	mov    0xc(%eax),%eax
  10335f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  //TODO: free resources here
  
  if(current_task == first_task) {
  103362:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103367:	3b 05 28 b4 10 00    	cmp    0x10b428,%eax
  10336d:	0f 85 0d 00 00 00    	jne    103380 <terminate_current+0x40>
    first_task = current_task->next;
  103373:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103378:	8b 40 08             	mov    0x8(%eax),%eax
  10337b:	a3 28 b4 10 00       	mov    %eax,0x10b428
  }
  
  if(next != 0) {
  103380:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103387:	0f 84 09 00 00 00    	je     103396 <terminate_current+0x56>
    next->prev = prev;
  10338d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103390:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103393:	89 41 0c             	mov    %eax,0xc(%ecx)
  }

  if(prev != 0) {
  103396:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10339d:	0f 84 09 00 00 00    	je     1033ac <terminate_current+0x6c>
    prev->next = next;
  1033a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1033a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1033a9:	89 41 08             	mov    %eax,0x8(%ecx)
  }
  
  //TODO: handle if all tasks are closed

  if(next == 0) next = first_task;
  1033ac:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1033b3:	0f 85 08 00 00 00    	jne    1033c1 <terminate_current+0x81>
  1033b9:	a1 28 b4 10 00       	mov    0x10b428,%eax
  1033be:	89 45 f8             	mov    %eax,-0x8(%ebp)
    
  current_task = next;       
  1033c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1033c4:	a3 2c b4 10 00       	mov    %eax,0x10b42c
  vmm_activate_pagedir(current_task->phys_pdir);     
  1033c9:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1033ce:	8b 40 14             	mov    0x14(%eax),%eax
  1033d1:	89 04 24             	mov    %eax,(%esp)
  1033d4:	e8 77 de ff ff       	call   101250 <vmm_activate_pagedir>
  return current_task->cpu_state;
  1033d9:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1033de:	8b 40 04             	mov    0x4(%eax),%eax
  1033e1:	83 c4 18             	add    $0x18,%esp
  1033e4:	5d                   	pop    %ebp
  1033e5:	c3                   	ret    
  1033e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1033ed:	00 00 00 

001033f0 <fork_task_state>:
}

void fork_task_state(struct task* new_task) {      
  1033f0:	55                   	push   %ebp
  1033f1:	89 e5                	mov    %esp,%ebp
  1033f3:	83 ec 18             	sub    $0x18,%esp
  1033f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1033f9:	b9 38 00 00 00       	mov    $0x38,%ecx
  1033fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
  new_task->user_stack_bottom = current_task->user_stack_bottom;
  103401:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103406:	8b 40 10             	mov    0x10(%eax),%eax
  103409:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10340c:	89 42 10             	mov    %eax,0x10(%edx)
  
  memcpy(new_task->cpu_state, current_task->cpu_state, sizeof(struct cpu_state));
  10340f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103412:	8b 40 04             	mov    0x4(%eax),%eax
  103415:	8b 15 2c b4 10 00    	mov    0x10b42c,%edx
  10341b:	8b 52 04             	mov    0x4(%edx),%edx
  10341e:	89 04 24             	mov    %eax,(%esp)
  103421:	89 54 24 04          	mov    %edx,0x4(%esp)
  103425:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  10342c:	00 
  10342d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103430:	e8 9b fa ff ff       	call   102ed0 <memcpy>
  
  new_task->cpu_state->eax = 0;
  103435:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103438:	8b 40 04             	mov    0x4(%eax),%eax
  10343b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
  103441:	83 c4 18             	add    $0x18,%esp
  103444:	5d                   	pop    %ebp
  103445:	c3                   	ret    
  103446:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10344d:	00 00 00 

00103450 <init_task>:

struct task* init_task(uint32_t task_pagedir, void* entry)
{
  103450:	55                   	push   %ebp
  103451:	89 e5                	mov    %esp,%ebp
  103453:	56                   	push   %esi
  103454:	83 ec 74             	sub    $0x74,%esp
  103457:	8b 45 0c             	mov    0xc(%ebp),%eax
  10345a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10345d:	ba 00 40 00 00       	mov    $0x4000,%edx
  103462:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103465:	89 45 f4             	mov    %eax,-0xc(%ebp)
  struct task* ntask = malloc(0x4000);
  103468:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
  10346f:	89 55 ac             	mov    %edx,-0x54(%ebp)
  103472:	e8 b9 02 00 00       	call   103730 <malloc>
  103477:	b9 00 50 00 00       	mov    $0x5000,%ecx
  10347c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  ntask->cpu_state   = malloc(0x5000);
  10347f:	c7 04 24 00 50 00 00 	movl   $0x5000,(%esp)
  103486:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  103489:	e8 a2 02 00 00       	call   103730 <malloc>
  10348e:	8d 0d 58 53 10 00    	lea    0x105358,%ecx
  103494:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103497:	89 42 04             	mov    %eax,0x4(%edx)
  
  kprintf("Does malloc work?: 1:%x 2:%x \n", ntask, ntask->cpu_state);
  10349a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10349d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1034a0:	8b 52 04             	mov    0x4(%edx),%edx
  1034a3:	89 0c 24             	mov    %ecx,(%esp)
  1034a6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1034aa:	89 54 24 08          	mov    %edx,0x8(%esp)
  1034ae:	e8 7d f0 ff ff       	call   102530 <kprintf>
  1034b3:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  
  ntask->phys_pdir = task_pagedir;
  1034b8:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1034bb:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1034be:	89 56 14             	mov    %edx,0x14(%esi)
  ntask->user_stack_bottom = (void*)0xFFFFE000;
  1034c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1034c4:	89 4a 10             	mov    %ecx,0x10(%edx)
  ntask->PID = nextPID++;
  1034c7:	8b 0d 90 41 10 00    	mov    0x104190,%ecx
  1034cd:	89 ca                	mov    %ecx,%edx
  1034cf:	81 c2 01 00 00 00    	add    $0x1,%edx
  1034d5:	89 15 90 41 10 00    	mov    %edx,0x104190
  1034db:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1034de:	89 0a                	mov    %ecx,(%edx)
  
  ntask->next = (void*)0;
  1034e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1034e3:	c7 41 08 00 00 00 00 	movl   $0x0,0x8(%ecx)
  ntask->prev = (void*)0;
  1034ea:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1034ed:	c7 41 0c 00 00 00 00 	movl   $0x0,0xc(%ecx)
  
  if(first_task == 0) {
  1034f4:	81 3d 28 b4 10 00 00 	cmpl   $0x0,0x10b428
  1034fb:	00 00 00 
  1034fe:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  103501:	0f 85 0d 00 00 00    	jne    103514 <init_task+0xc4>
    first_task = ntask;
  103507:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10350a:	a3 28 b4 10 00       	mov    %eax,0x10b428
  }
  10350f:	e9 1f 00 00 00       	jmp    103533 <init_task+0xe3>
  else
  {
    ntask->next = first_task;
  103514:	a1 28 b4 10 00       	mov    0x10b428,%eax
  103519:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10351c:	89 41 08             	mov    %eax,0x8(%ecx)
    first_task->prev = ntask;
  10351f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103522:	8b 0d 28 b4 10 00    	mov    0x10b428,%ecx
  103528:	89 41 0c             	mov    %eax,0xc(%ecx)
    first_task = ntask;
  10352b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10352e:	a3 28 b4 10 00       	mov    %eax,0x10b428
  }
  
  uint32_t rest_pdir = vmm_get_current_pagedir();
  103533:	e8 d8 d1 ff ff       	call   100710 <vmm_get_current_pagedir>
  103538:	89 45 ec             	mov    %eax,-0x14(%ebp)
  vmm_activate_pagedir(task_pagedir);
  10353b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10353e:	89 04 24             	mov    %eax,(%esp)
  103541:	e8 0a dd ff ff       	call   101250 <vmm_activate_pagedir>
  
  if(entry != 0) { //entry == 0 means that this will be forked
  103546:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10354d:	0f 84 21 00 00 00    	je     103574 <init_task+0x124>
  103553:	b8 00 00 00 00       	mov    $0x0,%eax
    vmm_alloc_addr(ntask->user_stack_bottom, 0);
  103558:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10355b:	8b 49 10             	mov    0x10(%ecx),%ecx
  10355e:	89 0c 24             	mov    %ecx,(%esp)
  103561:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103568:	00 
  103569:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10356c:	e8 df db ff ff       	call   101150 <vmm_alloc_addr>
  103571:	89 45 9c             	mov    %eax,-0x64(%ebp)
  103574:	b8 38 00 00 00       	mov    $0x38,%eax
  103579:	8d 4d b0             	lea    -0x50(%ebp),%ecx
  }

  struct cpu_state nstate = {
  10357c:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  103583:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  10358a:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  103591:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  103598:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  10359f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  1035a6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  1035ad:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  1035b4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  1035bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1035be:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  1035c1:	c7 45 d8 1b 00 00 00 	movl   $0x1b,-0x28(%ebp)
  1035c8:	c7 45 dc 00 02 00 00 	movl   $0x200,-0x24(%ebp)
  1035cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1035d2:	8b 52 10             	mov    0x10(%edx),%edx
  1035d5:	81 c2 00 10 00 00    	add    $0x1000,%edx
  1035db:	89 55 e0             	mov    %edx,-0x20(%ebp)
  1035de:	c7 45 e4 23 00 00 00 	movl   $0x23,-0x1c(%ebp)
      .ss  = 0x20 | 0x03,
      
      .eflags = 0x200,
  };
  
  memcpy(ntask->cpu_state, &nstate, sizeof(struct cpu_state));
  1035e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1035e8:	8b 52 04             	mov    0x4(%edx),%edx
  1035eb:	89 14 24             	mov    %edx,(%esp)
  1035ee:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1035f2:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1035f9:	00 
  1035fa:	89 45 98             	mov    %eax,-0x68(%ebp)
  1035fd:	e8 ce f8 ff ff       	call   102ed0 <memcpy>
    
  vmm_activate_pagedir(rest_pdir);
  103602:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103605:	89 04 24             	mov    %eax,(%esp)
  103608:	e8 43 dc ff ff       	call   101250 <vmm_activate_pagedir>
  
  return ntask;
  10360d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103610:	83 c4 74             	add    $0x74,%esp
  103613:	5e                   	pop    %esi
  103614:	5d                   	pop    %ebp
  103615:	c3                   	ret    
  103616:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10361d:	00 00 00 

00103620 <save_cpu_state>:
}

void save_cpu_state(struct cpu_state* cpu) {
  103620:	55                   	push   %ebp
  103621:	89 e5                	mov    %esp,%ebp
  103623:	83 ec 18             	sub    $0x18,%esp
  103626:	8b 45 08             	mov    0x8(%ebp),%eax
  103629:	b9 38 00 00 00       	mov    $0x38,%ecx
  10362e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  memcpy(current_task->cpu_state, cpu, sizeof(struct cpu_state));
  103631:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103636:	8b 40 04             	mov    0x4(%eax),%eax
  103639:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10363c:	89 04 24             	mov    %eax,(%esp)
  10363f:	89 54 24 04          	mov    %edx,0x4(%esp)
  103643:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  10364a:	00 
  10364b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10364e:	e8 7d f8 ff ff       	call   102ed0 <memcpy>
}
  103653:	83 c4 18             	add    $0x18,%esp
  103656:	5d                   	pop    %ebp
  103657:	c3                   	ret    
  103658:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10365f:	00 

00103660 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu)
{
  103660:	55                   	push   %ebp
  103661:	89 e5                	mov    %esp,%ebp
  103663:	83 ec 18             	sub    $0x18,%esp
  103666:	8b 45 08             	mov    0x8(%ebp),%eax
  103669:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(first_task != 0 && sched_enabled) {  
  10366c:	81 3d 28 b4 10 00 00 	cmpl   $0x0,0x10b428
  103673:	00 00 00 
  103676:	0f 84 9d 00 00 00    	je     103719 <schedule+0xb9>
  10367c:	81 3d 24 b4 10 00 00 	cmpl   $0x0,0x10b424
  103683:	00 00 00 
  103686:	0f 84 8d 00 00 00    	je     103719 <schedule+0xb9>
    if(current_task == 0) {
  10368c:	81 3d 2c b4 10 00 00 	cmpl   $0x0,0x10b42c
  103693:	00 00 00 
  103696:	0f 85 2a 00 00 00    	jne    1036c6 <schedule+0x66>
      current_task = first_task;
  10369c:	a1 28 b4 10 00       	mov    0x10b428,%eax
  1036a1:	a3 2c b4 10 00       	mov    %eax,0x10b42c
      vmm_activate_pagedir(current_task->phys_pdir);      
  1036a6:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1036ab:	8b 40 14             	mov    0x14(%eax),%eax
  1036ae:	89 04 24             	mov    %eax,(%esp)
  1036b1:	e8 9a db ff ff       	call   101250 <vmm_activate_pagedir>
      return current_task->cpu_state;
  1036b6:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1036bb:	8b 40 04             	mov    0x4(%eax),%eax
  1036be:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1036c1:	e9 59 00 00 00       	jmp    10371f <schedule+0xbf>
    }
    
    struct task* next = current_task->next;
  1036c6:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1036cb:	8b 40 08             	mov    0x8(%eax),%eax
  1036ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(next == 0) next = first_task;
  1036d1:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1036d8:	0f 85 08 00 00 00    	jne    1036e6 <schedule+0x86>
  1036de:	a1 28 b4 10 00       	mov    0x10b428,%eax
  1036e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
    save_cpu_state(cpu);
  1036e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1036e9:	89 04 24             	mov    %eax,(%esp)
  1036ec:	e8 2f ff ff ff       	call   103620 <save_cpu_state>
        
    current_task = next;       
  1036f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036f4:	a3 2c b4 10 00       	mov    %eax,0x10b42c
    vmm_activate_pagedir(current_task->phys_pdir);     
  1036f9:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1036fe:	8b 40 14             	mov    0x14(%eax),%eax
  103701:	89 04 24             	mov    %eax,(%esp)
  103704:	e8 47 db ff ff       	call   101250 <vmm_activate_pagedir>
    return current_task->cpu_state;
  103709:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  10370e:	8b 40 04             	mov    0x4(%eax),%eax
  103711:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103714:	e9 06 00 00 00       	jmp    10371f <schedule+0xbf>
  }
  return cpu;
  103719:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10371c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10371f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103722:	83 c4 18             	add    $0x18,%esp
  103725:	5d                   	pop    %ebp
  103726:	c3                   	ret    
  103727:	66 90                	xchg   %ax,%ax
  103729:	66 90                	xchg   %ax,%ax
  10372b:	66 90                	xchg   %ax,%ax
  10372d:	66 90                	xchg   %ax,%ax
  10372f:	90                   	nop

00103730 <malloc>:
  }
  
  return ret;
}

void* malloc(size_t size) {
  103730:	55                   	push   %ebp
  103731:	89 e5                	mov    %esp,%ebp
  103733:	83 ec 38             	sub    $0x38,%esp
  103736:	8b 45 08             	mov    0x8(%ebp),%eax
  103739:	89 45 f8             	mov    %eax,-0x8(%ebp)
  struct memory_node* last = 0;
  10373c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  struct memory_node* cur  = first_free;
  103743:	a1 38 b4 10 00       	mov    0x10b438,%eax
  103748:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
  while(cur != 0) {
  10374b:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103752:	0f 84 27 00 00 00    	je     10377f <malloc+0x4f>
    if(cur->size >= size) {
  103758:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10375b:	8b 00                	mov    (%eax),%eax
  10375d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103760:	0f 82 05 00 00 00    	jb     10376b <malloc+0x3b>
      break;
  103766:	e9 14 00 00 00       	jmp    10377f <malloc+0x4f>
    }
    else
    {
      last = cur;
  10376b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10376e:	89 45 f4             	mov    %eax,-0xc(%ebp)
      cur = cur->next;
  103771:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103774:	8b 40 08             	mov    0x8(%eax),%eax
  103777:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  }
  10377a:	e9 cc ff ff ff       	jmp    10374b <malloc+0x1b>

  if(cur == 0) {
  10377f:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103786:	0f 85 be 00 00 00    	jne    10384a <malloc+0x11a>
    uint32_t pgs = size / PAGESIZE;
  10378c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10378f:	c1 e8 0c             	shr    $0xc,%eax
  103792:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    if((size % PAGESIZE) != 0)
  103795:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103798:	25 ff 0f 00 00       	and    $0xfff,%eax
  10379d:	3d 00 00 00 00       	cmp    $0x0,%eax
  1037a2:	0f 84 0b 00 00 00    	je     1037b3 <malloc+0x83>
      pgs++;
  1037a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1037ab:	05 01 00 00 00       	add    $0x1,%eax
  1037b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    void* addr = vmm_alloc_cont(pgs);
  1037b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1037b6:	89 04 24             	mov    %eax,(%esp)
  1037b9:	e8 42 d9 ff ff       	call   101100 <vmm_alloc_cont>
  1037be:	89 45 e8             	mov    %eax,-0x18(%ebp)
    
    struct memory_node* fill = pop_unused_node();
  1037c1:	e8 2a 02 00 00       	call   1039f0 <pop_unused_node>
  1037c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    
    fill->address = (uint32_t)addr;
  1037c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1037cc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1037cf:	89 41 04             	mov    %eax,0x4(%ecx)
    fill->size    = (uint32_t)size;
  1037d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1037d5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1037d8:	89 01                	mov    %eax,(%ecx)
    
    if(pgs * PAGESIZE > size) {
  1037da:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1037dd:	c1 e0 0c             	shl    $0xc,%eax
  1037e0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1037e3:	0f 86 3e 00 00 00    	jbe    103827 <malloc+0xf7>
      struct memory_node* free = pop_unused_node();
  1037e9:	e8 02 02 00 00       	call   1039f0 <pop_unused_node>
  1037ee:	8d 0d 38 b4 10 00    	lea    0x10b438,%ecx
  1037f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      free->address = fill->address + fill->size;
  1037f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1037fa:	8b 40 04             	mov    0x4(%eax),%eax
  1037fd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  103800:	03 02                	add    (%edx),%eax
  103802:	8b 55 e0             	mov    -0x20(%ebp),%edx
  103805:	89 42 04             	mov    %eax,0x4(%edx)
      free->size = size - pgs * PAGESIZE;
  103808:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10380b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10380e:	c1 e2 0c             	shl    $0xc,%edx
  103811:	29 d0                	sub    %edx,%eax
  103813:	8b 55 e0             	mov    -0x20(%ebp),%edx
  103816:	89 02                	mov    %eax,(%edx)
      
      append_to_list(&first_free, free);
  103818:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10381b:	89 0c 24             	mov    %ecx,(%esp)
  10381e:	89 44 24 04          	mov    %eax,0x4(%esp)
  103822:	e8 b9 00 00 00       	call   1038e0 <append_to_list>
  103827:	8d 05 34 b4 10 00    	lea    0x10b434,%eax
    }    
    
    append_to_list(&first_used, fill);
  10382d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103830:	89 04 24             	mov    %eax,(%esp)
  103833:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103837:	e8 a4 00 00 00       	call   1038e0 <append_to_list>
    
    return (void*) fill->address;
  10383c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10383f:	8b 40 04             	mov    0x4(%eax),%eax
  103842:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103845:	e9 8c 00 00 00       	jmp    1038d6 <malloc+0x1a6>
  }
  else
  {
    uint32_t freesize = size - cur->size;
  10384a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10384d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103850:	8b 09                	mov    (%ecx),%ecx
  103852:	29 c8                	sub    %ecx,%eax
  103854:	89 45 dc             	mov    %eax,-0x24(%ebp)
      
    cur->size = size;
  103857:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10385a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10385d:	89 01                	mov    %eax,(%ecx)
    
    remove_from_list(&first_free, cur);
  10385f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103862:	89 e1                	mov    %esp,%ecx
  103864:	89 41 04             	mov    %eax,0x4(%ecx)
  103867:	c7 01 38 b4 10 00    	movl   $0x10b438,(%ecx)
  10386d:	e8 9e 00 00 00       	call   103910 <remove_from_list>
    append_to_list(&first_used, cur);
  103872:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103875:	89 e1                	mov    %esp,%ecx
  103877:	89 41 04             	mov    %eax,0x4(%ecx)
  10387a:	c7 01 34 b4 10 00    	movl   $0x10b434,(%ecx)
  103880:	e8 5b 00 00 00       	call   1038e0 <append_to_list>
    
    if(free > 0) {
  103885:	b8 a0 39 10 00       	mov    $0x1039a0,%eax
  10388a:	85 c0                	test   %eax,%eax
  10388c:	0f 84 3b 00 00 00    	je     1038cd <malloc+0x19d>
  103892:	e9 00 00 00 00       	jmp    103897 <malloc+0x167>
      struct memory_node* free = pop_unused_node();
  103897:	e8 54 01 00 00       	call   1039f0 <pop_unused_node>
  10389c:	8d 0d 38 b4 10 00    	lea    0x10b438,%ecx
  1038a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
      
      free->address = cur->address + cur->size;
  1038a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038a8:	8b 40 04             	mov    0x4(%eax),%eax
  1038ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1038ae:	03 02                	add    (%edx),%eax
  1038b0:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1038b3:	89 42 04             	mov    %eax,0x4(%edx)
      free->size = freesize;
  1038b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1038b9:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1038bc:	89 02                	mov    %eax,(%edx)
      
      append_to_list(&first_free, free);
  1038be:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1038c1:	89 0c 24             	mov    %ecx,(%esp)
  1038c4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1038c8:	e8 13 00 00 00       	call   1038e0 <append_to_list>
    }
    
    return (void*)cur->address;
  1038cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038d0:	8b 40 04             	mov    0x4(%eax),%eax
  1038d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
}
  1038d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1038d9:	83 c4 38             	add    $0x38,%esp
  1038dc:	5d                   	pop    %ebp
  1038dd:	c3                   	ret    
  1038de:	66 90                	xchg   %ax,%ax

001038e0 <append_to_list>:
    last = cur;
    cur = cur->next;
  }
}

static void append_to_list(struct memory_node** root, struct memory_node* element) {
  1038e0:	55                   	push   %ebp
  1038e1:	89 e5                	mov    %esp,%ebp
  1038e3:	83 ec 08             	sub    $0x8,%esp
  1038e6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1038e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1038ec:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1038ef:	89 45 f8             	mov    %eax,-0x8(%ebp)
  element->next = *root;
  1038f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1038f5:	8b 00                	mov    (%eax),%eax
  1038f7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1038fa:	89 41 08             	mov    %eax,0x8(%ecx)
  *root = element;
  1038fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103900:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103903:	89 01                	mov    %eax,(%ecx)
}
  103905:	83 c4 08             	add    $0x8,%esp
  103908:	5d                   	pop    %ebp
  103909:	c3                   	ret    
  10390a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103910 <remove_from_list>:

struct memory_node* first_unused = 0;
struct memory_node* first_used   = 0;
struct memory_node* first_free   = 0;

static void remove_from_list(struct memory_node** root, struct memory_node* element) {
  103910:	55                   	push   %ebp
  103911:	89 e5                	mov    %esp,%ebp
  103913:	83 ec 10             	sub    $0x10,%esp
  103916:	8b 45 0c             	mov    0xc(%ebp),%eax
  103919:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10391c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10391f:	89 45 f8             	mov    %eax,-0x8(%ebp)
  struct memory_node* last = 0;
  103922:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  struct memory_node* cur  = *root;
  103929:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10392c:	8b 00                	mov    (%eax),%eax
  10392e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  while(cur != 0) {
  103931:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103938:	0f 84 4e 00 00 00    	je     10398c <remove_from_list+0x7c>
    if(cur == element) {
  10393e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103941:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103944:	0f 85 2e 00 00 00    	jne    103978 <remove_from_list+0x68>
      if(last == 0) {
  10394a:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103951:	0f 85 10 00 00 00    	jne    103967 <remove_from_list+0x57>
        *root = cur->next;
  103957:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10395a:	8b 40 08             	mov    0x8(%eax),%eax
  10395d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103960:	89 01                	mov    %eax,(%ecx)
        return;
  103962:	e9 25 00 00 00       	jmp    10398c <remove_from_list+0x7c>
      }
      else
      {
        last->next = cur->next;
  103967:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10396a:	8b 40 08             	mov    0x8(%eax),%eax
  10396d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103970:	89 41 08             	mov    %eax,0x8(%ecx)
        return;
  103973:	e9 14 00 00 00       	jmp    10398c <remove_from_list+0x7c>
      }
    }
    last = cur;
  103978:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10397b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cur = cur->next;
  10397e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103981:	8b 40 08             	mov    0x8(%eax),%eax
  103984:	89 45 f0             	mov    %eax,-0x10(%ebp)
  }
  103987:	e9 a5 ff ff ff       	jmp    103931 <remove_from_list+0x21>
}
  10398c:	83 c4 10             	add    $0x10,%esp
  10398f:	5d                   	pop    %ebp
  103990:	c3                   	ret    
  103991:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103998:	0f 1f 84 00 00 00 00 
  10399f:	00 

001039a0 <free>:

void* realloc(void* ptr, size_t size) {
  return 0;
}

void free(void* ptr) {
  1039a0:	55                   	push   %ebp
  1039a1:	89 e5                	mov    %esp,%ebp
  1039a3:	50                   	push   %eax
  1039a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1039a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1039aa:	83 c4 04             	add    $0x4,%esp
  1039ad:	5d                   	pop    %ebp
  1039ae:	c3                   	ret    
  1039af:	90                   	nop

001039b0 <calloc>:
    
    return (void*)cur->address;
  }
}

void* calloc(size_t num, size_t size) {
  1039b0:	55                   	push   %ebp
  1039b1:	89 e5                	mov    %esp,%ebp
  1039b3:	83 ec 08             	sub    $0x8,%esp
  1039b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1039b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1039bc:	ba 00 00 00 00       	mov    $0x0,%edx
  1039c1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1039c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  return 0;
  1039c7:	89 d0                	mov    %edx,%eax
  1039c9:	83 c4 08             	add    $0x8,%esp
  1039cc:	5d                   	pop    %ebp
  1039cd:	c3                   	ret    
  1039ce:	66 90                	xchg   %ax,%ax

001039d0 <realloc>:
}

void* realloc(void* ptr, size_t size) {
  1039d0:	55                   	push   %ebp
  1039d1:	89 e5                	mov    %esp,%ebp
  1039d3:	83 ec 08             	sub    $0x8,%esp
  1039d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1039d9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1039dc:	ba 00 00 00 00       	mov    $0x0,%edx
  1039e1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1039e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  return 0;
  1039e7:	89 d0                	mov    %edx,%eax
  1039e9:	83 c4 08             	add    $0x8,%esp
  1039ec:	5d                   	pop    %ebp
  1039ed:	c3                   	ret    
  1039ee:	66 90                	xchg   %ax,%ax

001039f0 <pop_unused_node>:
  for(uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
    append_to_list(&first_unused, &(new_nodes[i]));
  }
}

static struct memory_node* pop_unused_node() {
  1039f0:	55                   	push   %ebp
  1039f1:	89 e5                	mov    %esp,%ebp
  1039f3:	83 ec 08             	sub    $0x8,%esp
  1039f6:	8d 05 30 b4 10 00    	lea    0x10b430,%eax
  struct memory_node* ret = pop_from_list(&first_unused);
  1039fc:	89 04 24             	mov    %eax,(%esp)
  1039ff:	e8 3c 00 00 00       	call   103a40 <pop_from_list>
  103a04:	89 45 fc             	mov    %eax,-0x4(%ebp)
  
  while(ret == 0) {
  103a07:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  103a0e:	0f 85 1b 00 00 00    	jne    103a2f <pop_unused_node+0x3f>
    allocate_unused_nodes();
  103a14:	e8 77 00 00 00       	call   103a90 <allocate_unused_nodes>
  103a19:	8d 05 30 b4 10 00    	lea    0x10b430,%eax
    ret = pop_from_list(&first_unused); 
  103a1f:	89 04 24             	mov    %eax,(%esp)
  103a22:	e8 19 00 00 00       	call   103a40 <pop_from_list>
  103a27:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  103a2a:	e9 d8 ff ff ff       	jmp    103a07 <pop_unused_node+0x17>
  
  return ret;
  103a2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a32:	83 c4 08             	add    $0x8,%esp
  103a35:	5d                   	pop    %ebp
  103a36:	c3                   	ret    
  103a37:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  103a3e:	00 00 

00103a40 <pop_from_list>:
static void append_to_list(struct memory_node** root, struct memory_node* element) {
  element->next = *root;
  *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
  103a40:	55                   	push   %ebp
  103a41:	89 e5                	mov    %esp,%ebp
  103a43:	83 ec 18             	sub    $0x18,%esp
  103a46:	8b 45 08             	mov    0x8(%ebp),%eax
  103a49:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(*root == 0) return 0;
  103a4c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103a4f:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  103a55:	0f 85 0c 00 00 00    	jne    103a67 <pop_from_list+0x27>
  103a5b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103a62:	e9 20 00 00 00       	jmp    103a87 <pop_from_list+0x47>
  struct memory_node* pop = *root;
  103a67:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103a6a:	8b 00                	mov    (%eax),%eax
  103a6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  remove_from_list(root, pop);
  103a6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103a72:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103a75:	89 04 24             	mov    %eax,(%esp)
  103a78:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103a7c:	e8 8f fe ff ff       	call   103910 <remove_from_list>
  return pop;
  103a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a84:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  103a87:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a8a:	83 c4 18             	add    $0x18,%esp
  103a8d:	5d                   	pop    %ebp
  103a8e:	c3                   	ret    
  103a8f:	90                   	nop

00103a90 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  103a90:	55                   	push   %ebp
  103a91:	89 e5                	mov    %esp,%ebp
  103a93:	83 ec 28             	sub    $0x28,%esp
  103a96:	b8 01 00 00 00       	mov    $0x1,%eax
  struct memory_node* new_nodes = vmm_alloc_cont(1);
  103a9b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  103aa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103aa5:	e8 56 d6 ff ff       	call   101100 <vmm_alloc_cont>
  103aaa:	b9 00 00 00 00       	mov    $0x0,%ecx
  103aaf:	ba 00 10 00 00       	mov    $0x1000,%edx
  103ab4:	89 45 fc             	mov    %eax,-0x4(%ebp)
  memset(new_nodes, 0, PAGESIZE);
  103ab7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103aba:	89 04 24             	mov    %eax,(%esp)
  103abd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103ac4:	00 
  103ac5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  103acc:	00 
  103acd:	89 55 f0             	mov    %edx,-0x10(%ebp)
  103ad0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  103ad3:	e8 98 f3 ff ff       	call   102e70 <memset>
 
  for(uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  103ad8:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  103adf:	81 7d f8 55 01 00 00 	cmpl   $0x155,-0x8(%ebp)
  103ae6:	0f 83 30 00 00 00    	jae    103b1c <allocate_unused_nodes+0x8c>
  103aec:	8d 05 30 b4 10 00    	lea    0x10b430,%eax
    append_to_list(&first_unused, &(new_nodes[i]));
  103af2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103af5:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103af8:	69 c9 0c 00 00 00    	imul   $0xc,%ecx,%ecx
  103afe:	01 ca                	add    %ecx,%edx
  103b00:	89 04 24             	mov    %eax,(%esp)
  103b03:	89 54 24 04          	mov    %edx,0x4(%esp)
  103b07:	e8 d4 fd ff ff       	call   1038e0 <append_to_list>

static void allocate_unused_nodes() {
  struct memory_node* new_nodes = vmm_alloc_cont(1);
  memset(new_nodes, 0, PAGESIZE);
 
  for(uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  103b0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103b0f:	05 01 00 00 00       	add    $0x1,%eax
  103b14:	89 45 f8             	mov    %eax,-0x8(%ebp)
  103b17:	e9 c3 ff ff ff       	jmp    103adf <allocate_unused_nodes+0x4f>
    append_to_list(&first_unused, &(new_nodes[i]));
  }
}
  103b1c:	83 c4 28             	add    $0x28,%esp
  103b1f:	5d                   	pop    %ebp
  103b20:	c3                   	ret    
