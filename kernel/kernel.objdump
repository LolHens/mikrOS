
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <load_gdt-0xc>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 55                	in     $0x55,%al

0010000c <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  10000c:	55                   	push   %ebp
  10000d:	89 e5                	mov    %esp,%ebp
  10000f:	83 ec 10             	sub    $0x10,%esp
		  uint16_t limit;
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
  100012:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
  100018:	c7 45 fc 40 64 10 00 	movl   $0x106440,-0x4(%ebp)
	asm volatile("lgdt %0" : : "m" (gdtp));
  10001f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

	asm ("mov $0x10, %ax");
  100023:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100027:	8e d8                	mov    %eax,%ds
	asm ("mov %ax, %es");
  100029:	8e c0                	mov    %eax,%es
	asm ("mov %ax, %fs");
  10002b:	8e e0                	mov    %eax,%fs
	asm ("mov %ax, %gs");
  10002d:	8e e8                	mov    %eax,%gs
	asm ("mov %ax, %ss");
  10002f:	8e d0                	mov    %eax,%ss
	asm ("ljmp $0x8, $.1");
  100031:	ea 38 00 10 00 08 00 	ljmp   $0x8,$0x100038

00100038 <.1>:
	asm (".1:");
}
  100038:	c9                   	leave  
  100039:	c3                   	ret    

0010003a <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  10003a:	55                   	push   %ebp
  10003b:	89 e5                	mov    %esp,%ebp
  10003d:	57                   	push   %edi
  10003e:	56                   	push   %esi
  10003f:	53                   	push   %ebx
  100040:	83 ec 4c             	sub    $0x4c,%esp
    gdt[i] = limit & 0xffffLL;
  100043:	8b 45 08             	mov    0x8(%ebp),%eax
  100046:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100049:	8b 45 10             	mov    0x10(%ebp),%eax
  10004c:	ba 00 00 00 00       	mov    $0x0,%edx
  100051:	0f b7 c8             	movzwl %ax,%ecx
  100054:	89 d3                	mov    %edx,%ebx
  100056:	83 e3 00             	and    $0x0,%ebx
  100059:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10005c:	89 0c d5 40 64 10 00 	mov    %ecx,0x106440(,%edx,8)
  100063:	89 1c d5 44 64 10 00 	mov    %ebx,0x106444(,%edx,8)
    gdt[i] |= (base & 0xffffffLL) << 16;
  10006a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10006d:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100070:	8b 45 08             	mov    0x8(%ebp),%eax
  100073:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  10007a:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100081:	8b 45 0c             	mov    0xc(%ebp),%eax
  100084:	ba 00 00 00 00       	mov    $0x0,%edx
  100089:	89 c6                	mov    %eax,%esi
  10008b:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
  100091:	89 d7                	mov    %edx,%edi
  100093:	83 e7 00             	and    $0x0,%edi
  100096:	89 f0                	mov    %esi,%eax
  100098:	89 fa                	mov    %edi,%edx
  10009a:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  10009e:	c1 e0 10             	shl    $0x10,%eax
  1000a1:	89 ce                	mov    %ecx,%esi
  1000a3:	09 c6                	or     %eax,%esi
  1000a5:	89 75 b0             	mov    %esi,-0x50(%ebp)
  1000a8:	89 df                	mov    %ebx,%edi
  1000aa:	09 d7                	or     %edx,%edi
  1000ac:	89 7d b4             	mov    %edi,-0x4c(%ebp)
  1000af:	8b 45 b0             	mov    -0x50(%ebp),%eax
  1000b2:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1000b5:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  1000b8:	89 04 cd 40 64 10 00 	mov    %eax,0x106440(,%ecx,8)
  1000bf:	89 14 cd 44 64 10 00 	mov    %edx,0x106444(,%ecx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  1000c6:	8b 75 08             	mov    0x8(%ebp),%esi
  1000c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1000cc:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  1000d3:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  1000da:	8b 45 14             	mov    0x14(%ebp),%eax
  1000dd:	89 c2                	mov    %eax,%edx
  1000df:	c1 fa 1f             	sar    $0x1f,%edx
  1000e2:	0f b6 f8             	movzbl %al,%edi
  1000e5:	89 7d b8             	mov    %edi,-0x48(%ebp)
  1000e8:	89 d7                	mov    %edx,%edi
  1000ea:	83 e7 00             	and    $0x0,%edi
  1000ed:	89 7d bc             	mov    %edi,-0x44(%ebp)
  1000f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1000f3:	8b 55 bc             	mov    -0x44(%ebp),%edx
  1000f6:	89 c2                	mov    %eax,%edx
  1000f8:	b8 00 00 00 00       	mov    $0x0,%eax
  1000fd:	c1 e2 08             	shl    $0x8,%edx
  100100:	89 cf                	mov    %ecx,%edi
  100102:	09 c7                	or     %eax,%edi
  100104:	89 7d c0             	mov    %edi,-0x40(%ebp)
  100107:	89 df                	mov    %ebx,%edi
  100109:	09 d7                	or     %edx,%edi
  10010b:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  10010e:	8b 45 c0             	mov    -0x40(%ebp),%eax
  100111:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  100114:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  10011b:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100122:	8b 75 08             	mov    0x8(%ebp),%esi
  100125:	8b 45 08             	mov    0x8(%ebp),%eax
  100128:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  10012f:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100136:	8b 45 10             	mov    0x10(%ebp),%eax
  100139:	c1 e8 10             	shr    $0x10,%eax
  10013c:	ba 00 00 00 00       	mov    $0x0,%edx
  100141:	89 c7                	mov    %eax,%edi
  100143:	83 e7 0f             	and    $0xf,%edi
  100146:	89 7d c8             	mov    %edi,-0x38(%ebp)
  100149:	89 d7                	mov    %edx,%edi
  10014b:	83 e7 00             	and    $0x0,%edi
  10014e:	89 7d cc             	mov    %edi,-0x34(%ebp)
  100151:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100154:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100157:	89 c2                	mov    %eax,%edx
  100159:	b8 00 00 00 00       	mov    $0x0,%eax
  10015e:	c1 e2 10             	shl    $0x10,%edx
  100161:	89 cf                	mov    %ecx,%edi
  100163:	09 c7                	or     %eax,%edi
  100165:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100168:	89 df                	mov    %ebx,%edi
  10016a:	09 d7                	or     %edx,%edi
  10016c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  10016f:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100172:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100175:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  10017c:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  100183:	8b 75 08             	mov    0x8(%ebp),%esi
  100186:	8b 45 08             	mov    0x8(%ebp),%eax
  100189:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  100190:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100197:	8b 45 14             	mov    0x14(%ebp),%eax
  10019a:	c1 f8 08             	sar    $0x8,%eax
  10019d:	89 c2                	mov    %eax,%edx
  10019f:	c1 fa 1f             	sar    $0x1f,%edx
  1001a2:	0f b6 f8             	movzbl %al,%edi
  1001a5:	89 7d d8             	mov    %edi,-0x28(%ebp)
  1001a8:	89 d7                	mov    %edx,%edi
  1001aa:	83 e7 00             	and    $0x0,%edi
  1001ad:	89 7d dc             	mov    %edi,-0x24(%ebp)
  1001b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1001b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1001b6:	89 c2                	mov    %eax,%edx
  1001b8:	b8 00 00 00 00       	mov    $0x0,%eax
  1001bd:	c1 e2 14             	shl    $0x14,%edx
  1001c0:	89 cf                	mov    %ecx,%edi
  1001c2:	09 c7                	or     %eax,%edi
  1001c4:	89 7d e0             	mov    %edi,-0x20(%ebp)
  1001c7:	89 df                	mov    %ebx,%edi
  1001c9:	09 d7                	or     %edx,%edi
  1001cb:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  1001ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1001d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1001d4:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  1001db:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  1001e2:	8b 75 08             	mov    0x8(%ebp),%esi
  1001e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1001e8:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  1001ef:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  1001f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1001f9:	c1 e8 18             	shr    $0x18,%eax
  1001fc:	ba 00 00 00 00       	mov    $0x0,%edx
  100201:	89 c2                	mov    %eax,%edx
  100203:	b8 00 00 00 00       	mov    $0x0,%eax
  100208:	c1 e2 18             	shl    $0x18,%edx
  10020b:	89 cf                	mov    %ecx,%edi
  10020d:	09 c7                	or     %eax,%edi
  10020f:	89 7d e8             	mov    %edi,-0x18(%ebp)
  100212:	89 df                	mov    %ebx,%edi
  100214:	09 d7                	or     %edx,%edi
  100216:	89 7d ec             	mov    %edi,-0x14(%ebp)
  100219:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10021c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10021f:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  100226:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
}
  10022d:	83 c4 4c             	add    $0x4c,%esp
  100230:	5b                   	pop    %ebx
  100231:	5e                   	pop    %esi
  100232:	5f                   	pop    %edi
  100233:	5d                   	pop    %ebp
  100234:	c3                   	ret    

00100235 <init_gdt>:

void init_gdt(void)
{
  100235:	55                   	push   %ebp
  100236:	89 e5                	mov    %esp,%ebp
  100238:	83 ec 10             	sub    $0x10,%esp
    set_gdt_entry(0, 0, 0, 0);
  10023b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100242:	00 
  100243:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10024a:	00 
  10024b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100252:	00 
  100253:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10025a:	e8 db fd ff ff       	call   10003a <set_gdt_entry>
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10025f:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100266:	00 
  100267:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  10026e:	00 
  10026f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100276:	00 
  100277:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10027e:	e8 b7 fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100283:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  10028a:	00 
  10028b:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100292:	00 
  100293:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10029a:	00 
  10029b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1002a2:	e8 93 fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1002a7:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  1002ae:	00 
  1002af:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1002b6:	00 
  1002b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1002be:	00 
  1002bf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1002c6:	e8 6f fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1002cb:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  1002d2:	00 
  1002d3:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1002da:	00 
  1002db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1002e2:	00 
  1002e3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1002ea:	e8 4b fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  1002ef:	e8 18 fd ff ff       	call   10000c <load_gdt>
}
  1002f4:	c9                   	leave  
  1002f5:	c3                   	ret    
	...

001002f8 <intr_stub_0>:
  1002f8:	6a 00                	push   $0x0
  1002fa:	6a 00                	push   $0x0
  1002fc:	e9 eb 00 00 00       	jmp    1003ec <intr_common_handler>

00100301 <intr_stub_1>:
  100301:	6a 00                	push   $0x0
  100303:	6a 01                	push   $0x1
  100305:	e9 e2 00 00 00       	jmp    1003ec <intr_common_handler>

0010030a <intr_stub_2>:
  10030a:	6a 00                	push   $0x0
  10030c:	6a 02                	push   $0x2
  10030e:	e9 d9 00 00 00       	jmp    1003ec <intr_common_handler>

00100313 <intr_stub_3>:
  100313:	6a 00                	push   $0x0
  100315:	6a 03                	push   $0x3
  100317:	e9 d0 00 00 00       	jmp    1003ec <intr_common_handler>

0010031c <intr_stub_4>:
  10031c:	6a 00                	push   $0x0
  10031e:	6a 04                	push   $0x4
  100320:	e9 c7 00 00 00       	jmp    1003ec <intr_common_handler>

00100325 <intr_stub_5>:
  100325:	6a 00                	push   $0x0
  100327:	6a 05                	push   $0x5
  100329:	e9 be 00 00 00       	jmp    1003ec <intr_common_handler>

0010032e <intr_stub_6>:
  10032e:	6a 00                	push   $0x0
  100330:	6a 06                	push   $0x6
  100332:	e9 b5 00 00 00       	jmp    1003ec <intr_common_handler>

00100337 <intr_stub_7>:
  100337:	6a 00                	push   $0x0
  100339:	6a 07                	push   $0x7
  10033b:	e9 ac 00 00 00       	jmp    1003ec <intr_common_handler>

00100340 <intr_stub_8>:
  100340:	6a 08                	push   $0x8
  100342:	e9 a5 00 00 00       	jmp    1003ec <intr_common_handler>

00100347 <intr_stub_9>:
  100347:	6a 00                	push   $0x0
  100349:	6a 09                	push   $0x9
  10034b:	e9 9c 00 00 00       	jmp    1003ec <intr_common_handler>

00100350 <intr_stub_10>:
  100350:	6a 0a                	push   $0xa
  100352:	e9 95 00 00 00       	jmp    1003ec <intr_common_handler>

00100357 <intr_stub_11>:
  100357:	6a 0b                	push   $0xb
  100359:	e9 8e 00 00 00       	jmp    1003ec <intr_common_handler>

0010035e <intr_stub_12>:
  10035e:	6a 0c                	push   $0xc
  100360:	e9 87 00 00 00       	jmp    1003ec <intr_common_handler>

00100365 <intr_stub_13>:
  100365:	6a 0d                	push   $0xd
  100367:	e9 80 00 00 00       	jmp    1003ec <intr_common_handler>

0010036c <intr_stub_14>:
  10036c:	6a 0e                	push   $0xe
  10036e:	eb 7c                	jmp    1003ec <intr_common_handler>

00100370 <intr_stub_15>:
  100370:	6a 00                	push   $0x0
  100372:	6a 0f                	push   $0xf
  100374:	eb 76                	jmp    1003ec <intr_common_handler>

00100376 <intr_stub_16>:
  100376:	6a 00                	push   $0x0
  100378:	6a 10                	push   $0x10
  10037a:	eb 70                	jmp    1003ec <intr_common_handler>

0010037c <intr_stub_17>:
  10037c:	6a 11                	push   $0x11
  10037e:	eb 6c                	jmp    1003ec <intr_common_handler>

00100380 <intr_stub_18>:
  100380:	6a 00                	push   $0x0
  100382:	6a 12                	push   $0x12
  100384:	eb 66                	jmp    1003ec <intr_common_handler>

00100386 <intr_stub_32>:
  100386:	6a 00                	push   $0x0
  100388:	6a 20                	push   $0x20
  10038a:	eb 60                	jmp    1003ec <intr_common_handler>

0010038c <intr_stub_33>:
  10038c:	6a 00                	push   $0x0
  10038e:	6a 21                	push   $0x21
  100390:	eb 5a                	jmp    1003ec <intr_common_handler>

00100392 <intr_stub_34>:
  100392:	6a 00                	push   $0x0
  100394:	6a 22                	push   $0x22
  100396:	eb 54                	jmp    1003ec <intr_common_handler>

00100398 <intr_stub_35>:
  100398:	6a 00                	push   $0x0
  10039a:	6a 23                	push   $0x23
  10039c:	eb 4e                	jmp    1003ec <intr_common_handler>

0010039e <intr_stub_36>:
  10039e:	6a 00                	push   $0x0
  1003a0:	6a 24                	push   $0x24
  1003a2:	eb 48                	jmp    1003ec <intr_common_handler>

001003a4 <intr_stub_37>:
  1003a4:	6a 00                	push   $0x0
  1003a6:	6a 25                	push   $0x25
  1003a8:	eb 42                	jmp    1003ec <intr_common_handler>

001003aa <intr_stub_38>:
  1003aa:	6a 00                	push   $0x0
  1003ac:	6a 26                	push   $0x26
  1003ae:	eb 3c                	jmp    1003ec <intr_common_handler>

001003b0 <intr_stub_39>:
  1003b0:	6a 00                	push   $0x0
  1003b2:	6a 27                	push   $0x27
  1003b4:	eb 36                	jmp    1003ec <intr_common_handler>

001003b6 <intr_stub_40>:
  1003b6:	6a 00                	push   $0x0
  1003b8:	6a 28                	push   $0x28
  1003ba:	eb 30                	jmp    1003ec <intr_common_handler>

001003bc <intr_stub_41>:
  1003bc:	6a 00                	push   $0x0
  1003be:	6a 29                	push   $0x29
  1003c0:	eb 2a                	jmp    1003ec <intr_common_handler>

001003c2 <intr_stub_42>:
  1003c2:	6a 00                	push   $0x0
  1003c4:	6a 2a                	push   $0x2a
  1003c6:	eb 24                	jmp    1003ec <intr_common_handler>

001003c8 <intr_stub_43>:
  1003c8:	6a 00                	push   $0x0
  1003ca:	6a 2b                	push   $0x2b
  1003cc:	eb 1e                	jmp    1003ec <intr_common_handler>

001003ce <intr_stub_44>:
  1003ce:	6a 00                	push   $0x0
  1003d0:	6a 2c                	push   $0x2c
  1003d2:	eb 18                	jmp    1003ec <intr_common_handler>

001003d4 <intr_stub_45>:
  1003d4:	6a 00                	push   $0x0
  1003d6:	6a 2d                	push   $0x2d
  1003d8:	eb 12                	jmp    1003ec <intr_common_handler>

001003da <intr_stub_46>:
  1003da:	6a 00                	push   $0x0
  1003dc:	6a 2e                	push   $0x2e
  1003de:	eb 0c                	jmp    1003ec <intr_common_handler>

001003e0 <intr_stub_47>:
  1003e0:	6a 00                	push   $0x0
  1003e2:	6a 2f                	push   $0x2f
  1003e4:	eb 06                	jmp    1003ec <intr_common_handler>

001003e6 <intr_stub_48>:
  1003e6:	6a 00                	push   $0x0
  1003e8:	6a 30                	push   $0x30
  1003ea:	eb 00                	jmp    1003ec <intr_common_handler>

001003ec <intr_common_handler>:
  1003ec:	55                   	push   %ebp
  1003ed:	57                   	push   %edi
  1003ee:	56                   	push   %esi
  1003ef:	52                   	push   %edx
  1003f0:	51                   	push   %ecx
  1003f1:	53                   	push   %ebx
  1003f2:	50                   	push   %eax
  1003f3:	66 b8 10 00          	mov    $0x10,%ax
  1003f7:	8e d8                	mov    %eax,%ds
  1003f9:	8e c0                	mov    %eax,%es
  1003fb:	54                   	push   %esp
  1003fc:	e8 cb 17 00 00       	call   101bcc <handle_interrupt>
  100401:	89 c4                	mov    %eax,%esp
  100403:	66 b8 23 00          	mov    $0x23,%ax
  100407:	8e d8                	mov    %eax,%ds
  100409:	8e c0                	mov    %eax,%es
  10040b:	58                   	pop    %eax
  10040c:	5b                   	pop    %ebx
  10040d:	59                   	pop    %ecx
  10040e:	5a                   	pop    %edx
  10040f:	5e                   	pop    %esi
  100410:	5f                   	pop    %edi
  100411:	5d                   	pop    %ebp
  100412:	83 c4 08             	add    $0x8,%esp
  100415:	cf                   	iret   
	...

00100418 <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100418:	55                   	push   %ebp
  100419:	89 e5                	mov    %esp,%ebp
  10041b:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  10041e:	8b 45 08             	mov    0x8(%ebp),%eax
  100421:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100424:	eb 0e                	jmp    100434 <memset+0x1c>
        *p++ = c;
  100426:	8b 45 0c             	mov    0xc(%ebp),%eax
  100429:	89 c2                	mov    %eax,%edx
  10042b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10042e:	88 10                	mov    %dl,(%eax)
  100430:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100434:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100438:	0f 95 c0             	setne  %al
  10043b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  10043f:	84 c0                	test   %al,%al
  100441:	75 e3                	jne    100426 <memset+0xe>
        *p++ = c;
    }

    return buf;
  100443:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100446:	c9                   	leave  
  100447:	c3                   	ret    

00100448 <memcpy>:

static inline void* memcpy(void* dest, const void* src, size_t n)
{
  100448:	55                   	push   %ebp
  100449:	89 e5                	mov    %esp,%ebp
  10044b:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
  10044e:	8b 45 08             	mov    0x8(%ebp),%eax
  100451:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const unsigned char* s = src;
  100454:	8b 45 0c             	mov    0xc(%ebp),%eax
  100457:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  10045a:	eb 13                	jmp    10046f <memcpy+0x27>
        *d++ = *s++;
  10045c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10045f:	0f b6 10             	movzbl (%eax),%edx
  100462:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100465:	88 10                	mov    %dl,(%eax)
  100467:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  10046b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
static inline void* memcpy(void* dest, const void* src, size_t n)
{
    unsigned char* d = dest;
    const unsigned char* s = src;

    while (n--) {
  10046f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100473:	0f 95 c0             	setne  %al
  100476:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  10047a:	84 c0                	test   %al,%al
  10047c:	75 de                	jne    10045c <memcpy+0x14>
        *d++ = *s++;
    }

    return dest;
  10047e:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100481:	c9                   	leave  
  100482:	c3                   	ret    

00100483 <syscall>:
#include "string.h"
#include "elf.h"
#include "vmm.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  100483:	55                   	push   %ebp
  100484:	89 e5                	mov    %esp,%ebp
  100486:	83 ec 18             	sub    $0x18,%esp
    switch (cpu->eax) {
  100489:	8b 45 08             	mov    0x8(%ebp),%eax
  10048c:	8b 00                	mov    (%eax),%eax
  10048e:	85 c0                	test   %eax,%eax
  100490:	75 16                	jne    1004a8 <syscall+0x25>
        case 0: /* putc */
            kprintf("%c", cpu->ebx);
  100492:	8b 45 08             	mov    0x8(%ebp),%eax
  100495:	8b 40 04             	mov    0x4(%eax),%eax
  100498:	89 44 24 04          	mov    %eax,0x4(%esp)
  10049c:	c7 04 24 00 30 10 00 	movl   $0x103000,(%esp)
  1004a3:	e8 f9 0d 00 00       	call   1012a1 <kprintf>
            break;
    }
 
    return cpu;
  1004a8:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1004ab:	c9                   	leave  
  1004ac:	c3                   	ret    

001004ad <init_elf>:

void init_elf(void* image)
{
  1004ad:	55                   	push   %ebp
  1004ae:	89 e5                	mov    %esp,%ebp
  1004b0:	83 ec 38             	sub    $0x38,%esp
    /*
     * FIXME Wir muessen eigentlich die Laenge vom Image pruefen, damit wir bei
     * korrupten ELF-Dateien nicht ueber das Dateiende hinauslesen.
     */
 
    struct elf_header* header = image;
  1004b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1004b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct elf_program_header* ph;
    int i;
 
    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  1004b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1004bc:	8b 00                	mov    (%eax),%eax
  1004be:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  1004c3:	74 11                	je     1004d6 <init_elf+0x29>
        kprintf("Keine gueltige ELF-Magic!\n");
  1004c5:	c7 04 24 03 30 10 00 	movl   $0x103003,(%esp)
  1004cc:	e8 d0 0d 00 00       	call   1012a1 <kprintf>
        return;
  1004d1:	e9 8a 00 00 00       	jmp    100560 <init_elf+0xb3>
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
  1004d6:	8b 55 08             	mov    0x8(%ebp),%edx
  1004d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1004dc:	8b 40 1c             	mov    0x1c(%eax),%eax
  1004df:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1004e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  1004e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1004ec:	eb 63                	jmp    100551 <init_elf+0xa4>
        void* dest = (void*) ph->virt_addr;
  1004ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004f1:	8b 40 08             	mov    0x8(%eax),%eax
  1004f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        void* src = ((char*) image) + ph->offset;
  1004f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004fa:	8b 40 04             	mov    0x4(%eax),%eax
  1004fd:	03 45 08             	add    0x8(%ebp),%eax
  100500:	89 45 f4             	mov    %eax,-0xc(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  100503:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100506:	8b 00                	mov    (%eax),%eax
  100508:	83 f8 01             	cmp    $0x1,%eax
  10050b:	75 3b                	jne    100548 <init_elf+0x9b>
            continue;
        }
 
        memset(dest, 0, ph->mem_size);
  10050d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100510:	8b 40 14             	mov    0x14(%eax),%eax
  100513:	89 44 24 08          	mov    %eax,0x8(%esp)
  100517:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10051e:	00 
  10051f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100522:	89 04 24             	mov    %eax,(%esp)
  100525:	e8 ee fe ff ff       	call   100418 <memset>
        memcpy(dest, src, ph->file_size);
  10052a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10052d:	8b 40 10             	mov    0x10(%eax),%eax
  100530:	89 44 24 08          	mov    %eax,0x8(%esp)
  100534:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100537:	89 44 24 04          	mov    %eax,0x4(%esp)
  10053b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10053e:	89 04 24             	mov    %eax,(%esp)
  100541:	e8 02 ff ff ff       	call   100448 <memcpy>
  100546:	eb 01                	jmp    100549 <init_elf+0x9c>
        void* dest = (void*) ph->virt_addr;
        void* src = ((char*) image) + ph->offset;
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
  100548:	90                   	nop
        kprintf("Keine gueltige ELF-Magic!\n");
        return;
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100549:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  10054d:	83 45 e8 20          	addl   $0x20,-0x18(%ebp)
  100551:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100554:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  100558:	0f b7 c0             	movzwl %ax,%eax
  10055b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10055e:	7f 8e                	jg     1004ee <init_elf+0x41>
        memset(dest, 0, ph->mem_size);
        memcpy(dest, src, ph->file_size);
    }
 
    //init_task((void*) header->entry);
}
  100560:	c9                   	leave  
  100561:	c3                   	ret    

00100562 <task>:

void task() {
  100562:	55                   	push   %ebp
  100563:	89 e5                	mov    %esp,%ebp
  100565:	83 ec 18             	sub    $0x18,%esp
  kprintf("task");
  100568:	c7 04 24 1e 30 10 00 	movl   $0x10301e,(%esp)
  10056f:	e8 2d 0d 00 00       	call   1012a1 <kprintf>
  
  while(1) { }
  100574:	eb fe                	jmp    100574 <task+0x12>

00100576 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  100576:	55                   	push   %ebp
  100577:	89 e5                	mov    %esp,%ebp
  100579:	83 ec 28             	sub    $0x28,%esp
	struct vmm_context* context = vmm_init(mb_info);
  10057c:	8b 45 08             	mov    0x8(%ebp),%eax
  10057f:	89 04 24             	mov    %eax,(%esp)
  100582:	e8 59 07 00 00       	call   100ce0 <vmm_init>
  100587:	89 45 f4             	mov    %eax,-0xc(%ebp)
		kprintf("Loading MB-Mod %x: S: %x E: %x\n", i, modules[i].start, modules[i].end);

		init_elf((void*) modules[i].start);
	}*/
	
	init_task(task, context);
  10058a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10058d:	89 44 24 04          	mov    %eax,0x4(%esp)
  100591:	c7 04 24 62 05 10 00 	movl   $0x100562,(%esp)
  100598:	e8 0f 00 00 00       	call   1005ac <init_task>

	kprintf("abc");
  10059d:	c7 04 24 23 30 10 00 	movl   $0x103023,(%esp)
  1005a4:	e8 f8 0c 00 00       	call   1012a1 <kprintf>

	while(1) {  }
  1005a9:	eb fe                	jmp    1005a9 <kernel_main+0x33>
	...

001005ac <init_task>:

static struct task* first_task = NULL;
static struct task* current_task = NULL;

struct task* init_task(void* entry, struct vmm_context* context)
{
  1005ac:	55                   	push   %ebp
  1005ad:	89 e5                	mov    %esp,%ebp
  1005af:	57                   	push   %edi
  1005b0:	56                   	push   %esi
  1005b1:	53                   	push   %ebx
  1005b2:	83 ec 7c             	sub    $0x7c,%esp
    uint8_t* stack = vmm_alloc(context, 1);
  1005b5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1005bc:	00 
  1005bd:	8b 45 0c             	mov    0xc(%ebp),%eax
  1005c0:	89 04 24             	mov    %eax,(%esp)
  1005c3:	e8 b0 06 00 00       	call   100c78 <vmm_alloc>
  1005c8:	89 45 d8             	mov    %eax,-0x28(%ebp)
    uint8_t* user_stack = vmm_alloc(context, 1);
  1005cb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1005d2:	00 
  1005d3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1005d6:	89 04 24             	mov    %eax,(%esp)
  1005d9:	e8 9a 06 00 00       	call   100c78 <vmm_alloc>
  1005de:	89 45 dc             	mov    %eax,-0x24(%ebp)

		kprintf("entry: %x", (uint32_t) entry);
  1005e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1005e4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1005e8:	c7 04 24 27 30 10 00 	movl   $0x103027,(%esp)
  1005ef:	e8 ad 0c 00 00       	call   1012a1 <kprintf>
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
        .eip = (uint32_t) entry,
  1005f4:	8b 75 08             	mov    0x8(%ebp),%esi
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
  1005f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1005fa:	05 00 10 00 00       	add    $0x1000,%eax
  1005ff:	89 45 94             	mov    %eax,-0x6c(%ebp)

        .cs  = 0x18 | 0x03,
        .ss  = 0x20 | 0x03,

        .eflags = 0x200,
    };
  100602:	8d 5d a0             	lea    -0x60(%ebp),%ebx
  100605:	b8 00 00 00 00       	mov    $0x0,%eax
  10060a:	ba 0e 00 00 00       	mov    $0xe,%edx
  10060f:	89 df                	mov    %ebx,%edi
  100611:	89 d1                	mov    %edx,%ecx
  100613:	f3 ab                	rep stos %eax,%es:(%edi)
  100615:	89 75 c4             	mov    %esi,-0x3c(%ebp)
  100618:	c7 45 c8 1b 00 00 00 	movl   $0x1b,-0x38(%ebp)
  10061f:	c7 45 cc 00 02 00 00 	movl   $0x200,-0x34(%ebp)
  100626:	8b 45 94             	mov    -0x6c(%ebp),%eax
  100629:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10062c:	c7 45 d4 23 00 00 00 	movl   $0x23,-0x2c(%ebp)

    struct cpu_state* state = (void*) (stack + 4096 - sizeof(new_state));
  100633:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100636:	05 c8 0f 00 00       	add    $0xfc8,%eax
  10063b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    *state = new_state;
  10063e:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100641:	8b 55 a0             	mov    -0x60(%ebp),%edx
  100644:	89 10                	mov    %edx,(%eax)
  100646:	8b 55 a4             	mov    -0x5c(%ebp),%edx
  100649:	89 50 04             	mov    %edx,0x4(%eax)
  10064c:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10064f:	89 50 08             	mov    %edx,0x8(%eax)
  100652:	8b 55 ac             	mov    -0x54(%ebp),%edx
  100655:	89 50 0c             	mov    %edx,0xc(%eax)
  100658:	8b 55 b0             	mov    -0x50(%ebp),%edx
  10065b:	89 50 10             	mov    %edx,0x10(%eax)
  10065e:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  100661:	89 50 14             	mov    %edx,0x14(%eax)
  100664:	8b 55 b8             	mov    -0x48(%ebp),%edx
  100667:	89 50 18             	mov    %edx,0x18(%eax)
  10066a:	8b 55 bc             	mov    -0x44(%ebp),%edx
  10066d:	89 50 1c             	mov    %edx,0x1c(%eax)
  100670:	8b 55 c0             	mov    -0x40(%ebp),%edx
  100673:	89 50 20             	mov    %edx,0x20(%eax)
  100676:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  100679:	89 50 24             	mov    %edx,0x24(%eax)
  10067c:	8b 55 c8             	mov    -0x38(%ebp),%edx
  10067f:	89 50 28             	mov    %edx,0x28(%eax)
  100682:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100685:	89 50 2c             	mov    %edx,0x2c(%eax)
  100688:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10068b:	89 50 30             	mov    %edx,0x30(%eax)
  10068e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100691:	89 50 34             	mov    %edx,0x34(%eax)

    struct task* task = vmm_alloc(context, 1);
  100694:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10069b:	00 
  10069c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10069f:	89 04 24             	mov    %eax,(%esp)
  1006a2:	e8 d1 05 00 00       	call   100c78 <vmm_alloc>
  1006a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    task->cpu_state = state;
  1006aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1006ad:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1006b0:	89 10                	mov    %edx,(%eax)
    task->next = first_task;
  1006b2:	8b 15 00 40 10 00    	mov    0x104000,%edx
  1006b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1006bb:	89 50 04             	mov    %edx,0x4(%eax)
    first_task = task;
  1006be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1006c1:	a3 00 40 10 00       	mov    %eax,0x104000
    return task;
  1006c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
  1006c9:	83 c4 7c             	add    $0x7c,%esp
  1006cc:	5b                   	pop    %ebx
  1006cd:	5e                   	pop    %esi
  1006ce:	5f                   	pop    %edi
  1006cf:	5d                   	pop    %ebp
  1006d0:	c3                   	ret    

001006d1 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu)
{
  1006d1:	55                   	push   %ebp
  1006d2:	89 e5                	mov    %esp,%ebp
    if(first_task == NULL) return cpu;
  1006d4:	a1 00 40 10 00       	mov    0x104000,%eax
  1006d9:	85 c0                	test   %eax,%eax
  1006db:	75 05                	jne    1006e2 <schedule+0x11>
  1006dd:	8b 45 08             	mov    0x8(%ebp),%eax
  1006e0:	eb 55                	jmp    100737 <schedule+0x66>
    
    if (current_task != NULL) {
  1006e2:	a1 04 40 10 00       	mov    0x104004,%eax
  1006e7:	85 c0                	test   %eax,%eax
  1006e9:	74 0a                	je     1006f5 <schedule+0x24>
        current_task->cpu_state = cpu;
  1006eb:	a1 04 40 10 00       	mov    0x104004,%eax
  1006f0:	8b 55 08             	mov    0x8(%ebp),%edx
  1006f3:	89 10                	mov    %edx,(%eax)
    }

    if (current_task == NULL) {
  1006f5:	a1 04 40 10 00       	mov    0x104004,%eax
  1006fa:	85 c0                	test   %eax,%eax
  1006fc:	75 0c                	jne    10070a <schedule+0x39>
        current_task = first_task;
  1006fe:	a1 00 40 10 00       	mov    0x104000,%eax
  100703:	a3 04 40 10 00       	mov    %eax,0x104004
  100708:	eb 20                	jmp    10072a <schedule+0x59>
    } else {
        current_task = current_task->next;
  10070a:	a1 04 40 10 00       	mov    0x104004,%eax
  10070f:	8b 40 04             	mov    0x4(%eax),%eax
  100712:	a3 04 40 10 00       	mov    %eax,0x104004
        if (current_task == NULL) {
  100717:	a1 04 40 10 00       	mov    0x104004,%eax
  10071c:	85 c0                	test   %eax,%eax
  10071e:	75 0a                	jne    10072a <schedule+0x59>
            current_task = first_task;
  100720:	a1 00 40 10 00       	mov    0x104000,%eax
  100725:	a3 04 40 10 00       	mov    %eax,0x104004
        }
    }  

    cpu = current_task->cpu_state;
  10072a:	a1 04 40 10 00       	mov    0x104004,%eax
  10072f:	8b 00                	mov    (%eax),%eax
  100731:	89 45 08             	mov    %eax,0x8(%ebp)

    return cpu;
  100734:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100737:	5d                   	pop    %ebp
  100738:	c3                   	ret    
  100739:	00 00                	add    %al,(%eax)
	...

0010073c <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  10073c:	55                   	push   %ebp
  10073d:	89 e5                	mov    %esp,%ebp
  10073f:	83 ec 14             	sub    $0x14,%esp
  100742:	8b 45 08             	mov    0x8(%ebp),%eax
  100745:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  100749:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  10074d:	89 c2                	mov    %eax,%edx
  10074f:	ec                   	in     (%dx),%al
  100750:	88 45 ff             	mov    %al,-0x1(%ebp)
	return result;
  100753:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  100757:	c9                   	leave  
  100758:	c3                   	ret    

00100759 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  100759:	55                   	push   %ebp
  10075a:	89 e5                	mov    %esp,%ebp
  10075c:	83 ec 08             	sub    $0x8,%esp
  10075f:	8b 55 08             	mov    0x8(%ebp),%edx
  100762:	8b 45 0c             	mov    0xc(%ebp),%eax
  100765:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  100769:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  10076c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  100770:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  100774:	ee                   	out    %al,(%dx)
}
  100775:	c9                   	leave  
  100776:	c3                   	ret    

00100777 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  100777:	55                   	push   %ebp
  100778:	89 e5                	mov    %esp,%ebp
  10077a:	83 ec 38             	sub    $0x38,%esp
  10077d:	8b 45 0c             	mov    0xc(%ebp),%eax
  100780:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
  uint8_t keycode = 0;
  100784:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

  switch (set) {
  100788:	8b 45 08             	mov    0x8(%ebp),%eax
  10078b:	83 f8 01             	cmp    $0x1,%eax
  10078e:	74 19                	je     1007a9 <translate_scancode+0x32>
  100790:	83 f8 02             	cmp    $0x2,%eax
  100793:	74 24                	je     1007b9 <translate_scancode+0x42>
  100795:	85 c0                	test   %eax,%eax
  100797:	75 35                	jne    1007ce <translate_scancode+0x57>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100799:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10079d:	0f b6 80 00 20 10 00 	movzbl 0x102000(%eax),%eax
  1007a4:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  1007a7:	eb 25                	jmp    1007ce <translate_scancode+0x57>
    case 1:
      keycode = sc_to_kc[1][scancode];
  1007a9:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1007ad:	0f b6 80 80 20 10 00 	movzbl 0x102080(%eax),%eax
  1007b4:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  1007b7:	eb 15                	jmp    1007ce <translate_scancode+0x57>
    case 2:
      switch (scancode) {
  1007b9:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1007bd:	3d 1d 45 00 00       	cmp    $0x451d,%eax
  1007c2:	75 06                	jne    1007ca <translate_scancode+0x53>
        case 0x451D:
          keycode = 119;
  1007c4:	c6 45 f7 77          	movb   $0x77,-0x9(%ebp)
          break;
  1007c8:	eb 04                	jmp    1007ce <translate_scancode+0x57>

        default:
          keycode = 0x0;	
  1007ca:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
      };
      break;
  }

  if (keycode == 0) {
  1007ce:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  1007d2:	75 1b                	jne    1007ef <translate_scancode+0x78>
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1007d4:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1007d8:	8b 55 08             	mov    0x8(%ebp),%edx
  1007db:	89 54 24 08          	mov    %edx,0x8(%esp)
  1007df:	89 44 24 04          	mov    %eax,0x4(%esp)
  1007e3:	c7 04 24 34 30 10 00 	movl   $0x103034,(%esp)
  1007ea:	e8 b2 0a 00 00       	call   1012a1 <kprintf>
  }

  return keycode;
  1007ef:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
  1007f3:	c9                   	leave  
  1007f4:	c3                   	ret    

001007f5 <keyboard_handler>:

void keyboard_handler() {    
  1007f5:	55                   	push   %ebp
  1007f6:	89 e5                	mov    %esp,%ebp
  1007f8:	83 ec 28             	sub    $0x28,%esp
  uint8_t scancode;
  uint8_t keycode = 0;
  1007fb:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
  int break_code = 0;
  1007ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  100806:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  10080d:	e8 2a ff ff ff       	call   10073c <inb>
  100812:	88 45 f2             	mov    %al,-0xe(%ebp)

  if (!init_done) {
  100815:	a1 08 40 10 00       	mov    0x104008,%eax
  10081a:	85 c0                	test   %eax,%eax
  10081c:	0f 84 26 01 00 00    	je     100948 <keyboard_handler+0x153>
    return;
  }

  if ((scancode & 0x80) &&
  100822:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100826:	84 c0                	test   %al,%al
  100828:	79 29                	jns    100853 <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
  10082a:	a1 14 40 10 00       	mov    0x104014,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  10082f:	85 c0                	test   %eax,%eax
  100831:	75 06                	jne    100839 <keyboard_handler+0x44>
  100833:	80 7d f2 e1          	cmpb   $0xe1,-0xe(%ebp)
  100837:	74 1a                	je     100853 <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  100839:	a1 18 40 10 00       	mov    0x104018,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  10083e:	85 c0                	test   %eax,%eax
  100840:	75 06                	jne    100848 <keyboard_handler+0x53>
  100842:	80 7d f2 e0          	cmpb   $0xe0,-0xe(%ebp)
  100846:	74 0b                	je     100853 <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  {
      break_code = 1;
  100848:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
      scancode &= ~0x80;
  10084f:	80 65 f2 7f          	andb   $0x7f,-0xe(%ebp)
  }

  if (e0_code) {
  100853:	a1 18 40 10 00       	mov    0x104018,%eax
  100858:	85 c0                	test   %eax,%eax
  10085a:	74 41                	je     10089d <keyboard_handler+0xa8>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  10085c:	80 7d f2 2a          	cmpb   $0x2a,-0xe(%ebp)
  100860:	74 06                	je     100868 <keyboard_handler+0x73>
  100862:	80 7d f2 36          	cmpb   $0x36,-0xe(%ebp)
  100866:	75 0f                	jne    100877 <keyboard_handler+0x82>
          e0_code = 0;
  100868:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  10086f:	00 00 00 
          return;
  100872:	e9 d2 00 00 00       	jmp    100949 <keyboard_handler+0x154>
      }
      keycode = translate_scancode(1, scancode);
  100877:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  10087b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10087f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100886:	e8 ec fe ff ff       	call   100777 <translate_scancode>
  10088b:	88 45 f3             	mov    %al,-0xd(%ebp)
      e0_code = 0;
  10088e:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  100895:	00 00 00 
  100898:	e9 ac 00 00 00       	jmp    100949 <keyboard_handler+0x154>
  } else if (e1_code == 2) {
  10089d:	a1 14 40 10 00       	mov    0x104014,%eax
  1008a2:	83 f8 02             	cmp    $0x2,%eax
  1008a5:	75 41                	jne    1008e8 <keyboard_handler+0xf3>
      e1_prev |= ((uint16_t) scancode << 8);
  1008a7:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  1008ab:	c1 e0 08             	shl    $0x8,%eax
  1008ae:	89 c2                	mov    %eax,%edx
  1008b0:	0f b7 05 1c 40 10 00 	movzwl 0x10401c,%eax
  1008b7:	09 d0                	or     %edx,%eax
  1008b9:	66 a3 1c 40 10 00    	mov    %ax,0x10401c
      keycode = translate_scancode(2, e1_prev);
  1008bf:	0f b7 05 1c 40 10 00 	movzwl 0x10401c,%eax
  1008c6:	0f b7 c0             	movzwl %ax,%eax
  1008c9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1008cd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1008d4:	e8 9e fe ff ff       	call   100777 <translate_scancode>
  1008d9:	88 45 f3             	mov    %al,-0xd(%ebp)
      e1_code = 0;
  1008dc:	c7 05 14 40 10 00 00 	movl   $0x0,0x104014
  1008e3:	00 00 00 
  1008e6:	eb 61                	jmp    100949 <keyboard_handler+0x154>
  } else if (e1_code == 1) {
  1008e8:	a1 14 40 10 00       	mov    0x104014,%eax
  1008ed:	83 f8 01             	cmp    $0x1,%eax
  1008f0:	75 19                	jne    10090b <keyboard_handler+0x116>
      e1_prev = scancode;
  1008f2:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  1008f6:	66 a3 1c 40 10 00    	mov    %ax,0x10401c
      e1_code++;
  1008fc:	a1 14 40 10 00       	mov    0x104014,%eax
  100901:	83 c0 01             	add    $0x1,%eax
  100904:	a3 14 40 10 00       	mov    %eax,0x104014
  100909:	eb 3e                	jmp    100949 <keyboard_handler+0x154>
  } else if (scancode == 0xE0) {
  10090b:	80 7d f2 e0          	cmpb   $0xe0,-0xe(%ebp)
  10090f:	75 0c                	jne    10091d <keyboard_handler+0x128>
      e0_code = 1;
  100911:	c7 05 18 40 10 00 01 	movl   $0x1,0x104018
  100918:	00 00 00 
  10091b:	eb 2c                	jmp    100949 <keyboard_handler+0x154>
  } else if (scancode == 0xE1) {
  10091d:	80 7d f2 e1          	cmpb   $0xe1,-0xe(%ebp)
  100921:	75 0c                	jne    10092f <keyboard_handler+0x13a>
      e1_code = 1;
  100923:	c7 05 14 40 10 00 01 	movl   $0x1,0x104014
  10092a:	00 00 00 
  10092d:	eb 1a                	jmp    100949 <keyboard_handler+0x154>
  } else {
      keycode = translate_scancode(0, scancode);
  10092f:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100933:	89 44 24 04          	mov    %eax,0x4(%esp)
  100937:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10093e:	e8 34 fe ff ff       	call   100777 <translate_scancode>
  100943:	88 45 f3             	mov    %al,-0xd(%ebp)
  100946:	eb 01                	jmp    100949 <keyboard_handler+0x154>
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);

  if (!init_done) {
    return;
  100948:	90                   	nop

	if(keycode != 0x0) {
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}
  100949:	c9                   	leave  
  10094a:	c3                   	ret    

0010094b <getc>:

char getc() {
  10094b:	55                   	push   %ebp
  10094c:	89 e5                	mov    %esp,%ebp
  10094e:	83 ec 10             	sub    $0x10,%esp
	char ret = buffer[0];
  100951:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100956:	0f b6 00             	movzbl (%eax),%eax
  100959:	88 45 fb             	mov    %al,-0x5(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10095c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100963:	eb 21                	jmp    100986 <getc+0x3b>
		buffer[i] = buffer[i+1];	
  100965:	8b 15 0c 40 10 00    	mov    0x10400c,%edx
  10096b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10096e:	01 c2                	add    %eax,%edx
  100970:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100975:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100978:	83 c1 01             	add    $0x1,%ecx
  10097b:	01 c8                	add    %ecx,%eax
  10097d:	0f b6 00             	movzbl (%eax),%eax
  100980:	88 02                	mov    %al,(%edx)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100982:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100986:	a1 10 40 10 00       	mov    0x104010,%eax
  10098b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
  10098e:	7c d5                	jl     100965 <getc+0x1a>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100990:	a1 10 40 10 00       	mov    0x104010,%eax
  100995:	83 e8 01             	sub    $0x1,%eax
  100998:	a3 10 40 10 00       	mov    %eax,0x104010

	return ret;
  10099d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
  1009a1:	c9                   	leave  
  1009a2:	c3                   	ret    

001009a3 <send_command>:

void send_command(uint8_t command) {
  1009a3:	55                   	push   %ebp
  1009a4:	89 e5                	mov    %esp,%ebp
  1009a6:	83 ec 0c             	sub    $0xc,%esp
  1009a9:	8b 45 08             	mov    0x8(%ebp),%eax
  1009ac:	88 45 fc             	mov    %al,-0x4(%ebp)
	while((inb(0x64) & 0x2)) { }
  1009af:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1009b6:	e8 81 fd ff ff       	call   10073c <inb>
  1009bb:	0f b6 c0             	movzbl %al,%eax
  1009be:	83 e0 02             	and    $0x2,%eax
  1009c1:	85 c0                	test   %eax,%eax
  1009c3:	75 ea                	jne    1009af <send_command+0xc>
	outb(0x60, command);
  1009c5:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  1009c9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009cd:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1009d4:	e8 80 fd ff ff       	call   100759 <outb>
}
  1009d9:	c9                   	leave  
  1009da:	c3                   	ret    

001009db <init_keyboard_drv>:

void init_keyboard_drv() {
  1009db:	55                   	push   %ebp
  1009dc:	89 e5                	mov    %esp,%ebp
  1009de:	83 ec 18             	sub    $0x18,%esp
	register_intr_handler(0x21, &keyboard_handler);
  1009e1:	c7 44 24 04 f5 07 10 	movl   $0x1007f5,0x4(%esp)
  1009e8:	00 
  1009e9:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1009f0:	e8 b7 11 00 00       	call   101bac <register_intr_handler>

	while(inb(0x64) & 0x1) {
  1009f5:	eb 0c                	jmp    100a03 <init_keyboard_drv+0x28>
		inb(0x60);
  1009f7:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1009fe:	e8 39 fd ff ff       	call   10073c <inb>
}

void init_keyboard_drv() {
	register_intr_handler(0x21, &keyboard_handler);

	while(inb(0x64) & 0x1) {
  100a03:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100a0a:	e8 2d fd ff ff       	call   10073c <inb>
  100a0f:	0f b6 c0             	movzbl %al,%eax
  100a12:	83 e0 01             	and    $0x1,%eax
  100a15:	84 c0                	test   %al,%al
  100a17:	75 de                	jne    1009f7 <init_keyboard_drv+0x1c>
		inb(0x60);
	}

	send_command(0xF4);
  100a19:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100a20:	e8 7e ff ff ff       	call   1009a3 <send_command>

	init_done = 1;
  100a25:	c7 05 08 40 10 00 01 	movl   $0x1,0x104008
  100a2c:	00 00 00 
}
  100a2f:	c9                   	leave  
  100a30:	c3                   	ret    
  100a31:	00 00                	add    %al,(%eax)
	...

00100a34 <vmm_create_context>:
#define ACT_CONTEXT 0xFF000000

static uint8_t use_phys_addr = 1;

struct vmm_context* vmm_create_context(void)
{
  100a34:	55                   	push   %ebp
  100a35:	89 e5                	mov    %esp,%ebp
  100a37:	83 ec 28             	sub    $0x28,%esp
    struct vmm_context* context = pmm_alloc();
  100a3a:	e8 e5 03 00 00       	call   100e24 <pmm_alloc>
  100a3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;

 
    context->pagedir = pmm_alloc();
  100a42:	e8 dd 03 00 00       	call   100e24 <pmm_alloc>
  100a47:	89 c2                	mov    %eax,%edx
  100a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a4c:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < 1023; i++) {
  100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100a55:	eb 17                	jmp    100a6e <vmm_create_context+0x3a>
        context->pagedir[i] = 0;
  100a57:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a5a:	8b 00                	mov    (%eax),%eax
  100a5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100a5f:	c1 e2 02             	shl    $0x2,%edx
  100a62:	01 d0                	add    %edx,%eax
  100a64:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    struct vmm_context* context = pmm_alloc();
    int i;

 
    context->pagedir = pmm_alloc();
    for (i = 0; i < 1023; i++) {
  100a6a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100a6e:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
  100a75:	7e e0                	jle    100a57 <vmm_create_context+0x23>
        context->pagedir[i] = 0;
    }
    context->pagedir[1023] = context->pagedir;
  100a77:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a7a:	8b 00                	mov    (%eax),%eax
  100a7c:	8d 90 fc 0f 00 00    	lea    0xffc(%eax),%edx
  100a82:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a85:	8b 00                	mov    (%eax),%eax
  100a87:	89 02                	mov    %eax,(%edx)
    
    context->vpagedir = VIRT_PDIR;
  100a89:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a8c:	c7 40 04 00 f0 ff ff 	movl   $0xfffff000,0x4(%eax)

    vmm_map_page(context, ACT_CONTEXT, context, PTE_PRESENT | PTE_WRITE);
  100a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a96:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100a9d:	00 
  100a9e:	89 44 24 08          	mov    %eax,0x8(%esp)
  100aa2:	c7 44 24 04 00 00 00 	movl   $0xff000000,0x4(%esp)
  100aa9:	ff 
  100aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100aad:	89 04 24             	mov    %eax,(%esp)
  100ab0:	e8 05 00 00 00       	call   100aba <vmm_map_page>
    
    return context;
  100ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  100ab8:	c9                   	leave  
  100ab9:	c3                   	ret    

00100aba <vmm_map_page>:

int vmm_map_page(struct vmm_context* context, uintptr_t virt, uintptr_t phys, uint32_t flags)
{
  100aba:	55                   	push   %ebp
  100abb:	89 e5                	mov    %esp,%ebp
  100abd:	53                   	push   %ebx
  100abe:	83 ec 34             	sub    $0x34,%esp
  uint32_t page_index = virt / 0x1000;
  100ac1:	8b 45 0c             	mov    0xc(%ebp),%eax
  100ac4:	c1 e8 0c             	shr    $0xc,%eax
  100ac7:	89 45 e0             	mov    %eax,-0x20(%ebp)
  uint32_t pd_index = page_index / 1024;
  100aca:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100acd:	c1 e8 0a             	shr    $0xa,%eax
  100ad0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  uint32_t pt_index = page_index % 1024;
  100ad3:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ad6:	25 ff 03 00 00       	and    $0x3ff,%eax
  100adb:	89 45 e8             	mov    %eax,-0x18(%ebp)
  
  uint32_t* page_dir;
  
  if(use_phys_addr) {
  100ade:	0f b6 05 00 21 10 00 	movzbl 0x102100,%eax
  100ae5:	84 c0                	test   %al,%al
  100ae7:	74 0a                	je     100af3 <vmm_map_page+0x39>
    page_dir = context->pagedir;
  100ae9:	8b 45 08             	mov    0x8(%ebp),%eax
  100aec:	8b 00                	mov    (%eax),%eax
  100aee:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100af1:	eb 09                	jmp    100afc <vmm_map_page+0x42>
  }
  else
  {
    page_dir = context->vpagedir;
  100af3:	8b 45 08             	mov    0x8(%ebp),%eax
  100af6:	8b 40 04             	mov    0x4(%eax),%eax
  100af9:	89 45 ec             	mov    %eax,-0x14(%ebp)

  uint32_t* page_table;
  int i;

  /* Wir brauchen 4k-Alignment */
  if ((virt & 0xFFF) || (phys & 0xFFF)) {
  100afc:	8b 45 0c             	mov    0xc(%ebp),%eax
  100aff:	25 ff 0f 00 00       	and    $0xfff,%eax
  100b04:	85 c0                	test   %eax,%eax
  100b06:	75 0c                	jne    100b14 <vmm_map_page+0x5a>
  100b08:	8b 45 10             	mov    0x10(%ebp),%eax
  100b0b:	25 ff 0f 00 00       	and    $0xfff,%eax
  100b10:	85 c0                	test   %eax,%eax
  100b12:	74 24                	je     100b38 <vmm_map_page+0x7e>
			kprintf("map err %x to %x\n", phys, virt);
  100b14:	8b 45 0c             	mov    0xc(%ebp),%eax
  100b17:	89 44 24 08          	mov    %eax,0x8(%esp)
  100b1b:	8b 45 10             	mov    0x10(%ebp),%eax
  100b1e:	89 44 24 04          	mov    %eax,0x4(%esp)
  100b22:	c7 04 24 5a 30 10 00 	movl   $0x10305a,(%esp)
  100b29:	e8 73 07 00 00       	call   1012a1 <kprintf>
      return -1;
  100b2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100b33:	e9 a2 00 00 00       	jmp    100bda <vmm_map_page+0x120>
  }

  /* Page Table heraussuchen bzw. anlegen */
  if (page_dir[pd_index] & PTE_PRESENT) {
  100b38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b3b:	c1 e0 02             	shl    $0x2,%eax
  100b3e:	03 45 ec             	add    -0x14(%ebp),%eax
  100b41:	8b 00                	mov    (%eax),%eax
  100b43:	83 e0 01             	and    $0x1,%eax
  100b46:	84 c0                	test   %al,%al
  100b48:	74 10                	je     100b5a <vmm_map_page+0xa0>
    page_table = (uint32_t*) (0xFFC00000 + pt_index * 4096);
  100b4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b4d:	05 00 fc 0f 00       	add    $0xffc00,%eax
  100b52:	c1 e0 0c             	shl    $0xc,%eax
  100b55:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100b58:	eb 48                	jmp    100ba2 <vmm_map_page+0xe8>
  } else {
    /* Neue Page Table muss angelegt werden */
    page_dir[pd_index] = (uint32_t) pmm_alloc() | PTE_PRESENT | PTE_WRITE;
  100b5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b5d:	c1 e0 02             	shl    $0x2,%eax
  100b60:	89 c3                	mov    %eax,%ebx
  100b62:	03 5d ec             	add    -0x14(%ebp),%ebx
  100b65:	e8 ba 02 00 00       	call   100e24 <pmm_alloc>
  100b6a:	83 c8 03             	or     $0x3,%eax
  100b6d:	89 03                	mov    %eax,(%ebx)
    
    page_table = (uint32_t*) (0xFFC00000 + pt_index * 4096);
  100b6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b72:	05 00 fc 0f 00       	add    $0xffc00,%eax
  100b77:	c1 e0 0c             	shl    $0xc,%eax
  100b7a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 0; i < 1024; i++) {
  100b7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100b84:	eb 13                	jmp    100b99 <vmm_map_page+0xdf>
        page_table[i] = 0;
  100b86:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b89:	c1 e0 02             	shl    $0x2,%eax
  100b8c:	03 45 f0             	add    -0x10(%ebp),%eax
  100b8f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    /* Neue Page Table muss angelegt werden */
    page_dir[pd_index] = (uint32_t) pmm_alloc() | PTE_PRESENT | PTE_WRITE;
    
    page_table = (uint32_t*) (0xFFC00000 + pt_index * 4096);

    for (i = 0; i < 1024; i++) {
  100b95:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100b99:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100ba0:	7e e4                	jle    100b86 <vmm_map_page+0xcc>
        page_table[i] = 0;
    }
  }

  /* Neues Mapping in the Page Table eintragen */
  page_table[pt_index] = phys | flags;
  100ba2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ba5:	c1 e0 02             	shl    $0x2,%eax
  100ba8:	03 45 f0             	add    -0x10(%ebp),%eax
  100bab:	8b 55 14             	mov    0x14(%ebp),%edx
  100bae:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100bb1:	09 ca                	or     %ecx,%edx
  100bb3:	89 10                	mov    %edx,(%eax)
  asm volatile("invlpg %0" : : "m" (*(char*)virt));
  100bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
  100bb8:	0f 01 38             	invlpg (%eax)

	kprintf("mapped %x to %x\n", phys, virt);
  100bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
  100bbe:	89 44 24 08          	mov    %eax,0x8(%esp)
  100bc2:	8b 45 10             	mov    0x10(%ebp),%eax
  100bc5:	89 44 24 04          	mov    %eax,0x4(%esp)
  100bc9:	c7 04 24 6c 30 10 00 	movl   $0x10306c,(%esp)
  100bd0:	e8 cc 06 00 00       	call   1012a1 <kprintf>

  return 0;
  100bd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100bda:	83 c4 34             	add    $0x34,%esp
  100bdd:	5b                   	pop    %ebx
  100bde:	5d                   	pop    %ebp
  100bdf:	c3                   	ret    

00100be0 <vmm_activate_context>:
 
void vmm_activate_context(struct vmm_context* context)
{
  100be0:	55                   	push   %ebp
  100be1:	89 e5                	mov    %esp,%ebp
    asm volatile("mov %0, %%cr3" : : "r" (context->pagedir));
  100be3:	8b 45 08             	mov    0x8(%ebp),%eax
  100be6:	8b 00                	mov    (%eax),%eax
  100be8:	0f 22 d8             	mov    %eax,%cr3
}
  100beb:	5d                   	pop    %ebp
  100bec:	c3                   	ret    

00100bed <vmm_map_kernel>:

void vmm_map_kernel(struct vmm_context* context) {
  100bed:	55                   	push   %ebp
  100bee:	89 e5                	mov    %esp,%ebp
  100bf0:	83 ec 28             	sub    $0x28,%esp
	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  100bf3:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  100bfa:	eb 28                	jmp    100c24 <vmm_map_kernel+0x37>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100bfc:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100c03:	00 
  100c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c07:	89 44 24 08          	mov    %eax,0x8(%esp)
  100c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c0e:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c12:	8b 45 08             	mov    0x8(%ebp),%eax
  100c15:	89 04 24             	mov    %eax,(%esp)
  100c18:	e8 9d fe ff ff       	call   100aba <vmm_map_page>
		addr += 0x1000;
  100c1d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
void vmm_map_kernel(struct vmm_context* context) {
	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  100c24:	b8 00 70 12 00       	mov    $0x127000,%eax
  100c29:	39 45 f4             	cmp    %eax,-0xc(%ebp)
  100c2c:	72 ce                	jb     100bfc <vmm_map_kernel+0xf>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}

	addr = 0xB8000;
  100c2e:	c7 45 f4 00 80 0b 00 	movl   $0xb8000,-0xc(%ebp)
	while (addr < 0xBFFFF) {
  100c35:	eb 28                	jmp    100c5f <vmm_map_kernel+0x72>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100c37:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100c3e:	00 
  100c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c42:	89 44 24 08          	mov    %eax,0x8(%esp)
  100c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c49:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c4d:	8b 45 08             	mov    0x8(%ebp),%eax
  100c50:	89 04 24             	mov    %eax,(%esp)
  100c53:	e8 62 fe ff ff       	call   100aba <vmm_map_page>
		addr += 0x1000;
  100c58:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}

	addr = 0xB8000;
	while (addr < 0xBFFFF) {
  100c5f:	81 7d f4 fe ff 0b 00 	cmpl   $0xbfffe,-0xc(%ebp)
  100c66:	76 cf                	jbe    100c37 <vmm_map_kernel+0x4a>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}
}
  100c68:	c9                   	leave  
  100c69:	c3                   	ret    

00100c6a <vmm_set_alloc_offset>:

void vmm_set_alloc_offset(struct vmm_context* context, uintptr_t offset) {
  100c6a:	55                   	push   %ebp
  100c6b:	89 e5                	mov    %esp,%ebp
	context->alloc_offset = offset;
  100c6d:	8b 45 08             	mov    0x8(%ebp),%eax
  100c70:	8b 55 0c             	mov    0xc(%ebp),%edx
  100c73:	89 50 08             	mov    %edx,0x8(%eax)
}
  100c76:	5d                   	pop    %ebp
  100c77:	c3                   	ret    

00100c78 <vmm_alloc>:

void* vmm_alloc(struct vmm_context* context, uint16_t count) {
  100c78:	55                   	push   %ebp
  100c79:	89 e5                	mov    %esp,%ebp
  100c7b:	83 ec 38             	sub    $0x38,%esp
  100c7e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c81:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	uintptr_t ptr = context->alloc_offset;
  100c85:	8b 45 08             	mov    0x8(%ebp),%eax
  100c88:	8b 40 08             	mov    0x8(%eax),%eax
  100c8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
	while(count--) {
  100c8e:	eb 3a                	jmp    100cca <vmm_alloc+0x52>
		vmm_map_page(context, context->alloc_offset, (uintptr_t) pmm_alloc(), PTE_PRESENT | PTE_WRITE | PTE_USER);
  100c90:	e8 8f 01 00 00       	call   100e24 <pmm_alloc>
  100c95:	89 c2                	mov    %eax,%edx
  100c97:	8b 45 08             	mov    0x8(%ebp),%eax
  100c9a:	8b 40 08             	mov    0x8(%eax),%eax
  100c9d:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  100ca4:	00 
  100ca5:	89 54 24 08          	mov    %edx,0x8(%esp)
  100ca9:	89 44 24 04          	mov    %eax,0x4(%esp)
  100cad:	8b 45 08             	mov    0x8(%ebp),%eax
  100cb0:	89 04 24             	mov    %eax,(%esp)
  100cb3:	e8 02 fe ff ff       	call   100aba <vmm_map_page>
		context->alloc_offset += 0x1000;
  100cb8:	8b 45 08             	mov    0x8(%ebp),%eax
  100cbb:	8b 40 08             	mov    0x8(%eax),%eax
  100cbe:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
  100cc4:	8b 45 08             	mov    0x8(%ebp),%eax
  100cc7:	89 50 08             	mov    %edx,0x8(%eax)
}

void* vmm_alloc(struct vmm_context* context, uint16_t count) {
	uintptr_t ptr = context->alloc_offset;
	
	while(count--) {
  100cca:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%ebp)
  100ccf:	0f 95 c0             	setne  %al
  100cd2:	66 83 6d e4 01       	subw   $0x1,-0x1c(%ebp)
  100cd7:	84 c0                	test   %al,%al
  100cd9:	75 b5                	jne    100c90 <vmm_alloc+0x18>
		vmm_map_page(context, context->alloc_offset, (uintptr_t) pmm_alloc(), PTE_PRESENT | PTE_WRITE | PTE_USER);
		context->alloc_offset += 0x1000;
	}

	return (void*)(ptr);
  100cdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  100cde:	c9                   	leave  
  100cdf:	c3                   	ret    

00100ce0 <vmm_init>:
 
static struct vmm_context* kernel_context;
 
struct vmm_context* vmm_init(struct multiboot_info* mb_info)
{
  100ce0:	55                   	push   %ebp
  100ce1:	89 e5                	mov    %esp,%ebp
  100ce3:	83 ec 28             	sub    $0x28,%esp
  kernel_context = vmm_create_context();
  100ce6:	e8 49 fd ff ff       	call   100a34 <vmm_create_context>
  100ceb:	a3 20 40 10 00       	mov    %eax,0x104020

	vmm_map_kernel(kernel_context);
  100cf0:	a1 20 40 10 00       	mov    0x104020,%eax
  100cf5:	89 04 24             	mov    %eax,(%esp)
  100cf8:	e8 f0 fe ff ff       	call   100bed <vmm_map_kernel>
	
  struct multiboot_module* modules = mb_info->mi_mods_addr;
  100cfd:	8b 45 08             	mov    0x8(%ebp),%eax
  100d00:	8b 40 18             	mov    0x18(%eax),%eax
  100d03:	89 45 e8             	mov    %eax,-0x18(%ebp)
  int i;

  vmm_map_page(kernel_context, (uintptr_t) mb_info, (uintptr_t) mb_info, PTE_PRESENT | PTE_WRITE);
  100d06:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100d09:	8b 55 08             	mov    0x8(%ebp),%edx
  100d0c:	a1 20 40 10 00       	mov    0x104020,%eax
  100d11:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d18:	00 
  100d19:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100d1d:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d21:	89 04 24             	mov    %eax,(%esp)
  100d24:	e8 91 fd ff ff       	call   100aba <vmm_map_page>
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);
  100d29:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100d2c:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100d2f:	a1 20 40 10 00       	mov    0x104020,%eax
  100d34:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d3b:	00 
  100d3c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100d40:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d44:	89 04 24             	mov    %eax,(%esp)
  100d47:	e8 6e fd ff ff       	call   100aba <vmm_map_page>

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100d4c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100d53:	eb 4f                	jmp    100da4 <vmm_init+0xc4>
      addr = (uintptr_t)modules[i].start;
  100d55:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d58:	c1 e0 04             	shl    $0x4,%eax
  100d5b:	03 45 e8             	add    -0x18(%ebp),%eax
  100d5e:	8b 00                	mov    (%eax),%eax
  100d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  100d63:	eb 2a                	jmp    100d8f <vmm_init+0xaf>
 				  vmm_map_page(kernel_context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100d65:	a1 20 40 10 00       	mov    0x104020,%eax
  100d6a:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d71:	00 
  100d72:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100d75:	89 54 24 08          	mov    %edx,0x8(%esp)
  100d79:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100d7c:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d80:	89 04 24             	mov    %eax,(%esp)
  100d83:	e8 32 fd ff ff       	call   100aba <vmm_map_page>
          addr += 0x1000;
  100d88:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  100d8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d92:	c1 e0 04             	shl    $0x4,%eax
  100d95:	03 45 e8             	add    -0x18(%ebp),%eax
  100d98:	8b 40 04             	mov    0x4(%eax),%eax
  100d9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100d9e:	77 c5                	ja     100d65 <vmm_init+0x85>

  vmm_map_page(kernel_context, (uintptr_t) mb_info, (uintptr_t) mb_info, PTE_PRESENT | PTE_WRITE);
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100da0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  100da4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100da7:	8b 45 08             	mov    0x8(%ebp),%eax
  100daa:	8b 40 14             	mov    0x14(%eax),%eax
  100dad:	39 c2                	cmp    %eax,%edx
  100daf:	72 a4                	jb     100d55 <vmm_init+0x75>
 				  vmm_map_page(kernel_context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
          addr += 0x1000;
      }
  }

	vmm_set_alloc_offset(kernel_context, 0x200000);
  100db1:	a1 20 40 10 00       	mov    0x104020,%eax
  100db6:	c7 44 24 04 00 00 20 	movl   $0x200000,0x4(%esp)
  100dbd:	00 
  100dbe:	89 04 24             	mov    %eax,(%esp)
  100dc1:	e8 a4 fe ff ff       	call   100c6a <vmm_set_alloc_offset>
 
  vmm_activate_context(kernel_context);
  100dc6:	a1 20 40 10 00       	mov    0x104020,%eax
  100dcb:	89 04 24             	mov    %eax,(%esp)
  100dce:	e8 0d fe ff ff       	call   100be0 <vmm_activate_context>
  
  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  100dd3:	0f 20 c0             	mov    %cr0,%eax
  100dd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  cr0 |= (1 << 31);
  100dd9:	81 4d f4 00 00 00 80 	orl    $0x80000000,-0xc(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  100de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100de3:	0f 22 c0             	mov    %eax,%cr0
  
  use_phys_addr = 0;
  100de6:	c6 05 00 21 10 00 00 	movb   $0x0,0x102100

	return kernel_context;
  100ded:	a1 20 40 10 00       	mov    0x104020,%eax
}
  100df2:	c9                   	leave  
  100df3:	c3                   	ret    

00100df4 <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100df4:	55                   	push   %ebp
  100df5:	89 e5                	mov    %esp,%ebp
  100df7:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  100dfa:	8b 45 08             	mov    0x8(%ebp),%eax
  100dfd:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100e00:	eb 0e                	jmp    100e10 <memset+0x1c>
        *p++ = c;
  100e02:	8b 45 0c             	mov    0xc(%ebp),%eax
  100e05:	89 c2                	mov    %eax,%edx
  100e07:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e0a:	88 10                	mov    %dl,(%eax)
  100e0c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100e10:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100e14:	0f 95 c0             	setne  %al
  100e17:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  100e1b:	84 c0                	test   %al,%al
  100e1d:	75 e3                	jne    100e02 <memset+0xe>
        *p++ = c;
    }

    return buf;
  100e1f:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100e22:	c9                   	leave  
  100e23:	c3                   	ret    

00100e24 <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  100e24:	55                   	push   %ebp
  100e25:	89 e5                	mov    %esp,%ebp
  100e27:	57                   	push   %edi
  100e28:	56                   	push   %esi
  100e29:	53                   	push   %ebx
  100e2a:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100e2d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100e34:	eb 7b                	jmp    100eb1 <pmm_alloc+0x8d>
		if(allocatable[i]) {
  100e36:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e39:	8b 04 85 80 64 10 00 	mov    0x106480(,%eax,4),%eax
  100e40:	85 c0                	test   %eax,%eax
  100e42:	74 69                	je     100ead <pmm_alloc+0x89>
			int s;
			for(s = 0; s < 32; s++) {
  100e44:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100e4b:	eb 5a                	jmp    100ea7 <pmm_alloc+0x83>
				if(allocatable[i] & (1 << s)) {
  100e4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e50:	8b 14 85 80 64 10 00 	mov    0x106480(,%eax,4),%edx
  100e57:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100e5a:	bb 01 00 00 00       	mov    $0x1,%ebx
  100e5f:	89 de                	mov    %ebx,%esi
  100e61:	89 c1                	mov    %eax,%ecx
  100e63:	d3 e6                	shl    %cl,%esi
  100e65:	89 f0                	mov    %esi,%eax
  100e67:	21 d0                	and    %edx,%eax
  100e69:	85 c0                	test   %eax,%eax
  100e6b:	74 36                	je     100ea3 <pmm_alloc+0x7f>
					allocatable[i] &= ~(1 << s);
  100e6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e70:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100e73:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100e7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100e7d:	be 01 00 00 00       	mov    $0x1,%esi
  100e82:	89 f7                	mov    %esi,%edi
  100e84:	89 d1                	mov    %edx,%ecx
  100e86:	d3 e7                	shl    %cl,%edi
  100e88:	89 fa                	mov    %edi,%edx
  100e8a:	f7 d2                	not    %edx
  100e8c:	21 da                	and    %ebx,%edx
  100e8e:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  100e95:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e98:	c1 e0 05             	shl    $0x5,%eax
  100e9b:	03 45 f0             	add    -0x10(%ebp),%eax
  100e9e:	c1 e0 0c             	shl    $0xc,%eax
  100ea1:	eb 20                	jmp    100ec3 <pmm_alloc+0x9f>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100ea3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  100ea7:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  100eab:	7e a0                	jle    100e4d <pmm_alloc+0x29>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100ead:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  100eb1:	81 7d ec ff 7f 00 00 	cmpl   $0x7fff,-0x14(%ebp)
  100eb8:	0f 8e 78 ff ff ff    	jle    100e36 <pmm_alloc+0x12>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  100ebe:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100ec3:	83 c4 10             	add    $0x10,%esp
  100ec6:	5b                   	pop    %ebx
  100ec7:	5e                   	pop    %esi
  100ec8:	5f                   	pop    %edi
  100ec9:	5d                   	pop    %ebp
  100eca:	c3                   	ret    

00100ecb <pmm_free>:

void pmm_free(void* addr) {
  100ecb:	55                   	push   %ebp
  100ecc:	89 e5                	mov    %esp,%ebp
  100ece:	57                   	push   %edi
  100ecf:	56                   	push   %esi
  100ed0:	53                   	push   %ebx
  100ed1:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100ed4:	8b 45 08             	mov    0x8(%ebp),%eax
  100ed7:	c1 e8 0c             	shr    $0xc,%eax
  100eda:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uintptr_t s = ptr % 32;
  100edd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ee0:	83 e0 1f             	and    $0x1f,%eax
  100ee3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t i = ptr / 32;
  100ee6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ee9:	c1 e8 05             	shr    $0x5,%eax
  100eec:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] |= (1 << s);
  100eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100ef2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100ef5:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100efc:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100eff:	be 01 00 00 00       	mov    $0x1,%esi
  100f04:	89 f7                	mov    %esi,%edi
  100f06:	89 d1                	mov    %edx,%ecx
  100f08:	d3 e7                	shl    %cl,%edi
  100f0a:	89 fa                	mov    %edi,%edx
  100f0c:	09 da                	or     %ebx,%edx
  100f0e:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
}
  100f15:	83 c4 10             	add    $0x10,%esp
  100f18:	5b                   	pop    %ebx
  100f19:	5e                   	pop    %esi
  100f1a:	5f                   	pop    %edi
  100f1b:	5d                   	pop    %ebp
  100f1c:	c3                   	ret    

00100f1d <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100f1d:	55                   	push   %ebp
  100f1e:	89 e5                	mov    %esp,%ebp
  100f20:	57                   	push   %edi
  100f21:	56                   	push   %esi
  100f22:	53                   	push   %ebx
  100f23:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100f26:	8b 45 08             	mov    0x8(%ebp),%eax
  100f29:	c1 e8 0c             	shr    $0xc,%eax
  100f2c:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uintptr_t s = ptr % 32;
  100f2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f32:	83 e0 1f             	and    $0x1f,%eax
  100f35:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t i = ptr / 32;
  100f38:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f3b:	c1 e8 05             	shr    $0x5,%eax
  100f3e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] &= ~(1 << s);
  100f41:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f44:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100f47:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100f4e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100f51:	be 01 00 00 00       	mov    $0x1,%esi
  100f56:	89 f7                	mov    %esi,%edi
  100f58:	89 d1                	mov    %edx,%ecx
  100f5a:	d3 e7                	shl    %cl,%edi
  100f5c:	89 fa                	mov    %edi,%edx
  100f5e:	f7 d2                	not    %edx
  100f60:	21 da                	and    %ebx,%edx
  100f62:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
}
  100f69:	83 c4 10             	add    $0x10,%esp
  100f6c:	5b                   	pop    %ebx
  100f6d:	5e                   	pop    %esi
  100f6e:	5f                   	pop    %edi
  100f6f:	5d                   	pop    %ebp
  100f70:	c3                   	ret    

00100f71 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100f71:	55                   	push   %ebp
  100f72:	89 e5                	mov    %esp,%ebp
  100f74:	83 ec 38             	sub    $0x38,%esp
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  100f77:	8b 45 08             	mov    0x8(%ebp),%eax
  100f7a:	8b 40 30             	mov    0x30(%eax),%eax
  100f7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);
  100f80:	8b 45 08             	mov    0x8(%ebp),%eax
  100f83:	8b 40 30             	mov    0x30(%eax),%eax
  100f86:	89 c2                	mov    %eax,%edx
  100f88:	8b 45 08             	mov    0x8(%ebp),%eax
  100f8b:	8b 40 2c             	mov    0x2c(%eax),%eax
  100f8e:	8d 04 02             	lea    (%edx,%eax,1),%eax
  100f91:	89 45 e0             	mov    %eax,-0x20(%ebp)

	memset(allocatable, 0, sizeof(allocatable));
  100f94:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  100f9b:	00 
  100f9c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100fa3:	00 
  100fa4:	c7 04 24 80 64 10 00 	movl   $0x106480,(%esp)
  100fab:	e8 44 fe ff ff       	call   100df4 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  100fb0:	b8 80 64 12 00       	mov    $0x126480,%eax
  100fb5:	89 44 24 08          	mov    %eax,0x8(%esp)
  100fb9:	c7 44 24 04 80 64 10 	movl   $0x106480,0x4(%esp)
  100fc0:	00 
  100fc1:	c7 04 24 7d 30 10 00 	movl   $0x10307d,(%esp)
  100fc8:	e8 d4 02 00 00       	call   1012a1 <kprintf>
	 
	while (mmap < mmap_end) {
  100fcd:	eb 46                	jmp    101015 <pmm_init+0xa4>
		  if (mmap->mm_type == 1) {
  100fcf:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100fd2:	8b 40 14             	mov    0x14(%eax),%eax
  100fd5:	83 f8 01             	cmp    $0x1,%eax
  100fd8:	75 37                	jne    101011 <pmm_init+0xa0>
		      uintptr_t addr = mmap->mm_base_addr;
  100fda:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100fdd:	8b 50 08             	mov    0x8(%eax),%edx
  100fe0:	8b 40 04             	mov    0x4(%eax),%eax
  100fe3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  100fe6:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100fe9:	8b 50 10             	mov    0x10(%eax),%edx
  100fec:	8b 40 0c             	mov    0xc(%eax),%eax
  100fef:	03 45 f0             	add    -0x10(%ebp),%eax
  100ff2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 
		      while (addr < end_addr) {
  100ff5:	eb 12                	jmp    101009 <pmm_init+0x98>
		          pmm_free((void*) addr);
  100ff7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100ffa:	89 04 24             	mov    %eax,(%esp)
  100ffd:	e8 c9 fe ff ff       	call   100ecb <pmm_free>
		          addr += 0x1000;
  101002:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	while (mmap < mmap_end) {
		  if (mmap->mm_type == 1) {
		      uintptr_t addr = mmap->mm_base_addr;
		      uintptr_t end_addr = addr + mmap->mm_length;
	 
		      while (addr < end_addr) {
  101009:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10100c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10100f:	72 e6                	jb     100ff7 <pmm_init+0x86>
		          pmm_free((void*) addr);
		          addr += 0x1000;
		      }
		  }
		  mmap++;
  101011:	83 45 dc 18          	addl   $0x18,-0x24(%ebp)

	memset(allocatable, 0, sizeof(allocatable));

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
	 
	while (mmap < mmap_end) {
  101015:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101018:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  10101b:	72 b2                	jb     100fcf <pmm_init+0x5e>
	}

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10101d:	c7 45 e4 00 00 10 00 	movl   $0x100000,-0x1c(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  101024:	eb 12                	jmp    101038 <pmm_init+0xc7>
		  pmm_mark_used((void*) addr);
  101026:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101029:	89 04 24             	mov    %eax,(%esp)
  10102c:	e8 ec fe ff ff       	call   100f1d <pmm_mark_used>
		  addr += 0x1000;
  101031:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  101038:	b8 00 70 12 00       	mov    $0x127000,%eax
  10103d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  101040:	72 e4                	jb     101026 <pmm_init+0xb5>
		  pmm_mark_used((void*) addr);
		  addr += 0x1000;
	}

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  101042:	8b 45 08             	mov    0x8(%ebp),%eax
  101045:	8b 40 18             	mov    0x18(%eax),%eax
  101048:	89 45 e8             	mov    %eax,-0x18(%ebp)

  pmm_mark_used(mb_info);
  10104b:	8b 45 08             	mov    0x8(%ebp),%eax
  10104e:	89 04 24             	mov    %eax,(%esp)
  101051:	e8 c7 fe ff ff       	call   100f1d <pmm_mark_used>
  pmm_mark_used(modules);
  101056:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101059:	89 04 24             	mov    %eax,(%esp)
  10105c:	e8 bc fe ff ff       	call   100f1d <pmm_mark_used>

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  101061:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101068:	eb 37                	jmp    1010a1 <pmm_init+0x130>
      addr = (uintptr_t)modules[i].start;
  10106a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10106d:	c1 e0 04             	shl    $0x4,%eax
  101070:	03 45 e8             	add    -0x18(%ebp),%eax
  101073:	8b 00                	mov    (%eax),%eax
  101075:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  101078:	eb 12                	jmp    10108c <pmm_init+0x11b>
          pmm_mark_used((void*) addr);
  10107a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10107d:	89 04 24             	mov    %eax,(%esp)
  101080:	e8 98 fe ff ff       	call   100f1d <pmm_mark_used>
          addr += 0x1000;
  101085:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  10108c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10108f:	c1 e0 04             	shl    $0x4,%eax
  101092:	03 45 e8             	add    -0x18(%ebp),%eax
  101095:	8b 40 04             	mov    0x4(%eax),%eax
  101098:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  10109b:	77 dd                	ja     10107a <pmm_init+0x109>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  10109d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  1010a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1010a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1010a7:	8b 40 14             	mov    0x14(%eax),%eax
  1010aa:	39 c2                	cmp    %eax,%edx
  1010ac:	72 bc                	jb     10106a <pmm_init+0xf9>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  1010ae:	c9                   	leave  
  1010af:	c3                   	ret    

001010b0 <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  1010b0:	55                   	push   %ebp
  1010b1:	89 e5                	mov    %esp,%ebp
  1010b3:	83 ec 14             	sub    $0x14,%esp
  1010b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1010b9:	88 45 ec             	mov    %al,-0x14(%ebp)
    if ((c == '\n') || (x > 79)) {
  1010bc:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  1010c0:	74 0a                	je     1010cc <kputc+0x1c>
  1010c2:	a1 24 40 10 00       	mov    0x104024,%eax
  1010c7:	83 f8 4f             	cmp    $0x4f,%eax
  1010ca:	7e 17                	jle    1010e3 <kputc+0x33>
        x = 0;
  1010cc:	c7 05 24 40 10 00 00 	movl   $0x0,0x104024
  1010d3:	00 00 00 
        y++;
  1010d6:	a1 28 40 10 00       	mov    0x104028,%eax
  1010db:	83 c0 01             	add    $0x1,%eax
  1010de:	a3 28 40 10 00       	mov    %eax,0x104028
    }

    if (c == '\n') {
  1010e3:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  1010e7:	0f 84 dd 00 00 00    	je     1011ca <kputc+0x11a>
        return;
    }

    if (y > 24) {
  1010ed:	a1 28 40 10 00       	mov    0x104028,%eax
  1010f2:	83 f8 18             	cmp    $0x18,%eax
  1010f5:	7e 61                	jle    101158 <kputc+0xa8>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1010f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1010fe:	eb 24                	jmp    101124 <kputc+0x74>
            video[i] = video[i + 160];
  101100:	8b 15 04 21 10 00    	mov    0x102104,%edx
  101106:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101109:	01 c2                	add    %eax,%edx
  10110b:	a1 04 21 10 00       	mov    0x102104,%eax
  101110:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101113:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  101119:	01 c8                	add    %ecx,%eax
  10111b:	0f b6 00             	movzbl (%eax),%eax
  10111e:	88 02                	mov    %al,(%edx)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  101120:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  101124:	81 7d fc ff 0e 00 00 	cmpl   $0xeff,-0x4(%ebp)
  10112b:	7e d3                	jle    101100 <kputc+0x50>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10112d:	eb 13                	jmp    101142 <kputc+0x92>
            video[i] = 0;
  10112f:	8b 15 04 21 10 00    	mov    0x102104,%edx
  101135:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101138:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10113b:	c6 00 00             	movb   $0x0,(%eax)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10113e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  101142:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  101149:	7e e4                	jle    10112f <kputc+0x7f>
            video[i] = 0;
        }
        y--;
  10114b:	a1 28 40 10 00       	mov    0x104028,%eax
  101150:	83 e8 01             	sub    $0x1,%eax
  101153:	a3 28 40 10 00       	mov    %eax,0x104028
    }

    video[2 * (y * 80 + x)] = c;
  101158:	8b 0d 04 21 10 00    	mov    0x102104,%ecx
  10115e:	8b 15 28 40 10 00    	mov    0x104028,%edx
  101164:	89 d0                	mov    %edx,%eax
  101166:	c1 e0 02             	shl    $0x2,%eax
  101169:	01 d0                	add    %edx,%eax
  10116b:	c1 e0 04             	shl    $0x4,%eax
  10116e:	89 c2                	mov    %eax,%edx
  101170:	a1 24 40 10 00       	mov    0x104024,%eax
  101175:	8d 04 02             	lea    (%edx,%eax,1),%eax
  101178:	01 c0                	add    %eax,%eax
  10117a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  10117d:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  101181:	88 02                	mov    %al,(%edx)
    video[2 * (y * 80 + x) + 1] = 0x07;
  101183:	8b 0d 04 21 10 00    	mov    0x102104,%ecx
  101189:	8b 15 28 40 10 00    	mov    0x104028,%edx
  10118f:	89 d0                	mov    %edx,%eax
  101191:	c1 e0 02             	shl    $0x2,%eax
  101194:	01 d0                	add    %edx,%eax
  101196:	c1 e0 04             	shl    $0x4,%eax
  101199:	89 c2                	mov    %eax,%edx
  10119b:	a1 24 40 10 00       	mov    0x104024,%eax
  1011a0:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1011a3:	01 c0                	add    %eax,%eax
  1011a5:	83 c0 01             	add    $0x1,%eax
  1011a8:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  1011ab:	c6 00 07             	movb   $0x7,(%eax)

    x++;
  1011ae:	a1 24 40 10 00       	mov    0x104024,%eax
  1011b3:	83 c0 01             	add    $0x1,%eax
  1011b6:	a3 24 40 10 00       	mov    %eax,0x104024
    kprintf_res++;
  1011bb:	a1 2c 40 10 00       	mov    0x10402c,%eax
  1011c0:	83 c0 01             	add    $0x1,%eax
  1011c3:	a3 2c 40 10 00       	mov    %eax,0x10402c
  1011c8:	eb 01                	jmp    1011cb <kputc+0x11b>
        x = 0;
        y++;
    }

    if (c == '\n') {
        return;
  1011ca:	90                   	nop
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = 0x07;

    x++;
    kprintf_res++;
}
  1011cb:	c9                   	leave  
  1011cc:	c3                   	ret    

001011cd <kputs>:

static void kputs(const char* s)
{
  1011cd:	55                   	push   %ebp
  1011ce:	89 e5                	mov    %esp,%ebp
  1011d0:	83 ec 04             	sub    $0x4,%esp
    while (*s) {
  1011d3:	eb 15                	jmp    1011ea <kputs+0x1d>
        kputc(*s++);
  1011d5:	8b 45 08             	mov    0x8(%ebp),%eax
  1011d8:	0f b6 00             	movzbl (%eax),%eax
  1011db:	0f be c0             	movsbl %al,%eax
  1011de:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  1011e2:	89 04 24             	mov    %eax,(%esp)
  1011e5:	e8 c6 fe ff ff       	call   1010b0 <kputc>
    kprintf_res++;
}

static void kputs(const char* s)
{
    while (*s) {
  1011ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1011ed:	0f b6 00             	movzbl (%eax),%eax
  1011f0:	84 c0                	test   %al,%al
  1011f2:	75 e1                	jne    1011d5 <kputs+0x8>
        kputc(*s++);
    }
}
  1011f4:	c9                   	leave  
  1011f5:	c3                   	ret    

001011f6 <kputn>:

static void kputn(unsigned long x, int base)
{
  1011f6:	55                   	push   %ebp
  1011f7:	89 e5                	mov    %esp,%ebp
  1011f9:	83 ec 58             	sub    $0x58,%esp
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1011fc:	c7 45 f8 94 30 10 00 	movl   $0x103094,-0x8(%ebp)
    char* p;

    if (base > 36) {
  101203:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
  101207:	7f 54                	jg     10125d <kputn+0x67>
        return;
    }

    p = buf + 64;
  101209:	8d 45 b7             	lea    -0x49(%ebp),%eax
  10120c:	83 c0 40             	add    $0x40,%eax
  10120f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *p = '\0';
  101212:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101215:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  101218:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  10121c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10121f:	8b 45 08             	mov    0x8(%ebp),%eax
  101222:	ba 00 00 00 00       	mov    $0x0,%edx
  101227:	f7 f1                	div    %ecx
  101229:	89 d0                	mov    %edx,%eax
  10122b:	03 45 f8             	add    -0x8(%ebp),%eax
  10122e:	0f b6 10             	movzbl (%eax),%edx
  101231:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101234:	88 10                	mov    %dl,(%eax)
        x /= base;
  101236:	8b 45 0c             	mov    0xc(%ebp),%eax
  101239:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10123c:	8b 45 08             	mov    0x8(%ebp),%eax
  10123f:	ba 00 00 00 00       	mov    $0x0,%edx
  101244:	f7 75 ac             	divl   -0x54(%ebp)
  101247:	89 45 08             	mov    %eax,0x8(%ebp)
    } while (x);
  10124a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10124e:	75 c8                	jne    101218 <kputn+0x22>
    kputs(p);
  101250:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101253:	89 04 24             	mov    %eax,(%esp)
  101256:	e8 72 ff ff ff       	call   1011cd <kputs>
  10125b:	eb 01                	jmp    10125e <kputn+0x68>
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
        return;
  10125d:	90                   	nop
    do {
        *--p = digits[x % base];
        x /= base;
    } while (x);
    kputs(p);
}
  10125e:	c9                   	leave  
  10125f:	c3                   	ret    

00101260 <clrscr>:

void clrscr(void)
{
  101260:	55                   	push   %ebp
  101261:	89 e5                	mov    %esp,%ebp
  101263:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  101266:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10126d:	eb 13                	jmp    101282 <clrscr+0x22>
        video[i] = 0;
  10126f:	8b 15 04 21 10 00    	mov    0x102104,%edx
  101275:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101278:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10127b:	c6 00 00             	movb   $0x0,(%eax)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  10127e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  101282:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  101289:	7e e4                	jle    10126f <clrscr+0xf>
        video[i] = 0;
    }

    x = y = 0;
  10128b:	c7 05 28 40 10 00 00 	movl   $0x0,0x104028
  101292:	00 00 00 
  101295:	a1 28 40 10 00       	mov    0x104028,%eax
  10129a:	a3 24 40 10 00       	mov    %eax,0x104024
}
  10129f:	c9                   	leave  
  1012a0:	c3                   	ret    

001012a1 <kprintf>:

int kprintf(const char* fmt, ...)
{
  1012a1:	55                   	push   %ebp
  1012a2:	89 e5                	mov    %esp,%ebp
  1012a4:	83 ec 18             	sub    $0x18,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  1012a7:	8d 45 0c             	lea    0xc(%ebp),%eax
  1012aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf_res = 0;
  1012ad:	c7 05 2c 40 10 00 00 	movl   $0x0,0x10402c
  1012b4:	00 00 00 
  while (*fmt) {
  1012b7:	e9 2d 01 00 00       	jmp    1013e9 <kprintf+0x148>
    if (*fmt == '%') {
  1012bc:	8b 45 08             	mov    0x8(%ebp),%eax
  1012bf:	0f b6 00             	movzbl (%eax),%eax
  1012c2:	3c 25                	cmp    $0x25,%al
  1012c4:	0f 85 0a 01 00 00    	jne    1013d4 <kprintf+0x133>
      fmt++;
  1012ca:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
  1012ce:	8b 45 08             	mov    0x8(%ebp),%eax
  1012d1:	0f b6 00             	movzbl (%eax),%eax
  1012d4:	0f be c0             	movsbl %al,%eax
  1012d7:	83 f8 70             	cmp    $0x70,%eax
  1012da:	0f 84 87 00 00 00    	je     101367 <kprintf+0xc6>
  1012e0:	83 f8 70             	cmp    $0x70,%eax
  1012e3:	7f 2e                	jg     101313 <kprintf+0x72>
  1012e5:	83 f8 63             	cmp    $0x63,%eax
  1012e8:	0f 84 9c 00 00 00    	je     10138a <kprintf+0xe9>
  1012ee:	83 f8 63             	cmp    $0x63,%eax
  1012f1:	7f 16                	jg     101309 <kprintf+0x68>
  1012f3:	85 c0                	test   %eax,%eax
  1012f5:	0f 84 fe 00 00 00    	je     1013f9 <kprintf+0x158>
  1012fb:	83 f8 25             	cmp    $0x25,%eax
  1012fe:	0f 84 a2 00 00 00    	je     1013a6 <kprintf+0x105>
  101304:	e9 ac 00 00 00       	jmp    1013b5 <kprintf+0x114>
  101309:	83 f8 64             	cmp    $0x64,%eax
  10130c:	74 36                	je     101344 <kprintf+0xa3>
  10130e:	e9 a2 00 00 00       	jmp    1013b5 <kprintf+0x114>
  101313:	83 f8 75             	cmp    $0x75,%eax
  101316:	74 2c                	je     101344 <kprintf+0xa3>
  101318:	83 f8 78             	cmp    $0x78,%eax
  10131b:	74 4a                	je     101367 <kprintf+0xc6>
  10131d:	83 f8 73             	cmp    $0x73,%eax
  101320:	0f 85 8f 00 00 00    	jne    1013b5 <kprintf+0x114>
        case 's':
          s = va_arg(ap, char*);
  101326:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101329:	8d 50 04             	lea    0x4(%eax),%edx
  10132c:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10132f:	8b 00                	mov    (%eax),%eax
  101331:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  101334:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101337:	89 04 24             	mov    %eax,(%esp)
  10133a:	e8 8e fe ff ff       	call   1011cd <kputs>
          break;
  10133f:	e9 a1 00 00 00       	jmp    1013e5 <kprintf+0x144>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  101344:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101347:	8d 50 04             	lea    0x4(%eax),%edx
  10134a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10134d:	8b 00                	mov    (%eax),%eax
  10134f:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 10);
  101352:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  101359:	00 
  10135a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10135d:	89 04 24             	mov    %eax,(%esp)
  101360:	e8 91 fe ff ff       	call   1011f6 <kputn>
          break;
  101365:	eb 7e                	jmp    1013e5 <kprintf+0x144>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  101367:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10136a:	8d 50 04             	lea    0x4(%eax),%edx
  10136d:	89 55 f0             	mov    %edx,-0x10(%ebp)
  101370:	8b 00                	mov    (%eax),%eax
  101372:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 16);
  101375:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  10137c:	00 
  10137d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101380:	89 04 24             	mov    %eax,(%esp)
  101383:	e8 6e fe ff ff       	call   1011f6 <kputn>
          break;
  101388:	eb 5b                	jmp    1013e5 <kprintf+0x144>
				case 'c':
					c = va_arg(ap, int);
  10138a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10138d:	8d 50 04             	lea    0x4(%eax),%edx
  101390:	89 55 f0             	mov    %edx,-0x10(%ebp)
  101393:	8b 00                	mov    (%eax),%eax
  101395:	88 45 ff             	mov    %al,-0x1(%ebp)
					kputc(c);
  101398:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10139c:	89 04 24             	mov    %eax,(%esp)
  10139f:	e8 0c fd ff ff       	call   1010b0 <kputc>
					break;
  1013a4:	eb 3f                	jmp    1013e5 <kprintf+0x144>
        case '%':
          kputc('%');
  1013a6:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1013ad:	e8 fe fc ff ff       	call   1010b0 <kputc>
          break;
  1013b2:	90                   	nop
  1013b3:	eb 30                	jmp    1013e5 <kprintf+0x144>
        case '\0':
          goto out;
        default:
          kputc('%');
  1013b5:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1013bc:	e8 ef fc ff ff       	call   1010b0 <kputc>
          kputc(*fmt);
  1013c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1013c4:	0f b6 00             	movzbl (%eax),%eax
  1013c7:	0f be c0             	movsbl %al,%eax
  1013ca:	89 04 24             	mov    %eax,(%esp)
  1013cd:	e8 de fc ff ff       	call   1010b0 <kputc>
  1013d2:	eb 11                	jmp    1013e5 <kprintf+0x144>
          break;
      }
    } else {
      kputc(*fmt);
  1013d4:	8b 45 08             	mov    0x8(%ebp),%eax
  1013d7:	0f b6 00             	movzbl (%eax),%eax
  1013da:	0f be c0             	movsbl %al,%eax
  1013dd:	89 04 24             	mov    %eax,(%esp)
  1013e0:	e8 cb fc ff ff       	call   1010b0 <kputc>
    }

    fmt++;
  1013e5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;

  va_start(ap, fmt);
  kprintf_res = 0;
  while (*fmt) {
  1013e9:	8b 45 08             	mov    0x8(%ebp),%eax
  1013ec:	0f b6 00             	movzbl (%eax),%eax
  1013ef:	84 c0                	test   %al,%al
  1013f1:	0f 85 c5 fe ff ff    	jne    1012bc <kprintf+0x1b>
  1013f7:	eb 01                	jmp    1013fa <kprintf+0x159>
					break;
        case '%':
          kputc('%');
          break;
        case '\0':
          goto out;
  1013f9:	90                   	nop
  }

out:
  va_end(ap);

  return kprintf_res;
  1013fa:	a1 2c 40 10 00       	mov    0x10402c,%eax
}
  1013ff:	c9                   	leave  
  101400:	c3                   	ret    
  101401:	00 00                	add    %al,(%eax)
	...

00101404 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  101404:	55                   	push   %ebp
  101405:	89 e5                	mov    %esp,%ebp
  101407:	83 ec 08             	sub    $0x8,%esp
  10140a:	8b 55 08             	mov    0x8(%ebp),%edx
  10140d:	8b 45 0c             	mov    0xc(%ebp),%eax
  101410:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  101414:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101417:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  10141b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  10141f:	ee                   	out    %al,(%dx)
}
  101420:	c9                   	leave  
  101421:	c3                   	ret    

00101422 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101422:	55                   	push   %ebp
  101423:	89 e5                	mov    %esp,%ebp
  101425:	57                   	push   %edi
  101426:	56                   	push   %esi
  101427:	53                   	push   %ebx
  101428:	83 ec 34             	sub    $0x34,%esp
  10142b:	8b 55 10             	mov    0x10(%ebp),%edx
  10142e:	8b 45 14             	mov    0x14(%ebp),%eax
  101431:	66 89 55 dc          	mov    %dx,-0x24(%ebp)
  101435:	88 45 d8             	mov    %al,-0x28(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101438:	8b 45 0c             	mov    0xc(%ebp),%eax
  10143b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	idt[i] = handler & 0xffffLL;
  10143e:	8b 75 08             	mov    0x8(%ebp),%esi
  101441:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101444:	ba 00 00 00 00       	mov    $0x0,%edx
  101449:	0f b7 c8             	movzwl %ax,%ecx
  10144c:	89 d3                	mov    %edx,%ebx
  10144e:	83 e3 00             	and    $0x0,%ebx
  101451:	89 0c f5 40 40 10 00 	mov    %ecx,0x104040(,%esi,8)
  101458:	89 1c f5 44 40 10 00 	mov    %ebx,0x104044(,%esi,8)
	idt[i] |= (selector & 0xffffLL) << 16;
  10145f:	8b 75 08             	mov    0x8(%ebp),%esi
  101462:	8b 45 08             	mov    0x8(%ebp),%eax
  101465:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  10146c:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  101473:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
  101477:	ba 00 00 00 00       	mov    $0x0,%edx
  10147c:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  101480:	c1 e0 10             	shl    $0x10,%eax
  101483:	89 cf                	mov    %ecx,%edi
  101485:	09 c7                	or     %eax,%edi
  101487:	89 7d c0             	mov    %edi,-0x40(%ebp)
  10148a:	89 df                	mov    %ebx,%edi
  10148c:	09 d7                	or     %edx,%edi
  10148e:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  101491:	8b 45 c0             	mov    -0x40(%ebp),%eax
  101494:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  101497:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  10149e:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  1014a5:	8b 75 08             	mov    0x8(%ebp),%esi
  1014a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1014ab:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  1014b2:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  1014b9:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
  1014bd:	ba 00 00 00 00       	mov    $0x0,%edx
  1014c2:	89 c2                	mov    %eax,%edx
  1014c4:	b8 00 00 00 00       	mov    $0x0,%eax
  1014c9:	c1 e2 08             	shl    $0x8,%edx
  1014cc:	89 cf                	mov    %ecx,%edi
  1014ce:	09 c7                	or     %eax,%edi
  1014d0:	89 7d c8             	mov    %edi,-0x38(%ebp)
  1014d3:	89 df                	mov    %ebx,%edi
  1014d5:	09 d7                	or     %edx,%edi
  1014d7:	89 7d cc             	mov    %edi,-0x34(%ebp)
  1014da:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1014dd:	8b 55 cc             	mov    -0x34(%ebp),%edx
  1014e0:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  1014e7:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  1014ee:	8b 75 08             	mov    0x8(%ebp),%esi
  1014f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1014f4:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  1014fb:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  101502:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101505:	c1 e8 10             	shr    $0x10,%eax
  101508:	ba 00 00 00 00       	mov    $0x0,%edx
  10150d:	89 c2                	mov    %eax,%edx
  10150f:	b8 00 00 00 00       	mov    $0x0,%eax
  101514:	c1 e2 10             	shl    $0x10,%edx
  101517:	89 cf                	mov    %ecx,%edi
  101519:	09 c7                	or     %eax,%edi
  10151b:	89 7d d0             	mov    %edi,-0x30(%ebp)
  10151e:	89 df                	mov    %ebx,%edi
  101520:	09 d7                	or     %edx,%edi
  101522:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  101525:	8b 45 d0             	mov    -0x30(%ebp),%eax
  101528:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  10152b:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  101532:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
}
  101539:	83 c4 34             	add    $0x34,%esp
  10153c:	5b                   	pop    %ebx
  10153d:	5e                   	pop    %esi
  10153e:	5f                   	pop    %edi
  10153f:	5d                   	pop    %ebp
  101540:	c3                   	ret    

00101541 <init_idt>:

void init_idt() {
  101541:	55                   	push   %ebp
  101542:	89 e5                	mov    %esp,%ebp
  101544:	83 ec 28             	sub    $0x28,%esp
		  unsigned short int limit;
		  void* pointer;
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};
  101547:	66 c7 45 ee ff 01    	movw   $0x1ff,-0x12(%ebp)
  10154d:	c7 45 f0 40 40 10 00 	movl   $0x104040,-0x10(%ebp)

	int i = 0;
  101554:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  10155b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101562:	eb 12                	jmp    101576 <init_idt+0x35>
		handler_set[i] = 0;
  101564:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101567:	c7 04 85 40 43 10 00 	movl   $0x0,0x104340(,%eax,4)
  10156e:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  101572:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  101576:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
  10157a:	7e e8                	jle    101564 <init_idt+0x23>
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  10157c:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  101583:	00 
  101584:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10158b:	e8 74 fe ff ff       	call   101404 <outb>
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  101590:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101597:	00 
  101598:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10159f:	e8 60 fe ff ff       	call   101404 <outb>
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  1015a4:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1015ab:	00 
  1015ac:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1015b3:	e8 4c fe ff ff       	call   101404 <outb>
  outb(0x21, 0x01); // ICW 4
  1015b8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1015bf:	00 
  1015c0:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1015c7:	e8 38 fe ff ff       	call   101404 <outb>

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  1015cc:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1015d3:	00 
  1015d4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1015db:	e8 24 fe ff ff       	call   101404 <outb>
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  1015e0:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  1015e7:	00 
  1015e8:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1015ef:	e8 10 fe ff ff       	call   101404 <outb>
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  1015f4:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1015fb:	00 
  1015fc:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101603:	e8 fc fd ff ff       	call   101404 <outb>
  outb(0xa1, 0x01); // ICW 4
  101608:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10160f:	00 
  101610:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101617:	e8 e8 fd ff ff       	call   101404 <outb>

  outb(0x20, 0x0);
  10161c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101623:	00 
  101624:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10162b:	e8 d4 fd ff ff       	call   101404 <outb>
  outb(0xa0, 0x0);
  101630:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101637:	00 
  101638:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10163f:	e8 c0 fd ff ff       	call   101404 <outb>

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101644:	b8 f8 02 10 00       	mov    $0x1002f8,%eax
  101649:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101650:	00 
  101651:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101658:	00 
  101659:	89 44 24 04          	mov    %eax,0x4(%esp)
  10165d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101664:	e8 b9 fd ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101669:	b8 01 03 10 00       	mov    $0x100301,%eax
  10166e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101675:	00 
  101676:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10167d:	00 
  10167e:	89 44 24 04          	mov    %eax,0x4(%esp)
  101682:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101689:	e8 94 fd ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10168e:	b8 0a 03 10 00       	mov    $0x10030a,%eax
  101693:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10169a:	00 
  10169b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016a2:	00 
  1016a3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016a7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1016ae:	e8 6f fd ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016b3:	b8 13 03 10 00       	mov    $0x100313,%eax
  1016b8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016bf:	00 
  1016c0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016c7:	00 
  1016c8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016cc:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1016d3:	e8 4a fd ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016d8:	b8 1c 03 10 00       	mov    $0x10031c,%eax
  1016dd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016e4:	00 
  1016e5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016ec:	00 
  1016ed:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016f1:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1016f8:	e8 25 fd ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016fd:	b8 25 03 10 00       	mov    $0x100325,%eax
  101702:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101709:	00 
  10170a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101711:	00 
  101712:	89 44 24 04          	mov    %eax,0x4(%esp)
  101716:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  10171d:	e8 00 fd ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101722:	b8 2e 03 10 00       	mov    $0x10032e,%eax
  101727:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10172e:	00 
  10172f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101736:	00 
  101737:	89 44 24 04          	mov    %eax,0x4(%esp)
  10173b:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  101742:	e8 db fc ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101747:	b8 37 03 10 00       	mov    $0x100337,%eax
  10174c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101753:	00 
  101754:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10175b:	00 
  10175c:	89 44 24 04          	mov    %eax,0x4(%esp)
  101760:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101767:	e8 b6 fc ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10176c:	b8 40 03 10 00       	mov    $0x100340,%eax
  101771:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101778:	00 
  101779:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101780:	00 
  101781:	89 44 24 04          	mov    %eax,0x4(%esp)
  101785:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  10178c:	e8 91 fc ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101791:	b8 47 03 10 00       	mov    $0x100347,%eax
  101796:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10179d:	00 
  10179e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017a5:	00 
  1017a6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017aa:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  1017b1:	e8 6c fc ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017b6:	b8 50 03 10 00       	mov    $0x100350,%eax
  1017bb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017c2:	00 
  1017c3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017ca:	00 
  1017cb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1017d6:	e8 47 fc ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017db:	b8 57 03 10 00       	mov    $0x100357,%eax
  1017e0:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017e7:	00 
  1017e8:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017ef:	00 
  1017f0:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017f4:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  1017fb:	e8 22 fc ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101800:	b8 5e 03 10 00       	mov    $0x10035e,%eax
  101805:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10180c:	00 
  10180d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101814:	00 
  101815:	89 44 24 04          	mov    %eax,0x4(%esp)
  101819:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  101820:	e8 fd fb ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101825:	b8 65 03 10 00       	mov    $0x100365,%eax
  10182a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101831:	00 
  101832:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101839:	00 
  10183a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10183e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101845:	e8 d8 fb ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10184a:	b8 6c 03 10 00       	mov    $0x10036c,%eax
  10184f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101856:	00 
  101857:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10185e:	00 
  10185f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101863:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  10186a:	e8 b3 fb ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10186f:	b8 70 03 10 00       	mov    $0x100370,%eax
  101874:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10187b:	00 
  10187c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101883:	00 
  101884:	89 44 24 04          	mov    %eax,0x4(%esp)
  101888:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  10188f:	e8 8e fb ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101894:	b8 76 03 10 00       	mov    $0x100376,%eax
  101899:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018a0:	00 
  1018a1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018a8:	00 
  1018a9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018ad:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1018b4:	e8 69 fb ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018b9:	b8 7c 03 10 00       	mov    $0x10037c,%eax
  1018be:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018c5:	00 
  1018c6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018cd:	00 
  1018ce:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018d2:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1018d9:	e8 44 fb ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018de:	b8 80 03 10 00       	mov    $0x100380,%eax
  1018e3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018ea:	00 
  1018eb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018f2:	00 
  1018f3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018f7:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1018fe:	e8 1f fb ff ff       	call   101422 <idt_set_entry>

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101903:	b8 86 03 10 00       	mov    $0x100386,%eax
  101908:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10190f:	00 
  101910:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101917:	00 
  101918:	89 44 24 04          	mov    %eax,0x4(%esp)
  10191c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101923:	e8 fa fa ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101928:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  10192d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101934:	00 
  101935:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10193c:	00 
  10193d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101941:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101948:	e8 d5 fa ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(34, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10194d:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101952:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101959:	00 
  10195a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101961:	00 
  101962:	89 44 24 04          	mov    %eax,0x4(%esp)
  101966:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  10196d:	e8 b0 fa ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(35, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101972:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101977:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10197e:	00 
  10197f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101986:	00 
  101987:	89 44 24 04          	mov    %eax,0x4(%esp)
  10198b:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101992:	e8 8b fa ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(36, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101997:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  10199c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019a3:	00 
  1019a4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019ab:	00 
  1019ac:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019b0:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  1019b7:	e8 66 fa ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(37, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019bc:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019c1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019c8:	00 
  1019c9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019d0:	00 
  1019d1:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019d5:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1019dc:	e8 41 fa ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(38, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019e1:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019e6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019ed:	00 
  1019ee:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019f5:	00 
  1019f6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019fa:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101a01:	e8 1c fa ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(39, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a06:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a0b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a12:	00 
  101a13:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a1a:	00 
  101a1b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a1f:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101a26:	e8 f7 f9 ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(40, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a2b:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a30:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a37:	00 
  101a38:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a3f:	00 
  101a40:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a44:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101a4b:	e8 d2 f9 ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(41, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a50:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a55:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a5c:	00 
  101a5d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a64:	00 
  101a65:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a69:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101a70:	e8 ad f9 ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(42, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a75:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a7a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a81:	00 
  101a82:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a89:	00 
  101a8a:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a8e:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101a95:	e8 88 f9 ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(43, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a9a:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a9f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101aa6:	00 
  101aa7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101aae:	00 
  101aaf:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ab3:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101aba:	e8 63 f9 ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(44, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101abf:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101ac4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101acb:	00 
  101acc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ad3:	00 
  101ad4:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ad8:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101adf:	e8 3e f9 ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(45, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ae4:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101ae9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101af0:	00 
  101af1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101af8:	00 
  101af9:	89 44 24 04          	mov    %eax,0x4(%esp)
  101afd:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101b04:	e8 19 f9 ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(46, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b09:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b0e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b15:	00 
  101b16:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b1d:	00 
  101b1e:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b22:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101b29:	e8 f4 f8 ff ff       	call   101422 <idt_set_entry>
  idt_set_entry(47, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b2e:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b33:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b3a:	00 
  101b3b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b42:	00 
  101b43:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b47:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101b4e:	e8 cf f8 ff ff       	call   101422 <idt_set_entry>

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101b53:	b8 e6 03 10 00       	mov    $0x1003e6,%eax
  101b58:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101b5f:	00 
  101b60:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b67:	00 
  101b68:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b6c:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101b73:	e8 aa f8 ff ff       	call   101422 <idt_set_entry>

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101b78:	b8 20 21 10 00       	mov    $0x102120,%eax
  101b7d:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101b84:	00 
  101b85:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101b8c:	00 
  101b8d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b91:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101b98:	e8 9d e4 ff ff       	call   10003a <set_gdt_entry>

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101b9d:	b8 28 00 00 00       	mov    $0x28,%eax
  101ba2:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101ba5:	0f 01 5d ee          	lidtl  -0x12(%ebp)
	asm volatile("sti");
  101ba9:	fb                   	sti    
}
  101baa:	c9                   	leave  
  101bab:	c3                   	ret    

00101bac <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  101bac:	55                   	push   %ebp
  101bad:	89 e5                	mov    %esp,%ebp
	handlers[i] = fn;
  101baf:	8b 45 08             	mov    0x8(%ebp),%eax
  101bb2:	8b 55 0c             	mov    0xc(%ebp),%edx
  101bb5:	89 14 85 40 42 10 00 	mov    %edx,0x104240(,%eax,4)
	handler_set[i] = 1;
  101bbc:	8b 45 08             	mov    0x8(%ebp),%eax
  101bbf:	c7 04 85 40 43 10 00 	movl   $0x1,0x104340(,%eax,4)
  101bc6:	01 00 00 00 
}
  101bca:	5d                   	pop    %ebp
  101bcb:	c3                   	ret    

00101bcc <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  101bcc:	55                   	push   %ebp
  101bcd:	89 e5                	mov    %esp,%ebp
  101bcf:	53                   	push   %ebx
  101bd0:	83 ec 34             	sub    $0x34,%esp
  struct cpu_state* new_cpu = cpu;
  101bd3:	8b 45 08             	mov    0x8(%ebp),%eax
  101bd6:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (cpu->intr <= 0x1f) {
  101bd9:	8b 45 08             	mov    0x8(%ebp),%eax
  101bdc:	8b 40 1c             	mov    0x1c(%eax),%eax
  101bdf:	83 f8 1f             	cmp    $0x1f,%eax
  101be2:	0f 87 df 00 00 00    	ja     101cc7 <handle_interrupt+0xfb>
    kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  101be8:	8b 45 08             	mov    0x8(%ebp),%eax
  101beb:	8b 50 20             	mov    0x20(%eax),%edx
  101bee:	8b 45 08             	mov    0x8(%ebp),%eax
  101bf1:	8b 40 1c             	mov    0x1c(%eax),%eax
  101bf4:	89 54 24 08          	mov    %edx,0x8(%esp)
  101bf8:	89 44 24 04          	mov    %eax,0x4(%esp)
  101bfc:	c7 04 24 bc 30 10 00 	movl   $0x1030bc,(%esp)
  101c03:	e8 99 f6 ff ff       	call   1012a1 <kprintf>

		kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  101c08:	8b 45 08             	mov    0x8(%ebp),%eax
  101c0b:	8b 58 0c             	mov    0xc(%eax),%ebx
  101c0e:	8b 45 08             	mov    0x8(%ebp),%eax
  101c11:	8b 48 08             	mov    0x8(%eax),%ecx
  101c14:	8b 45 08             	mov    0x8(%ebp),%eax
  101c17:	8b 50 04             	mov    0x4(%eax),%edx
  101c1a:	8b 45 08             	mov    0x8(%ebp),%eax
  101c1d:	8b 00                	mov    (%eax),%eax
  101c1f:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101c23:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101c27:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c2b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c2f:	c7 04 24 e0 30 10 00 	movl   $0x1030e0,(%esp)
  101c36:	e8 66 f6 ff ff       	call   1012a1 <kprintf>
		kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  101c3b:	8b 45 08             	mov    0x8(%ebp),%eax
  101c3e:	8b 58 24             	mov    0x24(%eax),%ebx
  101c41:	8b 45 08             	mov    0x8(%ebp),%eax
  101c44:	8b 48 18             	mov    0x18(%eax),%ecx
  101c47:	8b 45 08             	mov    0x8(%ebp),%eax
  101c4a:	8b 50 14             	mov    0x14(%eax),%edx
  101c4d:	8b 45 08             	mov    0x8(%ebp),%eax
  101c50:	8b 40 10             	mov    0x10(%eax),%eax
  101c53:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101c57:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101c5b:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c5f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c63:	c7 04 24 04 31 10 00 	movl   $0x103104,(%esp)
  101c6a:	e8 32 f6 ff ff       	call   1012a1 <kprintf>
		kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  101c6f:	8b 45 08             	mov    0x8(%ebp),%eax
  101c72:	8b 58 34             	mov    0x34(%eax),%ebx
  101c75:	8b 45 08             	mov    0x8(%ebp),%eax
  101c78:	8b 48 30             	mov    0x30(%eax),%ecx
  101c7b:	8b 45 08             	mov    0x8(%ebp),%eax
  101c7e:	8b 50 2c             	mov    0x2c(%eax),%edx
  101c81:	8b 45 08             	mov    0x8(%ebp),%eax
  101c84:	8b 40 28             	mov    0x28(%eax),%eax
  101c87:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101c8b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101c8f:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c93:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c97:	c7 04 24 28 31 10 00 	movl   $0x103128,(%esp)
  101c9e:	e8 fe f5 ff ff       	call   1012a1 <kprintf>

		uint32_t cr2 = 0;
  101ca3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		asm volatile("mov %%cr2, %0" : "=r" (cr2));
  101caa:	0f 20 d0             	mov    %cr2,%eax
  101cad:	89 45 f4             	mov    %eax,-0xc(%ebp)

		kprintf("CR2: %x", cr2);
  101cb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101cb3:	89 44 24 04          	mov    %eax,0x4(%esp)
  101cb7:	c7 04 24 4a 31 10 00 	movl   $0x10314a,(%esp)
  101cbe:	e8 de f5 ff ff       	call   1012a1 <kprintf>
	
    while(1) {
      asm volatile("cli; hlt");
  101cc3:	fa                   	cli    
  101cc4:	f4                   	hlt    
    }
  101cc5:	eb fc                	jmp    101cc3 <handle_interrupt+0xf7>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101cc7:	8b 45 08             	mov    0x8(%ebp),%eax
  101cca:	8b 40 1c             	mov    0x1c(%eax),%eax
  101ccd:	83 f8 1f             	cmp    $0x1f,%eax
  101cd0:	0f 86 84 00 00 00    	jbe    101d5a <handle_interrupt+0x18e>
  101cd6:	8b 45 08             	mov    0x8(%ebp),%eax
  101cd9:	8b 40 1c             	mov    0x1c(%eax),%eax
  101cdc:	83 f8 2f             	cmp    $0x2f,%eax
  101cdf:	77 79                	ja     101d5a <handle_interrupt+0x18e>
    if (cpu->intr >= 0x28) {
  101ce1:	8b 45 08             	mov    0x8(%ebp),%eax
  101ce4:	8b 40 1c             	mov    0x1c(%eax),%eax
  101ce7:	83 f8 27             	cmp    $0x27,%eax
  101cea:	76 14                	jbe    101d00 <handle_interrupt+0x134>
      outb(0xa0, 0x20);
  101cec:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101cf3:	00 
  101cf4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101cfb:	e8 04 f7 ff ff       	call   101404 <outb>
    }
    if (cpu->intr == 0x20) {
  101d00:	8b 45 08             	mov    0x8(%ebp),%eax
  101d03:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d06:	83 f8 20             	cmp    $0x20,%eax
  101d09:	75 19                	jne    101d24 <handle_interrupt+0x158>
        new_cpu = schedule(cpu);
  101d0b:	8b 45 08             	mov    0x8(%ebp),%eax
  101d0e:	89 04 24             	mov    %eax,(%esp)
  101d11:	e8 bb e9 ff ff       	call   1006d1 <schedule>
  101d16:	89 45 f0             	mov    %eax,-0x10(%ebp)
        tss[1] = (uint32_t) (new_cpu + 1);
  101d19:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d1c:	83 c0 38             	add    $0x38,%eax
  101d1f:	a3 24 21 10 00       	mov    %eax,0x102124
    }
    outb(0x20, 0x20);
  101d24:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101d2b:	00 
  101d2c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101d33:	e8 cc f6 ff ff       	call   101404 <outb>
		if(handler_set[cpu->intr]) {
  101d38:	8b 45 08             	mov    0x8(%ebp),%eax
  101d3b:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d3e:	8b 04 85 40 43 10 00 	mov    0x104340(,%eax,4),%eax
  101d45:	85 c0                	test   %eax,%eax
  101d47:	74 3c                	je     101d85 <handle_interrupt+0x1b9>
			handlers[cpu->intr]();
  101d49:	8b 45 08             	mov    0x8(%ebp),%eax
  101d4c:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d4f:	8b 04 85 40 42 10 00 	mov    0x104240(,%eax,4),%eax
  101d56:	ff d0                	call   *%eax
		kprintf("CR2: %x", cr2);
	
    while(1) {
      asm volatile("cli; hlt");
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101d58:	eb 2c                	jmp    101d86 <handle_interrupt+0x1ba>
    }
    outb(0x20, 0x20);
		if(handler_set[cpu->intr]) {
			handlers[cpu->intr]();
		}
  } else if (cpu->intr == 0x30) {
  101d5a:	8b 45 08             	mov    0x8(%ebp),%eax
  101d5d:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d60:	83 f8 30             	cmp    $0x30,%eax
  101d63:	75 10                	jne    101d75 <handle_interrupt+0x1a9>
		new_cpu = syscall(new_cpu);
  101d65:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d68:	89 04 24             	mov    %eax,(%esp)
  101d6b:	e8 13 e7 ff ff       	call   100483 <syscall>
  101d70:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101d73:	eb 11                	jmp    101d86 <handle_interrupt+0x1ba>
  } else {
    kprintf("Unbekannter Interrupt\n");
  101d75:	c7 04 24 52 31 10 00 	movl   $0x103152,(%esp)
  101d7c:	e8 20 f5 ff ff       	call   1012a1 <kprintf>
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  101d81:	fa                   	cli    
  101d82:	f4                   	hlt    
    }
  101d83:	eb fc                	jmp    101d81 <handle_interrupt+0x1b5>
		kprintf("CR2: %x", cr2);
	
    while(1) {
      asm volatile("cli; hlt");
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101d85:	90                   	nop
      // Prozessor anhalten
      asm volatile("cli; hlt");
    }
  }  

  return new_cpu;
  101d86:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  101d89:	83 c4 34             	add    $0x34,%esp
  101d8c:	5b                   	pop    %ebx
  101d8d:	5d                   	pop    %ebp
  101d8e:	c3                   	ret    
	...

00101d90 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  101d90:	55                   	push   %ebp
  101d91:	89 e5                	mov    %esp,%ebp
  101d93:	83 ec 08             	sub    $0x8,%esp
	init_keyboard_drv();
  101d96:	e8 40 ec ff ff       	call   1009db <init_keyboard_drv>
}
  101d9b:	c9                   	leave  
  101d9c:	c3                   	ret    

00101d9d <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  101d9d:	55                   	push   %ebp
  101d9e:	89 e5                	mov    %esp,%ebp
  101da0:	83 ec 18             	sub    $0x18,%esp
	clrscr();
  101da3:	e8 b8 f4 ff ff       	call   101260 <clrscr>
  pmm_init(mb_info);
  101da8:	8b 45 08             	mov    0x8(%ebp),%eax
  101dab:	89 04 24             	mov    %eax,(%esp)
  101dae:	e8 be f1 ff ff       	call   100f71 <pmm_init>

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  101db3:	c7 44 24 04 6c 31 10 	movl   $0x10316c,0x4(%esp)
  101dba:	00 
  101dbb:	c7 04 24 78 31 10 00 	movl   $0x103178,(%esp)
  101dc2:	e8 da f4 ff ff       	call   1012a1 <kprintf>
	kprintf("(C) Copyright 2012 Fabian Sachara.  All Rights Reserved.\n");
  101dc7:	c7 04 24 9c 31 10 00 	movl   $0x10319c,(%esp)
  101dce:	e8 ce f4 ff ff       	call   1012a1 <kprintf>

	kprintf("Initializing GDT...\n");
  101dd3:	c7 04 24 d6 31 10 00 	movl   $0x1031d6,(%esp)
  101dda:	e8 c2 f4 ff ff       	call   1012a1 <kprintf>
	
	init_gdt();
  101ddf:	e8 51 e4 ff ff       	call   100235 <init_gdt>

	kprintf("Initializing IDT...\n");
  101de4:	c7 04 24 eb 31 10 00 	movl   $0x1031eb,(%esp)
  101deb:	e8 b1 f4 ff ff       	call   1012a1 <kprintf>

	init_idt();
  101df0:	e8 4c f7 ff ff       	call   101541 <init_idt>

	kprintf("init_drivers()\n");
  101df5:	c7 04 24 00 32 10 00 	movl   $0x103200,(%esp)
  101dfc:	e8 a0 f4 ff ff       	call   1012a1 <kprintf>

	init_drivers();
  101e01:	e8 8a ff ff ff       	call   101d90 <init_drivers>
	
	kprintf("switching to kernel_main()\n");
  101e06:	c7 04 24 10 32 10 00 	movl   $0x103210,(%esp)
  101e0d:	e8 8f f4 ff ff       	call   1012a1 <kprintf>

	kernel_main(mb_info);
  101e12:	8b 45 08             	mov    0x8(%ebp),%eax
  101e15:	89 04 24             	mov    %eax,(%esp)
  101e18:	e8 59 e7 ff ff       	call   100576 <kernel_main>

  return;
}
  101e1d:	c9                   	leave  
  101e1e:	c3                   	ret    
	...

00101e20 <_start>:
  101e20:	bc 40 64 10 00       	mov    $0x106440,%esp
  101e25:	53                   	push   %ebx
  101e26:	e8 72 ff ff ff       	call   101d9d <init>

00101e2b <_stop>:
  101e2b:	fa                   	cli    
  101e2c:	f4                   	hlt    
  101e2d:	eb fc                	jmp    101e2b <_stop>
