
kernel:     Dateiformat elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 55                	in     $0x55,%al

0010000c <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  10000c:	55                   	push   %ebp
  10000d:	89 e5                	mov    %esp,%ebp
  10000f:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  100012:	8b 45 08             	mov    0x8(%ebp),%eax
  100015:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100018:	eb 0e                	jmp    100028 <memset+0x1c>
        *p++ = c;
  10001a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10001d:	8d 50 01             	lea    0x1(%eax),%edx
  100020:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100023:	8b 55 0c             	mov    0xc(%ebp),%edx
  100026:	88 10                	mov    %dl,(%eax)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100028:	8b 45 10             	mov    0x10(%ebp),%eax
  10002b:	8d 50 ff             	lea    -0x1(%eax),%edx
  10002e:	89 55 10             	mov    %edx,0x10(%ebp)
  100031:	85 c0                	test   %eax,%eax
  100033:	75 e5                	jne    10001a <memset+0xe>
        *p++ = c;
    }

    return buf;
  100035:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100038:	c9                   	leave  
  100039:	c3                   	ret    

0010003a <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  10003a:	55                   	push   %ebp
  10003b:	89 e5                	mov    %esp,%ebp
  10003d:	53                   	push   %ebx
  10003e:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100041:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100048:	eb 7b                	jmp    1000c5 <pmm_alloc+0x8b>
		if(allocatable[i]) {
  10004a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10004d:	8b 04 85 60 64 10 00 	mov    0x106460(,%eax,4),%eax
  100054:	85 c0                	test   %eax,%eax
  100056:	74 69                	je     1000c1 <pmm_alloc+0x87>
			int s;
			for(s = 0; s < 32; s++) {
  100058:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10005f:	eb 5a                	jmp    1000bb <pmm_alloc+0x81>
				if(allocatable[i] & (1 << s)) {
  100061:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100064:	8b 14 85 60 64 10 00 	mov    0x106460(,%eax,4),%edx
  10006b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10006e:	bb 01 00 00 00       	mov    $0x1,%ebx
  100073:	89 c1                	mov    %eax,%ecx
  100075:	d3 e3                	shl    %cl,%ebx
  100077:	89 d8                	mov    %ebx,%eax
  100079:	21 d0                	and    %edx,%eax
  10007b:	85 c0                	test   %eax,%eax
  10007d:	74 38                	je     1000b7 <pmm_alloc+0x7d>
					allocatable[i] &= ~(1 << s);
  10007f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100082:	8b 14 85 60 64 10 00 	mov    0x106460(,%eax,4),%edx
  100089:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10008c:	bb 01 00 00 00       	mov    $0x1,%ebx
  100091:	89 c1                	mov    %eax,%ecx
  100093:	d3 e3                	shl    %cl,%ebx
  100095:	89 d8                	mov    %ebx,%eax
  100097:	f7 d0                	not    %eax
  100099:	21 c2                	and    %eax,%edx
  10009b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10009e:	89 14 85 60 64 10 00 	mov    %edx,0x106460(,%eax,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  1000a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000a8:	c1 e0 05             	shl    $0x5,%eax
  1000ab:	89 c2                	mov    %eax,%edx
  1000ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1000b0:	01 d0                	add    %edx,%eax
  1000b2:	c1 e0 0c             	shl    $0xc,%eax
  1000b5:	eb 20                	jmp    1000d7 <pmm_alloc+0x9d>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  1000b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1000bb:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
  1000bf:	7e a0                	jle    100061 <pmm_alloc+0x27>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  1000c1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1000c5:	81 7d f8 ff 7f 00 00 	cmpl   $0x7fff,-0x8(%ebp)
  1000cc:	0f 8e 78 ff ff ff    	jle    10004a <pmm_alloc+0x10>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  1000d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1000d7:	83 c4 10             	add    $0x10,%esp
  1000da:	5b                   	pop    %ebx
  1000db:	5d                   	pop    %ebp
  1000dc:	c3                   	ret    

001000dd <pmm_free>:

void pmm_free(void* addr) {
  1000dd:	55                   	push   %ebp
  1000de:	89 e5                	mov    %esp,%ebp
  1000e0:	53                   	push   %ebx
  1000e1:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  1000e4:	8b 45 08             	mov    0x8(%ebp),%eax
  1000e7:	c1 e8 0c             	shr    $0xc,%eax
  1000ea:	89 45 f8             	mov    %eax,-0x8(%ebp)

	uintptr_t s = ptr % 32;
  1000ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000f0:	83 e0 1f             	and    $0x1f,%eax
  1000f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uintptr_t i = ptr / 32;
  1000f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1000f9:	c1 e8 05             	shr    $0x5,%eax
  1000fc:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] |= (1 << s);
  1000ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100102:	8b 14 85 60 64 10 00 	mov    0x106460(,%eax,4),%edx
  100109:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10010c:	bb 01 00 00 00       	mov    $0x1,%ebx
  100111:	89 c1                	mov    %eax,%ecx
  100113:	d3 e3                	shl    %cl,%ebx
  100115:	89 d8                	mov    %ebx,%eax
  100117:	09 c2                	or     %eax,%edx
  100119:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10011c:	89 14 85 60 64 10 00 	mov    %edx,0x106460(,%eax,4)
}
  100123:	83 c4 10             	add    $0x10,%esp
  100126:	5b                   	pop    %ebx
  100127:	5d                   	pop    %ebp
  100128:	c3                   	ret    

00100129 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100129:	55                   	push   %ebp
  10012a:	89 e5                	mov    %esp,%ebp
  10012c:	53                   	push   %ebx
  10012d:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100130:	8b 45 08             	mov    0x8(%ebp),%eax
  100133:	c1 e8 0c             	shr    $0xc,%eax
  100136:	89 45 f8             	mov    %eax,-0x8(%ebp)

	uintptr_t s = ptr % 32;
  100139:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10013c:	83 e0 1f             	and    $0x1f,%eax
  10013f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uintptr_t i = ptr / 32;
  100142:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100145:	c1 e8 05             	shr    $0x5,%eax
  100148:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] &= ~(1 << s);
  10014b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10014e:	8b 14 85 60 64 10 00 	mov    0x106460(,%eax,4),%edx
  100155:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100158:	bb 01 00 00 00       	mov    $0x1,%ebx
  10015d:	89 c1                	mov    %eax,%ecx
  10015f:	d3 e3                	shl    %cl,%ebx
  100161:	89 d8                	mov    %ebx,%eax
  100163:	f7 d0                	not    %eax
  100165:	21 c2                	and    %eax,%edx
  100167:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10016a:	89 14 85 60 64 10 00 	mov    %edx,0x106460(,%eax,4)
}
  100171:	83 c4 10             	add    $0x10,%esp
  100174:	5b                   	pop    %ebx
  100175:	5d                   	pop    %ebp
  100176:	c3                   	ret    

00100177 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100177:	55                   	push   %ebp
  100178:	89 e5                	mov    %esp,%ebp
  10017a:	83 ec 38             	sub    $0x38,%esp
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  10017d:	8b 45 08             	mov    0x8(%ebp),%eax
  100180:	8b 40 30             	mov    0x30(%eax),%eax
  100183:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);
  100186:	8b 45 08             	mov    0x8(%ebp),%eax
  100189:	8b 40 30             	mov    0x30(%eax),%eax
  10018c:	89 c2                	mov    %eax,%edx
  10018e:	8b 45 08             	mov    0x8(%ebp),%eax
  100191:	8b 40 2c             	mov    0x2c(%eax),%eax
  100194:	01 d0                	add    %edx,%eax
	allocatable[i] &= ~(1 << s);
}

void pmm_init(struct multiboot_info* mb_info) {
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
	struct multiboot_mmap* mmap_end = (void*)
  100196:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  100199:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1001a0:	00 
  1001a1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1001a8:	00 
  1001a9:	c7 04 24 60 64 10 00 	movl   $0x106460,(%esp)
  1001b0:	e8 57 fe ff ff       	call   10000c <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  1001b5:	c7 44 24 08 60 64 12 	movl   $0x126460,0x8(%esp)
  1001bc:	00 
  1001bd:	c7 44 24 04 60 64 10 	movl   $0x106460,0x4(%esp)
  1001c4:	00 
  1001c5:	c7 04 24 00 30 10 00 	movl   $0x103000,(%esp)
  1001cc:	e8 ed 06 00 00       	call   1008be <kprintf>
	 
	while (mmap < mmap_end) {
  1001d1:	eb 4a                	jmp    10021d <pmm_init+0xa6>
		  if (mmap->mm_type == 1) {
  1001d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1001d6:	8b 40 14             	mov    0x14(%eax),%eax
  1001d9:	83 f8 01             	cmp    $0x1,%eax
  1001dc:	75 3b                	jne    100219 <pmm_init+0xa2>
		      uintptr_t addr = mmap->mm_base_addr;
  1001de:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1001e1:	8b 50 08             	mov    0x8(%eax),%edx
  1001e4:	8b 40 04             	mov    0x4(%eax),%eax
  1001e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  1001ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1001ed:	8b 50 10             	mov    0x10(%eax),%edx
  1001f0:	8b 40 0c             	mov    0xc(%eax),%eax
  1001f3:	89 c2                	mov    %eax,%edx
  1001f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1001f8:	01 d0                	add    %edx,%eax
  1001fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 
		      while (addr < end_addr) {
  1001fd:	eb 12                	jmp    100211 <pmm_init+0x9a>
		          pmm_free((void*) addr);
  1001ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100202:	89 04 24             	mov    %eax,(%esp)
  100205:	e8 d3 fe ff ff       	call   1000dd <pmm_free>
		          addr += 0x1000;
  10020a:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	while (mmap < mmap_end) {
		  if (mmap->mm_type == 1) {
		      uintptr_t addr = mmap->mm_base_addr;
		      uintptr_t end_addr = addr + mmap->mm_length;
	 
		      while (addr < end_addr) {
  100211:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100214:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100217:	72 e6                	jb     1001ff <pmm_init+0x88>
		          pmm_free((void*) addr);
		          addr += 0x1000;
		      }
		  }
		  mmap++;
  100219:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)

	memset(allocatable, 0, sizeof(allocatable));

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
	 
	while (mmap < mmap_end) {
  10021d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100220:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  100223:	72 ae                	jb     1001d3 <pmm_init+0x5c>
	}

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  100225:	c7 45 ec 00 00 10 00 	movl   $0x100000,-0x14(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  10022c:	eb 12                	jmp    100240 <pmm_init+0xc9>
		  pmm_mark_used((void*) addr);
  10022e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100231:	89 04 24             	mov    %eax,(%esp)
  100234:	e8 f0 fe ff ff       	call   100129 <pmm_mark_used>
		  addr += 0x1000;
  100239:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  100240:	b8 00 70 12 00       	mov    $0x127000,%eax
  100245:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  100248:	72 e4                	jb     10022e <pmm_init+0xb7>
		  pmm_mark_used((void*) addr);
		  addr += 0x1000;
	}

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  10024a:	8b 45 08             	mov    0x8(%ebp),%eax
  10024d:	8b 40 18             	mov    0x18(%eax),%eax
  100250:	89 45 dc             	mov    %eax,-0x24(%ebp)

  pmm_mark_used(mb_info);
  100253:	8b 45 08             	mov    0x8(%ebp),%eax
  100256:	89 04 24             	mov    %eax,(%esp)
  100259:	e8 cb fe ff ff       	call   100129 <pmm_mark_used>
  pmm_mark_used(modules);
  10025e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100261:	89 04 24             	mov    %eax,(%esp)
  100264:	e8 c0 fe ff ff       	call   100129 <pmm_mark_used>

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100269:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  100270:	eb 3f                	jmp    1002b1 <pmm_init+0x13a>
      addr = (uintptr_t)modules[i].start;
  100272:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100275:	c1 e0 04             	shl    $0x4,%eax
  100278:	89 c2                	mov    %eax,%edx
  10027a:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10027d:	01 d0                	add    %edx,%eax
  10027f:	8b 00                	mov    (%eax),%eax
  100281:	89 45 ec             	mov    %eax,-0x14(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  100284:	eb 12                	jmp    100298 <pmm_init+0x121>
          pmm_mark_used((void*) addr);
  100286:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100289:	89 04 24             	mov    %eax,(%esp)
  10028c:	e8 98 fe ff ff       	call   100129 <pmm_mark_used>
          addr += 0x1000;
  100291:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  100298:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10029b:	c1 e0 04             	shl    $0x4,%eax
  10029e:	89 c2                	mov    %eax,%edx
  1002a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1002a3:	01 d0                	add    %edx,%eax
  1002a5:	8b 40 04             	mov    0x4(%eax),%eax
  1002a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1002ab:	77 d9                	ja     100286 <pmm_init+0x10f>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1002ad:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
  1002b1:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1002b4:	8b 45 08             	mov    0x8(%ebp),%eax
  1002b7:	8b 40 14             	mov    0x14(%eax),%eax
  1002ba:	39 c2                	cmp    %eax,%edx
  1002bc:	72 b4                	jb     100272 <pmm_init+0xfb>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  1002be:	c9                   	leave  
  1002bf:	c3                   	ret    

001002c0 <intr_stub_0>:
  1002c0:	6a 00                	push   $0x0
  1002c2:	6a 00                	push   $0x0
  1002c4:	e9 eb 00 00 00       	jmp    1003b4 <intr_common_handler>

001002c9 <intr_stub_1>:
  1002c9:	6a 00                	push   $0x0
  1002cb:	6a 01                	push   $0x1
  1002cd:	e9 e2 00 00 00       	jmp    1003b4 <intr_common_handler>

001002d2 <intr_stub_2>:
  1002d2:	6a 00                	push   $0x0
  1002d4:	6a 02                	push   $0x2
  1002d6:	e9 d9 00 00 00       	jmp    1003b4 <intr_common_handler>

001002db <intr_stub_3>:
  1002db:	6a 00                	push   $0x0
  1002dd:	6a 03                	push   $0x3
  1002df:	e9 d0 00 00 00       	jmp    1003b4 <intr_common_handler>

001002e4 <intr_stub_4>:
  1002e4:	6a 00                	push   $0x0
  1002e6:	6a 04                	push   $0x4
  1002e8:	e9 c7 00 00 00       	jmp    1003b4 <intr_common_handler>

001002ed <intr_stub_5>:
  1002ed:	6a 00                	push   $0x0
  1002ef:	6a 05                	push   $0x5
  1002f1:	e9 be 00 00 00       	jmp    1003b4 <intr_common_handler>

001002f6 <intr_stub_6>:
  1002f6:	6a 00                	push   $0x0
  1002f8:	6a 06                	push   $0x6
  1002fa:	e9 b5 00 00 00       	jmp    1003b4 <intr_common_handler>

001002ff <intr_stub_7>:
  1002ff:	6a 00                	push   $0x0
  100301:	6a 07                	push   $0x7
  100303:	e9 ac 00 00 00       	jmp    1003b4 <intr_common_handler>

00100308 <intr_stub_8>:
  100308:	6a 08                	push   $0x8
  10030a:	e9 a5 00 00 00       	jmp    1003b4 <intr_common_handler>

0010030f <intr_stub_9>:
  10030f:	6a 00                	push   $0x0
  100311:	6a 09                	push   $0x9
  100313:	e9 9c 00 00 00       	jmp    1003b4 <intr_common_handler>

00100318 <intr_stub_10>:
  100318:	6a 0a                	push   $0xa
  10031a:	e9 95 00 00 00       	jmp    1003b4 <intr_common_handler>

0010031f <intr_stub_11>:
  10031f:	6a 0b                	push   $0xb
  100321:	e9 8e 00 00 00       	jmp    1003b4 <intr_common_handler>

00100326 <intr_stub_12>:
  100326:	6a 0c                	push   $0xc
  100328:	e9 87 00 00 00       	jmp    1003b4 <intr_common_handler>

0010032d <intr_stub_13>:
  10032d:	6a 0d                	push   $0xd
  10032f:	e9 80 00 00 00       	jmp    1003b4 <intr_common_handler>

00100334 <intr_stub_14>:
  100334:	6a 0e                	push   $0xe
  100336:	eb 7c                	jmp    1003b4 <intr_common_handler>

00100338 <intr_stub_15>:
  100338:	6a 00                	push   $0x0
  10033a:	6a 0f                	push   $0xf
  10033c:	eb 76                	jmp    1003b4 <intr_common_handler>

0010033e <intr_stub_16>:
  10033e:	6a 00                	push   $0x0
  100340:	6a 10                	push   $0x10
  100342:	eb 70                	jmp    1003b4 <intr_common_handler>

00100344 <intr_stub_17>:
  100344:	6a 11                	push   $0x11
  100346:	eb 6c                	jmp    1003b4 <intr_common_handler>

00100348 <intr_stub_18>:
  100348:	6a 00                	push   $0x0
  10034a:	6a 12                	push   $0x12
  10034c:	eb 66                	jmp    1003b4 <intr_common_handler>

0010034e <intr_stub_32>:
  10034e:	6a 00                	push   $0x0
  100350:	6a 20                	push   $0x20
  100352:	eb 60                	jmp    1003b4 <intr_common_handler>

00100354 <intr_stub_33>:
  100354:	6a 00                	push   $0x0
  100356:	6a 21                	push   $0x21
  100358:	eb 5a                	jmp    1003b4 <intr_common_handler>

0010035a <intr_stub_34>:
  10035a:	6a 00                	push   $0x0
  10035c:	6a 22                	push   $0x22
  10035e:	eb 54                	jmp    1003b4 <intr_common_handler>

00100360 <intr_stub_35>:
  100360:	6a 00                	push   $0x0
  100362:	6a 23                	push   $0x23
  100364:	eb 4e                	jmp    1003b4 <intr_common_handler>

00100366 <intr_stub_36>:
  100366:	6a 00                	push   $0x0
  100368:	6a 24                	push   $0x24
  10036a:	eb 48                	jmp    1003b4 <intr_common_handler>

0010036c <intr_stub_37>:
  10036c:	6a 00                	push   $0x0
  10036e:	6a 25                	push   $0x25
  100370:	eb 42                	jmp    1003b4 <intr_common_handler>

00100372 <intr_stub_38>:
  100372:	6a 00                	push   $0x0
  100374:	6a 26                	push   $0x26
  100376:	eb 3c                	jmp    1003b4 <intr_common_handler>

00100378 <intr_stub_39>:
  100378:	6a 00                	push   $0x0
  10037a:	6a 27                	push   $0x27
  10037c:	eb 36                	jmp    1003b4 <intr_common_handler>

0010037e <intr_stub_40>:
  10037e:	6a 00                	push   $0x0
  100380:	6a 28                	push   $0x28
  100382:	eb 30                	jmp    1003b4 <intr_common_handler>

00100384 <intr_stub_41>:
  100384:	6a 00                	push   $0x0
  100386:	6a 29                	push   $0x29
  100388:	eb 2a                	jmp    1003b4 <intr_common_handler>

0010038a <intr_stub_42>:
  10038a:	6a 00                	push   $0x0
  10038c:	6a 2a                	push   $0x2a
  10038e:	eb 24                	jmp    1003b4 <intr_common_handler>

00100390 <intr_stub_43>:
  100390:	6a 00                	push   $0x0
  100392:	6a 2b                	push   $0x2b
  100394:	eb 1e                	jmp    1003b4 <intr_common_handler>

00100396 <intr_stub_44>:
  100396:	6a 00                	push   $0x0
  100398:	6a 2c                	push   $0x2c
  10039a:	eb 18                	jmp    1003b4 <intr_common_handler>

0010039c <intr_stub_45>:
  10039c:	6a 00                	push   $0x0
  10039e:	6a 2d                	push   $0x2d
  1003a0:	eb 12                	jmp    1003b4 <intr_common_handler>

001003a2 <intr_stub_46>:
  1003a2:	6a 00                	push   $0x0
  1003a4:	6a 2e                	push   $0x2e
  1003a6:	eb 0c                	jmp    1003b4 <intr_common_handler>

001003a8 <intr_stub_47>:
  1003a8:	6a 00                	push   $0x0
  1003aa:	6a 2f                	push   $0x2f
  1003ac:	eb 06                	jmp    1003b4 <intr_common_handler>

001003ae <intr_stub_48>:
  1003ae:	6a 00                	push   $0x0
  1003b0:	6a 30                	push   $0x30
  1003b2:	eb 00                	jmp    1003b4 <intr_common_handler>

001003b4 <intr_common_handler>:
  1003b4:	55                   	push   %ebp
  1003b5:	57                   	push   %edi
  1003b6:	56                   	push   %esi
  1003b7:	52                   	push   %edx
  1003b8:	51                   	push   %ecx
  1003b9:	53                   	push   %ebx
  1003ba:	50                   	push   %eax
  1003bb:	66 b8 10 00          	mov    $0x10,%ax
  1003bf:	8e d8                	mov    %eax,%ds
  1003c1:	8e c0                	mov    %eax,%es
  1003c3:	54                   	push   %esp
  1003c4:	e8 82 14 00 00       	call   10184b <handle_interrupt>
  1003c9:	89 c4                	mov    %eax,%esp
  1003cb:	66 b8 23 00          	mov    $0x23,%ax
  1003cf:	8e d8                	mov    %eax,%ds
  1003d1:	8e c0                	mov    %eax,%es
  1003d3:	58                   	pop    %eax
  1003d4:	5b                   	pop    %ebx
  1003d5:	59                   	pop    %ecx
  1003d6:	5a                   	pop    %edx
  1003d7:	5e                   	pop    %esi
  1003d8:	5f                   	pop    %edi
  1003d9:	5d                   	pop    %ebp
  1003da:	83 c4 08             	add    $0x8,%esp
  1003dd:	cf                   	iret   

001003de <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  1003de:	55                   	push   %ebp
  1003df:	89 e5                	mov    %esp,%ebp
  1003e1:	83 ec 14             	sub    $0x14,%esp
  1003e4:	8b 45 08             	mov    0x8(%ebp),%eax
  1003e7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  1003eb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  1003ef:	89 c2                	mov    %eax,%edx
  1003f1:	ec                   	in     (%dx),%al
  1003f2:	88 45 ff             	mov    %al,-0x1(%ebp)
	return result;
  1003f5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  1003f9:	c9                   	leave  
  1003fa:	c3                   	ret    

001003fb <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  1003fb:	55                   	push   %ebp
  1003fc:	89 e5                	mov    %esp,%ebp
  1003fe:	83 ec 08             	sub    $0x8,%esp
  100401:	8b 55 08             	mov    0x8(%ebp),%edx
  100404:	8b 45 0c             	mov    0xc(%ebp),%eax
  100407:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  10040b:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  10040e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  100412:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  100416:	ee                   	out    %al,(%dx)
}
  100417:	c9                   	leave  
  100418:	c3                   	ret    

00100419 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  100419:	55                   	push   %ebp
  10041a:	89 e5                	mov    %esp,%ebp
  10041c:	83 ec 28             	sub    $0x28,%esp
  10041f:	8b 45 0c             	mov    0xc(%ebp),%eax
  100422:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
  uint8_t keycode = 0;
  100426:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

  switch (set) {
  10042a:	8b 45 08             	mov    0x8(%ebp),%eax
  10042d:	83 f8 01             	cmp    $0x1,%eax
  100430:	74 19                	je     10044b <translate_scancode+0x32>
  100432:	83 f8 02             	cmp    $0x2,%eax
  100435:	74 24                	je     10045b <translate_scancode+0x42>
  100437:	85 c0                	test   %eax,%eax
  100439:	75 37                	jne    100472 <translate_scancode+0x59>
    case 0:
      keycode = sc_to_kc[0][scancode];
  10043b:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10043f:	0f b6 80 00 20 10 00 	movzbl 0x102000(%eax),%eax
  100446:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  100449:	eb 27                	jmp    100472 <translate_scancode+0x59>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10044b:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10044f:	0f b6 80 80 20 10 00 	movzbl 0x102080(%eax),%eax
  100456:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  100459:	eb 17                	jmp    100472 <translate_scancode+0x59>
    case 2:
      switch (scancode) {
  10045b:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10045f:	3d 1d 45 00 00       	cmp    $0x451d,%eax
  100464:	75 07                	jne    10046d <translate_scancode+0x54>
        case 0x451D:
          keycode = 119;
  100466:	c6 45 f7 77          	movb   $0x77,-0x9(%ebp)
          break;
  10046a:	90                   	nop

        default:
          keycode = 0x0;	
      };
      break;
  10046b:	eb 04                	jmp    100471 <translate_scancode+0x58>
        case 0x451D:
          keycode = 119;
          break;

        default:
          keycode = 0x0;	
  10046d:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
      };
      break;
  100471:	90                   	nop
  }

  if (keycode == 0) {
  100472:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  100476:	75 1b                	jne    100493 <translate_scancode+0x7a>
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  100478:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10047c:	8b 55 08             	mov    0x8(%ebp),%edx
  10047f:	89 54 24 08          	mov    %edx,0x8(%esp)
  100483:	89 44 24 04          	mov    %eax,0x4(%esp)
  100487:	c7 04 24 18 30 10 00 	movl   $0x103018,(%esp)
  10048e:	e8 2b 04 00 00       	call   1008be <kprintf>
  }

  return keycode;
  100493:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
  100497:	c9                   	leave  
  100498:	c3                   	ret    

00100499 <keyboard_handler>:

void keyboard_handler() {    
  100499:	55                   	push   %ebp
  10049a:	89 e5                	mov    %esp,%ebp
  10049c:	83 ec 28             	sub    $0x28,%esp
  uint8_t scancode;
  uint8_t keycode = 0;
  10049f:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
  int break_code = 0;
  1004a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  1004aa:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1004b1:	e8 28 ff ff ff       	call   1003de <inb>
  1004b6:	88 45 f7             	mov    %al,-0x9(%ebp)

  if (!init_done) {
  1004b9:	a1 00 40 10 00       	mov    0x104000,%eax
  1004be:	85 c0                	test   %eax,%eax
  1004c0:	75 05                	jne    1004c7 <keyboard_handler+0x2e>
    return;
  1004c2:	e9 24 01 00 00       	jmp    1005eb <keyboard_handler+0x152>
  }

  if ((scancode & 0x80) &&
  1004c7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1004cb:	84 c0                	test   %al,%al
  1004cd:	79 29                	jns    1004f8 <keyboard_handler+0x5f>
      (e1_code || (scancode != 0xE1)) &&
  1004cf:	a1 0c 40 10 00       	mov    0x10400c,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  1004d4:	85 c0                	test   %eax,%eax
  1004d6:	75 06                	jne    1004de <keyboard_handler+0x45>
      (e1_code || (scancode != 0xE1)) &&
  1004d8:	80 7d f7 e1          	cmpb   $0xe1,-0x9(%ebp)
  1004dc:	74 1a                	je     1004f8 <keyboard_handler+0x5f>
      (e0_code || (scancode != 0xE0)))
  1004de:	a1 10 40 10 00       	mov    0x104010,%eax
  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
      (e1_code || (scancode != 0xE1)) &&
  1004e3:	85 c0                	test   %eax,%eax
  1004e5:	75 06                	jne    1004ed <keyboard_handler+0x54>
      (e0_code || (scancode != 0xE0)))
  1004e7:	80 7d f7 e0          	cmpb   $0xe0,-0x9(%ebp)
  1004eb:	74 0b                	je     1004f8 <keyboard_handler+0x5f>
  {
      break_code = 1;
  1004ed:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
      scancode &= ~0x80;
  1004f4:	80 65 f7 7f          	andb   $0x7f,-0x9(%ebp)
  }

  if (e0_code) {
  1004f8:	a1 10 40 10 00       	mov    0x104010,%eax
  1004fd:	85 c0                	test   %eax,%eax
  1004ff:	74 41                	je     100542 <keyboard_handler+0xa9>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  100501:	80 7d f7 2a          	cmpb   $0x2a,-0x9(%ebp)
  100505:	74 06                	je     10050d <keyboard_handler+0x74>
  100507:	80 7d f7 36          	cmpb   $0x36,-0x9(%ebp)
  10050b:	75 0f                	jne    10051c <keyboard_handler+0x83>
          e0_code = 0;
  10050d:	c7 05 10 40 10 00 00 	movl   $0x0,0x104010
  100514:	00 00 00 
          return;
  100517:	e9 cf 00 00 00       	jmp    1005eb <keyboard_handler+0x152>
      }
      keycode = translate_scancode(1, scancode);
  10051c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100520:	89 44 24 04          	mov    %eax,0x4(%esp)
  100524:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10052b:	e8 e9 fe ff ff       	call   100419 <translate_scancode>
  100530:	88 45 f6             	mov    %al,-0xa(%ebp)
      e0_code = 0;
  100533:	c7 05 10 40 10 00 00 	movl   $0x0,0x104010
  10053a:	00 00 00 
  10053d:	e9 a9 00 00 00       	jmp    1005eb <keyboard_handler+0x152>
  } else if (e1_code == 2) {
  100542:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100547:	83 f8 02             	cmp    $0x2,%eax
  10054a:	75 41                	jne    10058d <keyboard_handler+0xf4>
      e1_prev |= ((uint16_t) scancode << 8);
  10054c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100550:	c1 e0 08             	shl    $0x8,%eax
  100553:	89 c2                	mov    %eax,%edx
  100555:	0f b7 05 14 40 10 00 	movzwl 0x104014,%eax
  10055c:	09 d0                	or     %edx,%eax
  10055e:	66 a3 14 40 10 00    	mov    %ax,0x104014
      keycode = translate_scancode(2, e1_prev);
  100564:	0f b7 05 14 40 10 00 	movzwl 0x104014,%eax
  10056b:	0f b7 c0             	movzwl %ax,%eax
  10056e:	89 44 24 04          	mov    %eax,0x4(%esp)
  100572:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100579:	e8 9b fe ff ff       	call   100419 <translate_scancode>
  10057e:	88 45 f6             	mov    %al,-0xa(%ebp)
      e1_code = 0;
  100581:	c7 05 0c 40 10 00 00 	movl   $0x0,0x10400c
  100588:	00 00 00 
  10058b:	eb 5e                	jmp    1005eb <keyboard_handler+0x152>
  } else if (e1_code == 1) {
  10058d:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100592:	83 f8 01             	cmp    $0x1,%eax
  100595:	75 19                	jne    1005b0 <keyboard_handler+0x117>
      e1_prev = scancode;
  100597:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10059b:	66 a3 14 40 10 00    	mov    %ax,0x104014
      e1_code++;
  1005a1:	a1 0c 40 10 00       	mov    0x10400c,%eax
  1005a6:	83 c0 01             	add    $0x1,%eax
  1005a9:	a3 0c 40 10 00       	mov    %eax,0x10400c
  1005ae:	eb 3b                	jmp    1005eb <keyboard_handler+0x152>
  } else if (scancode == 0xE0) {
  1005b0:	80 7d f7 e0          	cmpb   $0xe0,-0x9(%ebp)
  1005b4:	75 0c                	jne    1005c2 <keyboard_handler+0x129>
      e0_code = 1;
  1005b6:	c7 05 10 40 10 00 01 	movl   $0x1,0x104010
  1005bd:	00 00 00 
  1005c0:	eb 29                	jmp    1005eb <keyboard_handler+0x152>
  } else if (scancode == 0xE1) {
  1005c2:	80 7d f7 e1          	cmpb   $0xe1,-0x9(%ebp)
  1005c6:	75 0c                	jne    1005d4 <keyboard_handler+0x13b>
      e1_code = 1;
  1005c8:	c7 05 0c 40 10 00 01 	movl   $0x1,0x10400c
  1005cf:	00 00 00 
  1005d2:	eb 17                	jmp    1005eb <keyboard_handler+0x152>
  } else {
      keycode = translate_scancode(0, scancode);
  1005d4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1005d8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1005dc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1005e3:	e8 31 fe ff ff       	call   100419 <translate_scancode>
  1005e8:	88 45 f6             	mov    %al,-0xa(%ebp)

	if(keycode != 0x0) {
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}
  1005eb:	c9                   	leave  
  1005ec:	c3                   	ret    

001005ed <getc>:

char getc() {
  1005ed:	55                   	push   %ebp
  1005ee:	89 e5                	mov    %esp,%ebp
  1005f0:	83 ec 10             	sub    $0x10,%esp
	char ret = buffer[0];
  1005f3:	a1 04 40 10 00       	mov    0x104004,%eax
  1005f8:	0f b6 00             	movzbl (%eax),%eax
  1005fb:	88 45 fb             	mov    %al,-0x5(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1005fe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100605:	eb 21                	jmp    100628 <getc+0x3b>
		buffer[i] = buffer[i+1];	
  100607:	8b 15 04 40 10 00    	mov    0x104004,%edx
  10060d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100610:	01 c2                	add    %eax,%edx
  100612:	a1 04 40 10 00       	mov    0x104004,%eax
  100617:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10061a:	83 c1 01             	add    $0x1,%ecx
  10061d:	01 c8                	add    %ecx,%eax
  10061f:	0f b6 00             	movzbl (%eax),%eax
  100622:	88 02                	mov    %al,(%edx)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100624:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100628:	a1 08 40 10 00       	mov    0x104008,%eax
  10062d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
  100630:	7c d5                	jl     100607 <getc+0x1a>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100632:	a1 08 40 10 00       	mov    0x104008,%eax
  100637:	83 e8 01             	sub    $0x1,%eax
  10063a:	a3 08 40 10 00       	mov    %eax,0x104008

	return ret;
  10063f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
  100643:	c9                   	leave  
  100644:	c3                   	ret    

00100645 <send_command>:

void send_command(uint8_t command) {
  100645:	55                   	push   %ebp
  100646:	89 e5                	mov    %esp,%ebp
  100648:	83 ec 0c             	sub    $0xc,%esp
  10064b:	8b 45 08             	mov    0x8(%ebp),%eax
  10064e:	88 45 fc             	mov    %al,-0x4(%ebp)
	while((inb(0x64) & 0x2)) { }
  100651:	90                   	nop
  100652:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100659:	e8 80 fd ff ff       	call   1003de <inb>
  10065e:	0f b6 c0             	movzbl %al,%eax
  100661:	83 e0 02             	and    $0x2,%eax
  100664:	85 c0                	test   %eax,%eax
  100666:	75 ea                	jne    100652 <send_command+0xd>
	outb(0x60, command);
  100668:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  10066c:	89 44 24 04          	mov    %eax,0x4(%esp)
  100670:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100677:	e8 7f fd ff ff       	call   1003fb <outb>
}
  10067c:	c9                   	leave  
  10067d:	c3                   	ret    

0010067e <init_keyboard_drv>:

void init_keyboard_drv() {
  10067e:	55                   	push   %ebp
  10067f:	89 e5                	mov    %esp,%ebp
  100681:	83 ec 18             	sub    $0x18,%esp
	register_intr_handler(0x21, &keyboard_handler);
  100684:	c7 44 24 04 99 04 10 	movl   $0x100499,0x4(%esp)
  10068b:	00 
  10068c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100693:	e8 93 11 00 00       	call   10182b <register_intr_handler>

	while(inb(0x64) & 0x1) {
  100698:	eb 0c                	jmp    1006a6 <init_keyboard_drv+0x28>
		inb(0x60);
  10069a:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1006a1:	e8 38 fd ff ff       	call   1003de <inb>
}

void init_keyboard_drv() {
	register_intr_handler(0x21, &keyboard_handler);

	while(inb(0x64) & 0x1) {
  1006a6:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1006ad:	e8 2c fd ff ff       	call   1003de <inb>
  1006b2:	0f b6 c0             	movzbl %al,%eax
  1006b5:	83 e0 01             	and    $0x1,%eax
  1006b8:	85 c0                	test   %eax,%eax
  1006ba:	75 de                	jne    10069a <init_keyboard_drv+0x1c>
		inb(0x60);
	}

	send_command(0xF4);
  1006bc:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  1006c3:	e8 7d ff ff ff       	call   100645 <send_command>

	init_done = 1;
  1006c8:	c7 05 00 40 10 00 01 	movl   $0x1,0x104000
  1006cf:	00 00 00 
}
  1006d2:	c9                   	leave  
  1006d3:	c3                   	ret    

001006d4 <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  1006d4:	55                   	push   %ebp
  1006d5:	89 e5                	mov    %esp,%ebp
  1006d7:	83 ec 14             	sub    $0x14,%esp
  1006da:	8b 45 08             	mov    0x8(%ebp),%eax
  1006dd:	88 45 ec             	mov    %al,-0x14(%ebp)
    if ((c == '\n') || (x > 79)) {
  1006e0:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  1006e4:	74 0a                	je     1006f0 <kputc+0x1c>
  1006e6:	a1 18 40 10 00       	mov    0x104018,%eax
  1006eb:	83 f8 4f             	cmp    $0x4f,%eax
  1006ee:	7e 17                	jle    100707 <kputc+0x33>
        x = 0;
  1006f0:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  1006f7:	00 00 00 
        y++;
  1006fa:	a1 1c 40 10 00       	mov    0x10401c,%eax
  1006ff:	83 c0 01             	add    $0x1,%eax
  100702:	a3 1c 40 10 00       	mov    %eax,0x10401c
    }

    if (c == '\n') {
  100707:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  10070b:	75 05                	jne    100712 <kputc+0x3e>
        return;
  10070d:	e9 d7 00 00 00       	jmp    1007e9 <kputc+0x115>
    }

    if (y > 24) {
  100712:	a1 1c 40 10 00       	mov    0x10401c,%eax
  100717:	83 f8 18             	cmp    $0x18,%eax
  10071a:	7e 60                	jle    10077c <kputc+0xa8>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  10071c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100723:	eb 24                	jmp    100749 <kputc+0x75>
            video[i] = video[i + 160];
  100725:	8b 15 00 21 10 00    	mov    0x102100,%edx
  10072b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10072e:	01 c2                	add    %eax,%edx
  100730:	a1 00 21 10 00       	mov    0x102100,%eax
  100735:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100738:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  10073e:	01 c8                	add    %ecx,%eax
  100740:	0f b6 00             	movzbl (%eax),%eax
  100743:	88 02                	mov    %al,(%edx)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100745:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100749:	81 7d fc ff 0e 00 00 	cmpl   $0xeff,-0x4(%ebp)
  100750:	7e d3                	jle    100725 <kputc+0x51>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100752:	eb 12                	jmp    100766 <kputc+0x92>
            video[i] = 0;
  100754:	8b 15 00 21 10 00    	mov    0x102100,%edx
  10075a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10075d:	01 d0                	add    %edx,%eax
  10075f:	c6 00 00             	movb   $0x0,(%eax)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100762:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100766:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  10076d:	7e e5                	jle    100754 <kputc+0x80>
            video[i] = 0;
        }
        y--;
  10076f:	a1 1c 40 10 00       	mov    0x10401c,%eax
  100774:	83 e8 01             	sub    $0x1,%eax
  100777:	a3 1c 40 10 00       	mov    %eax,0x10401c
    }

    video[2 * (y * 80 + x)] = c;
  10077c:	8b 0d 00 21 10 00    	mov    0x102100,%ecx
  100782:	8b 15 1c 40 10 00    	mov    0x10401c,%edx
  100788:	89 d0                	mov    %edx,%eax
  10078a:	c1 e0 02             	shl    $0x2,%eax
  10078d:	01 d0                	add    %edx,%eax
  10078f:	c1 e0 04             	shl    $0x4,%eax
  100792:	89 c2                	mov    %eax,%edx
  100794:	a1 18 40 10 00       	mov    0x104018,%eax
  100799:	01 d0                	add    %edx,%eax
  10079b:	01 c0                	add    %eax,%eax
  10079d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  1007a0:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  1007a4:	88 02                	mov    %al,(%edx)
    video[2 * (y * 80 + x) + 1] = 0x07;
  1007a6:	8b 0d 00 21 10 00    	mov    0x102100,%ecx
  1007ac:	8b 15 1c 40 10 00    	mov    0x10401c,%edx
  1007b2:	89 d0                	mov    %edx,%eax
  1007b4:	c1 e0 02             	shl    $0x2,%eax
  1007b7:	01 d0                	add    %edx,%eax
  1007b9:	c1 e0 04             	shl    $0x4,%eax
  1007bc:	89 c2                	mov    %eax,%edx
  1007be:	a1 18 40 10 00       	mov    0x104018,%eax
  1007c3:	01 d0                	add    %edx,%eax
  1007c5:	01 c0                	add    %eax,%eax
  1007c7:	83 c0 01             	add    $0x1,%eax
  1007ca:	01 c8                	add    %ecx,%eax
  1007cc:	c6 00 07             	movb   $0x7,(%eax)

    x++;
  1007cf:	a1 18 40 10 00       	mov    0x104018,%eax
  1007d4:	83 c0 01             	add    $0x1,%eax
  1007d7:	a3 18 40 10 00       	mov    %eax,0x104018
    kprintf_res++;
  1007dc:	a1 20 40 10 00       	mov    0x104020,%eax
  1007e1:	83 c0 01             	add    $0x1,%eax
  1007e4:	a3 20 40 10 00       	mov    %eax,0x104020
}
  1007e9:	c9                   	leave  
  1007ea:	c3                   	ret    

001007eb <kputs>:

static void kputs(const char* s)
{
  1007eb:	55                   	push   %ebp
  1007ec:	89 e5                	mov    %esp,%ebp
  1007ee:	83 ec 04             	sub    $0x4,%esp
    while (*s) {
  1007f1:	eb 17                	jmp    10080a <kputs+0x1f>
        kputc(*s++);
  1007f3:	8b 45 08             	mov    0x8(%ebp),%eax
  1007f6:	8d 50 01             	lea    0x1(%eax),%edx
  1007f9:	89 55 08             	mov    %edx,0x8(%ebp)
  1007fc:	0f b6 00             	movzbl (%eax),%eax
  1007ff:	0f be c0             	movsbl %al,%eax
  100802:	89 04 24             	mov    %eax,(%esp)
  100805:	e8 ca fe ff ff       	call   1006d4 <kputc>
    kprintf_res++;
}

static void kputs(const char* s)
{
    while (*s) {
  10080a:	8b 45 08             	mov    0x8(%ebp),%eax
  10080d:	0f b6 00             	movzbl (%eax),%eax
  100810:	84 c0                	test   %al,%al
  100812:	75 df                	jne    1007f3 <kputs+0x8>
        kputc(*s++);
    }
}
  100814:	c9                   	leave  
  100815:	c3                   	ret    

00100816 <kputn>:

static void kputn(unsigned long x, int base)
{
  100816:	55                   	push   %ebp
  100817:	89 e5                	mov    %esp,%ebp
  100819:	53                   	push   %ebx
  10081a:	83 ec 54             	sub    $0x54,%esp
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  10081d:	c7 45 f4 40 30 10 00 	movl   $0x103040,-0xc(%ebp)
    char* p;

    if (base > 36) {
  100824:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
  100828:	7f 4e                	jg     100878 <kputn+0x62>
        return;
    }

    p = buf + 64;
  10082a:	8d 45 b3             	lea    -0x4d(%ebp),%eax
  10082d:	83 c0 40             	add    $0x40,%eax
  100830:	89 45 f8             	mov    %eax,-0x8(%ebp)
    *p = '\0';
  100833:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100836:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  100839:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)
  10083d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100840:	8b 45 08             	mov    0x8(%ebp),%eax
  100843:	ba 00 00 00 00       	mov    $0x0,%edx
  100848:	f7 f1                	div    %ecx
  10084a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10084d:	01 d0                	add    %edx,%eax
  10084f:	0f b6 10             	movzbl (%eax),%edx
  100852:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100855:	88 10                	mov    %dl,(%eax)
        x /= base;
  100857:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10085a:	8b 45 08             	mov    0x8(%ebp),%eax
  10085d:	ba 00 00 00 00       	mov    $0x0,%edx
  100862:	f7 f3                	div    %ebx
  100864:	89 45 08             	mov    %eax,0x8(%ebp)
    } while (x);
  100867:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10086b:	75 cc                	jne    100839 <kputn+0x23>
    kputs(p);
  10086d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100870:	89 04 24             	mov    %eax,(%esp)
  100873:	e8 73 ff ff ff       	call   1007eb <kputs>
}
  100878:	83 c4 54             	add    $0x54,%esp
  10087b:	5b                   	pop    %ebx
  10087c:	5d                   	pop    %ebp
  10087d:	c3                   	ret    

0010087e <clrscr>:

void clrscr(void)
{
  10087e:	55                   	push   %ebp
  10087f:	89 e5                	mov    %esp,%ebp
  100881:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100884:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10088b:	eb 12                	jmp    10089f <clrscr+0x21>
        video[i] = 0;
  10088d:	8b 15 00 21 10 00    	mov    0x102100,%edx
  100893:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100896:	01 d0                	add    %edx,%eax
  100898:	c6 00 00             	movb   $0x0,(%eax)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  10089b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  10089f:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  1008a6:	7e e5                	jle    10088d <clrscr+0xf>
        video[i] = 0;
    }

    x = y = 0;
  1008a8:	c7 05 1c 40 10 00 00 	movl   $0x0,0x10401c
  1008af:	00 00 00 
  1008b2:	a1 1c 40 10 00       	mov    0x10401c,%eax
  1008b7:	a3 18 40 10 00       	mov    %eax,0x104018
}
  1008bc:	c9                   	leave  
  1008bd:	c3                   	ret    

001008be <kprintf>:

int kprintf(const char* fmt, ...)
{
  1008be:	55                   	push   %ebp
  1008bf:	89 e5                	mov    %esp,%ebp
  1008c1:	83 ec 18             	sub    $0x18,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  1008c4:	8d 45 0c             	lea    0xc(%ebp),%eax
  1008c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf_res = 0;
  1008ca:	c7 05 20 40 10 00 00 	movl   $0x0,0x104020
  1008d1:	00 00 00 
  while (*fmt) {
  1008d4:	e9 2a 01 00 00       	jmp    100a03 <kprintf+0x145>
    if (*fmt == '%') {
  1008d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1008dc:	0f b6 00             	movzbl (%eax),%eax
  1008df:	3c 25                	cmp    $0x25,%al
  1008e1:	0f 85 07 01 00 00    	jne    1009ee <kprintf+0x130>
      fmt++;
  1008e7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
  1008eb:	8b 45 08             	mov    0x8(%ebp),%eax
  1008ee:	0f b6 00             	movzbl (%eax),%eax
  1008f1:	0f be c0             	movsbl %al,%eax
  1008f4:	83 f8 64             	cmp    $0x64,%eax
  1008f7:	74 65                	je     10095e <kprintf+0xa0>
  1008f9:	83 f8 64             	cmp    $0x64,%eax
  1008fc:	7f 1f                	jg     10091d <kprintf+0x5f>
  1008fe:	83 f8 25             	cmp    $0x25,%eax
  100901:	0f 84 b9 00 00 00    	je     1009c0 <kprintf+0x102>
  100907:	83 f8 63             	cmp    $0x63,%eax
  10090a:	0f 84 94 00 00 00    	je     1009a4 <kprintf+0xe6>
  100910:	85 c0                	test   %eax,%eax
  100912:	0f 84 fb 00 00 00    	je     100a13 <kprintf+0x155>
  100918:	e9 b1 00 00 00       	jmp    1009ce <kprintf+0x110>
  10091d:	83 f8 73             	cmp    $0x73,%eax
  100920:	74 1e                	je     100940 <kprintf+0x82>
  100922:	83 f8 73             	cmp    $0x73,%eax
  100925:	7f 0a                	jg     100931 <kprintf+0x73>
  100927:	83 f8 70             	cmp    $0x70,%eax
  10092a:	74 55                	je     100981 <kprintf+0xc3>
  10092c:	e9 9d 00 00 00       	jmp    1009ce <kprintf+0x110>
  100931:	83 f8 75             	cmp    $0x75,%eax
  100934:	74 28                	je     10095e <kprintf+0xa0>
  100936:	83 f8 78             	cmp    $0x78,%eax
  100939:	74 46                	je     100981 <kprintf+0xc3>
  10093b:	e9 8e 00 00 00       	jmp    1009ce <kprintf+0x110>
        case 's':
          s = va_arg(ap, char*);
  100940:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100943:	8d 50 04             	lea    0x4(%eax),%edx
  100946:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100949:	8b 00                	mov    (%eax),%eax
  10094b:	89 45 fc             	mov    %eax,-0x4(%ebp)
          kputs(s);
  10094e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100951:	89 04 24             	mov    %eax,(%esp)
  100954:	e8 92 fe ff ff       	call   1007eb <kputs>
          break;
  100959:	e9 8e 00 00 00       	jmp    1009ec <kprintf+0x12e>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  10095e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100961:	8d 50 04             	lea    0x4(%eax),%edx
  100964:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100967:	8b 00                	mov    (%eax),%eax
  100969:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 10);
  10096c:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100973:	00 
  100974:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100977:	89 04 24             	mov    %eax,(%esp)
  10097a:	e8 97 fe ff ff       	call   100816 <kputn>
          break;
  10097f:	eb 6b                	jmp    1009ec <kprintf+0x12e>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  100981:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100984:	8d 50 04             	lea    0x4(%eax),%edx
  100987:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10098a:	8b 00                	mov    (%eax),%eax
  10098c:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 16);
  10098f:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  100996:	00 
  100997:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10099a:	89 04 24             	mov    %eax,(%esp)
  10099d:	e8 74 fe ff ff       	call   100816 <kputn>
          break;
  1009a2:	eb 48                	jmp    1009ec <kprintf+0x12e>
        case 'c':
          c = va_arg(ap, int);
  1009a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1009a7:	8d 50 04             	lea    0x4(%eax),%edx
  1009aa:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1009ad:	8b 00                	mov    (%eax),%eax
  1009af:	88 45 f7             	mov    %al,-0x9(%ebp)
          kputc(c);
  1009b2:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
  1009b6:	89 04 24             	mov    %eax,(%esp)
  1009b9:	e8 16 fd ff ff       	call   1006d4 <kputc>
          break;
  1009be:	eb 2c                	jmp    1009ec <kprintf+0x12e>
        case '%':
          kputc('%');
  1009c0:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1009c7:	e8 08 fd ff ff       	call   1006d4 <kputc>
          break;
  1009cc:	eb 1e                	jmp    1009ec <kprintf+0x12e>
        case '\0':
          goto out;
        default:
          kputc('%');
  1009ce:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1009d5:	e8 fa fc ff ff       	call   1006d4 <kputc>
          kputc(*fmt);
  1009da:	8b 45 08             	mov    0x8(%ebp),%eax
  1009dd:	0f b6 00             	movzbl (%eax),%eax
  1009e0:	0f be c0             	movsbl %al,%eax
  1009e3:	89 04 24             	mov    %eax,(%esp)
  1009e6:	e8 e9 fc ff ff       	call   1006d4 <kputc>
          break;
  1009eb:	90                   	nop
  1009ec:	eb 11                	jmp    1009ff <kprintf+0x141>
      }
    } else {
      kputc(*fmt);
  1009ee:	8b 45 08             	mov    0x8(%ebp),%eax
  1009f1:	0f b6 00             	movzbl (%eax),%eax
  1009f4:	0f be c0             	movsbl %al,%eax
  1009f7:	89 04 24             	mov    %eax,(%esp)
  1009fa:	e8 d5 fc ff ff       	call   1006d4 <kputc>
    }

    fmt++;
  1009ff:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;

  va_start(ap, fmt);
  kprintf_res = 0;
  while (*fmt) {
  100a03:	8b 45 08             	mov    0x8(%ebp),%eax
  100a06:	0f b6 00             	movzbl (%eax),%eax
  100a09:	84 c0                	test   %al,%al
  100a0b:	0f 85 c8 fe ff ff    	jne    1008d9 <kprintf+0x1b>
  100a11:	eb 01                	jmp    100a14 <kprintf+0x156>
          break;
        case '%':
          kputc('%');
          break;
        case '\0':
          goto out;
  100a13:	90                   	nop
  }

out:
  va_end(ap);

  return kprintf_res;
  100a14:	a1 20 40 10 00       	mov    0x104020,%eax
}
  100a19:	c9                   	leave  
  100a1a:	c3                   	ret    

00100a1b <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100a1b:	55                   	push   %ebp
  100a1c:	89 e5                	mov    %esp,%ebp
  100a1e:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  100a21:	8b 45 08             	mov    0x8(%ebp),%eax
  100a24:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100a27:	eb 0e                	jmp    100a37 <memset+0x1c>
        *p++ = c;
  100a29:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100a2c:	8d 50 01             	lea    0x1(%eax),%edx
  100a2f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100a32:	8b 55 0c             	mov    0xc(%ebp),%edx
  100a35:	88 10                	mov    %dl,(%eax)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100a37:	8b 45 10             	mov    0x10(%ebp),%eax
  100a3a:	8d 50 ff             	lea    -0x1(%eax),%edx
  100a3d:	89 55 10             	mov    %edx,0x10(%ebp)
  100a40:	85 c0                	test   %eax,%eax
  100a42:	75 e5                	jne    100a29 <memset+0xe>
        *p++ = c;
    }

    return buf;
  100a44:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100a47:	c9                   	leave  
  100a48:	c3                   	ret    

00100a49 <memcpy>:

static inline void* memcpy(void* dest, const void* src, size_t n)
{
  100a49:	55                   	push   %ebp
  100a4a:	89 e5                	mov    %esp,%ebp
  100a4c:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
  100a4f:	8b 45 08             	mov    0x8(%ebp),%eax
  100a52:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const unsigned char* s = src;
  100a55:	8b 45 0c             	mov    0xc(%ebp),%eax
  100a58:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (n--) {
  100a5b:	eb 17                	jmp    100a74 <memcpy+0x2b>
        *d++ = *s++;
  100a5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100a60:	8d 50 01             	lea    0x1(%eax),%edx
  100a63:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100a66:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100a69:	8d 4a 01             	lea    0x1(%edx),%ecx
  100a6c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100a6f:	0f b6 12             	movzbl (%edx),%edx
  100a72:	88 10                	mov    %dl,(%eax)
static inline void* memcpy(void* dest, const void* src, size_t n)
{
    unsigned char* d = dest;
    const unsigned char* s = src;

    while (n--) {
  100a74:	8b 45 10             	mov    0x10(%ebp),%eax
  100a77:	8d 50 ff             	lea    -0x1(%eax),%edx
  100a7a:	89 55 10             	mov    %edx,0x10(%ebp)
  100a7d:	85 c0                	test   %eax,%eax
  100a7f:	75 dc                	jne    100a5d <memcpy+0x14>
        *d++ = *s++;
    }

    return dest;
  100a81:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100a84:	c9                   	leave  
  100a85:	c3                   	ret    

00100a86 <syscall>:
#include "string.h"
#include "elf.h"
#include "vmm.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  100a86:	55                   	push   %ebp
  100a87:	89 e5                	mov    %esp,%ebp
  100a89:	83 ec 18             	sub    $0x18,%esp
    switch (cpu->eax) {
  100a8c:	8b 45 08             	mov    0x8(%ebp),%eax
  100a8f:	8b 00                	mov    (%eax),%eax
  100a91:	85 c0                	test   %eax,%eax
  100a93:	75 17                	jne    100aac <syscall+0x26>
        case 0: /* putc */
            kprintf("%c", cpu->ebx);
  100a95:	8b 45 08             	mov    0x8(%ebp),%eax
  100a98:	8b 40 04             	mov    0x4(%eax),%eax
  100a9b:	89 44 24 04          	mov    %eax,0x4(%esp)
  100a9f:	c7 04 24 65 30 10 00 	movl   $0x103065,(%esp)
  100aa6:	e8 13 fe ff ff       	call   1008be <kprintf>
            break;
  100aab:	90                   	nop
    }
 
    return cpu;
  100aac:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100aaf:	c9                   	leave  
  100ab0:	c3                   	ret    

00100ab1 <init_elf>:

void init_elf(void* image)
{
  100ab1:	55                   	push   %ebp
  100ab2:	89 e5                	mov    %esp,%ebp
  100ab4:	83 ec 38             	sub    $0x38,%esp
    /*
     * FIXME Wir muessen eigentlich die Laenge vom Image pruefen, damit wir bei
     * korrupten ELF-Dateien nicht ueber das Dateiende hinauslesen.
     */
 
    struct elf_header* header = image;
  100ab7:	8b 45 08             	mov    0x8(%ebp),%eax
  100aba:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct elf_program_header* ph;
    int i;
 
    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  100abd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ac0:	8b 00                	mov    (%eax),%eax
  100ac2:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  100ac7:	74 11                	je     100ada <init_elf+0x29>
        kprintf("Keine gueltige ELF-Magic!\n");
  100ac9:	c7 04 24 68 30 10 00 	movl   $0x103068,(%esp)
  100ad0:	e8 e9 fd ff ff       	call   1008be <kprintf>
        return;
  100ad5:	e9 8a 00 00 00       	jmp    100b64 <init_elf+0xb3>
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
  100ada:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100add:	8b 50 1c             	mov    0x1c(%eax),%edx
  100ae0:	8b 45 08             	mov    0x8(%ebp),%eax
  100ae3:	01 d0                	add    %edx,%eax
  100ae5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100ae8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100aef:	eb 64                	jmp    100b55 <init_elf+0xa4>
        void* dest = (void*) ph->virt_addr;
  100af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100af4:	8b 40 08             	mov    0x8(%eax),%eax
  100af7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        void* src = ((char*) image) + ph->offset;
  100afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100afd:	8b 50 04             	mov    0x4(%eax),%edx
  100b00:	8b 45 08             	mov    0x8(%ebp),%eax
  100b03:	01 d0                	add    %edx,%eax
  100b05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  100b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b0b:	8b 00                	mov    (%eax),%eax
  100b0d:	83 f8 01             	cmp    $0x1,%eax
  100b10:	74 02                	je     100b14 <init_elf+0x63>
            continue;
  100b12:	eb 39                	jmp    100b4d <init_elf+0x9c>
        }
 
        memset(dest, 0, ph->mem_size);
  100b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b17:	8b 40 14             	mov    0x14(%eax),%eax
  100b1a:	89 44 24 08          	mov    %eax,0x8(%esp)
  100b1e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100b25:	00 
  100b26:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b29:	89 04 24             	mov    %eax,(%esp)
  100b2c:	e8 ea fe ff ff       	call   100a1b <memset>
        memcpy(dest, src, ph->file_size);
  100b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b34:	8b 40 10             	mov    0x10(%eax),%eax
  100b37:	89 44 24 08          	mov    %eax,0x8(%esp)
  100b3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b3e:	89 44 24 04          	mov    %eax,0x4(%esp)
  100b42:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b45:	89 04 24             	mov    %eax,(%esp)
  100b48:	e8 fc fe ff ff       	call   100a49 <memcpy>
        kprintf("Keine gueltige ELF-Magic!\n");
        return;
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100b4d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  100b51:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
  100b55:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100b58:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  100b5c:	0f b7 c0             	movzwl %ax,%eax
  100b5f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100b62:	7f 8d                	jg     100af1 <init_elf+0x40>
        memset(dest, 0, ph->mem_size);
        memcpy(dest, src, ph->file_size);
    }
 
    //init_task((void*) header->entry);
}
  100b64:	c9                   	leave  
  100b65:	c3                   	ret    

00100b66 <task>:

void task() {
  100b66:	55                   	push   %ebp
  100b67:	89 e5                	mov    %esp,%ebp
  100b69:	83 ec 18             	sub    $0x18,%esp
  kprintf("task");
  100b6c:	c7 04 24 83 30 10 00 	movl   $0x103083,(%esp)
  100b73:	e8 46 fd ff ff       	call   1008be <kprintf>
  
  while(1) { }
  100b78:	eb fe                	jmp    100b78 <task+0x12>

00100b7a <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  100b7a:	55                   	push   %ebp
  100b7b:	89 e5                	mov    %esp,%ebp
  100b7d:	83 ec 18             	sub    $0x18,%esp
	vmm_init(mb_info);
  100b80:	8b 45 08             	mov    0x8(%ebp),%eax
  100b83:	89 04 24             	mov    %eax,(%esp)
  100b86:	e8 93 03 00 00       	call   100f1e <vmm_init>

	kprintf("abc");
  100b8b:	c7 04 24 88 30 10 00 	movl   $0x103088,(%esp)
  100b92:	e8 27 fd ff ff       	call   1008be <kprintf>

	while(1) {  }
  100b97:	eb fe                	jmp    100b97 <kernel_main+0x1d>

00100b99 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  100b99:	55                   	push   %ebp
  100b9a:	89 e5                	mov    %esp,%ebp
  100b9c:	83 ec 10             	sub    $0x10,%esp
	struct {
		  uint16_t limit;
		  void* pointer;
	} __attribute__((packed)) gdtp = {
  100b9f:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
  100ba5:	c7 45 fc 60 64 12 00 	movl   $0x126460,-0x4(%ebp)
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
	asm volatile("lgdt %0" : : "m" (gdtp));
  100bac:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

	asm ("mov $0x10, %ax");
  100bb0:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100bb4:	8e d8                	mov    %eax,%ds
	asm ("mov %ax, %es");
  100bb6:	8e c0                	mov    %eax,%es
	asm ("mov %ax, %fs");
  100bb8:	8e e0                	mov    %eax,%fs
	asm ("mov %ax, %gs");
  100bba:	8e e8                	mov    %eax,%gs
	asm ("mov %ax, %ss");
  100bbc:	8e d0                	mov    %eax,%ss
	asm ("ljmp $0x8, $.1");
  100bbe:	ea c5 0b 10 00 08 00 	ljmp   $0x8,$0x100bc5

00100bc5 <.1>:
	asm (".1:");
}
  100bc5:	c9                   	leave  
  100bc6:	c3                   	ret    

00100bc7 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  100bc7:	55                   	push   %ebp
  100bc8:	89 e5                	mov    %esp,%ebp
  100bca:	57                   	push   %edi
  100bcb:	56                   	push   %esi
  100bcc:	53                   	push   %ebx
  100bcd:	83 ec 4c             	sub    $0x4c,%esp
    gdt[i] = limit & 0xffffLL;
  100bd0:	8b 45 10             	mov    0x10(%ebp),%eax
  100bd3:	ba 00 00 00 00       	mov    $0x0,%edx
  100bd8:	0f b7 c8             	movzwl %ax,%ecx
  100bdb:	89 d0                	mov    %edx,%eax
  100bdd:	83 e0 00             	and    $0x0,%eax
  100be0:	89 c3                	mov    %eax,%ebx
  100be2:	8b 45 08             	mov    0x8(%ebp),%eax
  100be5:	89 0c c5 60 64 12 00 	mov    %ecx,0x126460(,%eax,8)
  100bec:	89 1c c5 64 64 12 00 	mov    %ebx,0x126464(,%eax,8)
    gdt[i] |= (base & 0xffffffLL) << 16;
  100bf3:	8b 45 08             	mov    0x8(%ebp),%eax
  100bf6:	8b 14 c5 64 64 12 00 	mov    0x126464(,%eax,8),%edx
  100bfd:	8b 04 c5 60 64 12 00 	mov    0x126460(,%eax,8),%eax
  100c04:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100c07:	89 55 ac             	mov    %edx,-0x54(%ebp)
  100c0a:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c0d:	ba 00 00 00 00       	mov    $0x0,%edx
  100c12:	89 c3                	mov    %eax,%ebx
  100c14:	81 e3 ff ff ff 00    	and    $0xffffff,%ebx
  100c1a:	89 de                	mov    %ebx,%esi
  100c1c:	89 d0                	mov    %edx,%eax
  100c1e:	83 e0 00             	and    $0x0,%eax
  100c21:	89 c7                	mov    %eax,%edi
  100c23:	89 f0                	mov    %esi,%eax
  100c25:	89 fa                	mov    %edi,%edx
  100c27:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  100c2b:	c1 e0 10             	shl    $0x10,%eax
  100c2e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  100c31:	8b 5d ac             	mov    -0x54(%ebp),%ebx
  100c34:	89 cf                	mov    %ecx,%edi
  100c36:	09 c7                	or     %eax,%edi
  100c38:	89 7d e8             	mov    %edi,-0x18(%ebp)
  100c3b:	89 df                	mov    %ebx,%edi
  100c3d:	09 d7                	or     %edx,%edi
  100c3f:	89 7d ec             	mov    %edi,-0x14(%ebp)
  100c42:	8b 45 08             	mov    0x8(%ebp),%eax
  100c45:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  100c48:	8b 75 ec             	mov    -0x14(%ebp),%esi
  100c4b:	89 1c c5 60 64 12 00 	mov    %ebx,0x126460(,%eax,8)
  100c52:	89 34 c5 64 64 12 00 	mov    %esi,0x126464(,%eax,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  100c59:	8b 45 08             	mov    0x8(%ebp),%eax
  100c5c:	8b 0c c5 60 64 12 00 	mov    0x126460(,%eax,8),%ecx
  100c63:	8b 1c c5 64 64 12 00 	mov    0x126464(,%eax,8),%ebx
  100c6a:	8b 45 14             	mov    0x14(%ebp),%eax
  100c6d:	99                   	cltd   
  100c6e:	0f b6 f8             	movzbl %al,%edi
  100c71:	89 7d e0             	mov    %edi,-0x20(%ebp)
  100c74:	89 d0                	mov    %edx,%eax
  100c76:	83 e0 00             	and    $0x0,%eax
  100c79:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100c7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100c7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100c82:	89 c2                	mov    %eax,%edx
  100c84:	b8 00 00 00 00       	mov    $0x0,%eax
  100c89:	c1 e2 08             	shl    $0x8,%edx
  100c8c:	89 cf                	mov    %ecx,%edi
  100c8e:	09 c7                	or     %eax,%edi
  100c90:	89 7d d8             	mov    %edi,-0x28(%ebp)
  100c93:	89 df                	mov    %ebx,%edi
  100c95:	09 d7                	or     %edx,%edi
  100c97:	89 7d dc             	mov    %edi,-0x24(%ebp)
  100c9a:	8b 45 08             	mov    0x8(%ebp),%eax
  100c9d:	8b 5d d8             	mov    -0x28(%ebp),%ebx
  100ca0:	8b 75 dc             	mov    -0x24(%ebp),%esi
  100ca3:	89 1c c5 60 64 12 00 	mov    %ebx,0x126460(,%eax,8)
  100caa:	89 34 c5 64 64 12 00 	mov    %esi,0x126464(,%eax,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100cb1:	8b 45 08             	mov    0x8(%ebp),%eax
  100cb4:	8b 0c c5 60 64 12 00 	mov    0x126460(,%eax,8),%ecx
  100cbb:	8b 1c c5 64 64 12 00 	mov    0x126464(,%eax,8),%ebx
  100cc2:	8b 45 10             	mov    0x10(%ebp),%eax
  100cc5:	c1 e8 10             	shr    $0x10,%eax
  100cc8:	ba 00 00 00 00       	mov    $0x0,%edx
  100ccd:	89 c7                	mov    %eax,%edi
  100ccf:	83 e7 0f             	and    $0xf,%edi
  100cd2:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100cd5:	89 d0                	mov    %edx,%eax
  100cd7:	83 e0 00             	and    $0x0,%eax
  100cda:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100cdd:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100ce0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100ce3:	89 c2                	mov    %eax,%edx
  100ce5:	b8 00 00 00 00       	mov    $0x0,%eax
  100cea:	c1 e2 10             	shl    $0x10,%edx
  100ced:	89 ce                	mov    %ecx,%esi
  100cef:	09 c6                	or     %eax,%esi
  100cf1:	89 75 c8             	mov    %esi,-0x38(%ebp)
  100cf4:	09 d3                	or     %edx,%ebx
  100cf6:	89 5d cc             	mov    %ebx,-0x34(%ebp)
  100cf9:	8b 45 08             	mov    0x8(%ebp),%eax
  100cfc:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  100cff:	8b 75 cc             	mov    -0x34(%ebp),%esi
  100d02:	89 1c c5 60 64 12 00 	mov    %ebx,0x126460(,%eax,8)
  100d09:	89 34 c5 64 64 12 00 	mov    %esi,0x126464(,%eax,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  100d10:	8b 45 08             	mov    0x8(%ebp),%eax
  100d13:	8b 0c c5 60 64 12 00 	mov    0x126460(,%eax,8),%ecx
  100d1a:	8b 1c c5 64 64 12 00 	mov    0x126464(,%eax,8),%ebx
  100d21:	8b 45 14             	mov    0x14(%ebp),%eax
  100d24:	c1 f8 08             	sar    $0x8,%eax
  100d27:	99                   	cltd   
  100d28:	0f b6 f0             	movzbl %al,%esi
  100d2b:	89 75 c0             	mov    %esi,-0x40(%ebp)
  100d2e:	89 d0                	mov    %edx,%eax
  100d30:	83 e0 00             	and    $0x0,%eax
  100d33:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100d36:	8b 45 c0             	mov    -0x40(%ebp),%eax
  100d39:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  100d3c:	89 c2                	mov    %eax,%edx
  100d3e:	b8 00 00 00 00       	mov    $0x0,%eax
  100d43:	c1 e2 14             	shl    $0x14,%edx
  100d46:	89 cf                	mov    %ecx,%edi
  100d48:	09 c7                	or     %eax,%edi
  100d4a:	89 7d b8             	mov    %edi,-0x48(%ebp)
  100d4d:	09 d3                	or     %edx,%ebx
  100d4f:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  100d52:	8b 45 08             	mov    0x8(%ebp),%eax
  100d55:	8b 5d b8             	mov    -0x48(%ebp),%ebx
  100d58:	8b 75 bc             	mov    -0x44(%ebp),%esi
  100d5b:	89 1c c5 60 64 12 00 	mov    %ebx,0x126460(,%eax,8)
  100d62:	89 34 c5 64 64 12 00 	mov    %esi,0x126464(,%eax,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100d69:	8b 45 08             	mov    0x8(%ebp),%eax
  100d6c:	8b 0c c5 60 64 12 00 	mov    0x126460(,%eax,8),%ecx
  100d73:	8b 1c c5 64 64 12 00 	mov    0x126464(,%eax,8),%ebx
  100d7a:	8b 45 0c             	mov    0xc(%ebp),%eax
  100d7d:	c1 e8 18             	shr    $0x18,%eax
  100d80:	ba 00 00 00 00       	mov    $0x0,%edx
  100d85:	89 c2                	mov    %eax,%edx
  100d87:	b8 00 00 00 00       	mov    $0x0,%eax
  100d8c:	c1 e2 18             	shl    $0x18,%edx
  100d8f:	89 ce                	mov    %ecx,%esi
  100d91:	09 c6                	or     %eax,%esi
  100d93:	89 75 b0             	mov    %esi,-0x50(%ebp)
  100d96:	89 d9                	mov    %ebx,%ecx
  100d98:	09 d1                	or     %edx,%ecx
  100d9a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  100d9d:	8b 45 08             	mov    0x8(%ebp),%eax
  100da0:	8b 5d b0             	mov    -0x50(%ebp),%ebx
  100da3:	8b 75 b4             	mov    -0x4c(%ebp),%esi
  100da6:	89 1c c5 60 64 12 00 	mov    %ebx,0x126460(,%eax,8)
  100dad:	89 34 c5 64 64 12 00 	mov    %esi,0x126464(,%eax,8)
}
  100db4:	83 c4 4c             	add    $0x4c,%esp
  100db7:	5b                   	pop    %ebx
  100db8:	5e                   	pop    %esi
  100db9:	5f                   	pop    %edi
  100dba:	5d                   	pop    %ebp
  100dbb:	c3                   	ret    

00100dbc <init_gdt>:

void init_gdt(void)
{
  100dbc:	55                   	push   %ebp
  100dbd:	89 e5                	mov    %esp,%ebp
  100dbf:	83 ec 10             	sub    $0x10,%esp
    set_gdt_entry(0, 0, 0, 0);
  100dc2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100dc9:	00 
  100dca:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100dd1:	00 
  100dd2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100dd9:	00 
  100dda:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100de1:	e8 e1 fd ff ff       	call   100bc7 <set_gdt_entry>
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100de6:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100ded:	00 
  100dee:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100df5:	00 
  100df6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100dfd:	00 
  100dfe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100e05:	e8 bd fd ff ff       	call   100bc7 <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100e0a:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  100e11:	00 
  100e12:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100e19:	00 
  100e1a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100e21:	00 
  100e22:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100e29:	e8 99 fd ff ff       	call   100bc7 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100e2e:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  100e35:	00 
  100e36:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100e3d:	00 
  100e3e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100e45:	00 
  100e46:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100e4d:	e8 75 fd ff ff       	call   100bc7 <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100e52:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  100e59:	00 
  100e5a:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100e61:	00 
  100e62:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100e69:	00 
  100e6a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  100e71:	e8 51 fd ff ff       	call   100bc7 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  100e76:	e8 1e fd ff ff       	call   100b99 <load_gdt>
}
  100e7b:	c9                   	leave  
  100e7c:	c3                   	ret    

00100e7d <vmm_create_context>:
#define ACTIVE_CONTEXT_VADDR 0x200000

extern const kernel_end;

struct vmm_context* vmm_create_context(void)
{
  100e7d:	55                   	push   %ebp
  100e7e:	89 e5                	mov    %esp,%ebp
  100e80:	83 ec 18             	sub    $0x18,%esp
  struct vmm_context* context = pmm_alloc();
  100e83:	e8 b2 f1 ff ff       	call   10003a <pmm_alloc>
  100e88:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int i;

  /* Page Directory anlegen und mit Nullen initialisieren */
  context->pagedir = pmm_alloc();
  100e8b:	e8 aa f1 ff ff       	call   10003a <pmm_alloc>
  100e90:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100e93:	89 02                	mov    %eax,(%edx)
  for (i = 0; i < 1024; i++) {
  100e95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100e9c:	eb 04                	jmp    100ea2 <vmm_create_context+0x25>
  100e9e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100ea2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100ea9:	7e f3                	jle    100e9e <vmm_create_context+0x21>
      //context->pagedir[i] = pmm_alloc() | PD_EXIST | PD_WRITE | PD_PUBLIC;
  }

  return context;
  100eab:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  100eae:	c9                   	leave  
  100eaf:	c3                   	ret    

00100eb0 <map_address_context>:

void map_address_context(struct vmm_context* context, uint32_t vaddr, uint32_t paddr) {
  100eb0:	55                   	push   %ebp
  100eb1:	89 e5                	mov    %esp,%ebp
  100eb3:	83 ec 10             	sub    $0x10,%esp
  uint32_t pd_entry =  vaddr >> 22;
  100eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
  100eb9:	c1 e8 16             	shr    $0x16,%eax
  100ebc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  100ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
  100ec2:	c1 e8 0c             	shr    $0xc,%eax
  100ec5:	25 ff 03 00 00       	and    $0x3ff,%eax
  100eca:	89 45 f8             	mov    %eax,-0x8(%ebp)
  
  ((uint32_t*)(context->pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_EXIST | PT_WRITE | PT_PUBLIC;
  100ecd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ed0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100ed7:	8b 45 08             	mov    0x8(%ebp),%eax
  100eda:	8b 00                	mov    (%eax),%eax
  100edc:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100edf:	c1 e2 02             	shl    $0x2,%edx
  100ee2:	01 d0                	add    %edx,%eax
  100ee4:	8b 00                	mov    (%eax),%eax
  100ee6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100eeb:	01 c8                	add    %ecx,%eax
  100eed:	8b 55 10             	mov    0x10(%ebp),%edx
  100ef0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100ef6:	83 ca 07             	or     $0x7,%edx
  100ef9:	89 10                	mov    %edx,(%eax)
}
  100efb:	c9                   	leave  
  100efc:	c3                   	ret    

00100efd <map_address_active>:

void map_address_active(uint32_t vaddr, uint32_t paddr) {  
  100efd:	55                   	push   %ebp
  100efe:	89 e5                	mov    %esp,%ebp
  ((uint32_t*)(ACTIVE_CONTEXT_VADDR))[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_EXIST | PT_WRITE | PT_PUBLIC;
  100f00:	8b 45 08             	mov    0x8(%ebp),%eax
  100f03:	c1 e8 0c             	shr    $0xc,%eax
  100f06:	c1 e0 02             	shl    $0x2,%eax
  100f09:	05 00 00 20 00       	add    $0x200000,%eax
  100f0e:	8b 55 0c             	mov    0xc(%ebp),%edx
  100f11:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100f17:	83 ca 07             	or     $0x7,%edx
  100f1a:	89 10                	mov    %edx,(%eax)
}
  100f1c:	5d                   	pop    %ebp
  100f1d:	c3                   	ret    

00100f1e <vmm_init>:

void vmm_init(struct multiboot_info* mb_info)
{
  100f1e:	55                   	push   %ebp
  100f1f:	89 e5                	mov    %esp,%ebp
  100f21:	53                   	push   %ebx
  100f22:	83 ec 34             	sub    $0x34,%esp
  struct vmm_context* context = pmm_alloc();
  100f25:	e8 10 f1 ff ff       	call   10003a <pmm_alloc>
  100f2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int i, i2;
  
  context->pagedir = pmm_alloc();
  100f2d:	e8 08 f1 ff ff       	call   10003a <pmm_alloc>
  100f32:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100f35:	89 02                	mov    %eax,(%edx)
  for(i = 0; i < 1024; i++) {
  100f37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100f3e:	eb 58                	jmp    100f98 <vmm_init+0x7a>
    context->pagedir[i] = ((int)pmm_alloc()) | PD_EXIST | PD_WRITE | PD_PUBLIC;
  100f40:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100f43:	8b 00                	mov    (%eax),%eax
  100f45:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100f48:	c1 e2 02             	shl    $0x2,%edx
  100f4b:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
  100f4e:	e8 e7 f0 ff ff       	call   10003a <pmm_alloc>
  100f53:	83 c8 07             	or     $0x7,%eax
  100f56:	89 03                	mov    %eax,(%ebx)
    for(i2 = 0; i2 < 1024; i2++) {
  100f58:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100f5f:	eb 2a                	jmp    100f8b <vmm_init+0x6d>
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = 0;
  100f61:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f64:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100f6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100f6e:	8b 00                	mov    (%eax),%eax
  100f70:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100f73:	c1 e2 02             	shl    $0x2,%edx
  100f76:	01 d0                	add    %edx,%eax
  100f78:	8b 00                	mov    (%eax),%eax
  100f7a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100f7f:	01 c8                	add    %ecx,%eax
  100f81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  int i, i2;
  
  context->pagedir = pmm_alloc();
  for(i = 0; i < 1024; i++) {
    context->pagedir[i] = ((int)pmm_alloc()) | PD_EXIST | PD_WRITE | PD_PUBLIC;
    for(i2 = 0; i2 < 1024; i2++) {
  100f87:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  100f8b:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  100f92:	7e cd                	jle    100f61 <vmm_init+0x43>
{
  struct vmm_context* context = pmm_alloc();
  int i, i2;
  
  context->pagedir = pmm_alloc();
  for(i = 0; i < 1024; i++) {
  100f94:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100f98:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100f9f:	7e 9f                	jle    100f40 <vmm_init+0x22>
    for(i2 = 0; i2 < 1024; i2++) {
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = 0;
    }
  }
  
  for(i = 0x0000; i < &kernel_end; i += 0x1000) {
  100fa1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100fa8:	eb 20                	jmp    100fca <vmm_init+0xac>
    map_address_context(context, i, i);
  100faa:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100fb0:	89 54 24 08          	mov    %edx,0x8(%esp)
  100fb4:	89 44 24 04          	mov    %eax,0x4(%esp)
  100fb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100fbb:	89 04 24             	mov    %eax,(%esp)
  100fbe:	e8 ed fe ff ff       	call   100eb0 <map_address_context>
    for(i2 = 0; i2 < 1024; i2++) {
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = 0;
    }
  }
  
  for(i = 0x0000; i < &kernel_end; i += 0x1000) {
  100fc3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  100fca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100fcd:	3d 00 70 12 00       	cmp    $0x127000,%eax
  100fd2:	72 d6                	jb     100faa <vmm_init+0x8c>
    map_address_context(context, i, i);
  }
  
  for(i = 0; i < 1024; i++) {
  100fd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100fdb:	eb 63                	jmp    101040 <vmm_init+0x122>
    for(i2 = 0; i2 < 1024; i2++) {
  100fdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100fe4:	eb 4d                	jmp    101033 <vmm_init+0x115>
      map_address_context(context, ACTIVE_CONTEXT_VADDR + i * 0x1000 + i2 * 0x4, &((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2]);
  100fe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fe9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
  100ff0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ff3:	8b 00                	mov    (%eax),%eax
  100ff5:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100ff8:	c1 e2 02             	shl    $0x2,%edx
  100ffb:	01 d0                	add    %edx,%eax
  100ffd:	8b 00                	mov    (%eax),%eax
  100fff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  101004:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  101007:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10100a:	05 00 02 00 00       	add    $0x200,%eax
  10100f:	c1 e0 0a             	shl    $0xa,%eax
  101012:	89 c1                	mov    %eax,%ecx
  101014:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101017:	01 c8                	add    %ecx,%eax
  101019:	c1 e0 02             	shl    $0x2,%eax
  10101c:	89 54 24 08          	mov    %edx,0x8(%esp)
  101020:	89 44 24 04          	mov    %eax,0x4(%esp)
  101024:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101027:	89 04 24             	mov    %eax,(%esp)
  10102a:	e8 81 fe ff ff       	call   100eb0 <map_address_context>
  for(i = 0x0000; i < &kernel_end; i += 0x1000) {
    map_address_context(context, i, i);
  }
  
  for(i = 0; i < 1024; i++) {
    for(i2 = 0; i2 < 1024; i2++) {
  10102f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  101033:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  10103a:	7e aa                	jle    100fe6 <vmm_init+0xc8>
  
  for(i = 0x0000; i < &kernel_end; i += 0x1000) {
    map_address_context(context, i, i);
  }
  
  for(i = 0; i < 1024; i++) {
  10103c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  101040:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  101047:	7e 94                	jle    100fdd <vmm_init+0xbf>
    for(i2 = 0; i2 < 1024; i2++) {
      map_address_context(context, ACTIVE_CONTEXT_VADDR + i * 0x1000 + i2 * 0x4, &((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2]);
    }
  }
  
  asm volatile("mov %0, %%cr3" : : "r" (context->pagedir));
  101049:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10104c:	8b 00                	mov    (%eax),%eax
  10104e:	0f 22 d8             	mov    %eax,%cr3

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  101051:	0f 20 c0             	mov    %cr0,%eax
  101054:	89 45 e8             	mov    %eax,-0x18(%ebp)
  cr0 |= (1 << 31);
  101057:	81 4d e8 00 00 00 80 	orl    $0x80000000,-0x18(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  10105e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101061:	0f 22 c0             	mov    %eax,%cr0
  
  uint32_t* vptr = 0x8F8000;
  101064:	c7 45 e4 00 80 8f 00 	movl   $0x8f8000,-0x1c(%ebp)
  uint32_t paddr = pmm_alloc();
  10106b:	e8 ca ef ff ff       	call   10003a <pmm_alloc>
  101070:	89 45 e0             	mov    %eax,-0x20(%ebp)
  
  map_address_active(vptr, paddr);
  101073:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101076:	8b 55 e0             	mov    -0x20(%ebp),%edx
  101079:	89 54 24 04          	mov    %edx,0x4(%esp)
  10107d:	89 04 24             	mov    %eax,(%esp)
  101080:	e8 78 fe ff ff       	call   100efd <map_address_active>
  
  *vptr = 0x12345678;
  101085:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101088:	c7 00 78 56 34 12    	movl   $0x12345678,(%eax)
  
  kprintf("%x", *vptr);
  10108e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101091:	8b 00                	mov    (%eax),%eax
  101093:	89 44 24 04          	mov    %eax,0x4(%esp)
  101097:	c7 04 24 8c 30 10 00 	movl   $0x10308c,(%esp)
  10109e:	e8 1b f8 ff ff       	call   1008be <kprintf>
}
  1010a3:	83 c4 34             	add    $0x34,%esp
  1010a6:	5b                   	pop    %ebx
  1010a7:	5d                   	pop    %ebp
  1010a8:	c3                   	ret    

001010a9 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  1010a9:	55                   	push   %ebp
  1010aa:	89 e5                	mov    %esp,%ebp
  1010ac:	83 ec 08             	sub    $0x8,%esp
  1010af:	8b 55 08             	mov    0x8(%ebp),%edx
  1010b2:	8b 45 0c             	mov    0xc(%ebp),%eax
  1010b5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  1010b9:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1010bc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  1010c0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  1010c4:	ee                   	out    %al,(%dx)
}
  1010c5:	c9                   	leave  
  1010c6:	c3                   	ret    

001010c7 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  1010c7:	55                   	push   %ebp
  1010c8:	89 e5                	mov    %esp,%ebp
  1010ca:	57                   	push   %edi
  1010cb:	56                   	push   %esi
  1010cc:	53                   	push   %ebx
  1010cd:	83 ec 34             	sub    $0x34,%esp
  1010d0:	8b 55 10             	mov    0x10(%ebp),%edx
  1010d3:	8b 45 14             	mov    0x14(%ebp),%eax
  1010d6:	66 89 55 dc          	mov    %dx,-0x24(%ebp)
  1010da:	88 45 d8             	mov    %al,-0x28(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  1010dd:	8b 45 0c             	mov    0xc(%ebp),%eax
  1010e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	idt[i] = handler & 0xffffLL;
  1010e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1010e6:	ba 00 00 00 00       	mov    $0x0,%edx
  1010eb:	0f b7 c8             	movzwl %ax,%ecx
  1010ee:	89 d0                	mov    %edx,%eax
  1010f0:	83 e0 00             	and    $0x0,%eax
  1010f3:	89 c3                	mov    %eax,%ebx
  1010f5:	8b 45 08             	mov    0x8(%ebp),%eax
  1010f8:	89 0c c5 40 40 10 00 	mov    %ecx,0x104040(,%eax,8)
  1010ff:	89 1c c5 44 40 10 00 	mov    %ebx,0x104044(,%eax,8)
	idt[i] |= (selector & 0xffffLL) << 16;
  101106:	8b 45 08             	mov    0x8(%ebp),%eax
  101109:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  101110:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  101117:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
  10111b:	ba 00 00 00 00       	mov    $0x0,%edx
  101120:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  101124:	c1 e0 10             	shl    $0x10,%eax
  101127:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10112a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  10112d:	89 c8                	mov    %ecx,%eax
  10112f:	0b 45 d0             	or     -0x30(%ebp),%eax
  101132:	89 c6                	mov    %eax,%esi
  101134:	89 d8                	mov    %ebx,%eax
  101136:	0b 45 d4             	or     -0x2c(%ebp),%eax
  101139:	89 c7                	mov    %eax,%edi
  10113b:	8b 45 08             	mov    0x8(%ebp),%eax
  10113e:	89 34 c5 40 40 10 00 	mov    %esi,0x104040(,%eax,8)
  101145:	89 3c c5 44 40 10 00 	mov    %edi,0x104044(,%eax,8)
	idt[i] |= (flags & 0xffLL) << 40;
  10114c:	8b 45 08             	mov    0x8(%ebp),%eax
  10114f:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  101156:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  10115d:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
  101161:	ba 00 00 00 00       	mov    $0x0,%edx
  101166:	89 c2                	mov    %eax,%edx
  101168:	b8 00 00 00 00       	mov    $0x0,%eax
  10116d:	c1 e2 08             	shl    $0x8,%edx
  101170:	89 cf                	mov    %ecx,%edi
  101172:	09 c7                	or     %eax,%edi
  101174:	89 7d c8             	mov    %edi,-0x38(%ebp)
  101177:	09 d3                	or     %edx,%ebx
  101179:	89 5d cc             	mov    %ebx,-0x34(%ebp)
  10117c:	8b 45 08             	mov    0x8(%ebp),%eax
  10117f:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  101182:	8b 75 cc             	mov    -0x34(%ebp),%esi
  101185:	89 1c c5 40 40 10 00 	mov    %ebx,0x104040(,%eax,8)
  10118c:	89 34 c5 44 40 10 00 	mov    %esi,0x104044(,%eax,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  101193:	8b 45 08             	mov    0x8(%ebp),%eax
  101196:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  10119d:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  1011a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1011a7:	c1 e8 10             	shr    $0x10,%eax
  1011aa:	ba 00 00 00 00       	mov    $0x0,%edx
  1011af:	89 c2                	mov    %eax,%edx
  1011b1:	b8 00 00 00 00       	mov    $0x0,%eax
  1011b6:	c1 e2 10             	shl    $0x10,%edx
  1011b9:	89 cf                	mov    %ecx,%edi
  1011bb:	09 c7                	or     %eax,%edi
  1011bd:	89 7d c0             	mov    %edi,-0x40(%ebp)
  1011c0:	09 d3                	or     %edx,%ebx
  1011c2:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
  1011c5:	8b 45 08             	mov    0x8(%ebp),%eax
  1011c8:	8b 55 c0             	mov    -0x40(%ebp),%edx
  1011cb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  1011ce:	89 14 c5 40 40 10 00 	mov    %edx,0x104040(,%eax,8)
  1011d5:	89 0c c5 44 40 10 00 	mov    %ecx,0x104044(,%eax,8)
}
  1011dc:	83 c4 34             	add    $0x34,%esp
  1011df:	5b                   	pop    %ebx
  1011e0:	5e                   	pop    %esi
  1011e1:	5f                   	pop    %edi
  1011e2:	5d                   	pop    %ebp
  1011e3:	c3                   	ret    

001011e4 <init_idt>:

void init_idt() {
  1011e4:	55                   	push   %ebp
  1011e5:	89 e5                	mov    %esp,%ebp
  1011e7:	83 ec 28             	sub    $0x28,%esp
	struct {
		  unsigned short int limit;
		  void* pointer;
	} __attribute__((packed)) idtp = {
  1011ea:	66 c7 45 ee ff 01    	movw   $0x1ff,-0x12(%ebp)
  1011f0:	c7 45 f0 40 40 10 00 	movl   $0x104040,-0x10(%ebp)
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};

	int i = 0;
  1011f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  1011fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101205:	eb 12                	jmp    101219 <init_idt+0x35>
		handler_set[i] = 0;
  101207:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10120a:	c7 04 85 40 43 10 00 	movl   $0x0,0x104340(,%eax,4)
  101211:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  101215:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  101219:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
  10121d:	7e e8                	jle    101207 <init_idt+0x23>
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  10121f:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  101226:	00 
  101227:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10122e:	e8 76 fe ff ff       	call   1010a9 <outb>
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  101233:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  10123a:	00 
  10123b:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101242:	e8 62 fe ff ff       	call   1010a9 <outb>
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  101247:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  10124e:	00 
  10124f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101256:	e8 4e fe ff ff       	call   1010a9 <outb>
  outb(0x21, 0x01); // ICW 4
  10125b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  101262:	00 
  101263:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10126a:	e8 3a fe ff ff       	call   1010a9 <outb>

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  10126f:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  101276:	00 
  101277:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10127e:	e8 26 fe ff ff       	call   1010a9 <outb>
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101283:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  10128a:	00 
  10128b:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101292:	e8 12 fe ff ff       	call   1010a9 <outb>
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101297:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  10129e:	00 
  10129f:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1012a6:	e8 fe fd ff ff       	call   1010a9 <outb>
  outb(0xa1, 0x01); // ICW 4
  1012ab:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1012b2:	00 
  1012b3:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1012ba:	e8 ea fd ff ff       	call   1010a9 <outb>

  outb(0x20, 0x0);
  1012bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1012c6:	00 
  1012c7:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1012ce:	e8 d6 fd ff ff       	call   1010a9 <outb>
  outb(0xa0, 0x0);
  1012d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1012da:	00 
  1012db:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1012e2:	e8 c2 fd ff ff       	call   1010a9 <outb>

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1012e7:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1012ee:	00 
  1012ef:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1012f6:	00 
  1012f7:	c7 44 24 04 c0 02 10 	movl   $0x1002c0,0x4(%esp)
  1012fe:	00 
  1012ff:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101306:	e8 bc fd ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10130b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101312:	00 
  101313:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10131a:	00 
  10131b:	c7 44 24 04 c9 02 10 	movl   $0x1002c9,0x4(%esp)
  101322:	00 
  101323:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10132a:	e8 98 fd ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10132f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101336:	00 
  101337:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10133e:	00 
  10133f:	c7 44 24 04 d2 02 10 	movl   $0x1002d2,0x4(%esp)
  101346:	00 
  101347:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  10134e:	e8 74 fd ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101353:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10135a:	00 
  10135b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101362:	00 
  101363:	c7 44 24 04 db 02 10 	movl   $0x1002db,0x4(%esp)
  10136a:	00 
  10136b:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  101372:	e8 50 fd ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101377:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10137e:	00 
  10137f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101386:	00 
  101387:	c7 44 24 04 e4 02 10 	movl   $0x1002e4,0x4(%esp)
  10138e:	00 
  10138f:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101396:	e8 2c fd ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10139b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013a2:	00 
  1013a3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013aa:	00 
  1013ab:	c7 44 24 04 ed 02 10 	movl   $0x1002ed,0x4(%esp)
  1013b2:	00 
  1013b3:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1013ba:	e8 08 fd ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1013bf:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013c6:	00 
  1013c7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013ce:	00 
  1013cf:	c7 44 24 04 f6 02 10 	movl   $0x1002f6,0x4(%esp)
  1013d6:	00 
  1013d7:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  1013de:	e8 e4 fc ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1013e3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013ea:	00 
  1013eb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013f2:	00 
  1013f3:	c7 44 24 04 ff 02 10 	movl   $0x1002ff,0x4(%esp)
  1013fa:	00 
  1013fb:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101402:	e8 c0 fc ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101407:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10140e:	00 
  10140f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101416:	00 
  101417:	c7 44 24 04 08 03 10 	movl   $0x100308,0x4(%esp)
  10141e:	00 
  10141f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101426:	e8 9c fc ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10142b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101432:	00 
  101433:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10143a:	00 
  10143b:	c7 44 24 04 0f 03 10 	movl   $0x10030f,0x4(%esp)
  101442:	00 
  101443:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  10144a:	e8 78 fc ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10144f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101456:	00 
  101457:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10145e:	00 
  10145f:	c7 44 24 04 18 03 10 	movl   $0x100318,0x4(%esp)
  101466:	00 
  101467:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  10146e:	e8 54 fc ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101473:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10147a:	00 
  10147b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101482:	00 
  101483:	c7 44 24 04 1f 03 10 	movl   $0x10031f,0x4(%esp)
  10148a:	00 
  10148b:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101492:	e8 30 fc ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101497:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10149e:	00 
  10149f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014a6:	00 
  1014a7:	c7 44 24 04 26 03 10 	movl   $0x100326,0x4(%esp)
  1014ae:	00 
  1014af:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  1014b6:	e8 0c fc ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1014bb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014c2:	00 
  1014c3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014ca:	00 
  1014cb:	c7 44 24 04 2d 03 10 	movl   $0x10032d,0x4(%esp)
  1014d2:	00 
  1014d3:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  1014da:	e8 e8 fb ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1014df:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014e6:	00 
  1014e7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014ee:	00 
  1014ef:	c7 44 24 04 34 03 10 	movl   $0x100334,0x4(%esp)
  1014f6:	00 
  1014f7:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1014fe:	e8 c4 fb ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101503:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10150a:	00 
  10150b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101512:	00 
  101513:	c7 44 24 04 38 03 10 	movl   $0x100338,0x4(%esp)
  10151a:	00 
  10151b:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101522:	e8 a0 fb ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101527:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10152e:	00 
  10152f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101536:	00 
  101537:	c7 44 24 04 3e 03 10 	movl   $0x10033e,0x4(%esp)
  10153e:	00 
  10153f:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  101546:	e8 7c fb ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10154b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101552:	00 
  101553:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10155a:	00 
  10155b:	c7 44 24 04 44 03 10 	movl   $0x100344,0x4(%esp)
  101562:	00 
  101563:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  10156a:	e8 58 fb ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10156f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101576:	00 
  101577:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10157e:	00 
  10157f:	c7 44 24 04 48 03 10 	movl   $0x100348,0x4(%esp)
  101586:	00 
  101587:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  10158e:	e8 34 fb ff ff       	call   1010c7 <idt_set_entry>

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101593:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10159a:	00 
  10159b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015a2:	00 
  1015a3:	c7 44 24 04 4e 03 10 	movl   $0x10034e,0x4(%esp)
  1015aa:	00 
  1015ab:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1015b2:	e8 10 fb ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015b7:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015be:	00 
  1015bf:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015c6:	00 
  1015c7:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  1015ce:	00 
  1015cf:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1015d6:	e8 ec fa ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(34, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015db:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015e2:	00 
  1015e3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015ea:	00 
  1015eb:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  1015f2:	00 
  1015f3:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1015fa:	e8 c8 fa ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(35, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015ff:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101606:	00 
  101607:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10160e:	00 
  10160f:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  101616:	00 
  101617:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  10161e:	e8 a4 fa ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(36, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101623:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10162a:	00 
  10162b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101632:	00 
  101633:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  10163a:	00 
  10163b:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101642:	e8 80 fa ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(37, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101647:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10164e:	00 
  10164f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101656:	00 
  101657:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  10165e:	00 
  10165f:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101666:	e8 5c fa ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(38, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10166b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101672:	00 
  101673:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10167a:	00 
  10167b:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  101682:	00 
  101683:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  10168a:	e8 38 fa ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(39, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10168f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101696:	00 
  101697:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10169e:	00 
  10169f:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  1016a6:	00 
  1016a7:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  1016ae:	e8 14 fa ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(40, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016b3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016ba:	00 
  1016bb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016c2:	00 
  1016c3:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  1016ca:	00 
  1016cb:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  1016d2:	e8 f0 f9 ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(41, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016d7:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016de:	00 
  1016df:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016e6:	00 
  1016e7:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  1016ee:	00 
  1016ef:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  1016f6:	e8 cc f9 ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(42, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016fb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101702:	00 
  101703:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10170a:	00 
  10170b:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  101712:	00 
  101713:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  10171a:	e8 a8 f9 ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(43, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10171f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101726:	00 
  101727:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10172e:	00 
  10172f:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  101736:	00 
  101737:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  10173e:	e8 84 f9 ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(44, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101743:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10174a:	00 
  10174b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101752:	00 
  101753:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  10175a:	00 
  10175b:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101762:	e8 60 f9 ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(45, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101767:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10176e:	00 
  10176f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101776:	00 
  101777:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  10177e:	00 
  10177f:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101786:	e8 3c f9 ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(46, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10178b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101792:	00 
  101793:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10179a:	00 
  10179b:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  1017a2:	00 
  1017a3:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  1017aa:	e8 18 f9 ff ff       	call   1010c7 <idt_set_entry>
  idt_set_entry(47, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017af:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017b6:	00 
  1017b7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017be:	00 
  1017bf:	c7 44 24 04 54 03 10 	movl   $0x100354,0x4(%esp)
  1017c6:	00 
  1017c7:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  1017ce:	e8 f4 f8 ff ff       	call   1010c7 <idt_set_entry>

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  1017d3:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  1017da:	00 
  1017db:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017e2:	00 
  1017e3:	c7 44 24 04 ae 03 10 	movl   $0x1003ae,0x4(%esp)
  1017ea:	00 
  1017eb:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  1017f2:	e8 d0 f8 ff ff       	call   1010c7 <idt_set_entry>

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  1017f7:	b8 20 21 10 00       	mov    $0x102120,%eax
  1017fc:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101803:	00 
  101804:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  10180b:	00 
  10180c:	89 44 24 04          	mov    %eax,0x4(%esp)
  101810:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101817:	e8 ab f3 ff ff       	call   100bc7 <set_gdt_entry>

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  10181c:	b8 28 00 00 00       	mov    $0x28,%eax
  101821:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101824:	0f 01 5d ee          	lidtl  -0x12(%ebp)
	asm volatile("sti");
  101828:	fb                   	sti    
}
  101829:	c9                   	leave  
  10182a:	c3                   	ret    

0010182b <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  10182b:	55                   	push   %ebp
  10182c:	89 e5                	mov    %esp,%ebp
	handlers[i] = fn;
  10182e:	8b 45 08             	mov    0x8(%ebp),%eax
  101831:	8b 55 0c             	mov    0xc(%ebp),%edx
  101834:	89 14 85 40 42 10 00 	mov    %edx,0x104240(,%eax,4)
	handler_set[i] = 1;
  10183b:	8b 45 08             	mov    0x8(%ebp),%eax
  10183e:	c7 04 85 40 43 10 00 	movl   $0x1,0x104340(,%eax,4)
  101845:	01 00 00 00 
}
  101849:	5d                   	pop    %ebp
  10184a:	c3                   	ret    

0010184b <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  10184b:	55                   	push   %ebp
  10184c:	89 e5                	mov    %esp,%ebp
  10184e:	53                   	push   %ebx
  10184f:	83 ec 34             	sub    $0x34,%esp
  struct cpu_state* new_cpu = cpu;
  101852:	8b 45 08             	mov    0x8(%ebp),%eax
  101855:	89 45 f4             	mov    %eax,-0xc(%ebp)

  if (cpu->intr <= 0x1f) {
  101858:	8b 45 08             	mov    0x8(%ebp),%eax
  10185b:	8b 40 1c             	mov    0x1c(%eax),%eax
  10185e:	83 f8 1f             	cmp    $0x1f,%eax
  101861:	0f 87 df 00 00 00    	ja     101946 <handle_interrupt+0xfb>
    kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  101867:	8b 45 08             	mov    0x8(%ebp),%eax
  10186a:	8b 50 20             	mov    0x20(%eax),%edx
  10186d:	8b 45 08             	mov    0x8(%ebp),%eax
  101870:	8b 40 1c             	mov    0x1c(%eax),%eax
  101873:	89 54 24 08          	mov    %edx,0x8(%esp)
  101877:	89 44 24 04          	mov    %eax,0x4(%esp)
  10187b:	c7 04 24 90 30 10 00 	movl   $0x103090,(%esp)
  101882:	e8 37 f0 ff ff       	call   1008be <kprintf>

		kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  101887:	8b 45 08             	mov    0x8(%ebp),%eax
  10188a:	8b 58 0c             	mov    0xc(%eax),%ebx
  10188d:	8b 45 08             	mov    0x8(%ebp),%eax
  101890:	8b 48 08             	mov    0x8(%eax),%ecx
  101893:	8b 45 08             	mov    0x8(%ebp),%eax
  101896:	8b 50 04             	mov    0x4(%eax),%edx
  101899:	8b 45 08             	mov    0x8(%ebp),%eax
  10189c:	8b 00                	mov    (%eax),%eax
  10189e:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1018a2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  1018a6:	89 54 24 08          	mov    %edx,0x8(%esp)
  1018aa:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018ae:	c7 04 24 b4 30 10 00 	movl   $0x1030b4,(%esp)
  1018b5:	e8 04 f0 ff ff       	call   1008be <kprintf>
		kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  1018ba:	8b 45 08             	mov    0x8(%ebp),%eax
  1018bd:	8b 58 24             	mov    0x24(%eax),%ebx
  1018c0:	8b 45 08             	mov    0x8(%ebp),%eax
  1018c3:	8b 48 18             	mov    0x18(%eax),%ecx
  1018c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1018c9:	8b 50 14             	mov    0x14(%eax),%edx
  1018cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1018cf:	8b 40 10             	mov    0x10(%eax),%eax
  1018d2:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1018d6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  1018da:	89 54 24 08          	mov    %edx,0x8(%esp)
  1018de:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018e2:	c7 04 24 d8 30 10 00 	movl   $0x1030d8,(%esp)
  1018e9:	e8 d0 ef ff ff       	call   1008be <kprintf>
		kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  1018ee:	8b 45 08             	mov    0x8(%ebp),%eax
  1018f1:	8b 58 34             	mov    0x34(%eax),%ebx
  1018f4:	8b 45 08             	mov    0x8(%ebp),%eax
  1018f7:	8b 48 30             	mov    0x30(%eax),%ecx
  1018fa:	8b 45 08             	mov    0x8(%ebp),%eax
  1018fd:	8b 50 2c             	mov    0x2c(%eax),%edx
  101900:	8b 45 08             	mov    0x8(%ebp),%eax
  101903:	8b 40 28             	mov    0x28(%eax),%eax
  101906:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  10190a:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  10190e:	89 54 24 08          	mov    %edx,0x8(%esp)
  101912:	89 44 24 04          	mov    %eax,0x4(%esp)
  101916:	c7 04 24 fc 30 10 00 	movl   $0x1030fc,(%esp)
  10191d:	e8 9c ef ff ff       	call   1008be <kprintf>

		uint32_t cr2 = 0;
  101922:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

		asm volatile("mov %%cr2, %0" : "=r" (cr2));
  101929:	0f 20 d0             	mov    %cr2,%eax
  10192c:	89 45 f0             	mov    %eax,-0x10(%ebp)

		kprintf("CR2: %x", cr2);
  10192f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101932:	89 44 24 04          	mov    %eax,0x4(%esp)
  101936:	c7 04 24 1e 31 10 00 	movl   $0x10311e,(%esp)
  10193d:	e8 7c ef ff ff       	call   1008be <kprintf>
	
    while(1) {
      asm volatile("cli; hlt");
  101942:	fa                   	cli    
  101943:	f4                   	hlt    
    }
  101944:	eb fc                	jmp    101942 <handle_interrupt+0xf7>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101946:	8b 45 08             	mov    0x8(%ebp),%eax
  101949:	8b 40 1c             	mov    0x1c(%eax),%eax
  10194c:	83 f8 1f             	cmp    $0x1f,%eax
  10194f:	0f 86 86 00 00 00    	jbe    1019db <handle_interrupt+0x190>
  101955:	8b 45 08             	mov    0x8(%ebp),%eax
  101958:	8b 40 1c             	mov    0x1c(%eax),%eax
  10195b:	83 f8 2f             	cmp    $0x2f,%eax
  10195e:	77 7b                	ja     1019db <handle_interrupt+0x190>
    if (cpu->intr >= 0x28) {
  101960:	8b 45 08             	mov    0x8(%ebp),%eax
  101963:	8b 40 1c             	mov    0x1c(%eax),%eax
  101966:	83 f8 27             	cmp    $0x27,%eax
  101969:	76 14                	jbe    10197f <handle_interrupt+0x134>
      outb(0xa0, 0x20);
  10196b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101972:	00 
  101973:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10197a:	e8 2a f7 ff ff       	call   1010a9 <outb>
    }
    if (cpu->intr == 0x20) {
  10197f:	8b 45 08             	mov    0x8(%ebp),%eax
  101982:	8b 40 1c             	mov    0x1c(%eax),%eax
  101985:	83 f8 20             	cmp    $0x20,%eax
  101988:	75 19                	jne    1019a3 <handle_interrupt+0x158>
      new_cpu = schedule(cpu);
  10198a:	8b 45 08             	mov    0x8(%ebp),%eax
  10198d:	89 04 24             	mov    %eax,(%esp)
  101990:	e8 82 01 00 00       	call   101b17 <schedule>
  101995:	89 45 f4             	mov    %eax,-0xc(%ebp)
      tss[1] = (uint32_t) (new_cpu + 1);
  101998:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10199b:	83 c0 38             	add    $0x38,%eax
  10199e:	a3 24 21 10 00       	mov    %eax,0x102124
    }
    outb(0x20, 0x20);
  1019a3:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1019aa:	00 
  1019ab:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1019b2:	e8 f2 f6 ff ff       	call   1010a9 <outb>
		if(handler_set[cpu->intr]) {
  1019b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1019ba:	8b 40 1c             	mov    0x1c(%eax),%eax
  1019bd:	8b 04 85 40 43 10 00 	mov    0x104340(,%eax,4),%eax
  1019c4:	85 c0                	test   %eax,%eax
  1019c6:	74 11                	je     1019d9 <handle_interrupt+0x18e>
			handlers[cpu->intr]();
  1019c8:	8b 45 08             	mov    0x8(%ebp),%eax
  1019cb:	8b 40 1c             	mov    0x1c(%eax),%eax
  1019ce:	8b 04 85 40 42 10 00 	mov    0x104240(,%eax,4),%eax
  1019d5:	ff d0                	call   *%eax
    if (cpu->intr == 0x20) {
      new_cpu = schedule(cpu);
      tss[1] = (uint32_t) (new_cpu + 1);
    }
    outb(0x20, 0x20);
		if(handler_set[cpu->intr]) {
  1019d7:	eb 2d                	jmp    101a06 <handle_interrupt+0x1bb>
  1019d9:	eb 2b                	jmp    101a06 <handle_interrupt+0x1bb>
			handlers[cpu->intr]();
		}
  } else if (cpu->intr == 0x30) {
  1019db:	8b 45 08             	mov    0x8(%ebp),%eax
  1019de:	8b 40 1c             	mov    0x1c(%eax),%eax
  1019e1:	83 f8 30             	cmp    $0x30,%eax
  1019e4:	75 10                	jne    1019f6 <handle_interrupt+0x1ab>
		new_cpu = syscall(new_cpu);
  1019e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1019e9:	89 04 24             	mov    %eax,(%esp)
  1019ec:	e8 95 f0 ff ff       	call   100a86 <syscall>
  1019f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1019f4:	eb 10                	jmp    101a06 <handle_interrupt+0x1bb>
  } else {
    kprintf("Unbekannter Interrupt\n");
  1019f6:	c7 04 24 26 31 10 00 	movl   $0x103126,(%esp)
  1019fd:	e8 bc ee ff ff       	call   1008be <kprintf>
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  101a02:	fa                   	cli    
  101a03:	f4                   	hlt    
    }
  101a04:	eb fc                	jmp    101a02 <handle_interrupt+0x1b7>
  }  

  return new_cpu;
  101a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  101a09:	83 c4 34             	add    $0x34,%esp
  101a0c:	5b                   	pop    %ebx
  101a0d:	5d                   	pop    %ebp
  101a0e:	c3                   	ret    

00101a0f <init_task>:

static struct task* first_task = NULL;
static struct task* current_task = NULL;

struct task* init_task(void* entry)
{
  101a0f:	55                   	push   %ebp
  101a10:	89 e5                	mov    %esp,%ebp
  101a12:	57                   	push   %edi
  101a13:	53                   	push   %ebx
  101a14:	83 ec 60             	sub    $0x60,%esp
    uint8_t* stack = pmm_alloc(1);
  101a17:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101a1e:	e8 17 e6 ff ff       	call   10003a <pmm_alloc>
  101a23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint8_t* user_stack = pmm_alloc(1);
  101a26:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101a2d:	e8 08 e6 ff ff       	call   10003a <pmm_alloc>
  101a32:	89 45 f0             	mov    %eax,-0x10(%ebp)

		kprintf("entry: %x", (uint32_t) entry);
  101a35:	8b 45 08             	mov    0x8(%ebp),%eax
  101a38:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a3c:	c7 04 24 3d 31 10 00 	movl   $0x10313d,(%esp)
  101a43:	e8 76 ee ff ff       	call   1008be <kprintf>

    struct cpu_state new_state = {
  101a48:	8d 5d b0             	lea    -0x50(%ebp),%ebx
  101a4b:	b8 00 00 00 00       	mov    $0x0,%eax
  101a50:	ba 0e 00 00 00       	mov    $0xe,%edx
  101a55:	89 df                	mov    %ebx,%edi
  101a57:	89 d1                	mov    %edx,%ecx
  101a59:	f3 ab                	rep stos %eax,%es:(%edi)
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
        .eip = (uint32_t) entry,
  101a5b:	8b 45 08             	mov    0x8(%ebp),%eax
    uint8_t* stack = pmm_alloc(1);
    uint8_t* user_stack = pmm_alloc(1);

		kprintf("entry: %x", (uint32_t) entry);

    struct cpu_state new_state = {
  101a5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  101a61:	c7 45 d8 1b 00 00 00 	movl   $0x1b,-0x28(%ebp)
  101a68:	c7 45 dc 00 02 00 00 	movl   $0x200,-0x24(%ebp)
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
  101a6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101a72:	05 00 10 00 00       	add    $0x1000,%eax
    uint8_t* stack = pmm_alloc(1);
    uint8_t* user_stack = pmm_alloc(1);

		kprintf("entry: %x", (uint32_t) entry);

    struct cpu_state new_state = {
  101a77:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101a7a:	c7 45 e4 23 00 00 00 	movl   $0x23,-0x1c(%ebp)
        .ss  = 0x20 | 0x03,

        .eflags = 0x200,
    };

    struct cpu_state* state = (void*) (stack + 4096 - sizeof(new_state));
  101a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101a84:	05 c8 0f 00 00       	add    $0xfc8,%eax
  101a89:	89 45 ec             	mov    %eax,-0x14(%ebp)
    *state = new_state;
  101a8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101a8f:	8b 55 b0             	mov    -0x50(%ebp),%edx
  101a92:	89 10                	mov    %edx,(%eax)
  101a94:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  101a97:	89 50 04             	mov    %edx,0x4(%eax)
  101a9a:	8b 55 b8             	mov    -0x48(%ebp),%edx
  101a9d:	89 50 08             	mov    %edx,0x8(%eax)
  101aa0:	8b 55 bc             	mov    -0x44(%ebp),%edx
  101aa3:	89 50 0c             	mov    %edx,0xc(%eax)
  101aa6:	8b 55 c0             	mov    -0x40(%ebp),%edx
  101aa9:	89 50 10             	mov    %edx,0x10(%eax)
  101aac:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  101aaf:	89 50 14             	mov    %edx,0x14(%eax)
  101ab2:	8b 55 c8             	mov    -0x38(%ebp),%edx
  101ab5:	89 50 18             	mov    %edx,0x18(%eax)
  101ab8:	8b 55 cc             	mov    -0x34(%ebp),%edx
  101abb:	89 50 1c             	mov    %edx,0x1c(%eax)
  101abe:	8b 55 d0             	mov    -0x30(%ebp),%edx
  101ac1:	89 50 20             	mov    %edx,0x20(%eax)
  101ac4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  101ac7:	89 50 24             	mov    %edx,0x24(%eax)
  101aca:	8b 55 d8             	mov    -0x28(%ebp),%edx
  101acd:	89 50 28             	mov    %edx,0x28(%eax)
  101ad0:	8b 55 dc             	mov    -0x24(%ebp),%edx
  101ad3:	89 50 2c             	mov    %edx,0x2c(%eax)
  101ad6:	8b 55 e0             	mov    -0x20(%ebp),%edx
  101ad9:	89 50 30             	mov    %edx,0x30(%eax)
  101adc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  101adf:	89 50 34             	mov    %edx,0x34(%eax)

    struct task* task = pmm_alloc(1);
  101ae2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101ae9:	e8 4c e5 ff ff       	call   10003a <pmm_alloc>
  101aee:	89 45 e8             	mov    %eax,-0x18(%ebp)
    task->cpu_state = state;
  101af1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101af4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101af7:	89 10                	mov    %edx,(%eax)
    task->next = first_task;
  101af9:	8b 15 40 44 10 00    	mov    0x104440,%edx
  101aff:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101b02:	89 50 04             	mov    %edx,0x4(%eax)
    first_task = task;
  101b05:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101b08:	a3 40 44 10 00       	mov    %eax,0x104440
    return task;
  101b0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
  101b10:	83 c4 60             	add    $0x60,%esp
  101b13:	5b                   	pop    %ebx
  101b14:	5f                   	pop    %edi
  101b15:	5d                   	pop    %ebp
  101b16:	c3                   	ret    

00101b17 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu)
{
  101b17:	55                   	push   %ebp
  101b18:	89 e5                	mov    %esp,%ebp
    if(first_task == NULL) return cpu;
  101b1a:	a1 40 44 10 00       	mov    0x104440,%eax
  101b1f:	85 c0                	test   %eax,%eax
  101b21:	75 05                	jne    101b28 <schedule+0x11>
  101b23:	8b 45 08             	mov    0x8(%ebp),%eax
  101b26:	eb 55                	jmp    101b7d <schedule+0x66>
    
    if (current_task != NULL) {
  101b28:	a1 44 44 10 00       	mov    0x104444,%eax
  101b2d:	85 c0                	test   %eax,%eax
  101b2f:	74 0a                	je     101b3b <schedule+0x24>
        current_task->cpu_state = cpu;
  101b31:	a1 44 44 10 00       	mov    0x104444,%eax
  101b36:	8b 55 08             	mov    0x8(%ebp),%edx
  101b39:	89 10                	mov    %edx,(%eax)
    }

    if (current_task == NULL) {
  101b3b:	a1 44 44 10 00       	mov    0x104444,%eax
  101b40:	85 c0                	test   %eax,%eax
  101b42:	75 0c                	jne    101b50 <schedule+0x39>
        current_task = first_task;
  101b44:	a1 40 44 10 00       	mov    0x104440,%eax
  101b49:	a3 44 44 10 00       	mov    %eax,0x104444
  101b4e:	eb 20                	jmp    101b70 <schedule+0x59>
    } else {
        current_task = current_task->next;
  101b50:	a1 44 44 10 00       	mov    0x104444,%eax
  101b55:	8b 40 04             	mov    0x4(%eax),%eax
  101b58:	a3 44 44 10 00       	mov    %eax,0x104444
        if (current_task == NULL) {
  101b5d:	a1 44 44 10 00       	mov    0x104444,%eax
  101b62:	85 c0                	test   %eax,%eax
  101b64:	75 0a                	jne    101b70 <schedule+0x59>
            current_task = first_task;
  101b66:	a1 40 44 10 00       	mov    0x104440,%eax
  101b6b:	a3 44 44 10 00       	mov    %eax,0x104444
        }
    }  

    cpu = current_task->cpu_state;
  101b70:	a1 44 44 10 00       	mov    0x104444,%eax
  101b75:	8b 00                	mov    (%eax),%eax
  101b77:	89 45 08             	mov    %eax,0x8(%ebp)

    return cpu;
  101b7a:	8b 45 08             	mov    0x8(%ebp),%eax
}
  101b7d:	5d                   	pop    %ebp
  101b7e:	c3                   	ret    

00101b7f <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  101b7f:	55                   	push   %ebp
  101b80:	89 e5                	mov    %esp,%ebp
  101b82:	83 ec 08             	sub    $0x8,%esp
	init_keyboard_drv();
  101b85:	e8 f4 ea ff ff       	call   10067e <init_keyboard_drv>
}
  101b8a:	c9                   	leave  
  101b8b:	c3                   	ret    

00101b8c <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  101b8c:	55                   	push   %ebp
  101b8d:	89 e5                	mov    %esp,%ebp
  101b8f:	83 ec 18             	sub    $0x18,%esp
	clrscr();
  101b92:	e8 e7 ec ff ff       	call   10087e <clrscr>
  pmm_init(mb_info);
  101b97:	8b 45 08             	mov    0x8(%ebp),%eax
  101b9a:	89 04 24             	mov    %eax,(%esp)
  101b9d:	e8 d5 e5 ff ff       	call   100177 <pmm_init>

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  101ba2:	c7 44 24 04 48 31 10 	movl   $0x103148,0x4(%esp)
  101ba9:	00 
  101baa:	c7 04 24 54 31 10 00 	movl   $0x103154,(%esp)
  101bb1:	e8 08 ed ff ff       	call   1008be <kprintf>
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  101bb6:	c7 04 24 78 31 10 00 	movl   $0x103178,(%esp)
  101bbd:	e8 fc ec ff ff       	call   1008be <kprintf>

	kprintf("Initializing GDT...\n");
  101bc2:	c7 04 24 b7 31 10 00 	movl   $0x1031b7,(%esp)
  101bc9:	e8 f0 ec ff ff       	call   1008be <kprintf>
	
	init_gdt();
  101bce:	e8 e9 f1 ff ff       	call   100dbc <init_gdt>

	kprintf("Initializing IDT...\n");
  101bd3:	c7 04 24 cc 31 10 00 	movl   $0x1031cc,(%esp)
  101bda:	e8 df ec ff ff       	call   1008be <kprintf>

	init_idt();
  101bdf:	e8 00 f6 ff ff       	call   1011e4 <init_idt>

	kprintf("init_drivers()\n");
  101be4:	c7 04 24 e1 31 10 00 	movl   $0x1031e1,(%esp)
  101beb:	e8 ce ec ff ff       	call   1008be <kprintf>

	init_drivers();
  101bf0:	e8 8a ff ff ff       	call   101b7f <init_drivers>
	
	kprintf("switching to kernel_main()\n");
  101bf5:	c7 04 24 f1 31 10 00 	movl   $0x1031f1,(%esp)
  101bfc:	e8 bd ec ff ff       	call   1008be <kprintf>

	kernel_main(mb_info);
  101c01:	8b 45 08             	mov    0x8(%ebp),%eax
  101c04:	89 04 24             	mov    %eax,(%esp)
  101c07:	e8 6e ef ff ff       	call   100b7a <kernel_main>

  return;
  101c0c:	90                   	nop
}
  101c0d:	c9                   	leave  
  101c0e:	c3                   	ret    

00101c0f <_start>:
  101c0f:	bc 48 64 10 00       	mov    $0x106448,%esp
  101c14:	53                   	push   %ebx
  101c15:	e8 72 ff ff ff       	call   101b8c <init>

00101c1a <_stop>:
  101c1a:	fa                   	cli    
  101c1b:	f4                   	hlt    
  101c1c:	eb fc                	jmp    101c1a <_stop>
