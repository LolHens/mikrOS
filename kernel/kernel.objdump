
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <load_gdt-0xc>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 55                	in     $0x55,%al

0010000c <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  10000c:	55                   	push   %ebp
  10000d:	89 e5                	mov    %esp,%ebp
  10000f:	83 ec 10             	sub    $0x10,%esp
		  uint16_t limit;
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
  100012:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
  100018:	c7 45 fc 40 64 10 00 	movl   $0x106440,-0x4(%ebp)
	asm volatile("lgdt %0" : : "m" (gdtp));
  10001f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

	asm ("mov $0x10, %ax");
  100023:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100027:	8e d8                	mov    %eax,%ds
	asm ("mov %ax, %es");
  100029:	8e c0                	mov    %eax,%es
	asm ("mov %ax, %fs");
  10002b:	8e e0                	mov    %eax,%fs
	asm ("mov %ax, %gs");
  10002d:	8e e8                	mov    %eax,%gs
	asm ("mov %ax, %ss");
  10002f:	8e d0                	mov    %eax,%ss
	asm ("ljmp $0x8, $.1");
  100031:	ea 38 00 10 00 08 00 	ljmp   $0x8,$0x100038

00100038 <.1>:
	asm (".1:");
}
  100038:	c9                   	leave  
  100039:	c3                   	ret    

0010003a <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  10003a:	55                   	push   %ebp
  10003b:	89 e5                	mov    %esp,%ebp
  10003d:	57                   	push   %edi
  10003e:	56                   	push   %esi
  10003f:	53                   	push   %ebx
  100040:	83 ec 4c             	sub    $0x4c,%esp
    gdt[i] = limit & 0xffffLL;
  100043:	8b 45 08             	mov    0x8(%ebp),%eax
  100046:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100049:	8b 45 10             	mov    0x10(%ebp),%eax
  10004c:	ba 00 00 00 00       	mov    $0x0,%edx
  100051:	0f b7 c8             	movzwl %ax,%ecx
  100054:	89 d3                	mov    %edx,%ebx
  100056:	83 e3 00             	and    $0x0,%ebx
  100059:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10005c:	89 0c d5 40 64 10 00 	mov    %ecx,0x106440(,%edx,8)
  100063:	89 1c d5 44 64 10 00 	mov    %ebx,0x106444(,%edx,8)
    gdt[i] |= (base & 0xffffffLL) << 16;
  10006a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10006d:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100070:	8b 45 08             	mov    0x8(%ebp),%eax
  100073:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  10007a:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100081:	8b 45 0c             	mov    0xc(%ebp),%eax
  100084:	ba 00 00 00 00       	mov    $0x0,%edx
  100089:	89 c6                	mov    %eax,%esi
  10008b:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
  100091:	89 d7                	mov    %edx,%edi
  100093:	83 e7 00             	and    $0x0,%edi
  100096:	89 f0                	mov    %esi,%eax
  100098:	89 fa                	mov    %edi,%edx
  10009a:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  10009e:	c1 e0 10             	shl    $0x10,%eax
  1000a1:	89 ce                	mov    %ecx,%esi
  1000a3:	09 c6                	or     %eax,%esi
  1000a5:	89 75 b0             	mov    %esi,-0x50(%ebp)
  1000a8:	89 df                	mov    %ebx,%edi
  1000aa:	09 d7                	or     %edx,%edi
  1000ac:	89 7d b4             	mov    %edi,-0x4c(%ebp)
  1000af:	8b 45 b0             	mov    -0x50(%ebp),%eax
  1000b2:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1000b5:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  1000b8:	89 04 cd 40 64 10 00 	mov    %eax,0x106440(,%ecx,8)
  1000bf:	89 14 cd 44 64 10 00 	mov    %edx,0x106444(,%ecx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  1000c6:	8b 75 08             	mov    0x8(%ebp),%esi
  1000c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1000cc:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  1000d3:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  1000da:	8b 45 14             	mov    0x14(%ebp),%eax
  1000dd:	89 c2                	mov    %eax,%edx
  1000df:	c1 fa 1f             	sar    $0x1f,%edx
  1000e2:	0f b6 f8             	movzbl %al,%edi
  1000e5:	89 7d b8             	mov    %edi,-0x48(%ebp)
  1000e8:	89 d7                	mov    %edx,%edi
  1000ea:	83 e7 00             	and    $0x0,%edi
  1000ed:	89 7d bc             	mov    %edi,-0x44(%ebp)
  1000f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1000f3:	8b 55 bc             	mov    -0x44(%ebp),%edx
  1000f6:	89 c2                	mov    %eax,%edx
  1000f8:	b8 00 00 00 00       	mov    $0x0,%eax
  1000fd:	c1 e2 08             	shl    $0x8,%edx
  100100:	89 cf                	mov    %ecx,%edi
  100102:	09 c7                	or     %eax,%edi
  100104:	89 7d c0             	mov    %edi,-0x40(%ebp)
  100107:	89 df                	mov    %ebx,%edi
  100109:	09 d7                	or     %edx,%edi
  10010b:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  10010e:	8b 45 c0             	mov    -0x40(%ebp),%eax
  100111:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  100114:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  10011b:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100122:	8b 75 08             	mov    0x8(%ebp),%esi
  100125:	8b 45 08             	mov    0x8(%ebp),%eax
  100128:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  10012f:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100136:	8b 45 10             	mov    0x10(%ebp),%eax
  100139:	c1 e8 10             	shr    $0x10,%eax
  10013c:	ba 00 00 00 00       	mov    $0x0,%edx
  100141:	89 c7                	mov    %eax,%edi
  100143:	83 e7 0f             	and    $0xf,%edi
  100146:	89 7d c8             	mov    %edi,-0x38(%ebp)
  100149:	89 d7                	mov    %edx,%edi
  10014b:	83 e7 00             	and    $0x0,%edi
  10014e:	89 7d cc             	mov    %edi,-0x34(%ebp)
  100151:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100154:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100157:	89 c2                	mov    %eax,%edx
  100159:	b8 00 00 00 00       	mov    $0x0,%eax
  10015e:	c1 e2 10             	shl    $0x10,%edx
  100161:	89 cf                	mov    %ecx,%edi
  100163:	09 c7                	or     %eax,%edi
  100165:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100168:	89 df                	mov    %ebx,%edi
  10016a:	09 d7                	or     %edx,%edi
  10016c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  10016f:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100172:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100175:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  10017c:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  100183:	8b 75 08             	mov    0x8(%ebp),%esi
  100186:	8b 45 08             	mov    0x8(%ebp),%eax
  100189:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  100190:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100197:	8b 45 14             	mov    0x14(%ebp),%eax
  10019a:	c1 f8 08             	sar    $0x8,%eax
  10019d:	89 c2                	mov    %eax,%edx
  10019f:	c1 fa 1f             	sar    $0x1f,%edx
  1001a2:	0f b6 f8             	movzbl %al,%edi
  1001a5:	89 7d d8             	mov    %edi,-0x28(%ebp)
  1001a8:	89 d7                	mov    %edx,%edi
  1001aa:	83 e7 00             	and    $0x0,%edi
  1001ad:	89 7d dc             	mov    %edi,-0x24(%ebp)
  1001b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1001b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1001b6:	89 c2                	mov    %eax,%edx
  1001b8:	b8 00 00 00 00       	mov    $0x0,%eax
  1001bd:	c1 e2 14             	shl    $0x14,%edx
  1001c0:	89 cf                	mov    %ecx,%edi
  1001c2:	09 c7                	or     %eax,%edi
  1001c4:	89 7d e0             	mov    %edi,-0x20(%ebp)
  1001c7:	89 df                	mov    %ebx,%edi
  1001c9:	09 d7                	or     %edx,%edi
  1001cb:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  1001ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1001d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1001d4:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  1001db:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  1001e2:	8b 75 08             	mov    0x8(%ebp),%esi
  1001e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1001e8:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  1001ef:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  1001f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1001f9:	c1 e8 18             	shr    $0x18,%eax
  1001fc:	ba 00 00 00 00       	mov    $0x0,%edx
  100201:	89 c2                	mov    %eax,%edx
  100203:	b8 00 00 00 00       	mov    $0x0,%eax
  100208:	c1 e2 18             	shl    $0x18,%edx
  10020b:	89 cf                	mov    %ecx,%edi
  10020d:	09 c7                	or     %eax,%edi
  10020f:	89 7d e8             	mov    %edi,-0x18(%ebp)
  100212:	89 df                	mov    %ebx,%edi
  100214:	09 d7                	or     %edx,%edi
  100216:	89 7d ec             	mov    %edi,-0x14(%ebp)
  100219:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10021c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10021f:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  100226:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
}
  10022d:	83 c4 4c             	add    $0x4c,%esp
  100230:	5b                   	pop    %ebx
  100231:	5e                   	pop    %esi
  100232:	5f                   	pop    %edi
  100233:	5d                   	pop    %ebp
  100234:	c3                   	ret    

00100235 <init_gdt>:

void init_gdt(void)
{
  100235:	55                   	push   %ebp
  100236:	89 e5                	mov    %esp,%ebp
  100238:	83 ec 10             	sub    $0x10,%esp
    set_gdt_entry(0, 0, 0, 0);
  10023b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100242:	00 
  100243:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10024a:	00 
  10024b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100252:	00 
  100253:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10025a:	e8 db fd ff ff       	call   10003a <set_gdt_entry>
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10025f:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100266:	00 
  100267:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  10026e:	00 
  10026f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100276:	00 
  100277:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10027e:	e8 b7 fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100283:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  10028a:	00 
  10028b:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100292:	00 
  100293:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10029a:	00 
  10029b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1002a2:	e8 93 fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1002a7:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  1002ae:	00 
  1002af:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1002b6:	00 
  1002b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1002be:	00 
  1002bf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1002c6:	e8 6f fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1002cb:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  1002d2:	00 
  1002d3:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1002da:	00 
  1002db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1002e2:	00 
  1002e3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1002ea:	e8 4b fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  1002ef:	e8 18 fd ff ff       	call   10000c <load_gdt>
}
  1002f4:	c9                   	leave  
  1002f5:	c3                   	ret    
	...

001002f8 <intr_stub_0>:
  1002f8:	6a 00                	push   $0x0
  1002fa:	6a 00                	push   $0x0
  1002fc:	e9 eb 00 00 00       	jmp    1003ec <intr_common_handler>

00100301 <intr_stub_1>:
  100301:	6a 00                	push   $0x0
  100303:	6a 01                	push   $0x1
  100305:	e9 e2 00 00 00       	jmp    1003ec <intr_common_handler>

0010030a <intr_stub_2>:
  10030a:	6a 00                	push   $0x0
  10030c:	6a 02                	push   $0x2
  10030e:	e9 d9 00 00 00       	jmp    1003ec <intr_common_handler>

00100313 <intr_stub_3>:
  100313:	6a 00                	push   $0x0
  100315:	6a 03                	push   $0x3
  100317:	e9 d0 00 00 00       	jmp    1003ec <intr_common_handler>

0010031c <intr_stub_4>:
  10031c:	6a 00                	push   $0x0
  10031e:	6a 04                	push   $0x4
  100320:	e9 c7 00 00 00       	jmp    1003ec <intr_common_handler>

00100325 <intr_stub_5>:
  100325:	6a 00                	push   $0x0
  100327:	6a 05                	push   $0x5
  100329:	e9 be 00 00 00       	jmp    1003ec <intr_common_handler>

0010032e <intr_stub_6>:
  10032e:	6a 00                	push   $0x0
  100330:	6a 06                	push   $0x6
  100332:	e9 b5 00 00 00       	jmp    1003ec <intr_common_handler>

00100337 <intr_stub_7>:
  100337:	6a 00                	push   $0x0
  100339:	6a 07                	push   $0x7
  10033b:	e9 ac 00 00 00       	jmp    1003ec <intr_common_handler>

00100340 <intr_stub_8>:
  100340:	6a 08                	push   $0x8
  100342:	e9 a5 00 00 00       	jmp    1003ec <intr_common_handler>

00100347 <intr_stub_9>:
  100347:	6a 00                	push   $0x0
  100349:	6a 09                	push   $0x9
  10034b:	e9 9c 00 00 00       	jmp    1003ec <intr_common_handler>

00100350 <intr_stub_10>:
  100350:	6a 0a                	push   $0xa
  100352:	e9 95 00 00 00       	jmp    1003ec <intr_common_handler>

00100357 <intr_stub_11>:
  100357:	6a 0b                	push   $0xb
  100359:	e9 8e 00 00 00       	jmp    1003ec <intr_common_handler>

0010035e <intr_stub_12>:
  10035e:	6a 0c                	push   $0xc
  100360:	e9 87 00 00 00       	jmp    1003ec <intr_common_handler>

00100365 <intr_stub_13>:
  100365:	6a 0d                	push   $0xd
  100367:	e9 80 00 00 00       	jmp    1003ec <intr_common_handler>

0010036c <intr_stub_14>:
  10036c:	6a 0e                	push   $0xe
  10036e:	eb 7c                	jmp    1003ec <intr_common_handler>

00100370 <intr_stub_15>:
  100370:	6a 00                	push   $0x0
  100372:	6a 0f                	push   $0xf
  100374:	eb 76                	jmp    1003ec <intr_common_handler>

00100376 <intr_stub_16>:
  100376:	6a 00                	push   $0x0
  100378:	6a 10                	push   $0x10
  10037a:	eb 70                	jmp    1003ec <intr_common_handler>

0010037c <intr_stub_17>:
  10037c:	6a 11                	push   $0x11
  10037e:	eb 6c                	jmp    1003ec <intr_common_handler>

00100380 <intr_stub_18>:
  100380:	6a 00                	push   $0x0
  100382:	6a 12                	push   $0x12
  100384:	eb 66                	jmp    1003ec <intr_common_handler>

00100386 <intr_stub_32>:
  100386:	6a 00                	push   $0x0
  100388:	6a 20                	push   $0x20
  10038a:	eb 60                	jmp    1003ec <intr_common_handler>

0010038c <intr_stub_33>:
  10038c:	6a 00                	push   $0x0
  10038e:	6a 21                	push   $0x21
  100390:	eb 5a                	jmp    1003ec <intr_common_handler>

00100392 <intr_stub_34>:
  100392:	6a 00                	push   $0x0
  100394:	6a 22                	push   $0x22
  100396:	eb 54                	jmp    1003ec <intr_common_handler>

00100398 <intr_stub_35>:
  100398:	6a 00                	push   $0x0
  10039a:	6a 23                	push   $0x23
  10039c:	eb 4e                	jmp    1003ec <intr_common_handler>

0010039e <intr_stub_36>:
  10039e:	6a 00                	push   $0x0
  1003a0:	6a 24                	push   $0x24
  1003a2:	eb 48                	jmp    1003ec <intr_common_handler>

001003a4 <intr_stub_37>:
  1003a4:	6a 00                	push   $0x0
  1003a6:	6a 25                	push   $0x25
  1003a8:	eb 42                	jmp    1003ec <intr_common_handler>

001003aa <intr_stub_38>:
  1003aa:	6a 00                	push   $0x0
  1003ac:	6a 26                	push   $0x26
  1003ae:	eb 3c                	jmp    1003ec <intr_common_handler>

001003b0 <intr_stub_39>:
  1003b0:	6a 00                	push   $0x0
  1003b2:	6a 27                	push   $0x27
  1003b4:	eb 36                	jmp    1003ec <intr_common_handler>

001003b6 <intr_stub_40>:
  1003b6:	6a 00                	push   $0x0
  1003b8:	6a 28                	push   $0x28
  1003ba:	eb 30                	jmp    1003ec <intr_common_handler>

001003bc <intr_stub_41>:
  1003bc:	6a 00                	push   $0x0
  1003be:	6a 29                	push   $0x29
  1003c0:	eb 2a                	jmp    1003ec <intr_common_handler>

001003c2 <intr_stub_42>:
  1003c2:	6a 00                	push   $0x0
  1003c4:	6a 2a                	push   $0x2a
  1003c6:	eb 24                	jmp    1003ec <intr_common_handler>

001003c8 <intr_stub_43>:
  1003c8:	6a 00                	push   $0x0
  1003ca:	6a 2b                	push   $0x2b
  1003cc:	eb 1e                	jmp    1003ec <intr_common_handler>

001003ce <intr_stub_44>:
  1003ce:	6a 00                	push   $0x0
  1003d0:	6a 2c                	push   $0x2c
  1003d2:	eb 18                	jmp    1003ec <intr_common_handler>

001003d4 <intr_stub_45>:
  1003d4:	6a 00                	push   $0x0
  1003d6:	6a 2d                	push   $0x2d
  1003d8:	eb 12                	jmp    1003ec <intr_common_handler>

001003da <intr_stub_46>:
  1003da:	6a 00                	push   $0x0
  1003dc:	6a 2e                	push   $0x2e
  1003de:	eb 0c                	jmp    1003ec <intr_common_handler>

001003e0 <intr_stub_47>:
  1003e0:	6a 00                	push   $0x0
  1003e2:	6a 2f                	push   $0x2f
  1003e4:	eb 06                	jmp    1003ec <intr_common_handler>

001003e6 <intr_stub_48>:
  1003e6:	6a 00                	push   $0x0
  1003e8:	6a 30                	push   $0x30
  1003ea:	eb 00                	jmp    1003ec <intr_common_handler>

001003ec <intr_common_handler>:
  1003ec:	55                   	push   %ebp
  1003ed:	57                   	push   %edi
  1003ee:	56                   	push   %esi
  1003ef:	52                   	push   %edx
  1003f0:	51                   	push   %ecx
  1003f1:	53                   	push   %ebx
  1003f2:	50                   	push   %eax
  1003f3:	66 b8 10 00          	mov    $0x10,%ax
  1003f7:	8e d8                	mov    %eax,%ds
  1003f9:	8e c0                	mov    %eax,%es
  1003fb:	54                   	push   %esp
  1003fc:	e8 a3 17 00 00       	call   101ba4 <handle_interrupt>
  100401:	89 c4                	mov    %eax,%esp
  100403:	66 b8 23 00          	mov    $0x23,%ax
  100407:	8e d8                	mov    %eax,%ds
  100409:	8e c0                	mov    %eax,%es
  10040b:	58                   	pop    %eax
  10040c:	5b                   	pop    %ebx
  10040d:	59                   	pop    %ecx
  10040e:	5a                   	pop    %edx
  10040f:	5e                   	pop    %esi
  100410:	5f                   	pop    %edi
  100411:	5d                   	pop    %ebp
  100412:	83 c4 08             	add    $0x8,%esp
  100415:	cf                   	iret   
	...

00100418 <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100418:	55                   	push   %ebp
  100419:	89 e5                	mov    %esp,%ebp
  10041b:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  10041e:	8b 45 08             	mov    0x8(%ebp),%eax
  100421:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100424:	eb 0e                	jmp    100434 <memset+0x1c>
        *p++ = c;
  100426:	8b 45 0c             	mov    0xc(%ebp),%eax
  100429:	89 c2                	mov    %eax,%edx
  10042b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10042e:	88 10                	mov    %dl,(%eax)
  100430:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100434:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100438:	0f 95 c0             	setne  %al
  10043b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  10043f:	84 c0                	test   %al,%al
  100441:	75 e3                	jne    100426 <memset+0xe>
        *p++ = c;
    }

    return buf;
  100443:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100446:	c9                   	leave  
  100447:	c3                   	ret    

00100448 <memcpy>:

static inline void* memcpy(void* dest, const void* src, size_t n)
{
  100448:	55                   	push   %ebp
  100449:	89 e5                	mov    %esp,%ebp
  10044b:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
  10044e:	8b 45 08             	mov    0x8(%ebp),%eax
  100451:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const unsigned char* s = src;
  100454:	8b 45 0c             	mov    0xc(%ebp),%eax
  100457:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  10045a:	eb 13                	jmp    10046f <memcpy+0x27>
        *d++ = *s++;
  10045c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10045f:	0f b6 10             	movzbl (%eax),%edx
  100462:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100465:	88 10                	mov    %dl,(%eax)
  100467:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  10046b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
static inline void* memcpy(void* dest, const void* src, size_t n)
{
    unsigned char* d = dest;
    const unsigned char* s = src;

    while (n--) {
  10046f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100473:	0f 95 c0             	setne  %al
  100476:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  10047a:	84 c0                	test   %al,%al
  10047c:	75 de                	jne    10045c <memcpy+0x14>
        *d++ = *s++;
    }

    return dest;
  10047e:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100481:	c9                   	leave  
  100482:	c3                   	ret    

00100483 <syscall>:
#include "string.h"
#include "elf.h"
#include "vmm.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  100483:	55                   	push   %ebp
  100484:	89 e5                	mov    %esp,%ebp
  100486:	83 ec 18             	sub    $0x18,%esp
    switch (cpu->eax) {
  100489:	8b 45 08             	mov    0x8(%ebp),%eax
  10048c:	8b 00                	mov    (%eax),%eax
  10048e:	85 c0                	test   %eax,%eax
  100490:	75 16                	jne    1004a8 <syscall+0x25>
        case 0: /* putc */
            kprintf("%c", cpu->ebx);
  100492:	8b 45 08             	mov    0x8(%ebp),%eax
  100495:	8b 40 04             	mov    0x4(%eax),%eax
  100498:	89 44 24 04          	mov    %eax,0x4(%esp)
  10049c:	c7 04 24 00 30 10 00 	movl   $0x103000,(%esp)
  1004a3:	e8 d1 0d 00 00       	call   101279 <kprintf>
            break;
    }
 
    return cpu;
  1004a8:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1004ab:	c9                   	leave  
  1004ac:	c3                   	ret    

001004ad <init_elf>:

void init_elf(void* image)
{
  1004ad:	55                   	push   %ebp
  1004ae:	89 e5                	mov    %esp,%ebp
  1004b0:	83 ec 38             	sub    $0x38,%esp
    /*
     * FIXME Wir muessen eigentlich die Laenge vom Image pruefen, damit wir bei
     * korrupten ELF-Dateien nicht ueber das Dateiende hinauslesen.
     */
 
    struct elf_header* header = image;
  1004b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1004b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct elf_program_header* ph;
    int i;
 
    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  1004b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1004bc:	8b 00                	mov    (%eax),%eax
  1004be:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  1004c3:	74 11                	je     1004d6 <init_elf+0x29>
        kprintf("Keine gueltige ELF-Magic!\n");
  1004c5:	c7 04 24 03 30 10 00 	movl   $0x103003,(%esp)
  1004cc:	e8 a8 0d 00 00       	call   101279 <kprintf>
        return;
  1004d1:	e9 8a 00 00 00       	jmp    100560 <init_elf+0xb3>
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
  1004d6:	8b 55 08             	mov    0x8(%ebp),%edx
  1004d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1004dc:	8b 40 1c             	mov    0x1c(%eax),%eax
  1004df:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1004e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  1004e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1004ec:	eb 63                	jmp    100551 <init_elf+0xa4>
        void* dest = (void*) ph->virt_addr;
  1004ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004f1:	8b 40 08             	mov    0x8(%eax),%eax
  1004f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        void* src = ((char*) image) + ph->offset;
  1004f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004fa:	8b 40 04             	mov    0x4(%eax),%eax
  1004fd:	03 45 08             	add    0x8(%ebp),%eax
  100500:	89 45 f4             	mov    %eax,-0xc(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  100503:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100506:	8b 00                	mov    (%eax),%eax
  100508:	83 f8 01             	cmp    $0x1,%eax
  10050b:	75 3b                	jne    100548 <init_elf+0x9b>
            continue;
        }
 
        memset(dest, 0, ph->mem_size);
  10050d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100510:	8b 40 14             	mov    0x14(%eax),%eax
  100513:	89 44 24 08          	mov    %eax,0x8(%esp)
  100517:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10051e:	00 
  10051f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100522:	89 04 24             	mov    %eax,(%esp)
  100525:	e8 ee fe ff ff       	call   100418 <memset>
        memcpy(dest, src, ph->file_size);
  10052a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10052d:	8b 40 10             	mov    0x10(%eax),%eax
  100530:	89 44 24 08          	mov    %eax,0x8(%esp)
  100534:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100537:	89 44 24 04          	mov    %eax,0x4(%esp)
  10053b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10053e:	89 04 24             	mov    %eax,(%esp)
  100541:	e8 02 ff ff ff       	call   100448 <memcpy>
  100546:	eb 01                	jmp    100549 <init_elf+0x9c>
        void* dest = (void*) ph->virt_addr;
        void* src = ((char*) image) + ph->offset;
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
  100548:	90                   	nop
        kprintf("Keine gueltige ELF-Magic!\n");
        return;
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100549:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  10054d:	83 45 e8 20          	addl   $0x20,-0x18(%ebp)
  100551:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100554:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  100558:	0f b7 c0             	movzwl %ax,%eax
  10055b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10055e:	7f 8e                	jg     1004ee <init_elf+0x41>
        memset(dest, 0, ph->mem_size);
        memcpy(dest, src, ph->file_size);
    }
 
    //init_task((void*) header->entry);
}
  100560:	c9                   	leave  
  100561:	c3                   	ret    

00100562 <task>:

void task() {
  100562:	55                   	push   %ebp
  100563:	89 e5                	mov    %esp,%ebp
  100565:	83 ec 18             	sub    $0x18,%esp
  kprintf("task");
  100568:	c7 04 24 1e 30 10 00 	movl   $0x10301e,(%esp)
  10056f:	e8 05 0d 00 00       	call   101279 <kprintf>
  
  while(1) { }
  100574:	eb fe                	jmp    100574 <task+0x12>

00100576 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  100576:	55                   	push   %ebp
  100577:	89 e5                	mov    %esp,%ebp
  100579:	83 ec 18             	sub    $0x18,%esp
		kprintf("Loading MB-Mod %x: S: %x E: %x\n", i, modules[i].start, modules[i].end);

		init_elf((void*) modules[i].start);
	}*/
	
	init_task(task, NULL);
  10057c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100583:	00 
  100584:	c7 04 24 62 05 10 00 	movl   $0x100562,(%esp)
  10058b:	e8 10 00 00 00       	call   1005a0 <init_task>

	kprintf("abc");
  100590:	c7 04 24 23 30 10 00 	movl   $0x103023,(%esp)
  100597:	e8 dd 0c 00 00       	call   101279 <kprintf>

	while(1) {  }
  10059c:	eb fe                	jmp    10059c <kernel_main+0x26>
	...

001005a0 <init_task>:

static struct task* first_task = NULL;
static struct task* current_task = NULL;

struct task* init_task(void* entry, struct vmm_context* context)
{
  1005a0:	55                   	push   %ebp
  1005a1:	89 e5                	mov    %esp,%ebp
  1005a3:	57                   	push   %edi
  1005a4:	56                   	push   %esi
  1005a5:	53                   	push   %ebx
  1005a6:	83 ec 7c             	sub    $0x7c,%esp
    uint8_t* stack = pmm_alloc(1);
  1005a9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1005b0:	e8 47 08 00 00       	call   100dfc <pmm_alloc>
  1005b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
    uint8_t* user_stack = pmm_alloc(1);
  1005b8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1005bf:	e8 38 08 00 00       	call   100dfc <pmm_alloc>
  1005c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
        .eip = (uint32_t) entry,
  1005c7:	8b 75 08             	mov    0x8(%ebp),%esi
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
  1005ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1005cd:	05 00 10 00 00       	add    $0x1000,%eax
  1005d2:	89 45 94             	mov    %eax,-0x6c(%ebp)

        .cs  = 0x18 | 0x03,
        .ss  = 0x20 | 0x03,

        .eflags = 0x200,
    };
  1005d5:	8d 5d a0             	lea    -0x60(%ebp),%ebx
  1005d8:	b8 00 00 00 00       	mov    $0x0,%eax
  1005dd:	ba 0e 00 00 00       	mov    $0xe,%edx
  1005e2:	89 df                	mov    %ebx,%edi
  1005e4:	89 d1                	mov    %edx,%ecx
  1005e6:	f3 ab                	rep stos %eax,%es:(%edi)
  1005e8:	89 75 c4             	mov    %esi,-0x3c(%ebp)
  1005eb:	c7 45 c8 1b 00 00 00 	movl   $0x1b,-0x38(%ebp)
  1005f2:	c7 45 cc 00 02 00 00 	movl   $0x200,-0x34(%ebp)
  1005f9:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1005fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1005ff:	c7 45 d4 23 00 00 00 	movl   $0x23,-0x2c(%ebp)

    struct cpu_state* state = (void*) (stack + 4096 - sizeof(new_state));
  100606:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100609:	05 c8 0f 00 00       	add    $0xfc8,%eax
  10060e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    *state = new_state;
  100611:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100614:	8b 55 a0             	mov    -0x60(%ebp),%edx
  100617:	89 10                	mov    %edx,(%eax)
  100619:	8b 55 a4             	mov    -0x5c(%ebp),%edx
  10061c:	89 50 04             	mov    %edx,0x4(%eax)
  10061f:	8b 55 a8             	mov    -0x58(%ebp),%edx
  100622:	89 50 08             	mov    %edx,0x8(%eax)
  100625:	8b 55 ac             	mov    -0x54(%ebp),%edx
  100628:	89 50 0c             	mov    %edx,0xc(%eax)
  10062b:	8b 55 b0             	mov    -0x50(%ebp),%edx
  10062e:	89 50 10             	mov    %edx,0x10(%eax)
  100631:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  100634:	89 50 14             	mov    %edx,0x14(%eax)
  100637:	8b 55 b8             	mov    -0x48(%ebp),%edx
  10063a:	89 50 18             	mov    %edx,0x18(%eax)
  10063d:	8b 55 bc             	mov    -0x44(%ebp),%edx
  100640:	89 50 1c             	mov    %edx,0x1c(%eax)
  100643:	8b 55 c0             	mov    -0x40(%ebp),%edx
  100646:	89 50 20             	mov    %edx,0x20(%eax)
  100649:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  10064c:	89 50 24             	mov    %edx,0x24(%eax)
  10064f:	8b 55 c8             	mov    -0x38(%ebp),%edx
  100652:	89 50 28             	mov    %edx,0x28(%eax)
  100655:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100658:	89 50 2c             	mov    %edx,0x2c(%eax)
  10065b:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10065e:	89 50 30             	mov    %edx,0x30(%eax)
  100661:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100664:	89 50 34             	mov    %edx,0x34(%eax)

    struct task* task = pmm_alloc(1);
  100667:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10066e:	e8 89 07 00 00       	call   100dfc <pmm_alloc>
  100673:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    task->cpu_state = state;
  100676:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100679:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10067c:	89 10                	mov    %edx,(%eax)
    task->next = first_task;
  10067e:	8b 15 00 40 10 00    	mov    0x104000,%edx
  100684:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100687:	89 50 04             	mov    %edx,0x4(%eax)
    first_task = task;
  10068a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10068d:	a3 00 40 10 00       	mov    %eax,0x104000
    return task;
  100692:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
  100695:	83 c4 7c             	add    $0x7c,%esp
  100698:	5b                   	pop    %ebx
  100699:	5e                   	pop    %esi
  10069a:	5f                   	pop    %edi
  10069b:	5d                   	pop    %ebp
  10069c:	c3                   	ret    

0010069d <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu)
{
  10069d:	55                   	push   %ebp
  10069e:	89 e5                	mov    %esp,%ebp
    if (current_task != NULL) {
  1006a0:	a1 04 40 10 00       	mov    0x104004,%eax
  1006a5:	85 c0                	test   %eax,%eax
  1006a7:	74 0a                	je     1006b3 <schedule+0x16>
        current_task->cpu_state = cpu;
  1006a9:	a1 04 40 10 00       	mov    0x104004,%eax
  1006ae:	8b 55 08             	mov    0x8(%ebp),%edx
  1006b1:	89 10                	mov    %edx,(%eax)
    }

    if (current_task == NULL) {
  1006b3:	a1 04 40 10 00       	mov    0x104004,%eax
  1006b8:	85 c0                	test   %eax,%eax
  1006ba:	75 0c                	jne    1006c8 <schedule+0x2b>
        current_task = first_task;
  1006bc:	a1 00 40 10 00       	mov    0x104000,%eax
  1006c1:	a3 04 40 10 00       	mov    %eax,0x104004
  1006c6:	eb 20                	jmp    1006e8 <schedule+0x4b>
    } else {
        current_task = current_task->next;
  1006c8:	a1 04 40 10 00       	mov    0x104004,%eax
  1006cd:	8b 40 04             	mov    0x4(%eax),%eax
  1006d0:	a3 04 40 10 00       	mov    %eax,0x104004
        if (current_task == NULL) {
  1006d5:	a1 04 40 10 00       	mov    0x104004,%eax
  1006da:	85 c0                	test   %eax,%eax
  1006dc:	75 0a                	jne    1006e8 <schedule+0x4b>
            current_task = first_task;
  1006de:	a1 00 40 10 00       	mov    0x104000,%eax
  1006e3:	a3 04 40 10 00       	mov    %eax,0x104004
        }
    }  

    cpu = current_task->cpu_state;
  1006e8:	a1 04 40 10 00       	mov    0x104004,%eax
  1006ed:	8b 00                	mov    (%eax),%eax
  1006ef:	89 45 08             	mov    %eax,0x8(%ebp)

    return cpu;
  1006f2:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1006f5:	5d                   	pop    %ebp
  1006f6:	c3                   	ret    
	...

001006f8 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  1006f8:	55                   	push   %ebp
  1006f9:	89 e5                	mov    %esp,%ebp
  1006fb:	83 ec 14             	sub    $0x14,%esp
  1006fe:	8b 45 08             	mov    0x8(%ebp),%eax
  100701:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  100705:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  100709:	89 c2                	mov    %eax,%edx
  10070b:	ec                   	in     (%dx),%al
  10070c:	88 45 ff             	mov    %al,-0x1(%ebp)
	return result;
  10070f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  100713:	c9                   	leave  
  100714:	c3                   	ret    

00100715 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  100715:	55                   	push   %ebp
  100716:	89 e5                	mov    %esp,%ebp
  100718:	83 ec 08             	sub    $0x8,%esp
  10071b:	8b 55 08             	mov    0x8(%ebp),%edx
  10071e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100721:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  100725:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100728:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  10072c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  100730:	ee                   	out    %al,(%dx)
}
  100731:	c9                   	leave  
  100732:	c3                   	ret    

00100733 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  100733:	55                   	push   %ebp
  100734:	89 e5                	mov    %esp,%ebp
  100736:	83 ec 38             	sub    $0x38,%esp
  100739:	8b 45 0c             	mov    0xc(%ebp),%eax
  10073c:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
  uint8_t keycode = 0;
  100740:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

  switch (set) {
  100744:	8b 45 08             	mov    0x8(%ebp),%eax
  100747:	83 f8 01             	cmp    $0x1,%eax
  10074a:	74 19                	je     100765 <translate_scancode+0x32>
  10074c:	83 f8 02             	cmp    $0x2,%eax
  10074f:	74 24                	je     100775 <translate_scancode+0x42>
  100751:	85 c0                	test   %eax,%eax
  100753:	75 35                	jne    10078a <translate_scancode+0x57>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100755:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100759:	0f b6 80 00 20 10 00 	movzbl 0x102000(%eax),%eax
  100760:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  100763:	eb 25                	jmp    10078a <translate_scancode+0x57>
    case 1:
      keycode = sc_to_kc[1][scancode];
  100765:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100769:	0f b6 80 80 20 10 00 	movzbl 0x102080(%eax),%eax
  100770:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  100773:	eb 15                	jmp    10078a <translate_scancode+0x57>
    case 2:
      switch (scancode) {
  100775:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100779:	3d 1d 45 00 00       	cmp    $0x451d,%eax
  10077e:	75 06                	jne    100786 <translate_scancode+0x53>
        case 0x451D:
          keycode = 119;
  100780:	c6 45 f7 77          	movb   $0x77,-0x9(%ebp)
          break;
  100784:	eb 04                	jmp    10078a <translate_scancode+0x57>

        default:
          keycode = 0x0;	
  100786:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
      };
      break;
  }

  if (keycode == 0) {
  10078a:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  10078e:	75 1b                	jne    1007ab <translate_scancode+0x78>
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  100790:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100794:	8b 55 08             	mov    0x8(%ebp),%edx
  100797:	89 54 24 08          	mov    %edx,0x8(%esp)
  10079b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10079f:	c7 04 24 28 30 10 00 	movl   $0x103028,(%esp)
  1007a6:	e8 ce 0a 00 00       	call   101279 <kprintf>
  }

  return keycode;
  1007ab:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
  1007af:	c9                   	leave  
  1007b0:	c3                   	ret    

001007b1 <keyboard_handler>:

void keyboard_handler() {    
  1007b1:	55                   	push   %ebp
  1007b2:	89 e5                	mov    %esp,%ebp
  1007b4:	83 ec 28             	sub    $0x28,%esp
  uint8_t scancode;
  uint8_t keycode = 0;
  1007b7:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
  int break_code = 0;
  1007bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  1007c2:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1007c9:	e8 2a ff ff ff       	call   1006f8 <inb>
  1007ce:	88 45 f2             	mov    %al,-0xe(%ebp)

  if (!init_done) {
  1007d1:	a1 08 40 10 00       	mov    0x104008,%eax
  1007d6:	85 c0                	test   %eax,%eax
  1007d8:	0f 84 26 01 00 00    	je     100904 <keyboard_handler+0x153>
    return;
  }

  if ((scancode & 0x80) &&
  1007de:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  1007e2:	84 c0                	test   %al,%al
  1007e4:	79 29                	jns    10080f <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
  1007e6:	a1 14 40 10 00       	mov    0x104014,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  1007eb:	85 c0                	test   %eax,%eax
  1007ed:	75 06                	jne    1007f5 <keyboard_handler+0x44>
  1007ef:	80 7d f2 e1          	cmpb   $0xe1,-0xe(%ebp)
  1007f3:	74 1a                	je     10080f <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  1007f5:	a1 18 40 10 00       	mov    0x104018,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  1007fa:	85 c0                	test   %eax,%eax
  1007fc:	75 06                	jne    100804 <keyboard_handler+0x53>
  1007fe:	80 7d f2 e0          	cmpb   $0xe0,-0xe(%ebp)
  100802:	74 0b                	je     10080f <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  {
      break_code = 1;
  100804:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
      scancode &= ~0x80;
  10080b:	80 65 f2 7f          	andb   $0x7f,-0xe(%ebp)
  }

  if (e0_code) {
  10080f:	a1 18 40 10 00       	mov    0x104018,%eax
  100814:	85 c0                	test   %eax,%eax
  100816:	74 41                	je     100859 <keyboard_handler+0xa8>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  100818:	80 7d f2 2a          	cmpb   $0x2a,-0xe(%ebp)
  10081c:	74 06                	je     100824 <keyboard_handler+0x73>
  10081e:	80 7d f2 36          	cmpb   $0x36,-0xe(%ebp)
  100822:	75 0f                	jne    100833 <keyboard_handler+0x82>
          e0_code = 0;
  100824:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  10082b:	00 00 00 
          return;
  10082e:	e9 d2 00 00 00       	jmp    100905 <keyboard_handler+0x154>
      }
      keycode = translate_scancode(1, scancode);
  100833:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100837:	89 44 24 04          	mov    %eax,0x4(%esp)
  10083b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100842:	e8 ec fe ff ff       	call   100733 <translate_scancode>
  100847:	88 45 f3             	mov    %al,-0xd(%ebp)
      e0_code = 0;
  10084a:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  100851:	00 00 00 
  100854:	e9 ac 00 00 00       	jmp    100905 <keyboard_handler+0x154>
  } else if (e1_code == 2) {
  100859:	a1 14 40 10 00       	mov    0x104014,%eax
  10085e:	83 f8 02             	cmp    $0x2,%eax
  100861:	75 41                	jne    1008a4 <keyboard_handler+0xf3>
      e1_prev |= ((uint16_t) scancode << 8);
  100863:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100867:	c1 e0 08             	shl    $0x8,%eax
  10086a:	89 c2                	mov    %eax,%edx
  10086c:	0f b7 05 1c 40 10 00 	movzwl 0x10401c,%eax
  100873:	09 d0                	or     %edx,%eax
  100875:	66 a3 1c 40 10 00    	mov    %ax,0x10401c
      keycode = translate_scancode(2, e1_prev);
  10087b:	0f b7 05 1c 40 10 00 	movzwl 0x10401c,%eax
  100882:	0f b7 c0             	movzwl %ax,%eax
  100885:	89 44 24 04          	mov    %eax,0x4(%esp)
  100889:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100890:	e8 9e fe ff ff       	call   100733 <translate_scancode>
  100895:	88 45 f3             	mov    %al,-0xd(%ebp)
      e1_code = 0;
  100898:	c7 05 14 40 10 00 00 	movl   $0x0,0x104014
  10089f:	00 00 00 
  1008a2:	eb 61                	jmp    100905 <keyboard_handler+0x154>
  } else if (e1_code == 1) {
  1008a4:	a1 14 40 10 00       	mov    0x104014,%eax
  1008a9:	83 f8 01             	cmp    $0x1,%eax
  1008ac:	75 19                	jne    1008c7 <keyboard_handler+0x116>
      e1_prev = scancode;
  1008ae:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  1008b2:	66 a3 1c 40 10 00    	mov    %ax,0x10401c
      e1_code++;
  1008b8:	a1 14 40 10 00       	mov    0x104014,%eax
  1008bd:	83 c0 01             	add    $0x1,%eax
  1008c0:	a3 14 40 10 00       	mov    %eax,0x104014
  1008c5:	eb 3e                	jmp    100905 <keyboard_handler+0x154>
  } else if (scancode == 0xE0) {
  1008c7:	80 7d f2 e0          	cmpb   $0xe0,-0xe(%ebp)
  1008cb:	75 0c                	jne    1008d9 <keyboard_handler+0x128>
      e0_code = 1;
  1008cd:	c7 05 18 40 10 00 01 	movl   $0x1,0x104018
  1008d4:	00 00 00 
  1008d7:	eb 2c                	jmp    100905 <keyboard_handler+0x154>
  } else if (scancode == 0xE1) {
  1008d9:	80 7d f2 e1          	cmpb   $0xe1,-0xe(%ebp)
  1008dd:	75 0c                	jne    1008eb <keyboard_handler+0x13a>
      e1_code = 1;
  1008df:	c7 05 14 40 10 00 01 	movl   $0x1,0x104014
  1008e6:	00 00 00 
  1008e9:	eb 1a                	jmp    100905 <keyboard_handler+0x154>
  } else {
      keycode = translate_scancode(0, scancode);
  1008eb:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  1008ef:	89 44 24 04          	mov    %eax,0x4(%esp)
  1008f3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1008fa:	e8 34 fe ff ff       	call   100733 <translate_scancode>
  1008ff:	88 45 f3             	mov    %al,-0xd(%ebp)
  100902:	eb 01                	jmp    100905 <keyboard_handler+0x154>
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);

  if (!init_done) {
    return;
  100904:	90                   	nop

	if(keycode != 0x0) {
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}
  100905:	c9                   	leave  
  100906:	c3                   	ret    

00100907 <getc>:

char getc() {
  100907:	55                   	push   %ebp
  100908:	89 e5                	mov    %esp,%ebp
  10090a:	83 ec 10             	sub    $0x10,%esp
	char ret = buffer[0];
  10090d:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100912:	0f b6 00             	movzbl (%eax),%eax
  100915:	88 45 fb             	mov    %al,-0x5(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100918:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10091f:	eb 21                	jmp    100942 <getc+0x3b>
		buffer[i] = buffer[i+1];	
  100921:	8b 15 0c 40 10 00    	mov    0x10400c,%edx
  100927:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10092a:	01 c2                	add    %eax,%edx
  10092c:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100931:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100934:	83 c1 01             	add    $0x1,%ecx
  100937:	01 c8                	add    %ecx,%eax
  100939:	0f b6 00             	movzbl (%eax),%eax
  10093c:	88 02                	mov    %al,(%edx)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10093e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100942:	a1 10 40 10 00       	mov    0x104010,%eax
  100947:	39 45 fc             	cmp    %eax,-0x4(%ebp)
  10094a:	7c d5                	jl     100921 <getc+0x1a>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  10094c:	a1 10 40 10 00       	mov    0x104010,%eax
  100951:	83 e8 01             	sub    $0x1,%eax
  100954:	a3 10 40 10 00       	mov    %eax,0x104010

	return ret;
  100959:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
  10095d:	c9                   	leave  
  10095e:	c3                   	ret    

0010095f <send_command>:

void send_command(uint8_t command) {
  10095f:	55                   	push   %ebp
  100960:	89 e5                	mov    %esp,%ebp
  100962:	83 ec 0c             	sub    $0xc,%esp
  100965:	8b 45 08             	mov    0x8(%ebp),%eax
  100968:	88 45 fc             	mov    %al,-0x4(%ebp)
	while((inb(0x64) & 0x2)) { }
  10096b:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100972:	e8 81 fd ff ff       	call   1006f8 <inb>
  100977:	0f b6 c0             	movzbl %al,%eax
  10097a:	83 e0 02             	and    $0x2,%eax
  10097d:	85 c0                	test   %eax,%eax
  10097f:	75 ea                	jne    10096b <send_command+0xc>
	outb(0x60, command);
  100981:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  100985:	89 44 24 04          	mov    %eax,0x4(%esp)
  100989:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100990:	e8 80 fd ff ff       	call   100715 <outb>
}
  100995:	c9                   	leave  
  100996:	c3                   	ret    

00100997 <init_keyboard_drv>:

void init_keyboard_drv() {
  100997:	55                   	push   %ebp
  100998:	89 e5                	mov    %esp,%ebp
  10099a:	83 ec 18             	sub    $0x18,%esp
	register_intr_handler(0x21, &keyboard_handler);
  10099d:	c7 44 24 04 b1 07 10 	movl   $0x1007b1,0x4(%esp)
  1009a4:	00 
  1009a5:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1009ac:	e8 d3 11 00 00       	call   101b84 <register_intr_handler>

	while(inb(0x64) & 0x1) {
  1009b1:	eb 0c                	jmp    1009bf <init_keyboard_drv+0x28>
		inb(0x60);
  1009b3:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1009ba:	e8 39 fd ff ff       	call   1006f8 <inb>
}

void init_keyboard_drv() {
	register_intr_handler(0x21, &keyboard_handler);

	while(inb(0x64) & 0x1) {
  1009bf:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1009c6:	e8 2d fd ff ff       	call   1006f8 <inb>
  1009cb:	0f b6 c0             	movzbl %al,%eax
  1009ce:	83 e0 01             	and    $0x1,%eax
  1009d1:	84 c0                	test   %al,%al
  1009d3:	75 de                	jne    1009b3 <init_keyboard_drv+0x1c>
		inb(0x60);
	}

	send_command(0xF4);
  1009d5:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  1009dc:	e8 7e ff ff ff       	call   10095f <send_command>

	init_done = 1;
  1009e1:	c7 05 08 40 10 00 01 	movl   $0x1,0x104008
  1009e8:	00 00 00 
}
  1009eb:	c9                   	leave  
  1009ec:	c3                   	ret    
  1009ed:	00 00                	add    %al,(%eax)
	...

001009f0 <vmm_create_context>:
#define ACT_CONTEXT 0xFFEFF000

static uint8_t use_phys_addr = 1;

struct vmm_context* vmm_create_context(void)
{
  1009f0:	55                   	push   %ebp
  1009f1:	89 e5                	mov    %esp,%ebp
  1009f3:	83 ec 28             	sub    $0x28,%esp
    struct vmm_context* context = pmm_alloc();
  1009f6:	e8 01 04 00 00       	call   100dfc <pmm_alloc>
  1009fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;

 
    context->pagedir = pmm_alloc();
  1009fe:	e8 f9 03 00 00       	call   100dfc <pmm_alloc>
  100a03:	89 c2                	mov    %eax,%edx
  100a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a08:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < 1023; i++) {
  100a0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100a11:	eb 17                	jmp    100a2a <vmm_create_context+0x3a>
        context->pagedir[i] = 0;
  100a13:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a16:	8b 00                	mov    (%eax),%eax
  100a18:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100a1b:	c1 e2 02             	shl    $0x2,%edx
  100a1e:	01 d0                	add    %edx,%eax
  100a20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    struct vmm_context* context = pmm_alloc();
    int i;

 
    context->pagedir = pmm_alloc();
    for (i = 0; i < 1023; i++) {
  100a26:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100a2a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
  100a31:	7e e0                	jle    100a13 <vmm_create_context+0x23>
        context->pagedir[i] = 0;
    }
    context->pagedir[1023] = context->pagedir;
  100a33:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a36:	8b 00                	mov    (%eax),%eax
  100a38:	8d 90 fc 0f 00 00    	lea    0xffc(%eax),%edx
  100a3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a41:	8b 00                	mov    (%eax),%eax
  100a43:	89 02                	mov    %eax,(%edx)
    
    vmm_map_page(context, VIRT_PDIR, context->pagedir, PTE_PRESENT | PTE_WRITE);
  100a45:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a48:	8b 00                	mov    (%eax),%eax
  100a4a:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100a51:	00 
  100a52:	89 44 24 08          	mov    %eax,0x8(%esp)
  100a56:	c7 44 24 04 00 00 f0 	movl   $0xfff00000,0x4(%esp)
  100a5d:	ff 
  100a5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a61:	89 04 24             	mov    %eax,(%esp)
  100a64:	e8 31 00 00 00       	call   100a9a <vmm_map_page>
    context->vpagedir = VIRT_PDIR;
  100a69:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a6c:	c7 40 04 00 00 f0 ff 	movl   $0xfff00000,0x4(%eax)

    vmm_map_page(context, ACT_CONTEXT, context, PTE_PRESENT | PTE_WRITE);
  100a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a76:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100a7d:	00 
  100a7e:	89 44 24 08          	mov    %eax,0x8(%esp)
  100a82:	c7 44 24 04 00 f0 ef 	movl   $0xffeff000,0x4(%esp)
  100a89:	ff 
  100a8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a8d:	89 04 24             	mov    %eax,(%esp)
  100a90:	e8 05 00 00 00       	call   100a9a <vmm_map_page>
    
    return context;
  100a95:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  100a98:	c9                   	leave  
  100a99:	c3                   	ret    

00100a9a <vmm_map_page>:

int vmm_map_page(struct vmm_context* context, uintptr_t virt, uintptr_t phys, uint32_t flags)
{
  100a9a:	55                   	push   %ebp
  100a9b:	89 e5                	mov    %esp,%ebp
  100a9d:	83 ec 38             	sub    $0x38,%esp
  uint32_t page_index = virt / 0x1000;
  100aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
  100aa3:	c1 e8 0c             	shr    $0xc,%eax
  100aa6:	89 45 e0             	mov    %eax,-0x20(%ebp)
  uint32_t pd_index = page_index / 1024;
  100aa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100aac:	c1 e8 0a             	shr    $0xa,%eax
  100aaf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  uint32_t pt_index = page_index % 1024;
  100ab2:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ab5:	25 ff 03 00 00       	and    $0x3ff,%eax
  100aba:	89 45 e8             	mov    %eax,-0x18(%ebp)
  
  uint32_t* page_dir;
  
  if(use_phys_addr) {
  100abd:	0f b6 05 00 21 10 00 	movzbl 0x102100,%eax
  100ac4:	84 c0                	test   %al,%al
  100ac6:	74 0a                	je     100ad2 <vmm_map_page+0x38>
    page_dir = context->pagedir;
  100ac8:	8b 45 08             	mov    0x8(%ebp),%eax
  100acb:	8b 00                	mov    (%eax),%eax
  100acd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100ad0:	eb 09                	jmp    100adb <vmm_map_page+0x41>
  }
  else
  {
    page_dir = context->vpagedir;
  100ad2:	8b 45 08             	mov    0x8(%ebp),%eax
  100ad5:	8b 40 04             	mov    0x4(%eax),%eax
  100ad8:	89 45 ec             	mov    %eax,-0x14(%ebp)

  uint32_t* page_table;
  int i;

  /* Wir brauchen 4k-Alignment */
  if ((virt & 0xFFF) || (phys & 0xFFF)) {
  100adb:	8b 45 0c             	mov    0xc(%ebp),%eax
  100ade:	25 ff 0f 00 00       	and    $0xfff,%eax
  100ae3:	85 c0                	test   %eax,%eax
  100ae5:	75 0c                	jne    100af3 <vmm_map_page+0x59>
  100ae7:	8b 45 10             	mov    0x10(%ebp),%eax
  100aea:	25 ff 0f 00 00       	and    $0xfff,%eax
  100aef:	85 c0                	test   %eax,%eax
  100af1:	74 24                	je     100b17 <vmm_map_page+0x7d>
			kprintf("map err %x to %x\n", phys, virt);
  100af3:	8b 45 0c             	mov    0xc(%ebp),%eax
  100af6:	89 44 24 08          	mov    %eax,0x8(%esp)
  100afa:	8b 45 10             	mov    0x10(%ebp),%eax
  100afd:	89 44 24 04          	mov    %eax,0x4(%esp)
  100b01:	c7 04 24 4e 30 10 00 	movl   $0x10304e,(%esp)
  100b08:	e8 6c 07 00 00       	call   101279 <kprintf>
      return -1;
  100b0d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100b12:	e9 9d 00 00 00       	jmp    100bb4 <vmm_map_page+0x11a>
  }

  /* Page Table heraussuchen bzw. anlegen */
  if (page_dir[pd_index] & PTE_PRESENT) {
  100b17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b1a:	c1 e0 02             	shl    $0x2,%eax
  100b1d:	03 45 ec             	add    -0x14(%ebp),%eax
  100b20:	8b 00                	mov    (%eax),%eax
  100b22:	83 e0 01             	and    $0x1,%eax
  100b25:	84 c0                	test   %al,%al
  100b27:	74 15                	je     100b3e <vmm_map_page+0xa4>
    page_table = (uint32_t*) (page_dir[pd_index] & ~0xFFF);
  100b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b2c:	c1 e0 02             	shl    $0x2,%eax
  100b2f:	03 45 ec             	add    -0x14(%ebp),%eax
  100b32:	8b 00                	mov    (%eax),%eax
  100b34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100b39:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100b3c:	eb 3e                	jmp    100b7c <vmm_map_page+0xe2>
  } else {
    /* Neue Page Table muss angelegt werden */
    page_table = pmm_alloc();
  100b3e:	e8 b9 02 00 00       	call   100dfc <pmm_alloc>
  100b43:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 0; i < 1024; i++) {
  100b46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100b4d:	eb 13                	jmp    100b62 <vmm_map_page+0xc8>
        page_table[i] = 0;
  100b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b52:	c1 e0 02             	shl    $0x2,%eax
  100b55:	03 45 f0             	add    -0x10(%ebp),%eax
  100b58:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    page_table = (uint32_t*) (page_dir[pd_index] & ~0xFFF);
  } else {
    /* Neue Page Table muss angelegt werden */
    page_table = pmm_alloc();

    for (i = 0; i < 1024; i++) {
  100b5e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100b62:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100b69:	7e e4                	jle    100b4f <vmm_map_page+0xb5>
        page_table[i] = 0;
    }
    
    page_dir[pd_index] =
  100b6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b6e:	c1 e0 02             	shl    $0x2,%eax
  100b71:	03 45 ec             	add    -0x14(%ebp),%eax
      (uint32_t) page_table | PTE_PRESENT | PTE_WRITE;
  100b74:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100b77:	83 ca 03             	or     $0x3,%edx

    for (i = 0; i < 1024; i++) {
        page_table[i] = 0;
    }
    
    page_dir[pd_index] =
  100b7a:	89 10                	mov    %edx,(%eax)
      (uint32_t) page_table | PTE_PRESENT | PTE_WRITE;
  }

  /* Neues Mapping in the Page Table eintragen */
  page_table[pt_index] = phys | flags;
  100b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b7f:	c1 e0 02             	shl    $0x2,%eax
  100b82:	03 45 f0             	add    -0x10(%ebp),%eax
  100b85:	8b 55 14             	mov    0x14(%ebp),%edx
  100b88:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100b8b:	09 ca                	or     %ecx,%edx
  100b8d:	89 10                	mov    %edx,(%eax)
  asm volatile("invlpg %0" : : "m" (*(char*)virt));
  100b8f:	8b 45 0c             	mov    0xc(%ebp),%eax
  100b92:	0f 01 38             	invlpg (%eax)

	kprintf("mapped %x to %x\n", phys, virt);
  100b95:	8b 45 0c             	mov    0xc(%ebp),%eax
  100b98:	89 44 24 08          	mov    %eax,0x8(%esp)
  100b9c:	8b 45 10             	mov    0x10(%ebp),%eax
  100b9f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100ba3:	c7 04 24 60 30 10 00 	movl   $0x103060,(%esp)
  100baa:	e8 ca 06 00 00       	call   101279 <kprintf>

  return 0;
  100baf:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100bb4:	c9                   	leave  
  100bb5:	c3                   	ret    

00100bb6 <vmm_activate_context>:
 
void vmm_activate_context(struct vmm_context* context)
{
  100bb6:	55                   	push   %ebp
  100bb7:	89 e5                	mov    %esp,%ebp
    asm volatile("mov %0, %%cr3" : : "r" (context->pagedir));
  100bb9:	8b 45 08             	mov    0x8(%ebp),%eax
  100bbc:	8b 00                	mov    (%eax),%eax
  100bbe:	0f 22 d8             	mov    %eax,%cr3
}
  100bc1:	5d                   	pop    %ebp
  100bc2:	c3                   	ret    

00100bc3 <vmm_map_kernel>:

void vmm_map_kernel(struct vmm_context* context) {
  100bc3:	55                   	push   %ebp
  100bc4:	89 e5                	mov    %esp,%ebp
  100bc6:	83 ec 28             	sub    $0x28,%esp
	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  100bc9:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  100bd0:	eb 28                	jmp    100bfa <vmm_map_kernel+0x37>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100bd2:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100bd9:	00 
  100bda:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100bdd:	89 44 24 08          	mov    %eax,0x8(%esp)
  100be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100be4:	89 44 24 04          	mov    %eax,0x4(%esp)
  100be8:	8b 45 08             	mov    0x8(%ebp),%eax
  100beb:	89 04 24             	mov    %eax,(%esp)
  100bee:	e8 a7 fe ff ff       	call   100a9a <vmm_map_page>
		addr += 0x1000;
  100bf3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
void vmm_map_kernel(struct vmm_context* context) {
	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  100bfa:	b8 00 70 12 00       	mov    $0x127000,%eax
  100bff:	39 45 f4             	cmp    %eax,-0xc(%ebp)
  100c02:	72 ce                	jb     100bd2 <vmm_map_kernel+0xf>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}

	addr = 0xB8000;
  100c04:	c7 45 f4 00 80 0b 00 	movl   $0xb8000,-0xc(%ebp)
	while (addr < 0xBFFFF) {
  100c0b:	eb 28                	jmp    100c35 <vmm_map_kernel+0x72>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100c0d:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100c14:	00 
  100c15:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c18:	89 44 24 08          	mov    %eax,0x8(%esp)
  100c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c1f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c23:	8b 45 08             	mov    0x8(%ebp),%eax
  100c26:	89 04 24             	mov    %eax,(%esp)
  100c29:	e8 6c fe ff ff       	call   100a9a <vmm_map_page>
		addr += 0x1000;
  100c2e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}

	addr = 0xB8000;
	while (addr < 0xBFFFF) {
  100c35:	81 7d f4 fe ff 0b 00 	cmpl   $0xbfffe,-0xc(%ebp)
  100c3c:	76 cf                	jbe    100c0d <vmm_map_kernel+0x4a>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}
}
  100c3e:	c9                   	leave  
  100c3f:	c3                   	ret    

00100c40 <vmm_set_alloc_offset>:

void vmm_set_alloc_offset(struct vmm_context* context, uintptr_t offset) {
  100c40:	55                   	push   %ebp
  100c41:	89 e5                	mov    %esp,%ebp
	context->alloc_offset = offset;
  100c43:	8b 45 08             	mov    0x8(%ebp),%eax
  100c46:	8b 55 0c             	mov    0xc(%ebp),%edx
  100c49:	89 50 08             	mov    %edx,0x8(%eax)
}
  100c4c:	5d                   	pop    %ebp
  100c4d:	c3                   	ret    

00100c4e <vmm_alloc>:

void* vmm_alloc(struct vmm_context* context, uint16_t count) {
  100c4e:	55                   	push   %ebp
  100c4f:	89 e5                	mov    %esp,%ebp
  100c51:	83 ec 38             	sub    $0x38,%esp
  100c54:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c57:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	uintptr_t ptr = context->alloc_offset;
  100c5b:	8b 45 08             	mov    0x8(%ebp),%eax
  100c5e:	8b 40 08             	mov    0x8(%eax),%eax
  100c61:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
	while(count--) {
  100c64:	eb 3a                	jmp    100ca0 <vmm_alloc+0x52>
		vmm_map_page(context, context->alloc_offset, (uintptr_t) pmm_alloc(), PTE_PRESENT | PTE_WRITE | PTE_USER);
  100c66:	e8 91 01 00 00       	call   100dfc <pmm_alloc>
  100c6b:	89 c2                	mov    %eax,%edx
  100c6d:	8b 45 08             	mov    0x8(%ebp),%eax
  100c70:	8b 40 08             	mov    0x8(%eax),%eax
  100c73:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  100c7a:	00 
  100c7b:	89 54 24 08          	mov    %edx,0x8(%esp)
  100c7f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c83:	8b 45 08             	mov    0x8(%ebp),%eax
  100c86:	89 04 24             	mov    %eax,(%esp)
  100c89:	e8 0c fe ff ff       	call   100a9a <vmm_map_page>
		context->alloc_offset += 0x1000;
  100c8e:	8b 45 08             	mov    0x8(%ebp),%eax
  100c91:	8b 40 08             	mov    0x8(%eax),%eax
  100c94:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
  100c9a:	8b 45 08             	mov    0x8(%ebp),%eax
  100c9d:	89 50 08             	mov    %edx,0x8(%eax)
}

void* vmm_alloc(struct vmm_context* context, uint16_t count) {
	uintptr_t ptr = context->alloc_offset;
	
	while(count--) {
  100ca0:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%ebp)
  100ca5:	0f 95 c0             	setne  %al
  100ca8:	66 83 6d e4 01       	subw   $0x1,-0x1c(%ebp)
  100cad:	84 c0                	test   %al,%al
  100caf:	75 b5                	jne    100c66 <vmm_alloc+0x18>
		vmm_map_page(context, context->alloc_offset, (uintptr_t) pmm_alloc(), PTE_PRESENT | PTE_WRITE | PTE_USER);
		context->alloc_offset += 0x1000;
	}

	return (void*)(ptr);
  100cb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  100cb4:	c9                   	leave  
  100cb5:	c3                   	ret    

00100cb6 <vmm_init>:
 
static struct vmm_context* kernel_context;
 
struct vmm_context* vmm_init(struct multiboot_info* mb_info)
{
  100cb6:	55                   	push   %ebp
  100cb7:	89 e5                	mov    %esp,%ebp
  100cb9:	83 ec 28             	sub    $0x28,%esp
  kernel_context = vmm_create_context();
  100cbc:	e8 2f fd ff ff       	call   1009f0 <vmm_create_context>
  100cc1:	a3 20 40 10 00       	mov    %eax,0x104020

	vmm_map_kernel(kernel_context);
  100cc6:	a1 20 40 10 00       	mov    0x104020,%eax
  100ccb:	89 04 24             	mov    %eax,(%esp)
  100cce:	e8 f0 fe ff ff       	call   100bc3 <vmm_map_kernel>
	
  struct multiboot_module* modules = mb_info->mi_mods_addr;
  100cd3:	8b 45 08             	mov    0x8(%ebp),%eax
  100cd6:	8b 40 18             	mov    0x18(%eax),%eax
  100cd9:	89 45 e8             	mov    %eax,-0x18(%ebp)
  int i;

  vmm_map_page(kernel_context, (uintptr_t) mb_info, (uintptr_t) mb_info, PTE_PRESENT | PTE_WRITE);
  100cdc:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100cdf:	8b 55 08             	mov    0x8(%ebp),%edx
  100ce2:	a1 20 40 10 00       	mov    0x104020,%eax
  100ce7:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100cee:	00 
  100cef:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100cf3:	89 54 24 04          	mov    %edx,0x4(%esp)
  100cf7:	89 04 24             	mov    %eax,(%esp)
  100cfa:	e8 9b fd ff ff       	call   100a9a <vmm_map_page>
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);
  100cff:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100d02:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100d05:	a1 20 40 10 00       	mov    0x104020,%eax
  100d0a:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d11:	00 
  100d12:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100d16:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d1a:	89 04 24             	mov    %eax,(%esp)
  100d1d:	e8 78 fd ff ff       	call   100a9a <vmm_map_page>

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100d22:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100d29:	eb 4f                	jmp    100d7a <vmm_init+0xc4>
      addr = (uintptr_t)modules[i].start;
  100d2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d2e:	c1 e0 04             	shl    $0x4,%eax
  100d31:	03 45 e8             	add    -0x18(%ebp),%eax
  100d34:	8b 00                	mov    (%eax),%eax
  100d36:	89 45 f0             	mov    %eax,-0x10(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  100d39:	eb 2a                	jmp    100d65 <vmm_init+0xaf>
 				  vmm_map_page(kernel_context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100d3b:	a1 20 40 10 00       	mov    0x104020,%eax
  100d40:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d47:	00 
  100d48:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100d4b:	89 54 24 08          	mov    %edx,0x8(%esp)
  100d4f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100d52:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d56:	89 04 24             	mov    %eax,(%esp)
  100d59:	e8 3c fd ff ff       	call   100a9a <vmm_map_page>
          addr += 0x1000;
  100d5e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  100d65:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d68:	c1 e0 04             	shl    $0x4,%eax
  100d6b:	03 45 e8             	add    -0x18(%ebp),%eax
  100d6e:	8b 40 04             	mov    0x4(%eax),%eax
  100d71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100d74:	77 c5                	ja     100d3b <vmm_init+0x85>

  vmm_map_page(kernel_context, (uintptr_t) mb_info, (uintptr_t) mb_info, PTE_PRESENT | PTE_WRITE);
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100d76:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  100d7a:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100d7d:	8b 45 08             	mov    0x8(%ebp),%eax
  100d80:	8b 40 14             	mov    0x14(%eax),%eax
  100d83:	39 c2                	cmp    %eax,%edx
  100d85:	72 a4                	jb     100d2b <vmm_init+0x75>
 				  vmm_map_page(kernel_context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
          addr += 0x1000;
      }
  }

	vmm_set_alloc_offset(kernel_context, 0x200000);
  100d87:	a1 20 40 10 00       	mov    0x104020,%eax
  100d8c:	c7 44 24 04 00 00 20 	movl   $0x200000,0x4(%esp)
  100d93:	00 
  100d94:	89 04 24             	mov    %eax,(%esp)
  100d97:	e8 a4 fe ff ff       	call   100c40 <vmm_set_alloc_offset>
 
  vmm_activate_context(kernel_context);
  100d9c:	a1 20 40 10 00       	mov    0x104020,%eax
  100da1:	89 04 24             	mov    %eax,(%esp)
  100da4:	e8 0d fe ff ff       	call   100bb6 <vmm_activate_context>
  
  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  100da9:	0f 20 c0             	mov    %cr0,%eax
  100dac:	89 45 f4             	mov    %eax,-0xc(%ebp)
  cr0 |= (1 << 31);
  100daf:	81 4d f4 00 00 00 80 	orl    $0x80000000,-0xc(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  100db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100db9:	0f 22 c0             	mov    %eax,%cr0
  
  use_phys_addr = 0;
  100dbc:	c6 05 00 21 10 00 00 	movb   $0x0,0x102100

	return kernel_context;
  100dc3:	a1 20 40 10 00       	mov    0x104020,%eax
}
  100dc8:	c9                   	leave  
  100dc9:	c3                   	ret    
	...

00100dcc <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100dcc:	55                   	push   %ebp
  100dcd:	89 e5                	mov    %esp,%ebp
  100dcf:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  100dd2:	8b 45 08             	mov    0x8(%ebp),%eax
  100dd5:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100dd8:	eb 0e                	jmp    100de8 <memset+0x1c>
        *p++ = c;
  100dda:	8b 45 0c             	mov    0xc(%ebp),%eax
  100ddd:	89 c2                	mov    %eax,%edx
  100ddf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100de2:	88 10                	mov    %dl,(%eax)
  100de4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100de8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100dec:	0f 95 c0             	setne  %al
  100def:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  100df3:	84 c0                	test   %al,%al
  100df5:	75 e3                	jne    100dda <memset+0xe>
        *p++ = c;
    }

    return buf;
  100df7:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100dfa:	c9                   	leave  
  100dfb:	c3                   	ret    

00100dfc <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  100dfc:	55                   	push   %ebp
  100dfd:	89 e5                	mov    %esp,%ebp
  100dff:	57                   	push   %edi
  100e00:	56                   	push   %esi
  100e01:	53                   	push   %ebx
  100e02:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100e05:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100e0c:	eb 7b                	jmp    100e89 <pmm_alloc+0x8d>
		if(allocatable[i]) {
  100e0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e11:	8b 04 85 80 64 10 00 	mov    0x106480(,%eax,4),%eax
  100e18:	85 c0                	test   %eax,%eax
  100e1a:	74 69                	je     100e85 <pmm_alloc+0x89>
			int s;
			for(s = 0; s < 32; s++) {
  100e1c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100e23:	eb 5a                	jmp    100e7f <pmm_alloc+0x83>
				if(allocatable[i] & (1 << s)) {
  100e25:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e28:	8b 14 85 80 64 10 00 	mov    0x106480(,%eax,4),%edx
  100e2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100e32:	bb 01 00 00 00       	mov    $0x1,%ebx
  100e37:	89 de                	mov    %ebx,%esi
  100e39:	89 c1                	mov    %eax,%ecx
  100e3b:	d3 e6                	shl    %cl,%esi
  100e3d:	89 f0                	mov    %esi,%eax
  100e3f:	21 d0                	and    %edx,%eax
  100e41:	85 c0                	test   %eax,%eax
  100e43:	74 36                	je     100e7b <pmm_alloc+0x7f>
					allocatable[i] &= ~(1 << s);
  100e45:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e48:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100e4b:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100e52:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100e55:	be 01 00 00 00       	mov    $0x1,%esi
  100e5a:	89 f7                	mov    %esi,%edi
  100e5c:	89 d1                	mov    %edx,%ecx
  100e5e:	d3 e7                	shl    %cl,%edi
  100e60:	89 fa                	mov    %edi,%edx
  100e62:	f7 d2                	not    %edx
  100e64:	21 da                	and    %ebx,%edx
  100e66:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  100e6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e70:	c1 e0 05             	shl    $0x5,%eax
  100e73:	03 45 f0             	add    -0x10(%ebp),%eax
  100e76:	c1 e0 0c             	shl    $0xc,%eax
  100e79:	eb 20                	jmp    100e9b <pmm_alloc+0x9f>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100e7b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  100e7f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  100e83:	7e a0                	jle    100e25 <pmm_alloc+0x29>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100e85:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  100e89:	81 7d ec ff 7f 00 00 	cmpl   $0x7fff,-0x14(%ebp)
  100e90:	0f 8e 78 ff ff ff    	jle    100e0e <pmm_alloc+0x12>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  100e96:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100e9b:	83 c4 10             	add    $0x10,%esp
  100e9e:	5b                   	pop    %ebx
  100e9f:	5e                   	pop    %esi
  100ea0:	5f                   	pop    %edi
  100ea1:	5d                   	pop    %ebp
  100ea2:	c3                   	ret    

00100ea3 <pmm_free>:

void pmm_free(void* addr) {
  100ea3:	55                   	push   %ebp
  100ea4:	89 e5                	mov    %esp,%ebp
  100ea6:	57                   	push   %edi
  100ea7:	56                   	push   %esi
  100ea8:	53                   	push   %ebx
  100ea9:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100eac:	8b 45 08             	mov    0x8(%ebp),%eax
  100eaf:	c1 e8 0c             	shr    $0xc,%eax
  100eb2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uintptr_t s = ptr % 32;
  100eb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100eb8:	83 e0 1f             	and    $0x1f,%eax
  100ebb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t i = ptr / 32;
  100ebe:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ec1:	c1 e8 05             	shr    $0x5,%eax
  100ec4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] |= (1 << s);
  100ec7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100eca:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100ecd:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100ed4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100ed7:	be 01 00 00 00       	mov    $0x1,%esi
  100edc:	89 f7                	mov    %esi,%edi
  100ede:	89 d1                	mov    %edx,%ecx
  100ee0:	d3 e7                	shl    %cl,%edi
  100ee2:	89 fa                	mov    %edi,%edx
  100ee4:	09 da                	or     %ebx,%edx
  100ee6:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
}
  100eed:	83 c4 10             	add    $0x10,%esp
  100ef0:	5b                   	pop    %ebx
  100ef1:	5e                   	pop    %esi
  100ef2:	5f                   	pop    %edi
  100ef3:	5d                   	pop    %ebp
  100ef4:	c3                   	ret    

00100ef5 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100ef5:	55                   	push   %ebp
  100ef6:	89 e5                	mov    %esp,%ebp
  100ef8:	57                   	push   %edi
  100ef9:	56                   	push   %esi
  100efa:	53                   	push   %ebx
  100efb:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100efe:	8b 45 08             	mov    0x8(%ebp),%eax
  100f01:	c1 e8 0c             	shr    $0xc,%eax
  100f04:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uintptr_t s = ptr % 32;
  100f07:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f0a:	83 e0 1f             	and    $0x1f,%eax
  100f0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t i = ptr / 32;
  100f10:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f13:	c1 e8 05             	shr    $0x5,%eax
  100f16:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] &= ~(1 << s);
  100f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100f1f:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100f26:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100f29:	be 01 00 00 00       	mov    $0x1,%esi
  100f2e:	89 f7                	mov    %esi,%edi
  100f30:	89 d1                	mov    %edx,%ecx
  100f32:	d3 e7                	shl    %cl,%edi
  100f34:	89 fa                	mov    %edi,%edx
  100f36:	f7 d2                	not    %edx
  100f38:	21 da                	and    %ebx,%edx
  100f3a:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
}
  100f41:	83 c4 10             	add    $0x10,%esp
  100f44:	5b                   	pop    %ebx
  100f45:	5e                   	pop    %esi
  100f46:	5f                   	pop    %edi
  100f47:	5d                   	pop    %ebp
  100f48:	c3                   	ret    

00100f49 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100f49:	55                   	push   %ebp
  100f4a:	89 e5                	mov    %esp,%ebp
  100f4c:	83 ec 38             	sub    $0x38,%esp
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  100f4f:	8b 45 08             	mov    0x8(%ebp),%eax
  100f52:	8b 40 30             	mov    0x30(%eax),%eax
  100f55:	89 45 dc             	mov    %eax,-0x24(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);
  100f58:	8b 45 08             	mov    0x8(%ebp),%eax
  100f5b:	8b 40 30             	mov    0x30(%eax),%eax
  100f5e:	89 c2                	mov    %eax,%edx
  100f60:	8b 45 08             	mov    0x8(%ebp),%eax
  100f63:	8b 40 2c             	mov    0x2c(%eax),%eax
  100f66:	8d 04 02             	lea    (%edx,%eax,1),%eax
  100f69:	89 45 e0             	mov    %eax,-0x20(%ebp)

	memset(allocatable, 0, sizeof(allocatable));
  100f6c:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  100f73:	00 
  100f74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100f7b:	00 
  100f7c:	c7 04 24 80 64 10 00 	movl   $0x106480,(%esp)
  100f83:	e8 44 fe ff ff       	call   100dcc <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  100f88:	b8 80 64 12 00       	mov    $0x126480,%eax
  100f8d:	89 44 24 08          	mov    %eax,0x8(%esp)
  100f91:	c7 44 24 04 80 64 10 	movl   $0x106480,0x4(%esp)
  100f98:	00 
  100f99:	c7 04 24 71 30 10 00 	movl   $0x103071,(%esp)
  100fa0:	e8 d4 02 00 00       	call   101279 <kprintf>
	 
	while (mmap < mmap_end) {
  100fa5:	eb 46                	jmp    100fed <pmm_init+0xa4>
		  if (mmap->mm_type == 1) {
  100fa7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100faa:	8b 40 14             	mov    0x14(%eax),%eax
  100fad:	83 f8 01             	cmp    $0x1,%eax
  100fb0:	75 37                	jne    100fe9 <pmm_init+0xa0>
		      uintptr_t addr = mmap->mm_base_addr;
  100fb2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100fb5:	8b 50 08             	mov    0x8(%eax),%edx
  100fb8:	8b 40 04             	mov    0x4(%eax),%eax
  100fbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  100fbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100fc1:	8b 50 10             	mov    0x10(%eax),%edx
  100fc4:	8b 40 0c             	mov    0xc(%eax),%eax
  100fc7:	03 45 f0             	add    -0x10(%ebp),%eax
  100fca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 
		      while (addr < end_addr) {
  100fcd:	eb 12                	jmp    100fe1 <pmm_init+0x98>
		          pmm_free((void*) addr);
  100fcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fd2:	89 04 24             	mov    %eax,(%esp)
  100fd5:	e8 c9 fe ff ff       	call   100ea3 <pmm_free>
		          addr += 0x1000;
  100fda:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	while (mmap < mmap_end) {
		  if (mmap->mm_type == 1) {
		      uintptr_t addr = mmap->mm_base_addr;
		      uintptr_t end_addr = addr + mmap->mm_length;
	 
		      while (addr < end_addr) {
  100fe1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fe4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  100fe7:	72 e6                	jb     100fcf <pmm_init+0x86>
		          pmm_free((void*) addr);
		          addr += 0x1000;
		      }
		  }
		  mmap++;
  100fe9:	83 45 dc 18          	addl   $0x18,-0x24(%ebp)

	memset(allocatable, 0, sizeof(allocatable));

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
	 
	while (mmap < mmap_end) {
  100fed:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100ff0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100ff3:	72 b2                	jb     100fa7 <pmm_init+0x5e>
	}

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  100ff5:	c7 45 e4 00 00 10 00 	movl   $0x100000,-0x1c(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  100ffc:	eb 12                	jmp    101010 <pmm_init+0xc7>
		  pmm_mark_used((void*) addr);
  100ffe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101001:	89 04 24             	mov    %eax,(%esp)
  101004:	e8 ec fe ff ff       	call   100ef5 <pmm_mark_used>
		  addr += 0x1000;
  101009:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  101010:	b8 00 70 12 00       	mov    $0x127000,%eax
  101015:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  101018:	72 e4                	jb     100ffe <pmm_init+0xb5>
		  pmm_mark_used((void*) addr);
		  addr += 0x1000;
	}

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  10101a:	8b 45 08             	mov    0x8(%ebp),%eax
  10101d:	8b 40 18             	mov    0x18(%eax),%eax
  101020:	89 45 e8             	mov    %eax,-0x18(%ebp)

  pmm_mark_used(mb_info);
  101023:	8b 45 08             	mov    0x8(%ebp),%eax
  101026:	89 04 24             	mov    %eax,(%esp)
  101029:	e8 c7 fe ff ff       	call   100ef5 <pmm_mark_used>
  pmm_mark_used(modules);
  10102e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101031:	89 04 24             	mov    %eax,(%esp)
  101034:	e8 bc fe ff ff       	call   100ef5 <pmm_mark_used>

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  101039:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101040:	eb 37                	jmp    101079 <pmm_init+0x130>
      addr = (uintptr_t)modules[i].start;
  101042:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101045:	c1 e0 04             	shl    $0x4,%eax
  101048:	03 45 e8             	add    -0x18(%ebp),%eax
  10104b:	8b 00                	mov    (%eax),%eax
  10104d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  101050:	eb 12                	jmp    101064 <pmm_init+0x11b>
          pmm_mark_used((void*) addr);
  101052:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101055:	89 04 24             	mov    %eax,(%esp)
  101058:	e8 98 fe ff ff       	call   100ef5 <pmm_mark_used>
          addr += 0x1000;
  10105d:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  101064:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101067:	c1 e0 04             	shl    $0x4,%eax
  10106a:	03 45 e8             	add    -0x18(%ebp),%eax
  10106d:	8b 40 04             	mov    0x4(%eax),%eax
  101070:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  101073:	77 dd                	ja     101052 <pmm_init+0x109>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  101075:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  101079:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10107c:	8b 45 08             	mov    0x8(%ebp),%eax
  10107f:	8b 40 14             	mov    0x14(%eax),%eax
  101082:	39 c2                	cmp    %eax,%edx
  101084:	72 bc                	jb     101042 <pmm_init+0xf9>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  101086:	c9                   	leave  
  101087:	c3                   	ret    

00101088 <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  101088:	55                   	push   %ebp
  101089:	89 e5                	mov    %esp,%ebp
  10108b:	83 ec 14             	sub    $0x14,%esp
  10108e:	8b 45 08             	mov    0x8(%ebp),%eax
  101091:	88 45 ec             	mov    %al,-0x14(%ebp)
    if ((c == '\n') || (x > 79)) {
  101094:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  101098:	74 0a                	je     1010a4 <kputc+0x1c>
  10109a:	a1 24 40 10 00       	mov    0x104024,%eax
  10109f:	83 f8 4f             	cmp    $0x4f,%eax
  1010a2:	7e 17                	jle    1010bb <kputc+0x33>
        x = 0;
  1010a4:	c7 05 24 40 10 00 00 	movl   $0x0,0x104024
  1010ab:	00 00 00 
        y++;
  1010ae:	a1 28 40 10 00       	mov    0x104028,%eax
  1010b3:	83 c0 01             	add    $0x1,%eax
  1010b6:	a3 28 40 10 00       	mov    %eax,0x104028
    }

    if (c == '\n') {
  1010bb:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  1010bf:	0f 84 dd 00 00 00    	je     1011a2 <kputc+0x11a>
        return;
    }

    if (y > 24) {
  1010c5:	a1 28 40 10 00       	mov    0x104028,%eax
  1010ca:	83 f8 18             	cmp    $0x18,%eax
  1010cd:	7e 61                	jle    101130 <kputc+0xa8>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1010cf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1010d6:	eb 24                	jmp    1010fc <kputc+0x74>
            video[i] = video[i + 160];
  1010d8:	8b 15 04 21 10 00    	mov    0x102104,%edx
  1010de:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010e1:	01 c2                	add    %eax,%edx
  1010e3:	a1 04 21 10 00       	mov    0x102104,%eax
  1010e8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1010eb:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  1010f1:	01 c8                	add    %ecx,%eax
  1010f3:	0f b6 00             	movzbl (%eax),%eax
  1010f6:	88 02                	mov    %al,(%edx)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1010f8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1010fc:	81 7d fc ff 0e 00 00 	cmpl   $0xeff,-0x4(%ebp)
  101103:	7e d3                	jle    1010d8 <kputc+0x50>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  101105:	eb 13                	jmp    10111a <kputc+0x92>
            video[i] = 0;
  101107:	8b 15 04 21 10 00    	mov    0x102104,%edx
  10110d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101110:	8d 04 02             	lea    (%edx,%eax,1),%eax
  101113:	c6 00 00             	movb   $0x0,(%eax)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  101116:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  10111a:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  101121:	7e e4                	jle    101107 <kputc+0x7f>
            video[i] = 0;
        }
        y--;
  101123:	a1 28 40 10 00       	mov    0x104028,%eax
  101128:	83 e8 01             	sub    $0x1,%eax
  10112b:	a3 28 40 10 00       	mov    %eax,0x104028
    }

    video[2 * (y * 80 + x)] = c;
  101130:	8b 0d 04 21 10 00    	mov    0x102104,%ecx
  101136:	8b 15 28 40 10 00    	mov    0x104028,%edx
  10113c:	89 d0                	mov    %edx,%eax
  10113e:	c1 e0 02             	shl    $0x2,%eax
  101141:	01 d0                	add    %edx,%eax
  101143:	c1 e0 04             	shl    $0x4,%eax
  101146:	89 c2                	mov    %eax,%edx
  101148:	a1 24 40 10 00       	mov    0x104024,%eax
  10114d:	8d 04 02             	lea    (%edx,%eax,1),%eax
  101150:	01 c0                	add    %eax,%eax
  101152:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  101155:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  101159:	88 02                	mov    %al,(%edx)
    video[2 * (y * 80 + x) + 1] = 0x07;
  10115b:	8b 0d 04 21 10 00    	mov    0x102104,%ecx
  101161:	8b 15 28 40 10 00    	mov    0x104028,%edx
  101167:	89 d0                	mov    %edx,%eax
  101169:	c1 e0 02             	shl    $0x2,%eax
  10116c:	01 d0                	add    %edx,%eax
  10116e:	c1 e0 04             	shl    $0x4,%eax
  101171:	89 c2                	mov    %eax,%edx
  101173:	a1 24 40 10 00       	mov    0x104024,%eax
  101178:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10117b:	01 c0                	add    %eax,%eax
  10117d:	83 c0 01             	add    $0x1,%eax
  101180:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  101183:	c6 00 07             	movb   $0x7,(%eax)

    x++;
  101186:	a1 24 40 10 00       	mov    0x104024,%eax
  10118b:	83 c0 01             	add    $0x1,%eax
  10118e:	a3 24 40 10 00       	mov    %eax,0x104024
    kprintf_res++;
  101193:	a1 2c 40 10 00       	mov    0x10402c,%eax
  101198:	83 c0 01             	add    $0x1,%eax
  10119b:	a3 2c 40 10 00       	mov    %eax,0x10402c
  1011a0:	eb 01                	jmp    1011a3 <kputc+0x11b>
        x = 0;
        y++;
    }

    if (c == '\n') {
        return;
  1011a2:	90                   	nop
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = 0x07;

    x++;
    kprintf_res++;
}
  1011a3:	c9                   	leave  
  1011a4:	c3                   	ret    

001011a5 <kputs>:

static void kputs(const char* s)
{
  1011a5:	55                   	push   %ebp
  1011a6:	89 e5                	mov    %esp,%ebp
  1011a8:	83 ec 04             	sub    $0x4,%esp
    while (*s) {
  1011ab:	eb 15                	jmp    1011c2 <kputs+0x1d>
        kputc(*s++);
  1011ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1011b0:	0f b6 00             	movzbl (%eax),%eax
  1011b3:	0f be c0             	movsbl %al,%eax
  1011b6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  1011ba:	89 04 24             	mov    %eax,(%esp)
  1011bd:	e8 c6 fe ff ff       	call   101088 <kputc>
    kprintf_res++;
}

static void kputs(const char* s)
{
    while (*s) {
  1011c2:	8b 45 08             	mov    0x8(%ebp),%eax
  1011c5:	0f b6 00             	movzbl (%eax),%eax
  1011c8:	84 c0                	test   %al,%al
  1011ca:	75 e1                	jne    1011ad <kputs+0x8>
        kputc(*s++);
    }
}
  1011cc:	c9                   	leave  
  1011cd:	c3                   	ret    

001011ce <kputn>:

static void kputn(unsigned long x, int base)
{
  1011ce:	55                   	push   %ebp
  1011cf:	89 e5                	mov    %esp,%ebp
  1011d1:	83 ec 58             	sub    $0x58,%esp
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1011d4:	c7 45 f8 88 30 10 00 	movl   $0x103088,-0x8(%ebp)
    char* p;

    if (base > 36) {
  1011db:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
  1011df:	7f 54                	jg     101235 <kputn+0x67>
        return;
    }

    p = buf + 64;
  1011e1:	8d 45 b7             	lea    -0x49(%ebp),%eax
  1011e4:	83 c0 40             	add    $0x40,%eax
  1011e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *p = '\0';
  1011ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1011ed:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  1011f0:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  1011f4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1011f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1011fa:	ba 00 00 00 00       	mov    $0x0,%edx
  1011ff:	f7 f1                	div    %ecx
  101201:	89 d0                	mov    %edx,%eax
  101203:	03 45 f8             	add    -0x8(%ebp),%eax
  101206:	0f b6 10             	movzbl (%eax),%edx
  101209:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10120c:	88 10                	mov    %dl,(%eax)
        x /= base;
  10120e:	8b 45 0c             	mov    0xc(%ebp),%eax
  101211:	89 45 ac             	mov    %eax,-0x54(%ebp)
  101214:	8b 45 08             	mov    0x8(%ebp),%eax
  101217:	ba 00 00 00 00       	mov    $0x0,%edx
  10121c:	f7 75 ac             	divl   -0x54(%ebp)
  10121f:	89 45 08             	mov    %eax,0x8(%ebp)
    } while (x);
  101222:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  101226:	75 c8                	jne    1011f0 <kputn+0x22>
    kputs(p);
  101228:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10122b:	89 04 24             	mov    %eax,(%esp)
  10122e:	e8 72 ff ff ff       	call   1011a5 <kputs>
  101233:	eb 01                	jmp    101236 <kputn+0x68>
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
        return;
  101235:	90                   	nop
    do {
        *--p = digits[x % base];
        x /= base;
    } while (x);
    kputs(p);
}
  101236:	c9                   	leave  
  101237:	c3                   	ret    

00101238 <clrscr>:

void clrscr(void)
{
  101238:	55                   	push   %ebp
  101239:	89 e5                	mov    %esp,%ebp
  10123b:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  10123e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  101245:	eb 13                	jmp    10125a <clrscr+0x22>
        video[i] = 0;
  101247:	8b 15 04 21 10 00    	mov    0x102104,%edx
  10124d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101250:	8d 04 02             	lea    (%edx,%eax,1),%eax
  101253:	c6 00 00             	movb   $0x0,(%eax)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  101256:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  10125a:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  101261:	7e e4                	jle    101247 <clrscr+0xf>
        video[i] = 0;
    }

    x = y = 0;
  101263:	c7 05 28 40 10 00 00 	movl   $0x0,0x104028
  10126a:	00 00 00 
  10126d:	a1 28 40 10 00       	mov    0x104028,%eax
  101272:	a3 24 40 10 00       	mov    %eax,0x104024
}
  101277:	c9                   	leave  
  101278:	c3                   	ret    

00101279 <kprintf>:

int kprintf(const char* fmt, ...)
{
  101279:	55                   	push   %ebp
  10127a:	89 e5                	mov    %esp,%ebp
  10127c:	83 ec 18             	sub    $0x18,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  10127f:	8d 45 0c             	lea    0xc(%ebp),%eax
  101282:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf_res = 0;
  101285:	c7 05 2c 40 10 00 00 	movl   $0x0,0x10402c
  10128c:	00 00 00 
  while (*fmt) {
  10128f:	e9 2d 01 00 00       	jmp    1013c1 <kprintf+0x148>
    if (*fmt == '%') {
  101294:	8b 45 08             	mov    0x8(%ebp),%eax
  101297:	0f b6 00             	movzbl (%eax),%eax
  10129a:	3c 25                	cmp    $0x25,%al
  10129c:	0f 85 0a 01 00 00    	jne    1013ac <kprintf+0x133>
      fmt++;
  1012a2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
  1012a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1012a9:	0f b6 00             	movzbl (%eax),%eax
  1012ac:	0f be c0             	movsbl %al,%eax
  1012af:	83 f8 70             	cmp    $0x70,%eax
  1012b2:	0f 84 87 00 00 00    	je     10133f <kprintf+0xc6>
  1012b8:	83 f8 70             	cmp    $0x70,%eax
  1012bb:	7f 2e                	jg     1012eb <kprintf+0x72>
  1012bd:	83 f8 63             	cmp    $0x63,%eax
  1012c0:	0f 84 9c 00 00 00    	je     101362 <kprintf+0xe9>
  1012c6:	83 f8 63             	cmp    $0x63,%eax
  1012c9:	7f 16                	jg     1012e1 <kprintf+0x68>
  1012cb:	85 c0                	test   %eax,%eax
  1012cd:	0f 84 fe 00 00 00    	je     1013d1 <kprintf+0x158>
  1012d3:	83 f8 25             	cmp    $0x25,%eax
  1012d6:	0f 84 a2 00 00 00    	je     10137e <kprintf+0x105>
  1012dc:	e9 ac 00 00 00       	jmp    10138d <kprintf+0x114>
  1012e1:	83 f8 64             	cmp    $0x64,%eax
  1012e4:	74 36                	je     10131c <kprintf+0xa3>
  1012e6:	e9 a2 00 00 00       	jmp    10138d <kprintf+0x114>
  1012eb:	83 f8 75             	cmp    $0x75,%eax
  1012ee:	74 2c                	je     10131c <kprintf+0xa3>
  1012f0:	83 f8 78             	cmp    $0x78,%eax
  1012f3:	74 4a                	je     10133f <kprintf+0xc6>
  1012f5:	83 f8 73             	cmp    $0x73,%eax
  1012f8:	0f 85 8f 00 00 00    	jne    10138d <kprintf+0x114>
        case 's':
          s = va_arg(ap, char*);
  1012fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101301:	8d 50 04             	lea    0x4(%eax),%edx
  101304:	89 55 f0             	mov    %edx,-0x10(%ebp)
  101307:	8b 00                	mov    (%eax),%eax
  101309:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  10130c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10130f:	89 04 24             	mov    %eax,(%esp)
  101312:	e8 8e fe ff ff       	call   1011a5 <kputs>
          break;
  101317:	e9 a1 00 00 00       	jmp    1013bd <kprintf+0x144>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  10131c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10131f:	8d 50 04             	lea    0x4(%eax),%edx
  101322:	89 55 f0             	mov    %edx,-0x10(%ebp)
  101325:	8b 00                	mov    (%eax),%eax
  101327:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 10);
  10132a:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  101331:	00 
  101332:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101335:	89 04 24             	mov    %eax,(%esp)
  101338:	e8 91 fe ff ff       	call   1011ce <kputn>
          break;
  10133d:	eb 7e                	jmp    1013bd <kprintf+0x144>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  10133f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101342:	8d 50 04             	lea    0x4(%eax),%edx
  101345:	89 55 f0             	mov    %edx,-0x10(%ebp)
  101348:	8b 00                	mov    (%eax),%eax
  10134a:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 16);
  10134d:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  101354:	00 
  101355:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101358:	89 04 24             	mov    %eax,(%esp)
  10135b:	e8 6e fe ff ff       	call   1011ce <kputn>
          break;
  101360:	eb 5b                	jmp    1013bd <kprintf+0x144>
				case 'c':
					c = va_arg(ap, int);
  101362:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101365:	8d 50 04             	lea    0x4(%eax),%edx
  101368:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10136b:	8b 00                	mov    (%eax),%eax
  10136d:	88 45 ff             	mov    %al,-0x1(%ebp)
					kputc(c);
  101370:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  101374:	89 04 24             	mov    %eax,(%esp)
  101377:	e8 0c fd ff ff       	call   101088 <kputc>
					break;
  10137c:	eb 3f                	jmp    1013bd <kprintf+0x144>
        case '%':
          kputc('%');
  10137e:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101385:	e8 fe fc ff ff       	call   101088 <kputc>
          break;
  10138a:	90                   	nop
  10138b:	eb 30                	jmp    1013bd <kprintf+0x144>
        case '\0':
          goto out;
        default:
          kputc('%');
  10138d:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101394:	e8 ef fc ff ff       	call   101088 <kputc>
          kputc(*fmt);
  101399:	8b 45 08             	mov    0x8(%ebp),%eax
  10139c:	0f b6 00             	movzbl (%eax),%eax
  10139f:	0f be c0             	movsbl %al,%eax
  1013a2:	89 04 24             	mov    %eax,(%esp)
  1013a5:	e8 de fc ff ff       	call   101088 <kputc>
  1013aa:	eb 11                	jmp    1013bd <kprintf+0x144>
          break;
      }
    } else {
      kputc(*fmt);
  1013ac:	8b 45 08             	mov    0x8(%ebp),%eax
  1013af:	0f b6 00             	movzbl (%eax),%eax
  1013b2:	0f be c0             	movsbl %al,%eax
  1013b5:	89 04 24             	mov    %eax,(%esp)
  1013b8:	e8 cb fc ff ff       	call   101088 <kputc>
    }

    fmt++;
  1013bd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;

  va_start(ap, fmt);
  kprintf_res = 0;
  while (*fmt) {
  1013c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1013c4:	0f b6 00             	movzbl (%eax),%eax
  1013c7:	84 c0                	test   %al,%al
  1013c9:	0f 85 c5 fe ff ff    	jne    101294 <kprintf+0x1b>
  1013cf:	eb 01                	jmp    1013d2 <kprintf+0x159>
					break;
        case '%':
          kputc('%');
          break;
        case '\0':
          goto out;
  1013d1:	90                   	nop
  }

out:
  va_end(ap);

  return kprintf_res;
  1013d2:	a1 2c 40 10 00       	mov    0x10402c,%eax
}
  1013d7:	c9                   	leave  
  1013d8:	c3                   	ret    
  1013d9:	00 00                	add    %al,(%eax)
	...

001013dc <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  1013dc:	55                   	push   %ebp
  1013dd:	89 e5                	mov    %esp,%ebp
  1013df:	83 ec 08             	sub    $0x8,%esp
  1013e2:	8b 55 08             	mov    0x8(%ebp),%edx
  1013e5:	8b 45 0c             	mov    0xc(%ebp),%eax
  1013e8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  1013ec:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1013ef:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  1013f3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  1013f7:	ee                   	out    %al,(%dx)
}
  1013f8:	c9                   	leave  
  1013f9:	c3                   	ret    

001013fa <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  1013fa:	55                   	push   %ebp
  1013fb:	89 e5                	mov    %esp,%ebp
  1013fd:	57                   	push   %edi
  1013fe:	56                   	push   %esi
  1013ff:	53                   	push   %ebx
  101400:	83 ec 34             	sub    $0x34,%esp
  101403:	8b 55 10             	mov    0x10(%ebp),%edx
  101406:	8b 45 14             	mov    0x14(%ebp),%eax
  101409:	66 89 55 dc          	mov    %dx,-0x24(%ebp)
  10140d:	88 45 d8             	mov    %al,-0x28(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101410:	8b 45 0c             	mov    0xc(%ebp),%eax
  101413:	89 45 ec             	mov    %eax,-0x14(%ebp)
	idt[i] = handler & 0xffffLL;
  101416:	8b 75 08             	mov    0x8(%ebp),%esi
  101419:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10141c:	ba 00 00 00 00       	mov    $0x0,%edx
  101421:	0f b7 c8             	movzwl %ax,%ecx
  101424:	89 d3                	mov    %edx,%ebx
  101426:	83 e3 00             	and    $0x0,%ebx
  101429:	89 0c f5 40 40 10 00 	mov    %ecx,0x104040(,%esi,8)
  101430:	89 1c f5 44 40 10 00 	mov    %ebx,0x104044(,%esi,8)
	idt[i] |= (selector & 0xffffLL) << 16;
  101437:	8b 75 08             	mov    0x8(%ebp),%esi
  10143a:	8b 45 08             	mov    0x8(%ebp),%eax
  10143d:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  101444:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  10144b:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
  10144f:	ba 00 00 00 00       	mov    $0x0,%edx
  101454:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  101458:	c1 e0 10             	shl    $0x10,%eax
  10145b:	89 cf                	mov    %ecx,%edi
  10145d:	09 c7                	or     %eax,%edi
  10145f:	89 7d c0             	mov    %edi,-0x40(%ebp)
  101462:	89 df                	mov    %ebx,%edi
  101464:	09 d7                	or     %edx,%edi
  101466:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  101469:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10146c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  10146f:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  101476:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  10147d:	8b 75 08             	mov    0x8(%ebp),%esi
  101480:	8b 45 08             	mov    0x8(%ebp),%eax
  101483:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  10148a:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  101491:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
  101495:	ba 00 00 00 00       	mov    $0x0,%edx
  10149a:	89 c2                	mov    %eax,%edx
  10149c:	b8 00 00 00 00       	mov    $0x0,%eax
  1014a1:	c1 e2 08             	shl    $0x8,%edx
  1014a4:	89 cf                	mov    %ecx,%edi
  1014a6:	09 c7                	or     %eax,%edi
  1014a8:	89 7d c8             	mov    %edi,-0x38(%ebp)
  1014ab:	89 df                	mov    %ebx,%edi
  1014ad:	09 d7                	or     %edx,%edi
  1014af:	89 7d cc             	mov    %edi,-0x34(%ebp)
  1014b2:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1014b5:	8b 55 cc             	mov    -0x34(%ebp),%edx
  1014b8:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  1014bf:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  1014c6:	8b 75 08             	mov    0x8(%ebp),%esi
  1014c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1014cc:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  1014d3:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  1014da:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1014dd:	c1 e8 10             	shr    $0x10,%eax
  1014e0:	ba 00 00 00 00       	mov    $0x0,%edx
  1014e5:	89 c2                	mov    %eax,%edx
  1014e7:	b8 00 00 00 00       	mov    $0x0,%eax
  1014ec:	c1 e2 10             	shl    $0x10,%edx
  1014ef:	89 cf                	mov    %ecx,%edi
  1014f1:	09 c7                	or     %eax,%edi
  1014f3:	89 7d d0             	mov    %edi,-0x30(%ebp)
  1014f6:	89 df                	mov    %ebx,%edi
  1014f8:	09 d7                	or     %edx,%edi
  1014fa:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  1014fd:	8b 45 d0             	mov    -0x30(%ebp),%eax
  101500:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  101503:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  10150a:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
}
  101511:	83 c4 34             	add    $0x34,%esp
  101514:	5b                   	pop    %ebx
  101515:	5e                   	pop    %esi
  101516:	5f                   	pop    %edi
  101517:	5d                   	pop    %ebp
  101518:	c3                   	ret    

00101519 <init_idt>:

void init_idt() {
  101519:	55                   	push   %ebp
  10151a:	89 e5                	mov    %esp,%ebp
  10151c:	83 ec 28             	sub    $0x28,%esp
		  unsigned short int limit;
		  void* pointer;
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};
  10151f:	66 c7 45 ee ff 01    	movw   $0x1ff,-0x12(%ebp)
  101525:	c7 45 f0 40 40 10 00 	movl   $0x104040,-0x10(%ebp)

	int i = 0;
  10152c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  101533:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10153a:	eb 12                	jmp    10154e <init_idt+0x35>
		handler_set[i] = 0;
  10153c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10153f:	c7 04 85 40 43 10 00 	movl   $0x0,0x104340(,%eax,4)
  101546:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  10154a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  10154e:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
  101552:	7e e8                	jle    10153c <init_idt+0x23>
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  101554:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10155b:	00 
  10155c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101563:	e8 74 fe ff ff       	call   1013dc <outb>
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  101568:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  10156f:	00 
  101570:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101577:	e8 60 fe ff ff       	call   1013dc <outb>
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  10157c:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  101583:	00 
  101584:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10158b:	e8 4c fe ff ff       	call   1013dc <outb>
  outb(0x21, 0x01); // ICW 4
  101590:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  101597:	00 
  101598:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10159f:	e8 38 fe ff ff       	call   1013dc <outb>

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  1015a4:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1015ab:	00 
  1015ac:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1015b3:	e8 24 fe ff ff       	call   1013dc <outb>
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  1015b8:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  1015bf:	00 
  1015c0:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1015c7:	e8 10 fe ff ff       	call   1013dc <outb>
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  1015cc:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1015d3:	00 
  1015d4:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1015db:	e8 fc fd ff ff       	call   1013dc <outb>
  outb(0xa1, 0x01); // ICW 4
  1015e0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1015e7:	00 
  1015e8:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1015ef:	e8 e8 fd ff ff       	call   1013dc <outb>

  outb(0x20, 0x0);
  1015f4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1015fb:	00 
  1015fc:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101603:	e8 d4 fd ff ff       	call   1013dc <outb>
  outb(0xa0, 0x0);
  101608:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10160f:	00 
  101610:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101617:	e8 c0 fd ff ff       	call   1013dc <outb>

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10161c:	b8 f8 02 10 00       	mov    $0x1002f8,%eax
  101621:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101628:	00 
  101629:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101630:	00 
  101631:	89 44 24 04          	mov    %eax,0x4(%esp)
  101635:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10163c:	e8 b9 fd ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101641:	b8 01 03 10 00       	mov    $0x100301,%eax
  101646:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10164d:	00 
  10164e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101655:	00 
  101656:	89 44 24 04          	mov    %eax,0x4(%esp)
  10165a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101661:	e8 94 fd ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101666:	b8 0a 03 10 00       	mov    $0x10030a,%eax
  10166b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101672:	00 
  101673:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10167a:	00 
  10167b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10167f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101686:	e8 6f fd ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10168b:	b8 13 03 10 00       	mov    $0x100313,%eax
  101690:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101697:	00 
  101698:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10169f:	00 
  1016a0:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016a4:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1016ab:	e8 4a fd ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016b0:	b8 1c 03 10 00       	mov    $0x10031c,%eax
  1016b5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016bc:	00 
  1016bd:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016c4:	00 
  1016c5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016c9:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1016d0:	e8 25 fd ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016d5:	b8 25 03 10 00       	mov    $0x100325,%eax
  1016da:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016e1:	00 
  1016e2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016e9:	00 
  1016ea:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016ee:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1016f5:	e8 00 fd ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016fa:	b8 2e 03 10 00       	mov    $0x10032e,%eax
  1016ff:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101706:	00 
  101707:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10170e:	00 
  10170f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101713:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10171a:	e8 db fc ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10171f:	b8 37 03 10 00       	mov    $0x100337,%eax
  101724:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10172b:	00 
  10172c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101733:	00 
  101734:	89 44 24 04          	mov    %eax,0x4(%esp)
  101738:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  10173f:	e8 b6 fc ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101744:	b8 40 03 10 00       	mov    $0x100340,%eax
  101749:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101750:	00 
  101751:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101758:	00 
  101759:	89 44 24 04          	mov    %eax,0x4(%esp)
  10175d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101764:	e8 91 fc ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101769:	b8 47 03 10 00       	mov    $0x100347,%eax
  10176e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101775:	00 
  101776:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10177d:	00 
  10177e:	89 44 24 04          	mov    %eax,0x4(%esp)
  101782:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101789:	e8 6c fc ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10178e:	b8 50 03 10 00       	mov    $0x100350,%eax
  101793:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10179a:	00 
  10179b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017a2:	00 
  1017a3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017a7:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1017ae:	e8 47 fc ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017b3:	b8 57 03 10 00       	mov    $0x100357,%eax
  1017b8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017bf:	00 
  1017c0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017c7:	00 
  1017c8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017cc:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  1017d3:	e8 22 fc ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017d8:	b8 5e 03 10 00       	mov    $0x10035e,%eax
  1017dd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017e4:	00 
  1017e5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017ec:	00 
  1017ed:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017f1:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  1017f8:	e8 fd fb ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017fd:	b8 65 03 10 00       	mov    $0x100365,%eax
  101802:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101809:	00 
  10180a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101811:	00 
  101812:	89 44 24 04          	mov    %eax,0x4(%esp)
  101816:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  10181d:	e8 d8 fb ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101822:	b8 6c 03 10 00       	mov    $0x10036c,%eax
  101827:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10182e:	00 
  10182f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101836:	00 
  101837:	89 44 24 04          	mov    %eax,0x4(%esp)
  10183b:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  101842:	e8 b3 fb ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101847:	b8 70 03 10 00       	mov    $0x100370,%eax
  10184c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101853:	00 
  101854:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10185b:	00 
  10185c:	89 44 24 04          	mov    %eax,0x4(%esp)
  101860:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101867:	e8 8e fb ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10186c:	b8 76 03 10 00       	mov    $0x100376,%eax
  101871:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101878:	00 
  101879:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101880:	00 
  101881:	89 44 24 04          	mov    %eax,0x4(%esp)
  101885:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10188c:	e8 69 fb ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101891:	b8 7c 03 10 00       	mov    $0x10037c,%eax
  101896:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10189d:	00 
  10189e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018a5:	00 
  1018a6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018aa:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1018b1:	e8 44 fb ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018b6:	b8 80 03 10 00       	mov    $0x100380,%eax
  1018bb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018c2:	00 
  1018c3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018ca:	00 
  1018cb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018cf:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1018d6:	e8 1f fb ff ff       	call   1013fa <idt_set_entry>

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018db:	b8 86 03 10 00       	mov    $0x100386,%eax
  1018e0:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018e7:	00 
  1018e8:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018ef:	00 
  1018f0:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018f4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1018fb:	e8 fa fa ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101900:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101905:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10190c:	00 
  10190d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101914:	00 
  101915:	89 44 24 04          	mov    %eax,0x4(%esp)
  101919:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101920:	e8 d5 fa ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(34, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101925:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  10192a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101931:	00 
  101932:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101939:	00 
  10193a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10193e:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  101945:	e8 b0 fa ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(35, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10194a:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  10194f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101956:	00 
  101957:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10195e:	00 
  10195f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101963:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  10196a:	e8 8b fa ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(36, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10196f:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101974:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10197b:	00 
  10197c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101983:	00 
  101984:	89 44 24 04          	mov    %eax,0x4(%esp)
  101988:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  10198f:	e8 66 fa ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(37, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101994:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101999:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019a0:	00 
  1019a1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019a8:	00 
  1019a9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019ad:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1019b4:	e8 41 fa ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(38, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019b9:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019be:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019c5:	00 
  1019c6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019cd:	00 
  1019ce:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019d2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  1019d9:	e8 1c fa ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(39, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019de:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019e3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019ea:	00 
  1019eb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019f2:	00 
  1019f3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019f7:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  1019fe:	e8 f7 f9 ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(40, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a03:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a08:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a0f:	00 
  101a10:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a17:	00 
  101a18:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a1c:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101a23:	e8 d2 f9 ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(41, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a28:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a2d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a34:	00 
  101a35:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a3c:	00 
  101a3d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a41:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101a48:	e8 ad f9 ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(42, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a4d:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a52:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a59:	00 
  101a5a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a61:	00 
  101a62:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a66:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101a6d:	e8 88 f9 ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(43, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a72:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a77:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a7e:	00 
  101a7f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a86:	00 
  101a87:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a8b:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101a92:	e8 63 f9 ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(44, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a97:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a9c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101aa3:	00 
  101aa4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101aab:	00 
  101aac:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ab0:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101ab7:	e8 3e f9 ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(45, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101abc:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101ac1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ac8:	00 
  101ac9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ad0:	00 
  101ad1:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ad5:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101adc:	e8 19 f9 ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(46, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ae1:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101ae6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101aed:	00 
  101aee:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101af5:	00 
  101af6:	89 44 24 04          	mov    %eax,0x4(%esp)
  101afa:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101b01:	e8 f4 f8 ff ff       	call   1013fa <idt_set_entry>
  idt_set_entry(47, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b06:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b0b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b12:	00 
  101b13:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b1a:	00 
  101b1b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b1f:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101b26:	e8 cf f8 ff ff       	call   1013fa <idt_set_entry>

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101b2b:	b8 e6 03 10 00       	mov    $0x1003e6,%eax
  101b30:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101b37:	00 
  101b38:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b3f:	00 
  101b40:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b44:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101b4b:	e8 aa f8 ff ff       	call   1013fa <idt_set_entry>

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101b50:	b8 20 21 10 00       	mov    $0x102120,%eax
  101b55:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101b5c:	00 
  101b5d:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101b64:	00 
  101b65:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b69:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101b70:	e8 c5 e4 ff ff       	call   10003a <set_gdt_entry>

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101b75:	b8 28 00 00 00       	mov    $0x28,%eax
  101b7a:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101b7d:	0f 01 5d ee          	lidtl  -0x12(%ebp)
	asm volatile("sti");
  101b81:	fb                   	sti    
}
  101b82:	c9                   	leave  
  101b83:	c3                   	ret    

00101b84 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  101b84:	55                   	push   %ebp
  101b85:	89 e5                	mov    %esp,%ebp
	handlers[i] = fn;
  101b87:	8b 45 08             	mov    0x8(%ebp),%eax
  101b8a:	8b 55 0c             	mov    0xc(%ebp),%edx
  101b8d:	89 14 85 40 42 10 00 	mov    %edx,0x104240(,%eax,4)
	handler_set[i] = 1;
  101b94:	8b 45 08             	mov    0x8(%ebp),%eax
  101b97:	c7 04 85 40 43 10 00 	movl   $0x1,0x104340(,%eax,4)
  101b9e:	01 00 00 00 
}
  101ba2:	5d                   	pop    %ebp
  101ba3:	c3                   	ret    

00101ba4 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  101ba4:	55                   	push   %ebp
  101ba5:	89 e5                	mov    %esp,%ebp
  101ba7:	53                   	push   %ebx
  101ba8:	83 ec 34             	sub    $0x34,%esp
  struct cpu_state* new_cpu = cpu;
  101bab:	8b 45 08             	mov    0x8(%ebp),%eax
  101bae:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (cpu->intr <= 0x1f) {
  101bb1:	8b 45 08             	mov    0x8(%ebp),%eax
  101bb4:	8b 40 1c             	mov    0x1c(%eax),%eax
  101bb7:	83 f8 1f             	cmp    $0x1f,%eax
  101bba:	0f 87 df 00 00 00    	ja     101c9f <handle_interrupt+0xfb>
    kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  101bc0:	8b 45 08             	mov    0x8(%ebp),%eax
  101bc3:	8b 50 20             	mov    0x20(%eax),%edx
  101bc6:	8b 45 08             	mov    0x8(%ebp),%eax
  101bc9:	8b 40 1c             	mov    0x1c(%eax),%eax
  101bcc:	89 54 24 08          	mov    %edx,0x8(%esp)
  101bd0:	89 44 24 04          	mov    %eax,0x4(%esp)
  101bd4:	c7 04 24 b0 30 10 00 	movl   $0x1030b0,(%esp)
  101bdb:	e8 99 f6 ff ff       	call   101279 <kprintf>

		kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  101be0:	8b 45 08             	mov    0x8(%ebp),%eax
  101be3:	8b 58 0c             	mov    0xc(%eax),%ebx
  101be6:	8b 45 08             	mov    0x8(%ebp),%eax
  101be9:	8b 48 08             	mov    0x8(%eax),%ecx
  101bec:	8b 45 08             	mov    0x8(%ebp),%eax
  101bef:	8b 50 04             	mov    0x4(%eax),%edx
  101bf2:	8b 45 08             	mov    0x8(%ebp),%eax
  101bf5:	8b 00                	mov    (%eax),%eax
  101bf7:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101bfb:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101bff:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c03:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c07:	c7 04 24 d4 30 10 00 	movl   $0x1030d4,(%esp)
  101c0e:	e8 66 f6 ff ff       	call   101279 <kprintf>
		kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  101c13:	8b 45 08             	mov    0x8(%ebp),%eax
  101c16:	8b 58 24             	mov    0x24(%eax),%ebx
  101c19:	8b 45 08             	mov    0x8(%ebp),%eax
  101c1c:	8b 48 18             	mov    0x18(%eax),%ecx
  101c1f:	8b 45 08             	mov    0x8(%ebp),%eax
  101c22:	8b 50 14             	mov    0x14(%eax),%edx
  101c25:	8b 45 08             	mov    0x8(%ebp),%eax
  101c28:	8b 40 10             	mov    0x10(%eax),%eax
  101c2b:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101c2f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101c33:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c37:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c3b:	c7 04 24 f8 30 10 00 	movl   $0x1030f8,(%esp)
  101c42:	e8 32 f6 ff ff       	call   101279 <kprintf>
		kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  101c47:	8b 45 08             	mov    0x8(%ebp),%eax
  101c4a:	8b 58 34             	mov    0x34(%eax),%ebx
  101c4d:	8b 45 08             	mov    0x8(%ebp),%eax
  101c50:	8b 48 30             	mov    0x30(%eax),%ecx
  101c53:	8b 45 08             	mov    0x8(%ebp),%eax
  101c56:	8b 50 2c             	mov    0x2c(%eax),%edx
  101c59:	8b 45 08             	mov    0x8(%ebp),%eax
  101c5c:	8b 40 28             	mov    0x28(%eax),%eax
  101c5f:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101c63:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101c67:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c6b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c6f:	c7 04 24 1c 31 10 00 	movl   $0x10311c,(%esp)
  101c76:	e8 fe f5 ff ff       	call   101279 <kprintf>

		uint32_t cr2 = 0;
  101c7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		asm volatile("mov %%cr2, %0" : "=r" (cr2));
  101c82:	0f 20 d0             	mov    %cr2,%eax
  101c85:	89 45 f4             	mov    %eax,-0xc(%ebp)

		kprintf("CR2: %x", cr2);
  101c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101c8b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c8f:	c7 04 24 3e 31 10 00 	movl   $0x10313e,(%esp)
  101c96:	e8 de f5 ff ff       	call   101279 <kprintf>
	
    while(1) {
      asm volatile("cli; hlt");
  101c9b:	fa                   	cli    
  101c9c:	f4                   	hlt    
    }
  101c9d:	eb fc                	jmp    101c9b <handle_interrupt+0xf7>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101c9f:	8b 45 08             	mov    0x8(%ebp),%eax
  101ca2:	8b 40 1c             	mov    0x1c(%eax),%eax
  101ca5:	83 f8 1f             	cmp    $0x1f,%eax
  101ca8:	76 60                	jbe    101d0a <handle_interrupt+0x166>
  101caa:	8b 45 08             	mov    0x8(%ebp),%eax
  101cad:	8b 40 1c             	mov    0x1c(%eax),%eax
  101cb0:	83 f8 2f             	cmp    $0x2f,%eax
  101cb3:	77 55                	ja     101d0a <handle_interrupt+0x166>
    if (cpu->intr >= 0x28) {
  101cb5:	8b 45 08             	mov    0x8(%ebp),%eax
  101cb8:	8b 40 1c             	mov    0x1c(%eax),%eax
  101cbb:	83 f8 27             	cmp    $0x27,%eax
  101cbe:	76 14                	jbe    101cd4 <handle_interrupt+0x130>
      outb(0xa0, 0x20);
  101cc0:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101cc7:	00 
  101cc8:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101ccf:	e8 08 f7 ff ff       	call   1013dc <outb>
    }
    if (cpu->intr == 0x20) {
        //new_cpu = schedule(cpu);
        //tss[1] = (uint32_t) (new_cpu + 1);
    }
    outb(0x20, 0x20);
  101cd4:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101cdb:	00 
  101cdc:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101ce3:	e8 f4 f6 ff ff       	call   1013dc <outb>
		if(handler_set[cpu->intr]) {
  101ce8:	8b 45 08             	mov    0x8(%ebp),%eax
  101ceb:	8b 40 1c             	mov    0x1c(%eax),%eax
  101cee:	8b 04 85 40 43 10 00 	mov    0x104340(,%eax,4),%eax
  101cf5:	85 c0                	test   %eax,%eax
  101cf7:	74 3c                	je     101d35 <handle_interrupt+0x191>
			handlers[cpu->intr]();
  101cf9:	8b 45 08             	mov    0x8(%ebp),%eax
  101cfc:	8b 40 1c             	mov    0x1c(%eax),%eax
  101cff:	8b 04 85 40 42 10 00 	mov    0x104240(,%eax,4),%eax
  101d06:	ff d0                	call   *%eax
		kprintf("CR2: %x", cr2);
	
    while(1) {
      asm volatile("cli; hlt");
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101d08:	eb 2c                	jmp    101d36 <handle_interrupt+0x192>
    }
    outb(0x20, 0x20);
		if(handler_set[cpu->intr]) {
			handlers[cpu->intr]();
		}
  } else if (cpu->intr == 0x30) {
  101d0a:	8b 45 08             	mov    0x8(%ebp),%eax
  101d0d:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d10:	83 f8 30             	cmp    $0x30,%eax
  101d13:	75 10                	jne    101d25 <handle_interrupt+0x181>
		new_cpu = syscall(new_cpu);
  101d15:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d18:	89 04 24             	mov    %eax,(%esp)
  101d1b:	e8 63 e7 ff ff       	call   100483 <syscall>
  101d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101d23:	eb 11                	jmp    101d36 <handle_interrupt+0x192>
  } else {
    kprintf("Unbekannter Interrupt\n");
  101d25:	c7 04 24 46 31 10 00 	movl   $0x103146,(%esp)
  101d2c:	e8 48 f5 ff ff       	call   101279 <kprintf>
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  101d31:	fa                   	cli    
  101d32:	f4                   	hlt    
    }
  101d33:	eb fc                	jmp    101d31 <handle_interrupt+0x18d>
		kprintf("CR2: %x", cr2);
	
    while(1) {
      asm volatile("cli; hlt");
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101d35:	90                   	nop
      // Prozessor anhalten
      asm volatile("cli; hlt");
    }
  }  

  return new_cpu;
  101d36:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  101d39:	83 c4 34             	add    $0x34,%esp
  101d3c:	5b                   	pop    %ebx
  101d3d:	5d                   	pop    %ebp
  101d3e:	c3                   	ret    
	...

00101d40 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  101d40:	55                   	push   %ebp
  101d41:	89 e5                	mov    %esp,%ebp
  101d43:	83 ec 08             	sub    $0x8,%esp
	init_keyboard_drv();
  101d46:	e8 4c ec ff ff       	call   100997 <init_keyboard_drv>
}
  101d4b:	c9                   	leave  
  101d4c:	c3                   	ret    

00101d4d <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  101d4d:	55                   	push   %ebp
  101d4e:	89 e5                	mov    %esp,%ebp
  101d50:	83 ec 18             	sub    $0x18,%esp
	clrscr();
  101d53:	e8 e0 f4 ff ff       	call   101238 <clrscr>
  pmm_init(mb_info);
  101d58:	8b 45 08             	mov    0x8(%ebp),%eax
  101d5b:	89 04 24             	mov    %eax,(%esp)
  101d5e:	e8 e6 f1 ff ff       	call   100f49 <pmm_init>

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  101d63:	c7 44 24 04 60 31 10 	movl   $0x103160,0x4(%esp)
  101d6a:	00 
  101d6b:	c7 04 24 6c 31 10 00 	movl   $0x10316c,(%esp)
  101d72:	e8 02 f5 ff ff       	call   101279 <kprintf>
	kprintf("(C) Copyright 2012 Fabian Sachara.  All Rights Reserved.\n");
  101d77:	c7 04 24 90 31 10 00 	movl   $0x103190,(%esp)
  101d7e:	e8 f6 f4 ff ff       	call   101279 <kprintf>

	kprintf("Initializing GDT...\n");
  101d83:	c7 04 24 ca 31 10 00 	movl   $0x1031ca,(%esp)
  101d8a:	e8 ea f4 ff ff       	call   101279 <kprintf>
	
	init_gdt();
  101d8f:	e8 a1 e4 ff ff       	call   100235 <init_gdt>

	kprintf("Initializing IDT...\n");
  101d94:	c7 04 24 df 31 10 00 	movl   $0x1031df,(%esp)
  101d9b:	e8 d9 f4 ff ff       	call   101279 <kprintf>

	init_idt();
  101da0:	e8 74 f7 ff ff       	call   101519 <init_idt>

	kprintf("init_drivers()\n");
  101da5:	c7 04 24 f4 31 10 00 	movl   $0x1031f4,(%esp)
  101dac:	e8 c8 f4 ff ff       	call   101279 <kprintf>

	init_drivers();
  101db1:	e8 8a ff ff ff       	call   101d40 <init_drivers>
	
	kprintf("switching to kernel_main()\n");
  101db6:	c7 04 24 04 32 10 00 	movl   $0x103204,(%esp)
  101dbd:	e8 b7 f4 ff ff       	call   101279 <kprintf>

	kernel_main(mb_info);
  101dc2:	8b 45 08             	mov    0x8(%ebp),%eax
  101dc5:	89 04 24             	mov    %eax,(%esp)
  101dc8:	e8 a9 e7 ff ff       	call   100576 <kernel_main>

  return;
}
  101dcd:	c9                   	leave  
  101dce:	c3                   	ret    
	...

00101dd0 <_start>:
  101dd0:	bc 40 64 10 00       	mov    $0x106440,%esp
  101dd5:	53                   	push   %ebx
  101dd6:	e8 72 ff ff ff       	call   101d4d <init>

00101ddb <_stop>:
  101ddb:	fa                   	cli    
  101ddc:	f4                   	hlt    
  101ddd:	eb fc                	jmp    101ddb <_stop>
