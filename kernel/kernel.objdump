
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <load_gdt-0xc>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 55                	in     $0x55,%al

0010000c <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  10000c:	55                   	push   %ebp
  10000d:	89 e5                	mov    %esp,%ebp
  10000f:	83 ec 10             	sub    $0x10,%esp
		  uint16_t limit;
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
  100012:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
  100018:	c7 45 fc 40 64 10 00 	movl   $0x106440,-0x4(%ebp)
	asm volatile("lgdt %0" : : "m" (gdtp));
  10001f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

	asm ("mov $0x10, %ax");
  100023:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100027:	8e d8                	mov    %eax,%ds
	asm ("mov %ax, %es");
  100029:	8e c0                	mov    %eax,%es
	asm ("mov %ax, %fs");
  10002b:	8e e0                	mov    %eax,%fs
	asm ("mov %ax, %gs");
  10002d:	8e e8                	mov    %eax,%gs
	asm ("mov %ax, %ss");
  10002f:	8e d0                	mov    %eax,%ss
	asm ("ljmp $0x8, $.1");
  100031:	ea 38 00 10 00 08 00 	ljmp   $0x8,$0x100038

00100038 <.1>:
	asm (".1:");
}
  100038:	c9                   	leave  
  100039:	c3                   	ret    

0010003a <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  10003a:	55                   	push   %ebp
  10003b:	89 e5                	mov    %esp,%ebp
  10003d:	57                   	push   %edi
  10003e:	56                   	push   %esi
  10003f:	53                   	push   %ebx
  100040:	83 ec 4c             	sub    $0x4c,%esp
    gdt[i] = limit & 0xffffLL;
  100043:	8b 45 08             	mov    0x8(%ebp),%eax
  100046:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100049:	8b 45 10             	mov    0x10(%ebp),%eax
  10004c:	ba 00 00 00 00       	mov    $0x0,%edx
  100051:	0f b7 c8             	movzwl %ax,%ecx
  100054:	89 d3                	mov    %edx,%ebx
  100056:	83 e3 00             	and    $0x0,%ebx
  100059:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10005c:	89 0c d5 40 64 10 00 	mov    %ecx,0x106440(,%edx,8)
  100063:	89 1c d5 44 64 10 00 	mov    %ebx,0x106444(,%edx,8)
    gdt[i] |= (base & 0xffffffLL) << 16;
  10006a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10006d:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100070:	8b 45 08             	mov    0x8(%ebp),%eax
  100073:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  10007a:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100081:	8b 45 0c             	mov    0xc(%ebp),%eax
  100084:	ba 00 00 00 00       	mov    $0x0,%edx
  100089:	89 c6                	mov    %eax,%esi
  10008b:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
  100091:	89 d7                	mov    %edx,%edi
  100093:	83 e7 00             	and    $0x0,%edi
  100096:	89 f0                	mov    %esi,%eax
  100098:	89 fa                	mov    %edi,%edx
  10009a:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  10009e:	c1 e0 10             	shl    $0x10,%eax
  1000a1:	89 ce                	mov    %ecx,%esi
  1000a3:	09 c6                	or     %eax,%esi
  1000a5:	89 75 b0             	mov    %esi,-0x50(%ebp)
  1000a8:	89 df                	mov    %ebx,%edi
  1000aa:	09 d7                	or     %edx,%edi
  1000ac:	89 7d b4             	mov    %edi,-0x4c(%ebp)
  1000af:	8b 45 b0             	mov    -0x50(%ebp),%eax
  1000b2:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1000b5:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  1000b8:	89 04 cd 40 64 10 00 	mov    %eax,0x106440(,%ecx,8)
  1000bf:	89 14 cd 44 64 10 00 	mov    %edx,0x106444(,%ecx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  1000c6:	8b 75 08             	mov    0x8(%ebp),%esi
  1000c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1000cc:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  1000d3:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  1000da:	8b 45 14             	mov    0x14(%ebp),%eax
  1000dd:	89 c2                	mov    %eax,%edx
  1000df:	c1 fa 1f             	sar    $0x1f,%edx
  1000e2:	0f b6 f8             	movzbl %al,%edi
  1000e5:	89 7d b8             	mov    %edi,-0x48(%ebp)
  1000e8:	89 d7                	mov    %edx,%edi
  1000ea:	83 e7 00             	and    $0x0,%edi
  1000ed:	89 7d bc             	mov    %edi,-0x44(%ebp)
  1000f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1000f3:	8b 55 bc             	mov    -0x44(%ebp),%edx
  1000f6:	89 c2                	mov    %eax,%edx
  1000f8:	b8 00 00 00 00       	mov    $0x0,%eax
  1000fd:	c1 e2 08             	shl    $0x8,%edx
  100100:	89 cf                	mov    %ecx,%edi
  100102:	09 c7                	or     %eax,%edi
  100104:	89 7d c0             	mov    %edi,-0x40(%ebp)
  100107:	89 df                	mov    %ebx,%edi
  100109:	09 d7                	or     %edx,%edi
  10010b:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  10010e:	8b 45 c0             	mov    -0x40(%ebp),%eax
  100111:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  100114:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  10011b:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100122:	8b 75 08             	mov    0x8(%ebp),%esi
  100125:	8b 45 08             	mov    0x8(%ebp),%eax
  100128:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  10012f:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100136:	8b 45 10             	mov    0x10(%ebp),%eax
  100139:	c1 e8 10             	shr    $0x10,%eax
  10013c:	ba 00 00 00 00       	mov    $0x0,%edx
  100141:	89 c7                	mov    %eax,%edi
  100143:	83 e7 0f             	and    $0xf,%edi
  100146:	89 7d c8             	mov    %edi,-0x38(%ebp)
  100149:	89 d7                	mov    %edx,%edi
  10014b:	83 e7 00             	and    $0x0,%edi
  10014e:	89 7d cc             	mov    %edi,-0x34(%ebp)
  100151:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100154:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100157:	89 c2                	mov    %eax,%edx
  100159:	b8 00 00 00 00       	mov    $0x0,%eax
  10015e:	c1 e2 10             	shl    $0x10,%edx
  100161:	89 cf                	mov    %ecx,%edi
  100163:	09 c7                	or     %eax,%edi
  100165:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100168:	89 df                	mov    %ebx,%edi
  10016a:	09 d7                	or     %edx,%edi
  10016c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  10016f:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100172:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100175:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  10017c:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  100183:	8b 75 08             	mov    0x8(%ebp),%esi
  100186:	8b 45 08             	mov    0x8(%ebp),%eax
  100189:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  100190:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100197:	8b 45 14             	mov    0x14(%ebp),%eax
  10019a:	c1 f8 08             	sar    $0x8,%eax
  10019d:	89 c2                	mov    %eax,%edx
  10019f:	c1 fa 1f             	sar    $0x1f,%edx
  1001a2:	0f b6 f8             	movzbl %al,%edi
  1001a5:	89 7d d8             	mov    %edi,-0x28(%ebp)
  1001a8:	89 d7                	mov    %edx,%edi
  1001aa:	83 e7 00             	and    $0x0,%edi
  1001ad:	89 7d dc             	mov    %edi,-0x24(%ebp)
  1001b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1001b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1001b6:	89 c2                	mov    %eax,%edx
  1001b8:	b8 00 00 00 00       	mov    $0x0,%eax
  1001bd:	c1 e2 14             	shl    $0x14,%edx
  1001c0:	89 cf                	mov    %ecx,%edi
  1001c2:	09 c7                	or     %eax,%edi
  1001c4:	89 7d e0             	mov    %edi,-0x20(%ebp)
  1001c7:	89 df                	mov    %ebx,%edi
  1001c9:	09 d7                	or     %edx,%edi
  1001cb:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  1001ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1001d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1001d4:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  1001db:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  1001e2:	8b 75 08             	mov    0x8(%ebp),%esi
  1001e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1001e8:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  1001ef:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  1001f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1001f9:	c1 e8 18             	shr    $0x18,%eax
  1001fc:	ba 00 00 00 00       	mov    $0x0,%edx
  100201:	89 c2                	mov    %eax,%edx
  100203:	b8 00 00 00 00       	mov    $0x0,%eax
  100208:	c1 e2 18             	shl    $0x18,%edx
  10020b:	89 cf                	mov    %ecx,%edi
  10020d:	09 c7                	or     %eax,%edi
  10020f:	89 7d e8             	mov    %edi,-0x18(%ebp)
  100212:	89 df                	mov    %ebx,%edi
  100214:	09 d7                	or     %edx,%edi
  100216:	89 7d ec             	mov    %edi,-0x14(%ebp)
  100219:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10021c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10021f:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  100226:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
}
  10022d:	83 c4 4c             	add    $0x4c,%esp
  100230:	5b                   	pop    %ebx
  100231:	5e                   	pop    %esi
  100232:	5f                   	pop    %edi
  100233:	5d                   	pop    %ebp
  100234:	c3                   	ret    

00100235 <init_gdt>:

void init_gdt(void)
{
  100235:	55                   	push   %ebp
  100236:	89 e5                	mov    %esp,%ebp
  100238:	83 ec 10             	sub    $0x10,%esp
    set_gdt_entry(0, 0, 0, 0);
  10023b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100242:	00 
  100243:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10024a:	00 
  10024b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100252:	00 
  100253:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10025a:	e8 db fd ff ff       	call   10003a <set_gdt_entry>
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10025f:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100266:	00 
  100267:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  10026e:	00 
  10026f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100276:	00 
  100277:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10027e:	e8 b7 fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100283:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  10028a:	00 
  10028b:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100292:	00 
  100293:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10029a:	00 
  10029b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1002a2:	e8 93 fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1002a7:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  1002ae:	00 
  1002af:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1002b6:	00 
  1002b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1002be:	00 
  1002bf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1002c6:	e8 6f fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1002cb:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  1002d2:	00 
  1002d3:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1002da:	00 
  1002db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1002e2:	00 
  1002e3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1002ea:	e8 4b fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  1002ef:	e8 18 fd ff ff       	call   10000c <load_gdt>
}
  1002f4:	c9                   	leave  
  1002f5:	c3                   	ret    
	...

001002f8 <intr_stub_0>:
  1002f8:	6a 00                	push   $0x0
  1002fa:	6a 00                	push   $0x0
  1002fc:	e9 eb 00 00 00       	jmp    1003ec <intr_common_handler>

00100301 <intr_stub_1>:
  100301:	6a 00                	push   $0x0
  100303:	6a 01                	push   $0x1
  100305:	e9 e2 00 00 00       	jmp    1003ec <intr_common_handler>

0010030a <intr_stub_2>:
  10030a:	6a 00                	push   $0x0
  10030c:	6a 02                	push   $0x2
  10030e:	e9 d9 00 00 00       	jmp    1003ec <intr_common_handler>

00100313 <intr_stub_3>:
  100313:	6a 00                	push   $0x0
  100315:	6a 03                	push   $0x3
  100317:	e9 d0 00 00 00       	jmp    1003ec <intr_common_handler>

0010031c <intr_stub_4>:
  10031c:	6a 00                	push   $0x0
  10031e:	6a 04                	push   $0x4
  100320:	e9 c7 00 00 00       	jmp    1003ec <intr_common_handler>

00100325 <intr_stub_5>:
  100325:	6a 00                	push   $0x0
  100327:	6a 05                	push   $0x5
  100329:	e9 be 00 00 00       	jmp    1003ec <intr_common_handler>

0010032e <intr_stub_6>:
  10032e:	6a 00                	push   $0x0
  100330:	6a 06                	push   $0x6
  100332:	e9 b5 00 00 00       	jmp    1003ec <intr_common_handler>

00100337 <intr_stub_7>:
  100337:	6a 00                	push   $0x0
  100339:	6a 07                	push   $0x7
  10033b:	e9 ac 00 00 00       	jmp    1003ec <intr_common_handler>

00100340 <intr_stub_8>:
  100340:	6a 08                	push   $0x8
  100342:	e9 a5 00 00 00       	jmp    1003ec <intr_common_handler>

00100347 <intr_stub_9>:
  100347:	6a 00                	push   $0x0
  100349:	6a 09                	push   $0x9
  10034b:	e9 9c 00 00 00       	jmp    1003ec <intr_common_handler>

00100350 <intr_stub_10>:
  100350:	6a 0a                	push   $0xa
  100352:	e9 95 00 00 00       	jmp    1003ec <intr_common_handler>

00100357 <intr_stub_11>:
  100357:	6a 0b                	push   $0xb
  100359:	e9 8e 00 00 00       	jmp    1003ec <intr_common_handler>

0010035e <intr_stub_12>:
  10035e:	6a 0c                	push   $0xc
  100360:	e9 87 00 00 00       	jmp    1003ec <intr_common_handler>

00100365 <intr_stub_13>:
  100365:	6a 0d                	push   $0xd
  100367:	e9 80 00 00 00       	jmp    1003ec <intr_common_handler>

0010036c <intr_stub_14>:
  10036c:	6a 0e                	push   $0xe
  10036e:	eb 7c                	jmp    1003ec <intr_common_handler>

00100370 <intr_stub_15>:
  100370:	6a 00                	push   $0x0
  100372:	6a 0f                	push   $0xf
  100374:	eb 76                	jmp    1003ec <intr_common_handler>

00100376 <intr_stub_16>:
  100376:	6a 00                	push   $0x0
  100378:	6a 10                	push   $0x10
  10037a:	eb 70                	jmp    1003ec <intr_common_handler>

0010037c <intr_stub_17>:
  10037c:	6a 11                	push   $0x11
  10037e:	eb 6c                	jmp    1003ec <intr_common_handler>

00100380 <intr_stub_18>:
  100380:	6a 00                	push   $0x0
  100382:	6a 12                	push   $0x12
  100384:	eb 66                	jmp    1003ec <intr_common_handler>

00100386 <intr_stub_32>:
  100386:	6a 00                	push   $0x0
  100388:	6a 20                	push   $0x20
  10038a:	eb 60                	jmp    1003ec <intr_common_handler>

0010038c <intr_stub_33>:
  10038c:	6a 00                	push   $0x0
  10038e:	6a 21                	push   $0x21
  100390:	eb 5a                	jmp    1003ec <intr_common_handler>

00100392 <intr_stub_34>:
  100392:	6a 00                	push   $0x0
  100394:	6a 22                	push   $0x22
  100396:	eb 54                	jmp    1003ec <intr_common_handler>

00100398 <intr_stub_35>:
  100398:	6a 00                	push   $0x0
  10039a:	6a 23                	push   $0x23
  10039c:	eb 4e                	jmp    1003ec <intr_common_handler>

0010039e <intr_stub_36>:
  10039e:	6a 00                	push   $0x0
  1003a0:	6a 24                	push   $0x24
  1003a2:	eb 48                	jmp    1003ec <intr_common_handler>

001003a4 <intr_stub_37>:
  1003a4:	6a 00                	push   $0x0
  1003a6:	6a 25                	push   $0x25
  1003a8:	eb 42                	jmp    1003ec <intr_common_handler>

001003aa <intr_stub_38>:
  1003aa:	6a 00                	push   $0x0
  1003ac:	6a 26                	push   $0x26
  1003ae:	eb 3c                	jmp    1003ec <intr_common_handler>

001003b0 <intr_stub_39>:
  1003b0:	6a 00                	push   $0x0
  1003b2:	6a 27                	push   $0x27
  1003b4:	eb 36                	jmp    1003ec <intr_common_handler>

001003b6 <intr_stub_40>:
  1003b6:	6a 00                	push   $0x0
  1003b8:	6a 28                	push   $0x28
  1003ba:	eb 30                	jmp    1003ec <intr_common_handler>

001003bc <intr_stub_41>:
  1003bc:	6a 00                	push   $0x0
  1003be:	6a 29                	push   $0x29
  1003c0:	eb 2a                	jmp    1003ec <intr_common_handler>

001003c2 <intr_stub_42>:
  1003c2:	6a 00                	push   $0x0
  1003c4:	6a 2a                	push   $0x2a
  1003c6:	eb 24                	jmp    1003ec <intr_common_handler>

001003c8 <intr_stub_43>:
  1003c8:	6a 00                	push   $0x0
  1003ca:	6a 2b                	push   $0x2b
  1003cc:	eb 1e                	jmp    1003ec <intr_common_handler>

001003ce <intr_stub_44>:
  1003ce:	6a 00                	push   $0x0
  1003d0:	6a 2c                	push   $0x2c
  1003d2:	eb 18                	jmp    1003ec <intr_common_handler>

001003d4 <intr_stub_45>:
  1003d4:	6a 00                	push   $0x0
  1003d6:	6a 2d                	push   $0x2d
  1003d8:	eb 12                	jmp    1003ec <intr_common_handler>

001003da <intr_stub_46>:
  1003da:	6a 00                	push   $0x0
  1003dc:	6a 2e                	push   $0x2e
  1003de:	eb 0c                	jmp    1003ec <intr_common_handler>

001003e0 <intr_stub_47>:
  1003e0:	6a 00                	push   $0x0
  1003e2:	6a 2f                	push   $0x2f
  1003e4:	eb 06                	jmp    1003ec <intr_common_handler>

001003e6 <intr_stub_48>:
  1003e6:	6a 00                	push   $0x0
  1003e8:	6a 30                	push   $0x30
  1003ea:	eb 00                	jmp    1003ec <intr_common_handler>

001003ec <intr_common_handler>:
  1003ec:	55                   	push   %ebp
  1003ed:	57                   	push   %edi
  1003ee:	56                   	push   %esi
  1003ef:	52                   	push   %edx
  1003f0:	51                   	push   %ecx
  1003f1:	53                   	push   %ebx
  1003f2:	50                   	push   %eax
  1003f3:	66 b8 10 00          	mov    $0x10,%ax
  1003f7:	8e d8                	mov    %eax,%ds
  1003f9:	8e c0                	mov    %eax,%es
  1003fb:	54                   	push   %esp
  1003fc:	e8 fb 17 00 00       	call   101bfc <handle_interrupt>
  100401:	89 c4                	mov    %eax,%esp
  100403:	66 b8 23 00          	mov    $0x23,%ax
  100407:	8e d8                	mov    %eax,%ds
  100409:	8e c0                	mov    %eax,%es
  10040b:	58                   	pop    %eax
  10040c:	5b                   	pop    %ebx
  10040d:	59                   	pop    %ecx
  10040e:	5a                   	pop    %edx
  10040f:	5e                   	pop    %esi
  100410:	5f                   	pop    %edi
  100411:	5d                   	pop    %ebp
  100412:	83 c4 08             	add    $0x8,%esp
  100415:	cf                   	iret   
	...

00100418 <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100418:	55                   	push   %ebp
  100419:	89 e5                	mov    %esp,%ebp
  10041b:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  10041e:	8b 45 08             	mov    0x8(%ebp),%eax
  100421:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100424:	eb 0e                	jmp    100434 <memset+0x1c>
        *p++ = c;
  100426:	8b 45 0c             	mov    0xc(%ebp),%eax
  100429:	89 c2                	mov    %eax,%edx
  10042b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10042e:	88 10                	mov    %dl,(%eax)
  100430:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100434:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100438:	0f 95 c0             	setne  %al
  10043b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  10043f:	84 c0                	test   %al,%al
  100441:	75 e3                	jne    100426 <memset+0xe>
        *p++ = c;
    }

    return buf;
  100443:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100446:	c9                   	leave  
  100447:	c3                   	ret    

00100448 <memcpy>:

static inline void* memcpy(void* dest, const void* src, size_t n)
{
  100448:	55                   	push   %ebp
  100449:	89 e5                	mov    %esp,%ebp
  10044b:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
  10044e:	8b 45 08             	mov    0x8(%ebp),%eax
  100451:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const unsigned char* s = src;
  100454:	8b 45 0c             	mov    0xc(%ebp),%eax
  100457:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  10045a:	eb 13                	jmp    10046f <memcpy+0x27>
        *d++ = *s++;
  10045c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10045f:	0f b6 10             	movzbl (%eax),%edx
  100462:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100465:	88 10                	mov    %dl,(%eax)
  100467:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  10046b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
static inline void* memcpy(void* dest, const void* src, size_t n)
{
    unsigned char* d = dest;
    const unsigned char* s = src;

    while (n--) {
  10046f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100473:	0f 95 c0             	setne  %al
  100476:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  10047a:	84 c0                	test   %al,%al
  10047c:	75 de                	jne    10045c <memcpy+0x14>
        *d++ = *s++;
    }

    return dest;
  10047e:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100481:	c9                   	leave  
  100482:	c3                   	ret    

00100483 <syscall>:
#include "string.h"
#include "elf.h"
#include "vmm.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  100483:	55                   	push   %ebp
  100484:	89 e5                	mov    %esp,%ebp
  100486:	83 ec 18             	sub    $0x18,%esp
    switch (cpu->eax) {
  100489:	8b 45 08             	mov    0x8(%ebp),%eax
  10048c:	8b 00                	mov    (%eax),%eax
  10048e:	85 c0                	test   %eax,%eax
  100490:	75 16                	jne    1004a8 <syscall+0x25>
        case 0: /* putc */
            kprintf("%c", cpu->ebx);
  100492:	8b 45 08             	mov    0x8(%ebp),%eax
  100495:	8b 40 04             	mov    0x4(%eax),%eax
  100498:	89 44 24 04          	mov    %eax,0x4(%esp)
  10049c:	c7 04 24 00 30 10 00 	movl   $0x103000,(%esp)
  1004a3:	e8 29 0e 00 00       	call   1012d1 <kprintf>
            break;
    }
 
    return cpu;
  1004a8:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1004ab:	c9                   	leave  
  1004ac:	c3                   	ret    

001004ad <init_elf>:

void init_elf(void* image)
{
  1004ad:	55                   	push   %ebp
  1004ae:	89 e5                	mov    %esp,%ebp
  1004b0:	83 ec 38             	sub    $0x38,%esp
    /*
     * FIXME Wir muessen eigentlich die Laenge vom Image pruefen, damit wir bei
     * korrupten ELF-Dateien nicht ueber das Dateiende hinauslesen.
     */
 
    struct elf_header* header = image;
  1004b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1004b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct elf_program_header* ph;
    int i;
 
    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  1004b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1004bc:	8b 00                	mov    (%eax),%eax
  1004be:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  1004c3:	74 11                	je     1004d6 <init_elf+0x29>
        kprintf("Keine gueltige ELF-Magic!\n");
  1004c5:	c7 04 24 03 30 10 00 	movl   $0x103003,(%esp)
  1004cc:	e8 00 0e 00 00       	call   1012d1 <kprintf>
        return;
  1004d1:	e9 8a 00 00 00       	jmp    100560 <init_elf+0xb3>
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
  1004d6:	8b 55 08             	mov    0x8(%ebp),%edx
  1004d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1004dc:	8b 40 1c             	mov    0x1c(%eax),%eax
  1004df:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1004e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  1004e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1004ec:	eb 63                	jmp    100551 <init_elf+0xa4>
        void* dest = (void*) ph->virt_addr;
  1004ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004f1:	8b 40 08             	mov    0x8(%eax),%eax
  1004f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        void* src = ((char*) image) + ph->offset;
  1004f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004fa:	8b 40 04             	mov    0x4(%eax),%eax
  1004fd:	03 45 08             	add    0x8(%ebp),%eax
  100500:	89 45 f4             	mov    %eax,-0xc(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  100503:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100506:	8b 00                	mov    (%eax),%eax
  100508:	83 f8 01             	cmp    $0x1,%eax
  10050b:	75 3b                	jne    100548 <init_elf+0x9b>
            continue;
        }
 
        memset(dest, 0, ph->mem_size);
  10050d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100510:	8b 40 14             	mov    0x14(%eax),%eax
  100513:	89 44 24 08          	mov    %eax,0x8(%esp)
  100517:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10051e:	00 
  10051f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100522:	89 04 24             	mov    %eax,(%esp)
  100525:	e8 ee fe ff ff       	call   100418 <memset>
        memcpy(dest, src, ph->file_size);
  10052a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10052d:	8b 40 10             	mov    0x10(%eax),%eax
  100530:	89 44 24 08          	mov    %eax,0x8(%esp)
  100534:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100537:	89 44 24 04          	mov    %eax,0x4(%esp)
  10053b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10053e:	89 04 24             	mov    %eax,(%esp)
  100541:	e8 02 ff ff ff       	call   100448 <memcpy>
  100546:	eb 01                	jmp    100549 <init_elf+0x9c>
        void* dest = (void*) ph->virt_addr;
        void* src = ((char*) image) + ph->offset;
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
  100548:	90                   	nop
        kprintf("Keine gueltige ELF-Magic!\n");
        return;
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100549:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  10054d:	83 45 e8 20          	addl   $0x20,-0x18(%ebp)
  100551:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100554:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  100558:	0f b7 c0             	movzwl %ax,%eax
  10055b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10055e:	7f 8e                	jg     1004ee <init_elf+0x41>
        memset(dest, 0, ph->mem_size);
        memcpy(dest, src, ph->file_size);
    }
 
    //init_task((void*) header->entry);
}
  100560:	c9                   	leave  
  100561:	c3                   	ret    

00100562 <task>:

void task() {
  100562:	55                   	push   %ebp
  100563:	89 e5                	mov    %esp,%ebp
  100565:	83 ec 18             	sub    $0x18,%esp
	kprintf("task");
  100568:	c7 04 24 1e 30 10 00 	movl   $0x10301e,(%esp)
  10056f:	e8 5d 0d 00 00       	call   1012d1 <kprintf>

	while(1) { };
  100574:	eb fe                	jmp    100574 <task+0x12>

00100576 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  100576:	55                   	push   %ebp
  100577:	89 e5                	mov    %esp,%ebp
  100579:	83 ec 28             	sub    $0x28,%esp
	struct vmm_context* context = vmm_init(mb_info);
  10057c:	8b 45 08             	mov    0x8(%ebp),%eax
  10057f:	89 04 24             	mov    %eax,(%esp)
  100582:	e8 58 07 00 00       	call   100cdf <vmm_init>
  100587:	89 45 f4             	mov    %eax,-0xc(%ebp)
		kprintf("Loading MB-Mod %x: S: %x E: %x\n", i, modules[i].start, modules[i].end);

		init_elf((void*) modules[i].start);
	}*/

	vmm_set_alloc_offset(context, 0x200000);
  10058a:	c7 44 24 04 00 00 20 	movl   $0x200000,0x4(%esp)
  100591:	00 
  100592:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100595:	89 04 24             	mov    %eax,(%esp)
  100598:	e8 cc 06 00 00       	call   100c69 <vmm_set_alloc_offset>

	init_task(task, context);
  10059d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1005a0:	89 44 24 04          	mov    %eax,0x4(%esp)
  1005a4:	c7 04 24 62 05 10 00 	movl   $0x100562,(%esp)
  1005ab:	e8 10 00 00 00       	call   1005c0 <init_task>

	kprintf("abc");
  1005b0:	c7 04 24 23 30 10 00 	movl   $0x103023,(%esp)
  1005b7:	e8 15 0d 00 00       	call   1012d1 <kprintf>

	while(1) {  }
  1005bc:	eb fe                	jmp    1005bc <kernel_main+0x46>
	...

001005c0 <init_task>:

static struct task* first_task = NULL;
static struct task* current_task = NULL;

struct task* init_task(void* entry, struct vmm_context* context)
{
  1005c0:	55                   	push   %ebp
  1005c1:	89 e5                	mov    %esp,%ebp
  1005c3:	57                   	push   %edi
  1005c4:	56                   	push   %esi
  1005c5:	53                   	push   %ebx
  1005c6:	83 ec 7c             	sub    $0x7c,%esp
    uint8_t* stack = vmm_alloc(context, 1);
  1005c9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1005d0:	00 
  1005d1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1005d4:	89 04 24             	mov    %eax,(%esp)
  1005d7:	e8 9b 06 00 00       	call   100c77 <vmm_alloc>
  1005dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
    uint8_t* user_stack = vmm_alloc(context, 1);
  1005df:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1005e6:	00 
  1005e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1005ea:	89 04 24             	mov    %eax,(%esp)
  1005ed:	e8 85 06 00 00       	call   100c77 <vmm_alloc>
  1005f2:	89 45 dc             	mov    %eax,-0x24(%ebp)
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
        .eip = (uint32_t) entry,
  1005f5:	8b 75 08             	mov    0x8(%ebp),%esi
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
  1005f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1005fb:	05 00 10 00 00       	add    $0x1000,%eax
  100600:	89 45 94             	mov    %eax,-0x6c(%ebp)

        .cs  = 0x18 | 0x03,
        .ss  = 0x20 | 0x03,

        .eflags = 0x200,
    };
  100603:	8d 5d a0             	lea    -0x60(%ebp),%ebx
  100606:	b8 00 00 00 00       	mov    $0x0,%eax
  10060b:	ba 0e 00 00 00       	mov    $0xe,%edx
  100610:	89 df                	mov    %ebx,%edi
  100612:	89 d1                	mov    %edx,%ecx
  100614:	f3 ab                	rep stos %eax,%es:(%edi)
  100616:	89 75 c4             	mov    %esi,-0x3c(%ebp)
  100619:	c7 45 c8 1b 00 00 00 	movl   $0x1b,-0x38(%ebp)
  100620:	c7 45 cc 00 02 00 00 	movl   $0x200,-0x34(%ebp)
  100627:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10062a:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10062d:	c7 45 d4 23 00 00 00 	movl   $0x23,-0x2c(%ebp)

    struct cpu_state* state = (void*) (stack + 4096 - sizeof(new_state));
  100634:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100637:	05 c8 0f 00 00       	add    $0xfc8,%eax
  10063c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    *state = new_state;
  10063f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100642:	8b 55 a0             	mov    -0x60(%ebp),%edx
  100645:	89 10                	mov    %edx,(%eax)
  100647:	8b 55 a4             	mov    -0x5c(%ebp),%edx
  10064a:	89 50 04             	mov    %edx,0x4(%eax)
  10064d:	8b 55 a8             	mov    -0x58(%ebp),%edx
  100650:	89 50 08             	mov    %edx,0x8(%eax)
  100653:	8b 55 ac             	mov    -0x54(%ebp),%edx
  100656:	89 50 0c             	mov    %edx,0xc(%eax)
  100659:	8b 55 b0             	mov    -0x50(%ebp),%edx
  10065c:	89 50 10             	mov    %edx,0x10(%eax)
  10065f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  100662:	89 50 14             	mov    %edx,0x14(%eax)
  100665:	8b 55 b8             	mov    -0x48(%ebp),%edx
  100668:	89 50 18             	mov    %edx,0x18(%eax)
  10066b:	8b 55 bc             	mov    -0x44(%ebp),%edx
  10066e:	89 50 1c             	mov    %edx,0x1c(%eax)
  100671:	8b 55 c0             	mov    -0x40(%ebp),%edx
  100674:	89 50 20             	mov    %edx,0x20(%eax)
  100677:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  10067a:	89 50 24             	mov    %edx,0x24(%eax)
  10067d:	8b 55 c8             	mov    -0x38(%ebp),%edx
  100680:	89 50 28             	mov    %edx,0x28(%eax)
  100683:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100686:	89 50 2c             	mov    %edx,0x2c(%eax)
  100689:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10068c:	89 50 30             	mov    %edx,0x30(%eax)
  10068f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100692:	89 50 34             	mov    %edx,0x34(%eax)

    struct task* task = vmm_alloc(context, 1);
  100695:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10069c:	00 
  10069d:	8b 45 0c             	mov    0xc(%ebp),%eax
  1006a0:	89 04 24             	mov    %eax,(%esp)
  1006a3:	e8 cf 05 00 00       	call   100c77 <vmm_alloc>
  1006a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    task->cpu_state = state;
  1006ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1006ae:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1006b1:	89 10                	mov    %edx,(%eax)
    task->next = first_task;
  1006b3:	8b 15 00 40 10 00    	mov    0x104000,%edx
  1006b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1006bc:	89 50 04             	mov    %edx,0x4(%eax)
    first_task = task;
  1006bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1006c2:	a3 00 40 10 00       	mov    %eax,0x104000
    return task;
  1006c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
  1006ca:	83 c4 7c             	add    $0x7c,%esp
  1006cd:	5b                   	pop    %ebx
  1006ce:	5e                   	pop    %esi
  1006cf:	5f                   	pop    %edi
  1006d0:	5d                   	pop    %ebp
  1006d1:	c3                   	ret    

001006d2 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu)
{
  1006d2:	55                   	push   %ebp
  1006d3:	89 e5                	mov    %esp,%ebp
    if (current_task != NULL) {
  1006d5:	a1 04 40 10 00       	mov    0x104004,%eax
  1006da:	85 c0                	test   %eax,%eax
  1006dc:	74 0a                	je     1006e8 <schedule+0x16>
        current_task->cpu_state = cpu;
  1006de:	a1 04 40 10 00       	mov    0x104004,%eax
  1006e3:	8b 55 08             	mov    0x8(%ebp),%edx
  1006e6:	89 10                	mov    %edx,(%eax)
    }

    if (current_task == NULL) {
  1006e8:	a1 04 40 10 00       	mov    0x104004,%eax
  1006ed:	85 c0                	test   %eax,%eax
  1006ef:	75 0c                	jne    1006fd <schedule+0x2b>
        current_task = first_task;
  1006f1:	a1 00 40 10 00       	mov    0x104000,%eax
  1006f6:	a3 04 40 10 00       	mov    %eax,0x104004
  1006fb:	eb 20                	jmp    10071d <schedule+0x4b>
    } else {
        current_task = current_task->next;
  1006fd:	a1 04 40 10 00       	mov    0x104004,%eax
  100702:	8b 40 04             	mov    0x4(%eax),%eax
  100705:	a3 04 40 10 00       	mov    %eax,0x104004
        if (current_task == NULL) {
  10070a:	a1 04 40 10 00       	mov    0x104004,%eax
  10070f:	85 c0                	test   %eax,%eax
  100711:	75 0a                	jne    10071d <schedule+0x4b>
            current_task = first_task;
  100713:	a1 00 40 10 00       	mov    0x104000,%eax
  100718:	a3 04 40 10 00       	mov    %eax,0x104004
        }
    }  

    cpu = current_task->cpu_state;
  10071d:	a1 04 40 10 00       	mov    0x104004,%eax
  100722:	8b 00                	mov    (%eax),%eax
  100724:	89 45 08             	mov    %eax,0x8(%ebp)

    return cpu;
  100727:	8b 45 08             	mov    0x8(%ebp),%eax
}
  10072a:	5d                   	pop    %ebp
  10072b:	c3                   	ret    

0010072c <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  10072c:	55                   	push   %ebp
  10072d:	89 e5                	mov    %esp,%ebp
  10072f:	83 ec 14             	sub    $0x14,%esp
  100732:	8b 45 08             	mov    0x8(%ebp),%eax
  100735:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  100739:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  10073d:	89 c2                	mov    %eax,%edx
  10073f:	ec                   	in     (%dx),%al
  100740:	88 45 ff             	mov    %al,-0x1(%ebp)
	return result;
  100743:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  100747:	c9                   	leave  
  100748:	c3                   	ret    

00100749 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  100749:	55                   	push   %ebp
  10074a:	89 e5                	mov    %esp,%ebp
  10074c:	83 ec 08             	sub    $0x8,%esp
  10074f:	8b 55 08             	mov    0x8(%ebp),%edx
  100752:	8b 45 0c             	mov    0xc(%ebp),%eax
  100755:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  100759:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  10075c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  100760:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  100764:	ee                   	out    %al,(%dx)
}
  100765:	c9                   	leave  
  100766:	c3                   	ret    

00100767 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  100767:	55                   	push   %ebp
  100768:	89 e5                	mov    %esp,%ebp
  10076a:	83 ec 38             	sub    $0x38,%esp
  10076d:	8b 45 0c             	mov    0xc(%ebp),%eax
  100770:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
  uint8_t keycode = 0;
  100774:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

  switch (set) {
  100778:	8b 45 08             	mov    0x8(%ebp),%eax
  10077b:	83 f8 01             	cmp    $0x1,%eax
  10077e:	74 19                	je     100799 <translate_scancode+0x32>
  100780:	83 f8 02             	cmp    $0x2,%eax
  100783:	74 24                	je     1007a9 <translate_scancode+0x42>
  100785:	85 c0                	test   %eax,%eax
  100787:	75 35                	jne    1007be <translate_scancode+0x57>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100789:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10078d:	0f b6 80 00 20 10 00 	movzbl 0x102000(%eax),%eax
  100794:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  100797:	eb 25                	jmp    1007be <translate_scancode+0x57>
    case 1:
      keycode = sc_to_kc[1][scancode];
  100799:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10079d:	0f b6 80 80 20 10 00 	movzbl 0x102080(%eax),%eax
  1007a4:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  1007a7:	eb 15                	jmp    1007be <translate_scancode+0x57>
    case 2:
      switch (scancode) {
  1007a9:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1007ad:	3d 1d 45 00 00       	cmp    $0x451d,%eax
  1007b2:	75 06                	jne    1007ba <translate_scancode+0x53>
        case 0x451D:
          keycode = 119;
  1007b4:	c6 45 f7 77          	movb   $0x77,-0x9(%ebp)
          break;
  1007b8:	eb 04                	jmp    1007be <translate_scancode+0x57>

        default:
          keycode = 0x0;	
  1007ba:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
      };
      break;
  }

  if (keycode == 0) {
  1007be:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  1007c2:	75 1b                	jne    1007df <translate_scancode+0x78>
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1007c4:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1007c8:	8b 55 08             	mov    0x8(%ebp),%edx
  1007cb:	89 54 24 08          	mov    %edx,0x8(%esp)
  1007cf:	89 44 24 04          	mov    %eax,0x4(%esp)
  1007d3:	c7 04 24 28 30 10 00 	movl   $0x103028,(%esp)
  1007da:	e8 f2 0a 00 00       	call   1012d1 <kprintf>
  }

  return keycode;
  1007df:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
  1007e3:	c9                   	leave  
  1007e4:	c3                   	ret    

001007e5 <keyboard_handler>:

void keyboard_handler() {    
  1007e5:	55                   	push   %ebp
  1007e6:	89 e5                	mov    %esp,%ebp
  1007e8:	83 ec 28             	sub    $0x28,%esp
  uint8_t scancode;
  uint8_t keycode = 0;
  1007eb:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
  int break_code = 0;
  1007ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  1007f6:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1007fd:	e8 2a ff ff ff       	call   10072c <inb>
  100802:	88 45 f2             	mov    %al,-0xe(%ebp)

  if (!init_done) {
  100805:	a1 08 40 10 00       	mov    0x104008,%eax
  10080a:	85 c0                	test   %eax,%eax
  10080c:	0f 84 26 01 00 00    	je     100938 <keyboard_handler+0x153>
    return;
  }

  if ((scancode & 0x80) &&
  100812:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100816:	84 c0                	test   %al,%al
  100818:	79 29                	jns    100843 <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
  10081a:	a1 14 40 10 00       	mov    0x104014,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  10081f:	85 c0                	test   %eax,%eax
  100821:	75 06                	jne    100829 <keyboard_handler+0x44>
  100823:	80 7d f2 e1          	cmpb   $0xe1,-0xe(%ebp)
  100827:	74 1a                	je     100843 <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  100829:	a1 18 40 10 00       	mov    0x104018,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  10082e:	85 c0                	test   %eax,%eax
  100830:	75 06                	jne    100838 <keyboard_handler+0x53>
  100832:	80 7d f2 e0          	cmpb   $0xe0,-0xe(%ebp)
  100836:	74 0b                	je     100843 <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  {
      break_code = 1;
  100838:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
      scancode &= ~0x80;
  10083f:	80 65 f2 7f          	andb   $0x7f,-0xe(%ebp)
  }

  if (e0_code) {
  100843:	a1 18 40 10 00       	mov    0x104018,%eax
  100848:	85 c0                	test   %eax,%eax
  10084a:	74 41                	je     10088d <keyboard_handler+0xa8>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  10084c:	80 7d f2 2a          	cmpb   $0x2a,-0xe(%ebp)
  100850:	74 06                	je     100858 <keyboard_handler+0x73>
  100852:	80 7d f2 36          	cmpb   $0x36,-0xe(%ebp)
  100856:	75 0f                	jne    100867 <keyboard_handler+0x82>
          e0_code = 0;
  100858:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  10085f:	00 00 00 
          return;
  100862:	e9 d2 00 00 00       	jmp    100939 <keyboard_handler+0x154>
      }
      keycode = translate_scancode(1, scancode);
  100867:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  10086b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10086f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100876:	e8 ec fe ff ff       	call   100767 <translate_scancode>
  10087b:	88 45 f3             	mov    %al,-0xd(%ebp)
      e0_code = 0;
  10087e:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  100885:	00 00 00 
  100888:	e9 ac 00 00 00       	jmp    100939 <keyboard_handler+0x154>
  } else if (e1_code == 2) {
  10088d:	a1 14 40 10 00       	mov    0x104014,%eax
  100892:	83 f8 02             	cmp    $0x2,%eax
  100895:	75 41                	jne    1008d8 <keyboard_handler+0xf3>
      e1_prev |= ((uint16_t) scancode << 8);
  100897:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  10089b:	c1 e0 08             	shl    $0x8,%eax
  10089e:	89 c2                	mov    %eax,%edx
  1008a0:	0f b7 05 1c 40 10 00 	movzwl 0x10401c,%eax
  1008a7:	09 d0                	or     %edx,%eax
  1008a9:	66 a3 1c 40 10 00    	mov    %ax,0x10401c
      keycode = translate_scancode(2, e1_prev);
  1008af:	0f b7 05 1c 40 10 00 	movzwl 0x10401c,%eax
  1008b6:	0f b7 c0             	movzwl %ax,%eax
  1008b9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1008bd:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1008c4:	e8 9e fe ff ff       	call   100767 <translate_scancode>
  1008c9:	88 45 f3             	mov    %al,-0xd(%ebp)
      e1_code = 0;
  1008cc:	c7 05 14 40 10 00 00 	movl   $0x0,0x104014
  1008d3:	00 00 00 
  1008d6:	eb 61                	jmp    100939 <keyboard_handler+0x154>
  } else if (e1_code == 1) {
  1008d8:	a1 14 40 10 00       	mov    0x104014,%eax
  1008dd:	83 f8 01             	cmp    $0x1,%eax
  1008e0:	75 19                	jne    1008fb <keyboard_handler+0x116>
      e1_prev = scancode;
  1008e2:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  1008e6:	66 a3 1c 40 10 00    	mov    %ax,0x10401c
      e1_code++;
  1008ec:	a1 14 40 10 00       	mov    0x104014,%eax
  1008f1:	83 c0 01             	add    $0x1,%eax
  1008f4:	a3 14 40 10 00       	mov    %eax,0x104014
  1008f9:	eb 3e                	jmp    100939 <keyboard_handler+0x154>
  } else if (scancode == 0xE0) {
  1008fb:	80 7d f2 e0          	cmpb   $0xe0,-0xe(%ebp)
  1008ff:	75 0c                	jne    10090d <keyboard_handler+0x128>
      e0_code = 1;
  100901:	c7 05 18 40 10 00 01 	movl   $0x1,0x104018
  100908:	00 00 00 
  10090b:	eb 2c                	jmp    100939 <keyboard_handler+0x154>
  } else if (scancode == 0xE1) {
  10090d:	80 7d f2 e1          	cmpb   $0xe1,-0xe(%ebp)
  100911:	75 0c                	jne    10091f <keyboard_handler+0x13a>
      e1_code = 1;
  100913:	c7 05 14 40 10 00 01 	movl   $0x1,0x104014
  10091a:	00 00 00 
  10091d:	eb 1a                	jmp    100939 <keyboard_handler+0x154>
  } else {
      keycode = translate_scancode(0, scancode);
  10091f:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100923:	89 44 24 04          	mov    %eax,0x4(%esp)
  100927:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10092e:	e8 34 fe ff ff       	call   100767 <translate_scancode>
  100933:	88 45 f3             	mov    %al,-0xd(%ebp)
  100936:	eb 01                	jmp    100939 <keyboard_handler+0x154>
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);

  if (!init_done) {
    return;
  100938:	90                   	nop

	if(keycode != 0x0) {
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}
  100939:	c9                   	leave  
  10093a:	c3                   	ret    

0010093b <getc>:

char getc() {
  10093b:	55                   	push   %ebp
  10093c:	89 e5                	mov    %esp,%ebp
  10093e:	83 ec 10             	sub    $0x10,%esp
	char ret = buffer[0];
  100941:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100946:	0f b6 00             	movzbl (%eax),%eax
  100949:	88 45 fb             	mov    %al,-0x5(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10094c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100953:	eb 21                	jmp    100976 <getc+0x3b>
		buffer[i] = buffer[i+1];	
  100955:	8b 15 0c 40 10 00    	mov    0x10400c,%edx
  10095b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10095e:	01 c2                	add    %eax,%edx
  100960:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100965:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100968:	83 c1 01             	add    $0x1,%ecx
  10096b:	01 c8                	add    %ecx,%eax
  10096d:	0f b6 00             	movzbl (%eax),%eax
  100970:	88 02                	mov    %al,(%edx)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100972:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100976:	a1 10 40 10 00       	mov    0x104010,%eax
  10097b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
  10097e:	7c d5                	jl     100955 <getc+0x1a>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100980:	a1 10 40 10 00       	mov    0x104010,%eax
  100985:	83 e8 01             	sub    $0x1,%eax
  100988:	a3 10 40 10 00       	mov    %eax,0x104010

	return ret;
  10098d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
  100991:	c9                   	leave  
  100992:	c3                   	ret    

00100993 <send_command>:

void send_command(uint8_t command) {
  100993:	55                   	push   %ebp
  100994:	89 e5                	mov    %esp,%ebp
  100996:	83 ec 0c             	sub    $0xc,%esp
  100999:	8b 45 08             	mov    0x8(%ebp),%eax
  10099c:	88 45 fc             	mov    %al,-0x4(%ebp)
	while((inb(0x64) & 0x2)) { }
  10099f:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1009a6:	e8 81 fd ff ff       	call   10072c <inb>
  1009ab:	0f b6 c0             	movzbl %al,%eax
  1009ae:	83 e0 02             	and    $0x2,%eax
  1009b1:	85 c0                	test   %eax,%eax
  1009b3:	75 ea                	jne    10099f <send_command+0xc>
	outb(0x60, command);
  1009b5:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  1009b9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009bd:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1009c4:	e8 80 fd ff ff       	call   100749 <outb>
}
  1009c9:	c9                   	leave  
  1009ca:	c3                   	ret    

001009cb <init_keyboard_drv>:

void init_keyboard_drv() {
  1009cb:	55                   	push   %ebp
  1009cc:	89 e5                	mov    %esp,%ebp
  1009ce:	83 ec 18             	sub    $0x18,%esp
	register_intr_handler(0x21, &keyboard_handler);
  1009d1:	c7 44 24 04 e5 07 10 	movl   $0x1007e5,0x4(%esp)
  1009d8:	00 
  1009d9:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1009e0:	e8 f7 11 00 00       	call   101bdc <register_intr_handler>

	//buffer = pmm_alloc();

	while(inb(0x64) & 0x1) {
  1009e5:	eb 0c                	jmp    1009f3 <init_keyboard_drv+0x28>
		inb(0x60);
  1009e7:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1009ee:	e8 39 fd ff ff       	call   10072c <inb>
void init_keyboard_drv() {
	register_intr_handler(0x21, &keyboard_handler);

	//buffer = pmm_alloc();

	while(inb(0x64) & 0x1) {
  1009f3:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1009fa:	e8 2d fd ff ff       	call   10072c <inb>
  1009ff:	0f b6 c0             	movzbl %al,%eax
  100a02:	83 e0 01             	and    $0x1,%eax
  100a05:	84 c0                	test   %al,%al
  100a07:	75 de                	jne    1009e7 <init_keyboard_drv+0x1c>
		inb(0x60);
	}

	send_command(0xF4);
  100a09:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100a10:	e8 7e ff ff ff       	call   100993 <send_command>

	init_done = 1;
  100a15:	c7 05 08 40 10 00 01 	movl   $0x1,0x104008
  100a1c:	00 00 00 
}
  100a1f:	c9                   	leave  
  100a20:	c3                   	ret    
  100a21:	00 00                	add    %al,(%eax)
	...

00100a24 <vmm_create_context>:
#include "vmm.h"
#include "pmm.h"
#include "console.h"

struct vmm_context* vmm_create_context(void)
{
  100a24:	55                   	push   %ebp
  100a25:	89 e5                	mov    %esp,%ebp
  100a27:	83 ec 28             	sub    $0x28,%esp
    struct vmm_context* context = pmm_alloc();
  100a2a:	e8 ed 03 00 00       	call   100e1c <pmm_alloc>
  100a2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;

 
    context->pagedir = pmm_alloc();
  100a32:	e8 e5 03 00 00       	call   100e1c <pmm_alloc>
  100a37:	89 c2                	mov    %eax,%edx
  100a39:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a3c:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < 1024; i++) {
  100a3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100a45:	eb 17                	jmp    100a5e <vmm_create_context+0x3a>
        context->pagedir[i] = 0;
  100a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a4a:	8b 00                	mov    (%eax),%eax
  100a4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100a4f:	c1 e2 02             	shl    $0x2,%edx
  100a52:	01 d0                	add    %edx,%eax
  100a54:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    struct vmm_context* context = pmm_alloc();
    int i;

 
    context->pagedir = pmm_alloc();
    for (i = 0; i < 1024; i++) {
  100a5a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100a5e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100a65:	7e e0                	jle    100a47 <vmm_create_context+0x23>
        context->pagedir[i] = 0;
    }

		vmm_map_page(context, (uintptr_t) context, (uintptr_t) context, PTE_PRESENT | PTE_WRITE);
  100a67:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100a6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a6d:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100a74:	00 
  100a75:	89 54 24 08          	mov    %edx,0x8(%esp)
  100a79:	89 44 24 04          	mov    %eax,0x4(%esp)
  100a7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a80:	89 04 24             	mov    %eax,(%esp)
  100a83:	e8 2c 00 00 00       	call   100ab4 <vmm_map_page>
		vmm_map_page(context, (uintptr_t) context->pagedir, (uintptr_t) context->pagedir, PTE_PRESENT | PTE_WRITE);
  100a88:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a8b:	8b 00                	mov    (%eax),%eax
  100a8d:	89 c2                	mov    %eax,%edx
  100a8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a92:	8b 00                	mov    (%eax),%eax
  100a94:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100a9b:	00 
  100a9c:	89 54 24 08          	mov    %edx,0x8(%esp)
  100aa0:	89 44 24 04          	mov    %eax,0x4(%esp)
  100aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100aa7:	89 04 24             	mov    %eax,(%esp)
  100aaa:	e8 05 00 00 00       	call   100ab4 <vmm_map_page>
 
    return context;
  100aaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  100ab2:	c9                   	leave  
  100ab3:	c3                   	ret    

00100ab4 <vmm_map_page>:

int vmm_map_page(struct vmm_context* context, uintptr_t virt, uintptr_t phys, uint32_t flags)
{
  100ab4:	55                   	push   %ebp
  100ab5:	89 e5                	mov    %esp,%ebp
  100ab7:	83 ec 38             	sub    $0x38,%esp
    uint32_t page_index = virt / 0x1000;
  100aba:	8b 45 0c             	mov    0xc(%ebp),%eax
  100abd:	c1 e8 0c             	shr    $0xc,%eax
  100ac0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32_t pd_index = page_index / 1024;
  100ac3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100ac6:	c1 e8 0a             	shr    $0xa,%eax
  100ac9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t pt_index = page_index % 1024;
  100acc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100acf:	25 ff 03 00 00       	and    $0x3ff,%eax
  100ad4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    uint32_t* page_table;
    int i;

    /* Wir brauchen 4k-Alignment */
    if ((virt & 0xFFF) || (phys & 0xFFF)) {
  100ad7:	8b 45 0c             	mov    0xc(%ebp),%eax
  100ada:	25 ff 0f 00 00       	and    $0xfff,%eax
  100adf:	85 c0                	test   %eax,%eax
  100ae1:	75 0c                	jne    100aef <vmm_map_page+0x3b>
  100ae3:	8b 45 10             	mov    0x10(%ebp),%eax
  100ae6:	25 ff 0f 00 00       	and    $0xfff,%eax
  100aeb:	85 c0                	test   %eax,%eax
  100aed:	74 24                	je     100b13 <vmm_map_page+0x5f>
				kprintf("map err %x to %x\n", phys, virt);
  100aef:	8b 45 0c             	mov    0xc(%ebp),%eax
  100af2:	89 44 24 08          	mov    %eax,0x8(%esp)
  100af6:	8b 45 10             	mov    0x10(%ebp),%eax
  100af9:	89 44 24 04          	mov    %eax,0x4(%esp)
  100afd:	c7 04 24 4e 30 10 00 	movl   $0x10304e,(%esp)
  100b04:	e8 c8 07 00 00       	call   1012d1 <kprintf>
        return -1;
  100b09:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100b0e:	e9 ca 00 00 00       	jmp    100bdd <vmm_map_page+0x129>
    }

    /* Page Table heraussuchen bzw. anlegen */
    if (context->pagedir[pd_index] & PTE_PRESENT) {
  100b13:	8b 45 08             	mov    0x8(%ebp),%eax
  100b16:	8b 00                	mov    (%eax),%eax
  100b18:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b1b:	c1 e2 02             	shl    $0x2,%edx
  100b1e:	01 d0                	add    %edx,%eax
  100b20:	8b 00                	mov    (%eax),%eax
  100b22:	83 e0 01             	and    $0x1,%eax
  100b25:	84 c0                	test   %al,%al
  100b27:	74 19                	je     100b42 <vmm_map_page+0x8e>
        /* Page Table ist schon vorhanden */
        page_table = (uint32_t*) (context->pagedir[pd_index] & ~0xFFF);
  100b29:	8b 45 08             	mov    0x8(%ebp),%eax
  100b2c:	8b 00                	mov    (%eax),%eax
  100b2e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b31:	c1 e2 02             	shl    $0x2,%edx
  100b34:	01 d0                	add    %edx,%eax
  100b36:	8b 00                	mov    (%eax),%eax
  100b38:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100b3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100b40:	eb 63                	jmp    100ba5 <vmm_map_page+0xf1>
    } else {
        /* Neue Page Table muss angelegt werden */
        page_table = pmm_alloc();
  100b42:	e8 d5 02 00 00       	call   100e1c <pmm_alloc>
  100b47:	89 45 f0             	mov    %eax,-0x10(%ebp)

				vmm_map_page(context, (uintptr_t) page_table, (uintptr_t) page_table, PTE_PRESENT | PTE_WRITE);
  100b4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100b50:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100b57:	00 
  100b58:	89 54 24 08          	mov    %edx,0x8(%esp)
  100b5c:	89 44 24 04          	mov    %eax,0x4(%esp)
  100b60:	8b 45 08             	mov    0x8(%ebp),%eax
  100b63:	89 04 24             	mov    %eax,(%esp)
  100b66:	e8 49 ff ff ff       	call   100ab4 <vmm_map_page>

        for (i = 0; i < 1024; i++) {
  100b6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100b72:	eb 13                	jmp    100b87 <vmm_map_page+0xd3>
            page_table[i] = 0;
  100b74:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b77:	c1 e0 02             	shl    $0x2,%eax
  100b7a:	03 45 f0             	add    -0x10(%ebp),%eax
  100b7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        /* Neue Page Table muss angelegt werden */
        page_table = pmm_alloc();

				vmm_map_page(context, (uintptr_t) page_table, (uintptr_t) page_table, PTE_PRESENT | PTE_WRITE);

        for (i = 0; i < 1024; i++) {
  100b83:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100b87:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100b8e:	7e e4                	jle    100b74 <vmm_map_page+0xc0>
            page_table[i] = 0;
        }
        context->pagedir[pd_index] =
  100b90:	8b 45 08             	mov    0x8(%ebp),%eax
  100b93:	8b 00                	mov    (%eax),%eax
  100b95:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b98:	c1 e2 02             	shl    $0x2,%edx
  100b9b:	01 d0                	add    %edx,%eax
            (uint32_t) page_table | PTE_PRESENT | PTE_WRITE;
  100b9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100ba0:	83 ca 03             	or     $0x3,%edx
				vmm_map_page(context, (uintptr_t) page_table, (uintptr_t) page_table, PTE_PRESENT | PTE_WRITE);

        for (i = 0; i < 1024; i++) {
            page_table[i] = 0;
        }
        context->pagedir[pd_index] =
  100ba3:	89 10                	mov    %edx,(%eax)
            (uint32_t) page_table | PTE_PRESENT | PTE_WRITE;
    }
 
    /* Neues Mapping in the Page Table eintragen */
    page_table[pt_index] = phys | flags;
  100ba5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ba8:	c1 e0 02             	shl    $0x2,%eax
  100bab:	03 45 f0             	add    -0x10(%ebp),%eax
  100bae:	8b 55 14             	mov    0x14(%ebp),%edx
  100bb1:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100bb4:	09 ca                	or     %ecx,%edx
  100bb6:	89 10                	mov    %edx,(%eax)
    asm volatile("invlpg %0" : : "m" (*(char*)virt));
  100bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
  100bbb:	0f 01 38             	invlpg (%eax)

		kprintf("mapped %x to %x\n", phys, virt);
  100bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
  100bc1:	89 44 24 08          	mov    %eax,0x8(%esp)
  100bc5:	8b 45 10             	mov    0x10(%ebp),%eax
  100bc8:	89 44 24 04          	mov    %eax,0x4(%esp)
  100bcc:	c7 04 24 60 30 10 00 	movl   $0x103060,(%esp)
  100bd3:	e8 f9 06 00 00       	call   1012d1 <kprintf>
 
    return 0;
  100bd8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100bdd:	c9                   	leave  
  100bde:	c3                   	ret    

00100bdf <vmm_activate_context>:
 
void vmm_activate_context(struct vmm_context* context)
{
  100bdf:	55                   	push   %ebp
  100be0:	89 e5                	mov    %esp,%ebp
    asm volatile("mov %0, %%cr3" : : "r" (context->pagedir));
  100be2:	8b 45 08             	mov    0x8(%ebp),%eax
  100be5:	8b 00                	mov    (%eax),%eax
  100be7:	0f 22 d8             	mov    %eax,%cr3
}
  100bea:	5d                   	pop    %ebp
  100beb:	c3                   	ret    

00100bec <vmm_map_kernel>:

void vmm_map_kernel(struct vmm_context* context) {
  100bec:	55                   	push   %ebp
  100bed:	89 e5                	mov    %esp,%ebp
  100bef:	83 ec 28             	sub    $0x28,%esp
	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  100bf2:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  100bf9:	eb 28                	jmp    100c23 <vmm_map_kernel+0x37>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100bfb:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100c02:	00 
  100c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c06:	89 44 24 08          	mov    %eax,0x8(%esp)
  100c0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c0d:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c11:	8b 45 08             	mov    0x8(%ebp),%eax
  100c14:	89 04 24             	mov    %eax,(%esp)
  100c17:	e8 98 fe ff ff       	call   100ab4 <vmm_map_page>
		addr += 0x1000;
  100c1c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
void vmm_map_kernel(struct vmm_context* context) {
	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  100c23:	b8 00 70 12 00       	mov    $0x127000,%eax
  100c28:	39 45 f4             	cmp    %eax,-0xc(%ebp)
  100c2b:	72 ce                	jb     100bfb <vmm_map_kernel+0xf>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}

	addr = 0xB8000;
  100c2d:	c7 45 f4 00 80 0b 00 	movl   $0xb8000,-0xc(%ebp)
	while (addr < 0xC0000) {
  100c34:	eb 28                	jmp    100c5e <vmm_map_kernel+0x72>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100c36:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100c3d:	00 
  100c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c41:	89 44 24 08          	mov    %eax,0x8(%esp)
  100c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c48:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c4c:	8b 45 08             	mov    0x8(%ebp),%eax
  100c4f:	89 04 24             	mov    %eax,(%esp)
  100c52:	e8 5d fe ff ff       	call   100ab4 <vmm_map_page>
		addr += 0x1000;
  100c57:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}

	addr = 0xB8000;
	while (addr < 0xC0000) {
  100c5e:	81 7d f4 ff ff 0b 00 	cmpl   $0xbffff,-0xc(%ebp)
  100c65:	76 cf                	jbe    100c36 <vmm_map_kernel+0x4a>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}
}
  100c67:	c9                   	leave  
  100c68:	c3                   	ret    

00100c69 <vmm_set_alloc_offset>:

void vmm_set_alloc_offset(struct vmm_context* context, uintptr_t offset) {
  100c69:	55                   	push   %ebp
  100c6a:	89 e5                	mov    %esp,%ebp
	context->alloc_offset = offset;
  100c6c:	8b 45 08             	mov    0x8(%ebp),%eax
  100c6f:	8b 55 0c             	mov    0xc(%ebp),%edx
  100c72:	89 50 04             	mov    %edx,0x4(%eax)
}
  100c75:	5d                   	pop    %ebp
  100c76:	c3                   	ret    

00100c77 <vmm_alloc>:

void* vmm_alloc(struct vmm_context* context, uint16_t count) {
  100c77:	55                   	push   %ebp
  100c78:	89 e5                	mov    %esp,%ebp
  100c7a:	83 ec 38             	sub    $0x38,%esp
  100c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c80:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	uintptr_t ptr = context->alloc_offset;
  100c84:	8b 45 08             	mov    0x8(%ebp),%eax
  100c87:	8b 40 04             	mov    0x4(%eax),%eax
  100c8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
	while(count--) {
  100c8d:	eb 3a                	jmp    100cc9 <vmm_alloc+0x52>
		vmm_map_page(context, context->alloc_offset, (uintptr_t) pmm_alloc(), PTE_PRESENT | PTE_WRITE | PTE_USER);
  100c8f:	e8 88 01 00 00       	call   100e1c <pmm_alloc>
  100c94:	89 c2                	mov    %eax,%edx
  100c96:	8b 45 08             	mov    0x8(%ebp),%eax
  100c99:	8b 40 04             	mov    0x4(%eax),%eax
  100c9c:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  100ca3:	00 
  100ca4:	89 54 24 08          	mov    %edx,0x8(%esp)
  100ca8:	89 44 24 04          	mov    %eax,0x4(%esp)
  100cac:	8b 45 08             	mov    0x8(%ebp),%eax
  100caf:	89 04 24             	mov    %eax,(%esp)
  100cb2:	e8 fd fd ff ff       	call   100ab4 <vmm_map_page>
		context->alloc_offset += 0x1000;
  100cb7:	8b 45 08             	mov    0x8(%ebp),%eax
  100cba:	8b 40 04             	mov    0x4(%eax),%eax
  100cbd:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
  100cc3:	8b 45 08             	mov    0x8(%ebp),%eax
  100cc6:	89 50 04             	mov    %edx,0x4(%eax)
}

void* vmm_alloc(struct vmm_context* context, uint16_t count) {
	uintptr_t ptr = context->alloc_offset;
	
	while(count--) {
  100cc9:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%ebp)
  100cce:	0f 95 c0             	setne  %al
  100cd1:	66 83 6d e4 01       	subw   $0x1,-0x1c(%ebp)
  100cd6:	84 c0                	test   %al,%al
  100cd8:	75 b5                	jne    100c8f <vmm_alloc+0x18>
		vmm_map_page(context, context->alloc_offset, (uintptr_t) pmm_alloc(), PTE_PRESENT | PTE_WRITE | PTE_USER);
		context->alloc_offset += 0x1000;
	}

	return (void*)(ptr);
  100cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  100cdd:	c9                   	leave  
  100cde:	c3                   	ret    

00100cdf <vmm_init>:
 * Spaeter laeuft der Kernel immer im Kontext des aktuellen Prozesses.
 */
static struct vmm_context* kernel_context;
 
struct vmm_context* vmm_init(struct multiboot_info* mb_info)
{
  100cdf:	55                   	push   %ebp
  100ce0:	89 e5                	mov    %esp,%ebp
  100ce2:	83 ec 28             	sub    $0x28,%esp
  uint32_t cr0;
  int i;

  kernel_context = vmm_create_context();
  100ce5:	e8 3a fd ff ff       	call   100a24 <vmm_create_context>
  100cea:	a3 20 40 10 00       	mov    %eax,0x104020

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  100cef:	8b 45 08             	mov    0x8(%ebp),%eax
  100cf2:	8b 40 18             	mov    0x18(%eax),%eax
  100cf5:	89 45 f0             	mov    %eax,-0x10(%ebp)

	vmm_map_kernel(kernel_context);
  100cf8:	a1 20 40 10 00       	mov    0x104020,%eax
  100cfd:	89 04 24             	mov    %eax,(%esp)
  100d00:	e8 e7 fe ff ff       	call   100bec <vmm_map_kernel>

  vmm_map_page(kernel_context, (uintptr_t) mb_info, (uintptr_t) mb_info, PTE_PRESENT | PTE_WRITE);
  100d05:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100d08:	8b 55 08             	mov    0x8(%ebp),%edx
  100d0b:	a1 20 40 10 00       	mov    0x104020,%eax
  100d10:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d17:	00 
  100d18:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100d1c:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d20:	89 04 24             	mov    %eax,(%esp)
  100d23:	e8 8c fd ff ff       	call   100ab4 <vmm_map_page>
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);
  100d28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100d2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100d2e:	a1 20 40 10 00       	mov    0x104020,%eax
  100d33:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d3a:	00 
  100d3b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100d3f:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d43:	89 04 24             	mov    %eax,(%esp)
  100d46:	e8 69 fd ff ff       	call   100ab4 <vmm_map_page>

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100d4b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100d52:	eb 4f                	jmp    100da3 <vmm_init+0xc4>
      addr = (uintptr_t)modules[i].start;
  100d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d57:	c1 e0 04             	shl    $0x4,%eax
  100d5a:	03 45 f0             	add    -0x10(%ebp),%eax
  100d5d:	8b 00                	mov    (%eax),%eax
  100d5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  100d62:	eb 2a                	jmp    100d8e <vmm_init+0xaf>
 				  vmm_map_page(kernel_context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100d64:	a1 20 40 10 00       	mov    0x104020,%eax
  100d69:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d70:	00 
  100d71:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100d74:	89 54 24 08          	mov    %edx,0x8(%esp)
  100d78:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100d7b:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d7f:	89 04 24             	mov    %eax,(%esp)
  100d82:	e8 2d fd ff ff       	call   100ab4 <vmm_map_page>
          addr += 0x1000;
  100d87:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  100d8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d91:	c1 e0 04             	shl    $0x4,%eax
  100d94:	03 45 f0             	add    -0x10(%ebp),%eax
  100d97:	8b 40 04             	mov    0x4(%eax),%eax
  100d9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  100d9d:	77 c5                	ja     100d64 <vmm_init+0x85>

  vmm_map_page(kernel_context, (uintptr_t) mb_info, (uintptr_t) mb_info, PTE_PRESENT | PTE_WRITE);
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100d9f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  100da3:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100da6:	8b 45 08             	mov    0x8(%ebp),%eax
  100da9:	8b 40 14             	mov    0x14(%eax),%eax
  100dac:	39 c2                	cmp    %eax,%edx
  100dae:	72 a4                	jb     100d54 <vmm_init+0x75>
 				  vmm_map_page(kernel_context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
          addr += 0x1000;
      }
  }

	vmm_set_alloc_offset(kernel_context, 0x0);
  100db0:	a1 20 40 10 00       	mov    0x104020,%eax
  100db5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100dbc:	00 
  100dbd:	89 04 24             	mov    %eax,(%esp)
  100dc0:	e8 a4 fe ff ff       	call   100c69 <vmm_set_alloc_offset>
 
  vmm_activate_context(kernel_context);
  100dc5:	a1 20 40 10 00       	mov    0x104020,%eax
  100dca:	89 04 24             	mov    %eax,(%esp)
  100dcd:	e8 0d fe ff ff       	call   100bdf <vmm_activate_context>

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  100dd2:	0f 20 c0             	mov    %cr0,%eax
  100dd5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  cr0 |= (1 << 31);
  100dd8:	81 4d e8 00 00 00 80 	orl    $0x80000000,-0x18(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  100ddf:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100de2:	0f 22 c0             	mov    %eax,%cr0

	return kernel_context;
  100de5:	a1 20 40 10 00       	mov    0x104020,%eax
}
  100dea:	c9                   	leave  
  100deb:	c3                   	ret    

00100dec <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100dec:	55                   	push   %ebp
  100ded:	89 e5                	mov    %esp,%ebp
  100def:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  100df2:	8b 45 08             	mov    0x8(%ebp),%eax
  100df5:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100df8:	eb 0e                	jmp    100e08 <memset+0x1c>
        *p++ = c;
  100dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
  100dfd:	89 c2                	mov    %eax,%edx
  100dff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e02:	88 10                	mov    %dl,(%eax)
  100e04:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100e08:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100e0c:	0f 95 c0             	setne  %al
  100e0f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  100e13:	84 c0                	test   %al,%al
  100e15:	75 e3                	jne    100dfa <memset+0xe>
        *p++ = c;
    }

    return buf;
  100e17:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100e1a:	c9                   	leave  
  100e1b:	c3                   	ret    

00100e1c <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  100e1c:	55                   	push   %ebp
  100e1d:	89 e5                	mov    %esp,%ebp
  100e1f:	57                   	push   %edi
  100e20:	56                   	push   %esi
  100e21:	53                   	push   %ebx
  100e22:	83 ec 2c             	sub    $0x2c,%esp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100e25:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  100e2c:	e9 af 00 00 00       	jmp    100ee0 <pmm_alloc+0xc4>
		if(allocatable[i]) {
  100e31:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100e34:	8b 04 85 80 64 10 00 	mov    0x106480(,%eax,4),%eax
  100e3b:	85 c0                	test   %eax,%eax
  100e3d:	0f 84 99 00 00 00    	je     100edc <pmm_alloc+0xc0>
			int s;
			for(s = 0; s < 32; s++) {
  100e43:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100e4a:	e9 83 00 00 00       	jmp    100ed2 <pmm_alloc+0xb6>
				if(allocatable[i] & (1 << s)) {
  100e4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100e52:	8b 14 85 80 64 10 00 	mov    0x106480(,%eax,4),%edx
  100e59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100e5c:	bb 01 00 00 00       	mov    $0x1,%ebx
  100e61:	89 de                	mov    %ebx,%esi
  100e63:	89 c1                	mov    %eax,%ecx
  100e65:	d3 e6                	shl    %cl,%esi
  100e67:	89 f0                	mov    %esi,%eax
  100e69:	21 d0                	and    %edx,%eax
  100e6b:	85 c0                	test   %eax,%eax
  100e6d:	74 5f                	je     100ece <pmm_alloc+0xb2>
					allocatable[i] &= ~(1 << s);
  100e6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100e72:	8b 55 e0             	mov    -0x20(%ebp),%edx
  100e75:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100e7c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100e7f:	be 01 00 00 00       	mov    $0x1,%esi
  100e84:	89 f7                	mov    %esi,%edi
  100e86:	89 d1                	mov    %edx,%ecx
  100e88:	d3 e7                	shl    %cl,%edi
  100e8a:	89 fa                	mov    %edi,%edx
  100e8c:	f7 d2                	not    %edx
  100e8e:	21 da                	and    %ebx,%edx
  100e90:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
					kprintf("Allocated: %x (%x) \n", ((i * 32 + s) * 4096), (i * 32 + s));
  100e97:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100e9a:	c1 e0 05             	shl    $0x5,%eax
  100e9d:	03 45 e4             	add    -0x1c(%ebp),%eax
  100ea0:	8b 55 e0             	mov    -0x20(%ebp),%edx
  100ea3:	c1 e2 05             	shl    $0x5,%edx
  100ea6:	03 55 e4             	add    -0x1c(%ebp),%edx
  100ea9:	c1 e2 0c             	shl    $0xc,%edx
  100eac:	89 44 24 08          	mov    %eax,0x8(%esp)
  100eb0:	89 54 24 04          	mov    %edx,0x4(%esp)
  100eb4:	c7 04 24 71 30 10 00 	movl   $0x103071,(%esp)
  100ebb:	e8 11 04 00 00       	call   1012d1 <kprintf>
					return (uint8_t*)((i * 32 + s) * 4096);
  100ec0:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ec3:	c1 e0 05             	shl    $0x5,%eax
  100ec6:	03 45 e4             	add    -0x1c(%ebp),%eax
  100ec9:	c1 e0 0c             	shl    $0xc,%eax
  100ecc:	eb 24                	jmp    100ef2 <pmm_alloc+0xd6>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100ece:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  100ed2:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
  100ed6:	0f 8e 73 ff ff ff    	jle    100e4f <pmm_alloc+0x33>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100edc:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
  100ee0:	81 7d e0 ff 7f 00 00 	cmpl   $0x7fff,-0x20(%ebp)
  100ee7:	0f 8e 44 ff ff ff    	jle    100e31 <pmm_alloc+0x15>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  100eed:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100ef2:	83 c4 2c             	add    $0x2c,%esp
  100ef5:	5b                   	pop    %ebx
  100ef6:	5e                   	pop    %esi
  100ef7:	5f                   	pop    %edi
  100ef8:	5d                   	pop    %ebp
  100ef9:	c3                   	ret    

00100efa <pmm_free>:

void pmm_free(void* addr) {
  100efa:	55                   	push   %ebp
  100efb:	89 e5                	mov    %esp,%ebp
  100efd:	57                   	push   %edi
  100efe:	56                   	push   %esi
  100eff:	53                   	push   %ebx
  100f00:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100f03:	8b 45 08             	mov    0x8(%ebp),%eax
  100f06:	c1 e8 0c             	shr    $0xc,%eax
  100f09:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uintptr_t s = ptr % 32;
  100f0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f0f:	83 e0 1f             	and    $0x1f,%eax
  100f12:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t i = ptr / 32;
  100f15:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f18:	c1 e8 05             	shr    $0x5,%eax
  100f1b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] |= (1 << s);
  100f1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f21:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100f24:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100f2b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100f2e:	be 01 00 00 00       	mov    $0x1,%esi
  100f33:	89 f7                	mov    %esi,%edi
  100f35:	89 d1                	mov    %edx,%ecx
  100f37:	d3 e7                	shl    %cl,%edi
  100f39:	89 fa                	mov    %edi,%edx
  100f3b:	09 da                	or     %ebx,%edx
  100f3d:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
}
  100f44:	83 c4 10             	add    $0x10,%esp
  100f47:	5b                   	pop    %ebx
  100f48:	5e                   	pop    %esi
  100f49:	5f                   	pop    %edi
  100f4a:	5d                   	pop    %ebp
  100f4b:	c3                   	ret    

00100f4c <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100f4c:	55                   	push   %ebp
  100f4d:	89 e5                	mov    %esp,%ebp
  100f4f:	57                   	push   %edi
  100f50:	56                   	push   %esi
  100f51:	53                   	push   %ebx
  100f52:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100f55:	8b 45 08             	mov    0x8(%ebp),%eax
  100f58:	c1 e8 0c             	shr    $0xc,%eax
  100f5b:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uintptr_t s = ptr % 32;
  100f5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f61:	83 e0 1f             	and    $0x1f,%eax
  100f64:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t i = ptr / 32;
  100f67:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f6a:	c1 e8 05             	shr    $0x5,%eax
  100f6d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] &= ~(1 << s);
  100f70:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f73:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100f76:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100f7d:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100f80:	be 01 00 00 00       	mov    $0x1,%esi
  100f85:	89 f7                	mov    %esi,%edi
  100f87:	89 d1                	mov    %edx,%ecx
  100f89:	d3 e7                	shl    %cl,%edi
  100f8b:	89 fa                	mov    %edi,%edx
  100f8d:	f7 d2                	not    %edx
  100f8f:	21 da                	and    %ebx,%edx
  100f91:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
}
  100f98:	83 c4 10             	add    $0x10,%esp
  100f9b:	5b                   	pop    %ebx
  100f9c:	5e                   	pop    %esi
  100f9d:	5f                   	pop    %edi
  100f9e:	5d                   	pop    %ebp
  100f9f:	c3                   	ret    

00100fa0 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100fa0:	55                   	push   %ebp
  100fa1:	89 e5                	mov    %esp,%ebp
  100fa3:	83 ec 38             	sub    $0x38,%esp
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  100fa6:	8b 45 08             	mov    0x8(%ebp),%eax
  100fa9:	8b 40 30             	mov    0x30(%eax),%eax
  100fac:	89 45 dc             	mov    %eax,-0x24(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);
  100faf:	8b 45 08             	mov    0x8(%ebp),%eax
  100fb2:	8b 40 30             	mov    0x30(%eax),%eax
  100fb5:	89 c2                	mov    %eax,%edx
  100fb7:	8b 45 08             	mov    0x8(%ebp),%eax
  100fba:	8b 40 2c             	mov    0x2c(%eax),%eax
  100fbd:	8d 04 02             	lea    (%edx,%eax,1),%eax
  100fc0:	89 45 e0             	mov    %eax,-0x20(%ebp)

	memset(allocatable, 0, sizeof(allocatable));
  100fc3:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  100fca:	00 
  100fcb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100fd2:	00 
  100fd3:	c7 04 24 80 64 10 00 	movl   $0x106480,(%esp)
  100fda:	e8 0d fe ff ff       	call   100dec <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  100fdf:	b8 80 64 12 00       	mov    $0x126480,%eax
  100fe4:	89 44 24 08          	mov    %eax,0x8(%esp)
  100fe8:	c7 44 24 04 80 64 10 	movl   $0x106480,0x4(%esp)
  100fef:	00 
  100ff0:	c7 04 24 86 30 10 00 	movl   $0x103086,(%esp)
  100ff7:	e8 d5 02 00 00       	call   1012d1 <kprintf>
	 
	while (mmap < mmap_end) {
  100ffc:	eb 46                	jmp    101044 <pmm_init+0xa4>
		  if (mmap->mm_type == 1) {
  100ffe:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101001:	8b 40 14             	mov    0x14(%eax),%eax
  101004:	83 f8 01             	cmp    $0x1,%eax
  101007:	75 37                	jne    101040 <pmm_init+0xa0>
		      uintptr_t addr = mmap->mm_base_addr;
  101009:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10100c:	8b 50 08             	mov    0x8(%eax),%edx
  10100f:	8b 40 04             	mov    0x4(%eax),%eax
  101012:	89 45 f0             	mov    %eax,-0x10(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  101015:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101018:	8b 50 10             	mov    0x10(%eax),%edx
  10101b:	8b 40 0c             	mov    0xc(%eax),%eax
  10101e:	03 45 f0             	add    -0x10(%ebp),%eax
  101021:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 
		      while (addr < end_addr) {
  101024:	eb 12                	jmp    101038 <pmm_init+0x98>
		          pmm_free((void*) addr);
  101026:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101029:	89 04 24             	mov    %eax,(%esp)
  10102c:	e8 c9 fe ff ff       	call   100efa <pmm_free>
		          addr += 0x1000;
  101031:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	while (mmap < mmap_end) {
		  if (mmap->mm_type == 1) {
		      uintptr_t addr = mmap->mm_base_addr;
		      uintptr_t end_addr = addr + mmap->mm_length;
	 
		      while (addr < end_addr) {
  101038:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10103b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10103e:	72 e6                	jb     101026 <pmm_init+0x86>
		          pmm_free((void*) addr);
		          addr += 0x1000;
		      }
		  }
		  mmap++;
  101040:	83 45 dc 18          	addl   $0x18,-0x24(%ebp)

	memset(allocatable, 0, sizeof(allocatable));

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
	 
	while (mmap < mmap_end) {
  101044:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101047:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  10104a:	72 b2                	jb     100ffe <pmm_init+0x5e>
	}

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10104c:	c7 45 e4 00 00 10 00 	movl   $0x100000,-0x1c(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  101053:	eb 12                	jmp    101067 <pmm_init+0xc7>
		  pmm_mark_used((void*) addr);
  101055:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101058:	89 04 24             	mov    %eax,(%esp)
  10105b:	e8 ec fe ff ff       	call   100f4c <pmm_mark_used>
		  addr += 0x1000;
  101060:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  101067:	b8 00 70 12 00       	mov    $0x127000,%eax
  10106c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  10106f:	72 e4                	jb     101055 <pmm_init+0xb5>
		  pmm_mark_used((void*) addr);
		  addr += 0x1000;
	}

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  101071:	8b 45 08             	mov    0x8(%ebp),%eax
  101074:	8b 40 18             	mov    0x18(%eax),%eax
  101077:	89 45 e8             	mov    %eax,-0x18(%ebp)

  pmm_mark_used(mb_info);
  10107a:	8b 45 08             	mov    0x8(%ebp),%eax
  10107d:	89 04 24             	mov    %eax,(%esp)
  101080:	e8 c7 fe ff ff       	call   100f4c <pmm_mark_used>
  pmm_mark_used(modules);
  101085:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101088:	89 04 24             	mov    %eax,(%esp)
  10108b:	e8 bc fe ff ff       	call   100f4c <pmm_mark_used>

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  101090:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101097:	eb 37                	jmp    1010d0 <pmm_init+0x130>
      addr = (uintptr_t)modules[i].start;
  101099:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10109c:	c1 e0 04             	shl    $0x4,%eax
  10109f:	03 45 e8             	add    -0x18(%ebp),%eax
  1010a2:	8b 00                	mov    (%eax),%eax
  1010a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  1010a7:	eb 12                	jmp    1010bb <pmm_init+0x11b>
          pmm_mark_used((void*) addr);
  1010a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1010ac:	89 04 24             	mov    %eax,(%esp)
  1010af:	e8 98 fe ff ff       	call   100f4c <pmm_mark_used>
          addr += 0x1000;
  1010b4:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  1010bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1010be:	c1 e0 04             	shl    $0x4,%eax
  1010c1:	03 45 e8             	add    -0x18(%ebp),%eax
  1010c4:	8b 40 04             	mov    0x4(%eax),%eax
  1010c7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  1010ca:	77 dd                	ja     1010a9 <pmm_init+0x109>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1010cc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  1010d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1010d3:	8b 45 08             	mov    0x8(%ebp),%eax
  1010d6:	8b 40 14             	mov    0x14(%eax),%eax
  1010d9:	39 c2                	cmp    %eax,%edx
  1010db:	72 bc                	jb     101099 <pmm_init+0xf9>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  1010dd:	c9                   	leave  
  1010de:	c3                   	ret    
	...

001010e0 <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  1010e0:	55                   	push   %ebp
  1010e1:	89 e5                	mov    %esp,%ebp
  1010e3:	83 ec 14             	sub    $0x14,%esp
  1010e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1010e9:	88 45 ec             	mov    %al,-0x14(%ebp)
    if ((c == '\n') || (x > 79)) {
  1010ec:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  1010f0:	74 0a                	je     1010fc <kputc+0x1c>
  1010f2:	a1 24 40 10 00       	mov    0x104024,%eax
  1010f7:	83 f8 4f             	cmp    $0x4f,%eax
  1010fa:	7e 17                	jle    101113 <kputc+0x33>
        x = 0;
  1010fc:	c7 05 24 40 10 00 00 	movl   $0x0,0x104024
  101103:	00 00 00 
        y++;
  101106:	a1 28 40 10 00       	mov    0x104028,%eax
  10110b:	83 c0 01             	add    $0x1,%eax
  10110e:	a3 28 40 10 00       	mov    %eax,0x104028
    }

    if (c == '\n') {
  101113:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  101117:	0f 84 dd 00 00 00    	je     1011fa <kputc+0x11a>
        return;
    }

    if (y > 24) {
  10111d:	a1 28 40 10 00       	mov    0x104028,%eax
  101122:	83 f8 18             	cmp    $0x18,%eax
  101125:	7e 61                	jle    101188 <kputc+0xa8>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  101127:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10112e:	eb 24                	jmp    101154 <kputc+0x74>
            video[i] = video[i + 160];
  101130:	8b 15 00 21 10 00    	mov    0x102100,%edx
  101136:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101139:	01 c2                	add    %eax,%edx
  10113b:	a1 00 21 10 00       	mov    0x102100,%eax
  101140:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101143:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  101149:	01 c8                	add    %ecx,%eax
  10114b:	0f b6 00             	movzbl (%eax),%eax
  10114e:	88 02                	mov    %al,(%edx)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  101150:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  101154:	81 7d fc ff 0e 00 00 	cmpl   $0xeff,-0x4(%ebp)
  10115b:	7e d3                	jle    101130 <kputc+0x50>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10115d:	eb 13                	jmp    101172 <kputc+0x92>
            video[i] = 0;
  10115f:	8b 15 00 21 10 00    	mov    0x102100,%edx
  101165:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101168:	8d 04 02             	lea    (%edx,%eax,1),%eax
  10116b:	c6 00 00             	movb   $0x0,(%eax)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10116e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  101172:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  101179:	7e e4                	jle    10115f <kputc+0x7f>
            video[i] = 0;
        }
        y--;
  10117b:	a1 28 40 10 00       	mov    0x104028,%eax
  101180:	83 e8 01             	sub    $0x1,%eax
  101183:	a3 28 40 10 00       	mov    %eax,0x104028
    }

    video[2 * (y * 80 + x)] = c;
  101188:	8b 0d 00 21 10 00    	mov    0x102100,%ecx
  10118e:	8b 15 28 40 10 00    	mov    0x104028,%edx
  101194:	89 d0                	mov    %edx,%eax
  101196:	c1 e0 02             	shl    $0x2,%eax
  101199:	01 d0                	add    %edx,%eax
  10119b:	c1 e0 04             	shl    $0x4,%eax
  10119e:	89 c2                	mov    %eax,%edx
  1011a0:	a1 24 40 10 00       	mov    0x104024,%eax
  1011a5:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1011a8:	01 c0                	add    %eax,%eax
  1011aa:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  1011ad:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  1011b1:	88 02                	mov    %al,(%edx)
    video[2 * (y * 80 + x) + 1] = 0x07;
  1011b3:	8b 0d 00 21 10 00    	mov    0x102100,%ecx
  1011b9:	8b 15 28 40 10 00    	mov    0x104028,%edx
  1011bf:	89 d0                	mov    %edx,%eax
  1011c1:	c1 e0 02             	shl    $0x2,%eax
  1011c4:	01 d0                	add    %edx,%eax
  1011c6:	c1 e0 04             	shl    $0x4,%eax
  1011c9:	89 c2                	mov    %eax,%edx
  1011cb:	a1 24 40 10 00       	mov    0x104024,%eax
  1011d0:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1011d3:	01 c0                	add    %eax,%eax
  1011d5:	83 c0 01             	add    $0x1,%eax
  1011d8:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  1011db:	c6 00 07             	movb   $0x7,(%eax)

    x++;
  1011de:	a1 24 40 10 00       	mov    0x104024,%eax
  1011e3:	83 c0 01             	add    $0x1,%eax
  1011e6:	a3 24 40 10 00       	mov    %eax,0x104024
    kprintf_res++;
  1011eb:	a1 2c 40 10 00       	mov    0x10402c,%eax
  1011f0:	83 c0 01             	add    $0x1,%eax
  1011f3:	a3 2c 40 10 00       	mov    %eax,0x10402c
  1011f8:	eb 01                	jmp    1011fb <kputc+0x11b>
        x = 0;
        y++;
    }

    if (c == '\n') {
        return;
  1011fa:	90                   	nop
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = 0x07;

    x++;
    kprintf_res++;
}
  1011fb:	c9                   	leave  
  1011fc:	c3                   	ret    

001011fd <kputs>:

static void kputs(const char* s)
{
  1011fd:	55                   	push   %ebp
  1011fe:	89 e5                	mov    %esp,%ebp
  101200:	83 ec 04             	sub    $0x4,%esp
    while (*s) {
  101203:	eb 15                	jmp    10121a <kputs+0x1d>
        kputc(*s++);
  101205:	8b 45 08             	mov    0x8(%ebp),%eax
  101208:	0f b6 00             	movzbl (%eax),%eax
  10120b:	0f be c0             	movsbl %al,%eax
  10120e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  101212:	89 04 24             	mov    %eax,(%esp)
  101215:	e8 c6 fe ff ff       	call   1010e0 <kputc>
    kprintf_res++;
}

static void kputs(const char* s)
{
    while (*s) {
  10121a:	8b 45 08             	mov    0x8(%ebp),%eax
  10121d:	0f b6 00             	movzbl (%eax),%eax
  101220:	84 c0                	test   %al,%al
  101222:	75 e1                	jne    101205 <kputs+0x8>
        kputc(*s++);
    }
}
  101224:	c9                   	leave  
  101225:	c3                   	ret    

00101226 <kputn>:

static void kputn(unsigned long x, int base)
{
  101226:	55                   	push   %ebp
  101227:	89 e5                	mov    %esp,%ebp
  101229:	83 ec 58             	sub    $0x58,%esp
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  10122c:	c7 45 f8 9c 30 10 00 	movl   $0x10309c,-0x8(%ebp)
    char* p;

    if (base > 36) {
  101233:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
  101237:	7f 54                	jg     10128d <kputn+0x67>
        return;
    }

    p = buf + 64;
  101239:	8d 45 b7             	lea    -0x49(%ebp),%eax
  10123c:	83 c0 40             	add    $0x40,%eax
  10123f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *p = '\0';
  101242:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101245:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  101248:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  10124c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10124f:	8b 45 08             	mov    0x8(%ebp),%eax
  101252:	ba 00 00 00 00       	mov    $0x0,%edx
  101257:	f7 f1                	div    %ecx
  101259:	89 d0                	mov    %edx,%eax
  10125b:	03 45 f8             	add    -0x8(%ebp),%eax
  10125e:	0f b6 10             	movzbl (%eax),%edx
  101261:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101264:	88 10                	mov    %dl,(%eax)
        x /= base;
  101266:	8b 45 0c             	mov    0xc(%ebp),%eax
  101269:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10126c:	8b 45 08             	mov    0x8(%ebp),%eax
  10126f:	ba 00 00 00 00       	mov    $0x0,%edx
  101274:	f7 75 ac             	divl   -0x54(%ebp)
  101277:	89 45 08             	mov    %eax,0x8(%ebp)
    } while (x);
  10127a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10127e:	75 c8                	jne    101248 <kputn+0x22>
    kputs(p);
  101280:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101283:	89 04 24             	mov    %eax,(%esp)
  101286:	e8 72 ff ff ff       	call   1011fd <kputs>
  10128b:	eb 01                	jmp    10128e <kputn+0x68>
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
        return;
  10128d:	90                   	nop
    do {
        *--p = digits[x % base];
        x /= base;
    } while (x);
    kputs(p);
}
  10128e:	c9                   	leave  
  10128f:	c3                   	ret    

00101290 <clrscr>:

void clrscr(void)
{
  101290:	55                   	push   %ebp
  101291:	89 e5                	mov    %esp,%ebp
  101293:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  101296:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10129d:	eb 13                	jmp    1012b2 <clrscr+0x22>
        video[i] = 0;
  10129f:	8b 15 00 21 10 00    	mov    0x102100,%edx
  1012a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1012a8:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1012ab:	c6 00 00             	movb   $0x0,(%eax)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1012ae:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1012b2:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  1012b9:	7e e4                	jle    10129f <clrscr+0xf>
        video[i] = 0;
    }

    x = y = 0;
  1012bb:	c7 05 28 40 10 00 00 	movl   $0x0,0x104028
  1012c2:	00 00 00 
  1012c5:	a1 28 40 10 00       	mov    0x104028,%eax
  1012ca:	a3 24 40 10 00       	mov    %eax,0x104024
}
  1012cf:	c9                   	leave  
  1012d0:	c3                   	ret    

001012d1 <kprintf>:

int kprintf(const char* fmt, ...)
{
  1012d1:	55                   	push   %ebp
  1012d2:	89 e5                	mov    %esp,%ebp
  1012d4:	83 ec 18             	sub    $0x18,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  1012d7:	8d 45 0c             	lea    0xc(%ebp),%eax
  1012da:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf_res = 0;
  1012dd:	c7 05 2c 40 10 00 00 	movl   $0x0,0x10402c
  1012e4:	00 00 00 
  while (*fmt) {
  1012e7:	e9 2d 01 00 00       	jmp    101419 <kprintf+0x148>
    if (*fmt == '%') {
  1012ec:	8b 45 08             	mov    0x8(%ebp),%eax
  1012ef:	0f b6 00             	movzbl (%eax),%eax
  1012f2:	3c 25                	cmp    $0x25,%al
  1012f4:	0f 85 0a 01 00 00    	jne    101404 <kprintf+0x133>
      fmt++;
  1012fa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
  1012fe:	8b 45 08             	mov    0x8(%ebp),%eax
  101301:	0f b6 00             	movzbl (%eax),%eax
  101304:	0f be c0             	movsbl %al,%eax
  101307:	83 f8 70             	cmp    $0x70,%eax
  10130a:	0f 84 87 00 00 00    	je     101397 <kprintf+0xc6>
  101310:	83 f8 70             	cmp    $0x70,%eax
  101313:	7f 2e                	jg     101343 <kprintf+0x72>
  101315:	83 f8 63             	cmp    $0x63,%eax
  101318:	0f 84 9c 00 00 00    	je     1013ba <kprintf+0xe9>
  10131e:	83 f8 63             	cmp    $0x63,%eax
  101321:	7f 16                	jg     101339 <kprintf+0x68>
  101323:	85 c0                	test   %eax,%eax
  101325:	0f 84 fe 00 00 00    	je     101429 <kprintf+0x158>
  10132b:	83 f8 25             	cmp    $0x25,%eax
  10132e:	0f 84 a2 00 00 00    	je     1013d6 <kprintf+0x105>
  101334:	e9 ac 00 00 00       	jmp    1013e5 <kprintf+0x114>
  101339:	83 f8 64             	cmp    $0x64,%eax
  10133c:	74 36                	je     101374 <kprintf+0xa3>
  10133e:	e9 a2 00 00 00       	jmp    1013e5 <kprintf+0x114>
  101343:	83 f8 75             	cmp    $0x75,%eax
  101346:	74 2c                	je     101374 <kprintf+0xa3>
  101348:	83 f8 78             	cmp    $0x78,%eax
  10134b:	74 4a                	je     101397 <kprintf+0xc6>
  10134d:	83 f8 73             	cmp    $0x73,%eax
  101350:	0f 85 8f 00 00 00    	jne    1013e5 <kprintf+0x114>
        case 's':
          s = va_arg(ap, char*);
  101356:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101359:	8d 50 04             	lea    0x4(%eax),%edx
  10135c:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10135f:	8b 00                	mov    (%eax),%eax
  101361:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  101364:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101367:	89 04 24             	mov    %eax,(%esp)
  10136a:	e8 8e fe ff ff       	call   1011fd <kputs>
          break;
  10136f:	e9 a1 00 00 00       	jmp    101415 <kprintf+0x144>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  101374:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101377:	8d 50 04             	lea    0x4(%eax),%edx
  10137a:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10137d:	8b 00                	mov    (%eax),%eax
  10137f:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 10);
  101382:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  101389:	00 
  10138a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10138d:	89 04 24             	mov    %eax,(%esp)
  101390:	e8 91 fe ff ff       	call   101226 <kputn>
          break;
  101395:	eb 7e                	jmp    101415 <kprintf+0x144>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  101397:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10139a:	8d 50 04             	lea    0x4(%eax),%edx
  10139d:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1013a0:	8b 00                	mov    (%eax),%eax
  1013a2:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 16);
  1013a5:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1013ac:	00 
  1013ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1013b0:	89 04 24             	mov    %eax,(%esp)
  1013b3:	e8 6e fe ff ff       	call   101226 <kputn>
          break;
  1013b8:	eb 5b                	jmp    101415 <kprintf+0x144>
				case 'c':
					c = va_arg(ap, int);
  1013ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1013bd:	8d 50 04             	lea    0x4(%eax),%edx
  1013c0:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1013c3:	8b 00                	mov    (%eax),%eax
  1013c5:	88 45 ff             	mov    %al,-0x1(%ebp)
					kputc(c);
  1013c8:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1013cc:	89 04 24             	mov    %eax,(%esp)
  1013cf:	e8 0c fd ff ff       	call   1010e0 <kputc>
					break;
  1013d4:	eb 3f                	jmp    101415 <kprintf+0x144>
        case '%':
          kputc('%');
  1013d6:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1013dd:	e8 fe fc ff ff       	call   1010e0 <kputc>
          break;
  1013e2:	90                   	nop
  1013e3:	eb 30                	jmp    101415 <kprintf+0x144>
        case '\0':
          goto out;
        default:
          kputc('%');
  1013e5:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1013ec:	e8 ef fc ff ff       	call   1010e0 <kputc>
          kputc(*fmt);
  1013f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1013f4:	0f b6 00             	movzbl (%eax),%eax
  1013f7:	0f be c0             	movsbl %al,%eax
  1013fa:	89 04 24             	mov    %eax,(%esp)
  1013fd:	e8 de fc ff ff       	call   1010e0 <kputc>
  101402:	eb 11                	jmp    101415 <kprintf+0x144>
          break;
      }
    } else {
      kputc(*fmt);
  101404:	8b 45 08             	mov    0x8(%ebp),%eax
  101407:	0f b6 00             	movzbl (%eax),%eax
  10140a:	0f be c0             	movsbl %al,%eax
  10140d:	89 04 24             	mov    %eax,(%esp)
  101410:	e8 cb fc ff ff       	call   1010e0 <kputc>
    }

    fmt++;
  101415:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;

  va_start(ap, fmt);
  kprintf_res = 0;
  while (*fmt) {
  101419:	8b 45 08             	mov    0x8(%ebp),%eax
  10141c:	0f b6 00             	movzbl (%eax),%eax
  10141f:	84 c0                	test   %al,%al
  101421:	0f 85 c5 fe ff ff    	jne    1012ec <kprintf+0x1b>
  101427:	eb 01                	jmp    10142a <kprintf+0x159>
					break;
        case '%':
          kputc('%');
          break;
        case '\0':
          goto out;
  101429:	90                   	nop
  }

out:
  va_end(ap);

  return kprintf_res;
  10142a:	a1 2c 40 10 00       	mov    0x10402c,%eax
}
  10142f:	c9                   	leave  
  101430:	c3                   	ret    
  101431:	00 00                	add    %al,(%eax)
	...

00101434 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  101434:	55                   	push   %ebp
  101435:	89 e5                	mov    %esp,%ebp
  101437:	83 ec 08             	sub    $0x8,%esp
  10143a:	8b 55 08             	mov    0x8(%ebp),%edx
  10143d:	8b 45 0c             	mov    0xc(%ebp),%eax
  101440:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  101444:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101447:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  10144b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  10144f:	ee                   	out    %al,(%dx)
}
  101450:	c9                   	leave  
  101451:	c3                   	ret    

00101452 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101452:	55                   	push   %ebp
  101453:	89 e5                	mov    %esp,%ebp
  101455:	57                   	push   %edi
  101456:	56                   	push   %esi
  101457:	53                   	push   %ebx
  101458:	83 ec 34             	sub    $0x34,%esp
  10145b:	8b 55 10             	mov    0x10(%ebp),%edx
  10145e:	8b 45 14             	mov    0x14(%ebp),%eax
  101461:	66 89 55 dc          	mov    %dx,-0x24(%ebp)
  101465:	88 45 d8             	mov    %al,-0x28(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101468:	8b 45 0c             	mov    0xc(%ebp),%eax
  10146b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	idt[i] = handler & 0xffffLL;
  10146e:	8b 75 08             	mov    0x8(%ebp),%esi
  101471:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101474:	ba 00 00 00 00       	mov    $0x0,%edx
  101479:	0f b7 c8             	movzwl %ax,%ecx
  10147c:	89 d3                	mov    %edx,%ebx
  10147e:	83 e3 00             	and    $0x0,%ebx
  101481:	89 0c f5 40 40 10 00 	mov    %ecx,0x104040(,%esi,8)
  101488:	89 1c f5 44 40 10 00 	mov    %ebx,0x104044(,%esi,8)
	idt[i] |= (selector & 0xffffLL) << 16;
  10148f:	8b 75 08             	mov    0x8(%ebp),%esi
  101492:	8b 45 08             	mov    0x8(%ebp),%eax
  101495:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  10149c:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  1014a3:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
  1014a7:	ba 00 00 00 00       	mov    $0x0,%edx
  1014ac:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  1014b0:	c1 e0 10             	shl    $0x10,%eax
  1014b3:	89 cf                	mov    %ecx,%edi
  1014b5:	09 c7                	or     %eax,%edi
  1014b7:	89 7d c0             	mov    %edi,-0x40(%ebp)
  1014ba:	89 df                	mov    %ebx,%edi
  1014bc:	09 d7                	or     %edx,%edi
  1014be:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  1014c1:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1014c4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1014c7:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  1014ce:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  1014d5:	8b 75 08             	mov    0x8(%ebp),%esi
  1014d8:	8b 45 08             	mov    0x8(%ebp),%eax
  1014db:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  1014e2:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  1014e9:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
  1014ed:	ba 00 00 00 00       	mov    $0x0,%edx
  1014f2:	89 c2                	mov    %eax,%edx
  1014f4:	b8 00 00 00 00       	mov    $0x0,%eax
  1014f9:	c1 e2 08             	shl    $0x8,%edx
  1014fc:	89 cf                	mov    %ecx,%edi
  1014fe:	09 c7                	or     %eax,%edi
  101500:	89 7d c8             	mov    %edi,-0x38(%ebp)
  101503:	89 df                	mov    %ebx,%edi
  101505:	09 d7                	or     %edx,%edi
  101507:	89 7d cc             	mov    %edi,-0x34(%ebp)
  10150a:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10150d:	8b 55 cc             	mov    -0x34(%ebp),%edx
  101510:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  101517:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  10151e:	8b 75 08             	mov    0x8(%ebp),%esi
  101521:	8b 45 08             	mov    0x8(%ebp),%eax
  101524:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  10152b:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  101532:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101535:	c1 e8 10             	shr    $0x10,%eax
  101538:	ba 00 00 00 00       	mov    $0x0,%edx
  10153d:	89 c2                	mov    %eax,%edx
  10153f:	b8 00 00 00 00       	mov    $0x0,%eax
  101544:	c1 e2 10             	shl    $0x10,%edx
  101547:	89 cf                	mov    %ecx,%edi
  101549:	09 c7                	or     %eax,%edi
  10154b:	89 7d d0             	mov    %edi,-0x30(%ebp)
  10154e:	89 df                	mov    %ebx,%edi
  101550:	09 d7                	or     %edx,%edi
  101552:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  101555:	8b 45 d0             	mov    -0x30(%ebp),%eax
  101558:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  10155b:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  101562:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
}
  101569:	83 c4 34             	add    $0x34,%esp
  10156c:	5b                   	pop    %ebx
  10156d:	5e                   	pop    %esi
  10156e:	5f                   	pop    %edi
  10156f:	5d                   	pop    %ebp
  101570:	c3                   	ret    

00101571 <init_idt>:

void init_idt() {
  101571:	55                   	push   %ebp
  101572:	89 e5                	mov    %esp,%ebp
  101574:	83 ec 28             	sub    $0x28,%esp
		  unsigned short int limit;
		  void* pointer;
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};
  101577:	66 c7 45 ee ff 01    	movw   $0x1ff,-0x12(%ebp)
  10157d:	c7 45 f0 40 40 10 00 	movl   $0x104040,-0x10(%ebp)

	int i = 0;
  101584:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  10158b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101592:	eb 12                	jmp    1015a6 <init_idt+0x35>
		handler_set[i] = 0;
  101594:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101597:	c7 04 85 40 43 10 00 	movl   $0x0,0x104340(,%eax,4)
  10159e:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  1015a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1015a6:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
  1015aa:	7e e8                	jle    101594 <init_idt+0x23>
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  1015ac:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1015b3:	00 
  1015b4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1015bb:	e8 74 fe ff ff       	call   101434 <outb>
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  1015c0:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1015c7:	00 
  1015c8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1015cf:	e8 60 fe ff ff       	call   101434 <outb>
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  1015d4:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1015db:	00 
  1015dc:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1015e3:	e8 4c fe ff ff       	call   101434 <outb>
  outb(0x21, 0x01); // ICW 4
  1015e8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1015ef:	00 
  1015f0:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1015f7:	e8 38 fe ff ff       	call   101434 <outb>

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  1015fc:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  101603:	00 
  101604:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10160b:	e8 24 fe ff ff       	call   101434 <outb>
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101610:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101617:	00 
  101618:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10161f:	e8 10 fe ff ff       	call   101434 <outb>
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101624:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  10162b:	00 
  10162c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101633:	e8 fc fd ff ff       	call   101434 <outb>
  outb(0xa1, 0x01); // ICW 4
  101638:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10163f:	00 
  101640:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101647:	e8 e8 fd ff ff       	call   101434 <outb>

  outb(0x20, 0x0);
  10164c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101653:	00 
  101654:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10165b:	e8 d4 fd ff ff       	call   101434 <outb>
  outb(0xa0, 0x0);
  101660:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101667:	00 
  101668:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10166f:	e8 c0 fd ff ff       	call   101434 <outb>

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101674:	b8 f8 02 10 00       	mov    $0x1002f8,%eax
  101679:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101680:	00 
  101681:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101688:	00 
  101689:	89 44 24 04          	mov    %eax,0x4(%esp)
  10168d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101694:	e8 b9 fd ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101699:	b8 01 03 10 00       	mov    $0x100301,%eax
  10169e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016a5:	00 
  1016a6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016ad:	00 
  1016ae:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016b2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1016b9:	e8 94 fd ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016be:	b8 0a 03 10 00       	mov    $0x10030a,%eax
  1016c3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016ca:	00 
  1016cb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016d2:	00 
  1016d3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016d7:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1016de:	e8 6f fd ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016e3:	b8 13 03 10 00       	mov    $0x100313,%eax
  1016e8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016ef:	00 
  1016f0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016f7:	00 
  1016f8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016fc:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  101703:	e8 4a fd ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101708:	b8 1c 03 10 00       	mov    $0x10031c,%eax
  10170d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101714:	00 
  101715:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10171c:	00 
  10171d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101721:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101728:	e8 25 fd ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10172d:	b8 25 03 10 00       	mov    $0x100325,%eax
  101732:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101739:	00 
  10173a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101741:	00 
  101742:	89 44 24 04          	mov    %eax,0x4(%esp)
  101746:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  10174d:	e8 00 fd ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101752:	b8 2e 03 10 00       	mov    $0x10032e,%eax
  101757:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10175e:	00 
  10175f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101766:	00 
  101767:	89 44 24 04          	mov    %eax,0x4(%esp)
  10176b:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  101772:	e8 db fc ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101777:	b8 37 03 10 00       	mov    $0x100337,%eax
  10177c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101783:	00 
  101784:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10178b:	00 
  10178c:	89 44 24 04          	mov    %eax,0x4(%esp)
  101790:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101797:	e8 b6 fc ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10179c:	b8 40 03 10 00       	mov    $0x100340,%eax
  1017a1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017a8:	00 
  1017a9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017b0:	00 
  1017b1:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017b5:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1017bc:	e8 91 fc ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017c1:	b8 47 03 10 00       	mov    $0x100347,%eax
  1017c6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017cd:	00 
  1017ce:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017d5:	00 
  1017d6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017da:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  1017e1:	e8 6c fc ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017e6:	b8 50 03 10 00       	mov    $0x100350,%eax
  1017eb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017f2:	00 
  1017f3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017fa:	00 
  1017fb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017ff:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  101806:	e8 47 fc ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10180b:	b8 57 03 10 00       	mov    $0x100357,%eax
  101810:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101817:	00 
  101818:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10181f:	00 
  101820:	89 44 24 04          	mov    %eax,0x4(%esp)
  101824:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  10182b:	e8 22 fc ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101830:	b8 5e 03 10 00       	mov    $0x10035e,%eax
  101835:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10183c:	00 
  10183d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101844:	00 
  101845:	89 44 24 04          	mov    %eax,0x4(%esp)
  101849:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  101850:	e8 fd fb ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101855:	b8 65 03 10 00       	mov    $0x100365,%eax
  10185a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101861:	00 
  101862:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101869:	00 
  10186a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10186e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101875:	e8 d8 fb ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10187a:	b8 6c 03 10 00       	mov    $0x10036c,%eax
  10187f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101886:	00 
  101887:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10188e:	00 
  10188f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101893:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  10189a:	e8 b3 fb ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10189f:	b8 70 03 10 00       	mov    $0x100370,%eax
  1018a4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018ab:	00 
  1018ac:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018b3:	00 
  1018b4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018b8:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  1018bf:	e8 8e fb ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018c4:	b8 76 03 10 00       	mov    $0x100376,%eax
  1018c9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018d0:	00 
  1018d1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018d8:	00 
  1018d9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018dd:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1018e4:	e8 69 fb ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018e9:	b8 7c 03 10 00       	mov    $0x10037c,%eax
  1018ee:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018f5:	00 
  1018f6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018fd:	00 
  1018fe:	89 44 24 04          	mov    %eax,0x4(%esp)
  101902:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101909:	e8 44 fb ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10190e:	b8 80 03 10 00       	mov    $0x100380,%eax
  101913:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10191a:	00 
  10191b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101922:	00 
  101923:	89 44 24 04          	mov    %eax,0x4(%esp)
  101927:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  10192e:	e8 1f fb ff ff       	call   101452 <idt_set_entry>

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101933:	b8 86 03 10 00       	mov    $0x100386,%eax
  101938:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10193f:	00 
  101940:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101947:	00 
  101948:	89 44 24 04          	mov    %eax,0x4(%esp)
  10194c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101953:	e8 fa fa ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101958:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  10195d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101964:	00 
  101965:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10196c:	00 
  10196d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101971:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101978:	e8 d5 fa ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(34, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10197d:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101982:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101989:	00 
  10198a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101991:	00 
  101992:	89 44 24 04          	mov    %eax,0x4(%esp)
  101996:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  10199d:	e8 b0 fa ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(35, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019a2:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019a7:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019ae:	00 
  1019af:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019b6:	00 
  1019b7:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019bb:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  1019c2:	e8 8b fa ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(36, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019c7:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019cc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019d3:	00 
  1019d4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019db:	00 
  1019dc:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019e0:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  1019e7:	e8 66 fa ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(37, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019ec:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019f1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019f8:	00 
  1019f9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a00:	00 
  101a01:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a05:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101a0c:	e8 41 fa ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(38, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a11:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a16:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a1d:	00 
  101a1e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a25:	00 
  101a26:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a2a:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101a31:	e8 1c fa ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(39, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a36:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a3b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a42:	00 
  101a43:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a4a:	00 
  101a4b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a4f:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101a56:	e8 f7 f9 ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(40, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a5b:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a60:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a67:	00 
  101a68:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a6f:	00 
  101a70:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a74:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101a7b:	e8 d2 f9 ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(41, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a80:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a85:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a8c:	00 
  101a8d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a94:	00 
  101a95:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a99:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101aa0:	e8 ad f9 ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(42, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101aa5:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101aaa:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ab1:	00 
  101ab2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ab9:	00 
  101aba:	89 44 24 04          	mov    %eax,0x4(%esp)
  101abe:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101ac5:	e8 88 f9 ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(43, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101aca:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101acf:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ad6:	00 
  101ad7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ade:	00 
  101adf:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ae3:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101aea:	e8 63 f9 ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(44, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101aef:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101af4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101afb:	00 
  101afc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b03:	00 
  101b04:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b08:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101b0f:	e8 3e f9 ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(45, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b14:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b19:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b20:	00 
  101b21:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b28:	00 
  101b29:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b2d:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101b34:	e8 19 f9 ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(46, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b39:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b3e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b45:	00 
  101b46:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b4d:	00 
  101b4e:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b52:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101b59:	e8 f4 f8 ff ff       	call   101452 <idt_set_entry>
  idt_set_entry(47, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b5e:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b63:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b6a:	00 
  101b6b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b72:	00 
  101b73:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b77:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101b7e:	e8 cf f8 ff ff       	call   101452 <idt_set_entry>

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101b83:	b8 e6 03 10 00       	mov    $0x1003e6,%eax
  101b88:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101b8f:	00 
  101b90:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b97:	00 
  101b98:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b9c:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101ba3:	e8 aa f8 ff ff       	call   101452 <idt_set_entry>

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101ba8:	b8 20 21 10 00       	mov    $0x102120,%eax
  101bad:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101bb4:	00 
  101bb5:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101bbc:	00 
  101bbd:	89 44 24 04          	mov    %eax,0x4(%esp)
  101bc1:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101bc8:	e8 6d e4 ff ff       	call   10003a <set_gdt_entry>

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101bcd:	b8 28 00 00 00       	mov    $0x28,%eax
  101bd2:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101bd5:	0f 01 5d ee          	lidtl  -0x12(%ebp)
	asm volatile("sti");
  101bd9:	fb                   	sti    
}
  101bda:	c9                   	leave  
  101bdb:	c3                   	ret    

00101bdc <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  101bdc:	55                   	push   %ebp
  101bdd:	89 e5                	mov    %esp,%ebp
	handlers[i] = fn;
  101bdf:	8b 45 08             	mov    0x8(%ebp),%eax
  101be2:	8b 55 0c             	mov    0xc(%ebp),%edx
  101be5:	89 14 85 40 42 10 00 	mov    %edx,0x104240(,%eax,4)
	handler_set[i] = 1;
  101bec:	8b 45 08             	mov    0x8(%ebp),%eax
  101bef:	c7 04 85 40 43 10 00 	movl   $0x1,0x104340(,%eax,4)
  101bf6:	01 00 00 00 
}
  101bfa:	5d                   	pop    %ebp
  101bfb:	c3                   	ret    

00101bfc <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  101bfc:	55                   	push   %ebp
  101bfd:	89 e5                	mov    %esp,%ebp
  101bff:	53                   	push   %ebx
  101c00:	83 ec 34             	sub    $0x34,%esp
  struct cpu_state* new_cpu = cpu;
  101c03:	8b 45 08             	mov    0x8(%ebp),%eax
  101c06:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (cpu->intr <= 0x1f) {
  101c09:	8b 45 08             	mov    0x8(%ebp),%eax
  101c0c:	8b 40 1c             	mov    0x1c(%eax),%eax
  101c0f:	83 f8 1f             	cmp    $0x1f,%eax
  101c12:	0f 87 df 00 00 00    	ja     101cf7 <handle_interrupt+0xfb>
    kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  101c18:	8b 45 08             	mov    0x8(%ebp),%eax
  101c1b:	8b 50 20             	mov    0x20(%eax),%edx
  101c1e:	8b 45 08             	mov    0x8(%ebp),%eax
  101c21:	8b 40 1c             	mov    0x1c(%eax),%eax
  101c24:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c28:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c2c:	c7 04 24 c4 30 10 00 	movl   $0x1030c4,(%esp)
  101c33:	e8 99 f6 ff ff       	call   1012d1 <kprintf>

		kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  101c38:	8b 45 08             	mov    0x8(%ebp),%eax
  101c3b:	8b 58 0c             	mov    0xc(%eax),%ebx
  101c3e:	8b 45 08             	mov    0x8(%ebp),%eax
  101c41:	8b 48 08             	mov    0x8(%eax),%ecx
  101c44:	8b 45 08             	mov    0x8(%ebp),%eax
  101c47:	8b 50 04             	mov    0x4(%eax),%edx
  101c4a:	8b 45 08             	mov    0x8(%ebp),%eax
  101c4d:	8b 00                	mov    (%eax),%eax
  101c4f:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101c53:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101c57:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c5b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c5f:	c7 04 24 e8 30 10 00 	movl   $0x1030e8,(%esp)
  101c66:	e8 66 f6 ff ff       	call   1012d1 <kprintf>
		kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  101c6b:	8b 45 08             	mov    0x8(%ebp),%eax
  101c6e:	8b 58 24             	mov    0x24(%eax),%ebx
  101c71:	8b 45 08             	mov    0x8(%ebp),%eax
  101c74:	8b 48 18             	mov    0x18(%eax),%ecx
  101c77:	8b 45 08             	mov    0x8(%ebp),%eax
  101c7a:	8b 50 14             	mov    0x14(%eax),%edx
  101c7d:	8b 45 08             	mov    0x8(%ebp),%eax
  101c80:	8b 40 10             	mov    0x10(%eax),%eax
  101c83:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101c87:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101c8b:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c8f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c93:	c7 04 24 0c 31 10 00 	movl   $0x10310c,(%esp)
  101c9a:	e8 32 f6 ff ff       	call   1012d1 <kprintf>
		kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  101c9f:	8b 45 08             	mov    0x8(%ebp),%eax
  101ca2:	8b 58 34             	mov    0x34(%eax),%ebx
  101ca5:	8b 45 08             	mov    0x8(%ebp),%eax
  101ca8:	8b 48 30             	mov    0x30(%eax),%ecx
  101cab:	8b 45 08             	mov    0x8(%ebp),%eax
  101cae:	8b 50 2c             	mov    0x2c(%eax),%edx
  101cb1:	8b 45 08             	mov    0x8(%ebp),%eax
  101cb4:	8b 40 28             	mov    0x28(%eax),%eax
  101cb7:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101cbb:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101cbf:	89 54 24 08          	mov    %edx,0x8(%esp)
  101cc3:	89 44 24 04          	mov    %eax,0x4(%esp)
  101cc7:	c7 04 24 30 31 10 00 	movl   $0x103130,(%esp)
  101cce:	e8 fe f5 ff ff       	call   1012d1 <kprintf>

		uint32_t cr2 = 0;
  101cd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		asm volatile("mov %%cr2, %0" : "=r" (cr2));
  101cda:	0f 20 d0             	mov    %cr2,%eax
  101cdd:	89 45 f4             	mov    %eax,-0xc(%ebp)

		kprintf("CR2: %x", cr2);
  101ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ce3:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ce7:	c7 04 24 52 31 10 00 	movl   $0x103152,(%esp)
  101cee:	e8 de f5 ff ff       	call   1012d1 <kprintf>
	
    while(1) {
      asm volatile("cli; hlt");
  101cf3:	fa                   	cli    
  101cf4:	f4                   	hlt    
    }
  101cf5:	eb fc                	jmp    101cf3 <handle_interrupt+0xf7>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101cf7:	8b 45 08             	mov    0x8(%ebp),%eax
  101cfa:	8b 40 1c             	mov    0x1c(%eax),%eax
  101cfd:	83 f8 1f             	cmp    $0x1f,%eax
  101d00:	0f 86 84 00 00 00    	jbe    101d8a <handle_interrupt+0x18e>
  101d06:	8b 45 08             	mov    0x8(%ebp),%eax
  101d09:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d0c:	83 f8 2f             	cmp    $0x2f,%eax
  101d0f:	77 79                	ja     101d8a <handle_interrupt+0x18e>
    if (cpu->intr >= 0x28) {
  101d11:	8b 45 08             	mov    0x8(%ebp),%eax
  101d14:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d17:	83 f8 27             	cmp    $0x27,%eax
  101d1a:	76 14                	jbe    101d30 <handle_interrupt+0x134>
      outb(0xa0, 0x20);
  101d1c:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101d23:	00 
  101d24:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101d2b:	e8 04 f7 ff ff       	call   101434 <outb>
    }
    if (cpu->intr == 0x20) {
  101d30:	8b 45 08             	mov    0x8(%ebp),%eax
  101d33:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d36:	83 f8 20             	cmp    $0x20,%eax
  101d39:	75 19                	jne    101d54 <handle_interrupt+0x158>
        new_cpu = schedule(cpu);
  101d3b:	8b 45 08             	mov    0x8(%ebp),%eax
  101d3e:	89 04 24             	mov    %eax,(%esp)
  101d41:	e8 8c e9 ff ff       	call   1006d2 <schedule>
  101d46:	89 45 f0             	mov    %eax,-0x10(%ebp)
        tss[1] = (uint32_t) (new_cpu + 1);
  101d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d4c:	83 c0 38             	add    $0x38,%eax
  101d4f:	a3 24 21 10 00       	mov    %eax,0x102124
    }
    outb(0x20, 0x20);
  101d54:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101d5b:	00 
  101d5c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101d63:	e8 cc f6 ff ff       	call   101434 <outb>
		if(handler_set[cpu->intr]) {
  101d68:	8b 45 08             	mov    0x8(%ebp),%eax
  101d6b:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d6e:	8b 04 85 40 43 10 00 	mov    0x104340(,%eax,4),%eax
  101d75:	85 c0                	test   %eax,%eax
  101d77:	74 3c                	je     101db5 <handle_interrupt+0x1b9>
			handlers[cpu->intr]();
  101d79:	8b 45 08             	mov    0x8(%ebp),%eax
  101d7c:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d7f:	8b 04 85 40 42 10 00 	mov    0x104240(,%eax,4),%eax
  101d86:	ff d0                	call   *%eax
		kprintf("CR2: %x", cr2);
	
    while(1) {
      asm volatile("cli; hlt");
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101d88:	eb 2c                	jmp    101db6 <handle_interrupt+0x1ba>
    }
    outb(0x20, 0x20);
		if(handler_set[cpu->intr]) {
			handlers[cpu->intr]();
		}
  } else if (cpu->intr == 0x30) {
  101d8a:	8b 45 08             	mov    0x8(%ebp),%eax
  101d8d:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d90:	83 f8 30             	cmp    $0x30,%eax
  101d93:	75 10                	jne    101da5 <handle_interrupt+0x1a9>
		new_cpu = syscall(new_cpu);
  101d95:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d98:	89 04 24             	mov    %eax,(%esp)
  101d9b:	e8 e3 e6 ff ff       	call   100483 <syscall>
  101da0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101da3:	eb 11                	jmp    101db6 <handle_interrupt+0x1ba>
  } else {
    kprintf("Unbekannter Interrupt\n");
  101da5:	c7 04 24 5a 31 10 00 	movl   $0x10315a,(%esp)
  101dac:	e8 20 f5 ff ff       	call   1012d1 <kprintf>
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  101db1:	fa                   	cli    
  101db2:	f4                   	hlt    
    }
  101db3:	eb fc                	jmp    101db1 <handle_interrupt+0x1b5>
		kprintf("CR2: %x", cr2);
	
    while(1) {
      asm volatile("cli; hlt");
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101db5:	90                   	nop
      // Prozessor anhalten
      asm volatile("cli; hlt");
    }
  }  

  return new_cpu;
  101db6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  101db9:	83 c4 34             	add    $0x34,%esp
  101dbc:	5b                   	pop    %ebx
  101dbd:	5d                   	pop    %ebp
  101dbe:	c3                   	ret    
	...

00101dc0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  101dc0:	55                   	push   %ebp
  101dc1:	89 e5                	mov    %esp,%ebp
  101dc3:	83 ec 08             	sub    $0x8,%esp
	init_keyboard_drv();
  101dc6:	e8 00 ec ff ff       	call   1009cb <init_keyboard_drv>
}
  101dcb:	c9                   	leave  
  101dcc:	c3                   	ret    

00101dcd <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  101dcd:	55                   	push   %ebp
  101dce:	89 e5                	mov    %esp,%ebp
  101dd0:	83 ec 18             	sub    $0x18,%esp
	clrscr();
  101dd3:	e8 b8 f4 ff ff       	call   101290 <clrscr>
  pmm_init(mb_info);
  101dd8:	8b 45 08             	mov    0x8(%ebp),%eax
  101ddb:	89 04 24             	mov    %eax,(%esp)
  101dde:	e8 bd f1 ff ff       	call   100fa0 <pmm_init>

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  101de3:	c7 44 24 04 74 31 10 	movl   $0x103174,0x4(%esp)
  101dea:	00 
  101deb:	c7 04 24 80 31 10 00 	movl   $0x103180,(%esp)
  101df2:	e8 da f4 ff ff       	call   1012d1 <kprintf>
	kprintf("(C) Copyright 2012 Fabian Sachara.  All Rights Reserved.\n");
  101df7:	c7 04 24 a4 31 10 00 	movl   $0x1031a4,(%esp)
  101dfe:	e8 ce f4 ff ff       	call   1012d1 <kprintf>

	kprintf("Initializing GDT...\n");
  101e03:	c7 04 24 de 31 10 00 	movl   $0x1031de,(%esp)
  101e0a:	e8 c2 f4 ff ff       	call   1012d1 <kprintf>
	
	init_gdt();
  101e0f:	e8 21 e4 ff ff       	call   100235 <init_gdt>

	kprintf("Initializing IDT...\n");
  101e14:	c7 04 24 f3 31 10 00 	movl   $0x1031f3,(%esp)
  101e1b:	e8 b1 f4 ff ff       	call   1012d1 <kprintf>

	init_idt();
  101e20:	e8 4c f7 ff ff       	call   101571 <init_idt>

	kprintf("init_drivers()\n");
  101e25:	c7 04 24 08 32 10 00 	movl   $0x103208,(%esp)
  101e2c:	e8 a0 f4 ff ff       	call   1012d1 <kprintf>

	init_drivers();
  101e31:	e8 8a ff ff ff       	call   101dc0 <init_drivers>
	
	kprintf("switching to kernel_main()\n");
  101e36:	c7 04 24 18 32 10 00 	movl   $0x103218,(%esp)
  101e3d:	e8 8f f4 ff ff       	call   1012d1 <kprintf>

	kernel_main(mb_info);
  101e42:	8b 45 08             	mov    0x8(%ebp),%eax
  101e45:	89 04 24             	mov    %eax,(%esp)
  101e48:	e8 29 e7 ff ff       	call   100576 <kernel_main>

  return;
}
  101e4d:	c9                   	leave  
  101e4e:	c3                   	ret    
	...

00101e50 <_start>:
  101e50:	bc 40 64 10 00       	mov    $0x106440,%esp
  101e55:	53                   	push   %ebx
  101e56:	e8 72 ff ff ff       	call   101dcd <init>

00101e5b <_stop>:
  101e5b:	fa                   	cli    
  101e5c:	f4                   	hlt    
  101e5d:	eb fc                	jmp    101e5b <_stop>
