
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 bc                	in     $0xbc,%al

0010000c <_start>:
  10000c:	bc 00 80 10 00       	mov    $0x108000,%esp
  100011:	53                   	push   %ebx
  100012:	e8 09 00 00 00       	call   100020 <init>

00100017 <_stop>:
  100017:	fa                   	cli    
  100018:	f4                   	hlt    
  100019:	eb fc                	jmp    100017 <_stop>
  10001b:	66 90                	xchg   %ax,%ax
  10001d:	66 90                	xchg   %ax,%ax
  10001f:	90                   	nop

00100020 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  100020:	55                   	push   %ebp
  100021:	89 e5                	mov    %esp,%ebp
  100023:	83 ec 28             	sub    $0x28,%esp
  100026:	8b 45 08             	mov    0x8(%ebp),%eax
  100029:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10002c:	e8 1f 23 00 00       	call   102350 <clrscr>
  pmm_init(mb_info);
  100031:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100034:	89 04 24             	mov    %eax,(%esp)
  100037:	e8 f4 04 00 00       	call   100530 <pmm_init>
  10003c:	8d 05 32 50 10 00    	lea    0x105032,%eax
  100042:	8d 0d 55 50 10 00    	lea    0x105055,%ecx
  
	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100048:	89 04 24             	mov    %eax,(%esp)
  10004b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10004f:	e8 7c 23 00 00       	call   1023d0 <kprintf>
  100054:	8d 0d 69 50 10 00    	lea    0x105069,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10005a:	89 0c 24             	mov    %ecx,(%esp)
  10005d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100060:	e8 6b 23 00 00       	call   1023d0 <kprintf>
  100065:	8d 0d a8 50 10 00    	lea    0x1050a8,%ecx

	kprintf("Initializing GDT...\n");
  10006b:	89 0c 24             	mov    %ecx,(%esp)
  10006e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100071:	e8 5a 23 00 00       	call   1023d0 <kprintf>
	
	init_gdt();
  100076:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100079:	e8 c2 2e 00 00       	call   102f40 <init_gdt>
  10007e:	8d 05 bd 50 10 00    	lea    0x1050bd,%eax

	kprintf("Initializing IDT...\n");
  100084:	89 04 24             	mov    %eax,(%esp)
  100087:	e8 44 23 00 00       	call   1023d0 <kprintf>
  10008c:	8d 0d d2 50 10 00    	lea    0x1050d2,%ecx

	init_idt();
  100092:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100095:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100098:	e8 73 13 00 00       	call   101410 <init_idt>

	kprintf("Initializing Drivers...\n");
  10009d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1000a0:	89 04 24             	mov    %eax,(%esp)
  1000a3:	e8 28 23 00 00       	call   1023d0 <kprintf>

	init_drivers();
  1000a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1000ab:	e8 30 00 00 00       	call   1000e0 <init_drivers>
  1000b0:	8d 05 eb 50 10 00    	lea    0x1050eb,%eax
	
	kprintf("Initializing Kernel...\n");
  1000b6:	89 04 24             	mov    %eax,(%esp)
  1000b9:	e8 12 23 00 00       	call   1023d0 <kprintf>

	kernel_main(mb_info);
  1000be:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1000c1:	89 0c 24             	mov    %ecx,(%esp)
  1000c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000c7:	e8 54 29 00 00       	call   102a20 <kernel_main>

  return;
  1000cc:	83 c4 28             	add    $0x28,%esp
  1000cf:	5d                   	pop    %ebp
  1000d0:	c3                   	ret    
  1000d1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1000d8:	0f 1f 84 00 00 00 00 
  1000df:	00 

001000e0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
	init_keyboard_drv();
  1000e3:	83 ec 08             	sub    $0x8,%esp
  1000e6:	e8 05 02 00 00       	call   1002f0 <init_keyboard_drv>
}
  1000eb:	83 c4 08             	add    $0x8,%esp
  1000ee:	5d                   	pop    %ebp
  1000ef:	c3                   	ret    

001000f0 <translate_scancode>:

static uint8_t buffer[4096];
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000f0:	55                   	push   %ebp
  1000f1:	89 e5                	mov    %esp,%ebp
  1000f3:	83 ec 28             	sub    $0x28,%esp
  1000f6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000fa:	66 89 c1             	mov    %ax,%cx
  1000fd:	8b 45 08             	mov    0x8(%ebp),%eax
  100100:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100103:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  100107:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  10010b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10010e:	89 c2                	mov    %eax,%edx
  100110:	83 ea 02             	sub    $0x2,%edx
  100113:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100116:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100119:	0f 84 4f 00 00 00    	je     10016e <translate_scancode+0x7e>
  10011f:	e9 00 00 00 00       	jmp    100124 <translate_scancode+0x34>
  100124:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100127:	83 e8 01             	sub    $0x1,%eax
  10012a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10012d:	0f 84 28 00 00 00    	je     10015b <translate_scancode+0x6b>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x48>
  100138:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10013b:	85 c0                	test   %eax,%eax
  10013d:	0f 85 54 00 00 00    	jne    100197 <translate_scancode+0xa7>
  100143:	e9 00 00 00 00       	jmp    100148 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100148:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014c:	8a 0c 05 00 40 10 00 	mov    0x104000(,%eax,1),%cl
  100153:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100156:	e9 3c 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10015b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10015f:	8a 0c 05 80 40 10 00 	mov    0x104080(,%eax,1),%cl
  100166:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100169:	e9 29 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10016e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100172:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100177:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10017a:	0f 85 0e 00 00 00    	jne    10018e <translate_scancode+0x9e>
  100180:	e9 00 00 00 00       	jmp    100185 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100185:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100189:	e9 04 00 00 00       	jmp    100192 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10018e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100192:	e9 00 00 00 00       	jmp    100197 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100197:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10019b:	3d 00 00 00 00       	cmp    $0x0,%eax
  1001a0:	0f 85 20 00 00 00    	jne    1001c6 <translate_scancode+0xd6>
  1001a6:	8d 05 03 51 10 00    	lea    0x105103,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1001ac:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001b3:	89 04 24             	mov    %eax,(%esp)
  1001b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001ba:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001be:	e8 0d 22 00 00       	call   1023d0 <kprintf>
  1001c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001c6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ca:	83 c4 28             	add    $0x28,%esp
  1001cd:	5d                   	pop    %ebp
  1001ce:	c3                   	ret    
  1001cf:	90                   	nop

001001d0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
  return;
  1001d3:	5d                   	pop    %ebp
  1001d4:	c3                   	ret    
  1001d5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1001dc:	00 00 00 00 

001001e0 <getc>:
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}

char getc() {
  1001e0:	55                   	push   %ebp
  1001e1:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  1001e3:	83 ec 08             	sub    $0x8,%esp
  1001e6:	a0 0a a0 10 00       	mov    0x10a00a,%al
  1001eb:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1001ee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001f8:	3b 05 0c b0 10 00    	cmp    0x10b00c,%eax
  1001fe:	0f 8d 24 00 00 00    	jge    100228 <getc+0x48>
		buffer[i] = buffer[i+1];	
  100204:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100207:	8a 0c 05 0b a0 10 00 	mov    0x10a00b(,%eax,1),%cl
  10020e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100211:	88 0c 05 0a a0 10 00 	mov    %cl,0x10a00a(,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100218:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10021b:	05 01 00 00 00       	add    $0x1,%eax
  100220:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100223:	e9 cd ff ff ff       	jmp    1001f5 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100228:	a1 0c b0 10 00       	mov    0x10b00c,%eax
  10022d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100232:	a3 0c b0 10 00       	mov    %eax,0x10b00c

	return ret;
  100237:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10023b:	83 c4 08             	add    $0x8,%esp
  10023e:	5d                   	pop    %ebp
  10023f:	c3                   	ret    

00100240 <send_command>:
}

void send_command(uint8_t command) {
  100240:	55                   	push   %ebp
  100241:	89 e5                	mov    %esp,%ebp
  100243:	83 ec 18             	sub    $0x18,%esp
  100246:	8a 45 08             	mov    0x8(%ebp),%al
  100249:	88 45 ff             	mov    %al,-0x1(%ebp)
  10024c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100251:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100258:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10025b:	e8 40 00 00 00       	call   1002a0 <inb>
  100260:	0f b6 c8             	movzbl %al,%ecx
  100263:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100269:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10026f:	0f 84 05 00 00 00    	je     10027a <send_command+0x3a>
  100275:	e9 d2 ff ff ff       	jmp    10024c <send_command+0xc>
  10027a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10027f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100286:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10028a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10028e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100291:	e8 2a 00 00 00       	call   1002c0 <outb>
}
  100296:	83 c4 18             	add    $0x18,%esp
  100299:	5d                   	pop    %ebp
  10029a:	c3                   	ret    
  10029b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001002a0 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  1002a0:	55                   	push   %ebp
  1002a1:	89 e5                	mov    %esp,%ebp
  1002a3:	50                   	push   %eax
  1002a4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002a8:	66 89 c1             	mov    %ax,%cx
  1002ab:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  1002af:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002b3:	ec                   	in     (%dx),%al
  1002b4:	88 45 fd             	mov    %al,-0x3(%ebp)
	return result;
  1002b7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  1002bb:	83 c4 04             	add    $0x4,%esp
  1002be:	5d                   	pop    %ebp
  1002bf:	c3                   	ret    

001002c0 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  1002c0:	55                   	push   %ebp
  1002c1:	89 e5                	mov    %esp,%ebp
  1002c3:	50                   	push   %eax
  1002c4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002c8:	66 89 c1             	mov    %ax,%cx
  1002cb:	8a 55 0c             	mov    0xc(%ebp),%dl
  1002ce:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  1002d2:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1002d5:	8a 45 fd             	mov    -0x3(%ebp),%al
  1002d8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002dc:	ee                   	out    %al,(%dx)
}
  1002dd:	83 c4 04             	add    $0x4,%esp
  1002e0:	5d                   	pop    %ebp
  1002e1:	c3                   	ret    
  1002e2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1002e9:	1f 84 00 00 00 00 00 

001002f0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1002f0:	55                   	push   %ebp
  1002f1:	89 e5                	mov    %esp,%ebp
  1002f3:	83 ec 28             	sub    $0x28,%esp
  1002f6:	b8 21 00 00 00       	mov    $0x21,%eax
  1002fb:	8d 0d d0 01 10 00    	lea    0x1001d0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  100301:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100308:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10030c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10030f:	e8 2c 1d 00 00       	call   102040 <register_intr_handler>
  100314:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100319:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100320:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100323:	e8 78 ff ff ff       	call   1002a0 <inb>
  100328:	0f b6 c8             	movzbl %al,%ecx
  10032b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100331:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100337:	0f 84 1c 00 00 00    	je     100359 <init_keyboard_drv+0x69>
  10033d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100342:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100349:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10034c:	e8 4f ff ff ff       	call   1002a0 <inb>
	}
  100351:	88 45 f3             	mov    %al,-0xd(%ebp)
  100354:	e9 bb ff ff ff       	jmp    100314 <init_keyboard_drv+0x24>
  100359:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10035e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100365:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100368:	e8 d3 fe ff ff       	call   100240 <send_command>

	init_done = 1;
  10036d:	c7 05 10 b0 10 00 01 	movl   $0x1,0x10b010
  100374:	00 00 00 
}
  100377:	83 c4 28             	add    $0x28,%esp
  10037a:	5d                   	pop    %ebp
  10037b:	c3                   	ret    
  10037c:	66 90                	xchg   %ax,%ax
  10037e:	66 90                	xchg   %ax,%ax

00100380 <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  100380:	55                   	push   %ebp
  100381:	89 e5                	mov    %esp,%ebp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100383:	56                   	push   %esi
  100384:	83 ec 10             	sub    $0x10,%esp
  100387:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10038e:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  100395:	0f 8d b7 00 00 00    	jge    100452 <pmm_alloc+0xd2>
		if(allocatable[i]) {
  10039b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10039e:	81 3c 85 30 b4 10 00 	cmpl   $0x0,0x10b430(,%eax,4)
  1003a5:	00 00 00 00 
  1003a9:	0f 84 8e 00 00 00    	je     10043d <pmm_alloc+0xbd>
			int s;
			for(s = 0; s < 32; s++) {
  1003af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1003b6:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  1003bd:	0f 8d 75 00 00 00    	jge    100438 <pmm_alloc+0xb8>
  1003c3:	b8 01 00 00 00       	mov    $0x1,%eax
				if(allocatable[i] & (1 << s)) {
  1003c8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1003cb:	8b 0c 8d 30 b4 10 00 	mov    0x10b430(,%ecx,4),%ecx
  1003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1003d5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1003d8:	89 d1                	mov    %edx,%ecx
  1003da:	d3 e0                	shl    %cl,%eax
  1003dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1003df:	21 c2                	and    %eax,%edx
  1003e1:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  1003e7:	0f 84 36 00 00 00    	je     100423 <pmm_alloc+0xa3>
  1003ed:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  1003f2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1003f5:	d3 e0                	shl    %cl,%eax
  1003f7:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  1003fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1003ff:	8b 34 95 30 b4 10 00 	mov    0x10b430(,%edx,4),%esi
  100406:	21 c6                	and    %eax,%esi
  100408:	89 34 95 30 b4 10 00 	mov    %esi,0x10b430(,%edx,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  10040f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100412:	c1 e0 05             	shl    $0x5,%eax
  100415:	03 45 f0             	add    -0x10(%ebp),%eax
  100418:	c1 e0 0c             	shl    $0xc,%eax
  10041b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10041e:	e9 36 00 00 00       	jmp    100459 <pmm_alloc+0xd9>
				}
			}
  100423:	e9 00 00 00 00       	jmp    100428 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100428:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10042b:	05 01 00 00 00       	add    $0x1,%eax
  100430:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100433:	e9 7e ff ff ff       	jmp    1003b6 <pmm_alloc+0x36>
				if(allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
  100438:	e9 00 00 00 00       	jmp    10043d <pmm_alloc+0xbd>
	}
  10043d:	e9 00 00 00 00       	jmp    100442 <pmm_alloc+0xc2>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100442:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100445:	05 01 00 00 00       	add    $0x1,%eax
  10044a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10044d:	e9 3c ff ff ff       	jmp    10038e <pmm_alloc+0xe>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  100452:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  100459:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10045c:	83 c4 10             	add    $0x10,%esp
  10045f:	5e                   	pop    %esi
  100460:	5d                   	pop    %ebp
  100461:	c3                   	ret    
  100462:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100469:	1f 84 00 00 00 00 00 

00100470 <pmm_free>:

void pmm_free(void* addr) {
  100470:	55                   	push   %ebp
  100471:	89 e5                	mov    %esp,%ebp
  100473:	56                   	push   %esi
  100474:	83 ec 14             	sub    $0x14,%esp
  100477:	8b 45 08             	mov    0x8(%ebp),%eax
  10047a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10047f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100482:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100485:	c1 e8 0c             	shr    $0xc,%eax
  100488:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10048b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10048e:	25 1f 00 00 00       	and    $0x1f,%eax
  100493:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  100496:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100499:	c1 e8 05             	shr    $0x5,%eax
  10049c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  10049f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1004a2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1004a5:	89 c1                	mov    %eax,%ecx
  1004a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004aa:	d3 e0                	shl    %cl,%eax
  1004ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1004af:	8b 34 95 30 b4 10 00 	mov    0x10b430(,%edx,4),%esi
  1004b6:	09 c6                	or     %eax,%esi
  1004b8:	89 34 95 30 b4 10 00 	mov    %esi,0x10b430(,%edx,4)
}
  1004bf:	83 c4 14             	add    $0x14,%esp
  1004c2:	5e                   	pop    %esi
  1004c3:	5d                   	pop    %ebp
  1004c4:	c3                   	ret    
  1004c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1004cc:	00 00 00 00 

001004d0 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
  1004d3:	56                   	push   %esi
  1004d4:	83 ec 14             	sub    $0x14,%esp
  1004d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1004da:	b9 01 00 00 00       	mov    $0x1,%ecx
  1004df:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  1004e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1004e5:	c1 e8 0c             	shr    $0xc,%eax
  1004e8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  1004eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004ee:	25 1f 00 00 00       	and    $0x1f,%eax
  1004f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  1004f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004f9:	c1 e8 05             	shr    $0x5,%eax
  1004fc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  1004ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100502:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100505:	89 c1                	mov    %eax,%ecx
  100507:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10050a:	d3 e0                	shl    %cl,%eax
  10050c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100511:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100514:	8b 34 95 30 b4 10 00 	mov    0x10b430(,%edx,4),%esi
  10051b:	21 c6                	and    %eax,%esi
  10051d:	89 34 95 30 b4 10 00 	mov    %esi,0x10b430(,%edx,4)
}
  100524:	83 c4 14             	add    $0x14,%esp
  100527:	5e                   	pop    %esi
  100528:	5d                   	pop    %ebp
  100529:	c3                   	ret    
  10052a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100530 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100530:	55                   	push   %ebp
  100531:	89 e5                	mov    %esp,%ebp
  100533:	53                   	push   %ebx
  100534:	57                   	push   %edi
  100535:	56                   	push   %esi
  100536:	83 ec 5c             	sub    $0x5c,%esp
  100539:	8b 45 08             	mov    0x8(%ebp),%eax
  10053c:	8d 0d 29 51 10 00    	lea    0x105129,%ecx
  100542:	8d 15 30 b4 10 00    	lea    0x10b430,%edx
  100548:	89 d6                	mov    %edx,%esi
  10054a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  100550:	89 d7                	mov    %edx,%edi
  100552:	bb 00 00 00 00       	mov    $0x0,%ebx
  100557:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10055a:	b8 00 00 02 00       	mov    $0x20000,%eax
  10055f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100562:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100565:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  100568:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10056b:	8b 40 30             	mov    0x30(%eax),%eax
  10056e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
  100571:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100574:	8b 40 30             	mov    0x30(%eax),%eax
  100577:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10057a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10057d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100580:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100583:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  100586:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  100589:	03 41 2c             	add    0x2c(%ecx),%eax
  10058c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  10058f:	89 3c 24             	mov    %edi,(%esp)
  100592:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100599:	00 
  10059a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1005a1:	00 
  1005a2:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  1005a5:	89 55 b8             	mov    %edx,-0x48(%ebp)
  1005a8:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  1005ab:	e8 80 22 00 00       	call   102830 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  1005b0:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1005b3:	89 04 24             	mov    %eax,(%esp)
  1005b6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  1005b9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1005bd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1005c0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1005c4:	e8 07 1e 00 00       	call   1023d0 <kprintf>
  1005c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
	 
	while (mmap < mmap_end) {
  1005cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005cf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  1005d2:	0f 83 60 00 00 00    	jae    100638 <pmm_init+0x108>
		  if (mmap->mm_type == 1) {
  1005d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005db:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  1005e2:	0f 85 40 00 00 00    	jne    100628 <pmm_init+0xf8>
		      uintptr_t addr = mmap->mm_base_addr;
  1005e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005eb:	8b 40 04             	mov    0x4(%eax),%eax
  1005ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  1005f1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1005f4:	8b 49 0c             	mov    0xc(%ecx),%ecx
  1005f7:	01 c8                	add    %ecx,%eax
  1005f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 
		      while (addr < end_addr) {
  1005fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1005ff:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100602:	0f 83 1b 00 00 00    	jae    100623 <pmm_init+0xf3>
		          pmm_free((void*) addr);
  100608:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10060b:	89 04 24             	mov    %eax,(%esp)
  10060e:	e8 5d fe ff ff       	call   100470 <pmm_free>
		          addr += 0x1000;
  100613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100616:	05 00 10 00 00       	add    $0x1000,%eax
  10061b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      }
  10061e:	e9 d9 ff ff ff       	jmp    1005fc <pmm_init+0xcc>
		  }
  100623:	e9 00 00 00 00       	jmp    100628 <pmm_init+0xf8>
		  mmap++;
  100628:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10062b:	05 18 00 00 00       	add    $0x18,%eax
  100630:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  100633:	e9 94 ff ff ff       	jmp    1005cc <pmm_init+0x9c>
  100638:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10063e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100641:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  100647:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  10064a:	0f 83 1b 00 00 00    	jae    10066b <pmm_init+0x13b>
		  pmm_mark_used((void*) addr);
  100650:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100653:	89 04 24             	mov    %eax,(%esp)
  100656:	e8 75 fe ff ff       	call   1004d0 <pmm_mark_used>
		  addr += 0x1000;
  10065b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10065e:	05 00 10 00 00       	add    $0x1000,%eax
  100663:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  100666:	e9 d6 ff ff ff       	jmp    100641 <pmm_init+0x111>

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  10066b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10066e:	8b 40 18             	mov    0x18(%eax),%eax
  100671:	89 45 d8             	mov    %eax,-0x28(%ebp)

  pmm_mark_used(mb_info);
  100674:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100677:	89 04 24             	mov    %eax,(%esp)
  10067a:	e8 51 fe ff ff       	call   1004d0 <pmm_mark_used>
  pmm_mark_used(modules);
  10067f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100682:	89 04 24             	mov    %eax,(%esp)
  100685:	e8 46 fe ff ff       	call   1004d0 <pmm_mark_used>

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  10068a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  100691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100694:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100697:	3b 41 14             	cmp    0x14(%ecx),%eax
  10069a:	0f 83 59 00 00 00    	jae    1006f9 <pmm_init+0x1c9>
      addr = (uintptr_t)modules[i].start;
  1006a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1006a3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1006a6:	c1 e0 04             	shl    $0x4,%eax
  1006a9:	01 c1                	add    %eax,%ecx
  1006ab:	8b 01                	mov    (%ecx),%eax
  1006ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  1006b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006b3:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  1006b6:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1006b9:	c1 e1 04             	shl    $0x4,%ecx
  1006bc:	01 ca                	add    %ecx,%edx
  1006be:	8b 4a 04             	mov    0x4(%edx),%ecx
  1006c1:	39 c8                	cmp    %ecx,%eax
  1006c3:	0f 83 1b 00 00 00    	jae    1006e4 <pmm_init+0x1b4>
          pmm_mark_used((void*) addr);
  1006c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006cc:	89 04 24             	mov    %eax,(%esp)
  1006cf:	e8 fc fd ff ff       	call   1004d0 <pmm_mark_used>
          addr += 0x1000;
  1006d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006d7:	05 00 10 00 00       	add    $0x1000,%eax
  1006dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
      }
  1006df:	e9 cc ff ff ff       	jmp    1006b0 <pmm_init+0x180>
  }
  1006e4:	e9 00 00 00 00       	jmp    1006e9 <pmm_init+0x1b9>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1006e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1006ec:	05 01 00 00 00       	add    $0x1,%eax
  1006f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1006f4:	e9 98 ff ff ff       	jmp    100691 <pmm_init+0x161>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  1006f9:	83 c4 5c             	add    $0x5c,%esp
  1006fc:	5e                   	pop    %esi
  1006fd:	5f                   	pop    %edi
  1006fe:	5b                   	pop    %ebx
  1006ff:	5d                   	pop    %ebp
  100700:	c3                   	ret    
  100701:	66 90                	xchg   %ax,%ax
  100703:	66 90                	xchg   %ax,%ax
  100705:	66 90                	xchg   %ax,%ax
  100707:	66 90                	xchg   %ax,%ax
  100709:	66 90                	xchg   %ax,%ax
  10070b:	66 90                	xchg   %ax,%ax
  10070d:	66 90                	xchg   %ax,%ax
  10070f:	90                   	nop

00100710 <vmm_get_current_pagedir>:
  }
  
  vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  100710:	55                   	push   %ebp
  100711:	89 e5                	mov    %esp,%ebp
  return active_pagedir;
  100713:	a1 14 b0 10 00       	mov    0x10b014,%eax
  100718:	5d                   	pop    %ebp
  100719:	c3                   	ret    
  10071a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100720 <vmm_fork_current>:
}

uint32_t vmm_fork_current(void)
{
  100720:	55                   	push   %ebp
  100721:	89 e5                	mov    %esp,%ebp
  100723:	56                   	push   %esi
  100724:	83 ec 34             	sub    $0x34,%esp
  100727:	8d 45 f8             	lea    -0x8(%ebp),%eax
  uint32_t phys_pagedir, paddr, i;
  uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  10072a:	89 04 24             	mov    %eax,(%esp)
  10072d:	e8 ce 00 00 00       	call   100800 <vmm_create_vpdraw>
  100732:	89 45 ec             	mov    %eax,-0x14(%ebp)
  
  for(i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  100735:	c7 45 f0 00 10 40 20 	movl   $0x20401000,-0x10(%ebp)
  10073c:	81 7d f0 00 f0 ff ff 	cmpl   $0xfffff000,-0x10(%ebp)
  100743:	0f 83 98 00 00 00    	jae    1007e1 <vmm_fork_current+0xc1>
    if(active_pagetables[i >> 12] & PT_PRESENT) {      
  100749:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10074c:	c1 e8 0c             	shr    $0xc,%eax
  10074f:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100755:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100758:	25 01 00 00 00       	and    $0x1,%eax
  10075d:	3d 00 00 00 00       	cmp    $0x0,%eax
  100762:	0f 84 64 00 00 00    	je     1007cc <vmm_fork_current+0xac>
  100768:	8d 45 f4             	lea    -0xc(%ebp),%eax
      void* newp = vmm_alloc_user(&paddr);
  10076b:	89 04 24             	mov    %eax,(%esp)
  10076e:	e8 4d 03 00 00       	call   100ac0 <vmm_alloc_user>
  100773:	b9 00 00 00 00       	mov    $0x0,%ecx
  100778:	ba 00 10 00 00       	mov    $0x1000,%edx
  10077d:	89 45 e8             	mov    %eax,-0x18(%ebp)
      
      memcpy(newp, (void*)i, 0x1000);
  100780:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100783:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100786:	89 04 24             	mov    %eax,(%esp)
  100789:	89 74 24 04          	mov    %esi,0x4(%esp)
  10078d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  100794:	00 
  100795:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  100798:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10079b:	e8 f0 20 00 00       	call   102890 <memcpy>
      map_address_context(pdptr, i, paddr, 0);
  1007a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1007a3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1007a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1007a9:	89 04 24             	mov    %eax,(%esp)
  1007ac:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1007b0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1007b4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1007bb:	00 
  1007bc:	e8 3f 03 00 00       	call   100b00 <map_address_context>
      
      vmm_unmap(newp);
  1007c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1007c4:	89 04 24             	mov    %eax,(%esp)
  1007c7:	e8 c4 03 00 00       	call   100b90 <vmm_unmap>
    }
    
  }
  1007cc:	e9 00 00 00 00       	jmp    1007d1 <vmm_fork_current+0xb1>
uint32_t vmm_fork_current(void)
{
  uint32_t phys_pagedir, paddr, i;
  uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  
  for(i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  1007d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007d4:	05 00 10 00 00       	add    $0x1000,%eax
  1007d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1007dc:	e9 5b ff ff ff       	jmp    10073c <vmm_fork_current+0x1c>
      vmm_unmap(newp);
    }
    
  }
    
  vmm_free_pdptr(pdptr);
  1007e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1007e4:	89 04 24             	mov    %eax,(%esp)
  1007e7:	e8 14 04 00 00       	call   100c00 <vmm_free_pdptr>
                    
  return phys_pagedir;
  1007ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1007ef:	83 c4 34             	add    $0x34,%esp
  1007f2:	5e                   	pop    %esi
  1007f3:	5d                   	pop    %ebp
  1007f4:	c3                   	ret    
  1007f5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1007fc:	00 00 00 00 

00100800 <vmm_create_vpdraw>:
uint32_t*           active_pagetables = (uint32_t*)(ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context    = (void*)(ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  100800:	55                   	push   %ebp
  100801:	89 e5                	mov    %esp,%ebp
  100803:	53                   	push   %ebx
  100804:	57                   	push   %edi
  100805:	56                   	push   %esi
  100806:	83 ec 4c             	sub    $0x4c,%esp
  100809:	8b 45 08             	mov    0x8(%ebp),%eax
  10080c:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  10080f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t phys_context = 0;
  100812:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  100819:	89 0c 24             	mov    %ecx,(%esp)
  10081c:	e8 5f 05 00 00       	call   100d80 <vmm_alloc>
  100821:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  100824:	89 45 e8             	mov    %eax,-0x18(%ebp)
  
  uint32_t phys_pagedir = 0;
  100827:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  10082e:	89 0c 24             	mov    %ecx,(%esp)
  100831:	e8 4a 05 00 00       	call   100d80 <vmm_alloc>
  100836:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100839:	89 01                	mov    %eax,(%ecx)
  if(pagedir != 0) *pagedir = phys_pagedir;
  10083b:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  100842:	0f 84 08 00 00 00    	je     100850 <vmm_create_vpdraw+0x50>
  100848:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10084b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10084e:	89 01                	mov    %eax,(%ecx)
  100850:	b8 00 00 00 00       	mov    $0x0,%eax
  
  uint32_t* pagedir_ptr = vmm_alloc(0);
  100855:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10085c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10085f:	e8 1c 05 00 00       	call   100d80 <vmm_alloc>
  100864:	89 45 e0             	mov    %eax,-0x20(%ebp)
  uint32_t  paddr, i, i2;
    
  for(i = 0; i < 1024; i++) {
  100867:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  10086e:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  100875:	0f 83 25 01 00 00    	jae    1009a0 <vmm_create_vpdraw+0x1a0>
  10087b:	8d 45 dc             	lea    -0x24(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  10087e:	89 04 24             	mov    %eax,(%esp)
  100881:	e8 fa 04 00 00       	call   100d80 <vmm_alloc>
  100886:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  100889:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10088c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    if(i < PMEM_TABLES) {
  10088f:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  100896:	0f 83 4d 00 00 00    	jae    1008e9 <vmm_create_vpdraw+0xe9>
      vmm_free((void*)(pagedir_ptr[i]));
  10089c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10089f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1008a2:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1008a5:	89 04 24             	mov    %eax,(%esp)
  1008a8:	e8 13 05 00 00       	call   100dc0 <vmm_free>
  1008ad:	b8 00 00 00 00       	mov    $0x0,%eax
      map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  1008b2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1008b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1008b8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1008bb:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1008be:	8b 14 95 30 b4 12 00 	mov    0x12b430(,%edx,4),%edx
  1008c5:	89 0c 24             	mov    %ecx,(%esp)
  1008c8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1008cc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1008d3:	00 
  1008d4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1008d7:	e8 64 05 00 00       	call   100e40 <map_address_active>
      paddr = kernel_pagetables[i];
  1008dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1008df:	8b 04 85 30 b4 12 00 	mov    0x12b430(,%eax,4),%eax
  1008e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
    }
      
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  1008e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1008ec:	0d 01 00 00 00       	or     $0x1,%eax
  1008f1:	0d 02 00 00 00       	or     $0x2,%eax
  1008f6:	0d 04 00 00 00       	or     $0x4,%eax
  1008fb:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1008fe:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100901:	8b 12                	mov    (%edx),%edx
  100903:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    if(i >= PMEM_TABLES) { //don't override kernel tables ;)
  100906:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  10090d:	0f 82 78 00 00 00    	jb     10098b <vmm_create_vpdraw+0x18b>
      for(i2 = 0; i2 < 1024; i2++) {
  100913:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  10091a:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  100921:	0f 83 5f 00 00 00    	jae    100986 <vmm_create_vpdraw+0x186>
  100927:	b8 04 00 00 00       	mov    $0x4,%eax
  10092c:	b9 00 00 00 00       	mov    $0x0,%ecx
  100931:	ba 00 02 00 00       	mov    $0x200,%edx
        uint32_t vaddr = (i << 22) + (i2 << 12);
  100936:	8b 75 d8             	mov    -0x28(%ebp),%esi
  100939:	c1 e6 16             	shl    $0x16,%esi
  10093c:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  10093f:	c1 e7 0c             	shl    $0xc,%edi
  100942:	01 fe                	add    %edi,%esi
  100944:	89 75 d0             	mov    %esi,-0x30(%ebp)
      
        ((uint32_t*)(pagedir_ptr[i]))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > USERSPACE_BOTTOM) ? PT_PUBLIC : 0);
  100947:	81 7d d0 00 00 80 00 	cmpl   $0x800000,-0x30(%ebp)
  10094e:	0f 97 c3             	seta   %bl
  100951:	84 db                	test   %bl,%bl
  100953:	0f 44 d1             	cmove  %ecx,%edx
  100956:	81 7d d0 00 00 00 20 	cmpl   $0x20000000,-0x30(%ebp)
  10095d:	0f 97 c3             	seta   %bl
  100960:	84 db                	test   %bl,%bl
  100962:	0f 44 c1             	cmove  %ecx,%eax
  100965:	09 c2                	or     %eax,%edx
  100967:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10096a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10096d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100970:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  100973:	89 14 81             	mov    %edx,(%ecx,%eax,4)
    }
      
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    if(i >= PMEM_TABLES) { //don't override kernel tables ;)
      for(i2 = 0; i2 < 1024; i2++) {
  100976:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100979:	05 01 00 00 00       	add    $0x1,%eax
  10097e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100981:	e9 94 ff ff ff       	jmp    10091a <vmm_create_vpdraw+0x11a>
        uint32_t vaddr = (i << 22) + (i2 << 12);
      
        ((uint32_t*)(pagedir_ptr[i]))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > USERSPACE_BOTTOM) ? PT_PUBLIC : 0);
      }
    }
  100986:	e9 00 00 00 00       	jmp    10098b <vmm_create_vpdraw+0x18b>
  }
  10098b:	e9 00 00 00 00       	jmp    100990 <vmm_create_vpdraw+0x190>
  if(pagedir != 0) *pagedir = phys_pagedir;
  
  uint32_t* pagedir_ptr = vmm_alloc(0);
  uint32_t  paddr, i, i2;
    
  for(i = 0; i < 1024; i++) {
  100990:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100993:	05 01 00 00 00       	add    $0x1,%eax
  100998:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10099b:	e9 ce fe ff ff       	jmp    10086e <vmm_create_vpdraw+0x6e>
        ((uint32_t*)(pagedir_ptr[i]))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > USERSPACE_BOTTOM) ? PT_PUBLIC : 0);
      }
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  1009a0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  1009a7:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  1009ae:	0f 83 58 00 00 00    	jae    100a0c <vmm_create_vpdraw+0x20c>
  1009b4:	b8 00 00 00 00       	mov    $0x0,%eax
    paddr = context->pagedir[i] & 0xFFFFF000;
  1009b9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1009bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1009bf:	8b 12                	mov    (%edx),%edx
  1009c1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1009c4:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  1009ca:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  1009cd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1009d0:	8b 15 00 41 10 00    	mov    0x104100,%edx
  1009d6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1009d9:	c1 e6 0c             	shl    $0xc,%esi
  1009dc:	01 f2                	add    %esi,%edx
  1009de:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1009e1:	89 0c 24             	mov    %ecx,(%esp)
  1009e4:	89 54 24 04          	mov    %edx,0x4(%esp)
  1009e8:	89 74 24 08          	mov    %esi,0x8(%esp)
  1009ec:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1009f3:	00 
  1009f4:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1009f7:	e8 04 01 00 00       	call   100b00 <map_address_context>
        ((uint32_t*)(pagedir_ptr[i]))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > USERSPACE_BOTTOM) ? PT_PUBLIC : 0);
      }
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  1009fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1009ff:	05 01 00 00 00       	add    $0x1,%eax
  100a04:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100a07:	e9 9b ff ff ff       	jmp    1009a7 <vmm_create_vpdraw+0x1a7>
  100a0c:	b8 00 00 00 00       	mov    $0x0,%eax
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  100a11:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100a14:	8b 15 04 41 10 00    	mov    0x104104,%edx
  100a1a:	8b 75 ec             	mov    -0x14(%ebp),%esi
  100a1d:	89 0c 24             	mov    %ecx,(%esp)
  100a20:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a24:	89 74 24 08          	mov    %esi,0x8(%esp)
  100a28:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100a2f:	00 
  100a30:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100a33:	e8 c8 00 00 00       	call   100b00 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100a38:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  100a3f:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  100a45:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  100a48:	0f 83 39 00 00 00    	jae    100a87 <vmm_create_vpdraw+0x287>
  100a4e:	b8 00 00 00 00       	mov    $0x0,%eax
    map_address_context(pagedir_ptr, i, i, 0);
  100a53:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100a56:	8b 55 d8             	mov    -0x28(%ebp),%edx
  100a59:	8b 75 d8             	mov    -0x28(%ebp),%esi
  100a5c:	89 0c 24             	mov    %ecx,(%esp)
  100a5f:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a63:	89 74 24 08          	mov    %esi,0x8(%esp)
  100a67:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100a6e:	00 
  100a6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100a72:	e8 89 00 00 00       	call   100b00 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100a77:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100a7a:	05 00 10 00 00       	add    $0x1000,%eax
  100a7f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100a82:	e9 b8 ff ff ff       	jmp    100a3f <vmm_create_vpdraw+0x23f>
    map_address_context(pagedir_ptr, i, i, 0);
  }
    
  uint32_t* pd_ptr = context->pagedir;
  100a87:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a8a:	8b 00                	mov    (%eax),%eax
  100a8c:	89 45 cc             	mov    %eax,-0x34(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  100a8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100a92:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100a95:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  100a97:	8b 45 cc             	mov    -0x34(%ebp),%eax
  100a9a:	89 04 24             	mov    %eax,(%esp)
  100a9d:	e8 ee 00 00 00       	call   100b90 <vmm_unmap>
  vmm_unmap(context);
  100aa2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100aa5:	89 04 24             	mov    %eax,(%esp)
  100aa8:	e8 e3 00 00 00       	call   100b90 <vmm_unmap>
  
  return pagedir_ptr;
  100aad:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ab0:	83 c4 4c             	add    $0x4c,%esp
  100ab3:	5e                   	pop    %esi
  100ab4:	5f                   	pop    %edi
  100ab5:	5b                   	pop    %ebx
  100ab6:	5d                   	pop    %ebp
  100ab7:	c3                   	ret    
  100ab8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100abf:	00 

00100ac0 <vmm_alloc_user>:
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  100ac0:	55                   	push   %ebp
  100ac1:	89 e5                	mov    %esp,%ebp
  100ac3:	83 ec 18             	sub    $0x18,%esp
  100ac6:	8b 45 08             	mov    0x8(%ebp),%eax
  100ac9:	b9 00 00 00 20       	mov    $0x20000000,%ecx
  100ace:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  100ad3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return vmm_alloc_in_range(USERSPACE_BOTTOM, 0xFFFFF000, retpaddr);
  100ad6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100ad9:	c7 04 24 00 00 00 20 	movl   $0x20000000,(%esp)
  100ae0:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  100ae7:	ff 
  100ae8:	89 44 24 08          	mov    %eax,0x8(%esp)
  100aec:	89 55 f8             	mov    %edx,-0x8(%ebp)
  100aef:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  100af2:	e8 59 04 00 00       	call   100f50 <vmm_alloc_in_range>
  100af7:	83 c4 18             	add    $0x18,%esp
  100afa:	5d                   	pop    %ebp
  100afb:	c3                   	ret    
  100afc:	0f 1f 40 00          	nopl   0x0(%eax)

00100b00 <map_address_context>:
  for(uint32_t i = 0; i < length; i+= 0x1000) {
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  100b00:	55                   	push   %ebp
  100b01:	89 e5                	mov    %esp,%ebp
  100b03:	56                   	push   %esi
  100b04:	83 ec 18             	sub    $0x18,%esp
  100b07:	8b 45 14             	mov    0x14(%ebp),%eax
  100b0a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100b0d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100b10:	8b 75 08             	mov    0x8(%ebp),%esi
  100b13:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100b16:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100b19:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100b1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t pd_entry =  vaddr >> 22;
  100b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b22:	c1 e8 16             	shr    $0x16,%eax
  100b25:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  100b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b2b:	c1 e8 0c             	shr    $0xc,%eax
  100b2e:	25 ff 03 00 00       	and    $0x3ff,%eax
  100b33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | 
  100b36:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100b39:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100b3e:	0d 01 00 00 00       	or     $0x1,%eax
  100b43:	0d 02 00 00 00       	or     $0x2,%eax
  100b48:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100b4b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100b51:	09 c8                	or     %ecx,%eax
  100b53:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100b56:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b59:	8b 75 f8             	mov    -0x8(%ebp),%esi
  100b5c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100b5f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100b65:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  100b68:	81 e1 04 02 00 00    	and    $0x204,%ecx
  100b6e:	09 c8                	or     %ecx,%eax
  100b70:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100b73:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b76:	8b 75 f8             	mov    -0x8(%ebp),%esi
  100b79:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100b7c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100b82:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
                                                            (flags & 0xFFF) | (((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] & (PT_PUBLIC | PT_ALLOCATABLE));
}
  100b85:	83 c4 18             	add    $0x18,%esp
  100b88:	5e                   	pop    %esi
  100b89:	5d                   	pop    %ebp
  100b8a:	c3                   	ret    
  100b8b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100b90 <vmm_unmap>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE | (active_pagetables[vaddr >> 12] & PT_PUBLIC);
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  }
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  100b90:	55                   	push   %ebp
  100b91:	89 e5                	mov    %esp,%ebp
  100b93:	83 ec 08             	sub    $0x8,%esp
  100b96:	8b 45 08             	mov    0x8(%ebp),%eax
  100b99:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100b9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b9f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100ba2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ba5:	c1 e8 0c             	shr    $0xc,%eax
  100ba8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100bae:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100bb1:	25 01 02 00 00       	and    $0x201,%eax
  100bb6:	3d 01 02 00 00       	cmp    $0x201,%eax
  100bbb:	0f 85 2e 00 00 00    	jne    100bef <vmm_unmap+0x5f>
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE | (active_pagetables[vaddr >> 12] & PT_PUBLIC);
  100bc1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100bc4:	c1 e8 0c             	shr    $0xc,%eax
  100bc7:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100bcd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100bd0:	25 04 00 00 00       	and    $0x4,%eax
  100bd5:	0d 00 02 00 00       	or     $0x200,%eax
  100bda:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100bdd:	c1 e9 0c             	shr    $0xc,%ecx
  100be0:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100be6:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100be9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100bec:	0f 01 38             	invlpg (%eax)
  }
}
  100bef:	83 c4 08             	add    $0x8,%esp
  100bf2:	5d                   	pop    %ebp
  100bf3:	c3                   	ret    
  100bf4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100bfb:	00 00 00 00 00 

00100c00 <vmm_free_pdptr>:
  vmm_unmap(context);
  
  return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  100c00:	55                   	push   %ebp
  100c01:	89 e5                	mov    %esp,%ebp
  100c03:	83 ec 18             	sub    $0x18,%esp
  100c06:	8b 45 08             	mov    0x8(%ebp),%eax
  100c09:	89 45 fc             	mov    %eax,-0x4(%ebp)
  for(uint32_t i = 0; i < 1024; i++) {       
  100c0c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100c13:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  100c1a:	0f 83 21 00 00 00    	jae    100c41 <vmm_free_pdptr+0x41>
    vmm_unmap((void*)pagedir_ptr[i]); 
  100c20:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100c23:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100c26:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100c29:	89 04 24             	mov    %eax,(%esp)
  100c2c:	e8 5f ff ff ff       	call   100b90 <vmm_unmap>
  
  return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  for(uint32_t i = 0; i < 1024; i++) {       
  100c31:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100c34:	05 01 00 00 00       	add    $0x1,%eax
  100c39:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100c3c:	e9 d2 ff ff ff       	jmp    100c13 <vmm_free_pdptr+0x13>
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  100c41:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100c44:	89 04 24             	mov    %eax,(%esp)
  100c47:	e8 44 ff ff ff       	call   100b90 <vmm_unmap>
}
  100c4c:	83 c4 18             	add    $0x18,%esp
  100c4f:	5d                   	pop    %ebp
  100c50:	c3                   	ret    
  100c51:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100c58:	0f 1f 84 00 00 00 00 
  100c5f:	00 

00100c60 <vmm_create_pagedir>:
                    
  return phys_pagedir;
}

uint32_t vmm_create_pagedir()
{
  100c60:	55                   	push   %ebp
  100c61:	89 e5                	mov    %esp,%ebp
  100c63:	83 ec 18             	sub    $0x18,%esp
  100c66:	8d 45 fc             	lea    -0x4(%ebp),%eax
  uint32_t phys_pagedir;
  uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  100c69:	89 04 24             	mov    %eax,(%esp)
  100c6c:	e8 8f fb ff ff       	call   100800 <vmm_create_vpdraw>
  100c71:	89 45 f8             	mov    %eax,-0x8(%ebp)
                    vmm_free_pdptr(pdptr);  
  100c74:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100c77:	89 04 24             	mov    %eax,(%esp)
  100c7a:	e8 81 ff ff ff       	call   100c00 <vmm_free_pdptr>
  
  return phys_pagedir;
  100c7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100c82:	83 c4 18             	add    $0x18,%esp
  100c85:	5d                   	pop    %ebp
  100c86:	c3                   	ret    
  100c87:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  100c8e:	00 00 

00100c90 <vmm_resolve>:
}

uint32_t vmm_resolve(void* vaddr) {
  100c90:	55                   	push   %ebp
  100c91:	89 e5                	mov    %esp,%ebp
  100c93:	50                   	push   %eax
  100c94:	8b 45 08             	mov    0x8(%ebp),%eax
  100c97:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return active_pagetables[(uint32_t)vaddr >> 12] & 0xFFFFF000;
  100c9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100c9d:	c1 e8 0c             	shr    $0xc,%eax
  100ca0:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100ca6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100ca9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100cae:	83 c4 04             	add    $0x4,%esp
  100cb1:	5d                   	pop    %ebp
  100cb2:	c3                   	ret    
  100cb3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100cba:	84 00 00 00 00 00 

00100cc0 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  100cc0:	55                   	push   %ebp
  100cc1:	89 e5                	mov    %esp,%ebp
  100cc3:	83 ec 38             	sub    $0x38,%esp
  100cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
  100cc9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100ccc:	ba 00 00 00 00       	mov    $0x0,%edx
  100cd1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100cd4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t pd_entry =  (uint32_t)vaddr >> 22;
  100cd7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100cda:	c1 e8 16             	shr    $0x16,%eax
  100cdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t pt_entry = ((uint32_t)vaddr >> 12) % 1024;
  100ce0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ce3:	c1 e8 0c             	shr    $0xc,%eax
  100ce6:	25 ff 03 00 00       	and    $0x3ff,%eax
  100ceb:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  uint32_t* vpd = vmm_alloc(0);
  100cee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100cf5:	89 55 e0             	mov    %edx,-0x20(%ebp)
  100cf8:	e8 83 00 00 00       	call   100d80 <vmm_alloc>
  100cfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  vmm_free(vpd);
  100d00:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d03:	89 04 24             	mov    %eax,(%esp)
  100d06:	e8 b5 00 00 00       	call   100dc0 <vmm_free>
  100d0b:	b8 00 00 00 00       	mov    $0x0,%eax
  
  map_address_active((uint32_t)vpd, pdir, 0);
  100d10:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100d13:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100d16:	89 0c 24             	mov    %ecx,(%esp)
  100d19:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d1d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100d24:	00 
  100d25:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100d28:	e8 13 01 00 00       	call   100e40 <map_address_active>
  100d2d:	b8 00 00 00 00       	mov    $0x0,%eax
  uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  100d32:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100d35:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100d38:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  100d3b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  100d41:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  
  map_address_active((uint32_t)vpd, table, 0);
  100d44:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100d47:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100d4a:	89 0c 24             	mov    %ecx,(%esp)
  100d4d:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d51:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100d58:	00 
  100d59:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100d5c:	e8 df 00 00 00       	call   100e40 <map_address_active>
  uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  100d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100d64:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100d67:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100d6a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100d6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  return addr & 0xFFFFF000;
  100d72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100d75:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100d7a:	83 c4 38             	add    $0x38,%esp
  100d7d:	5d                   	pop    %ebp
  100d7e:	c3                   	ret    
  100d7f:	90                   	nop

00100d80 <vmm_alloc>:

void* vmm_alloc_user(uint32_t* retpaddr) {
  return vmm_alloc_in_range(USERSPACE_BOTTOM, 0xFFFFF000, retpaddr);
}

void* vmm_alloc(uint32_t* retpaddr) {
  100d80:	55                   	push   %ebp
  100d81:	89 e5                	mov    %esp,%ebp
  100d83:	83 ec 18             	sub    $0x18,%esp
  100d86:	8b 45 08             	mov    0x8(%ebp),%eax
  100d89:	b9 00 00 80 00       	mov    $0x800000,%ecx
  100d8e:	ba 00 00 00 20       	mov    $0x20000000,%edx
  100d93:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr);
  100d96:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100d99:	c7 04 24 00 00 80 00 	movl   $0x800000,(%esp)
  100da0:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  100da7:	20 
  100da8:	89 44 24 08          	mov    %eax,0x8(%esp)
  100dac:	89 55 f8             	mov    %edx,-0x8(%ebp)
  100daf:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  100db2:	e8 99 01 00 00       	call   100f50 <vmm_alloc_in_range>
  100db7:	83 c4 18             	add    $0x18,%esp
  100dba:	5d                   	pop    %ebp
  100dbb:	c3                   	ret    
  100dbc:	0f 1f 40 00          	nopl   0x0(%eax)

00100dc0 <vmm_free>:
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | 
                                   (flags & 0xFFF) | (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
  asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  100dc0:	55                   	push   %ebp
  100dc1:	89 e5                	mov    %esp,%ebp
  100dc3:	83 ec 18             	sub    $0x18,%esp
  100dc6:	8b 45 08             	mov    0x8(%ebp),%eax
  100dc9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100dcc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100dcf:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100dd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100dd5:	c1 e8 0c             	shr    $0xc,%eax
  100dd8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100dde:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100de1:	25 01 02 00 00       	and    $0x201,%eax
  100de6:	3d 01 02 00 00       	cmp    $0x201,%eax
  100deb:	0f 85 4a 00 00 00    	jne    100e3b <vmm_free+0x7b>
    pmm_free((void*)(active_pagetables[vaddr >> 12] & 0xFFFFF000));
  100df1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100df4:	c1 e8 0c             	shr    $0xc,%eax
  100df7:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100dfd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e00:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100e05:	89 04 24             	mov    %eax,(%esp)
  100e08:	e8 63 f6 ff ff       	call   100470 <pmm_free>
   
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE | (active_pagetables[vaddr >> 12] & PT_PUBLIC);
  100e0d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e10:	c1 e8 0c             	shr    $0xc,%eax
  100e13:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e19:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e1c:	25 04 00 00 00       	and    $0x4,%eax
  100e21:	0d 00 02 00 00       	or     $0x200,%eax
  100e26:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100e29:	c1 e9 0c             	shr    $0xc,%ecx
  100e2c:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100e32:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100e35:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e38:	0f 01 38             	invlpg (%eax)
  }
}
  100e3b:	83 c4 18             	add    $0x18,%esp
  100e3e:	5d                   	pop    %ebp
  100e3f:	c3                   	ret    

00100e40 <map_address_active>:
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | 
                                                            (flags & 0xFFF) | (((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] & (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {  
  100e40:	55                   	push   %ebp
  100e41:	89 e5                	mov    %esp,%ebp
  100e43:	83 ec 0c             	sub    $0xc,%esp
  100e46:	8b 45 10             	mov    0x10(%ebp),%eax
  100e49:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100e4c:	8b 55 08             	mov    0x8(%ebp),%edx
  100e4f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100e52:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100e55:	89 45 f4             	mov    %eax,-0xc(%ebp)
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | 
  100e58:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e5b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100e60:	0d 01 00 00 00       	or     $0x1,%eax
  100e65:	0d 02 00 00 00       	or     $0x2,%eax
  100e6a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100e6d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100e73:	09 c8                	or     %ecx,%eax
  100e75:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100e78:	c1 e9 0c             	shr    $0xc,%ecx
  100e7b:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100e81:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  100e84:	81 e1 04 02 00 00    	and    $0x204,%ecx
  100e8a:	09 c8                	or     %ecx,%eax
  100e8c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100e8f:	c1 e9 0c             	shr    $0xc,%ecx
  100e92:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100e98:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
                                   (flags & 0xFFF) | (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
  asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100e9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e9e:	0f 01 38             	invlpg (%eax)
}
  100ea1:	83 c4 0c             	add    $0xc,%esp
  100ea4:	5d                   	pop    %ebp
  100ea5:	c3                   	ret    
  100ea6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100ead:	00 00 00 

00100eb0 <vmm_map_range>:
  uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  
  return addr & 0xFFFFF000;
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  100eb0:	55                   	push   %ebp
  100eb1:	89 e5                	mov    %esp,%ebp
  100eb3:	56                   	push   %esi
  100eb4:	83 ec 24             	sub    $0x24,%esp
  100eb7:	8b 45 14             	mov    0x14(%ebp),%eax
  100eba:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100ebd:	8b 55 0c             	mov    0xc(%ebp),%edx
  100ec0:	8b 75 08             	mov    0x8(%ebp),%esi
  100ec3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100ec6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100ec9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100ecc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if((uint32_t)vaddr & 0xFFF) return;
  100ecf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ed2:	25 ff 0f 00 00       	and    $0xfff,%eax
  100ed7:	3d 00 00 00 00       	cmp    $0x0,%eax
  100edc:	0f 84 05 00 00 00    	je     100ee7 <vmm_map_range+0x37>
  100ee2:	e9 5a 00 00 00       	jmp    100f41 <vmm_map_range+0x91>
  if((uint32_t)paddr & 0xFFF) return;
  100ee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100eea:	25 ff 0f 00 00       	and    $0xfff,%eax
  100eef:	3d 00 00 00 00       	cmp    $0x0,%eax
  100ef4:	0f 84 05 00 00 00    	je     100eff <vmm_map_range+0x4f>
  100efa:	e9 42 00 00 00       	jmp    100f41 <vmm_map_range+0x91>
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100eff:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  100f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100f0c:	0f 83 2f 00 00 00    	jae    100f41 <vmm_map_range+0x91>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  100f12:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f15:	03 45 e8             	add    -0x18(%ebp),%eax
  100f18:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100f1b:	03 4d e8             	add    -0x18(%ebp),%ecx
  100f1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100f21:	89 04 24             	mov    %eax,(%esp)
  100f24:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f28:	89 54 24 08          	mov    %edx,0x8(%esp)
  100f2c:	e8 0f ff ff ff       	call   100e40 <map_address_active>

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  if((uint32_t)vaddr & 0xFFF) return;
  if((uint32_t)paddr & 0xFFF) return;
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100f31:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f34:	05 00 10 00 00       	add    $0x1000,%eax
  100f39:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100f3c:	e9 c5 ff ff ff       	jmp    100f06 <vmm_map_range+0x56>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}
  100f41:	83 c4 24             	add    $0x24,%esp
  100f44:	5e                   	pop    %esi
  100f45:	5d                   	pop    %ebp
  100f46:	c3                   	ret    
  100f47:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  100f4e:	00 00 

00100f50 <vmm_alloc_in_range>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE | (active_pagetables[vaddr >> 12] & PT_PUBLIC);
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  }
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr) {
  100f50:	55                   	push   %ebp
  100f51:	89 e5                	mov    %esp,%ebp
  100f53:	83 ec 28             	sub    $0x28,%esp
  100f56:	8b 45 10             	mov    0x10(%ebp),%eax
  100f59:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100f5c:	8b 55 08             	mov    0x8(%ebp),%edx
  100f5f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100f62:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100f65:	89 45 f4             	mov    %eax,-0xc(%ebp)
  void* vaddr = 0;
  100f68:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  uint32_t i = 0;
  100f6f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  for(i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  100f76:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100f81:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100f84:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  100f87:	0f 83 3f 00 00 00    	jae    100fcc <vmm_alloc_in_range+0x7c>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == PT_ALLOCATABLE) {
  100f8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100f90:	c1 e8 0c             	shr    $0xc,%eax
  100f93:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100f99:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100f9c:	25 01 02 00 00       	and    $0x201,%eax
  100fa1:	3d 00 02 00 00       	cmp    $0x200,%eax
  100fa6:	0f 85 0b 00 00 00    	jne    100fb7 <vmm_alloc_in_range+0x67>
      vaddr = (void*) i;
  100fac:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
      break;
  100fb2:	e9 15 00 00 00       	jmp    100fcc <vmm_alloc_in_range+0x7c>
    }
  }
  100fb7:	e9 00 00 00 00       	jmp    100fbc <vmm_alloc_in_range+0x6c>

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr) {
  void* vaddr = 0;
  uint32_t i = 0;

  for(i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  100fbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100fbf:	05 00 10 00 00       	add    $0x1000,%eax
  100fc4:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100fc7:	e9 b5 ff ff ff       	jmp    100f81 <vmm_alloc_in_range+0x31>
      vaddr = (void*) i;
      break;
    }
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
  100fcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fcf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100fd2:	89 04 24             	mov    %eax,(%esp)
  100fd5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100fd9:	e8 12 00 00 00       	call   100ff0 <vmm_alloc_addr>
  100fde:	83 c4 28             	add    $0x28,%esp
  100fe1:	5d                   	pop    %ebp
  100fe2:	c3                   	ret    
  100fe3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100fea:	84 00 00 00 00 00 

00100ff0 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
  return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  100ff0:	55                   	push   %ebp
  100ff1:	89 e5                	mov    %esp,%ebp
  100ff3:	56                   	push   %esi
  100ff4:	83 ec 34             	sub    $0x34,%esp
  100ff7:	8b 45 0c             	mov    0xc(%ebp),%eax
  100ffa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100ffd:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  101000:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(reqvaddr == 0) {
  101003:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10100a:	0f 85 34 00 00 00    	jne    101044 <vmm_alloc_addr+0x54>
  101010:	8d 05 3f 51 10 00    	lea    0x10513f,%eax
  101016:	b9 00 00 00 00       	mov    $0x0,%ecx
    kprintf("Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n", reqvaddr, 0);
  10101b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10101e:	89 04 24             	mov    %eax,(%esp)
  101021:	89 54 24 04          	mov    %edx,0x4(%esp)
  101025:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10102c:	00 
  10102d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  101030:	e8 9b 13 00 00       	call   1023d0 <kprintf>
    return 0;
  101035:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10103c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10103f:	e9 9b 00 00 00       	jmp    1010df <vmm_alloc_addr+0xef>
  }

  if((active_pagetables[(uint32_t)reqvaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
  101044:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101047:	c1 e8 0c             	shr    $0xc,%eax
  10104a:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  101050:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101053:	25 01 02 00 00       	and    $0x201,%eax
  101058:	3d 00 02 00 00       	cmp    $0x200,%eax
  10105d:	0f 84 37 00 00 00    	je     10109a <vmm_alloc_addr+0xaa>
  101063:	8d 05 3f 51 10 00    	lea    0x10513f,%eax
    kprintf("Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n", reqvaddr, active_pagetables[(uint32_t)reqvaddr >> 12]);
  101069:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10106c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10106f:	c1 ea 0c             	shr    $0xc,%edx
  101072:	8b 35 00 41 10 00    	mov    0x104100,%esi
  101078:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10107b:	89 04 24             	mov    %eax,(%esp)
  10107e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101082:	89 54 24 08          	mov    %edx,0x8(%esp)
  101086:	e8 45 13 00 00       	call   1023d0 <kprintf>
    return 0;
  10108b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  101092:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101095:	e9 45 00 00 00       	jmp    1010df <vmm_alloc_addr+0xef>
  10109a:	b8 04 02 00 00       	mov    $0x204,%eax
  }

  uint32_t paddr = (uint32_t) pmm_alloc();
  10109f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1010a2:	e8 d9 f2 ff ff       	call   100380 <pmm_alloc>
  1010a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
  map_address_active((uint32_t)reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  1010aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1010ad:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1010b0:	89 04 24             	mov    %eax,(%esp)
  1010b3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010b7:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  1010be:	00 
  1010bf:	e8 7c fd ff ff       	call   100e40 <map_address_active>
  
  if(retpaddr != 0) *retpaddr = paddr;
  1010c4:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1010cb:	0f 84 08 00 00 00    	je     1010d9 <vmm_alloc_addr+0xe9>
  1010d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1010d4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1010d7:	89 01                	mov    %eax,(%ecx)
  
  return reqvaddr;
  1010d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1010dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  1010df:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1010e2:	83 c4 34             	add    $0x34,%esp
  1010e5:	5e                   	pop    %esi
  1010e6:	5d                   	pop    %ebp
  1010e7:	c3                   	ret    
  1010e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  1010ef:	00 

001010f0 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  1010f0:	55                   	push   %ebp
  1010f1:	89 e5                	mov    %esp,%ebp
  1010f3:	50                   	push   %eax
  1010f4:	8b 45 08             	mov    0x8(%ebp),%eax
  1010f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  active_pagedir = pdpaddr;
  1010fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010fd:	a3 14 b0 10 00       	mov    %eax,0x10b014
  asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  101102:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101105:	0f 22 d8             	mov    %eax,%cr3
}
  101108:	83 c4 04             	add    $0x4,%esp
  10110b:	5d                   	pop    %ebp
  10110c:	c3                   	ret    
  10110d:	0f 1f 00             	nopl   (%eax)

00101110 <vmm_init>:

uint32_t vmm_init(void)
{
  101110:	55                   	push   %ebp
  101111:	89 e5                	mov    %esp,%ebp
  //CREATE CONTEXT ************************************************************
  
  struct vmm_context* context = pmm_alloc();
  101113:	53                   	push   %ebx
  101114:	57                   	push   %edi
  101115:	56                   	push   %esi
  101116:	83 ec 3c             	sub    $0x3c,%esp
  101119:	e8 62 f2 ff ff       	call   100380 <pmm_alloc>
  10111e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  101121:	e8 5a f2 ff ff       	call   100380 <pmm_alloc>
  101126:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101129:	89 01                	mov    %eax,(%ecx)
  
  for(i = 0; i < 1024; i++) {
  10112b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101132:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  101139:	0f 83 d6 00 00 00    	jae    101215 <vmm_init+0x105>
    context->pagedir[i] = ((uint32_t)pmm_alloc());
  10113f:	e8 3c f2 ff ff       	call   100380 <pmm_alloc>
  101144:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101147:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10114a:	8b 12                	mov    (%edx),%edx
  10114c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    if(i < PMEM_TABLES) {
  10114f:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  101156:	0f 83 15 00 00 00    	jae    101171 <vmm_init+0x61>
      kernel_pagetables[i] = context->pagedir[i];
  10115c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10115f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101162:	8b 09                	mov    (%ecx),%ecx
  101164:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  101167:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10116a:	89 04 8d 30 b4 12 00 	mov    %eax,0x12b430(,%ecx,4)
    }
    
    context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  101171:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101174:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101177:	8b 09                	mov    (%ecx),%ecx
  101179:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  10117c:	81 ca 07 00 00 00    	or     $0x7,%edx
  101182:	89 14 81             	mov    %edx,(%ecx,%eax,4)
        
    for(i2 = 0; i2 < 1024; i2++) {
  101185:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10118c:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  101193:	0f 83 67 00 00 00    	jae    101200 <vmm_init+0xf0>
  101199:	b8 04 00 00 00       	mov    $0x4,%eax
  10119e:	b9 00 00 00 00       	mov    $0x0,%ecx
  1011a3:	ba 00 02 00 00       	mov    $0x200,%edx
      uint32_t vaddr = (i << 22) + (i2 << 12);
  1011a8:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1011ab:	c1 e6 16             	shl    $0x16,%esi
  1011ae:	8b 7d e8             	mov    -0x18(%ebp),%edi
  1011b1:	c1 e7 0c             	shl    $0xc,%edi
  1011b4:	01 fe                	add    %edi,%esi
  1011b6:	89 75 e4             	mov    %esi,-0x1c(%ebp)
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > USERSPACE_BOTTOM) ? PT_PUBLIC : 0);
  1011b9:	81 7d e4 00 00 80 00 	cmpl   $0x800000,-0x1c(%ebp)
  1011c0:	0f 97 c3             	seta   %bl
  1011c3:	84 db                	test   %bl,%bl
  1011c5:	0f 44 d1             	cmove  %ecx,%edx
  1011c8:	81 7d e4 00 00 00 20 	cmpl   $0x20000000,-0x1c(%ebp)
  1011cf:	0f 97 c3             	seta   %bl
  1011d2:	84 db                	test   %bl,%bl
  1011d4:	0f 44 c1             	cmove  %ecx,%eax
  1011d7:	09 c2                	or     %eax,%edx
  1011d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1011dc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1011df:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011e2:	8b 36                	mov    (%esi),%esi
  1011e4:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  1011e7:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  1011ed:	89 14 81             	mov    %edx,(%ecx,%eax,4)
      kernel_pagetables[i] = context->pagedir[i];
    }
    
    context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
        
    for(i2 = 0; i2 < 1024; i2++) {
  1011f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1011f3:	05 01 00 00 00       	add    $0x1,%eax
  1011f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1011fb:	e9 8c ff ff ff       	jmp    10118c <vmm_init+0x7c>
      uint32_t vaddr = (i << 22) + (i2 << 12);
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > USERSPACE_BOTTOM) ? PT_PUBLIC : 0);
    }
  }
  101200:	e9 00 00 00 00       	jmp    101205 <vmm_init+0xf5>
  struct vmm_context* context = pmm_alloc();
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
  101205:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101208:	05 01 00 00 00       	add    $0x1,%eax
  10120d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101210:	e9 1d ff ff ff       	jmp    101132 <vmm_init+0x22>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > USERSPACE_BOTTOM) ? PT_PUBLIC : 0);
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101215:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10121c:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  101223:	0f 83 5a 00 00 00    	jae    101283 <vmm_init+0x173>
  101229:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  10122e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101231:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101234:	8b 12                	mov    (%edx),%edx
  101236:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  101239:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10123f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  101242:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101245:	8b 09                	mov    (%ecx),%ecx
  101247:	8b 15 00 41 10 00    	mov    0x104100,%edx
  10124d:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101250:	c1 e6 0c             	shl    $0xc,%esi
  101253:	01 f2                	add    %esi,%edx
  101255:	8b 75 e0             	mov    -0x20(%ebp),%esi
  101258:	89 0c 24             	mov    %ecx,(%esp)
  10125b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10125f:	89 74 24 08          	mov    %esi,0x8(%esp)
  101263:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10126a:	00 
  10126b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10126e:	e8 8d f8 ff ff       	call   100b00 <map_address_context>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = ((vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0) | ((vaddr > USERSPACE_BOTTOM) ? PT_PUBLIC : 0);
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101273:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101276:	05 01 00 00 00       	add    $0x1,%eax
  10127b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10127e:	e9 99 ff ff ff       	jmp    10121c <vmm_init+0x10c>
  101283:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  101288:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10128b:	8b 09                	mov    (%ecx),%ecx
  10128d:	8b 15 04 41 10 00    	mov    0x104104,%edx
  101293:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101296:	89 0c 24             	mov    %ecx,(%esp)
  101299:	89 54 24 04          	mov    %edx,0x4(%esp)
  10129d:	89 74 24 08          	mov    %esi,0x8(%esp)
  1012a1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1012a8:	00 
  1012a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1012ac:	e8 4f f8 ff ff       	call   100b00 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1012b1:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  1012b8:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  1012be:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  1012c1:	0f 83 3b 00 00 00    	jae    101302 <vmm_init+0x1f2>
  1012c7:	b8 00 00 00 00       	mov    $0x0,%eax
    map_address_context(context->pagedir, i, i, 0);
  1012cc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1012cf:	8b 09                	mov    (%ecx),%ecx
  1012d1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1012d4:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1012d7:	89 0c 24             	mov    %ecx,(%esp)
  1012da:	89 54 24 04          	mov    %edx,0x4(%esp)
  1012de:	89 74 24 08          	mov    %esi,0x8(%esp)
  1012e2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1012e9:	00 
  1012ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1012ed:	e8 0e f8 ff ff       	call   100b00 <map_address_context>
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1012f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1012f5:	05 00 10 00 00       	add    $0x1000,%eax
  1012fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1012fd:	e9 b6 ff ff ff       	jmp    1012b8 <vmm_init+0x1a8>
    map_address_context(context->pagedir, i, i, 0);
  }
  
  //END CREATE CONTEXT ********************************************************
  
  vmm_activate_pagedir((uint32_t) context->pagedir);
  101302:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101305:	8b 00                	mov    (%eax),%eax
  101307:	89 04 24             	mov    %eax,(%esp)
  10130a:	e8 e1 fd ff ff       	call   1010f0 <vmm_activate_pagedir>

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  10130f:	0f 20 c0             	mov    %cr0,%eax
  101312:	89 45 dc             	mov    %eax,-0x24(%ebp)
  cr0 |= (1 << 31);
  101315:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101318:	0d 00 00 00 80       	or     $0x80000000,%eax
  10131d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  101320:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101323:	0f 22 c0             	mov    %eax,%cr0
  
  return (uint32_t) active_context->pagedir;
  101326:	a1 04 41 10 00       	mov    0x104104,%eax
  10132b:	8b 00                	mov    (%eax),%eax
  10132d:	83 c4 3c             	add    $0x3c,%esp
  101330:	5e                   	pop    %esi
  101331:	5f                   	pop    %edi
  101332:	5b                   	pop    %ebx
  101333:	5d                   	pop    %ebp
  101334:	c3                   	ret    
  101335:	66 90                	xchg   %ax,%ax
  101337:	66 90                	xchg   %ax,%ax
  101339:	66 90                	xchg   %ax,%ax
  10133b:	66 90                	xchg   %ax,%ax
  10133d:	66 90                	xchg   %ax,%ax
  10133f:	90                   	nop

00101340 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101340:	55                   	push   %ebp
  101341:	89 e5                	mov    %esp,%ebp
  101343:	53                   	push   %ebx
  101344:	57                   	push   %edi
  101345:	56                   	push   %esi
  101346:	83 ec 10             	sub    $0x10,%esp
  101349:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  10134d:	66 89 c1             	mov    %ax,%cx
  101350:	8a 55 14             	mov    0x14(%ebp),%dl
  101353:	8b 45 0c             	mov    0xc(%ebp),%eax
  101356:	8b 75 08             	mov    0x8(%ebp),%esi
  101359:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10135c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10135f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  101363:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101366:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101369:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  10136c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  101370:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101373:	89 04 f5 18 b0 10 00 	mov    %eax,0x10b018(,%esi,8)
  10137a:	c7 04 f5 1c b0 10 00 	movl   $0x0,0x10b01c(,%esi,8)
  101381:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  101385:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  101389:	c1 e0 10             	shl    $0x10,%eax
  10138c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10138f:	8b 3c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%edi
  101396:	8b 1c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%ebx
  10139d:	09 c3                	or     %eax,%ebx
  10139f:	89 3c f5 1c b0 10 00 	mov    %edi,0x10b01c(,%esi,8)
  1013a6:	89 1c f5 18 b0 10 00 	mov    %ebx,0x10b018(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  1013ad:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  1013b1:	c1 e0 08             	shl    $0x8,%eax
  1013b4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1013b7:	8b 3c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%edi
  1013be:	8b 1c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%ebx
  1013c5:	09 c3                	or     %eax,%ebx
  1013c7:	89 3c f5 18 b0 10 00 	mov    %edi,0x10b018(,%esi,8)
  1013ce:	89 1c f5 1c b0 10 00 	mov    %ebx,0x10b01c(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  1013d5:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  1013d9:	c1 e0 10             	shl    $0x10,%eax
  1013dc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1013df:	8b 3c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%edi
  1013e6:	8b 1c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%ebx
  1013ed:	09 c3                	or     %eax,%ebx
  1013ef:	89 3c f5 18 b0 10 00 	mov    %edi,0x10b018(,%esi,8)
  1013f6:	89 1c f5 1c b0 10 00 	mov    %ebx,0x10b01c(,%esi,8)
}
  1013fd:	83 c4 10             	add    $0x10,%esp
  101400:	5e                   	pop    %esi
  101401:	5f                   	pop    %edi
  101402:	5b                   	pop    %ebx
  101403:	5d                   	pop    %ebp
  101404:	c3                   	ret    
  101405:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10140c:	00 00 00 00 

00101410 <init_idt>:

void init_idt() {
  101410:	55                   	push   %ebp
  101411:	89 e5                	mov    %esp,%ebp
	struct {
  101413:	56                   	push   %esi
  101414:	81 ec 34 02 00 00    	sub    $0x234,%esp
  10141a:	a1 00 50 10 00       	mov    0x105000,%eax
  10141f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101422:	66 8b 0d 04 50 10 00 	mov    0x105004,%cx
  101429:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};

	int i = 0;
  10142d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  101434:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10143b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  101442:	0f 8d 1e 00 00 00    	jge    101466 <init_idt+0x56>
		handler_set[i] = 0;
  101448:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10144b:	c7 04 85 18 b2 10 00 	movl   $0x0,0x10b218(,%eax,4)
  101452:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  101456:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101459:	05 01 00 00 00       	add    $0x1,%eax
  10145e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101461:	e9 d5 ff ff ff       	jmp    10143b <init_idt+0x2b>
  101466:	b8 20 00 00 00       	mov    $0x20,%eax
  10146b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  101470:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101477:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10147e:	00 
  10147f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101482:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  101485:	e8 86 0b 00 00       	call   102010 <outb>
  10148a:	b8 21 00 00 00       	mov    $0x21,%eax
  10148f:	b9 20 00 00 00       	mov    $0x20,%ecx
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  101494:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10149b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1014a2:	00 
  1014a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1014a6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1014a9:	e8 62 0b 00 00       	call   102010 <outb>
  1014ae:	b8 21 00 00 00       	mov    $0x21,%eax
  1014b3:	b9 04 00 00 00       	mov    $0x4,%ecx
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  1014b8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1014bf:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1014c6:	00 
  1014c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1014ca:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1014cd:	e8 3e 0b 00 00       	call   102010 <outb>
  1014d2:	b8 21 00 00 00       	mov    $0x21,%eax
  1014d7:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0x21, 0x01); // ICW 4
  1014dc:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1014e3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1014ea:	00 
  1014eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1014ee:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  1014f1:	e8 1a 0b 00 00       	call   102010 <outb>
  1014f6:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1014fb:	b9 11 00 00 00       	mov    $0x11,%ecx

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  101500:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101507:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10150e:	00 
  10150f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101512:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101515:	e8 f6 0a 00 00       	call   102010 <outb>
  10151a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  10151f:	b9 28 00 00 00       	mov    $0x28,%ecx
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101524:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10152b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101532:	00 
  101533:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101536:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101539:	e8 d2 0a 00 00       	call   102010 <outb>
  10153e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101543:	b9 02 00 00 00       	mov    $0x2,%ecx
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101548:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10154f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101556:	00 
  101557:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10155a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10155d:	e8 ae 0a 00 00       	call   102010 <outb>
  101562:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101567:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0xa1, 0x01); // ICW 4
  10156c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101573:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10157a:	00 
  10157b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10157e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  101581:	e8 8a 0a 00 00       	call   102010 <outb>
  101586:	b8 20 00 00 00       	mov    $0x20,%eax
  10158b:	b9 00 00 00 00       	mov    $0x0,%ecx

  outb(0x20, 0x0);
  101590:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101597:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10159e:	00 
  10159f:	89 45 a8             	mov    %eax,-0x58(%ebp)
  1015a2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  1015a5:	e8 66 0a 00 00       	call   102010 <outb>
  1015aa:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1015af:	b9 00 00 00 00       	mov    $0x0,%ecx
  outb(0xa0, 0x0);
  1015b4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1015bb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1015c2:	00 
  1015c3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1015c6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1015c9:	e8 42 0a 00 00       	call   102010 <outb>
  1015ce:	b8 00 00 00 00       	mov    $0x0,%eax
  1015d3:	8d 0d b0 2c 10 00    	lea    0x102cb0,%ecx
  1015d9:	ba 08 00 00 00       	mov    $0x8,%edx
  1015de:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015e3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1015ea:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015ee:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015f5:	00 
  1015f6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015fd:	00 
  1015fe:	89 45 98             	mov    %eax,-0x68(%ebp)
  101601:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101604:	89 55 90             	mov    %edx,-0x70(%ebp)
  101607:	e8 34 fd ff ff       	call   101340 <idt_set_entry>
  10160c:	b8 01 00 00 00       	mov    $0x1,%eax
  101611:	8d 0d b9 2c 10 00    	lea    0x102cb9,%ecx
  101617:	ba 08 00 00 00       	mov    $0x8,%edx
  10161c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101621:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101628:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10162c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101633:	00 
  101634:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10163b:	00 
  10163c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10163f:	89 75 88             	mov    %esi,-0x78(%ebp)
  101642:	89 55 84             	mov    %edx,-0x7c(%ebp)
  101645:	e8 f6 fc ff ff       	call   101340 <idt_set_entry>
  10164a:	b8 02 00 00 00       	mov    $0x2,%eax
  10164f:	8d 0d c2 2c 10 00    	lea    0x102cc2,%ecx
  101655:	ba 08 00 00 00       	mov    $0x8,%edx
  10165a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10165f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101666:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10166a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101671:	00 
  101672:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101679:	00 
  10167a:	89 45 80             	mov    %eax,-0x80(%ebp)
  10167d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  101683:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  101689:	e8 b2 fc ff ff       	call   101340 <idt_set_entry>
  10168e:	b8 03 00 00 00       	mov    $0x3,%eax
  101693:	8d 0d cb 2c 10 00    	lea    0x102ccb,%ecx
  101699:	ba 08 00 00 00       	mov    $0x8,%edx
  10169e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016a3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1016aa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016ae:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016b5:	00 
  1016b6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016bd:	00 
  1016be:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  1016c4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  1016ca:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  1016d0:	e8 6b fc ff ff       	call   101340 <idt_set_entry>
  1016d5:	b8 04 00 00 00       	mov    $0x4,%eax
  1016da:	8d 0d d4 2c 10 00    	lea    0x102cd4,%ecx
  1016e0:	ba 08 00 00 00       	mov    $0x8,%edx
  1016e5:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016ea:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1016f1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016f5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016fc:	00 
  1016fd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101704:	00 
  101705:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10170b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101711:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101717:	e8 24 fc ff ff       	call   101340 <idt_set_entry>
  10171c:	b8 05 00 00 00       	mov    $0x5,%eax
  101721:	8d 0d dd 2c 10 00    	lea    0x102cdd,%ecx
  101727:	ba 08 00 00 00       	mov    $0x8,%edx
  10172c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101731:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101738:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10173c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101743:	00 
  101744:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10174b:	00 
  10174c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101752:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101758:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10175e:	e8 dd fb ff ff       	call   101340 <idt_set_entry>
  101763:	b8 06 00 00 00       	mov    $0x6,%eax
  101768:	8d 0d e6 2c 10 00    	lea    0x102ce6,%ecx
  10176e:	ba 08 00 00 00       	mov    $0x8,%edx
  101773:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101778:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10177f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101783:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10178a:	00 
  10178b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101792:	00 
  101793:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  101799:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  10179f:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1017a5:	e8 96 fb ff ff       	call   101340 <idt_set_entry>
  1017aa:	b8 07 00 00 00       	mov    $0x7,%eax
  1017af:	8d 0d ef 2c 10 00    	lea    0x102cef,%ecx
  1017b5:	ba 08 00 00 00       	mov    $0x8,%edx
  1017ba:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017bf:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1017c6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017ca:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017d1:	00 
  1017d2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017d9:	00 
  1017da:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  1017e0:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  1017e6:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  1017ec:	e8 4f fb ff ff       	call   101340 <idt_set_entry>
  1017f1:	b8 08 00 00 00       	mov    $0x8,%eax
  1017f6:	8d 0d f8 2c 10 00    	lea    0x102cf8,%ecx
  1017fc:	ba 8e 00 00 00       	mov    $0x8e,%edx
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101801:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101808:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10180c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101813:	00 
  101814:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10181b:	00 
  10181c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101822:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101828:	e8 13 fb ff ff       	call   101340 <idt_set_entry>
  10182d:	b8 09 00 00 00       	mov    $0x9,%eax
  101832:	8d 0d ff 2c 10 00    	lea    0x102cff,%ecx
  101838:	ba 08 00 00 00       	mov    $0x8,%edx
  10183d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101842:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101849:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10184d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101854:	00 
  101855:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10185c:	00 
  10185d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101863:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101869:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10186f:	e8 cc fa ff ff       	call   101340 <idt_set_entry>
  101874:	b8 0a 00 00 00       	mov    $0xa,%eax
  101879:	8d 0d 08 2d 10 00    	lea    0x102d08,%ecx
  10187f:	ba 08 00 00 00       	mov    $0x8,%edx
  101884:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101889:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  101890:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101894:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10189b:	00 
  10189c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018a3:	00 
  1018a4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1018aa:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1018b0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1018b6:	e8 85 fa ff ff       	call   101340 <idt_set_entry>
  1018bb:	b8 0b 00 00 00       	mov    $0xb,%eax
  1018c0:	8d 0d 0f 2d 10 00    	lea    0x102d0f,%ecx
  1018c6:	ba 08 00 00 00       	mov    $0x8,%edx
  1018cb:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018d0:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  1018d7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018db:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018e2:	00 
  1018e3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018ea:	00 
  1018eb:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  1018f1:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  1018f7:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  1018fd:	e8 3e fa ff ff       	call   101340 <idt_set_entry>
  101902:	b8 0c 00 00 00       	mov    $0xc,%eax
  101907:	8d 0d 16 2d 10 00    	lea    0x102d16,%ecx
  10190d:	ba 08 00 00 00       	mov    $0x8,%edx
  101912:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101917:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10191e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101922:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101929:	00 
  10192a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101931:	00 
  101932:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101938:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10193e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101944:	e8 f7 f9 ff ff       	call   101340 <idt_set_entry>
  101949:	b8 0d 00 00 00       	mov    $0xd,%eax
  10194e:	8d 0d 1d 2d 10 00    	lea    0x102d1d,%ecx
  101954:	ba 08 00 00 00       	mov    $0x8,%edx
  101959:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10195e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101965:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101969:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101970:	00 
  101971:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101978:	00 
  101979:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10197f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  101985:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  10198b:	e8 b0 f9 ff ff       	call   101340 <idt_set_entry>
  101990:	b8 0e 00 00 00       	mov    $0xe,%eax
  101995:	8d 0d 24 2d 10 00    	lea    0x102d24,%ecx
  10199b:	ba 08 00 00 00       	mov    $0x8,%edx
  1019a0:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019a5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1019ac:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019b0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019b7:	00 
  1019b8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019bf:	00 
  1019c0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1019c6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1019cc:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  1019d2:	e8 69 f9 ff ff       	call   101340 <idt_set_entry>
  1019d7:	b8 0f 00 00 00       	mov    $0xf,%eax
  1019dc:	8d 0d 28 2d 10 00    	lea    0x102d28,%ecx
  1019e2:	ba 08 00 00 00       	mov    $0x8,%edx
  1019e7:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019ec:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  1019f3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019f7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019fe:	00 
  1019ff:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a06:	00 
  101a07:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  101a0d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101a13:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101a19:	e8 22 f9 ff ff       	call   101340 <idt_set_entry>
  101a1e:	b8 10 00 00 00       	mov    $0x10,%eax
  101a23:	8d 0d 2e 2d 10 00    	lea    0x102d2e,%ecx
  101a29:	ba 08 00 00 00       	mov    $0x8,%edx
  101a2e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a33:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  101a3a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a3e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a45:	00 
  101a46:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a4d:	00 
  101a4e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101a54:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  101a5a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101a60:	e8 db f8 ff ff       	call   101340 <idt_set_entry>
  101a65:	b8 11 00 00 00       	mov    $0x11,%eax
  101a6a:	8d 0d 34 2d 10 00    	lea    0x102d34,%ecx
  101a70:	ba 08 00 00 00       	mov    $0x8,%edx
  101a75:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a7a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101a81:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a85:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a8c:	00 
  101a8d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a94:	00 
  101a95:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  101a9b:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  101aa1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  101aa7:	e8 94 f8 ff ff       	call   101340 <idt_set_entry>
  101aac:	b8 12 00 00 00       	mov    $0x12,%eax
  101ab1:	8d 0d 38 2d 10 00    	lea    0x102d38,%ecx
  101ab7:	ba 08 00 00 00       	mov    $0x8,%edx
  101abc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ac1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  101ac8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101acc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ad3:	00 
  101ad4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101adb:	00 
  101adc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101ae2:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101ae8:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  101aee:	e8 4d f8 ff ff       	call   101340 <idt_set_entry>
  101af3:	b8 20 00 00 00       	mov    $0x20,%eax
  101af8:	8d 0d 3e 2d 10 00    	lea    0x102d3e,%ecx
  101afe:	ba 08 00 00 00       	mov    $0x8,%edx
  101b03:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b08:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101b0f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b13:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b1a:	00 
  101b1b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b22:	00 
  101b23:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101b29:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  101b2f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101b35:	e8 06 f8 ff ff       	call   101340 <idt_set_entry>
  101b3a:	b8 21 00 00 00       	mov    $0x21,%eax
  101b3f:	8d 0d 44 2d 10 00    	lea    0x102d44,%ecx
  101b45:	ba 08 00 00 00       	mov    $0x8,%edx
  101b4a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b4f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101b56:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b5a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b61:	00 
  101b62:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b69:	00 
  101b6a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  101b70:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  101b76:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  101b7c:	e8 bf f7 ff ff       	call   101340 <idt_set_entry>
  101b81:	b8 22 00 00 00       	mov    $0x22,%eax
  101b86:	8d 0d 4a 2d 10 00    	lea    0x102d4a,%ecx
  101b8c:	ba 08 00 00 00       	mov    $0x8,%edx
  101b91:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(34, intr_stub_34, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b96:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  101b9d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ba1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ba8:	00 
  101ba9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bb0:	00 
  101bb1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  101bb7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  101bbd:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  101bc3:	e8 78 f7 ff ff       	call   101340 <idt_set_entry>
  101bc8:	b8 23 00 00 00       	mov    $0x23,%eax
  101bcd:	8d 0d 50 2d 10 00    	lea    0x102d50,%ecx
  101bd3:	ba 08 00 00 00       	mov    $0x8,%edx
  101bd8:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(35, intr_stub_35, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101bdd:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101be4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101be8:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bef:	00 
  101bf0:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bf7:	00 
  101bf8:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101bfe:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101c04:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101c0a:	e8 31 f7 ff ff       	call   101340 <idt_set_entry>
  101c0f:	b8 24 00 00 00       	mov    $0x24,%eax
  101c14:	8d 0d 56 2d 10 00    	lea    0x102d56,%ecx
  101c1a:	ba 08 00 00 00       	mov    $0x8,%edx
  101c1f:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(36, intr_stub_36, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c24:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101c2b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c2f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c36:	00 
  101c37:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c3e:	00 
  101c3f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101c45:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101c4b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101c51:	e8 ea f6 ff ff       	call   101340 <idt_set_entry>
  101c56:	b8 25 00 00 00       	mov    $0x25,%eax
  101c5b:	8d 0d 5c 2d 10 00    	lea    0x102d5c,%ecx
  101c61:	ba 08 00 00 00       	mov    $0x8,%edx
  101c66:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(37, intr_stub_37, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c6b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101c72:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c76:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c7d:	00 
  101c7e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c85:	00 
  101c86:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101c8c:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101c92:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101c98:	e8 a3 f6 ff ff       	call   101340 <idt_set_entry>
  101c9d:	b8 26 00 00 00       	mov    $0x26,%eax
  101ca2:	8d 0d 62 2d 10 00    	lea    0x102d62,%ecx
  101ca8:	ba 08 00 00 00       	mov    $0x8,%edx
  101cad:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(38, intr_stub_38, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101cb2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101cb9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cbd:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101cc4:	00 
  101cc5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ccc:	00 
  101ccd:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101cd3:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101cd9:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101cdf:	e8 5c f6 ff ff       	call   101340 <idt_set_entry>
  101ce4:	b8 27 00 00 00       	mov    $0x27,%eax
  101ce9:	8d 0d 68 2d 10 00    	lea    0x102d68,%ecx
  101cef:	ba 08 00 00 00       	mov    $0x8,%edx
  101cf4:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(39, intr_stub_39, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101cf9:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101d00:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d04:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d0b:	00 
  101d0c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d13:	00 
  101d14:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101d1a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101d20:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101d26:	e8 15 f6 ff ff       	call   101340 <idt_set_entry>
  101d2b:	b8 28 00 00 00       	mov    $0x28,%eax
  101d30:	8d 0d 6e 2d 10 00    	lea    0x102d6e,%ecx
  101d36:	ba 08 00 00 00       	mov    $0x8,%edx
  101d3b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(40, intr_stub_40, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d40:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101d47:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d4b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d52:	00 
  101d53:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d5a:	00 
  101d5b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101d61:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101d67:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101d6d:	e8 ce f5 ff ff       	call   101340 <idt_set_entry>
  101d72:	b8 29 00 00 00       	mov    $0x29,%eax
  101d77:	8d 0d 74 2d 10 00    	lea    0x102d74,%ecx
  101d7d:	ba 08 00 00 00       	mov    $0x8,%edx
  101d82:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(41, intr_stub_41, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d87:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101d8e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d92:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d99:	00 
  101d9a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101da1:	00 
  101da2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101da8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101dae:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101db4:	e8 87 f5 ff ff       	call   101340 <idt_set_entry>
  101db9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101dbe:	8d 0d 7a 2d 10 00    	lea    0x102d7a,%ecx
  101dc4:	ba 08 00 00 00       	mov    $0x8,%edx
  101dc9:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(42, intr_stub_42, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101dce:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101dd5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101dd9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101de0:	00 
  101de1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101de8:	00 
  101de9:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101def:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101df5:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101dfb:	e8 40 f5 ff ff       	call   101340 <idt_set_entry>
  101e00:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101e05:	8d 0d 80 2d 10 00    	lea    0x102d80,%ecx
  101e0b:	ba 08 00 00 00       	mov    $0x8,%edx
  101e10:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(43, intr_stub_43, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e15:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101e1c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e20:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e27:	00 
  101e28:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e2f:	00 
  101e30:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101e36:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101e3c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101e42:	e8 f9 f4 ff ff       	call   101340 <idt_set_entry>
  101e47:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101e4c:	8d 0d 86 2d 10 00    	lea    0x102d86,%ecx
  101e52:	ba 08 00 00 00       	mov    $0x8,%edx
  101e57:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(44, intr_stub_44, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e5c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101e63:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e67:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e6e:	00 
  101e6f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e76:	00 
  101e77:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101e7d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101e83:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101e89:	e8 b2 f4 ff ff       	call   101340 <idt_set_entry>
  101e8e:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101e93:	8d 0d 8c 2d 10 00    	lea    0x102d8c,%ecx
  101e99:	ba 08 00 00 00       	mov    $0x8,%edx
  101e9e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(45, intr_stub_45, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ea3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101eaa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101eae:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101eb5:	00 
  101eb6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ebd:	00 
  101ebe:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  101ec4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  101eca:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101ed0:	e8 6b f4 ff ff       	call   101340 <idt_set_entry>
  101ed5:	b8 2e 00 00 00       	mov    $0x2e,%eax
  101eda:	8d 0d 92 2d 10 00    	lea    0x102d92,%ecx
  101ee0:	ba 08 00 00 00       	mov    $0x8,%edx
  101ee5:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(46, intr_stub_46, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101eea:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101ef1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ef5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101efc:	00 
  101efd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f04:	00 
  101f05:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  101f0b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101f11:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101f17:	e8 24 f4 ff ff       	call   101340 <idt_set_entry>
  101f1c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101f21:	8d 0d 98 2d 10 00    	lea    0x102d98,%ecx
  101f27:	ba 08 00 00 00       	mov    $0x8,%edx
  101f2c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(47, intr_stub_47, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101f31:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101f38:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f3c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f43:	00 
  101f44:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f4b:	00 
  101f4c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101f52:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101f58:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  101f5e:	e8 dd f3 ff ff       	call   101340 <idt_set_entry>
  101f63:	b8 30 00 00 00       	mov    $0x30,%eax
  101f68:	8d 0d 9e 2d 10 00    	lea    0x102d9e,%ecx
  101f6e:	ba 08 00 00 00       	mov    $0x8,%edx
  101f73:	be ee 00 00 00       	mov    $0xee,%esi

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101f78:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101f7f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f83:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f8a:	00 
  101f8b:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101f92:	00 
  101f93:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  101f99:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  101f9f:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  101fa5:	e8 96 f3 ff ff       	call   101340 <idt_set_entry>
  101faa:	b8 05 00 00 00       	mov    $0x5,%eax
  101faf:	8d 0d 08 41 10 00    	lea    0x104108,%ecx
  101fb5:	ba 80 00 00 00       	mov    $0x80,%edx
  101fba:	be e9 00 00 00       	mov    $0xe9,%esi

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101fbf:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101fc6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101fca:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101fd1:	00 
  101fd2:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101fd9:	00 
  101fda:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101fe0:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101fe6:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  101fec:	e8 2f 0e 00 00       	call   102e20 <set_gdt_entry>
  101ff1:	b8 28 00 00 00       	mov    $0x28,%eax

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101ff6:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101ff9:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  101ffd:	fb                   	sti    
}
  101ffe:	81 c4 34 02 00 00    	add    $0x234,%esp
  102004:	5e                   	pop    %esi
  102005:	5d                   	pop    %ebp
  102006:	c3                   	ret    
  102007:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10200e:	00 00 

00102010 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  102010:	55                   	push   %ebp
  102011:	89 e5                	mov    %esp,%ebp
  102013:	50                   	push   %eax
  102014:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  102018:	66 89 c1             	mov    %ax,%cx
  10201b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10201e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  102022:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  102025:	8a 45 fd             	mov    -0x3(%ebp),%al
  102028:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10202c:	ee                   	out    %al,(%dx)
}
  10202d:	83 c4 04             	add    $0x4,%esp
  102030:	5d                   	pop    %ebp
  102031:	c3                   	ret    
  102032:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102039:	1f 84 00 00 00 00 00 

00102040 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  102040:	55                   	push   %ebp
  102041:	89 e5                	mov    %esp,%ebp
  102043:	83 ec 08             	sub    $0x8,%esp
  102046:	8b 45 0c             	mov    0xc(%ebp),%eax
  102049:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10204c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10204f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  102052:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102055:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102058:	89 04 8d 18 b3 10 00 	mov    %eax,0x10b318(,%ecx,4)
	handler_set[i] = 1;
  10205f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102062:	c7 04 85 18 b2 10 00 	movl   $0x1,0x10b218(,%eax,4)
  102069:	01 00 00 00 
}
  10206d:	83 c4 08             	add    $0x8,%esp
  102070:	5d                   	pop    %ebp
  102071:	c3                   	ret    
  102072:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102079:	1f 84 00 00 00 00 00 

00102080 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  102080:	55                   	push   %ebp
  102081:	89 e5                	mov    %esp,%ebp
  102083:	83 ec 28             	sub    $0x28,%esp
  102086:	8b 45 08             	mov    0x8(%ebp),%eax
  102089:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct cpu_state* new_cpu = cpu;
  10208c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10208f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if (cpu->intr <= 0x1f) {
  102092:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102095:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  10209c:	0f 87 3d 00 00 00    	ja     1020df <handle_interrupt+0x5f>
    if(!scheduling_enabled()) {
  1020a2:	e8 f9 0f 00 00       	call   1030a0 <scheduling_enabled>
  1020a7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1020ac:	0f 85 1a 00 00 00    	jne    1020cc <handle_interrupt+0x4c>
  1020b2:	8d 05 8a 51 10 00    	lea    0x10518a,%eax
      show_cod(cpu, "Kernel PANIC!");
  1020b8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1020bb:	89 0c 24             	mov    %ecx,(%esp)
  1020be:	89 44 24 04          	mov    %eax,0x4(%esp)
  1020c2:	e8 29 01 00 00       	call   1021f0 <show_cod>
    }
  1020c7:	e9 0e 00 00 00       	jmp    1020da <handle_interrupt+0x5a>
    else
    {
      schedule_exception(cpu);
  1020cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020cf:	89 04 24             	mov    %eax,(%esp)
  1020d2:	e8 d9 0f 00 00       	call   1030b0 <schedule_exception>
  1020d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  1020da:	e9 fc 00 00 00       	jmp    1021db <handle_interrupt+0x15b>
  1020df:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020e2:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  1020e9:	0f 82 a7 00 00 00    	jb     102196 <handle_interrupt+0x116>
  1020ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020f2:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  1020f9:	0f 87 97 00 00 00    	ja     102196 <handle_interrupt+0x116>
    if (cpu->intr >= 0x28) {
  1020ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102102:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  102109:	0f 82 24 00 00 00    	jb     102133 <handle_interrupt+0xb3>
  10210f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  102114:	b9 20 00 00 00       	mov    $0x20,%ecx
      outb(0xa0, 0x20);
  102119:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  102120:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102127:	00 
  102128:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10212b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10212e:	e8 dd fe ff ff       	call   102010 <outb>
    }
    if (cpu->intr == 0x20) {
  102133:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102136:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  10213d:	0f 85 0e 00 00 00    	jne    102151 <handle_interrupt+0xd1>
      new_cpu = schedule(cpu);
  102143:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102146:	89 04 24             	mov    %eax,(%esp)
  102149:	e8 e2 13 00 00       	call   103530 <schedule>
  10214e:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102151:	b8 20 00 00 00       	mov    $0x20,%eax
    }
    outb(0x20, 0x20);
  102156:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10215d:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102164:	00 
  102165:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102168:	e8 a3 fe ff ff       	call   102010 <outb>
		if(handler_set[cpu->intr]) {
  10216d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102170:	8b 40 1c             	mov    0x1c(%eax),%eax
  102173:	81 3c 85 18 b2 10 00 	cmpl   $0x0,0x10b218(,%eax,4)
  10217a:	00 00 00 00 
  10217e:	0f 84 0d 00 00 00    	je     102191 <handle_interrupt+0x111>
			handlers[cpu->intr]();
  102184:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102187:	8b 40 1c             	mov    0x1c(%eax),%eax
  10218a:	ff 14 85 18 b3 10 00 	call   *0x10b318(,%eax,4)
		}
  } else if (cpu->intr == 0x30) {
  102191:	e9 40 00 00 00       	jmp    1021d6 <handle_interrupt+0x156>
  102196:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102199:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  1021a0:	0f 85 13 00 00 00    	jne    1021b9 <handle_interrupt+0x139>
		new_cpu = syscall(new_cpu);
  1021a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021a9:	89 04 24             	mov    %eax,(%esp)
  1021ac:	e8 4f 07 00 00       	call   102900 <syscall>
  1021b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
  } else {
  1021b4:	e9 18 00 00 00       	jmp    1021d1 <handle_interrupt+0x151>
  1021b9:	8d 05 98 51 10 00    	lea    0x105198,%eax
    kprintf("Unbekannter Interrupt\n");
  1021bf:	89 04 24             	mov    %eax,(%esp)
  1021c2:	e8 09 02 00 00       	call   1023d0 <kprintf>
  1021c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  1021ca:	fa                   	cli    
  1021cb:	f4                   	hlt    
    }
  1021cc:	e9 f9 ff ff ff       	jmp    1021ca <handle_interrupt+0x14a>
  1021d1:	e9 00 00 00 00       	jmp    1021d6 <handle_interrupt+0x156>
  1021d6:	e9 00 00 00 00       	jmp    1021db <handle_interrupt+0x15b>
  }  

  return new_cpu;
  1021db:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021de:	83 c4 28             	add    $0x28,%esp
  1021e1:	5d                   	pop    %ebp
  1021e2:	c3                   	ret    
  1021e3:	66 90                	xchg   %ax,%ax
  1021e5:	66 90                	xchg   %ax,%ax
  1021e7:	66 90                	xchg   %ax,%ax
  1021e9:	66 90                	xchg   %ax,%ax
  1021eb:	66 90                	xchg   %ax,%ax
  1021ed:	66 90                	xchg   %ax,%ax
  1021ef:	90                   	nop

001021f0 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu, char* fstr) {
  1021f0:	55                   	push   %ebp
  1021f1:	89 e5                	mov    %esp,%ebp
  1021f3:	56                   	push   %esi
  1021f4:	83 ec 24             	sub    $0x24,%esp
  1021f7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1021fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1021fd:	ba 04 00 00 00       	mov    $0x4,%edx
  102202:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102205:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kprintf ("          '''  \\   `-._.'`---^_))) \n");
  kprintf ("                `-._ )))       ``` \n");
  kprintf ("                     ```            \n");
  #endif
  
  setclr(0x04);
  102208:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10220f:	89 55 f0             	mov    %edx,-0x10(%ebp)
  102212:	e8 99 01 00 00       	call   1023b0 <setclr>
  kprintf(fstr);
  102217:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10221a:	89 04 24             	mov    %eax,(%esp)
  10221d:	e8 ae 01 00 00       	call   1023d0 <kprintf>
  102222:	8d 0d af 51 10 00    	lea    0x1051af,%ecx
  kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  102228:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10222b:	8b 52 1c             	mov    0x1c(%edx),%edx
  10222e:	8b 75 f8             	mov    -0x8(%ebp),%esi
  102231:	8b 76 20             	mov    0x20(%esi),%esi
  102234:	89 0c 24             	mov    %ecx,(%esp)
  102237:	89 54 24 04          	mov    %edx,0x4(%esp)
  10223b:	89 74 24 08          	mov    %esi,0x8(%esp)
  10223f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102242:	e8 89 01 00 00       	call   1023d0 <kprintf>
  show_dump(cpu);
  102247:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10224a:	89 0c 24             	mov    %ecx,(%esp)
  10224d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102250:	e8 0b 00 00 00       	call   102260 <show_dump>

  while(1) {
    asm volatile("cli; hlt");
  102255:	fa                   	cli    
  102256:	f4                   	hlt    
  }
  102257:	e9 f9 ff ff ff       	jmp    102255 <show_cod+0x65>
  10225c:	0f 1f 40 00          	nopl   0x0(%eax)

00102260 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  102260:	55                   	push   %ebp
  102261:	89 e5                	mov    %esp,%ebp
  102263:	53                   	push   %ebx
  102264:	57                   	push   %edi
  102265:	56                   	push   %esi
  102266:	83 ec 2c             	sub    $0x2c,%esp
  102269:	8b 45 08             	mov    0x8(%ebp),%eax
  10226c:	8d 0d d4 51 10 00    	lea    0x1051d4,%ecx
  102272:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  102275:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102278:	8b 00                	mov    (%eax),%eax
  10227a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10227d:	8b 52 04             	mov    0x4(%edx),%edx
  102280:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102283:	8b 76 08             	mov    0x8(%esi),%esi
  102286:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102289:	8b 7f 0c             	mov    0xc(%edi),%edi
  10228c:	89 0c 24             	mov    %ecx,(%esp)
  10228f:	89 44 24 04          	mov    %eax,0x4(%esp)
  102293:	89 54 24 08          	mov    %edx,0x8(%esp)
  102297:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10229b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10229f:	e8 2c 01 00 00       	call   1023d0 <kprintf>
  1022a4:	8d 0d f5 51 10 00    	lea    0x1051f5,%ecx
  kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  1022aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1022ad:	8b 52 10             	mov    0x10(%edx),%edx
  1022b0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1022b3:	8b 76 14             	mov    0x14(%esi),%esi
  1022b6:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1022b9:	8b 7f 18             	mov    0x18(%edi),%edi
  1022bc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1022bf:	8b 5b 24             	mov    0x24(%ebx),%ebx
  1022c2:	89 0c 24             	mov    %ecx,(%esp)
  1022c5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022c9:	89 74 24 08          	mov    %esi,0x8(%esp)
  1022cd:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1022d1:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1022d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1022d8:	e8 f3 00 00 00       	call   1023d0 <kprintf>
  1022dd:	8d 0d 16 52 10 00    	lea    0x105216,%ecx
  kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  1022e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1022e6:	8b 52 28             	mov    0x28(%edx),%edx
  1022e9:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1022ec:	8b 76 2c             	mov    0x2c(%esi),%esi
  1022ef:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1022f2:	8b 7f 30             	mov    0x30(%edi),%edi
  1022f5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1022f8:	8b 5b 34             	mov    0x34(%ebx),%ebx
  1022fb:	89 0c 24             	mov    %ecx,(%esp)
  1022fe:	89 54 24 04          	mov    %edx,0x4(%esp)
  102302:	89 74 24 08          	mov    %esi,0x8(%esp)
  102306:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10230a:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  10230e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102311:	e8 ba 00 00 00       	call   1023d0 <kprintf>
  102316:	8d 0d 38 52 10 00    	lea    0x105238,%ecx

  uint32_t cr2 = 0;
  10231c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  asm volatile("mov %%cr2, %0" : "=r" (cr2));
  102323:	0f 20 d2             	mov    %cr2,%edx
  102326:	89 55 ec             	mov    %edx,-0x14(%ebp)

  kprintf("CR2: %x \n", cr2);
  102329:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10232c:	89 0c 24             	mov    %ecx,(%esp)
  10232f:	89 54 24 04          	mov    %edx,0x4(%esp)
  102333:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102336:	e8 95 00 00 00       	call   1023d0 <kprintf>
}
  10233b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10233e:	83 c4 2c             	add    $0x2c,%esp
  102341:	5e                   	pop    %esi
  102342:	5f                   	pop    %edi
  102343:	5b                   	pop    %ebx
  102344:	5d                   	pop    %ebp
  102345:	c3                   	ret    
  102346:	66 90                	xchg   %ax,%ax
  102348:	66 90                	xchg   %ax,%ax
  10234a:	66 90                	xchg   %ax,%ax
  10234c:	66 90                	xchg   %ax,%ax
  10234e:	66 90                	xchg   %ax,%ax

00102350 <clrscr>:
    } while (x);
    kputs(p);
}

void clrscr(void)
{
  102350:	55                   	push   %ebp
  102351:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102353:	50                   	push   %eax
  102354:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10235b:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  102362:	0f 8d 1d 00 00 00    	jge    102385 <clrscr+0x35>
        video[i] = 0;
  102368:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10236b:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102371:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102375:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102378:	05 01 00 00 00       	add    $0x1,%eax
  10237d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102380:	e9 d6 ff ff ff       	jmp    10235b <clrscr+0xb>
        video[i] = 0;
    }
    
    color = 0x07;
  102385:	c6 05 8c 41 10 00 07 	movb   $0x7,0x10418c

    x = y = 0;
  10238c:	c7 05 18 b4 10 00 00 	movl   $0x0,0x10b418
  102393:	00 00 00 
  102396:	c7 05 1c b4 10 00 00 	movl   $0x0,0x10b41c
  10239d:	00 00 00 
}
  1023a0:	83 c4 04             	add    $0x4,%esp
  1023a3:	5d                   	pop    %ebp
  1023a4:	c3                   	ret    
  1023a5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1023ac:	00 00 00 00 

001023b0 <setclr>:

void setclr(char clr) {
  1023b0:	55                   	push   %ebp
  1023b1:	89 e5                	mov    %esp,%ebp
  1023b3:	50                   	push   %eax
  1023b4:	8a 45 08             	mov    0x8(%ebp),%al
  1023b7:	88 45 ff             	mov    %al,-0x1(%ebp)
  color = clr;
  1023ba:	8a 45 ff             	mov    -0x1(%ebp),%al
  1023bd:	a2 8c 41 10 00       	mov    %al,0x10418c
}
  1023c2:	83 c4 04             	add    $0x4,%esp
  1023c5:	5d                   	pop    %ebp
  1023c6:	c3                   	ret    
  1023c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1023ce:	00 00 

001023d0 <kprintf>:

int kprintf(const char* fmt, ...)
{
  1023d0:	55                   	push   %ebp
  1023d1:	89 e5                	mov    %esp,%ebp
  1023d3:	83 ec 58             	sub    $0x58,%esp
  1023d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1023d9:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  1023dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1023df:	8d 45 0c             	lea    0xc(%ebp),%eax
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  1023e2:	89 01                	mov    %eax,(%ecx)
  kprintf_res = 0;
  1023e4:	c7 05 20 b4 10 00 00 	movl   $0x0,0x10b420
  1023eb:	00 00 00 
  while (*fmt) {
  1023ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023f1:	80 38 00             	cmpb   $0x0,(%eax)
  1023f4:	0f 84 dd 01 00 00    	je     1025d7 <kprintf+0x207>
    if (*fmt == '%') {
  1023fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023fd:	0f be 00             	movsbl (%eax),%eax
  102400:	3d 25 00 00 00       	cmp    $0x25,%eax
  102405:	0f 85 ae 01 00 00    	jne    1025b9 <kprintf+0x1e9>
      fmt++;
  10240b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10240e:	89 c1                	mov    %eax,%ecx
  102410:	41                   	inc    %ecx
  102411:	89 4d fc             	mov    %ecx,-0x4(%ebp)
      switch (*fmt) {
  102414:	0f be 40 01          	movsbl 0x1(%eax),%eax
  102418:	89 c1                	mov    %eax,%ecx
  10241a:	83 e9 24             	sub    $0x24,%ecx
  10241d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102420:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  102423:	0f 8f 15 00 00 00    	jg     10243e <kprintf+0x6e>
  102429:	e9 00 00 00 00       	jmp    10242e <kprintf+0x5e>
  10242e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102431:	85 c0                	test   %eax,%eax
  102433:	0f 84 54 01 00 00    	je     10258d <kprintf+0x1bd>
  102439:	e9 54 01 00 00       	jmp    102592 <kprintf+0x1c2>
  10243e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102441:	83 e8 62             	sub    $0x62,%eax
  102444:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102447:	0f 8f 19 00 00 00    	jg     102466 <kprintf+0x96>
  10244d:	e9 00 00 00 00       	jmp    102452 <kprintf+0x82>
  102452:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102455:	83 e8 25             	sub    $0x25,%eax
  102458:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10245b:	0f 84 13 01 00 00    	je     102574 <kprintf+0x1a4>
  102461:	e9 2c 01 00 00       	jmp    102592 <kprintf+0x1c2>
  102466:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102469:	83 e8 6f             	sub    $0x6f,%eax
  10246c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10246f:	0f 8f 2d 00 00 00    	jg     1024a2 <kprintf+0xd2>
  102475:	e9 00 00 00 00       	jmp    10247a <kprintf+0xaa>
  10247a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10247d:	83 e8 63             	sub    $0x63,%eax
  102480:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102483:	0f 84 c5 00 00 00    	je     10254e <kprintf+0x17e>
  102489:	e9 00 00 00 00       	jmp    10248e <kprintf+0xbe>
  10248e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102491:	83 e8 64             	sub    $0x64,%eax
  102494:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102497:	0f 84 4b 00 00 00    	je     1024e8 <kprintf+0x118>
  10249d:	e9 f0 00 00 00       	jmp    102592 <kprintf+0x1c2>
  1024a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1024a5:	83 c0 90             	add    $0xffffff90,%eax
  1024a8:	89 c1                	mov    %eax,%ecx
  1024aa:	83 e9 08             	sub    $0x8,%ecx
  1024ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1024b0:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  1024b3:	0f 87 d9 00 00 00    	ja     102592 <kprintf+0x1c2>
  1024b9:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1024bc:	8b 0c 85 08 50 10 00 	mov    0x105008(,%eax,4),%ecx
  1024c3:	ff e1                	jmp    *%ecx
        case 's':
          s = va_arg(ap, char*);
  1024c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1024c8:	89 c1                	mov    %eax,%ecx
  1024ca:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1024d0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1024d3:	8b 00                	mov    (%eax),%eax
  1024d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  1024d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024db:	89 04 24             	mov    %eax,(%esp)
  1024de:	e8 0d 01 00 00       	call   1025f0 <kputs>
          break;
  1024e3:	e9 cc 00 00 00       	jmp    1025b4 <kprintf+0x1e4>
  1024e8:	b8 0a 00 00 00       	mov    $0xa,%eax
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  1024ed:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1024f0:	89 ca                	mov    %ecx,%edx
  1024f2:	81 c2 04 00 00 00    	add    $0x4,%edx
  1024f8:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1024fb:	8b 09                	mov    (%ecx),%ecx
  1024fd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 10);
  102500:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102503:	89 0c 24             	mov    %ecx,(%esp)
  102506:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10250d:	00 
  10250e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102511:	e8 1a 01 00 00       	call   102630 <kputn>
          break;
  102516:	e9 99 00 00 00       	jmp    1025b4 <kprintf+0x1e4>
  10251b:	b8 10 00 00 00       	mov    $0x10,%eax
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  102520:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102523:	89 ca                	mov    %ecx,%edx
  102525:	81 c2 04 00 00 00    	add    $0x4,%edx
  10252b:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10252e:	8b 09                	mov    (%ecx),%ecx
  102530:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 16);
  102533:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102536:	89 0c 24             	mov    %ecx,(%esp)
  102539:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  102540:	00 
  102541:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102544:	e8 e7 00 00 00       	call   102630 <kputn>
          break;
  102549:	e9 66 00 00 00       	jmp    1025b4 <kprintf+0x1e4>
        case 'c':
          c = va_arg(ap, int);
  10254e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102551:	89 c1                	mov    %eax,%ecx
  102553:	81 c1 04 00 00 00    	add    $0x4,%ecx
  102559:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10255c:	8b 00                	mov    (%eax),%eax
  10255e:	88 c2                	mov    %al,%dl
  102560:	88 55 ef             	mov    %dl,-0x11(%ebp)
          kputc(c);
  102563:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  102567:	89 04 24             	mov    %eax,(%esp)
  10256a:	e8 61 01 00 00       	call   1026d0 <kputc>
          break;
  10256f:	e9 40 00 00 00       	jmp    1025b4 <kprintf+0x1e4>
  102574:	b8 25 00 00 00       	mov    $0x25,%eax
        case '%':
          kputc('%');
  102579:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  102580:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102583:	e8 48 01 00 00       	call   1026d0 <kputc>
          break;
  102588:	e9 27 00 00 00       	jmp    1025b4 <kprintf+0x1e4>
        case '\0':
          goto out;
  10258d:	e9 4a 00 00 00       	jmp    1025dc <kprintf+0x20c>
  102592:	b8 25 00 00 00       	mov    $0x25,%eax
        default:
          kputc('%');
  102597:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10259e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1025a1:	e8 2a 01 00 00       	call   1026d0 <kputc>
          kputc(*fmt);
  1025a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025a9:	0f be 00             	movsbl (%eax),%eax
  1025ac:	89 04 24             	mov    %eax,(%esp)
  1025af:	e8 1c 01 00 00       	call   1026d0 <kputc>
          break;
      }
    } else {
  1025b4:	e9 0e 00 00 00       	jmp    1025c7 <kprintf+0x1f7>
      kputc(*fmt);
  1025b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025bc:	0f be 00             	movsbl (%eax),%eax
  1025bf:	89 04 24             	mov    %eax,(%esp)
  1025c2:	e8 09 01 00 00       	call   1026d0 <kputc>
    }

    fmt++;
  1025c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025ca:	05 01 00 00 00       	add    $0x1,%eax
  1025cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  1025d2:	e9 17 fe ff ff       	jmp    1023ee <kprintf+0x1e>
  1025d7:	e9 00 00 00 00       	jmp    1025dc <kprintf+0x20c>

out:
  va_end(ap);

  return kprintf_res;
  1025dc:	a1 20 b4 10 00       	mov    0x10b420,%eax
  1025e1:	83 c4 58             	add    $0x58,%esp
  1025e4:	5d                   	pop    %ebp
  1025e5:	c3                   	ret    
  1025e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1025ed:	00 00 00 

001025f0 <kputs>:
    x++;
    kprintf_res++;
}

static void kputs(const char* s)
{
  1025f0:	55                   	push   %ebp
  1025f1:	89 e5                	mov    %esp,%ebp
  1025f3:	83 ec 08             	sub    $0x8,%esp
  1025f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1025f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  1025fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025ff:	80 38 00             	cmpb   $0x0,(%eax)
  102602:	0f 84 1e 00 00 00    	je     102626 <kputs+0x36>
        kputc(*s++);
  102608:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10260b:	89 c1                	mov    %eax,%ecx
  10260d:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102613:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  102616:	0f be 00             	movsbl (%eax),%eax
  102619:	89 04 24             	mov    %eax,(%esp)
  10261c:	e8 af 00 00 00       	call   1026d0 <kputc>
    }
  102621:	e9 d6 ff ff ff       	jmp    1025fc <kputs+0xc>
}
  102626:	83 c4 08             	add    $0x8,%esp
  102629:	5d                   	pop    %ebp
  10262a:	c3                   	ret    
  10262b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102630 <kputn>:

static void kputn(unsigned long x, int base)
{
  102630:	55                   	push   %ebp
  102631:	89 e5                	mov    %esp,%ebp
  102633:	56                   	push   %esi
  102634:	83 ec 64             	sub    $0x64,%esp
  102637:	8b 45 0c             	mov    0xc(%ebp),%eax
  10263a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10263d:	8d 15 42 52 10 00    	lea    0x105242,%edx
  102643:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102646:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  102649:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  10264c:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  102653:	0f 8e 05 00 00 00    	jle    10265e <kputn+0x2e>
        return;
  102659:	e9 5d 00 00 00       	jmp    1026bb <kputn+0x8b>
  10265e:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  102661:	05 40 00 00 00       	add    $0x40,%eax
  102666:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  102669:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10266c:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  10266f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102672:	31 d2                	xor    %edx,%edx
  102674:	f7 75 f4             	divl   -0xc(%ebp)
  102677:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10267a:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  10267d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102680:	89 c2                	mov    %eax,%edx
  102682:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  102688:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10268b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10268e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102691:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102694:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102697:	89 d0                	mov    %edx,%eax
  102699:	31 d2                	xor    %edx,%edx
  10269b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10269e:	f7 f6                	div    %esi
  1026a0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  1026a3:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1026aa:	0f 85 bf ff ff ff    	jne    10266f <kputn+0x3f>
    kputs(p);
  1026b0:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1026b3:	89 04 24             	mov    %eax,(%esp)
  1026b6:	e8 35 ff ff ff       	call   1025f0 <kputs>
}
  1026bb:	83 c4 64             	add    $0x64,%esp
  1026be:	5e                   	pop    %esi
  1026bf:	5d                   	pop    %ebp
  1026c0:	c3                   	ret    
  1026c1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1026c8:	0f 1f 84 00 00 00 00 
  1026cf:	00 

001026d0 <kputc>:
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c)
{
  1026d0:	55                   	push   %ebp
  1026d1:	89 e5                	mov    %esp,%ebp
  1026d3:	83 ec 08             	sub    $0x8,%esp
  1026d6:	8a 45 08             	mov    0x8(%ebp),%al
  1026d9:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((c == '\n') || (x > 79)) {
  1026dc:	0f be 4d ff          	movsbl -0x1(%ebp),%ecx
  1026e0:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  1026e6:	0f 84 10 00 00 00    	je     1026fc <kputc+0x2c>
  1026ec:	81 3d 1c b4 10 00 4f 	cmpl   $0x4f,0x10b41c
  1026f3:	00 00 00 
  1026f6:	0f 8e 19 00 00 00    	jle    102715 <kputc+0x45>
        x = 0;
  1026fc:	c7 05 1c b4 10 00 00 	movl   $0x0,0x10b41c
  102703:	00 00 00 
        y++;
  102706:	a1 18 b4 10 00       	mov    0x10b418,%eax
  10270b:	05 01 00 00 00       	add    $0x1,%eax
  102710:	a3 18 b4 10 00       	mov    %eax,0x10b418
    }

    if (c == '\n') {
  102715:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  102719:	3d 0a 00 00 00       	cmp    $0xa,%eax
  10271e:	0f 85 05 00 00 00    	jne    102729 <kputc+0x59>
        return;
  102724:	e9 f3 00 00 00       	jmp    10281c <kputc+0x14c>
    }

    if (y > 24) {
  102729:	81 3d 18 b4 10 00 18 	cmpl   $0x18,0x10b418
  102730:	00 00 00 
  102733:	0f 8e 7e 00 00 00    	jle    1027b7 <kputc+0xe7>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  102739:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  102740:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  102747:	0f 8d 2c 00 00 00    	jge    102779 <kputc+0xa9>
            video[i] = video[i + 160];
  10274d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102750:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102756:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  10275d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102760:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102766:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  102769:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10276c:	05 01 00 00 00       	add    $0x1,%eax
  102771:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102774:	e9 c7 ff ff ff       	jmp    102740 <kputc+0x70>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102779:	e9 00 00 00 00       	jmp    10277e <kputc+0xae>
  10277e:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  102785:	0f 8d 1d 00 00 00    	jge    1027a8 <kputc+0xd8>
            video[i] = 0;
  10278b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10278e:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102794:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102798:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10279b:	05 01 00 00 00       	add    $0x1,%eax
  1027a0:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1027a3:	e9 d6 ff ff ff       	jmp    10277e <kputc+0xae>
            video[i] = 0;
        }
        y--;
  1027a8:	a1 18 b4 10 00       	mov    0x10b418,%eax
  1027ad:	05 ff ff ff ff       	add    $0xffffffff,%eax
  1027b2:	a3 18 b4 10 00       	mov    %eax,0x10b418
    }

    video[2 * (y * 80 + x)] = c;
  1027b7:	8a 45 ff             	mov    -0x1(%ebp),%al
  1027ba:	69 0d 18 b4 10 00 50 	imul   $0x50,0x10b418,%ecx
  1027c1:	00 00 00 
  1027c4:	03 0d 1c b4 10 00    	add    0x10b41c,%ecx
  1027ca:	c1 e1 01             	shl    $0x1,%ecx
  1027cd:	8b 15 88 41 10 00    	mov    0x104188,%edx
  1027d3:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  1027d6:	a0 8c 41 10 00       	mov    0x10418c,%al
  1027db:	69 0d 18 b4 10 00 50 	imul   $0x50,0x10b418,%ecx
  1027e2:	00 00 00 
  1027e5:	03 0d 1c b4 10 00    	add    0x10b41c,%ecx
  1027eb:	c1 e1 01             	shl    $0x1,%ecx
  1027ee:	8b 15 88 41 10 00    	mov    0x104188,%edx
  1027f4:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  1027f8:	8b 0d 1c b4 10 00    	mov    0x10b41c,%ecx
  1027fe:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102804:	89 0d 1c b4 10 00    	mov    %ecx,0x10b41c
    kprintf_res++;
  10280a:	8b 0d 20 b4 10 00    	mov    0x10b420,%ecx
  102810:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102816:	89 0d 20 b4 10 00    	mov    %ecx,0x10b420
}
  10281c:	83 c4 08             	add    $0x8,%esp
  10281f:	5d                   	pop    %ebp
  102820:	c3                   	ret    
  102821:	66 90                	xchg   %ax,%ax
  102823:	66 90                	xchg   %ax,%ax
  102825:	66 90                	xchg   %ax,%ax
  102827:	66 90                	xchg   %ax,%ax
  102829:	66 90                	xchg   %ax,%ax
  10282b:	66 90                	xchg   %ax,%ax
  10282d:	66 90                	xchg   %ax,%ax
  10282f:	90                   	nop

00102830 <memset>:
#include "vmm.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n)
{
  102830:	55                   	push   %ebp
  102831:	89 e5                	mov    %esp,%ebp
  102833:	83 ec 10             	sub    $0x10,%esp
  102836:	8b 45 10             	mov    0x10(%ebp),%eax
  102839:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10283c:	8b 55 08             	mov    0x8(%ebp),%edx
  10283f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102842:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102845:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  102848:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10284b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  10284e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102851:	89 c1                	mov    %eax,%ecx
  102853:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102859:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10285c:	3d 00 00 00 00       	cmp    $0x0,%eax
  102861:	0f 84 1a 00 00 00    	je     102881 <memset+0x51>
        *p++ = c;
  102867:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10286a:	88 c1                	mov    %al,%cl
  10286c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10286f:	89 c2                	mov    %eax,%edx
  102871:	81 c2 01 00 00 00    	add    $0x1,%edx
  102877:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10287a:	88 08                	mov    %cl,(%eax)
    }
  10287c:	e9 cd ff ff ff       	jmp    10284e <memset+0x1e>

    return buf;
  102881:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102884:	83 c4 10             	add    $0x10,%esp
  102887:	5d                   	pop    %ebp
  102888:	c3                   	ret    
  102889:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102890 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n)
{
  102890:	55                   	push   %ebp
  102891:	89 e5                	mov    %esp,%ebp
  102893:	83 ec 14             	sub    $0x14,%esp
  102896:	8b 45 10             	mov    0x10(%ebp),%eax
  102899:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10289c:	8b 55 08             	mov    0x8(%ebp),%edx
  10289f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1028a2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1028a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  1028a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  1028ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  1028b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1028b7:	89 c1                	mov    %eax,%ecx
  1028b9:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1028bf:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1028c2:	3d 00 00 00 00       	cmp    $0x0,%eax
  1028c7:	0f 84 25 00 00 00    	je     1028f2 <memcpy+0x62>
      *(d++) = *(s++);
  1028cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028d0:	89 c1                	mov    %eax,%ecx
  1028d2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1028d8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1028db:	8a 10                	mov    (%eax),%dl
  1028dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028e0:	89 c1                	mov    %eax,%ecx
  1028e2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1028e8:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1028eb:	88 10                	mov    %dl,(%eax)
    }
  1028ed:	e9 c2 ff ff ff       	jmp    1028b4 <memcpy+0x24>

    return dest;
  1028f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028f5:	83 c4 14             	add    $0x14,%esp
  1028f8:	5d                   	pop    %ebp
  1028f9:	c3                   	ret    
  1028fa:	66 90                	xchg   %ax,%ax
  1028fc:	66 90                	xchg   %ax,%ax
  1028fe:	66 90                	xchg   %ax,%ax

00102900 <syscall>:
#include "idt.h"

extern struct task* current_task;

struct cpu_state* syscall(struct cpu_state* cpu)
{
  102900:	55                   	push   %ebp
  102901:	89 e5                	mov    %esp,%ebp
  102903:	83 ec 38             	sub    $0x38,%esp
  102906:	8b 45 08             	mov    0x8(%ebp),%eax
  102909:	89 45 fc             	mov    %eax,-0x4(%ebp)
  switch (cpu->eax) {
  10290c:	8b 00                	mov    (%eax),%eax
  10290e:	89 c1                	mov    %eax,%ecx
  102910:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  102916:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102919:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10291c:	0f 8f 2d 00 00 00    	jg     10294f <syscall+0x4f>
  102922:	e9 00 00 00 00       	jmp    102927 <syscall+0x27>
  102927:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10292a:	83 e8 01             	sub    $0x1,%eax
  10292d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102930:	0f 84 45 00 00 00    	je     10297b <syscall+0x7b>
  102936:	e9 00 00 00 00       	jmp    10293b <syscall+0x3b>
  10293b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10293e:	83 e8 02             	sub    $0x2,%eax
  102941:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102944:	0f 84 44 00 00 00    	je     10298e <syscall+0x8e>
  10294a:	e9 c9 00 00 00       	jmp    102a18 <syscall+0x118>
  10294f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102952:	2d c9 00 00 00       	sub    $0xc9,%eax
  102957:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10295a:	0f 84 79 00 00 00    	je     1029d9 <syscall+0xd9>
  102960:	e9 00 00 00 00       	jmp    102965 <syscall+0x65>
  102965:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102968:	2d ca 00 00 00       	sub    $0xca,%eax
  10296d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102970:	0f 84 85 00 00 00    	je     1029fb <syscall+0xfb>
  102976:	e9 9d 00 00 00       	jmp    102a18 <syscall+0x118>
    case 1: /* exit */
      cpu = terminate_current(cpu);
  10297b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10297e:	89 04 24             	mov    %eax,(%esp)
  102981:	e8 5a 08 00 00       	call   1031e0 <terminate_current>
  102986:	89 45 fc             	mov    %eax,-0x4(%ebp)
      break;
  102989:	e9 8a 00 00 00       	jmp    102a18 <syscall+0x118>

    case 2: /* fork */
      {
        save_cpu_state(cpu);
  10298e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102991:	89 04 24             	mov    %eax,(%esp)
  102994:	e8 57 0b 00 00       	call   1034f0 <save_cpu_state>
  
        uint32_t forkpdir = vmm_fork_current();
  102999:	e8 82 dd ff ff       	call   100720 <vmm_fork_current>
  10299e:	b9 00 00 00 00       	mov    $0x0,%ecx
  1029a3:	89 45 f8             	mov    %eax,-0x8(%ebp)
        
        struct task* ntask = init_task(forkpdir, 0);
  1029a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1029a9:	89 04 24             	mov    %eax,(%esp)
  1029ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1029b3:	00 
  1029b4:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  1029b7:	e8 34 09 00 00       	call   1032f0 <init_task>
  1029bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        fork_task_state(ntask);
  1029bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029c2:	89 04 24             	mov    %eax,(%esp)
  1029c5:	e8 c6 08 00 00       	call   103290 <fork_task_state>
                
        cpu->eax = ntask->PID;
  1029ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029cd:	8b 00                	mov    (%eax),%eax
  1029cf:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029d2:	89 01                	mov    %eax,(%ecx)
      }           
      break;
  1029d4:	e9 3f 00 00 00       	jmp    102a18 <syscall+0x118>
  1029d9:	8d 05 67 52 10 00    	lea    0x105267,%eax
      
    case 201: /* putc */
      cpu->eax = kprintf("%c", cpu->ebx);
  1029df:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029e2:	8b 49 04             	mov    0x4(%ecx),%ecx
  1029e5:	89 04 24             	mov    %eax,(%esp)
  1029e8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029ec:	e8 df f9 ff ff       	call   1023d0 <kprintf>
  1029f1:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029f4:	89 01                	mov    %eax,(%ecx)
      break;
  1029f6:	e9 1d 00 00 00       	jmp    102a18 <syscall+0x118>
  1029fb:	8d 05 6a 52 10 00    	lea    0x10526a,%eax
    case 202: /* puts */
      cpu->eax = kprintf("%s", cpu->ebx);
  102a01:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a04:	8b 49 04             	mov    0x4(%ecx),%ecx
  102a07:	89 04 24             	mov    %eax,(%esp)
  102a0a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a0e:	e8 bd f9 ff ff       	call   1023d0 <kprintf>
  102a13:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a16:	89 01                	mov    %eax,(%ecx)
      break;
  }

  return cpu;
  102a18:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a1b:	83 c4 38             	add    $0x38,%esp
  102a1e:	5d                   	pop    %ebp
  102a1f:	c3                   	ret    

00102a20 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  102a20:	55                   	push   %ebp
  102a21:	89 e5                	mov    %esp,%ebp
  102a23:	53                   	push   %ebx
  102a24:	57                   	push   %edi
  102a25:	56                   	push   %esi
  102a26:	83 ec 6c             	sub    $0x6c,%esp
  102a29:	8b 45 08             	mov    0x8(%ebp),%eax
  102a2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  102a2f:	e8 dc e6 ff ff       	call   101110 <vmm_init>
  102a34:	b9 00 00 00 00       	mov    $0x0,%ecx
  102a39:	89 45 ec             	mov    %eax,-0x14(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  102a3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102a42:	89 04 24             	mov    %eax,(%esp)
  102a45:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a49:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102a50:	00 
  102a51:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  102a54:	e8 e7 e3 ff ff       	call   100e40 <map_address_active>
  102a59:	b8 00 00 00 00       	mov    $0x0,%eax
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
  102a5e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102a61:	8b 49 18             	mov    0x18(%ecx),%ecx
  102a64:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102a67:	8b 52 18             	mov    0x18(%edx),%edx
  102a6a:	89 0c 24             	mov    %ecx,(%esp)
  102a6d:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a71:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102a78:	00 
  102a79:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102a7c:	e8 bf e3 ff ff       	call   100e40 <map_address_active>
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  102a81:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a84:	8b 00                	mov    (%eax),%eax
  102a86:	25 08 00 00 00       	and    $0x8,%eax
  102a8b:	3d 00 00 00 00       	cmp    $0x0,%eax
  102a90:	0f 84 ff 01 00 00    	je     102c95 <kernel_main+0x275>
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102a96:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  102a9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102aa0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102aa3:	3b 41 14             	cmp    0x14(%ecx),%eax
  102aa6:	0f 83 df 01 00 00    	jae    102c8b <kernel_main+0x26b>
  102aac:	8d 05 6d 52 10 00    	lea    0x10526d,%eax
	    kprintf("Loading mod at %x \n", mb_info->mi_mods_addr[i].start);
  102ab2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102ab5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102ab8:	8b 52 18             	mov    0x18(%edx),%edx
  102abb:	c1 e1 04             	shl    $0x4,%ecx
  102abe:	01 ca                	add    %ecx,%edx
  102ac0:	8b 0a                	mov    (%edx),%ecx
  102ac2:	89 04 24             	mov    %eax,(%esp)
  102ac5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102ac9:	e8 02 f9 ff ff       	call   1023d0 <kprintf>
	    
	    uint32_t elf_mod_pdir = vmm_create_pagedir();
  102ace:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102ad1:	e8 8a e1 ff ff       	call   100c60 <vmm_create_pagedir>
  102ad6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    void* elf_mod_entry = 0;
  102ad9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	    
	    vmm_activate_pagedir(elf_mod_pdir);
  102ae0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102ae3:	89 04 24             	mov    %eax,(%esp)
  102ae6:	e8 05 e6 ff ff       	call   1010f0 <vmm_activate_pagedir>
  102aeb:	b8 00 00 00 00       	mov    $0x0,%eax
	    
	    vmm_map_range(mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].end - mb_info->mi_mods_addr[i].start, 0);
  102af0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102af3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102af6:	8b 52 18             	mov    0x18(%edx),%edx
  102af9:	c1 e1 04             	shl    $0x4,%ecx
  102afc:	01 ca                	add    %ecx,%edx
  102afe:	8b 0a                	mov    (%edx),%ecx
  102b00:	8b 55 e8             	mov    -0x18(%ebp),%edx
  102b03:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102b06:	8b 76 18             	mov    0x18(%esi),%esi
  102b09:	c1 e2 04             	shl    $0x4,%edx
  102b0c:	01 d6                	add    %edx,%esi
  102b0e:	8b 16                	mov    (%esi),%edx
  102b10:	8b 75 e8             	mov    -0x18(%ebp),%esi
  102b13:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102b16:	8b 7f 18             	mov    0x18(%edi),%edi
  102b19:	c1 e6 04             	shl    $0x4,%esi
  102b1c:	01 f7                	add    %esi,%edi
  102b1e:	8b 77 04             	mov    0x4(%edi),%esi
  102b21:	8b 7d e8             	mov    -0x18(%ebp),%edi
  102b24:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  102b27:	8b 5b 18             	mov    0x18(%ebx),%ebx
  102b2a:	c1 e7 04             	shl    $0x4,%edi
  102b2d:	01 fb                	add    %edi,%ebx
  102b2f:	8b 3b                	mov    (%ebx),%edi
  102b31:	29 fe                	sub    %edi,%esi
  102b33:	89 0c 24             	mov    %ecx,(%esp)
  102b36:	89 54 24 04          	mov    %edx,0x4(%esp)
  102b3a:	89 74 24 08          	mov    %esi,0x8(%esp)
  102b3e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102b45:	00 
  102b46:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102b49:	e8 62 e3 ff ff       	call   100eb0 <vmm_map_range>
      
      struct elf_header* header = mb_info->mi_mods_addr[i].start;
  102b4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102b51:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102b54:	8b 49 18             	mov    0x18(%ecx),%ecx
  102b57:	c1 e0 04             	shl    $0x4,%eax
  102b5a:	01 c1                	add    %eax,%ecx
  102b5c:	8b 01                	mov    (%ecx),%eax
  102b5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
      struct elf_program_header* ph;

      /* Ist es ueberhaupt eine ELF-Datei? */
      if (header->magic != ELF_MAGIC) {
  102b61:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102b64:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  102b6a:	0f 84 16 00 00 00    	je     102b86 <kernel_main+0x166>
  102b70:	8d 05 81 52 10 00    	lea    0x105281,%eax
        kprintf("Invalid ELF-Magic!\n");
  102b76:	89 04 24             	mov    %eax,(%esp)
  102b79:	e8 52 f8 ff ff       	call   1023d0 <kprintf>
        continue;
  102b7e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  102b81:	e9 f5 00 00 00       	jmp    102c7b <kernel_main+0x25b>
      }
      
      elf_mod_entry = (void*)( header->entry );
  102b86:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102b89:	8b 40 18             	mov    0x18(%eax),%eax
  102b8c:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  102b8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102b92:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102b95:	03 41 1c             	add    0x1c(%ecx),%eax
  102b98:	89 45 d8             	mov    %eax,-0x28(%ebp)
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102b9b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102ba2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102ba5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102ba8:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  102bac:	39 c8                	cmp    %ecx,%eax
  102bae:	0f 83 a7 00 00 00    	jae    102c5b <kernel_main+0x23b>
        void* dest = (void*) ph->virt_addr;
  102bb4:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102bb7:	8b 40 08             	mov    0x8(%eax),%eax
  102bba:	89 45 d0             	mov    %eax,-0x30(%ebp)
        void* src = ((char*) header) + ph->offset;
  102bbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102bc0:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102bc3:	03 41 04             	add    0x4(%ecx),%eax
  102bc6:	89 45 cc             	mov    %eax,-0x34(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  102bc9:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102bcc:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  102bd2:	0f 84 05 00 00 00    	je     102bdd <kernel_main+0x1bd>
            continue;
  102bd8:	e9 63 00 00 00       	jmp    102c40 <kernel_main+0x220>
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  102bdd:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  102be4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102be7:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102bea:	3b 41 14             	cmp    0x14(%ecx),%eax
  102bed:	0f 83 31 00 00 00    	jae    102c24 <kernel_main+0x204>
  102bf3:	b8 00 00 00 00       	mov    $0x0,%eax
          vmm_alloc_addr(dest + offset, 0);
  102bf8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  102bfb:	03 4d c8             	add    -0x38(%ebp),%ecx
  102bfe:	89 0c 24             	mov    %ecx,(%esp)
  102c01:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102c08:	00 
  102c09:	89 45 b0             	mov    %eax,-0x50(%ebp)
  102c0c:	e8 df e3 ff ff       	call   100ff0 <vmm_alloc_addr>
  102c11:	89 45 ac             	mov    %eax,-0x54(%ebp)
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  102c14:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102c17:	05 00 10 00 00       	add    $0x1000,%eax
  102c1c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102c1f:	e9 c0 ff ff ff       	jmp    102be4 <kernel_main+0x1c4>
          vmm_alloc_addr(dest + offset, 0);
        }
        
        memcpy(dest, src, ph->file_size);
  102c24:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102c27:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  102c2a:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102c2d:	8b 52 10             	mov    0x10(%edx),%edx
  102c30:	89 04 24             	mov    %eax,(%esp)
  102c33:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c37:	89 54 24 08          	mov    %edx,0x8(%esp)
  102c3b:	e8 50 fc ff ff       	call   102890 <memcpy>
      }
      
      elf_mod_entry = (void*)( header->entry );
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102c40:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102c43:	05 01 00 00 00       	add    $0x1,%eax
  102c48:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102c4b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102c4e:	05 20 00 00 00       	add    $0x20,%eax
  102c53:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102c56:	e9 47 ff ff ff       	jmp    102ba2 <kernel_main+0x182>
        }
        
        memcpy(dest, src, ph->file_size);
      }
      
      vmm_activate_pagedir(kernel_init_pdir);
  102c5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c5e:	89 04 24             	mov    %eax,(%esp)
  102c61:	e8 8a e4 ff ff       	call   1010f0 <vmm_activate_pagedir>
      
      init_task(elf_mod_pdir, elf_mod_entry);
  102c66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102c69:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  102c6c:	89 04 24             	mov    %eax,(%esp)
  102c6f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c73:	e8 78 06 00 00       	call   1032f0 <init_task>
  102c78:	89 45 a8             	mov    %eax,-0x58(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102c7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102c7e:	05 01 00 00 00       	add    $0x1,%eax
  102c83:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102c86:	e9 12 fe ff ff       	jmp    102a9d <kernel_main+0x7d>
      vmm_activate_pagedir(kernel_init_pdir);
      
      init_task(elf_mod_pdir, elf_mod_entry);
	  }
	
	  enable_scheduling();
  102c8b:	e8 00 04 00 00       	call   103090 <enable_scheduling>
	}
  102c90:	e9 11 00 00 00       	jmp    102ca6 <kernel_main+0x286>
  102c95:	8d 05 95 52 10 00    	lea    0x105295,%eax
	else
	{
	  kprintf("No Modules loadable. Microkernel shutting down.\nThank you for using this pointless version of mikrOS\n");
  102c9b:	89 04 24             	mov    %eax,(%esp)
  102c9e:	e8 2d f7 ff ff       	call   1023d0 <kprintf>
  102ca3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	}

	while(1) {  }
  102ca6:	e9 00 00 00 00       	jmp    102cab <kernel_main+0x28b>
  102cab:	e9 fb ff ff ff       	jmp    102cab <kernel_main+0x28b>

00102cb0 <intr_stub_0>:
  102cb0:	6a 00                	push   $0x0
  102cb2:	6a 00                	push   $0x0
  102cb4:	e9 eb 00 00 00       	jmp    102da4 <intr_common_handler>

00102cb9 <intr_stub_1>:
  102cb9:	6a 00                	push   $0x0
  102cbb:	6a 01                	push   $0x1
  102cbd:	e9 e2 00 00 00       	jmp    102da4 <intr_common_handler>

00102cc2 <intr_stub_2>:
  102cc2:	6a 00                	push   $0x0
  102cc4:	6a 02                	push   $0x2
  102cc6:	e9 d9 00 00 00       	jmp    102da4 <intr_common_handler>

00102ccb <intr_stub_3>:
  102ccb:	6a 00                	push   $0x0
  102ccd:	6a 03                	push   $0x3
  102ccf:	e9 d0 00 00 00       	jmp    102da4 <intr_common_handler>

00102cd4 <intr_stub_4>:
  102cd4:	6a 00                	push   $0x0
  102cd6:	6a 04                	push   $0x4
  102cd8:	e9 c7 00 00 00       	jmp    102da4 <intr_common_handler>

00102cdd <intr_stub_5>:
  102cdd:	6a 00                	push   $0x0
  102cdf:	6a 05                	push   $0x5
  102ce1:	e9 be 00 00 00       	jmp    102da4 <intr_common_handler>

00102ce6 <intr_stub_6>:
  102ce6:	6a 00                	push   $0x0
  102ce8:	6a 06                	push   $0x6
  102cea:	e9 b5 00 00 00       	jmp    102da4 <intr_common_handler>

00102cef <intr_stub_7>:
  102cef:	6a 00                	push   $0x0
  102cf1:	6a 07                	push   $0x7
  102cf3:	e9 ac 00 00 00       	jmp    102da4 <intr_common_handler>

00102cf8 <intr_stub_8>:
  102cf8:	6a 08                	push   $0x8
  102cfa:	e9 a5 00 00 00       	jmp    102da4 <intr_common_handler>

00102cff <intr_stub_9>:
  102cff:	6a 00                	push   $0x0
  102d01:	6a 09                	push   $0x9
  102d03:	e9 9c 00 00 00       	jmp    102da4 <intr_common_handler>

00102d08 <intr_stub_10>:
  102d08:	6a 0a                	push   $0xa
  102d0a:	e9 95 00 00 00       	jmp    102da4 <intr_common_handler>

00102d0f <intr_stub_11>:
  102d0f:	6a 0b                	push   $0xb
  102d11:	e9 8e 00 00 00       	jmp    102da4 <intr_common_handler>

00102d16 <intr_stub_12>:
  102d16:	6a 0c                	push   $0xc
  102d18:	e9 87 00 00 00       	jmp    102da4 <intr_common_handler>

00102d1d <intr_stub_13>:
  102d1d:	6a 0d                	push   $0xd
  102d1f:	e9 80 00 00 00       	jmp    102da4 <intr_common_handler>

00102d24 <intr_stub_14>:
  102d24:	6a 0e                	push   $0xe
  102d26:	eb 7c                	jmp    102da4 <intr_common_handler>

00102d28 <intr_stub_15>:
  102d28:	6a 00                	push   $0x0
  102d2a:	6a 0f                	push   $0xf
  102d2c:	eb 76                	jmp    102da4 <intr_common_handler>

00102d2e <intr_stub_16>:
  102d2e:	6a 00                	push   $0x0
  102d30:	6a 10                	push   $0x10
  102d32:	eb 70                	jmp    102da4 <intr_common_handler>

00102d34 <intr_stub_17>:
  102d34:	6a 11                	push   $0x11
  102d36:	eb 6c                	jmp    102da4 <intr_common_handler>

00102d38 <intr_stub_18>:
  102d38:	6a 00                	push   $0x0
  102d3a:	6a 12                	push   $0x12
  102d3c:	eb 66                	jmp    102da4 <intr_common_handler>

00102d3e <intr_stub_32>:
  102d3e:	6a 00                	push   $0x0
  102d40:	6a 20                	push   $0x20
  102d42:	eb 60                	jmp    102da4 <intr_common_handler>

00102d44 <intr_stub_33>:
  102d44:	6a 00                	push   $0x0
  102d46:	6a 21                	push   $0x21
  102d48:	eb 5a                	jmp    102da4 <intr_common_handler>

00102d4a <intr_stub_34>:
  102d4a:	6a 00                	push   $0x0
  102d4c:	6a 22                	push   $0x22
  102d4e:	eb 54                	jmp    102da4 <intr_common_handler>

00102d50 <intr_stub_35>:
  102d50:	6a 00                	push   $0x0
  102d52:	6a 23                	push   $0x23
  102d54:	eb 4e                	jmp    102da4 <intr_common_handler>

00102d56 <intr_stub_36>:
  102d56:	6a 00                	push   $0x0
  102d58:	6a 24                	push   $0x24
  102d5a:	eb 48                	jmp    102da4 <intr_common_handler>

00102d5c <intr_stub_37>:
  102d5c:	6a 00                	push   $0x0
  102d5e:	6a 25                	push   $0x25
  102d60:	eb 42                	jmp    102da4 <intr_common_handler>

00102d62 <intr_stub_38>:
  102d62:	6a 00                	push   $0x0
  102d64:	6a 26                	push   $0x26
  102d66:	eb 3c                	jmp    102da4 <intr_common_handler>

00102d68 <intr_stub_39>:
  102d68:	6a 00                	push   $0x0
  102d6a:	6a 27                	push   $0x27
  102d6c:	eb 36                	jmp    102da4 <intr_common_handler>

00102d6e <intr_stub_40>:
  102d6e:	6a 00                	push   $0x0
  102d70:	6a 28                	push   $0x28
  102d72:	eb 30                	jmp    102da4 <intr_common_handler>

00102d74 <intr_stub_41>:
  102d74:	6a 00                	push   $0x0
  102d76:	6a 29                	push   $0x29
  102d78:	eb 2a                	jmp    102da4 <intr_common_handler>

00102d7a <intr_stub_42>:
  102d7a:	6a 00                	push   $0x0
  102d7c:	6a 2a                	push   $0x2a
  102d7e:	eb 24                	jmp    102da4 <intr_common_handler>

00102d80 <intr_stub_43>:
  102d80:	6a 00                	push   $0x0
  102d82:	6a 2b                	push   $0x2b
  102d84:	eb 1e                	jmp    102da4 <intr_common_handler>

00102d86 <intr_stub_44>:
  102d86:	6a 00                	push   $0x0
  102d88:	6a 2c                	push   $0x2c
  102d8a:	eb 18                	jmp    102da4 <intr_common_handler>

00102d8c <intr_stub_45>:
  102d8c:	6a 00                	push   $0x0
  102d8e:	6a 2d                	push   $0x2d
  102d90:	eb 12                	jmp    102da4 <intr_common_handler>

00102d92 <intr_stub_46>:
  102d92:	6a 00                	push   $0x0
  102d94:	6a 2e                	push   $0x2e
  102d96:	eb 0c                	jmp    102da4 <intr_common_handler>

00102d98 <intr_stub_47>:
  102d98:	6a 00                	push   $0x0
  102d9a:	6a 2f                	push   $0x2f
  102d9c:	eb 06                	jmp    102da4 <intr_common_handler>

00102d9e <intr_stub_48>:
  102d9e:	6a 00                	push   $0x0
  102da0:	6a 30                	push   $0x30
  102da2:	eb 00                	jmp    102da4 <intr_common_handler>

00102da4 <intr_common_handler>:
  102da4:	55                   	push   %ebp
  102da5:	57                   	push   %edi
  102da6:	56                   	push   %esi
  102da7:	52                   	push   %edx
  102da8:	51                   	push   %ecx
  102da9:	53                   	push   %ebx
  102daa:	50                   	push   %eax
  102dab:	54                   	push   %esp
  102dac:	66 b8 10 00          	mov    $0x10,%ax
  102db0:	66 8e d8             	mov    %ax,%ds
  102db3:	66 8e c0             	mov    %ax,%es
  102db6:	e8 c5 f2 ff ff       	call   102080 <handle_interrupt>
  102dbb:	89 c4                	mov    %eax,%esp
  102dbd:	66 b8 23 00          	mov    $0x23,%ax
  102dc1:	66 8e d8             	mov    %ax,%ds
  102dc4:	66 8e c0             	mov    %ax,%es
  102dc7:	58                   	pop    %eax
  102dc8:	5b                   	pop    %ebx
  102dc9:	59                   	pop    %ecx
  102dca:	5a                   	pop    %edx
  102dcb:	5e                   	pop    %esi
  102dcc:	5f                   	pop    %edi
  102dcd:	5d                   	pop    %ebp
  102dce:	83 c4 08             	add    $0x8,%esp
  102dd1:	cf                   	iret   
  102dd2:	66 90                	xchg   %ax,%ax
  102dd4:	66 90                	xchg   %ax,%ax
  102dd6:	66 90                	xchg   %ax,%ax
  102dd8:	66 90                	xchg   %ax,%ax
  102dda:	66 90                	xchg   %ax,%ax
  102ddc:	66 90                	xchg   %ax,%ax
  102dde:	66 90                	xchg   %ax,%ax

00102de0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  102de0:	55                   	push   %ebp
  102de1:	89 e5                	mov    %esp,%ebp
	struct {
  102de3:	83 ec 08             	sub    $0x8,%esp
  102de6:	a1 2c 50 10 00       	mov    0x10502c,%eax
  102deb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102dee:	66 8b 0d 30 50 10 00 	mov    0x105030,%cx
  102df5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
	asm volatile("lgdt %0" : : "m" (gdtp));
  102df9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  102dfd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  102e01:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  102e04:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  102e07:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  102e0a:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  102e0d:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  102e10:	83 c4 08             	add    $0x8,%esp
  102e13:	5d                   	pop    %ebp
  102e14:	c3                   	ret    
  102e15:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102e1c:	00 00 00 00 

00102e20 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  102e20:	55                   	push   %ebp
  102e21:	89 e5                	mov    %esp,%ebp
  102e23:	56                   	push   %esi
  102e24:	83 ec 10             	sub    $0x10,%esp
  102e27:	8b 45 14             	mov    0x14(%ebp),%eax
  102e2a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102e2d:	8b 55 0c             	mov    0xc(%ebp),%edx
  102e30:	8b 75 08             	mov    0x8(%ebp),%esi
  102e33:	89 75 f8             	mov    %esi,-0x8(%ebp)
  102e36:	89 55 f4             	mov    %edx,-0xc(%ebp)
  102e39:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102e3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    gdt[i] = limit & 0xffffLL;
  102e3f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  102e43:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102e46:	89 04 cd 30 b6 12 00 	mov    %eax,0x12b630(,%ecx,8)
  102e4d:	c7 04 cd 34 b6 12 00 	movl   $0x0,0x12b634(,%ecx,8)
  102e54:	00 00 00 00 
    gdt[i] |= (base & 0xffffffLL) << 16;
  102e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e5b:	25 ff ff ff 00       	and    $0xffffff,%eax
  102e60:	89 c1                	mov    %eax,%ecx
  102e62:	c1 e1 10             	shl    $0x10,%ecx
  102e65:	c1 e8 10             	shr    $0x10,%eax
  102e68:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102e6b:	8b 34 d5 34 b6 12 00 	mov    0x12b634(,%edx,8),%esi
  102e72:	09 f0                	or     %esi,%eax
  102e74:	8b 34 d5 30 b6 12 00 	mov    0x12b630(,%edx,8),%esi
  102e7b:	09 ce                	or     %ecx,%esi
  102e7d:	89 04 d5 34 b6 12 00 	mov    %eax,0x12b634(,%edx,8)
  102e84:	89 34 d5 30 b6 12 00 	mov    %esi,0x12b630(,%edx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  102e8b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  102e8f:	c1 e0 08             	shl    $0x8,%eax
  102e92:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102e95:	8b 14 cd 30 b6 12 00 	mov    0x12b630(,%ecx,8),%edx
  102e9c:	8b 34 cd 34 b6 12 00 	mov    0x12b634(,%ecx,8),%esi
  102ea3:	09 c6                	or     %eax,%esi
  102ea5:	89 14 cd 30 b6 12 00 	mov    %edx,0x12b630(,%ecx,8)
  102eac:	89 34 cd 34 b6 12 00 	mov    %esi,0x12b634(,%ecx,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  102eb3:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  102eb7:	83 e0 0f             	and    $0xf,%eax
  102eba:	c1 e0 10             	shl    $0x10,%eax
  102ebd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102ec0:	8b 14 cd 30 b6 12 00 	mov    0x12b630(,%ecx,8),%edx
  102ec7:	8b 34 cd 34 b6 12 00 	mov    0x12b634(,%ecx,8),%esi
  102ece:	09 c6                	or     %eax,%esi
  102ed0:	89 14 cd 30 b6 12 00 	mov    %edx,0x12b630(,%ecx,8)
  102ed7:	89 34 cd 34 b6 12 00 	mov    %esi,0x12b634(,%ecx,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  102ede:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102ee1:	c1 e0 0c             	shl    $0xc,%eax
  102ee4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  102ee9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102eec:	8b 14 cd 30 b6 12 00 	mov    0x12b630(,%ecx,8),%edx
  102ef3:	8b 34 cd 34 b6 12 00 	mov    0x12b634(,%ecx,8),%esi
  102efa:	09 c6                	or     %eax,%esi
  102efc:	89 14 cd 30 b6 12 00 	mov    %edx,0x12b630(,%ecx,8)
  102f03:	89 34 cd 34 b6 12 00 	mov    %esi,0x12b634(,%ecx,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  102f0a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  102f0e:	c1 e0 18             	shl    $0x18,%eax
  102f11:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102f14:	8b 14 cd 30 b6 12 00 	mov    0x12b630(,%ecx,8),%edx
  102f1b:	8b 34 cd 34 b6 12 00 	mov    0x12b634(,%ecx,8),%esi
  102f22:	09 c6                	or     %eax,%esi
  102f24:	89 14 cd 30 b6 12 00 	mov    %edx,0x12b630(,%ecx,8)
  102f2b:	89 34 cd 34 b6 12 00 	mov    %esi,0x12b634(,%ecx,8)
}
  102f32:	83 c4 10             	add    $0x10,%esp
  102f35:	5e                   	pop    %esi
  102f36:	5d                   	pop    %ebp
  102f37:	c3                   	ret    
  102f38:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  102f3f:	00 

00102f40 <init_gdt>:

void init_gdt(void)
{
  102f40:	55                   	push   %ebp
  102f41:	89 e5                	mov    %esp,%ebp
  102f43:	56                   	push   %esi
  102f44:	83 ec 54             	sub    $0x54,%esp
  102f47:	b8 00 00 00 00       	mov    $0x0,%eax
    set_gdt_entry(0, 0, 0, 0);
  102f4c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102f53:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f5a:	00 
  102f5b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102f62:	00 
  102f63:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102f6a:	00 
  102f6b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102f6e:	e8 ad fe ff ff       	call   102e20 <set_gdt_entry>
  102f73:	b8 01 00 00 00       	mov    $0x1,%eax
  102f78:	b9 00 00 00 00       	mov    $0x0,%ecx
  102f7d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102f82:	be 9a 0c 00 00       	mov    $0xc9a,%esi
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102f87:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  102f8e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f95:	00 
  102f96:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102f9d:	00 
  102f9e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  102fa5:	00 
  102fa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102fa9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102fac:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102faf:	89 75 e8             	mov    %esi,-0x18(%ebp)
  102fb2:	e8 69 fe ff ff       	call   102e20 <set_gdt_entry>
  102fb7:	b8 02 00 00 00       	mov    $0x2,%eax
  102fbc:	b9 00 00 00 00       	mov    $0x0,%ecx
  102fc1:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102fc6:	be 92 0c 00 00       	mov    $0xc92,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102fcb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  102fd2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102fd9:	00 
  102fda:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102fe1:	00 
  102fe2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  102fe9:	00 
  102fea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102fed:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  102ff0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  102ff3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  102ff6:	e8 25 fe ff ff       	call   102e20 <set_gdt_entry>
  102ffb:	b8 03 00 00 00       	mov    $0x3,%eax
  103000:	b9 00 00 00 00       	mov    $0x0,%ecx
  103005:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10300a:	be fa 0c 00 00       	mov    $0xcfa,%esi
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10300f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  103016:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10301d:	00 
  10301e:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103025:	00 
  103026:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10302d:	00 
  10302e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  103031:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  103034:	89 55 cc             	mov    %edx,-0x34(%ebp)
  103037:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10303a:	e8 e1 fd ff ff       	call   102e20 <set_gdt_entry>
  10303f:	b8 04 00 00 00       	mov    $0x4,%eax
  103044:	b9 00 00 00 00       	mov    $0x0,%ecx
  103049:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10304e:	be f2 0c 00 00       	mov    $0xcf2,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  103053:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10305a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103061:	00 
  103062:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103069:	00 
  10306a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  103071:	00 
  103072:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  103075:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  103078:	89 55 bc             	mov    %edx,-0x44(%ebp)
  10307b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  10307e:	e8 9d fd ff ff       	call   102e20 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  103083:	e8 58 fd ff ff       	call   102de0 <load_gdt>
}
  103088:	83 c4 54             	add    $0x54,%esp
  10308b:	5e                   	pop    %esi
  10308c:	5d                   	pop    %ebp
  10308d:	c3                   	ret    
  10308e:	66 90                	xchg   %ax,%ax

00103090 <enable_scheduling>:
struct task* first_task   = 0;
struct task* current_task = 0;

int nextPID = 1;

void enable_scheduling(void) {
  103090:	55                   	push   %ebp
  103091:	89 e5                	mov    %esp,%ebp
  sched_enabled = 1;
  103093:	c7 05 24 b4 10 00 01 	movl   $0x1,0x10b424
  10309a:	00 00 00 
}
  10309d:	5d                   	pop    %ebp
  10309e:	c3                   	ret    
  10309f:	90                   	nop

001030a0 <scheduling_enabled>:

uint32_t scheduling_enabled(void) {
  1030a0:	55                   	push   %ebp
  1030a1:	89 e5                	mov    %esp,%ebp
  return sched_enabled;
  1030a3:	a1 24 b4 10 00       	mov    0x10b424,%eax
  1030a8:	5d                   	pop    %ebp
  1030a9:	c3                   	ret    
  1030aa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001030b0 <schedule_exception>:
}

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  1030b0:	55                   	push   %ebp
  1030b1:	89 e5                	mov    %esp,%ebp
  1030b3:	56                   	push   %esi
  1030b4:	83 ec 34             	sub    $0x34,%esp
  1030b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1030ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(current_task == first_task && current_task->next == 0) {
  1030bd:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1030c2:	3b 05 28 b4 10 00    	cmp    0x10b428,%eax
  1030c8:	0f 85 71 00 00 00    	jne    10313f <schedule_exception+0x8f>
  1030ce:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1030d3:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  1030da:	0f 85 5f 00 00 00    	jne    10313f <schedule_exception+0x8f>
  1030e0:	b8 04 00 00 00       	mov    $0x4,%eax
    //Only one process is running, which just crashed. Stop system.
    setclr(0x04);
  1030e5:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1030ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1030ef:	e8 bc f2 ff ff       	call   1023b0 <setclr>
  1030f4:	8d 05 fb 52 10 00    	lea    0x1052fb,%eax
    kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n", current_task->PID, cpu->intr, cpu->error);
  1030fa:	8b 0d 2c b4 10 00    	mov    0x10b42c,%ecx
  103100:	8b 09                	mov    (%ecx),%ecx
  103102:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103105:	8b 52 1c             	mov    0x1c(%edx),%edx
  103108:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10310b:	8b 76 20             	mov    0x20(%esi),%esi
  10310e:	89 04 24             	mov    %eax,(%esp)
  103111:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103115:	89 54 24 08          	mov    %edx,0x8(%esp)
  103119:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10311d:	e8 ae f2 ff ff       	call   1023d0 <kprintf>
  103122:	8d 0d 2f 53 10 00    	lea    0x10532f,%ecx
    show_cod(cpu, "Last task crashed. Terminating kernel...");
  103128:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10312b:	89 14 24             	mov    %edx,(%esp)
  10312e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103132:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103135:	e8 b6 f0 ff ff       	call   1021f0 <show_cod>
  }
  10313a:	e9 88 00 00 00       	jmp    1031c7 <schedule_exception+0x117>
  10313f:	b8 04 00 00 00       	mov    $0x4,%eax
  else
  {
    //Potential security leaks available in following code.
    setclr(0x04);
  103144:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10314b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10314e:	e8 5d f2 ff ff       	call   1023b0 <setclr>
  103153:	8d 05 fb 52 10 00    	lea    0x1052fb,%eax
    kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n", current_task->PID, cpu->intr, cpu->error);
  103159:	8b 0d 2c b4 10 00    	mov    0x10b42c,%ecx
  10315f:	8b 09                	mov    (%ecx),%ecx
  103161:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103164:	8b 52 1c             	mov    0x1c(%edx),%edx
  103167:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10316a:	8b 76 20             	mov    0x20(%esi),%esi
  10316d:	89 04 24             	mov    %eax,(%esp)
  103170:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103174:	89 54 24 08          	mov    %edx,0x8(%esp)
  103178:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10317c:	e8 4f f2 ff ff       	call   1023d0 <kprintf>
  103181:	8d 0d 88 51 10 00    	lea    0x105188,%ecx
    kprintf("\n");
  103187:	89 0c 24             	mov    %ecx,(%esp)
  10318a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10318d:	e8 3e f2 ff ff       	call   1023d0 <kprintf>
    show_dump(cpu);
  103192:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103195:	89 0c 24             	mov    %ecx,(%esp)
  103198:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10319b:	e8 c0 f0 ff ff       	call   102260 <show_dump>
  1031a0:	b8 07 00 00 00       	mov    $0x7,%eax
    setclr(0x07);
  1031a5:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1031ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1031af:	e8 fc f1 ff ff       	call   1023b0 <setclr>
    
    return terminate_current(cpu);
  1031b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031b7:	89 04 24             	mov    %eax,(%esp)
  1031ba:	e8 21 00 00 00       	call   1031e0 <terminate_current>
  1031bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1031c2:	e9 06 00 00 00       	jmp    1031cd <schedule_exception+0x11d>
  }
  return cpu;
  1031c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  1031cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031d0:	83 c4 34             	add    $0x34,%esp
  1031d3:	5e                   	pop    %esi
  1031d4:	5d                   	pop    %ebp
  1031d5:	c3                   	ret    
  1031d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1031dd:	00 00 00 

001031e0 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  1031e0:	55                   	push   %ebp
  1031e1:	89 e5                	mov    %esp,%ebp
  1031e3:	83 ec 18             	sub    $0x18,%esp
  1031e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1031e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct task* next = current_task->next;
  1031ec:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1031f1:	8b 40 08             	mov    0x8(%eax),%eax
  1031f4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  struct task* prev = current_task->prev;
  1031f7:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1031fc:	8b 40 0c             	mov    0xc(%eax),%eax
  1031ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  //TODO: free resources here
  
  if(current_task == first_task) {
  103202:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103207:	3b 05 28 b4 10 00    	cmp    0x10b428,%eax
  10320d:	0f 85 0d 00 00 00    	jne    103220 <terminate_current+0x40>
    first_task = current_task->next;
  103213:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103218:	8b 40 08             	mov    0x8(%eax),%eax
  10321b:	a3 28 b4 10 00       	mov    %eax,0x10b428
  }
  
  if(next != 0) {
  103220:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103227:	0f 84 09 00 00 00    	je     103236 <terminate_current+0x56>
    next->prev = prev;
  10322d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103230:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103233:	89 41 0c             	mov    %eax,0xc(%ecx)
  }

  if(prev != 0) {
  103236:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10323d:	0f 84 09 00 00 00    	je     10324c <terminate_current+0x6c>
    prev->next = next;
  103243:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103246:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103249:	89 41 08             	mov    %eax,0x8(%ecx)
  }
  
  //TODO: handle if all tasks are closed

  if(next == 0) next = first_task;
  10324c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103253:	0f 85 08 00 00 00    	jne    103261 <terminate_current+0x81>
  103259:	a1 28 b4 10 00       	mov    0x10b428,%eax
  10325e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    
  current_task = next;       
  103261:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103264:	a3 2c b4 10 00       	mov    %eax,0x10b42c
  vmm_activate_pagedir(current_task->phys_pdir);     
  103269:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  10326e:	8b 40 14             	mov    0x14(%eax),%eax
  103271:	89 04 24             	mov    %eax,(%esp)
  103274:	e8 77 de ff ff       	call   1010f0 <vmm_activate_pagedir>
  return current_task->cpu_state;
  103279:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  10327e:	8b 40 04             	mov    0x4(%eax),%eax
  103281:	83 c4 18             	add    $0x18,%esp
  103284:	5d                   	pop    %ebp
  103285:	c3                   	ret    
  103286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10328d:	00 00 00 

00103290 <fork_task_state>:
}

void fork_task_state(struct task* new_task) {    
  103290:	55                   	push   %ebp
  103291:	89 e5                	mov    %esp,%ebp
  103293:	83 ec 18             	sub    $0x18,%esp
  103296:	8b 45 08             	mov    0x8(%ebp),%eax
  103299:	b9 38 00 00 00       	mov    $0x38,%ecx
  10329e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  vmm_free(fvaddr);*/
  
  /*map_address_active((uint32_t)fvaddr, vmm_resolve_ppd(new_task->phys_pdir, new_task->user_stack_bottom), 0);
  memcpy(fvaddr, current_task->user_stack_bottom, 4096);*/
  
  new_task->user_stack_bottom = current_task->user_stack_bottom;
  1032a1:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1032a6:	8b 40 10             	mov    0x10(%eax),%eax
  1032a9:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1032ac:	89 42 10             	mov    %eax,0x10(%edx)
  
  memcpy(new_task->cpu_state, current_task->cpu_state, sizeof(struct cpu_state));
  1032af:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1032b2:	8b 40 04             	mov    0x4(%eax),%eax
  1032b5:	8b 15 2c b4 10 00    	mov    0x10b42c,%edx
  1032bb:	8b 52 04             	mov    0x4(%edx),%edx
  1032be:	89 04 24             	mov    %eax,(%esp)
  1032c1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1032c5:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1032cc:	00 
  1032cd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1032d0:	e8 bb f5 ff ff       	call   102890 <memcpy>
  
  new_task->cpu_state->eax = 0;
  1032d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1032d8:	8b 40 04             	mov    0x4(%eax),%eax
  1032db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
  1032e1:	83 c4 18             	add    $0x18,%esp
  1032e4:	5d                   	pop    %ebp
  1032e5:	c3                   	ret    
  1032e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1032ed:	00 00 00 

001032f0 <init_task>:

struct task* init_task(uint32_t task_pagedir, void* entry)
{
  1032f0:	55                   	push   %ebp
  1032f1:	89 e5                	mov    %esp,%ebp
  1032f3:	56                   	push   %esi
  1032f4:	83 ec 74             	sub    $0x74,%esp
  1032f7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1032fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1032fd:	8d 15 58 53 10 00    	lea    0x105358,%edx
  103303:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103306:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kprintf("init task at %x \n", entry);
  103309:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10330c:	89 14 24             	mov    %edx,(%esp)
  10330f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103313:	e8 b8 f0 ff ff       	call   1023d0 <kprintf>
  103318:	b9 00 00 00 00       	mov    $0x0,%ecx

  struct task* ntask = vmm_alloc(0);
  10331d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  103324:	89 45 ac             	mov    %eax,-0x54(%ebp)
  103327:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  10332a:	e8 51 da ff ff       	call   100d80 <vmm_alloc>
  10332f:	b9 00 00 00 00       	mov    $0x0,%ecx
  103334:	89 45 f0             	mov    %eax,-0x10(%ebp)
  ntask->cpu_state   = vmm_alloc(0);
  103337:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10333e:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  103341:	e8 3a da ff ff       	call   100d80 <vmm_alloc>
  103346:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  10334b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10334e:	89 42 04             	mov    %eax,0x4(%edx)
  
  ntask->phys_pdir = task_pagedir;
  103351:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103354:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103357:	89 42 14             	mov    %eax,0x14(%edx)
  ntask->user_stack_bottom = (void*)0xFFFFE000;
  10335a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10335d:	89 48 10             	mov    %ecx,0x10(%eax)
  ntask->PID = nextPID++;
  103360:	a1 90 41 10 00       	mov    0x104190,%eax
  103365:	89 c1                	mov    %eax,%ecx
  103367:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10336d:	89 0d 90 41 10 00    	mov    %ecx,0x104190
  103373:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103376:	89 01                	mov    %eax,(%ecx)
  
  ntask->next = (void*)0;
  103378:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10337b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  ntask->prev = (void*)0;
  103382:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103385:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
  
  if(first_task == 0) {
  10338c:	81 3d 28 b4 10 00 00 	cmpl   $0x0,0x10b428
  103393:	00 00 00 
  103396:	0f 85 0d 00 00 00    	jne    1033a9 <init_task+0xb9>
    first_task = ntask;
  10339c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10339f:	a3 28 b4 10 00       	mov    %eax,0x10b428
  }
  1033a4:	e9 1f 00 00 00       	jmp    1033c8 <init_task+0xd8>
  else
  {
    ntask->next = first_task;
  1033a9:	a1 28 b4 10 00       	mov    0x10b428,%eax
  1033ae:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1033b1:	89 41 08             	mov    %eax,0x8(%ecx)
    first_task->prev = ntask;
  1033b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033b7:	8b 0d 28 b4 10 00    	mov    0x10b428,%ecx
  1033bd:	89 41 0c             	mov    %eax,0xc(%ecx)
    first_task = ntask;
  1033c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033c3:	a3 28 b4 10 00       	mov    %eax,0x10b428
  }
  
  uint32_t rest_pdir = vmm_get_current_pagedir();
  1033c8:	e8 43 d3 ff ff       	call   100710 <vmm_get_current_pagedir>
  1033cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  vmm_activate_pagedir(task_pagedir);
  1033d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1033d3:	89 04 24             	mov    %eax,(%esp)
  1033d6:	e8 15 dd ff ff       	call   1010f0 <vmm_activate_pagedir>
  1033db:	b8 00 00 00 00       	mov    $0x0,%eax
  
  vmm_alloc_addr(ntask->user_stack_bottom, 0);
  1033e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1033e3:	8b 49 10             	mov    0x10(%ecx),%ecx
  1033e6:	89 0c 24             	mov    %ecx,(%esp)
  1033e9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1033f0:	00 
  1033f1:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1033f4:	e8 f7 db ff ff       	call   100ff0 <vmm_alloc_addr>
  1033f9:	8d 0d 6a 53 10 00    	lea    0x10536a,%ecx
  1033ff:	8d 55 b0             	lea    -0x50(%ebp),%edx

  struct cpu_state nstate = {
  103402:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  103409:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  103410:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  103417:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  10341e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  103425:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  10342c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  103433:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  10343a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  103441:	8b 75 f4             	mov    -0xc(%ebp),%esi
  103444:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  103447:	c7 45 d8 1b 00 00 00 	movl   $0x1b,-0x28(%ebp)
  10344e:	c7 45 dc 00 02 00 00 	movl   $0x200,-0x24(%ebp)
  103455:	8b 75 f0             	mov    -0x10(%ebp),%esi
  103458:	8b 76 10             	mov    0x10(%esi),%esi
  10345b:	81 c6 00 10 00 00    	add    $0x1000,%esi
  103461:	89 75 e0             	mov    %esi,-0x20(%ebp)
  103464:	c7 45 e4 23 00 00 00 	movl   $0x23,-0x1c(%ebp)
      .ss  = 0x20 | 0x03,
      
      .eflags = 0x200,
  };
  
  kprintf("NSTATEADDR:%x NTCPUADDR:%x \n", &nstate, ntask->cpu_state);
  10346b:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10346e:	8b 76 04             	mov    0x4(%esi),%esi
  103471:	89 0c 24             	mov    %ecx,(%esp)
  103474:	89 54 24 04          	mov    %edx,0x4(%esp)
  103478:	89 74 24 08          	mov    %esi,0x8(%esp)
  10347c:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10347f:	e8 4c ef ff ff       	call   1023d0 <kprintf>
  
  //memcpy(ntask->cpu_state, &nstate, sizeof(struct cpu_state));
  
  ntask->cpu_state->esp = (uint32_t)ntask->user_stack_bottom + 4096;
  103484:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103487:	8b 49 10             	mov    0x10(%ecx),%ecx
  10348a:	81 c1 00 10 00 00    	add    $0x1000,%ecx
  103490:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103493:	8b 52 04             	mov    0x4(%edx),%edx
  103496:	89 4a 30             	mov    %ecx,0x30(%edx)
  ntask->cpu_state->eip = (uint32_t)entry;
  103499:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10349c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10349f:	8b 52 04             	mov    0x4(%edx),%edx
  1034a2:	89 4a 24             	mov    %ecx,0x24(%edx)
  ntask->cpu_state->cs  = 0x18 | 0x03;
  1034a5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1034a8:	8b 49 04             	mov    0x4(%ecx),%ecx
  1034ab:	c7 41 28 1b 00 00 00 	movl   $0x1b,0x28(%ecx)
  ntask->cpu_state->ss  = 0x20 | 0x03;
  1034b2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1034b5:	8b 49 04             	mov    0x4(%ecx),%ecx
  1034b8:	c7 41 34 23 00 00 00 	movl   $0x23,0x34(%ecx)
  ntask->cpu_state->eflags = 0x200;
  1034bf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1034c2:	8b 49 04             	mov    0x4(%ecx),%ecx
  1034c5:	c7 41 2c 00 02 00 00 	movl   $0x200,0x2c(%ecx)
    
  vmm_activate_pagedir(rest_pdir);
  1034cc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1034cf:	89 0c 24             	mov    %ecx,(%esp)
  1034d2:	89 45 98             	mov    %eax,-0x68(%ebp)
  1034d5:	e8 16 dc ff ff       	call   1010f0 <vmm_activate_pagedir>
  
  return ntask;
  1034da:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1034dd:	83 c4 74             	add    $0x74,%esp
  1034e0:	5e                   	pop    %esi
  1034e1:	5d                   	pop    %ebp
  1034e2:	c3                   	ret    
  1034e3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1034ea:	84 00 00 00 00 00 

001034f0 <save_cpu_state>:
}

void save_cpu_state(struct cpu_state* cpu) {
  1034f0:	55                   	push   %ebp
  1034f1:	89 e5                	mov    %esp,%ebp
  1034f3:	83 ec 18             	sub    $0x18,%esp
  1034f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1034f9:	b9 38 00 00 00       	mov    $0x38,%ecx
  1034fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
  memcpy(current_task->cpu_state, cpu, sizeof(struct cpu_state));
  103501:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  103506:	8b 40 04             	mov    0x4(%eax),%eax
  103509:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10350c:	89 04 24             	mov    %eax,(%esp)
  10350f:	89 54 24 04          	mov    %edx,0x4(%esp)
  103513:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  10351a:	00 
  10351b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10351e:	e8 6d f3 ff ff       	call   102890 <memcpy>
}
  103523:	83 c4 18             	add    $0x18,%esp
  103526:	5d                   	pop    %ebp
  103527:	c3                   	ret    
  103528:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10352f:	00 

00103530 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu)
{
  103530:	55                   	push   %ebp
  103531:	89 e5                	mov    %esp,%ebp
  103533:	83 ec 18             	sub    $0x18,%esp
  103536:	8b 45 08             	mov    0x8(%ebp),%eax
  103539:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(first_task != 0 && sched_enabled) {  
  10353c:	81 3d 28 b4 10 00 00 	cmpl   $0x0,0x10b428
  103543:	00 00 00 
  103546:	0f 84 9d 00 00 00    	je     1035e9 <schedule+0xb9>
  10354c:	81 3d 24 b4 10 00 00 	cmpl   $0x0,0x10b424
  103553:	00 00 00 
  103556:	0f 84 8d 00 00 00    	je     1035e9 <schedule+0xb9>
    if(current_task == 0) {
  10355c:	81 3d 2c b4 10 00 00 	cmpl   $0x0,0x10b42c
  103563:	00 00 00 
  103566:	0f 85 2a 00 00 00    	jne    103596 <schedule+0x66>
      current_task = first_task;
  10356c:	a1 28 b4 10 00       	mov    0x10b428,%eax
  103571:	a3 2c b4 10 00       	mov    %eax,0x10b42c
      vmm_activate_pagedir(current_task->phys_pdir);      
  103576:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  10357b:	8b 40 14             	mov    0x14(%eax),%eax
  10357e:	89 04 24             	mov    %eax,(%esp)
  103581:	e8 6a db ff ff       	call   1010f0 <vmm_activate_pagedir>
      return current_task->cpu_state;
  103586:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  10358b:	8b 40 04             	mov    0x4(%eax),%eax
  10358e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103591:	e9 59 00 00 00       	jmp    1035ef <schedule+0xbf>
    }
    
    struct task* next = current_task->next;
  103596:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  10359b:	8b 40 08             	mov    0x8(%eax),%eax
  10359e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(next == 0) next = first_task;
  1035a1:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1035a8:	0f 85 08 00 00 00    	jne    1035b6 <schedule+0x86>
  1035ae:	a1 28 b4 10 00       	mov    0x10b428,%eax
  1035b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
    save_cpu_state(cpu);
  1035b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1035b9:	89 04 24             	mov    %eax,(%esp)
  1035bc:	e8 2f ff ff ff       	call   1034f0 <save_cpu_state>
        
    current_task = next;       
  1035c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1035c4:	a3 2c b4 10 00       	mov    %eax,0x10b42c
    vmm_activate_pagedir(current_task->phys_pdir);     
  1035c9:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1035ce:	8b 40 14             	mov    0x14(%eax),%eax
  1035d1:	89 04 24             	mov    %eax,(%esp)
  1035d4:	e8 17 db ff ff       	call   1010f0 <vmm_activate_pagedir>
    return current_task->cpu_state;
  1035d9:	a1 2c b4 10 00       	mov    0x10b42c,%eax
  1035de:	8b 40 04             	mov    0x4(%eax),%eax
  1035e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1035e4:	e9 06 00 00 00       	jmp    1035ef <schedule+0xbf>
  }
  return cpu;
  1035e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1035ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1035ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1035f2:	83 c4 18             	add    $0x18,%esp
  1035f5:	5d                   	pop    %ebp
  1035f6:	c3                   	ret    
