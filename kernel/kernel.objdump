
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 bc                	in     $0xbc,%al

0010000c <_start>:
  10000c:	bc 00 80 10 00       	mov    $0x108000,%esp
  100011:	53                   	push   %ebx
  100012:	e8 09 00 00 00       	call   100020 <init>

00100017 <_stop>:
  100017:	fa                   	cli    
  100018:	f4                   	hlt    
  100019:	eb fc                	jmp    100017 <_stop>
  10001b:	66 90                	xchg   %ax,%ax
  10001d:	66 90                	xchg   %ax,%ax
  10001f:	90                   	nop

00100020 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  100020:	55                   	push   %ebp
  100021:	89 e5                	mov    %esp,%ebp
  100023:	83 ec 28             	sub    $0x28,%esp
  100026:	8b 45 08             	mov    0x8(%ebp),%eax
  100029:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10002c:	e8 cf 22 00 00       	call   102300 <clrscr>
  pmm_init(mb_info);
  100031:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100034:	89 04 24             	mov    %eax,(%esp)
  100037:	e8 f4 04 00 00       	call   100530 <pmm_init>
  10003c:	8d 05 32 50 10 00    	lea    0x105032,%eax
  100042:	8d 0d 55 50 10 00    	lea    0x105055,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100048:	89 04 24             	mov    %eax,(%esp)
  10004b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10004f:	e8 2c 23 00 00       	call   102380 <kprintf>
  100054:	8d 0d 5f 50 10 00    	lea    0x10505f,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10005a:	89 0c 24             	mov    %ecx,(%esp)
  10005d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100060:	e8 1b 23 00 00       	call   102380 <kprintf>
  100065:	8d 0d 9e 50 10 00    	lea    0x10509e,%ecx

	kprintf("Initializing GDT...\n");
  10006b:	89 0c 24             	mov    %ecx,(%esp)
  10006e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100071:	e8 0a 23 00 00       	call   102380 <kprintf>
	
	init_gdt();
  100076:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100079:	e8 f2 2e 00 00       	call   102f70 <init_gdt>
  10007e:	8d 05 b3 50 10 00    	lea    0x1050b3,%eax

	kprintf("Initializing IDT...\n");
  100084:	89 04 24             	mov    %eax,(%esp)
  100087:	e8 f4 22 00 00       	call   102380 <kprintf>
  10008c:	8d 0d c8 50 10 00    	lea    0x1050c8,%ecx

	init_idt();
  100092:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100095:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100098:	e8 13 13 00 00       	call   1013b0 <init_idt>

	kprintf("init_drivers()\n");
  10009d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1000a0:	89 04 24             	mov    %eax,(%esp)
  1000a3:	e8 d8 22 00 00       	call   102380 <kprintf>

	init_drivers();
  1000a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1000ab:	e8 30 00 00 00       	call   1000e0 <init_drivers>
  1000b0:	8d 05 d8 50 10 00    	lea    0x1050d8,%eax
	
	kprintf("switching to kernel_main()\n");
  1000b6:	89 04 24             	mov    %eax,(%esp)
  1000b9:	e8 c2 22 00 00       	call   102380 <kprintf>

	kernel_main(mb_info);
  1000be:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1000c1:	89 0c 24             	mov    %ecx,(%esp)
  1000c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000c7:	e8 84 29 00 00       	call   102a50 <kernel_main>

  return;
  1000cc:	83 c4 28             	add    $0x28,%esp
  1000cf:	5d                   	pop    %ebp
  1000d0:	c3                   	ret    
  1000d1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1000d8:	0f 1f 84 00 00 00 00 
  1000df:	00 

001000e0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
	init_keyboard_drv();
  1000e3:	83 ec 08             	sub    $0x8,%esp
  1000e6:	e8 05 02 00 00       	call   1002f0 <init_keyboard_drv>
}
  1000eb:	83 c4 08             	add    $0x8,%esp
  1000ee:	5d                   	pop    %ebp
  1000ef:	c3                   	ret    

001000f0 <translate_scancode>:

static uint8_t buffer[4096];
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000f0:	55                   	push   %ebp
  1000f1:	89 e5                	mov    %esp,%ebp
  1000f3:	83 ec 28             	sub    $0x28,%esp
  1000f6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000fa:	66 89 c1             	mov    %ax,%cx
  1000fd:	8b 45 08             	mov    0x8(%ebp),%eax
  100100:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100103:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  100107:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  10010b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10010e:	89 c2                	mov    %eax,%edx
  100110:	83 ea 02             	sub    $0x2,%edx
  100113:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100116:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100119:	0f 84 4f 00 00 00    	je     10016e <translate_scancode+0x7e>
  10011f:	e9 00 00 00 00       	jmp    100124 <translate_scancode+0x34>
  100124:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100127:	83 e8 01             	sub    $0x1,%eax
  10012a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10012d:	0f 84 28 00 00 00    	je     10015b <translate_scancode+0x6b>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x48>
  100138:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10013b:	85 c0                	test   %eax,%eax
  10013d:	0f 85 54 00 00 00    	jne    100197 <translate_scancode+0xa7>
  100143:	e9 00 00 00 00       	jmp    100148 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100148:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014c:	8a 0c 05 00 40 10 00 	mov    0x104000(,%eax,1),%cl
  100153:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100156:	e9 3c 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10015b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10015f:	8a 0c 05 80 40 10 00 	mov    0x104080(,%eax,1),%cl
  100166:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100169:	e9 29 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10016e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100172:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100177:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10017a:	0f 85 0e 00 00 00    	jne    10018e <translate_scancode+0x9e>
  100180:	e9 00 00 00 00       	jmp    100185 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100185:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100189:	e9 04 00 00 00       	jmp    100192 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10018e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100192:	e9 00 00 00 00       	jmp    100197 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100197:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10019b:	3d 00 00 00 00       	cmp    $0x0,%eax
  1001a0:	0f 85 20 00 00 00    	jne    1001c6 <translate_scancode+0xd6>
  1001a6:	8d 05 f4 50 10 00    	lea    0x1050f4,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1001ac:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001b3:	89 04 24             	mov    %eax,(%esp)
  1001b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001ba:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001be:	e8 bd 21 00 00       	call   102380 <kprintf>
  1001c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001c6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ca:	83 c4 28             	add    $0x28,%esp
  1001cd:	5d                   	pop    %ebp
  1001ce:	c3                   	ret    
  1001cf:	90                   	nop

001001d0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
  return;
  1001d3:	5d                   	pop    %ebp
  1001d4:	c3                   	ret    
  1001d5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1001dc:	00 00 00 00 

001001e0 <getc>:
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}

char getc() {
  1001e0:	55                   	push   %ebp
  1001e1:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  1001e3:	83 ec 08             	sub    $0x8,%esp
  1001e6:	a0 0a a0 10 00       	mov    0x10a00a,%al
  1001eb:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1001ee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001f8:	3b 05 0c b0 10 00    	cmp    0x10b00c,%eax
  1001fe:	0f 8d 24 00 00 00    	jge    100228 <getc+0x48>
		buffer[i] = buffer[i+1];	
  100204:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100207:	8a 0c 05 0b a0 10 00 	mov    0x10a00b(,%eax,1),%cl
  10020e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100211:	88 0c 05 0a a0 10 00 	mov    %cl,0x10a00a(,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100218:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10021b:	05 01 00 00 00       	add    $0x1,%eax
  100220:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100223:	e9 cd ff ff ff       	jmp    1001f5 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100228:	a1 0c b0 10 00       	mov    0x10b00c,%eax
  10022d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100232:	a3 0c b0 10 00       	mov    %eax,0x10b00c

	return ret;
  100237:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10023b:	83 c4 08             	add    $0x8,%esp
  10023e:	5d                   	pop    %ebp
  10023f:	c3                   	ret    

00100240 <send_command>:
}

void send_command(uint8_t command) {
  100240:	55                   	push   %ebp
  100241:	89 e5                	mov    %esp,%ebp
  100243:	83 ec 18             	sub    $0x18,%esp
  100246:	8a 45 08             	mov    0x8(%ebp),%al
  100249:	88 45 ff             	mov    %al,-0x1(%ebp)
  10024c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100251:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100258:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10025b:	e8 40 00 00 00       	call   1002a0 <inb>
  100260:	0f b6 c8             	movzbl %al,%ecx
  100263:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100269:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10026f:	0f 84 05 00 00 00    	je     10027a <send_command+0x3a>
  100275:	e9 d2 ff ff ff       	jmp    10024c <send_command+0xc>
  10027a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10027f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100286:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10028a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10028e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100291:	e8 2a 00 00 00       	call   1002c0 <outb>
}
  100296:	83 c4 18             	add    $0x18,%esp
  100299:	5d                   	pop    %ebp
  10029a:	c3                   	ret    
  10029b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001002a0 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  1002a0:	55                   	push   %ebp
  1002a1:	89 e5                	mov    %esp,%ebp
  1002a3:	50                   	push   %eax
  1002a4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002a8:	66 89 c1             	mov    %ax,%cx
  1002ab:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  1002af:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002b3:	ec                   	in     (%dx),%al
  1002b4:	88 45 fd             	mov    %al,-0x3(%ebp)
	return result;
  1002b7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  1002bb:	83 c4 04             	add    $0x4,%esp
  1002be:	5d                   	pop    %ebp
  1002bf:	c3                   	ret    

001002c0 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  1002c0:	55                   	push   %ebp
  1002c1:	89 e5                	mov    %esp,%ebp
  1002c3:	50                   	push   %eax
  1002c4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002c8:	66 89 c1             	mov    %ax,%cx
  1002cb:	8a 55 0c             	mov    0xc(%ebp),%dl
  1002ce:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  1002d2:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1002d5:	8a 45 fd             	mov    -0x3(%ebp),%al
  1002d8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002dc:	ee                   	out    %al,(%dx)
}
  1002dd:	83 c4 04             	add    $0x4,%esp
  1002e0:	5d                   	pop    %ebp
  1002e1:	c3                   	ret    
  1002e2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1002e9:	1f 84 00 00 00 00 00 

001002f0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1002f0:	55                   	push   %ebp
  1002f1:	89 e5                	mov    %esp,%ebp
  1002f3:	83 ec 28             	sub    $0x28,%esp
  1002f6:	b8 21 00 00 00       	mov    $0x21,%eax
  1002fb:	8d 0d d0 01 10 00    	lea    0x1001d0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  100301:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100308:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10030c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10030f:	e8 cc 1c 00 00       	call   101fe0 <register_intr_handler>
  100314:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100319:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100320:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100323:	e8 78 ff ff ff       	call   1002a0 <inb>
  100328:	0f b6 c8             	movzbl %al,%ecx
  10032b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100331:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100337:	0f 84 1c 00 00 00    	je     100359 <init_keyboard_drv+0x69>
  10033d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100342:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100349:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10034c:	e8 4f ff ff ff       	call   1002a0 <inb>
	}
  100351:	88 45 f3             	mov    %al,-0xd(%ebp)
  100354:	e9 bb ff ff ff       	jmp    100314 <init_keyboard_drv+0x24>
  100359:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10035e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100365:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100368:	e8 d3 fe ff ff       	call   100240 <send_command>

	init_done = 1;
  10036d:	c7 05 10 b0 10 00 01 	movl   $0x1,0x10b010
  100374:	00 00 00 
}
  100377:	83 c4 28             	add    $0x28,%esp
  10037a:	5d                   	pop    %ebp
  10037b:	c3                   	ret    
  10037c:	66 90                	xchg   %ax,%ax
  10037e:	66 90                	xchg   %ax,%ax

00100380 <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  100380:	55                   	push   %ebp
  100381:	89 e5                	mov    %esp,%ebp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100383:	56                   	push   %esi
  100384:	83 ec 10             	sub    $0x10,%esp
  100387:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10038e:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  100395:	0f 8d b7 00 00 00    	jge    100452 <pmm_alloc+0xd2>
		if(allocatable[i]) {
  10039b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10039e:	81 3c 85 2c b4 10 00 	cmpl   $0x0,0x10b42c(,%eax,4)
  1003a5:	00 00 00 00 
  1003a9:	0f 84 8e 00 00 00    	je     10043d <pmm_alloc+0xbd>
			int s;
			for(s = 0; s < 32; s++) {
  1003af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1003b6:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  1003bd:	0f 8d 75 00 00 00    	jge    100438 <pmm_alloc+0xb8>
  1003c3:	b8 01 00 00 00       	mov    $0x1,%eax
				if(allocatable[i] & (1 << s)) {
  1003c8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1003cb:	8b 0c 8d 2c b4 10 00 	mov    0x10b42c(,%ecx,4),%ecx
  1003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1003d5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1003d8:	89 d1                	mov    %edx,%ecx
  1003da:	d3 e0                	shl    %cl,%eax
  1003dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1003df:	21 c2                	and    %eax,%edx
  1003e1:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  1003e7:	0f 84 36 00 00 00    	je     100423 <pmm_alloc+0xa3>
  1003ed:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  1003f2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1003f5:	d3 e0                	shl    %cl,%eax
  1003f7:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  1003fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1003ff:	8b 34 95 2c b4 10 00 	mov    0x10b42c(,%edx,4),%esi
  100406:	21 c6                	and    %eax,%esi
  100408:	89 34 95 2c b4 10 00 	mov    %esi,0x10b42c(,%edx,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  10040f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100412:	c1 e0 05             	shl    $0x5,%eax
  100415:	03 45 f0             	add    -0x10(%ebp),%eax
  100418:	c1 e0 0c             	shl    $0xc,%eax
  10041b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10041e:	e9 36 00 00 00       	jmp    100459 <pmm_alloc+0xd9>
				}
			}
  100423:	e9 00 00 00 00       	jmp    100428 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100428:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10042b:	05 01 00 00 00       	add    $0x1,%eax
  100430:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100433:	e9 7e ff ff ff       	jmp    1003b6 <pmm_alloc+0x36>
				if(allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
  100438:	e9 00 00 00 00       	jmp    10043d <pmm_alloc+0xbd>
	}
  10043d:	e9 00 00 00 00       	jmp    100442 <pmm_alloc+0xc2>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100442:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100445:	05 01 00 00 00       	add    $0x1,%eax
  10044a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10044d:	e9 3c ff ff ff       	jmp    10038e <pmm_alloc+0xe>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  100452:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  100459:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10045c:	83 c4 10             	add    $0x10,%esp
  10045f:	5e                   	pop    %esi
  100460:	5d                   	pop    %ebp
  100461:	c3                   	ret    
  100462:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100469:	1f 84 00 00 00 00 00 

00100470 <pmm_free>:

void pmm_free(void* addr) {
  100470:	55                   	push   %ebp
  100471:	89 e5                	mov    %esp,%ebp
  100473:	56                   	push   %esi
  100474:	83 ec 14             	sub    $0x14,%esp
  100477:	8b 45 08             	mov    0x8(%ebp),%eax
  10047a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10047f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100482:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100485:	c1 e8 0c             	shr    $0xc,%eax
  100488:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10048b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10048e:	25 1f 00 00 00       	and    $0x1f,%eax
  100493:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  100496:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100499:	c1 e8 05             	shr    $0x5,%eax
  10049c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  10049f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1004a2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1004a5:	89 c1                	mov    %eax,%ecx
  1004a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004aa:	d3 e0                	shl    %cl,%eax
  1004ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1004af:	8b 34 95 2c b4 10 00 	mov    0x10b42c(,%edx,4),%esi
  1004b6:	09 c6                	or     %eax,%esi
  1004b8:	89 34 95 2c b4 10 00 	mov    %esi,0x10b42c(,%edx,4)
}
  1004bf:	83 c4 14             	add    $0x14,%esp
  1004c2:	5e                   	pop    %esi
  1004c3:	5d                   	pop    %ebp
  1004c4:	c3                   	ret    
  1004c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1004cc:	00 00 00 00 

001004d0 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
  1004d3:	56                   	push   %esi
  1004d4:	83 ec 14             	sub    $0x14,%esp
  1004d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1004da:	b9 01 00 00 00       	mov    $0x1,%ecx
  1004df:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  1004e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1004e5:	c1 e8 0c             	shr    $0xc,%eax
  1004e8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  1004eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004ee:	25 1f 00 00 00       	and    $0x1f,%eax
  1004f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  1004f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004f9:	c1 e8 05             	shr    $0x5,%eax
  1004fc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  1004ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100502:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100505:	89 c1                	mov    %eax,%ecx
  100507:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10050a:	d3 e0                	shl    %cl,%eax
  10050c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100511:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100514:	8b 34 95 2c b4 10 00 	mov    0x10b42c(,%edx,4),%esi
  10051b:	21 c6                	and    %eax,%esi
  10051d:	89 34 95 2c b4 10 00 	mov    %esi,0x10b42c(,%edx,4)
}
  100524:	83 c4 14             	add    $0x14,%esp
  100527:	5e                   	pop    %esi
  100528:	5d                   	pop    %ebp
  100529:	c3                   	ret    
  10052a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100530 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100530:	55                   	push   %ebp
  100531:	89 e5                	mov    %esp,%ebp
  100533:	53                   	push   %ebx
  100534:	57                   	push   %edi
  100535:	56                   	push   %esi
  100536:	83 ec 5c             	sub    $0x5c,%esp
  100539:	8b 45 08             	mov    0x8(%ebp),%eax
  10053c:	8d 0d 1a 51 10 00    	lea    0x10511a,%ecx
  100542:	8d 15 2c b4 10 00    	lea    0x10b42c,%edx
  100548:	89 d6                	mov    %edx,%esi
  10054a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  100550:	89 d7                	mov    %edx,%edi
  100552:	bb 00 00 00 00       	mov    $0x0,%ebx
  100557:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10055a:	b8 00 00 02 00       	mov    $0x20000,%eax
  10055f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100562:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100565:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  100568:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10056b:	8b 40 30             	mov    0x30(%eax),%eax
  10056e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
  100571:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100574:	8b 40 30             	mov    0x30(%eax),%eax
  100577:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10057a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10057d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100580:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100583:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  100586:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  100589:	03 41 2c             	add    0x2c(%ecx),%eax
  10058c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  10058f:	89 3c 24             	mov    %edi,(%esp)
  100592:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100599:	00 
  10059a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1005a1:	00 
  1005a2:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  1005a5:	89 55 b8             	mov    %edx,-0x48(%ebp)
  1005a8:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  1005ab:	e8 30 22 00 00       	call   1027e0 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  1005b0:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1005b3:	89 04 24             	mov    %eax,(%esp)
  1005b6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  1005b9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1005bd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1005c0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1005c4:	e8 b7 1d 00 00       	call   102380 <kprintf>
  1005c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
	 
	while (mmap < mmap_end) {
  1005cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005cf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  1005d2:	0f 83 60 00 00 00    	jae    100638 <pmm_init+0x108>
		  if (mmap->mm_type == 1) {
  1005d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005db:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  1005e2:	0f 85 40 00 00 00    	jne    100628 <pmm_init+0xf8>
		      uintptr_t addr = mmap->mm_base_addr;
  1005e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005eb:	8b 40 04             	mov    0x4(%eax),%eax
  1005ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  1005f1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1005f4:	8b 49 0c             	mov    0xc(%ecx),%ecx
  1005f7:	01 c8                	add    %ecx,%eax
  1005f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 
		      while (addr < end_addr) {
  1005fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1005ff:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100602:	0f 83 1b 00 00 00    	jae    100623 <pmm_init+0xf3>
		          pmm_free((void*) addr);
  100608:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10060b:	89 04 24             	mov    %eax,(%esp)
  10060e:	e8 5d fe ff ff       	call   100470 <pmm_free>
		          addr += 0x1000;
  100613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100616:	05 00 10 00 00       	add    $0x1000,%eax
  10061b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      }
  10061e:	e9 d9 ff ff ff       	jmp    1005fc <pmm_init+0xcc>
		  }
  100623:	e9 00 00 00 00       	jmp    100628 <pmm_init+0xf8>
		  mmap++;
  100628:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10062b:	05 18 00 00 00       	add    $0x18,%eax
  100630:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  100633:	e9 94 ff ff ff       	jmp    1005cc <pmm_init+0x9c>
  100638:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10063e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100641:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  100647:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  10064a:	0f 83 1b 00 00 00    	jae    10066b <pmm_init+0x13b>
		  pmm_mark_used((void*) addr);
  100650:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100653:	89 04 24             	mov    %eax,(%esp)
  100656:	e8 75 fe ff ff       	call   1004d0 <pmm_mark_used>
		  addr += 0x1000;
  10065b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10065e:	05 00 10 00 00       	add    $0x1000,%eax
  100663:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  100666:	e9 d6 ff ff ff       	jmp    100641 <pmm_init+0x111>

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  10066b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10066e:	8b 40 18             	mov    0x18(%eax),%eax
  100671:	89 45 d8             	mov    %eax,-0x28(%ebp)

  pmm_mark_used(mb_info);
  100674:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100677:	89 04 24             	mov    %eax,(%esp)
  10067a:	e8 51 fe ff ff       	call   1004d0 <pmm_mark_used>
  pmm_mark_used(modules);
  10067f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100682:	89 04 24             	mov    %eax,(%esp)
  100685:	e8 46 fe ff ff       	call   1004d0 <pmm_mark_used>

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  10068a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  100691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100694:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100697:	3b 41 14             	cmp    0x14(%ecx),%eax
  10069a:	0f 83 59 00 00 00    	jae    1006f9 <pmm_init+0x1c9>
      addr = (uintptr_t)modules[i].start;
  1006a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1006a3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1006a6:	c1 e0 04             	shl    $0x4,%eax
  1006a9:	01 c1                	add    %eax,%ecx
  1006ab:	8b 01                	mov    (%ecx),%eax
  1006ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  1006b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006b3:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  1006b6:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1006b9:	c1 e1 04             	shl    $0x4,%ecx
  1006bc:	01 ca                	add    %ecx,%edx
  1006be:	8b 4a 04             	mov    0x4(%edx),%ecx
  1006c1:	39 c8                	cmp    %ecx,%eax
  1006c3:	0f 83 1b 00 00 00    	jae    1006e4 <pmm_init+0x1b4>
          pmm_mark_used((void*) addr);
  1006c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006cc:	89 04 24             	mov    %eax,(%esp)
  1006cf:	e8 fc fd ff ff       	call   1004d0 <pmm_mark_used>
          addr += 0x1000;
  1006d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006d7:	05 00 10 00 00       	add    $0x1000,%eax
  1006dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
      }
  1006df:	e9 cc ff ff ff       	jmp    1006b0 <pmm_init+0x180>
  }
  1006e4:	e9 00 00 00 00       	jmp    1006e9 <pmm_init+0x1b9>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1006e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1006ec:	05 01 00 00 00       	add    $0x1,%eax
  1006f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1006f4:	e9 98 ff ff ff       	jmp    100691 <pmm_init+0x161>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  1006f9:	83 c4 5c             	add    $0x5c,%esp
  1006fc:	5e                   	pop    %esi
  1006fd:	5f                   	pop    %edi
  1006fe:	5b                   	pop    %ebx
  1006ff:	5d                   	pop    %ebp
  100700:	c3                   	ret    
  100701:	66 90                	xchg   %ax,%ax
  100703:	66 90                	xchg   %ax,%ax
  100705:	66 90                	xchg   %ax,%ax
  100707:	66 90                	xchg   %ax,%ax
  100709:	66 90                	xchg   %ax,%ax
  10070b:	66 90                	xchg   %ax,%ax
  10070d:	66 90                	xchg   %ax,%ax
  10070f:	90                   	nop

00100710 <vmm_get_current_pagedir>:
uint32_t* active_pagetables        = (void*)(ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*)(ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

uint32_t vmm_get_current_pagedir(void) {
  100710:	55                   	push   %ebp
  100711:	89 e5                	mov    %esp,%ebp
  return active_pagedir;
  100713:	a1 14 b0 10 00       	mov    0x10b014,%eax
  100718:	5d                   	pop    %ebp
  100719:	c3                   	ret    
  10071a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100720 <vmm_fork_current>:
}

//TODO: join fork_current and create_pagedir together

uint32_t vmm_fork_current(void)
{
  100720:	55                   	push   %ebp
  100721:	89 e5                	mov    %esp,%ebp
  100723:	53                   	push   %ebx
  100724:	57                   	push   %edi
  100725:	56                   	push   %esi
  100726:	81 ec 4c 10 00 00    	sub    $0x104c,%esp
  10072c:	8d 45 f0             	lea    -0x10(%ebp),%eax
  uint32_t phys_context = 0;
  10072f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  100736:	89 04 24             	mov    %eax,(%esp)
  100739:	e8 22 03 00 00       	call   100a60 <vmm_alloc>
  10073e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
  100741:	89 45 ec             	mov    %eax,-0x14(%ebp)
  
  uint32_t phys_pagedir = 0;
  100744:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  10074b:	89 0c 24             	mov    %ecx,(%esp)
  10074e:	e8 0d 03 00 00       	call   100a60 <vmm_alloc>
  100753:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100756:	89 01                	mov    %eax,(%ecx)
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100758:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  10075f:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100766:	0f 83 ab 00 00 00    	jae    100817 <vmm_fork_current+0xf7>
  10076c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  10076f:	89 04 24             	mov    %eax,(%esp)
  100772:	e8 e9 02 00 00       	call   100a60 <vmm_alloc>
  100777:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10077a:	89 84 8d dc ef ff ff 	mov    %eax,-0x1024(%ebp,%ecx,4)
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  100781:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100784:	0d 01 00 00 00       	or     $0x1,%eax
  100789:	0d 02 00 00 00       	or     $0x2,%eax
  10078e:	0d 04 00 00 00       	or     $0x4,%eax
  100793:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100796:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100799:	8b 12                	mov    (%edx),%edx
  10079b:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    for(i2 = 0; i2 < 1024; i2++) {
  10079e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  1007a5:	81 7d dc 00 04 00 00 	cmpl   $0x400,-0x24(%ebp)
  1007ac:	0f 83 50 00 00 00    	jae    100802 <vmm_fork_current+0xe2>
  1007b2:	b8 00 02 00 00       	mov    $0x200,%eax
  1007b7:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  1007bc:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1007bf:	c1 e2 18             	shl    $0x18,%edx
  1007c2:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1007c5:	c1 e6 0c             	shl    $0xc,%esi
  1007c8:	01 f2                	add    %esi,%edx
  1007ca:	89 95 d8 ef ff ff    	mov    %edx,-0x1028(%ebp)
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  1007d0:	81 bd d8 ef ff ff 00 	cmpl   $0x2000000,-0x1028(%ebp)
  1007d7:	00 00 02 
  1007da:	0f 97 c3             	seta   %bl
  1007dd:	84 db                	test   %bl,%bl
  1007df:	0f 44 c1             	cmove  %ecx,%eax
  1007e2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1007e5:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1007e8:	8b 94 95 dc ef ff ff 	mov    -0x1024(%ebp,%edx,4),%edx
  1007ef:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
  for(i = 0; i < 1024; i++) {
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    for(i2 = 0; i2 < 1024; i2++) {
  1007f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1007f5:	05 01 00 00 00       	add    $0x1,%eax
  1007fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1007fd:	e9 a3 ff ff ff       	jmp    1007a5 <vmm_fork_current+0x85>
      uint32_t vaddr = (i << 24) + (i2 << 12);
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  100802:	e9 00 00 00 00       	jmp    100807 <vmm_fork_current+0xe7>
  uint32_t phys_pagedir = 0;
  context->pagedir = vmm_alloc(&phys_pagedir);
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100807:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10080a:	05 01 00 00 00       	add    $0x1,%eax
  10080f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100812:	e9 48 ff ff ff       	jmp    10075f <vmm_fork_current+0x3f>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100817:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  10081e:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100825:	0f 83 5e 00 00 00    	jae    100889 <vmm_fork_current+0x169>
  10082b:	b8 00 00 00 00       	mov    $0x0,%eax
  100830:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
  100836:	8b 55 e0             	mov    -0x20(%ebp),%edx
  100839:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10083c:	8b 36                	mov    (%esi),%esi
  10083e:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100841:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100847:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  10084a:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100850:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100853:	c1 e6 0c             	shl    $0xc,%esi
  100856:	01 f2                	add    %esi,%edx
  100858:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10085b:	89 0c 24             	mov    %ecx,(%esp)
  10085e:	89 54 24 04          	mov    %edx,0x4(%esp)
  100862:	89 74 24 08          	mov    %esi,0x8(%esp)
  100866:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10086d:	00 
  10086e:	89 85 cc ef ff ff    	mov    %eax,-0x1034(%ebp)
  100874:	e8 67 02 00 00       	call   100ae0 <map_address_context>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100879:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10087c:	05 01 00 00 00       	add    $0x1,%eax
  100881:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100884:	e9 95 ff ff ff       	jmp    10081e <vmm_fork_current+0xfe>
  100889:	b8 00 00 00 00       	mov    $0x0,%eax
  10088e:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  100894:	8b 15 04 41 10 00    	mov    0x104104,%edx
  10089a:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10089d:	89 0c 24             	mov    %ecx,(%esp)
  1008a0:	89 54 24 04          	mov    %edx,0x4(%esp)
  1008a4:	89 74 24 08          	mov    %esi,0x8(%esp)
  1008a8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1008af:	00 
  1008b0:	89 85 c8 ef ff ff    	mov    %eax,-0x1038(%ebp)
  1008b6:	e8 25 02 00 00       	call   100ae0 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1008bb:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
  1008c2:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  1008c8:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  1008cb:	0f 83 3f 00 00 00    	jae    100910 <vmm_fork_current+0x1f0>
  1008d1:	b8 00 00 00 00       	mov    $0x0,%eax
  1008d6:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, 0);
  1008dc:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1008df:	8b 75 e0             	mov    -0x20(%ebp),%esi
  1008e2:	89 0c 24             	mov    %ecx,(%esp)
  1008e5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1008e9:	89 74 24 08          	mov    %esi,0x8(%esp)
  1008ed:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1008f4:	00 
  1008f5:	89 85 c4 ef ff ff    	mov    %eax,-0x103c(%ebp)
  1008fb:	e8 e0 01 00 00       	call   100ae0 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100900:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100903:	05 00 10 00 00       	add    $0x1000,%eax
  100908:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10090b:	e9 b2 ff ff ff       	jmp    1008c2 <vmm_fork_current+0x1a2>
    map_address_context(pagedir_ptr, i, i, 0);
  }
  
  for(i = USERSPACE_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  100910:	c7 45 e0 00 00 00 02 	movl   $0x2000000,-0x20(%ebp)
  100917:	81 7d e0 00 f0 ff ff 	cmpl   $0xfffff000,-0x20(%ebp)
  10091e:	0f 83 b6 00 00 00    	jae    1009da <vmm_fork_current+0x2ba>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100924:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100927:	c1 e8 0c             	shr    $0xc,%eax
  10092a:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100930:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100933:	25 01 02 00 00       	and    $0x201,%eax
  100938:	3d 01 02 00 00       	cmp    $0x201,%eax
  10093d:	0f 85 82 00 00 00    	jne    1009c5 <vmm_fork_current+0x2a5>
  100943:	8d 45 e4             	lea    -0x1c(%ebp),%eax
      void* newp = vmm_alloc(&paddr);
  100946:	89 04 24             	mov    %eax,(%esp)
  100949:	e8 12 01 00 00       	call   100a60 <vmm_alloc>
  10094e:	b9 04 02 00 00       	mov    $0x204,%ecx
  100953:	8d 95 dc ef ff ff    	lea    -0x1024(%ebp),%edx
  100959:	be 00 10 00 00       	mov    $0x1000,%esi
  10095e:	89 85 d4 ef ff ff    	mov    %eax,-0x102c(%ebp)
      
      memcpy(newp, (void*)i, 0x1000);
  100964:	8b 85 d4 ef ff ff    	mov    -0x102c(%ebp),%eax
  10096a:	8b 7d e0             	mov    -0x20(%ebp),%edi
  10096d:	89 04 24             	mov    %eax,(%esp)
  100970:	89 7c 24 04          	mov    %edi,0x4(%esp)
  100974:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  10097b:	00 
  10097c:	89 b5 c0 ef ff ff    	mov    %esi,-0x1040(%ebp)
  100982:	89 8d bc ef ff ff    	mov    %ecx,-0x1044(%ebp)
  100988:	89 95 b8 ef ff ff    	mov    %edx,-0x1048(%ebp)
  10098e:	e8 ad 1e 00 00       	call   102840 <memcpy>
      map_address_context(pagedir_ptr, i, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  100993:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100996:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100999:	8b 95 b8 ef ff ff    	mov    -0x1048(%ebp),%edx
  10099f:	89 14 24             	mov    %edx,(%esp)
  1009a2:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009a6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  1009aa:	c7 44 24 0c 04 02 00 	movl   $0x204,0xc(%esp)
  1009b1:	00 
  1009b2:	e8 29 01 00 00       	call   100ae0 <map_address_context>
      
      vmm_unmap(newp);
  1009b7:	8b 85 d4 ef ff ff    	mov    -0x102c(%ebp),%eax
  1009bd:	89 04 24             	mov    %eax,(%esp)
  1009c0:	e8 8b 01 00 00       	call   100b50 <vmm_unmap>
    }
  }
  1009c5:	e9 00 00 00 00       	jmp    1009ca <vmm_fork_current+0x2aa>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
    map_address_context(pagedir_ptr, i, i, 0);
  }
  
  for(i = USERSPACE_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  1009ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1009cd:	05 00 10 00 00       	add    $0x1000,%eax
  1009d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1009d5:	e9 3d ff ff ff       	jmp    100917 <vmm_fork_current+0x1f7>
    }
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  1009da:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  1009e1:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  1009e8:	0f 83 22 00 00 00    	jae    100a10 <vmm_fork_current+0x2f0>
    vmm_unmap((void*)pagedir_ptr[i]); 
  1009ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1009f1:	8b 84 85 dc ef ff ff 	mov    -0x1024(%ebp,%eax,4),%eax
  1009f8:	89 04 24             	mov    %eax,(%esp)
  1009fb:	e8 50 01 00 00       	call   100b50 <vmm_unmap>
    }
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100a00:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100a03:	05 01 00 00 00       	add    $0x1,%eax
  100a08:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100a0b:	e9 d1 ff ff ff       	jmp    1009e1 <vmm_fork_current+0x2c1>
  100a10:	8d 85 dc ef ff ff    	lea    -0x1024(%ebp),%eax
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  100a16:	89 04 24             	mov    %eax,(%esp)
  100a19:	e8 32 01 00 00       	call   100b50 <vmm_unmap>
  
  uint32_t* pd_ptr = context->pagedir;
  100a1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100a21:	8b 00                	mov    (%eax),%eax
  100a23:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  100a29:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a2c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100a2f:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  100a31:	8b 85 d0 ef ff ff    	mov    -0x1030(%ebp),%eax
  100a37:	89 04 24             	mov    %eax,(%esp)
  100a3a:	e8 11 01 00 00       	call   100b50 <vmm_unmap>
  vmm_unmap(context);
  100a3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100a42:	89 04 24             	mov    %eax,(%esp)
  100a45:	e8 06 01 00 00       	call   100b50 <vmm_unmap>
  
  return phys_pagedir;
  100a4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a4d:	81 c4 4c 10 00 00    	add    $0x104c,%esp
  100a53:	5e                   	pop    %esi
  100a54:	5f                   	pop    %edi
  100a55:	5b                   	pop    %ebx
  100a56:	5d                   	pop    %ebp
  100a57:	c3                   	ret    
  100a58:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100a5f:	00 

00100a60 <vmm_alloc>:
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  }
}


void* vmm_alloc(uint32_t* retpaddr) {
  100a60:	55                   	push   %ebp
  100a61:	89 e5                	mov    %esp,%ebp
  100a63:	83 ec 18             	sub    $0x18,%esp
  100a66:	8b 45 08             	mov    0x8(%ebp),%eax
  100a69:	89 45 fc             	mov    %eax,-0x4(%ebp)
  void* vaddr = 0;
  100a6c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  100a73:	c7 45 f4 00 00 00 02 	movl   $0x2000000,-0xc(%ebp)
  100a7a:	81 7d f4 00 f0 ff ff 	cmpl   $0xfffff000,-0xc(%ebp)
  100a81:	0f 87 3f 00 00 00    	ja     100ac6 <vmm_alloc+0x66>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == PT_ALLOCATABLE) {
  100a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100a8a:	c1 e8 0c             	shr    $0xc,%eax
  100a8d:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100a93:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100a96:	25 01 02 00 00       	and    $0x201,%eax
  100a9b:	3d 00 02 00 00       	cmp    $0x200,%eax
  100aa0:	0f 85 0b 00 00 00    	jne    100ab1 <vmm_alloc+0x51>
      vaddr = (void*) i;
  100aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100aa9:	89 45 f8             	mov    %eax,-0x8(%ebp)
      break;
  100aac:	e9 15 00 00 00       	jmp    100ac6 <vmm_alloc+0x66>
    }
  }
  100ab1:	e9 00 00 00 00       	jmp    100ab6 <vmm_alloc+0x56>


void* vmm_alloc(uint32_t* retpaddr) {
  void* vaddr = 0;

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  100ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ab9:	05 00 10 00 00       	add    $0x1000,%eax
  100abe:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100ac1:	e9 b4 ff ff ff       	jmp    100a7a <vmm_alloc+0x1a>
      vaddr = (void*) i;
      break;
    }
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
  100ac6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ac9:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100acc:	89 04 24             	mov    %eax,(%esp)
  100acf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100ad3:	e8 c8 04 00 00       	call   100fa0 <vmm_alloc_addr>
  100ad8:	83 c4 18             	add    $0x18,%esp
  100adb:	5d                   	pop    %ebp
  100adc:	c3                   	ret    
  100add:	0f 1f 00             	nopl   (%eax)

00100ae0 <map_address_context>:
  for(uint32_t i = 0; i < length; i+= 0x1000) {
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  100ae0:	55                   	push   %ebp
  100ae1:	89 e5                	mov    %esp,%ebp
  100ae3:	56                   	push   %esi
  100ae4:	83 ec 18             	sub    $0x18,%esp
  100ae7:	8b 45 14             	mov    0x14(%ebp),%eax
  100aea:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100aed:	8b 55 0c             	mov    0xc(%ebp),%edx
  100af0:	8b 75 08             	mov    0x8(%ebp),%esi
  100af3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100af6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100af9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100afc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t pd_entry =  vaddr >> 22;
  100aff:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b02:	c1 e8 16             	shr    $0x16,%eax
  100b05:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  100b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b0b:	c1 e8 0c             	shr    $0xc,%eax
  100b0e:	25 ff 03 00 00       	and    $0x3ff,%eax
  100b13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  100b16:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100b19:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100b1e:	0d 01 00 00 00       	or     $0x1,%eax
  100b23:	0d 02 00 00 00       	or     $0x2,%eax
  100b28:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100b2b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100b31:	09 c8                	or     %ecx,%eax
  100b33:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100b36:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b39:	8b 75 f8             	mov    -0x8(%ebp),%esi
  100b3c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100b3f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100b45:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
}
  100b48:	83 c4 18             	add    $0x18,%esp
  100b4b:	5e                   	pop    %esi
  100b4c:	5d                   	pop    %ebp
  100b4d:	c3                   	ret    
  100b4e:	66 90                	xchg   %ax,%ax

00100b50 <vmm_unmap>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  }
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  100b50:	55                   	push   %ebp
  100b51:	89 e5                	mov    %esp,%ebp
  100b53:	83 ec 08             	sub    $0x8,%esp
  100b56:	8b 45 08             	mov    0x8(%ebp),%eax
  100b59:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100b5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b5f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100b62:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100b65:	c1 e8 0c             	shr    $0xc,%eax
  100b68:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100b6e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100b71:	25 01 02 00 00       	and    $0x201,%eax
  100b76:	3d 01 02 00 00       	cmp    $0x201,%eax
  100b7b:	0f 85 19 00 00 00    	jne    100b9a <vmm_unmap+0x4a>
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  100b81:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100b84:	c1 e8 0c             	shr    $0xc,%eax
  100b87:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100b8d:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100b94:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100b97:	0f 01 38             	invlpg (%eax)
  }
}
  100b9a:	83 c4 08             	add    $0x8,%esp
  100b9d:	5d                   	pop    %ebp
  100b9e:	c3                   	ret    
  100b9f:	90                   	nop

00100ba0 <vmm_create_pagedir>:
  
  return phys_pagedir;
}

uint32_t vmm_create_pagedir()
{
  100ba0:	55                   	push   %ebp
  100ba1:	89 e5                	mov    %esp,%ebp
  100ba3:	53                   	push   %ebx
  100ba4:	56                   	push   %esi
  100ba5:	81 ec 40 10 00 00    	sub    $0x1040,%esp
  100bab:	8d 45 f4             	lea    -0xc(%ebp),%eax
  uint32_t phys_context = 0;
  100bae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  100bb5:	89 04 24             	mov    %eax,(%esp)
  100bb8:	e8 a3 fe ff ff       	call   100a60 <vmm_alloc>
  100bbd:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  100bc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  uint32_t phys_pagedir = 0;
  100bc3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  100bca:	89 0c 24             	mov    %ecx,(%esp)
  100bcd:	e8 8e fe ff ff       	call   100a60 <vmm_alloc>
  100bd2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100bd5:	89 01                	mov    %eax,(%ecx)
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100bd7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100bde:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  100be5:	0f 83 ab 00 00 00    	jae    100c96 <vmm_create_pagedir+0xf6>
  100beb:	8d 45 e8             	lea    -0x18(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  100bee:	89 04 24             	mov    %eax,(%esp)
  100bf1:	e8 6a fe ff ff       	call   100a60 <vmm_alloc>
  100bf6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100bf9:	89 84 8d e0 ef ff ff 	mov    %eax,-0x1020(%ebp,%ecx,4)
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  100c00:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100c03:	0d 01 00 00 00       	or     $0x1,%eax
  100c08:	0d 02 00 00 00       	or     $0x2,%eax
  100c0d:	0d 04 00 00 00       	or     $0x4,%eax
  100c12:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100c15:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100c18:	8b 12                	mov    (%edx),%edx
  100c1a:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    for(i2 = 0; i2 < 1024; i2++) {
  100c1d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  100c24:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100c2b:	0f 83 50 00 00 00    	jae    100c81 <vmm_create_pagedir+0xe1>
  100c31:	b8 00 02 00 00       	mov    $0x200,%eax
  100c36:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  100c3b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100c3e:	c1 e2 18             	shl    $0x18,%edx
  100c41:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100c44:	c1 e6 0c             	shl    $0xc,%esi
  100c47:	01 f2                	add    %esi,%edx
  100c49:	89 95 dc ef ff ff    	mov    %edx,-0x1024(%ebp)
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  100c4f:	81 bd dc ef ff ff 00 	cmpl   $0x2000000,-0x1024(%ebp)
  100c56:	00 00 02 
  100c59:	0f 97 c3             	seta   %bl
  100c5c:	84 db                	test   %bl,%bl
  100c5e:	0f 44 c1             	cmove  %ecx,%eax
  100c61:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100c64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100c67:	8b 94 95 e0 ef ff ff 	mov    -0x1020(%ebp,%edx,4),%edx
  100c6e:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
  for(i = 0; i < 1024; i++) {
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    for(i2 = 0; i2 < 1024; i2++) {
  100c71:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100c74:	05 01 00 00 00       	add    $0x1,%eax
  100c79:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100c7c:	e9 a3 ff ff ff       	jmp    100c24 <vmm_create_pagedir+0x84>
      uint32_t vaddr = (i << 24) + (i2 << 12);
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  100c81:	e9 00 00 00 00       	jmp    100c86 <vmm_create_pagedir+0xe6>
  uint32_t phys_pagedir = 0;
  context->pagedir = vmm_alloc(&phys_pagedir);
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100c86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100c89:	05 01 00 00 00       	add    $0x1,%eax
  100c8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100c91:	e9 48 ff ff ff       	jmp    100bde <vmm_create_pagedir+0x3e>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100c96:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100c9d:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  100ca4:	0f 83 5e 00 00 00    	jae    100d08 <vmm_create_pagedir+0x168>
  100caa:	b8 00 00 00 00       	mov    $0x0,%eax
  100caf:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
  100cb5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100cb8:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100cbb:	8b 36                	mov    (%esi),%esi
  100cbd:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100cc0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100cc6:	89 55 e8             	mov    %edx,-0x18(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  100cc9:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100ccf:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  100cd2:	c1 e6 0c             	shl    $0xc,%esi
  100cd5:	01 f2                	add    %esi,%edx
  100cd7:	8b 75 e8             	mov    -0x18(%ebp),%esi
  100cda:	89 0c 24             	mov    %ecx,(%esp)
  100cdd:	89 54 24 04          	mov    %edx,0x4(%esp)
  100ce1:	89 74 24 08          	mov    %esi,0x8(%esp)
  100ce5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100cec:	00 
  100ced:	89 85 d4 ef ff ff    	mov    %eax,-0x102c(%ebp)
  100cf3:	e8 e8 fd ff ff       	call   100ae0 <map_address_context>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100cf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100cfb:	05 01 00 00 00       	add    $0x1,%eax
  100d00:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100d03:	e9 95 ff ff ff       	jmp    100c9d <vmm_create_pagedir+0xfd>
  100d08:	b8 00 00 00 00       	mov    $0x0,%eax
  100d0d:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  100d13:	8b 15 04 41 10 00    	mov    0x104104,%edx
  100d19:	8b 75 f4             	mov    -0xc(%ebp),%esi
  100d1c:	89 0c 24             	mov    %ecx,(%esp)
  100d1f:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d23:	89 74 24 08          	mov    %esi,0x8(%esp)
  100d27:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100d2e:	00 
  100d2f:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
  100d35:	e8 a6 fd ff ff       	call   100ae0 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100d3a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
  100d41:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  100d47:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  100d4a:	0f 83 3f 00 00 00    	jae    100d8f <vmm_create_pagedir+0x1ef>
  100d50:	b8 00 00 00 00       	mov    $0x0,%eax
  100d55:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, 0);
  100d5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100d5e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  100d61:	89 0c 24             	mov    %ecx,(%esp)
  100d64:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d68:	89 74 24 08          	mov    %esi,0x8(%esp)
  100d6c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100d73:	00 
  100d74:	89 85 cc ef ff ff    	mov    %eax,-0x1034(%ebp)
  100d7a:	e8 61 fd ff ff       	call   100ae0 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100d7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100d82:	05 00 10 00 00       	add    $0x1000,%eax
  100d87:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100d8a:	e9 b2 ff ff ff       	jmp    100d41 <vmm_create_pagedir+0x1a1>
    map_address_context(pagedir_ptr, i, i, 0);
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100d8f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100d96:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  100d9d:	0f 83 22 00 00 00    	jae    100dc5 <vmm_create_pagedir+0x225>
    vmm_unmap((void*)pagedir_ptr[i]); 
  100da3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100da6:	8b 84 85 e0 ef ff ff 	mov    -0x1020(%ebp,%eax,4),%eax
  100dad:	89 04 24             	mov    %eax,(%esp)
  100db0:	e8 9b fd ff ff       	call   100b50 <vmm_unmap>
    map_address_context(pagedir_ptr, i, i, 0);
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100db5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100db8:	05 01 00 00 00       	add    $0x1,%eax
  100dbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100dc0:	e9 d1 ff ff ff       	jmp    100d96 <vmm_create_pagedir+0x1f6>
  100dc5:	8d 85 e0 ef ff ff    	lea    -0x1020(%ebp),%eax
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  100dcb:	89 04 24             	mov    %eax,(%esp)
  100dce:	e8 7d fd ff ff       	call   100b50 <vmm_unmap>
  
  uint32_t* pd_ptr = context->pagedir;
  100dd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100dd6:	8b 00                	mov    (%eax),%eax
  100dd8:	89 85 d8 ef ff ff    	mov    %eax,-0x1028(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  100dde:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100de1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100de4:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  100de6:	8b 85 d8 ef ff ff    	mov    -0x1028(%ebp),%eax
  100dec:	89 04 24             	mov    %eax,(%esp)
  100def:	e8 5c fd ff ff       	call   100b50 <vmm_unmap>
  vmm_unmap(context);
  100df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100df7:	89 04 24             	mov    %eax,(%esp)
  100dfa:	e8 51 fd ff ff       	call   100b50 <vmm_unmap>
  
  return phys_pagedir;
  100dff:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e02:	81 c4 40 10 00 00    	add    $0x1040,%esp
  100e08:	5e                   	pop    %esi
  100e09:	5b                   	pop    %ebx
  100e0a:	5d                   	pop    %ebp
  100e0b:	c3                   	ret    
  100e0c:	0f 1f 40 00          	nopl   0x0(%eax)

00100e10 <vmm_resolve>:
}

uint32_t vmm_resolve(void* vaddr) {
  100e10:	55                   	push   %ebp
  100e11:	89 e5                	mov    %esp,%ebp
  100e13:	50                   	push   %eax
  100e14:	8b 45 08             	mov    0x8(%ebp),%eax
  100e17:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return active_pagetables[(uint32_t)vaddr >> 12] & 0xFFFFF000;
  100e1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e1d:	c1 e8 0c             	shr    $0xc,%eax
  100e20:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e26:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e29:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100e2e:	83 c4 04             	add    $0x4,%esp
  100e31:	5d                   	pop    %ebp
  100e32:	c3                   	ret    
  100e33:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100e3a:	84 00 00 00 00 00 

00100e40 <vmm_map_range>:
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  100e40:	55                   	push   %ebp
  100e41:	89 e5                	mov    %esp,%ebp
  100e43:	56                   	push   %esi
  100e44:	83 ec 24             	sub    $0x24,%esp
  100e47:	8b 45 14             	mov    0x14(%ebp),%eax
  100e4a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100e4d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100e50:	8b 75 08             	mov    0x8(%ebp),%esi
  100e53:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100e56:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100e59:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100e5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if((uint32_t)vaddr & 0xFFF) return;
  100e5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e62:	25 ff 0f 00 00       	and    $0xfff,%eax
  100e67:	3d 00 00 00 00       	cmp    $0x0,%eax
  100e6c:	0f 84 05 00 00 00    	je     100e77 <vmm_map_range+0x37>
  100e72:	e9 5a 00 00 00       	jmp    100ed1 <vmm_map_range+0x91>
  if((uint32_t)paddr & 0xFFF) return;
  100e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100e7a:	25 ff 0f 00 00       	and    $0xfff,%eax
  100e7f:	3d 00 00 00 00       	cmp    $0x0,%eax
  100e84:	0f 84 05 00 00 00    	je     100e8f <vmm_map_range+0x4f>
  100e8a:	e9 42 00 00 00       	jmp    100ed1 <vmm_map_range+0x91>
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100e8f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  100e96:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100e99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100e9c:	0f 83 2f 00 00 00    	jae    100ed1 <vmm_map_range+0x91>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  100ea2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ea5:	03 45 e8             	add    -0x18(%ebp),%eax
  100ea8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100eab:	03 4d e8             	add    -0x18(%ebp),%ecx
  100eae:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100eb1:	89 04 24             	mov    %eax,(%esp)
  100eb4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100eb8:	89 54 24 08          	mov    %edx,0x8(%esp)
  100ebc:	e8 1f 00 00 00       	call   100ee0 <map_address_active>

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  if((uint32_t)vaddr & 0xFFF) return;
  if((uint32_t)paddr & 0xFFF) return;
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100ec1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ec4:	05 00 10 00 00       	add    $0x1000,%eax
  100ec9:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100ecc:	e9 c5 ff ff ff       	jmp    100e96 <vmm_map_range+0x56>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}
  100ed1:	83 c4 24             	add    $0x24,%esp
  100ed4:	5e                   	pop    %esi
  100ed5:	5d                   	pop    %ebp
  100ed6:	c3                   	ret    
  100ed7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  100ede:	00 00 

00100ee0 <map_address_active>:
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {  
  100ee0:	55                   	push   %ebp
  100ee1:	89 e5                	mov    %esp,%ebp
  100ee3:	83 ec 0c             	sub    $0xc,%esp
  100ee6:	8b 45 10             	mov    0x10(%ebp),%eax
  100ee9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100eec:	8b 55 08             	mov    0x8(%ebp),%edx
  100eef:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100ef2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  100ef8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100efb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100f00:	0d 01 00 00 00       	or     $0x1,%eax
  100f05:	0d 02 00 00 00       	or     $0x2,%eax
  100f0a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100f0d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100f13:	09 c8                	or     %ecx,%eax
  100f15:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100f18:	c1 e9 0c             	shr    $0xc,%ecx
  100f1b:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100f21:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
  asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100f24:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f27:	0f 01 38             	invlpg (%eax)
}
  100f2a:	83 c4 0c             	add    $0xc,%esp
  100f2d:	5d                   	pop    %ebp
  100f2e:	c3                   	ret    
  100f2f:	90                   	nop

00100f30 <vmm_free>:

void vmm_free(void* p_vaddr) {
  100f30:	55                   	push   %ebp
  100f31:	89 e5                	mov    %esp,%ebp
  100f33:	83 ec 18             	sub    $0x18,%esp
  100f36:	8b 45 08             	mov    0x8(%ebp),%eax
  100f39:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100f3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f3f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100f42:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f45:	c1 e8 0c             	shr    $0xc,%eax
  100f48:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100f4e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100f51:	25 01 02 00 00       	and    $0x201,%eax
  100f56:	3d 01 02 00 00       	cmp    $0x201,%eax
  100f5b:	0f 85 35 00 00 00    	jne    100f96 <vmm_free+0x66>
    pmm_free((void*)(active_pagetables[vaddr >> 12] & 0xFFFFF000));
  100f61:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f64:	c1 e8 0c             	shr    $0xc,%eax
  100f67:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100f6d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100f70:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100f75:	89 04 24             	mov    %eax,(%esp)
  100f78:	e8 f3 f4 ff ff       	call   100470 <pmm_free>
   
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  100f7d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f80:	c1 e8 0c             	shr    $0xc,%eax
  100f83:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100f89:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  100f90:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f93:	0f 01 38             	invlpg (%eax)
  }
}
  100f96:	83 c4 18             	add    $0x18,%esp
  100f99:	5d                   	pop    %ebp
  100f9a:	c3                   	ret    
  100f9b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100fa0 <vmm_alloc_addr>:
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  100fa0:	55                   	push   %ebp
  100fa1:	89 e5                	mov    %esp,%ebp
  100fa3:	83 ec 28             	sub    $0x28,%esp
  100fa6:	8b 45 0c             	mov    0xc(%ebp),%eax
  100fa9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100fac:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100faf:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if((active_pagetables[(uint32_t)reqvaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) return 0;
  100fb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100fb5:	c1 e8 0c             	shr    $0xc,%eax
  100fb8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100fbe:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100fc1:	25 01 02 00 00       	and    $0x201,%eax
  100fc6:	3d 00 02 00 00       	cmp    $0x200,%eax
  100fcb:	0f 84 0c 00 00 00    	je     100fdd <vmm_alloc_addr+0x3d>
  100fd1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100fd8:	e9 45 00 00 00       	jmp    101022 <vmm_alloc_addr+0x82>
  100fdd:	b8 04 02 00 00       	mov    $0x204,%eax

  uint32_t paddr = (uint32_t) pmm_alloc();
  100fe2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100fe5:	e8 96 f3 ff ff       	call   100380 <pmm_alloc>
  100fea:	89 45 f0             	mov    %eax,-0x10(%ebp)
  map_address_active((uint32_t)reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  100fed:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ff0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100ff3:	89 04 24             	mov    %eax,(%esp)
  100ff6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100ffa:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  101001:	00 
  101002:	e8 d9 fe ff ff       	call   100ee0 <map_address_active>
  
  if(retpaddr != 0) *retpaddr = paddr;
  101007:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10100e:	0f 84 08 00 00 00    	je     10101c <vmm_alloc_addr+0x7c>
  101014:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101017:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10101a:	89 01                	mov    %eax,(%ecx)
  
  return reqvaddr;
  10101c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10101f:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  101022:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101025:	83 c4 28             	add    $0x28,%esp
  101028:	5d                   	pop    %ebp
  101029:	c3                   	ret    
  10102a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00101030 <vmm_alloc_static>:

//TODO: VMM_ALLOC_STATIC will override already allocated memory

void* vmm_alloc_static(uint32_t offset, uint32_t flags) {
  101030:	55                   	push   %ebp
  101031:	89 e5                	mov    %esp,%ebp
  101033:	83 ec 28             	sub    $0x28,%esp
  101036:	8b 45 0c             	mov    0xc(%ebp),%eax
  101039:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10103c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10103f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(offset < 0x100000) {
  101042:	81 7d f8 00 00 10 00 	cmpl   $0x100000,-0x8(%ebp)
  101049:	0f 83 5f 00 00 00    	jae    1010ae <vmm_alloc_static+0x7e>
    if((offset & 0xFFFFF000) != offset) {
  10104f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101052:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  101057:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  10105a:	0f 84 11 00 00 00    	je     101071 <vmm_alloc_static+0x41>
  101060:	8d 05 30 51 10 00    	lea    0x105130,%eax
      kprintf("Tried to allocate not 4K-aligned static vaddr. \n");
  101066:	89 04 24             	mov    %eax,(%esp)
  101069:	e8 12 13 00 00       	call   102380 <kprintf>
  10106e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    }
    uint32_t vaddr = offset + STATIC_ALLOC_VADDR;
  101071:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101074:	05 00 00 90 01       	add    $0x1900000,%eax
  101079:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t paddr = (uint32_t) pmm_alloc();
  10107c:	e8 ff f2 ff ff       	call   100380 <pmm_alloc>
  101081:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    map_address_active(vaddr, paddr, flags & 0xFFF);
  101084:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101087:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10108a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10108d:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  101093:	89 04 24             	mov    %eax,(%esp)
  101096:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10109a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10109e:	e8 3d fe ff ff       	call   100ee0 <map_address_active>
    return (void*) vaddr;
  1010a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1010a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1010a9:	e9 18 00 00 00       	jmp    1010c6 <vmm_alloc_static+0x96>
  1010ae:	8d 05 61 51 10 00    	lea    0x105161,%eax
  }
  else
  {
    kprintf("Tried to allocate static vaddr outside reserved range. \n");
  1010b4:	89 04 24             	mov    %eax,(%esp)
  1010b7:	e8 c4 12 00 00       	call   102380 <kprintf>
    return 0;
  1010bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1010c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }
}
  1010c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010c9:	83 c4 28             	add    $0x28,%esp
  1010cc:	5d                   	pop    %ebp
  1010cd:	c3                   	ret    
  1010ce:	66 90                	xchg   %ax,%ax

001010d0 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  1010d0:	55                   	push   %ebp
  1010d1:	89 e5                	mov    %esp,%ebp
  1010d3:	50                   	push   %eax
  1010d4:	8b 45 08             	mov    0x8(%ebp),%eax
  1010d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  active_pagedir = pdpaddr;
  1010da:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010dd:	a3 14 b0 10 00       	mov    %eax,0x10b014
  asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  1010e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010e5:	0f 22 d8             	mov    %eax,%cr3
}
  1010e8:	83 c4 04             	add    $0x4,%esp
  1010eb:	5d                   	pop    %ebp
  1010ec:	c3                   	ret    
  1010ed:	0f 1f 00             	nopl   (%eax)

001010f0 <vmm_init>:

uint32_t vmm_init(void)
{
  1010f0:	55                   	push   %ebp
  1010f1:	89 e5                	mov    %esp,%ebp
  //CREATE CONTEXT ************************************************************
  
  struct vmm_context* context = pmm_alloc();
  1010f3:	53                   	push   %ebx
  1010f4:	56                   	push   %esi
  1010f5:	83 ec 40             	sub    $0x40,%esp
  1010f8:	e8 83 f2 ff ff       	call   100380 <pmm_alloc>
  1010fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  101100:	e8 7b f2 ff ff       	call   100380 <pmm_alloc>
  101105:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101108:	89 01                	mov    %eax,(%ecx)
  
  for(i = 0; i < 1024; i++) {
  10110a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101111:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  101118:	0f 83 99 00 00 00    	jae    1011b7 <vmm_init+0xc7>
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  10111e:	e8 5d f2 ff ff       	call   100380 <pmm_alloc>
  101123:	0d 01 00 00 00       	or     $0x1,%eax
  101128:	0d 02 00 00 00       	or     $0x2,%eax
  10112d:	0d 04 00 00 00       	or     $0x4,%eax
  101132:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101135:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101138:	8b 12                	mov    (%edx),%edx
  10113a:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        
    for(i2 = 0; i2 < 1024; i2++) {
  10113d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101144:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  10114b:	0f 83 51 00 00 00    	jae    1011a2 <vmm_init+0xb2>
  101151:	b8 00 02 00 00       	mov    $0x200,%eax
  101156:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  10115b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10115e:	c1 e2 18             	shl    $0x18,%edx
  101161:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101164:	c1 e6 0c             	shl    $0xc,%esi
  101167:	01 f2                	add    %esi,%edx
  101169:	89 55 e8             	mov    %edx,-0x18(%ebp)
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  10116c:	81 7d e8 00 00 00 02 	cmpl   $0x2000000,-0x18(%ebp)
  101173:	0f 97 c3             	seta   %bl
  101176:	84 db                	test   %bl,%bl
  101178:	0f 44 c1             	cmove  %ecx,%eax
  10117b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10117e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101181:	8b 75 f4             	mov    -0xc(%ebp),%esi
  101184:	8b 36                	mov    (%esi),%esi
  101186:	8b 14 96             	mov    (%esi,%edx,4),%edx
  101189:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  10118f:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
        
    for(i2 = 0; i2 < 1024; i2++) {
  101192:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101195:	05 01 00 00 00       	add    $0x1,%eax
  10119a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10119d:	e9 a2 ff ff ff       	jmp    101144 <vmm_init+0x54>
      uint32_t vaddr = (i << 24) + (i2 << 12);
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  1011a2:	e9 00 00 00 00       	jmp    1011a7 <vmm_init+0xb7>
  struct vmm_context* context = pmm_alloc();
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
  1011a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1011aa:	05 01 00 00 00       	add    $0x1,%eax
  1011af:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1011b2:	e9 5a ff ff ff       	jmp    101111 <vmm_init+0x21>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  1011b7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1011be:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  1011c5:	0f 83 5a 00 00 00    	jae    101225 <vmm_init+0x135>
  1011cb:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  1011d0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1011d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1011d6:	8b 12                	mov    (%edx),%edx
  1011d8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1011db:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  1011e1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  1011e4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1011e7:	8b 09                	mov    (%ecx),%ecx
  1011e9:	8b 15 00 41 10 00    	mov    0x104100,%edx
  1011ef:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011f2:	c1 e6 0c             	shl    $0xc,%esi
  1011f5:	01 f2                	add    %esi,%edx
  1011f7:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  1011fa:	89 0c 24             	mov    %ecx,(%esp)
  1011fd:	89 54 24 04          	mov    %edx,0x4(%esp)
  101201:	89 74 24 08          	mov    %esi,0x8(%esp)
  101205:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10120c:	00 
  10120d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  101210:	e8 cb f8 ff ff       	call   100ae0 <map_address_context>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101215:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101218:	05 01 00 00 00       	add    $0x1,%eax
  10121d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101220:	e9 99 ff ff ff       	jmp    1011be <vmm_init+0xce>
  101225:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  10122a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10122d:	8b 09                	mov    (%ecx),%ecx
  10122f:	8b 15 04 41 10 00    	mov    0x104104,%edx
  101235:	8b 75 f4             	mov    -0xc(%ebp),%esi
  101238:	89 0c 24             	mov    %ecx,(%esp)
  10123b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10123f:	89 74 24 08          	mov    %esi,0x8(%esp)
  101243:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10124a:	00 
  10124b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10124e:	e8 8d f8 ff ff       	call   100ae0 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101253:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
  10125a:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  101260:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  101263:	0f 83 3b 00 00 00    	jae    1012a4 <vmm_init+0x1b4>
  101269:	b8 04 00 00 00       	mov    $0x4,%eax
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  10126e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101271:	8b 09                	mov    (%ecx),%ecx
  101273:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101276:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101279:	89 0c 24             	mov    %ecx,(%esp)
  10127c:	89 54 24 04          	mov    %edx,0x4(%esp)
  101280:	89 74 24 08          	mov    %esi,0x8(%esp)
  101284:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  10128b:	00 
  10128c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10128f:	e8 4c f8 ff ff       	call   100ae0 <map_address_context>
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101294:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101297:	05 00 10 00 00       	add    $0x1000,%eax
  10129c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10129f:	e9 b6 ff ff ff       	jmp    10125a <vmm_init+0x16a>
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  }
  
  //END CREATE CONTEXT ********************************************************
  
  vmm_activate_pagedir((uint32_t) context->pagedir);
  1012a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1012a7:	8b 00                	mov    (%eax),%eax
  1012a9:	89 04 24             	mov    %eax,(%esp)
  1012ac:	e8 1f fe ff ff       	call   1010d0 <vmm_activate_pagedir>

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  1012b1:	0f 20 c0             	mov    %cr0,%eax
  1012b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  cr0 |= (1 << 31);
  1012b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1012ba:	0d 00 00 00 80       	or     $0x80000000,%eax
  1012bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  1012c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1012c5:	0f 22 c0             	mov    %eax,%cr0
  
  return (uint32_t) active_context->pagedir;
  1012c8:	a1 04 41 10 00       	mov    0x104104,%eax
  1012cd:	8b 00                	mov    (%eax),%eax
  1012cf:	83 c4 40             	add    $0x40,%esp
  1012d2:	5e                   	pop    %esi
  1012d3:	5b                   	pop    %ebx
  1012d4:	5d                   	pop    %ebp
  1012d5:	c3                   	ret    
  1012d6:	66 90                	xchg   %ax,%ax
  1012d8:	66 90                	xchg   %ax,%ax
  1012da:	66 90                	xchg   %ax,%ax
  1012dc:	66 90                	xchg   %ax,%ax
  1012de:	66 90                	xchg   %ax,%ax

001012e0 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  1012e0:	55                   	push   %ebp
  1012e1:	89 e5                	mov    %esp,%ebp
  1012e3:	53                   	push   %ebx
  1012e4:	57                   	push   %edi
  1012e5:	56                   	push   %esi
  1012e6:	83 ec 10             	sub    $0x10,%esp
  1012e9:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  1012ed:	66 89 c1             	mov    %ax,%cx
  1012f0:	8a 55 14             	mov    0x14(%ebp),%dl
  1012f3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1012f6:	8b 75 08             	mov    0x8(%ebp),%esi
  1012f9:	89 75 f0             	mov    %esi,-0x10(%ebp)
  1012fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1012ff:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  101303:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101306:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101309:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  10130c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  101310:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101313:	89 04 f5 18 b0 10 00 	mov    %eax,0x10b018(,%esi,8)
  10131a:	c7 04 f5 1c b0 10 00 	movl   $0x0,0x10b01c(,%esi,8)
  101321:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  101325:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  101329:	c1 e0 10             	shl    $0x10,%eax
  10132c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10132f:	8b 3c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%edi
  101336:	8b 1c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%ebx
  10133d:	09 c3                	or     %eax,%ebx
  10133f:	89 3c f5 1c b0 10 00 	mov    %edi,0x10b01c(,%esi,8)
  101346:	89 1c f5 18 b0 10 00 	mov    %ebx,0x10b018(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  10134d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  101351:	c1 e0 08             	shl    $0x8,%eax
  101354:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101357:	8b 3c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%edi
  10135e:	8b 1c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%ebx
  101365:	09 c3                	or     %eax,%ebx
  101367:	89 3c f5 18 b0 10 00 	mov    %edi,0x10b018(,%esi,8)
  10136e:	89 1c f5 1c b0 10 00 	mov    %ebx,0x10b01c(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  101375:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  101379:	c1 e0 10             	shl    $0x10,%eax
  10137c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10137f:	8b 3c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%edi
  101386:	8b 1c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%ebx
  10138d:	09 c3                	or     %eax,%ebx
  10138f:	89 3c f5 18 b0 10 00 	mov    %edi,0x10b018(,%esi,8)
  101396:	89 1c f5 1c b0 10 00 	mov    %ebx,0x10b01c(,%esi,8)
}
  10139d:	83 c4 10             	add    $0x10,%esp
  1013a0:	5e                   	pop    %esi
  1013a1:	5f                   	pop    %edi
  1013a2:	5b                   	pop    %ebx
  1013a3:	5d                   	pop    %ebp
  1013a4:	c3                   	ret    
  1013a5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1013ac:	00 00 00 00 

001013b0 <init_idt>:

void init_idt() {
  1013b0:	55                   	push   %ebp
  1013b1:	89 e5                	mov    %esp,%ebp
	struct {
  1013b3:	56                   	push   %esi
  1013b4:	81 ec 34 02 00 00    	sub    $0x234,%esp
  1013ba:	a1 00 50 10 00       	mov    0x105000,%eax
  1013bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1013c2:	66 8b 0d 04 50 10 00 	mov    0x105004,%cx
  1013c9:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};

	int i = 0;
  1013cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  1013d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1013db:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  1013e2:	0f 8d 1e 00 00 00    	jge    101406 <init_idt+0x56>
		handler_set[i] = 0;
  1013e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1013eb:	c7 04 85 18 b2 10 00 	movl   $0x0,0x10b218(,%eax,4)
  1013f2:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  1013f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1013f9:	05 01 00 00 00       	add    $0x1,%eax
  1013fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101401:	e9 d5 ff ff ff       	jmp    1013db <init_idt+0x2b>
  101406:	b8 20 00 00 00       	mov    $0x20,%eax
  10140b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  101410:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101417:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10141e:	00 
  10141f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101422:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  101425:	e8 86 0b 00 00       	call   101fb0 <outb>
  10142a:	b8 21 00 00 00       	mov    $0x21,%eax
  10142f:	b9 20 00 00 00       	mov    $0x20,%ecx
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  101434:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10143b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101442:	00 
  101443:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101446:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  101449:	e8 62 0b 00 00       	call   101fb0 <outb>
  10144e:	b8 21 00 00 00       	mov    $0x21,%eax
  101453:	b9 04 00 00 00       	mov    $0x4,%ecx
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  101458:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10145f:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  101466:	00 
  101467:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10146a:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10146d:	e8 3e 0b 00 00       	call   101fb0 <outb>
  101472:	b8 21 00 00 00       	mov    $0x21,%eax
  101477:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0x21, 0x01); // ICW 4
  10147c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101483:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10148a:	00 
  10148b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10148e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  101491:	e8 1a 0b 00 00       	call   101fb0 <outb>
  101496:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10149b:	b9 11 00 00 00       	mov    $0x11,%ecx

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  1014a0:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1014a7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1014ae:	00 
  1014af:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1014b2:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  1014b5:	e8 f6 0a 00 00       	call   101fb0 <outb>
  1014ba:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1014bf:	b9 28 00 00 00       	mov    $0x28,%ecx
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  1014c4:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1014cb:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  1014d2:	00 
  1014d3:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1014d6:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  1014d9:	e8 d2 0a 00 00       	call   101fb0 <outb>
  1014de:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1014e3:	b9 02 00 00 00       	mov    $0x2,%ecx
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  1014e8:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1014ef:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1014f6:	00 
  1014f7:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1014fa:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  1014fd:	e8 ae 0a 00 00       	call   101fb0 <outb>
  101502:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101507:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0xa1, 0x01); // ICW 4
  10150c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101513:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10151a:	00 
  10151b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10151e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  101521:	e8 8a 0a 00 00       	call   101fb0 <outb>
  101526:	b8 20 00 00 00       	mov    $0x20,%eax
  10152b:	b9 00 00 00 00       	mov    $0x0,%ecx

  outb(0x20, 0x0);
  101530:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101537:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10153e:	00 
  10153f:	89 45 a8             	mov    %eax,-0x58(%ebp)
  101542:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  101545:	e8 66 0a 00 00       	call   101fb0 <outb>
  10154a:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10154f:	b9 00 00 00 00       	mov    $0x0,%ecx
  outb(0xa0, 0x0);
  101554:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10155b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101562:	00 
  101563:	89 45 a0             	mov    %eax,-0x60(%ebp)
  101566:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  101569:	e8 42 0a 00 00       	call   101fb0 <outb>
  10156e:	b8 00 00 00 00       	mov    $0x0,%eax
  101573:	8d 0d e0 2c 10 00    	lea    0x102ce0,%ecx
  101579:	ba 08 00 00 00       	mov    $0x8,%edx
  10157e:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101583:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10158a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10158e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101595:	00 
  101596:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10159d:	00 
  10159e:	89 45 98             	mov    %eax,-0x68(%ebp)
  1015a1:	89 75 94             	mov    %esi,-0x6c(%ebp)
  1015a4:	89 55 90             	mov    %edx,-0x70(%ebp)
  1015a7:	e8 34 fd ff ff       	call   1012e0 <idt_set_entry>
  1015ac:	b8 01 00 00 00       	mov    $0x1,%eax
  1015b1:	8d 0d e9 2c 10 00    	lea    0x102ce9,%ecx
  1015b7:	ba 08 00 00 00       	mov    $0x8,%edx
  1015bc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015c1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1015c8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015cc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015d3:	00 
  1015d4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015db:	00 
  1015dc:	89 45 8c             	mov    %eax,-0x74(%ebp)
  1015df:	89 75 88             	mov    %esi,-0x78(%ebp)
  1015e2:	89 55 84             	mov    %edx,-0x7c(%ebp)
  1015e5:	e8 f6 fc ff ff       	call   1012e0 <idt_set_entry>
  1015ea:	b8 02 00 00 00       	mov    $0x2,%eax
  1015ef:	8d 0d f2 2c 10 00    	lea    0x102cf2,%ecx
  1015f5:	ba 08 00 00 00       	mov    $0x8,%edx
  1015fa:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015ff:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101606:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10160a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101611:	00 
  101612:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101619:	00 
  10161a:	89 45 80             	mov    %eax,-0x80(%ebp)
  10161d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  101623:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  101629:	e8 b2 fc ff ff       	call   1012e0 <idt_set_entry>
  10162e:	b8 03 00 00 00       	mov    $0x3,%eax
  101633:	8d 0d fb 2c 10 00    	lea    0x102cfb,%ecx
  101639:	ba 08 00 00 00       	mov    $0x8,%edx
  10163e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101643:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  10164a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10164e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101655:	00 
  101656:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10165d:	00 
  10165e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  101664:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  10166a:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101670:	e8 6b fc ff ff       	call   1012e0 <idt_set_entry>
  101675:	b8 04 00 00 00       	mov    $0x4,%eax
  10167a:	8d 0d 04 2d 10 00    	lea    0x102d04,%ecx
  101680:	ba 08 00 00 00       	mov    $0x8,%edx
  101685:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10168a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101691:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101695:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10169c:	00 
  10169d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016a4:	00 
  1016a5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  1016ab:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  1016b1:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  1016b7:	e8 24 fc ff ff       	call   1012e0 <idt_set_entry>
  1016bc:	b8 05 00 00 00       	mov    $0x5,%eax
  1016c1:	8d 0d 0d 2d 10 00    	lea    0x102d0d,%ecx
  1016c7:	ba 08 00 00 00       	mov    $0x8,%edx
  1016cc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016d1:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1016d8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016dc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016e3:	00 
  1016e4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016eb:	00 
  1016ec:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  1016f2:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  1016f8:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  1016fe:	e8 dd fb ff ff       	call   1012e0 <idt_set_entry>
  101703:	b8 06 00 00 00       	mov    $0x6,%eax
  101708:	8d 0d 16 2d 10 00    	lea    0x102d16,%ecx
  10170e:	ba 08 00 00 00       	mov    $0x8,%edx
  101713:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101718:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10171f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101723:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10172a:	00 
  10172b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101732:	00 
  101733:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  101739:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  10173f:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  101745:	e8 96 fb ff ff       	call   1012e0 <idt_set_entry>
  10174a:	b8 07 00 00 00       	mov    $0x7,%eax
  10174f:	8d 0d 1f 2d 10 00    	lea    0x102d1f,%ecx
  101755:	ba 08 00 00 00       	mov    $0x8,%edx
  10175a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10175f:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101766:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10176a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101771:	00 
  101772:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101779:	00 
  10177a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101780:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101786:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10178c:	e8 4f fb ff ff       	call   1012e0 <idt_set_entry>
  101791:	b8 08 00 00 00       	mov    $0x8,%eax
  101796:	8d 0d 28 2d 10 00    	lea    0x102d28,%ecx
  10179c:	ba 8e 00 00 00       	mov    $0x8e,%edx
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017a1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1017a8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017ac:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017b3:	00 
  1017b4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017bb:	00 
  1017bc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  1017c2:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  1017c8:	e8 13 fb ff ff       	call   1012e0 <idt_set_entry>
  1017cd:	b8 09 00 00 00       	mov    $0x9,%eax
  1017d2:	8d 0d 2f 2d 10 00    	lea    0x102d2f,%ecx
  1017d8:	ba 08 00 00 00       	mov    $0x8,%edx
  1017dd:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017e2:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  1017e9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017ed:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017f4:	00 
  1017f5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017fc:	00 
  1017fd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101803:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101809:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10180f:	e8 cc fa ff ff       	call   1012e0 <idt_set_entry>
  101814:	b8 0a 00 00 00       	mov    $0xa,%eax
  101819:	8d 0d 38 2d 10 00    	lea    0x102d38,%ecx
  10181f:	ba 08 00 00 00       	mov    $0x8,%edx
  101824:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101829:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  101830:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101834:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10183b:	00 
  10183c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101843:	00 
  101844:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  10184a:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  101850:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  101856:	e8 85 fa ff ff       	call   1012e0 <idt_set_entry>
  10185b:	b8 0b 00 00 00       	mov    $0xb,%eax
  101860:	8d 0d 3f 2d 10 00    	lea    0x102d3f,%ecx
  101866:	ba 08 00 00 00       	mov    $0x8,%edx
  10186b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101870:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101877:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10187b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101882:	00 
  101883:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10188a:	00 
  10188b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101891:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101897:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10189d:	e8 3e fa ff ff       	call   1012e0 <idt_set_entry>
  1018a2:	b8 0c 00 00 00       	mov    $0xc,%eax
  1018a7:	8d 0d 46 2d 10 00    	lea    0x102d46,%ecx
  1018ad:	ba 08 00 00 00       	mov    $0x8,%edx
  1018b2:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018b7:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  1018be:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018c2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018c9:	00 
  1018ca:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018d1:	00 
  1018d2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  1018d8:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  1018de:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  1018e4:	e8 f7 f9 ff ff       	call   1012e0 <idt_set_entry>
  1018e9:	b8 0d 00 00 00       	mov    $0xd,%eax
  1018ee:	8d 0d 4d 2d 10 00    	lea    0x102d4d,%ecx
  1018f4:	ba 08 00 00 00       	mov    $0x8,%edx
  1018f9:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018fe:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101905:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101909:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101910:	00 
  101911:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101918:	00 
  101919:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10191f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  101925:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  10192b:	e8 b0 f9 ff ff       	call   1012e0 <idt_set_entry>
  101930:	b8 0e 00 00 00       	mov    $0xe,%eax
  101935:	8d 0d 54 2d 10 00    	lea    0x102d54,%ecx
  10193b:	ba 08 00 00 00       	mov    $0x8,%edx
  101940:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101945:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  10194c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101950:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101957:	00 
  101958:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10195f:	00 
  101960:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  101966:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  10196c:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101972:	e8 69 f9 ff ff       	call   1012e0 <idt_set_entry>
  101977:	b8 0f 00 00 00       	mov    $0xf,%eax
  10197c:	8d 0d 58 2d 10 00    	lea    0x102d58,%ecx
  101982:	ba 08 00 00 00       	mov    $0x8,%edx
  101987:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10198c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101993:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101997:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10199e:	00 
  10199f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019a6:	00 
  1019a7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  1019ad:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  1019b3:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  1019b9:	e8 22 f9 ff ff       	call   1012e0 <idt_set_entry>
  1019be:	b8 10 00 00 00       	mov    $0x10,%eax
  1019c3:	8d 0d 5e 2d 10 00    	lea    0x102d5e,%ecx
  1019c9:	ba 08 00 00 00       	mov    $0x8,%edx
  1019ce:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019d3:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1019da:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019de:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019e5:	00 
  1019e6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019ed:	00 
  1019ee:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  1019f4:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  1019fa:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101a00:	e8 db f8 ff ff       	call   1012e0 <idt_set_entry>
  101a05:	b8 11 00 00 00       	mov    $0x11,%eax
  101a0a:	8d 0d 64 2d 10 00    	lea    0x102d64,%ecx
  101a10:	ba 08 00 00 00       	mov    $0x8,%edx
  101a15:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a1a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101a21:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a25:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a2c:	00 
  101a2d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a34:	00 
  101a35:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  101a3b:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  101a41:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  101a47:	e8 94 f8 ff ff       	call   1012e0 <idt_set_entry>
  101a4c:	b8 12 00 00 00       	mov    $0x12,%eax
  101a51:	8d 0d 68 2d 10 00    	lea    0x102d68,%ecx
  101a57:	ba 08 00 00 00       	mov    $0x8,%edx
  101a5c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a61:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  101a68:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a6c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a73:	00 
  101a74:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a7b:	00 
  101a7c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101a82:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101a88:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  101a8e:	e8 4d f8 ff ff       	call   1012e0 <idt_set_entry>
  101a93:	b8 20 00 00 00       	mov    $0x20,%eax
  101a98:	8d 0d 6e 2d 10 00    	lea    0x102d6e,%ecx
  101a9e:	ba 08 00 00 00       	mov    $0x8,%edx
  101aa3:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101aa8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101aaf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ab3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101aba:	00 
  101abb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ac2:	00 
  101ac3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101ac9:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  101acf:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101ad5:	e8 06 f8 ff ff       	call   1012e0 <idt_set_entry>
  101ada:	b8 21 00 00 00       	mov    $0x21,%eax
  101adf:	8d 0d 74 2d 10 00    	lea    0x102d74,%ecx
  101ae5:	ba 08 00 00 00       	mov    $0x8,%edx
  101aea:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101aef:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101af6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101afa:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b01:	00 
  101b02:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b09:	00 
  101b0a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  101b10:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  101b16:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  101b1c:	e8 bf f7 ff ff       	call   1012e0 <idt_set_entry>
  101b21:	b8 22 00 00 00       	mov    $0x22,%eax
  101b26:	8d 0d 7a 2d 10 00    	lea    0x102d7a,%ecx
  101b2c:	ba 08 00 00 00       	mov    $0x8,%edx
  101b31:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(34, intr_stub_34, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b36:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  101b3d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b41:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b48:	00 
  101b49:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b50:	00 
  101b51:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  101b57:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  101b5d:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  101b63:	e8 78 f7 ff ff       	call   1012e0 <idt_set_entry>
  101b68:	b8 23 00 00 00       	mov    $0x23,%eax
  101b6d:	8d 0d 80 2d 10 00    	lea    0x102d80,%ecx
  101b73:	ba 08 00 00 00       	mov    $0x8,%edx
  101b78:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(35, intr_stub_35, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b7d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101b84:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b88:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b8f:	00 
  101b90:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b97:	00 
  101b98:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101b9e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101ba4:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101baa:	e8 31 f7 ff ff       	call   1012e0 <idt_set_entry>
  101baf:	b8 24 00 00 00       	mov    $0x24,%eax
  101bb4:	8d 0d 86 2d 10 00    	lea    0x102d86,%ecx
  101bba:	ba 08 00 00 00       	mov    $0x8,%edx
  101bbf:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(36, intr_stub_36, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101bc4:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101bcb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101bcf:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bd6:	00 
  101bd7:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bde:	00 
  101bdf:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101be5:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101beb:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101bf1:	e8 ea f6 ff ff       	call   1012e0 <idt_set_entry>
  101bf6:	b8 25 00 00 00       	mov    $0x25,%eax
  101bfb:	8d 0d 8c 2d 10 00    	lea    0x102d8c,%ecx
  101c01:	ba 08 00 00 00       	mov    $0x8,%edx
  101c06:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(37, intr_stub_37, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c0b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101c12:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c16:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c1d:	00 
  101c1e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c25:	00 
  101c26:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101c2c:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101c32:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101c38:	e8 a3 f6 ff ff       	call   1012e0 <idt_set_entry>
  101c3d:	b8 26 00 00 00       	mov    $0x26,%eax
  101c42:	8d 0d 92 2d 10 00    	lea    0x102d92,%ecx
  101c48:	ba 08 00 00 00       	mov    $0x8,%edx
  101c4d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(38, intr_stub_38, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c52:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101c59:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c5d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c64:	00 
  101c65:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c6c:	00 
  101c6d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101c73:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101c79:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101c7f:	e8 5c f6 ff ff       	call   1012e0 <idt_set_entry>
  101c84:	b8 27 00 00 00       	mov    $0x27,%eax
  101c89:	8d 0d 98 2d 10 00    	lea    0x102d98,%ecx
  101c8f:	ba 08 00 00 00       	mov    $0x8,%edx
  101c94:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(39, intr_stub_39, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c99:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101ca0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ca4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101cab:	00 
  101cac:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101cb3:	00 
  101cb4:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101cba:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101cc0:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101cc6:	e8 15 f6 ff ff       	call   1012e0 <idt_set_entry>
  101ccb:	b8 28 00 00 00       	mov    $0x28,%eax
  101cd0:	8d 0d 9e 2d 10 00    	lea    0x102d9e,%ecx
  101cd6:	ba 08 00 00 00       	mov    $0x8,%edx
  101cdb:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(40, intr_stub_40, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ce0:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101ce7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ceb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101cf2:	00 
  101cf3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101cfa:	00 
  101cfb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101d01:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101d07:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101d0d:	e8 ce f5 ff ff       	call   1012e0 <idt_set_entry>
  101d12:	b8 29 00 00 00       	mov    $0x29,%eax
  101d17:	8d 0d a4 2d 10 00    	lea    0x102da4,%ecx
  101d1d:	ba 08 00 00 00       	mov    $0x8,%edx
  101d22:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(41, intr_stub_41, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d27:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101d2e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d32:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d39:	00 
  101d3a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d41:	00 
  101d42:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101d48:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101d4e:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101d54:	e8 87 f5 ff ff       	call   1012e0 <idt_set_entry>
  101d59:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101d5e:	8d 0d aa 2d 10 00    	lea    0x102daa,%ecx
  101d64:	ba 08 00 00 00       	mov    $0x8,%edx
  101d69:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(42, intr_stub_42, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d6e:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101d75:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d79:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d80:	00 
  101d81:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d88:	00 
  101d89:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101d8f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101d95:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101d9b:	e8 40 f5 ff ff       	call   1012e0 <idt_set_entry>
  101da0:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101da5:	8d 0d b0 2d 10 00    	lea    0x102db0,%ecx
  101dab:	ba 08 00 00 00       	mov    $0x8,%edx
  101db0:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(43, intr_stub_43, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101db5:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101dbc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101dc0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101dc7:	00 
  101dc8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101dcf:	00 
  101dd0:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101dd6:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101ddc:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101de2:	e8 f9 f4 ff ff       	call   1012e0 <idt_set_entry>
  101de7:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101dec:	8d 0d b6 2d 10 00    	lea    0x102db6,%ecx
  101df2:	ba 08 00 00 00       	mov    $0x8,%edx
  101df7:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(44, intr_stub_44, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101dfc:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101e03:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e07:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e0e:	00 
  101e0f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e16:	00 
  101e17:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101e1d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101e23:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101e29:	e8 b2 f4 ff ff       	call   1012e0 <idt_set_entry>
  101e2e:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101e33:	8d 0d bc 2d 10 00    	lea    0x102dbc,%ecx
  101e39:	ba 08 00 00 00       	mov    $0x8,%edx
  101e3e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(45, intr_stub_45, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e43:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101e4a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e4e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e55:	00 
  101e56:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e5d:	00 
  101e5e:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  101e64:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  101e6a:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101e70:	e8 6b f4 ff ff       	call   1012e0 <idt_set_entry>
  101e75:	b8 2e 00 00 00       	mov    $0x2e,%eax
  101e7a:	8d 0d c2 2d 10 00    	lea    0x102dc2,%ecx
  101e80:	ba 08 00 00 00       	mov    $0x8,%edx
  101e85:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(46, intr_stub_46, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e8a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101e91:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e95:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e9c:	00 
  101e9d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ea4:	00 
  101ea5:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  101eab:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101eb1:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101eb7:	e8 24 f4 ff ff       	call   1012e0 <idt_set_entry>
  101ebc:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101ec1:	8d 0d c8 2d 10 00    	lea    0x102dc8,%ecx
  101ec7:	ba 08 00 00 00       	mov    $0x8,%edx
  101ecc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(47, intr_stub_47, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ed1:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101ed8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101edc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ee3:	00 
  101ee4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101eeb:	00 
  101eec:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101ef2:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101ef8:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  101efe:	e8 dd f3 ff ff       	call   1012e0 <idt_set_entry>
  101f03:	b8 30 00 00 00       	mov    $0x30,%eax
  101f08:	8d 0d ce 2d 10 00    	lea    0x102dce,%ecx
  101f0e:	ba 08 00 00 00       	mov    $0x8,%edx
  101f13:	be ee 00 00 00       	mov    $0xee,%esi

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101f18:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101f1f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f23:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f2a:	00 
  101f2b:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101f32:	00 
  101f33:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  101f39:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  101f3f:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  101f45:	e8 96 f3 ff ff       	call   1012e0 <idt_set_entry>
  101f4a:	b8 05 00 00 00       	mov    $0x5,%eax
  101f4f:	8d 0d 08 41 10 00    	lea    0x104108,%ecx
  101f55:	ba 80 00 00 00       	mov    $0x80,%edx
  101f5a:	be e9 00 00 00       	mov    $0xe9,%esi

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101f5f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101f66:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f6a:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101f71:	00 
  101f72:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101f79:	00 
  101f7a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101f80:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101f86:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  101f8c:	e8 bf 0e 00 00       	call   102e50 <set_gdt_entry>
  101f91:	b8 28 00 00 00       	mov    $0x28,%eax

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101f96:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101f99:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  101f9d:	fb                   	sti    
}
  101f9e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101fa4:	5e                   	pop    %esi
  101fa5:	5d                   	pop    %ebp
  101fa6:	c3                   	ret    
  101fa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  101fae:	00 00 

00101fb0 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  101fb0:	55                   	push   %ebp
  101fb1:	89 e5                	mov    %esp,%ebp
  101fb3:	50                   	push   %eax
  101fb4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101fb8:	66 89 c1             	mov    %ax,%cx
  101fbb:	8a 55 0c             	mov    0xc(%ebp),%dl
  101fbe:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101fc2:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101fc5:	8a 45 fd             	mov    -0x3(%ebp),%al
  101fc8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101fcc:	ee                   	out    %al,(%dx)
}
  101fcd:	83 c4 04             	add    $0x4,%esp
  101fd0:	5d                   	pop    %ebp
  101fd1:	c3                   	ret    
  101fd2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101fd9:	1f 84 00 00 00 00 00 

00101fe0 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  101fe0:	55                   	push   %ebp
  101fe1:	89 e5                	mov    %esp,%ebp
  101fe3:	83 ec 08             	sub    $0x8,%esp
  101fe6:	8b 45 0c             	mov    0xc(%ebp),%eax
  101fe9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101fec:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  101fef:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101ff2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ff5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101ff8:	89 04 8d 18 b3 10 00 	mov    %eax,0x10b318(,%ecx,4)
	handler_set[i] = 1;
  101fff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102002:	c7 04 85 18 b2 10 00 	movl   $0x1,0x10b218(,%eax,4)
  102009:	01 00 00 00 
}
  10200d:	83 c4 08             	add    $0x8,%esp
  102010:	5d                   	pop    %ebp
  102011:	c3                   	ret    
  102012:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102019:	1f 84 00 00 00 00 00 

00102020 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  102020:	55                   	push   %ebp
  102021:	89 e5                	mov    %esp,%ebp
  102023:	83 ec 28             	sub    $0x28,%esp
  102026:	8b 45 08             	mov    0x8(%ebp),%eax
  102029:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct cpu_state* new_cpu = cpu;
  10202c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10202f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if (cpu->intr <= 0x1f) {
  102032:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102035:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  10203c:	0f 87 3d 00 00 00    	ja     10207f <handle_interrupt+0x5f>
    if(!scheduling_enabled()) {
  102042:	e8 89 10 00 00       	call   1030d0 <scheduling_enabled>
  102047:	3d 00 00 00 00       	cmp    $0x0,%eax
  10204c:	0f 85 1a 00 00 00    	jne    10206c <handle_interrupt+0x4c>
  102052:	8d 05 9a 51 10 00    	lea    0x10519a,%eax
      show_cod(cpu, "Kernel PANIC!");
  102058:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10205b:	89 0c 24             	mov    %ecx,(%esp)
  10205e:	89 44 24 04          	mov    %eax,0x4(%esp)
  102062:	e8 39 01 00 00       	call   1021a0 <show_cod>
    }
  102067:	e9 0e 00 00 00       	jmp    10207a <handle_interrupt+0x5a>
    else
    {
      schedule_exception(cpu);
  10206c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10206f:	89 04 24             	mov    %eax,(%esp)
  102072:	e8 69 10 00 00       	call   1030e0 <schedule_exception>
  102077:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  10207a:	e9 16 01 00 00       	jmp    102195 <handle_interrupt+0x175>
  10207f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102082:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  102089:	0f 82 b4 00 00 00    	jb     102143 <handle_interrupt+0x123>
  10208f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102092:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  102099:	0f 87 a4 00 00 00    	ja     102143 <handle_interrupt+0x123>
    if (cpu->intr >= 0x28) {
  10209f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020a2:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  1020a9:	0f 82 24 00 00 00    	jb     1020d3 <handle_interrupt+0xb3>
  1020af:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1020b4:	b9 20 00 00 00       	mov    $0x20,%ecx
      outb(0xa0, 0x20);
  1020b9:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1020c0:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1020c7:	00 
  1020c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1020cb:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1020ce:	e8 dd fe ff ff       	call   101fb0 <outb>
    }
    if (cpu->intr == 0x20) {
  1020d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020d6:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  1020dd:	0f 85 1b 00 00 00    	jne    1020fe <handle_interrupt+0xde>
      new_cpu = schedule(cpu);
  1020e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020e6:	89 04 24             	mov    %eax,(%esp)
  1020e9:	e8 62 11 00 00       	call   103250 <schedule>
  1020ee:	89 45 f8             	mov    %eax,-0x8(%ebp)
      tss[1] = (uint32_t) (new_cpu + 1);
  1020f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1020f4:	05 38 00 00 00       	add    $0x38,%eax
  1020f9:	a3 0c 41 10 00       	mov    %eax,0x10410c
  1020fe:	b8 20 00 00 00       	mov    $0x20,%eax
    }
    outb(0x20, 0x20);
  102103:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10210a:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102111:	00 
  102112:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102115:	e8 96 fe ff ff       	call   101fb0 <outb>
		if(handler_set[cpu->intr]) {
  10211a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10211d:	8b 40 1c             	mov    0x1c(%eax),%eax
  102120:	81 3c 85 18 b2 10 00 	cmpl   $0x0,0x10b218(,%eax,4)
  102127:	00 00 00 00 
  10212b:	0f 84 0d 00 00 00    	je     10213e <handle_interrupt+0x11e>
			handlers[cpu->intr]();
  102131:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102134:	8b 40 1c             	mov    0x1c(%eax),%eax
  102137:	ff 14 85 18 b3 10 00 	call   *0x10b318(,%eax,4)
		}
  } else if (cpu->intr == 0x30) {
  10213e:	e9 4d 00 00 00       	jmp    102190 <handle_interrupt+0x170>
  102143:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102146:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  10214d:	0f 85 20 00 00 00    	jne    102173 <handle_interrupt+0x153>
		new_cpu = syscall(new_cpu);
  102153:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102156:	89 04 24             	mov    %eax,(%esp)
  102159:	e8 52 07 00 00       	call   1028b0 <syscall>
  10215e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    tss[1] = (uint32_t) (new_cpu + 1);
  102161:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102164:	05 38 00 00 00       	add    $0x38,%eax
  102169:	a3 0c 41 10 00       	mov    %eax,0x10410c
  } else {
  10216e:	e9 18 00 00 00       	jmp    10218b <handle_interrupt+0x16b>
  102173:	8d 05 a8 51 10 00    	lea    0x1051a8,%eax
    kprintf("Unbekannter Interrupt\n");
  102179:	89 04 24             	mov    %eax,(%esp)
  10217c:	e8 ff 01 00 00       	call   102380 <kprintf>
  102181:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  102184:	fa                   	cli    
  102185:	f4                   	hlt    
    }
  102186:	e9 f9 ff ff ff       	jmp    102184 <handle_interrupt+0x164>
  10218b:	e9 00 00 00 00       	jmp    102190 <handle_interrupt+0x170>
  102190:	e9 00 00 00 00       	jmp    102195 <handle_interrupt+0x175>
  }  

  return new_cpu;
  102195:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102198:	83 c4 28             	add    $0x28,%esp
  10219b:	5d                   	pop    %ebp
  10219c:	c3                   	ret    
  10219d:	66 90                	xchg   %ax,%ax
  10219f:	90                   	nop

001021a0 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu, char* fstr) {
  1021a0:	55                   	push   %ebp
  1021a1:	89 e5                	mov    %esp,%ebp
  1021a3:	56                   	push   %esi
  1021a4:	83 ec 24             	sub    $0x24,%esp
  1021a7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1021aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1021ad:	ba 04 00 00 00       	mov    $0x4,%edx
  1021b2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1021b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kprintf ("          '''  \\   `-._.'`---^_))) \n");
  kprintf ("                `-._ )))       ``` \n");
  kprintf ("                     ```            \n");
  #endif
  
  setclr(0x04);
  1021b8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1021bf:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1021c2:	e8 99 01 00 00       	call   102360 <setclr>
  kprintf(fstr);
  1021c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021ca:	89 04 24             	mov    %eax,(%esp)
  1021cd:	e8 ae 01 00 00       	call   102380 <kprintf>
  1021d2:	8d 0d bf 51 10 00    	lea    0x1051bf,%ecx
  kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  1021d8:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1021db:	8b 52 1c             	mov    0x1c(%edx),%edx
  1021de:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1021e1:	8b 76 20             	mov    0x20(%esi),%esi
  1021e4:	89 0c 24             	mov    %ecx,(%esp)
  1021e7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1021eb:	89 74 24 08          	mov    %esi,0x8(%esp)
  1021ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1021f2:	e8 89 01 00 00       	call   102380 <kprintf>
  show_dump(cpu);
  1021f7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1021fa:	89 0c 24             	mov    %ecx,(%esp)
  1021fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102200:	e8 0b 00 00 00       	call   102210 <show_dump>

  while(1) {
    asm volatile("cli; hlt");
  102205:	fa                   	cli    
  102206:	f4                   	hlt    
  }
  102207:	e9 f9 ff ff ff       	jmp    102205 <show_cod+0x65>
  10220c:	0f 1f 40 00          	nopl   0x0(%eax)

00102210 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  102210:	55                   	push   %ebp
  102211:	89 e5                	mov    %esp,%ebp
  102213:	53                   	push   %ebx
  102214:	57                   	push   %edi
  102215:	56                   	push   %esi
  102216:	83 ec 2c             	sub    $0x2c,%esp
  102219:	8b 45 08             	mov    0x8(%ebp),%eax
  10221c:	8d 0d e4 51 10 00    	lea    0x1051e4,%ecx
  102222:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  102225:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102228:	8b 00                	mov    (%eax),%eax
  10222a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10222d:	8b 52 04             	mov    0x4(%edx),%edx
  102230:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102233:	8b 76 08             	mov    0x8(%esi),%esi
  102236:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102239:	8b 7f 0c             	mov    0xc(%edi),%edi
  10223c:	89 0c 24             	mov    %ecx,(%esp)
  10223f:	89 44 24 04          	mov    %eax,0x4(%esp)
  102243:	89 54 24 08          	mov    %edx,0x8(%esp)
  102247:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10224b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10224f:	e8 2c 01 00 00       	call   102380 <kprintf>
  102254:	8d 0d 05 52 10 00    	lea    0x105205,%ecx
  kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  10225a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10225d:	8b 52 10             	mov    0x10(%edx),%edx
  102260:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102263:	8b 76 14             	mov    0x14(%esi),%esi
  102266:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102269:	8b 7f 18             	mov    0x18(%edi),%edi
  10226c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10226f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  102272:	89 0c 24             	mov    %ecx,(%esp)
  102275:	89 54 24 04          	mov    %edx,0x4(%esp)
  102279:	89 74 24 08          	mov    %esi,0x8(%esp)
  10227d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  102281:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  102285:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102288:	e8 f3 00 00 00       	call   102380 <kprintf>
  10228d:	8d 0d 26 52 10 00    	lea    0x105226,%ecx
  kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  102293:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102296:	8b 52 28             	mov    0x28(%edx),%edx
  102299:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10229c:	8b 76 2c             	mov    0x2c(%esi),%esi
  10229f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1022a2:	8b 7f 30             	mov    0x30(%edi),%edi
  1022a5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1022a8:	8b 5b 34             	mov    0x34(%ebx),%ebx
  1022ab:	89 0c 24             	mov    %ecx,(%esp)
  1022ae:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022b2:	89 74 24 08          	mov    %esi,0x8(%esp)
  1022b6:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1022ba:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1022be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1022c1:	e8 ba 00 00 00       	call   102380 <kprintf>
  1022c6:	8d 0d 48 52 10 00    	lea    0x105248,%ecx

  uint32_t cr2 = 0;
  1022cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  asm volatile("mov %%cr2, %0" : "=r" (cr2));
  1022d3:	0f 20 d2             	mov    %cr2,%edx
  1022d6:	89 55 ec             	mov    %edx,-0x14(%ebp)

  kprintf("CR2: %x \n", cr2);
  1022d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1022dc:	89 0c 24             	mov    %ecx,(%esp)
  1022df:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1022e6:	e8 95 00 00 00       	call   102380 <kprintf>
}
  1022eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1022ee:	83 c4 2c             	add    $0x2c,%esp
  1022f1:	5e                   	pop    %esi
  1022f2:	5f                   	pop    %edi
  1022f3:	5b                   	pop    %ebx
  1022f4:	5d                   	pop    %ebp
  1022f5:	c3                   	ret    
  1022f6:	66 90                	xchg   %ax,%ax
  1022f8:	66 90                	xchg   %ax,%ax
  1022fa:	66 90                	xchg   %ax,%ax
  1022fc:	66 90                	xchg   %ax,%ax
  1022fe:	66 90                	xchg   %ax,%ax

00102300 <clrscr>:
    } while (x);
    kputs(p);
}

void clrscr(void)
{
  102300:	55                   	push   %ebp
  102301:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102303:	50                   	push   %eax
  102304:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10230b:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  102312:	0f 8d 1d 00 00 00    	jge    102335 <clrscr+0x35>
        video[i] = 0;
  102318:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10231b:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102321:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102325:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102328:	05 01 00 00 00       	add    $0x1,%eax
  10232d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102330:	e9 d6 ff ff ff       	jmp    10230b <clrscr+0xb>
        video[i] = 0;
    }
    
    color = 0x07;
  102335:	c6 05 8c 41 10 00 07 	movb   $0x7,0x10418c

    x = y = 0;
  10233c:	c7 05 18 b4 10 00 00 	movl   $0x0,0x10b418
  102343:	00 00 00 
  102346:	c7 05 1c b4 10 00 00 	movl   $0x0,0x10b41c
  10234d:	00 00 00 
}
  102350:	83 c4 04             	add    $0x4,%esp
  102353:	5d                   	pop    %ebp
  102354:	c3                   	ret    
  102355:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10235c:	00 00 00 00 

00102360 <setclr>:

void setclr(char clr) {
  102360:	55                   	push   %ebp
  102361:	89 e5                	mov    %esp,%ebp
  102363:	50                   	push   %eax
  102364:	8a 45 08             	mov    0x8(%ebp),%al
  102367:	88 45 ff             	mov    %al,-0x1(%ebp)
  color = clr;
  10236a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10236d:	a2 8c 41 10 00       	mov    %al,0x10418c
}
  102372:	83 c4 04             	add    $0x4,%esp
  102375:	5d                   	pop    %ebp
  102376:	c3                   	ret    
  102377:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10237e:	00 00 

00102380 <kprintf>:

int kprintf(const char* fmt, ...)
{
  102380:	55                   	push   %ebp
  102381:	89 e5                	mov    %esp,%ebp
  102383:	83 ec 58             	sub    $0x58,%esp
  102386:	8b 45 08             	mov    0x8(%ebp),%eax
  102389:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  10238c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10238f:	8d 45 0c             	lea    0xc(%ebp),%eax
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  102392:	89 01                	mov    %eax,(%ecx)
  kprintf_res = 0;
  102394:	c7 05 20 b4 10 00 00 	movl   $0x0,0x10b420
  10239b:	00 00 00 
  while (*fmt) {
  10239e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023a1:	80 38 00             	cmpb   $0x0,(%eax)
  1023a4:	0f 84 dd 01 00 00    	je     102587 <kprintf+0x207>
    if (*fmt == '%') {
  1023aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023ad:	0f be 00             	movsbl (%eax),%eax
  1023b0:	3d 25 00 00 00       	cmp    $0x25,%eax
  1023b5:	0f 85 ae 01 00 00    	jne    102569 <kprintf+0x1e9>
      fmt++;
  1023bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023be:	89 c1                	mov    %eax,%ecx
  1023c0:	41                   	inc    %ecx
  1023c1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
      switch (*fmt) {
  1023c4:	0f be 40 01          	movsbl 0x1(%eax),%eax
  1023c8:	89 c1                	mov    %eax,%ecx
  1023ca:	83 e9 24             	sub    $0x24,%ecx
  1023cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1023d0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1023d3:	0f 8f 15 00 00 00    	jg     1023ee <kprintf+0x6e>
  1023d9:	e9 00 00 00 00       	jmp    1023de <kprintf+0x5e>
  1023de:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023e1:	85 c0                	test   %eax,%eax
  1023e3:	0f 84 54 01 00 00    	je     10253d <kprintf+0x1bd>
  1023e9:	e9 54 01 00 00       	jmp    102542 <kprintf+0x1c2>
  1023ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023f1:	83 e8 62             	sub    $0x62,%eax
  1023f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1023f7:	0f 8f 19 00 00 00    	jg     102416 <kprintf+0x96>
  1023fd:	e9 00 00 00 00       	jmp    102402 <kprintf+0x82>
  102402:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102405:	83 e8 25             	sub    $0x25,%eax
  102408:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10240b:	0f 84 13 01 00 00    	je     102524 <kprintf+0x1a4>
  102411:	e9 2c 01 00 00       	jmp    102542 <kprintf+0x1c2>
  102416:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102419:	83 e8 6f             	sub    $0x6f,%eax
  10241c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10241f:	0f 8f 2d 00 00 00    	jg     102452 <kprintf+0xd2>
  102425:	e9 00 00 00 00       	jmp    10242a <kprintf+0xaa>
  10242a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10242d:	83 e8 63             	sub    $0x63,%eax
  102430:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102433:	0f 84 c5 00 00 00    	je     1024fe <kprintf+0x17e>
  102439:	e9 00 00 00 00       	jmp    10243e <kprintf+0xbe>
  10243e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102441:	83 e8 64             	sub    $0x64,%eax
  102444:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102447:	0f 84 4b 00 00 00    	je     102498 <kprintf+0x118>
  10244d:	e9 f0 00 00 00       	jmp    102542 <kprintf+0x1c2>
  102452:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102455:	83 c0 90             	add    $0xffffff90,%eax
  102458:	89 c1                	mov    %eax,%ecx
  10245a:	83 e9 08             	sub    $0x8,%ecx
  10245d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102460:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  102463:	0f 87 d9 00 00 00    	ja     102542 <kprintf+0x1c2>
  102469:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10246c:	8b 0c 85 08 50 10 00 	mov    0x105008(,%eax,4),%ecx
  102473:	ff e1                	jmp    *%ecx
        case 's':
          s = va_arg(ap, char*);
  102475:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102478:	89 c1                	mov    %eax,%ecx
  10247a:	81 c1 04 00 00 00    	add    $0x4,%ecx
  102480:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102483:	8b 00                	mov    (%eax),%eax
  102485:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  102488:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10248b:	89 04 24             	mov    %eax,(%esp)
  10248e:	e8 0d 01 00 00       	call   1025a0 <kputs>
          break;
  102493:	e9 cc 00 00 00       	jmp    102564 <kprintf+0x1e4>
  102498:	b8 0a 00 00 00       	mov    $0xa,%eax
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  10249d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1024a0:	89 ca                	mov    %ecx,%edx
  1024a2:	81 c2 04 00 00 00    	add    $0x4,%edx
  1024a8:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1024ab:	8b 09                	mov    (%ecx),%ecx
  1024ad:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 10);
  1024b0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1024b3:	89 0c 24             	mov    %ecx,(%esp)
  1024b6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1024bd:	00 
  1024be:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1024c1:	e8 1a 01 00 00       	call   1025e0 <kputn>
          break;
  1024c6:	e9 99 00 00 00       	jmp    102564 <kprintf+0x1e4>
  1024cb:	b8 10 00 00 00       	mov    $0x10,%eax
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  1024d0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1024d3:	89 ca                	mov    %ecx,%edx
  1024d5:	81 c2 04 00 00 00    	add    $0x4,%edx
  1024db:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1024de:	8b 09                	mov    (%ecx),%ecx
  1024e0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 16);
  1024e3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1024e6:	89 0c 24             	mov    %ecx,(%esp)
  1024e9:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1024f0:	00 
  1024f1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1024f4:	e8 e7 00 00 00       	call   1025e0 <kputn>
          break;
  1024f9:	e9 66 00 00 00       	jmp    102564 <kprintf+0x1e4>
        case 'c':
          c = va_arg(ap, int);
  1024fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102501:	89 c1                	mov    %eax,%ecx
  102503:	81 c1 04 00 00 00    	add    $0x4,%ecx
  102509:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10250c:	8b 00                	mov    (%eax),%eax
  10250e:	88 c2                	mov    %al,%dl
  102510:	88 55 ef             	mov    %dl,-0x11(%ebp)
          kputc(c);
  102513:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  102517:	89 04 24             	mov    %eax,(%esp)
  10251a:	e8 61 01 00 00       	call   102680 <kputc>
          break;
  10251f:	e9 40 00 00 00       	jmp    102564 <kprintf+0x1e4>
  102524:	b8 25 00 00 00       	mov    $0x25,%eax
        case '%':
          kputc('%');
  102529:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  102530:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102533:	e8 48 01 00 00       	call   102680 <kputc>
          break;
  102538:	e9 27 00 00 00       	jmp    102564 <kprintf+0x1e4>
        case '\0':
          goto out;
  10253d:	e9 4a 00 00 00       	jmp    10258c <kprintf+0x20c>
  102542:	b8 25 00 00 00       	mov    $0x25,%eax
        default:
          kputc('%');
  102547:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10254e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102551:	e8 2a 01 00 00       	call   102680 <kputc>
          kputc(*fmt);
  102556:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102559:	0f be 00             	movsbl (%eax),%eax
  10255c:	89 04 24             	mov    %eax,(%esp)
  10255f:	e8 1c 01 00 00       	call   102680 <kputc>
          break;
      }
    } else {
  102564:	e9 0e 00 00 00       	jmp    102577 <kprintf+0x1f7>
      kputc(*fmt);
  102569:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10256c:	0f be 00             	movsbl (%eax),%eax
  10256f:	89 04 24             	mov    %eax,(%esp)
  102572:	e8 09 01 00 00       	call   102680 <kputc>
    }

    fmt++;
  102577:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10257a:	05 01 00 00 00       	add    $0x1,%eax
  10257f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  102582:	e9 17 fe ff ff       	jmp    10239e <kprintf+0x1e>
  102587:	e9 00 00 00 00       	jmp    10258c <kprintf+0x20c>

out:
  va_end(ap);

  return kprintf_res;
  10258c:	a1 20 b4 10 00       	mov    0x10b420,%eax
  102591:	83 c4 58             	add    $0x58,%esp
  102594:	5d                   	pop    %ebp
  102595:	c3                   	ret    
  102596:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10259d:	00 00 00 

001025a0 <kputs>:
    x++;
    kprintf_res++;
}

static void kputs(const char* s)
{
  1025a0:	55                   	push   %ebp
  1025a1:	89 e5                	mov    %esp,%ebp
  1025a3:	83 ec 08             	sub    $0x8,%esp
  1025a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1025a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  1025ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025af:	80 38 00             	cmpb   $0x0,(%eax)
  1025b2:	0f 84 1e 00 00 00    	je     1025d6 <kputs+0x36>
        kputc(*s++);
  1025b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025bb:	89 c1                	mov    %eax,%ecx
  1025bd:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1025c3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1025c6:	0f be 00             	movsbl (%eax),%eax
  1025c9:	89 04 24             	mov    %eax,(%esp)
  1025cc:	e8 af 00 00 00       	call   102680 <kputc>
    }
  1025d1:	e9 d6 ff ff ff       	jmp    1025ac <kputs+0xc>
}
  1025d6:	83 c4 08             	add    $0x8,%esp
  1025d9:	5d                   	pop    %ebp
  1025da:	c3                   	ret    
  1025db:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001025e0 <kputn>:

static void kputn(unsigned long x, int base)
{
  1025e0:	55                   	push   %ebp
  1025e1:	89 e5                	mov    %esp,%ebp
  1025e3:	56                   	push   %esi
  1025e4:	83 ec 64             	sub    $0x64,%esp
  1025e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1025ea:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1025ed:	8d 15 52 52 10 00    	lea    0x105252,%edx
  1025f3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1025f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1025f9:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  1025fc:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  102603:	0f 8e 05 00 00 00    	jle    10260e <kputn+0x2e>
        return;
  102609:	e9 5d 00 00 00       	jmp    10266b <kputn+0x8b>
  10260e:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  102611:	05 40 00 00 00       	add    $0x40,%eax
  102616:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  102619:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10261c:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  10261f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102622:	31 d2                	xor    %edx,%edx
  102624:	f7 75 f4             	divl   -0xc(%ebp)
  102627:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10262a:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  10262d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102630:	89 c2                	mov    %eax,%edx
  102632:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  102638:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10263b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10263e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102641:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102644:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102647:	89 d0                	mov    %edx,%eax
  102649:	31 d2                	xor    %edx,%edx
  10264b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10264e:	f7 f6                	div    %esi
  102650:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  102653:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10265a:	0f 85 bf ff ff ff    	jne    10261f <kputn+0x3f>
    kputs(p);
  102660:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102663:	89 04 24             	mov    %eax,(%esp)
  102666:	e8 35 ff ff ff       	call   1025a0 <kputs>
}
  10266b:	83 c4 64             	add    $0x64,%esp
  10266e:	5e                   	pop    %esi
  10266f:	5d                   	pop    %ebp
  102670:	c3                   	ret    
  102671:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102678:	0f 1f 84 00 00 00 00 
  10267f:	00 

00102680 <kputc>:
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c)
{
  102680:	55                   	push   %ebp
  102681:	89 e5                	mov    %esp,%ebp
  102683:	83 ec 08             	sub    $0x8,%esp
  102686:	8a 45 08             	mov    0x8(%ebp),%al
  102689:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((c == '\n') || (x > 79)) {
  10268c:	0f be 4d ff          	movsbl -0x1(%ebp),%ecx
  102690:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  102696:	0f 84 10 00 00 00    	je     1026ac <kputc+0x2c>
  10269c:	81 3d 1c b4 10 00 4f 	cmpl   $0x4f,0x10b41c
  1026a3:	00 00 00 
  1026a6:	0f 8e 19 00 00 00    	jle    1026c5 <kputc+0x45>
        x = 0;
  1026ac:	c7 05 1c b4 10 00 00 	movl   $0x0,0x10b41c
  1026b3:	00 00 00 
        y++;
  1026b6:	a1 18 b4 10 00       	mov    0x10b418,%eax
  1026bb:	05 01 00 00 00       	add    $0x1,%eax
  1026c0:	a3 18 b4 10 00       	mov    %eax,0x10b418
    }

    if (c == '\n') {
  1026c5:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1026c9:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1026ce:	0f 85 05 00 00 00    	jne    1026d9 <kputc+0x59>
        return;
  1026d4:	e9 f3 00 00 00       	jmp    1027cc <kputc+0x14c>
    }

    if (y > 24) {
  1026d9:	81 3d 18 b4 10 00 18 	cmpl   $0x18,0x10b418
  1026e0:	00 00 00 
  1026e3:	0f 8e 7e 00 00 00    	jle    102767 <kputc+0xe7>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1026e9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1026f0:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  1026f7:	0f 8d 2c 00 00 00    	jge    102729 <kputc+0xa9>
            video[i] = video[i + 160];
  1026fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102700:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102706:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  10270d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102710:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102716:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  102719:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10271c:	05 01 00 00 00       	add    $0x1,%eax
  102721:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102724:	e9 c7 ff ff ff       	jmp    1026f0 <kputc+0x70>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102729:	e9 00 00 00 00       	jmp    10272e <kputc+0xae>
  10272e:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  102735:	0f 8d 1d 00 00 00    	jge    102758 <kputc+0xd8>
            video[i] = 0;
  10273b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10273e:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102744:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102748:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10274b:	05 01 00 00 00       	add    $0x1,%eax
  102750:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102753:	e9 d6 ff ff ff       	jmp    10272e <kputc+0xae>
            video[i] = 0;
        }
        y--;
  102758:	a1 18 b4 10 00       	mov    0x10b418,%eax
  10275d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  102762:	a3 18 b4 10 00       	mov    %eax,0x10b418
    }

    video[2 * (y * 80 + x)] = c;
  102767:	8a 45 ff             	mov    -0x1(%ebp),%al
  10276a:	69 0d 18 b4 10 00 50 	imul   $0x50,0x10b418,%ecx
  102771:	00 00 00 
  102774:	03 0d 1c b4 10 00    	add    0x10b41c,%ecx
  10277a:	c1 e1 01             	shl    $0x1,%ecx
  10277d:	8b 15 88 41 10 00    	mov    0x104188,%edx
  102783:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  102786:	a0 8c 41 10 00       	mov    0x10418c,%al
  10278b:	69 0d 18 b4 10 00 50 	imul   $0x50,0x10b418,%ecx
  102792:	00 00 00 
  102795:	03 0d 1c b4 10 00    	add    0x10b41c,%ecx
  10279b:	c1 e1 01             	shl    $0x1,%ecx
  10279e:	8b 15 88 41 10 00    	mov    0x104188,%edx
  1027a4:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  1027a8:	8b 0d 1c b4 10 00    	mov    0x10b41c,%ecx
  1027ae:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1027b4:	89 0d 1c b4 10 00    	mov    %ecx,0x10b41c
    kprintf_res++;
  1027ba:	8b 0d 20 b4 10 00    	mov    0x10b420,%ecx
  1027c0:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1027c6:	89 0d 20 b4 10 00    	mov    %ecx,0x10b420
}
  1027cc:	83 c4 08             	add    $0x8,%esp
  1027cf:	5d                   	pop    %ebp
  1027d0:	c3                   	ret    
  1027d1:	66 90                	xchg   %ax,%ax
  1027d3:	66 90                	xchg   %ax,%ax
  1027d5:	66 90                	xchg   %ax,%ax
  1027d7:	66 90                	xchg   %ax,%ax
  1027d9:	66 90                	xchg   %ax,%ax
  1027db:	66 90                	xchg   %ax,%ax
  1027dd:	66 90                	xchg   %ax,%ax
  1027df:	90                   	nop

001027e0 <memset>:
#include "vmm.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n)
{
  1027e0:	55                   	push   %ebp
  1027e1:	89 e5                	mov    %esp,%ebp
  1027e3:	83 ec 10             	sub    $0x10,%esp
  1027e6:	8b 45 10             	mov    0x10(%ebp),%eax
  1027e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1027ec:	8b 55 08             	mov    0x8(%ebp),%edx
  1027ef:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1027f2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1027f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  1027f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1027fb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  1027fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102801:	89 c1                	mov    %eax,%ecx
  102803:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102809:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10280c:	3d 00 00 00 00       	cmp    $0x0,%eax
  102811:	0f 84 1a 00 00 00    	je     102831 <memset+0x51>
        *p++ = c;
  102817:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10281a:	88 c1                	mov    %al,%cl
  10281c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10281f:	89 c2                	mov    %eax,%edx
  102821:	81 c2 01 00 00 00    	add    $0x1,%edx
  102827:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10282a:	88 08                	mov    %cl,(%eax)
    }
  10282c:	e9 cd ff ff ff       	jmp    1027fe <memset+0x1e>

    return buf;
  102831:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102834:	83 c4 10             	add    $0x10,%esp
  102837:	5d                   	pop    %ebp
  102838:	c3                   	ret    
  102839:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102840 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n)
{
  102840:	55                   	push   %ebp
  102841:	89 e5                	mov    %esp,%ebp
  102843:	83 ec 14             	sub    $0x14,%esp
  102846:	8b 45 10             	mov    0x10(%ebp),%eax
  102849:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10284c:	8b 55 08             	mov    0x8(%ebp),%edx
  10284f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102852:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102855:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  102858:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10285b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  10285e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102861:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  102864:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102867:	89 c1                	mov    %eax,%ecx
  102869:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10286f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102872:	3d 00 00 00 00       	cmp    $0x0,%eax
  102877:	0f 84 25 00 00 00    	je     1028a2 <memcpy+0x62>
      *(d++) = *(s++);
  10287d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102880:	89 c1                	mov    %eax,%ecx
  102882:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102888:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10288b:	8a 10                	mov    (%eax),%dl
  10288d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102890:	89 c1                	mov    %eax,%ecx
  102892:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102898:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10289b:	88 10                	mov    %dl,(%eax)
    }
  10289d:	e9 c2 ff ff ff       	jmp    102864 <memcpy+0x24>

    return dest;
  1028a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028a5:	83 c4 14             	add    $0x14,%esp
  1028a8:	5d                   	pop    %ebp
  1028a9:	c3                   	ret    
  1028aa:	66 90                	xchg   %ax,%ax
  1028ac:	66 90                	xchg   %ax,%ax
  1028ae:	66 90                	xchg   %ax,%ax

001028b0 <syscall>:
#include "elf.h"
#include "vmm.h"
#include "idt.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  1028b0:	55                   	push   %ebp
  1028b1:	89 e5                	mov    %esp,%ebp
  1028b3:	83 ec 38             	sub    $0x38,%esp
  1028b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1028b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  switch (cpu->eax) {
  1028bc:	8b 00                	mov    (%eax),%eax
  1028be:	89 c1                	mov    %eax,%ecx
  1028c0:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  1028c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1028c9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1028cc:	0f 8f 2d 00 00 00    	jg     1028ff <syscall+0x4f>
  1028d2:	e9 00 00 00 00       	jmp    1028d7 <syscall+0x27>
  1028d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028da:	83 e8 01             	sub    $0x1,%eax
  1028dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1028e0:	0f 84 45 00 00 00    	je     10292b <syscall+0x7b>
  1028e6:	e9 00 00 00 00       	jmp    1028eb <syscall+0x3b>
  1028eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028ee:	83 e8 02             	sub    $0x2,%eax
  1028f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1028f4:	0f 84 44 00 00 00    	je     10293e <syscall+0x8e>
  1028fa:	e9 bc 00 00 00       	jmp    1029bb <syscall+0x10b>
  1028ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102902:	2d c9 00 00 00       	sub    $0xc9,%eax
  102907:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10290a:	0f 84 6c 00 00 00    	je     10297c <syscall+0xcc>
  102910:	e9 00 00 00 00       	jmp    102915 <syscall+0x65>
  102915:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102918:	2d ca 00 00 00       	sub    $0xca,%eax
  10291d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102920:	0f 84 78 00 00 00    	je     10299e <syscall+0xee>
  102926:	e9 90 00 00 00       	jmp    1029bb <syscall+0x10b>
    case 1: /* exit */
      cpu = terminate_current(cpu);
  10292b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10292e:	89 04 24             	mov    %eax,(%esp)
  102931:	e8 8a 08 00 00       	call   1031c0 <terminate_current>
  102936:	89 45 fc             	mov    %eax,-0x4(%ebp)
      break;
  102939:	e9 7d 00 00 00       	jmp    1029bb <syscall+0x10b>

    case 2: /* fork */
      {
      uint32_t forkpdir = vmm_fork_current();
  10293e:	e8 dd dd ff ff       	call   100720 <vmm_fork_current>
  102943:	b9 00 00 00 00       	mov    $0x0,%ecx
  102948:	89 45 f8             	mov    %eax,-0x8(%ebp)
      uint32_t ret = init_task(forkpdir, 0);
  10294b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10294e:	89 04 24             	mov    %eax,(%esp)
  102951:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102958:	00 
  102959:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  10295c:	e8 0f 0b 00 00       	call   103470 <init_task>
  102961:	89 45 f4             	mov    %eax,-0xc(%ebp)
      fork_task_state(forkpdir);
  102964:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102967:	89 04 24             	mov    %eax,(%esp)
  10296a:	e8 a1 09 00 00       	call   103310 <fork_task_state>
      
      cpu->eax = ret;
  10296f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102972:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102975:	89 01                	mov    %eax,(%ecx)
      }            
      break;
  102977:	e9 3f 00 00 00       	jmp    1029bb <syscall+0x10b>
  10297c:	8d 05 77 52 10 00    	lea    0x105277,%eax
      
    case 201: /* putc */
      cpu->eax = kprintf("%c", cpu->ebx);
  102982:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102985:	8b 49 04             	mov    0x4(%ecx),%ecx
  102988:	89 04 24             	mov    %eax,(%esp)
  10298b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10298f:	e8 ec f9 ff ff       	call   102380 <kprintf>
  102994:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102997:	89 01                	mov    %eax,(%ecx)
      break;
  102999:	e9 1d 00 00 00       	jmp    1029bb <syscall+0x10b>
  10299e:	8d 05 7a 52 10 00    	lea    0x10527a,%eax
    case 202: /* puts */
      cpu->eax = kprintf("%s", cpu->ebx);
  1029a4:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029a7:	8b 49 04             	mov    0x4(%ecx),%ecx
  1029aa:	89 04 24             	mov    %eax,(%esp)
  1029ad:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029b1:	e8 ca f9 ff ff       	call   102380 <kprintf>
  1029b6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029b9:	89 01                	mov    %eax,(%ecx)
      break;
  }

  return cpu;
  1029bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1029be:	83 c4 38             	add    $0x38,%esp
  1029c1:	5d                   	pop    %ebp
  1029c2:	c3                   	ret    
  1029c3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1029ca:	84 00 00 00 00 00 

001029d0 <task2>:
}

void task2() {
  1029d0:	55                   	push   %ebp
  1029d1:	89 e5                	mov    %esp,%ebp
  1029d3:	83 ec 18             	sub    $0x18,%esp
  1029d6:	8d 05 7d 52 10 00    	lea    0x10527d,%eax
  uint32_t n = 0;
  1029dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("2222: %x \n", n);
  1029e3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029e6:	89 04 24             	mov    %eax,(%esp)
  1029e9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029ed:	e8 8e f9 ff ff       	call   102380 <kprintf>
  1029f2:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while(1) { 
    n++;
  1029f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1029f8:	05 01 00 00 00       	add    $0x1,%eax
  1029fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  102a00:	e9 f0 ff ff ff       	jmp    1029f5 <task2+0x25>
  102a05:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102a0c:	00 00 00 00 

00102a10 <task1>:
}

void task1() {
  102a10:	55                   	push   %ebp
  102a11:	89 e5                	mov    %esp,%ebp
  102a13:	83 ec 18             	sub    $0x18,%esp
  102a16:	8d 05 88 52 10 00    	lea    0x105288,%eax
  uint32_t n = 0;
  102a1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("1111: %x \n", n);
  102a23:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a26:	89 04 24             	mov    %eax,(%esp)
  102a29:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102a2d:	e8 4e f9 ff ff       	call   102380 <kprintf>
  102a32:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while(1) { 
    n++;
  102a35:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a38:	05 01 00 00 00       	add    $0x1,%eax
  102a3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  102a40:	e9 f0 ff ff ff       	jmp    102a35 <task1+0x25>
  102a45:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102a4c:	00 00 00 00 

00102a50 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  102a50:	55                   	push   %ebp
  102a51:	89 e5                	mov    %esp,%ebp
  102a53:	53                   	push   %ebx
  102a54:	57                   	push   %edi
  102a55:	56                   	push   %esi
  102a56:	83 ec 6c             	sub    $0x6c,%esp
  102a59:	8b 45 08             	mov    0x8(%ebp),%eax
  102a5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  102a5f:	e8 8c e6 ff ff       	call   1010f0 <vmm_init>
  102a64:	b9 00 00 00 00       	mov    $0x0,%ecx
  102a69:	89 45 ec             	mov    %eax,-0x14(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  102a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a6f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102a72:	89 04 24             	mov    %eax,(%esp)
  102a75:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a79:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102a80:	00 
  102a81:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  102a84:	e8 57 e4 ff ff       	call   100ee0 <map_address_active>
  102a89:	b8 00 00 00 00       	mov    $0x0,%eax
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
  102a8e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102a91:	8b 49 18             	mov    0x18(%ecx),%ecx
  102a94:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102a97:	8b 52 18             	mov    0x18(%edx),%edx
  102a9a:	89 0c 24             	mov    %ecx,(%esp)
  102a9d:	89 54 24 04          	mov    %edx,0x4(%esp)
  102aa1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102aa8:	00 
  102aa9:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102aac:	e8 2f e4 ff ff       	call   100ee0 <map_address_active>
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  102ab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ab4:	8b 00                	mov    (%eax),%eax
  102ab6:	25 08 00 00 00       	and    $0x8,%eax
  102abb:	3d 00 00 00 00       	cmp    $0x0,%eax
  102ac0:	0f 84 ff 01 00 00    	je     102cc5 <kernel_main+0x275>
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102ac6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  102acd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102ad0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102ad3:	3b 41 14             	cmp    0x14(%ecx),%eax
  102ad6:	0f 83 df 01 00 00    	jae    102cbb <kernel_main+0x26b>
  102adc:	8d 05 93 52 10 00    	lea    0x105293,%eax
	    kprintf("Loading mod at %x \n", mb_info->mi_mods_addr[i].start);
  102ae2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102ae5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102ae8:	8b 52 18             	mov    0x18(%edx),%edx
  102aeb:	c1 e1 04             	shl    $0x4,%ecx
  102aee:	01 ca                	add    %ecx,%edx
  102af0:	8b 0a                	mov    (%edx),%ecx
  102af2:	89 04 24             	mov    %eax,(%esp)
  102af5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102af9:	e8 82 f8 ff ff       	call   102380 <kprintf>
	    
	    uint32_t elf_mod_pdir = vmm_create_pagedir();
  102afe:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102b01:	e8 9a e0 ff ff       	call   100ba0 <vmm_create_pagedir>
  102b06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    void* elf_mod_entry = 0;
  102b09:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	    
	    vmm_activate_pagedir(elf_mod_pdir);
  102b10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102b13:	89 04 24             	mov    %eax,(%esp)
  102b16:	e8 b5 e5 ff ff       	call   1010d0 <vmm_activate_pagedir>
  102b1b:	b8 00 00 00 00       	mov    $0x0,%eax
	    
	    vmm_map_range(mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].end - mb_info->mi_mods_addr[i].start, 0);
  102b20:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102b23:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102b26:	8b 52 18             	mov    0x18(%edx),%edx
  102b29:	c1 e1 04             	shl    $0x4,%ecx
  102b2c:	01 ca                	add    %ecx,%edx
  102b2e:	8b 0a                	mov    (%edx),%ecx
  102b30:	8b 55 e8             	mov    -0x18(%ebp),%edx
  102b33:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102b36:	8b 76 18             	mov    0x18(%esi),%esi
  102b39:	c1 e2 04             	shl    $0x4,%edx
  102b3c:	01 d6                	add    %edx,%esi
  102b3e:	8b 16                	mov    (%esi),%edx
  102b40:	8b 75 e8             	mov    -0x18(%ebp),%esi
  102b43:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102b46:	8b 7f 18             	mov    0x18(%edi),%edi
  102b49:	c1 e6 04             	shl    $0x4,%esi
  102b4c:	01 f7                	add    %esi,%edi
  102b4e:	8b 77 04             	mov    0x4(%edi),%esi
  102b51:	8b 7d e8             	mov    -0x18(%ebp),%edi
  102b54:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  102b57:	8b 5b 18             	mov    0x18(%ebx),%ebx
  102b5a:	c1 e7 04             	shl    $0x4,%edi
  102b5d:	01 fb                	add    %edi,%ebx
  102b5f:	8b 3b                	mov    (%ebx),%edi
  102b61:	29 fe                	sub    %edi,%esi
  102b63:	89 0c 24             	mov    %ecx,(%esp)
  102b66:	89 54 24 04          	mov    %edx,0x4(%esp)
  102b6a:	89 74 24 08          	mov    %esi,0x8(%esp)
  102b6e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102b75:	00 
  102b76:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102b79:	e8 c2 e2 ff ff       	call   100e40 <vmm_map_range>
      
      struct elf_header* header = mb_info->mi_mods_addr[i].start;
  102b7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102b81:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102b84:	8b 49 18             	mov    0x18(%ecx),%ecx
  102b87:	c1 e0 04             	shl    $0x4,%eax
  102b8a:	01 c1                	add    %eax,%ecx
  102b8c:	8b 01                	mov    (%ecx),%eax
  102b8e:	89 45 dc             	mov    %eax,-0x24(%ebp)
      struct elf_program_header* ph;

      /* Ist es ueberhaupt eine ELF-Datei? */
      if (header->magic != ELF_MAGIC) {
  102b91:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102b94:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  102b9a:	0f 84 16 00 00 00    	je     102bb6 <kernel_main+0x166>
  102ba0:	8d 05 a7 52 10 00    	lea    0x1052a7,%eax
        kprintf("Invalid ELF-Magic!\n");
  102ba6:	89 04 24             	mov    %eax,(%esp)
  102ba9:	e8 d2 f7 ff ff       	call   102380 <kprintf>
        continue;
  102bae:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  102bb1:	e9 f5 00 00 00       	jmp    102cab <kernel_main+0x25b>
      }
      
      elf_mod_entry = (void*)( header->entry );
  102bb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102bb9:	8b 40 18             	mov    0x18(%eax),%eax
  102bbc:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  102bbf:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102bc2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102bc5:	03 41 1c             	add    0x1c(%ecx),%eax
  102bc8:	89 45 d8             	mov    %eax,-0x28(%ebp)
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102bcb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102bd2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102bd5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102bd8:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  102bdc:	39 c8                	cmp    %ecx,%eax
  102bde:	0f 83 a7 00 00 00    	jae    102c8b <kernel_main+0x23b>
        void* dest = (void*) ph->virt_addr;
  102be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102be7:	8b 40 08             	mov    0x8(%eax),%eax
  102bea:	89 45 d0             	mov    %eax,-0x30(%ebp)
        void* src = ((char*) header) + ph->offset;
  102bed:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102bf0:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102bf3:	03 41 04             	add    0x4(%ecx),%eax
  102bf6:	89 45 cc             	mov    %eax,-0x34(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  102bf9:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102bfc:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  102c02:	0f 84 05 00 00 00    	je     102c0d <kernel_main+0x1bd>
            continue;
  102c08:	e9 63 00 00 00       	jmp    102c70 <kernel_main+0x220>
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  102c0d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  102c14:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102c17:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102c1a:	3b 41 14             	cmp    0x14(%ecx),%eax
  102c1d:	0f 83 31 00 00 00    	jae    102c54 <kernel_main+0x204>
  102c23:	b8 00 00 00 00       	mov    $0x0,%eax
          vmm_alloc_addr(dest + offset, 0);
  102c28:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  102c2b:	03 4d c8             	add    -0x38(%ebp),%ecx
  102c2e:	89 0c 24             	mov    %ecx,(%esp)
  102c31:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102c38:	00 
  102c39:	89 45 b0             	mov    %eax,-0x50(%ebp)
  102c3c:	e8 5f e3 ff ff       	call   100fa0 <vmm_alloc_addr>
  102c41:	89 45 ac             	mov    %eax,-0x54(%ebp)
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  102c44:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102c47:	05 00 10 00 00       	add    $0x1000,%eax
  102c4c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102c4f:	e9 c0 ff ff ff       	jmp    102c14 <kernel_main+0x1c4>
          vmm_alloc_addr(dest + offset, 0);
        }
        
        memcpy(dest, src, ph->file_size);
  102c54:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102c57:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  102c5a:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102c5d:	8b 52 10             	mov    0x10(%edx),%edx
  102c60:	89 04 24             	mov    %eax,(%esp)
  102c63:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c67:	89 54 24 08          	mov    %edx,0x8(%esp)
  102c6b:	e8 d0 fb ff ff       	call   102840 <memcpy>
      }
      
      elf_mod_entry = (void*)( header->entry );
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102c70:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102c73:	05 01 00 00 00       	add    $0x1,%eax
  102c78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102c7b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102c7e:	05 20 00 00 00       	add    $0x20,%eax
  102c83:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102c86:	e9 47 ff ff ff       	jmp    102bd2 <kernel_main+0x182>
        }
        
        memcpy(dest, src, ph->file_size);
      }
      
      vmm_activate_pagedir(kernel_init_pdir);
  102c8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c8e:	89 04 24             	mov    %eax,(%esp)
  102c91:	e8 3a e4 ff ff       	call   1010d0 <vmm_activate_pagedir>
      
      init_task(elf_mod_pdir, elf_mod_entry);
  102c96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102c99:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  102c9c:	89 04 24             	mov    %eax,(%esp)
  102c9f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102ca3:	e8 c8 07 00 00       	call   103470 <init_task>
  102ca8:	89 45 a8             	mov    %eax,-0x58(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102cab:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102cae:	05 01 00 00 00       	add    $0x1,%eax
  102cb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102cb6:	e9 12 fe ff ff       	jmp    102acd <kernel_main+0x7d>
      vmm_activate_pagedir(kernel_init_pdir);
      
      init_task(elf_mod_pdir, elf_mod_entry);
	  }
	
	  enable_scheduling();
  102cbb:	e8 00 04 00 00       	call   1030c0 <enable_scheduling>
	}
  102cc0:	e9 11 00 00 00       	jmp    102cd6 <kernel_main+0x286>
  102cc5:	8d 05 bb 52 10 00    	lea    0x1052bb,%eax
	else
	{
	  kprintf("No Modules loadable. Microkernel shutting down.\nThank you for using this pointless version of mikrOS\n");
  102ccb:	89 04 24             	mov    %eax,(%esp)
  102cce:	e8 ad f6 ff ff       	call   102380 <kprintf>
  102cd3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	}

	while(1) {  }
  102cd6:	e9 00 00 00 00       	jmp    102cdb <kernel_main+0x28b>
  102cdb:	e9 fb ff ff ff       	jmp    102cdb <kernel_main+0x28b>

00102ce0 <intr_stub_0>:
  102ce0:	6a 00                	push   $0x0
  102ce2:	6a 00                	push   $0x0
  102ce4:	e9 eb 00 00 00       	jmp    102dd4 <intr_common_handler>

00102ce9 <intr_stub_1>:
  102ce9:	6a 00                	push   $0x0
  102ceb:	6a 01                	push   $0x1
  102ced:	e9 e2 00 00 00       	jmp    102dd4 <intr_common_handler>

00102cf2 <intr_stub_2>:
  102cf2:	6a 00                	push   $0x0
  102cf4:	6a 02                	push   $0x2
  102cf6:	e9 d9 00 00 00       	jmp    102dd4 <intr_common_handler>

00102cfb <intr_stub_3>:
  102cfb:	6a 00                	push   $0x0
  102cfd:	6a 03                	push   $0x3
  102cff:	e9 d0 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d04 <intr_stub_4>:
  102d04:	6a 00                	push   $0x0
  102d06:	6a 04                	push   $0x4
  102d08:	e9 c7 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d0d <intr_stub_5>:
  102d0d:	6a 00                	push   $0x0
  102d0f:	6a 05                	push   $0x5
  102d11:	e9 be 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d16 <intr_stub_6>:
  102d16:	6a 00                	push   $0x0
  102d18:	6a 06                	push   $0x6
  102d1a:	e9 b5 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d1f <intr_stub_7>:
  102d1f:	6a 00                	push   $0x0
  102d21:	6a 07                	push   $0x7
  102d23:	e9 ac 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d28 <intr_stub_8>:
  102d28:	6a 08                	push   $0x8
  102d2a:	e9 a5 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d2f <intr_stub_9>:
  102d2f:	6a 00                	push   $0x0
  102d31:	6a 09                	push   $0x9
  102d33:	e9 9c 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d38 <intr_stub_10>:
  102d38:	6a 0a                	push   $0xa
  102d3a:	e9 95 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d3f <intr_stub_11>:
  102d3f:	6a 0b                	push   $0xb
  102d41:	e9 8e 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d46 <intr_stub_12>:
  102d46:	6a 0c                	push   $0xc
  102d48:	e9 87 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d4d <intr_stub_13>:
  102d4d:	6a 0d                	push   $0xd
  102d4f:	e9 80 00 00 00       	jmp    102dd4 <intr_common_handler>

00102d54 <intr_stub_14>:
  102d54:	6a 0e                	push   $0xe
  102d56:	eb 7c                	jmp    102dd4 <intr_common_handler>

00102d58 <intr_stub_15>:
  102d58:	6a 00                	push   $0x0
  102d5a:	6a 0f                	push   $0xf
  102d5c:	eb 76                	jmp    102dd4 <intr_common_handler>

00102d5e <intr_stub_16>:
  102d5e:	6a 00                	push   $0x0
  102d60:	6a 10                	push   $0x10
  102d62:	eb 70                	jmp    102dd4 <intr_common_handler>

00102d64 <intr_stub_17>:
  102d64:	6a 11                	push   $0x11
  102d66:	eb 6c                	jmp    102dd4 <intr_common_handler>

00102d68 <intr_stub_18>:
  102d68:	6a 00                	push   $0x0
  102d6a:	6a 12                	push   $0x12
  102d6c:	eb 66                	jmp    102dd4 <intr_common_handler>

00102d6e <intr_stub_32>:
  102d6e:	6a 00                	push   $0x0
  102d70:	6a 20                	push   $0x20
  102d72:	eb 60                	jmp    102dd4 <intr_common_handler>

00102d74 <intr_stub_33>:
  102d74:	6a 00                	push   $0x0
  102d76:	6a 21                	push   $0x21
  102d78:	eb 5a                	jmp    102dd4 <intr_common_handler>

00102d7a <intr_stub_34>:
  102d7a:	6a 00                	push   $0x0
  102d7c:	6a 22                	push   $0x22
  102d7e:	eb 54                	jmp    102dd4 <intr_common_handler>

00102d80 <intr_stub_35>:
  102d80:	6a 00                	push   $0x0
  102d82:	6a 23                	push   $0x23
  102d84:	eb 4e                	jmp    102dd4 <intr_common_handler>

00102d86 <intr_stub_36>:
  102d86:	6a 00                	push   $0x0
  102d88:	6a 24                	push   $0x24
  102d8a:	eb 48                	jmp    102dd4 <intr_common_handler>

00102d8c <intr_stub_37>:
  102d8c:	6a 00                	push   $0x0
  102d8e:	6a 25                	push   $0x25
  102d90:	eb 42                	jmp    102dd4 <intr_common_handler>

00102d92 <intr_stub_38>:
  102d92:	6a 00                	push   $0x0
  102d94:	6a 26                	push   $0x26
  102d96:	eb 3c                	jmp    102dd4 <intr_common_handler>

00102d98 <intr_stub_39>:
  102d98:	6a 00                	push   $0x0
  102d9a:	6a 27                	push   $0x27
  102d9c:	eb 36                	jmp    102dd4 <intr_common_handler>

00102d9e <intr_stub_40>:
  102d9e:	6a 00                	push   $0x0
  102da0:	6a 28                	push   $0x28
  102da2:	eb 30                	jmp    102dd4 <intr_common_handler>

00102da4 <intr_stub_41>:
  102da4:	6a 00                	push   $0x0
  102da6:	6a 29                	push   $0x29
  102da8:	eb 2a                	jmp    102dd4 <intr_common_handler>

00102daa <intr_stub_42>:
  102daa:	6a 00                	push   $0x0
  102dac:	6a 2a                	push   $0x2a
  102dae:	eb 24                	jmp    102dd4 <intr_common_handler>

00102db0 <intr_stub_43>:
  102db0:	6a 00                	push   $0x0
  102db2:	6a 2b                	push   $0x2b
  102db4:	eb 1e                	jmp    102dd4 <intr_common_handler>

00102db6 <intr_stub_44>:
  102db6:	6a 00                	push   $0x0
  102db8:	6a 2c                	push   $0x2c
  102dba:	eb 18                	jmp    102dd4 <intr_common_handler>

00102dbc <intr_stub_45>:
  102dbc:	6a 00                	push   $0x0
  102dbe:	6a 2d                	push   $0x2d
  102dc0:	eb 12                	jmp    102dd4 <intr_common_handler>

00102dc2 <intr_stub_46>:
  102dc2:	6a 00                	push   $0x0
  102dc4:	6a 2e                	push   $0x2e
  102dc6:	eb 0c                	jmp    102dd4 <intr_common_handler>

00102dc8 <intr_stub_47>:
  102dc8:	6a 00                	push   $0x0
  102dca:	6a 2f                	push   $0x2f
  102dcc:	eb 06                	jmp    102dd4 <intr_common_handler>

00102dce <intr_stub_48>:
  102dce:	6a 00                	push   $0x0
  102dd0:	6a 30                	push   $0x30
  102dd2:	eb 00                	jmp    102dd4 <intr_common_handler>

00102dd4 <intr_common_handler>:
  102dd4:	55                   	push   %ebp
  102dd5:	57                   	push   %edi
  102dd6:	56                   	push   %esi
  102dd7:	52                   	push   %edx
  102dd8:	51                   	push   %ecx
  102dd9:	53                   	push   %ebx
  102dda:	50                   	push   %eax
  102ddb:	66 b8 10 00          	mov    $0x10,%ax
  102ddf:	66 8e d8             	mov    %ax,%ds
  102de2:	66 8e c0             	mov    %ax,%es
  102de5:	89 e0                	mov    %esp,%eax
  102de7:	bc 00 a0 10 00       	mov    $0x10a000,%esp
  102dec:	50                   	push   %eax
  102ded:	e8 2e f2 ff ff       	call   102020 <handle_interrupt>
  102df2:	89 c4                	mov    %eax,%esp
  102df4:	66 b8 23 00          	mov    $0x23,%ax
  102df8:	66 8e d8             	mov    %ax,%ds
  102dfb:	66 8e c0             	mov    %ax,%es
  102dfe:	58                   	pop    %eax
  102dff:	5b                   	pop    %ebx
  102e00:	59                   	pop    %ecx
  102e01:	5a                   	pop    %edx
  102e02:	5e                   	pop    %esi
  102e03:	5f                   	pop    %edi
  102e04:	5d                   	pop    %ebp
  102e05:	83 c4 08             	add    $0x8,%esp
  102e08:	cf                   	iret   
  102e09:	66 90                	xchg   %ax,%ax
  102e0b:	66 90                	xchg   %ax,%ax
  102e0d:	66 90                	xchg   %ax,%ax
  102e0f:	90                   	nop

00102e10 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  102e10:	55                   	push   %ebp
  102e11:	89 e5                	mov    %esp,%ebp
	struct {
  102e13:	83 ec 08             	sub    $0x8,%esp
  102e16:	a1 2c 50 10 00       	mov    0x10502c,%eax
  102e1b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102e1e:	66 8b 0d 30 50 10 00 	mov    0x105030,%cx
  102e25:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
	asm volatile("lgdt %0" : : "m" (gdtp));
  102e29:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  102e2d:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  102e31:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  102e34:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  102e37:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  102e3a:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  102e3d:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  102e40:	83 c4 08             	add    $0x8,%esp
  102e43:	5d                   	pop    %ebp
  102e44:	c3                   	ret    
  102e45:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102e4c:	00 00 00 00 

00102e50 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  102e50:	55                   	push   %ebp
  102e51:	89 e5                	mov    %esp,%ebp
  102e53:	56                   	push   %esi
  102e54:	83 ec 10             	sub    $0x10,%esp
  102e57:	8b 45 14             	mov    0x14(%ebp),%eax
  102e5a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102e5d:	8b 55 0c             	mov    0xc(%ebp),%edx
  102e60:	8b 75 08             	mov    0x8(%ebp),%esi
  102e63:	89 75 f8             	mov    %esi,-0x8(%ebp)
  102e66:	89 55 f4             	mov    %edx,-0xc(%ebp)
  102e69:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102e6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    gdt[i] = limit & 0xffffLL;
  102e6f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  102e73:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102e76:	89 04 cd 30 b4 12 00 	mov    %eax,0x12b430(,%ecx,8)
  102e7d:	c7 04 cd 34 b4 12 00 	movl   $0x0,0x12b434(,%ecx,8)
  102e84:	00 00 00 00 
    gdt[i] |= (base & 0xffffffLL) << 16;
  102e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e8b:	25 ff ff ff 00       	and    $0xffffff,%eax
  102e90:	89 c1                	mov    %eax,%ecx
  102e92:	c1 e1 10             	shl    $0x10,%ecx
  102e95:	c1 e8 10             	shr    $0x10,%eax
  102e98:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102e9b:	8b 34 d5 34 b4 12 00 	mov    0x12b434(,%edx,8),%esi
  102ea2:	09 f0                	or     %esi,%eax
  102ea4:	8b 34 d5 30 b4 12 00 	mov    0x12b430(,%edx,8),%esi
  102eab:	09 ce                	or     %ecx,%esi
  102ead:	89 04 d5 34 b4 12 00 	mov    %eax,0x12b434(,%edx,8)
  102eb4:	89 34 d5 30 b4 12 00 	mov    %esi,0x12b430(,%edx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  102ebb:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  102ebf:	c1 e0 08             	shl    $0x8,%eax
  102ec2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102ec5:	8b 14 cd 30 b4 12 00 	mov    0x12b430(,%ecx,8),%edx
  102ecc:	8b 34 cd 34 b4 12 00 	mov    0x12b434(,%ecx,8),%esi
  102ed3:	09 c6                	or     %eax,%esi
  102ed5:	89 14 cd 30 b4 12 00 	mov    %edx,0x12b430(,%ecx,8)
  102edc:	89 34 cd 34 b4 12 00 	mov    %esi,0x12b434(,%ecx,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  102ee3:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  102ee7:	83 e0 0f             	and    $0xf,%eax
  102eea:	c1 e0 10             	shl    $0x10,%eax
  102eed:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102ef0:	8b 14 cd 30 b4 12 00 	mov    0x12b430(,%ecx,8),%edx
  102ef7:	8b 34 cd 34 b4 12 00 	mov    0x12b434(,%ecx,8),%esi
  102efe:	09 c6                	or     %eax,%esi
  102f00:	89 14 cd 30 b4 12 00 	mov    %edx,0x12b430(,%ecx,8)
  102f07:	89 34 cd 34 b4 12 00 	mov    %esi,0x12b434(,%ecx,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  102f0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102f11:	c1 e0 0c             	shl    $0xc,%eax
  102f14:	25 00 00 f0 0f       	and    $0xff00000,%eax
  102f19:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102f1c:	8b 14 cd 30 b4 12 00 	mov    0x12b430(,%ecx,8),%edx
  102f23:	8b 34 cd 34 b4 12 00 	mov    0x12b434(,%ecx,8),%esi
  102f2a:	09 c6                	or     %eax,%esi
  102f2c:	89 14 cd 30 b4 12 00 	mov    %edx,0x12b430(,%ecx,8)
  102f33:	89 34 cd 34 b4 12 00 	mov    %esi,0x12b434(,%ecx,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  102f3a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  102f3e:	c1 e0 18             	shl    $0x18,%eax
  102f41:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102f44:	8b 14 cd 30 b4 12 00 	mov    0x12b430(,%ecx,8),%edx
  102f4b:	8b 34 cd 34 b4 12 00 	mov    0x12b434(,%ecx,8),%esi
  102f52:	09 c6                	or     %eax,%esi
  102f54:	89 14 cd 30 b4 12 00 	mov    %edx,0x12b430(,%ecx,8)
  102f5b:	89 34 cd 34 b4 12 00 	mov    %esi,0x12b434(,%ecx,8)
}
  102f62:	83 c4 10             	add    $0x10,%esp
  102f65:	5e                   	pop    %esi
  102f66:	5d                   	pop    %ebp
  102f67:	c3                   	ret    
  102f68:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  102f6f:	00 

00102f70 <init_gdt>:

void init_gdt(void)
{
  102f70:	55                   	push   %ebp
  102f71:	89 e5                	mov    %esp,%ebp
  102f73:	56                   	push   %esi
  102f74:	83 ec 54             	sub    $0x54,%esp
  102f77:	b8 00 00 00 00       	mov    $0x0,%eax
    set_gdt_entry(0, 0, 0, 0);
  102f7c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102f83:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f8a:	00 
  102f8b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102f92:	00 
  102f93:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102f9a:	00 
  102f9b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102f9e:	e8 ad fe ff ff       	call   102e50 <set_gdt_entry>
  102fa3:	b8 01 00 00 00       	mov    $0x1,%eax
  102fa8:	b9 00 00 00 00       	mov    $0x0,%ecx
  102fad:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102fb2:	be 9a 0c 00 00       	mov    $0xc9a,%esi
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102fb7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  102fbe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102fc5:	00 
  102fc6:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102fcd:	00 
  102fce:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  102fd5:	00 
  102fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102fd9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102fdc:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102fdf:	89 75 e8             	mov    %esi,-0x18(%ebp)
  102fe2:	e8 69 fe ff ff       	call   102e50 <set_gdt_entry>
  102fe7:	b8 02 00 00 00       	mov    $0x2,%eax
  102fec:	b9 00 00 00 00       	mov    $0x0,%ecx
  102ff1:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102ff6:	be 92 0c 00 00       	mov    $0xc92,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102ffb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  103002:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103009:	00 
  10300a:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103011:	00 
  103012:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  103019:	00 
  10301a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10301d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  103020:	89 55 dc             	mov    %edx,-0x24(%ebp)
  103023:	89 75 d8             	mov    %esi,-0x28(%ebp)
  103026:	e8 25 fe ff ff       	call   102e50 <set_gdt_entry>
  10302b:	b8 03 00 00 00       	mov    $0x3,%eax
  103030:	b9 00 00 00 00       	mov    $0x0,%ecx
  103035:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10303a:	be fa 0c 00 00       	mov    $0xcfa,%esi
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10303f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  103046:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10304d:	00 
  10304e:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103055:	00 
  103056:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10305d:	00 
  10305e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  103061:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  103064:	89 55 cc             	mov    %edx,-0x34(%ebp)
  103067:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10306a:	e8 e1 fd ff ff       	call   102e50 <set_gdt_entry>
  10306f:	b8 04 00 00 00       	mov    $0x4,%eax
  103074:	b9 00 00 00 00       	mov    $0x0,%ecx
  103079:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10307e:	be f2 0c 00 00       	mov    $0xcf2,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  103083:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10308a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103091:	00 
  103092:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103099:	00 
  10309a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  1030a1:	00 
  1030a2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1030a5:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  1030a8:	89 55 bc             	mov    %edx,-0x44(%ebp)
  1030ab:	89 75 b8             	mov    %esi,-0x48(%ebp)
  1030ae:	e8 9d fd ff ff       	call   102e50 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  1030b3:	e8 58 fd ff ff       	call   102e10 <load_gdt>
}
  1030b8:	83 c4 54             	add    $0x54,%esp
  1030bb:	5e                   	pop    %esi
  1030bc:	5d                   	pop    %ebp
  1030bd:	c3                   	ret    
  1030be:	66 90                	xchg   %ax,%ax

001030c0 <enable_scheduling>:
struct cpu_state* current_cpu = (void*) STATIC_ALLOC_VADDR + 0x1000 - sizeof(struct cpu_state);
uint8_t* user_stack                = (void*) STATIC_ALLOC_VADDR + 0x1000;
uint32_t* next_pagedir             = (void*) STATIC_ALLOC_VADDR + 0x2000;
uint32_t* prev_pagedir             = (void*) STATIC_ALLOC_VADDR + 0x2004;

void enable_scheduling(void) {
  1030c0:	55                   	push   %ebp
  1030c1:	89 e5                	mov    %esp,%ebp
  sched_enabled = 1;
  1030c3:	c7 05 28 b4 10 00 01 	movl   $0x1,0x10b428
  1030ca:	00 00 00 
}
  1030cd:	5d                   	pop    %ebp
  1030ce:	c3                   	ret    
  1030cf:	90                   	nop

001030d0 <scheduling_enabled>:

uint32_t scheduling_enabled(void) {
  1030d0:	55                   	push   %ebp
  1030d1:	89 e5                	mov    %esp,%ebp
  return sched_enabled;
  1030d3:	a1 28 b4 10 00       	mov    0x10b428,%eax
  1030d8:	5d                   	pop    %ebp
  1030d9:	c3                   	ret    
  1030da:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001030e0 <schedule_exception>:
}

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  1030e0:	55                   	push   %ebp
  1030e1:	89 e5                	mov    %esp,%ebp
  1030e3:	83 ec 28             	sub    $0x28,%esp
  1030e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1030e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(vmm_get_current_pagedir() == first_pagedir && *next_pagedir == 0) {
  1030ec:	e8 1f d6 ff ff       	call   100710 <vmm_get_current_pagedir>
  1030f1:	3b 05 24 b4 10 00    	cmp    0x10b424,%eax
  1030f7:	0f 85 2b 00 00 00    	jne    103128 <schedule_exception+0x48>
  1030fd:	a1 98 41 10 00       	mov    0x104198,%eax
  103102:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  103108:	0f 85 1a 00 00 00    	jne    103128 <schedule_exception+0x48>
  10310e:	8d 05 21 53 10 00    	lea    0x105321,%eax
    //Only one process is running, which just crashed. Stop system.
    show_cod(cpu, "Last task crashed. Terminating kernel...");
  103114:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103117:	89 0c 24             	mov    %ecx,(%esp)
  10311a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10311e:	e8 7d f0 ff ff       	call   1021a0 <show_cod>
  }
  103123:	e9 7c 00 00 00       	jmp    1031a4 <schedule_exception+0xc4>
  103128:	b8 04 00 00 00       	mov    $0x4,%eax
  else
  {
    //Potential security leaks available in following code.
    setclr(0x04);
  10312d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  103134:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103137:	e8 24 f2 ff ff       	call   102360 <setclr>
  10313c:	8d 05 4a 53 10 00    	lea    0x10534a,%eax
    kprintf("\n Terminated task due to exception %x:%x \n", cpu->intr, cpu->error);
  103142:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103145:	8b 49 1c             	mov    0x1c(%ecx),%ecx
  103148:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10314b:	8b 52 20             	mov    0x20(%edx),%edx
  10314e:	89 04 24             	mov    %eax,(%esp)
  103151:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103155:	89 54 24 08          	mov    %edx,0x8(%esp)
  103159:	e8 22 f2 ff ff       	call   102380 <kprintf>
  10315e:	8d 0d 98 51 10 00    	lea    0x105198,%ecx
    kprintf("\n");
  103164:	89 0c 24             	mov    %ecx,(%esp)
  103167:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10316a:	e8 11 f2 ff ff       	call   102380 <kprintf>
    show_dump(cpu);
  10316f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103172:	89 0c 24             	mov    %ecx,(%esp)
  103175:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103178:	e8 93 f0 ff ff       	call   102210 <show_dump>
  10317d:	b8 07 00 00 00       	mov    $0x7,%eax
    setclr(0x07);
  103182:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  103189:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10318c:	e8 cf f1 ff ff       	call   102360 <setclr>
    
    return terminate_current(cpu);
  103191:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103194:	89 04 24             	mov    %eax,(%esp)
  103197:	e8 24 00 00 00       	call   1031c0 <terminate_current>
  10319c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10319f:	e9 06 00 00 00       	jmp    1031aa <schedule_exception+0xca>
  }
  return cpu;
  1031a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1031aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1031ad:	83 c4 28             	add    $0x28,%esp
  1031b0:	5d                   	pop    %ebp
  1031b1:	c3                   	ret    
  1031b2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1031b9:	1f 84 00 00 00 00 00 

001031c0 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  1031c0:	55                   	push   %ebp
  1031c1:	89 e5                	mov    %esp,%ebp
  1031c3:	83 ec 18             	sub    $0x18,%esp
  1031c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1031c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t next = *next_pagedir;
  1031cc:	a1 98 41 10 00       	mov    0x104198,%eax
  1031d1:	8b 00                	mov    (%eax),%eax
  1031d3:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t prev = *prev_pagedir;
  1031d6:	a1 9c 41 10 00       	mov    0x10419c,%eax
  1031db:	8b 00                	mov    (%eax),%eax
  1031dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  //TODO: free resources here
  
  if(vmm_get_current_pagedir() == first_pagedir) {
  1031e0:	e8 2b d5 ff ff       	call   100710 <vmm_get_current_pagedir>
  1031e5:	3b 05 24 b4 10 00    	cmp    0x10b424,%eax
  1031eb:	0f 85 08 00 00 00    	jne    1031f9 <terminate_current+0x39>
    first_pagedir = next;
  1031f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031f4:	a3 24 b4 10 00       	mov    %eax,0x10b424
  }
  
  if(next != 0) {
  1031f9:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103200:	0f 84 16 00 00 00    	je     10321c <terminate_current+0x5c>
    vmm_activate_pagedir(next);
  103206:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103209:	89 04 24             	mov    %eax,(%esp)
  10320c:	e8 bf de ff ff       	call   1010d0 <vmm_activate_pagedir>
    *prev_pagedir = prev;
  103211:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103214:	8b 0d 9c 41 10 00    	mov    0x10419c,%ecx
  10321a:	89 01                	mov    %eax,(%ecx)
  }

  if(prev != 0) {
  10321c:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103223:	0f 84 16 00 00 00    	je     10323f <terminate_current+0x7f>
    vmm_activate_pagedir(prev);
  103229:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10322c:	89 04 24             	mov    %eax,(%esp)
  10322f:	e8 9c de ff ff       	call   1010d0 <vmm_activate_pagedir>
    *next_pagedir = next;
  103234:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103237:	8b 0d 98 41 10 00    	mov    0x104198,%ecx
  10323d:	89 01                	mov    %eax,(%ecx)
  }
  

  return schedule(cpu);
  10323f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103242:	89 04 24             	mov    %eax,(%esp)
  103245:	e8 06 00 00 00       	call   103250 <schedule>
  10324a:	83 c4 18             	add    $0x18,%esp
  10324d:	5d                   	pop    %ebp
  10324e:	c3                   	ret    
  10324f:	90                   	nop

00103250 <schedule>:
  
  return task_pagedir;
}

struct cpu_state* schedule(struct cpu_state* cpu)
{
  103250:	55                   	push   %ebp
  103251:	89 e5                	mov    %esp,%ebp
  103253:	83 ec 28             	sub    $0x28,%esp
  103256:	8b 45 08             	mov    0x8(%ebp),%eax
  103259:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t newCPU = 0;
  10325c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  if(first_pagedir != 0 && sched_enabled) {  
  103263:	81 3d 24 b4 10 00 00 	cmpl   $0x0,0x10b424
  10326a:	00 00 00 
  10326d:	0f 84 66 00 00 00    	je     1032d9 <schedule+0x89>
  103273:	81 3d 28 b4 10 00 00 	cmpl   $0x0,0x10b428
  10327a:	00 00 00 
  10327d:	0f 84 56 00 00 00    	je     1032d9 <schedule+0x89>
    uint32_t next = *next_pagedir;
  103283:	a1 98 41 10 00       	mov    0x104198,%eax
  103288:	8b 00                	mov    (%eax),%eax
  10328a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next == 0) next = first_pagedir;
  10328d:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103294:	0f 85 08 00 00 00    	jne    1032a2 <schedule+0x52>
  10329a:	a1 24 b4 10 00       	mov    0x10b424,%eax
  10329f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1032a2:	b8 38 00 00 00       	mov    $0x38,%eax
    
    memcpy(current_cpu, cpu, sizeof(struct cpu_state));
  1032a7:	8b 0d 90 41 10 00    	mov    0x104190,%ecx
  1032ad:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1032b0:	89 0c 24             	mov    %ecx,(%esp)
  1032b3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1032b7:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1032be:	00 
  1032bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1032c2:	e8 79 f5 ff ff       	call   102840 <memcpy>
    
    newCPU = 1;            
  1032c7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    vmm_activate_pagedir(next);
  1032ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032d1:	89 04 24             	mov    %eax,(%esp)
  1032d4:	e8 f7 dd ff ff       	call   1010d0 <vmm_activate_pagedir>
  }
  
  if(newCPU) return current_cpu;
  1032d9:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1032e0:	0f 84 0d 00 00 00    	je     1032f3 <schedule+0xa3>
  1032e6:	a1 90 41 10 00       	mov    0x104190,%eax
  1032eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1032ee:	e9 06 00 00 00       	jmp    1032f9 <schedule+0xa9>
  return cpu;
  1032f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1032f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1032fc:	83 c4 28             	add    $0x28,%esp
  1032ff:	5d                   	pop    %ebp
  103300:	c3                   	ret    
  103301:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103308:	0f 1f 84 00 00 00 00 
  10330f:	00 

00103310 <fork_task_state>:
  

  return schedule(cpu);
}

void fork_task_state(uint32_t task_pagedir) {
  103310:	55                   	push   %ebp
  103311:	89 e5                	mov    %esp,%ebp
  103313:	56                   	push   %esi
  103314:	83 ec 34             	sub    $0x34,%esp
  103317:	8b 45 08             	mov    0x8(%ebp),%eax
  10331a:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t old_pagedir = vmm_get_current_pagedir();
  10331d:	e8 ee d3 ff ff       	call   100710 <vmm_get_current_pagedir>
  103322:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  uint32_t cpu_paddr = 0;
  103325:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  uint32_t stack_paddr = 0;
  10332c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  
  vmm_activate_pagedir(task_pagedir);
  103333:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103336:	89 04 24             	mov    %eax,(%esp)
  103339:	e8 92 dd ff ff       	call   1010d0 <vmm_activate_pagedir>
  
  cpu_paddr = vmm_resolve((void*)((uint32_t)current_cpu & 0xFFFFF000));
  10333e:	a1 90 41 10 00       	mov    0x104190,%eax
  103343:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103348:	89 04 24             	mov    %eax,(%esp)
  10334b:	e8 c0 da ff ff       	call   100e10 <vmm_resolve>
  103350:	89 45 f0             	mov    %eax,-0x10(%ebp)
  stack_paddr = vmm_resolve((void*)((uint32_t)user_stack & 0xFFFFF000));
  103353:	a1 94 41 10 00       	mov    0x104194,%eax
  103358:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10335d:	89 04 24             	mov    %eax,(%esp)
  103360:	e8 ab da ff ff       	call   100e10 <vmm_resolve>
  103365:	89 45 ec             	mov    %eax,-0x14(%ebp)
  
  vmm_activate_pagedir(old_pagedir);
  103368:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10336b:	89 04 24             	mov    %eax,(%esp)
  10336e:	e8 5d dd ff ff       	call   1010d0 <vmm_activate_pagedir>
  103373:	b8 00 00 00 00       	mov    $0x0,%eax
  
  void* fvaddr = vmm_alloc(0);
  103378:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10337f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103382:	e8 d9 d6 ff ff       	call   100a60 <vmm_alloc>
  103387:	89 45 e8             	mov    %eax,-0x18(%ebp)
  vmm_free(fvaddr); //trick to find a empty vaddr
  10338a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10338d:	89 04 24             	mov    %eax,(%esp)
  103390:	e8 9b db ff ff       	call   100f30 <vmm_free>
  103395:	b8 00 02 00 00       	mov    $0x200,%eax
  
  map_address_active((uint32_t)fvaddr, cpu_paddr, PT_ALLOCATABLE);
  10339a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10339d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1033a0:	89 0c 24             	mov    %ecx,(%esp)
  1033a3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1033a7:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
  1033ae:	00 
  1033af:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1033b2:	e8 29 db ff ff       	call   100ee0 <map_address_active>
  1033b7:	b8 00 02 00 00       	mov    $0x200,%eax
  1033bc:	b9 00 10 00 00       	mov    $0x1000,%ecx
  memcpy(fvaddr, (void*)((uint32_t)current_cpu & 0xFFFFF000), 4096);
  1033c1:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1033c4:	8b 35 90 41 10 00    	mov    0x104190,%esi
  1033ca:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
  1033d0:	89 14 24             	mov    %edx,(%esp)
  1033d3:	89 74 24 04          	mov    %esi,0x4(%esp)
  1033d7:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  1033de:	00 
  1033df:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1033e2:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  1033e5:	e8 56 f4 ff ff       	call   102840 <memcpy>
  
  map_address_active((uint32_t)fvaddr, stack_paddr, PT_ALLOCATABLE);
  1033ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1033ed:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1033f0:	89 04 24             	mov    %eax,(%esp)
  1033f3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1033f7:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
  1033fe:	00 
  1033ff:	e8 dc da ff ff       	call   100ee0 <map_address_active>
  103404:	b8 00 10 00 00       	mov    $0x1000,%eax
  memcpy(fvaddr, (void*)((uint32_t)user_stack & 0xFFFFF000), 4096);
  103409:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10340c:	8b 15 94 41 10 00    	mov    0x104194,%edx
  103412:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  103418:	89 0c 24             	mov    %ecx,(%esp)
  10341b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10341f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  103426:	00 
  103427:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10342a:	e8 11 f4 ff ff       	call   102840 <memcpy>
  
  vmm_unmap(fvaddr);
  10342f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103432:	89 04 24             	mov    %eax,(%esp)
  103435:	e8 16 d7 ff ff       	call   100b50 <vmm_unmap>
  
  vmm_activate_pagedir(task_pagedir);
  10343a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10343d:	89 04 24             	mov    %eax,(%esp)
  103440:	e8 8b dc ff ff       	call   1010d0 <vmm_activate_pagedir>
  
  current_cpu->eax = 0;
  103445:	a1 90 41 10 00       	mov    0x104190,%eax
  10344a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  
  vmm_activate_pagedir(old_pagedir);
  103450:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103453:	89 04 24             	mov    %eax,(%esp)
  103456:	e8 75 dc ff ff       	call   1010d0 <vmm_activate_pagedir>
}
  10345b:	83 c4 34             	add    $0x34,%esp
  10345e:	5e                   	pop    %esi
  10345f:	5d                   	pop    %ebp
  103460:	c3                   	ret    
  103461:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103468:	0f 1f 84 00 00 00 00 
  10346f:	00 

00103470 <init_task>:

uint32_t init_task(uint32_t task_pagedir, void* entry)
{
  103470:	55                   	push   %ebp
  103471:	89 e5                	mov    %esp,%ebp
  103473:	57                   	push   %edi
  103474:	56                   	push   %esi
  103475:	81 ec b0 00 00 00    	sub    $0xb0,%esp
  10347b:	8b 45 0c             	mov    0xc(%ebp),%eax
  10347e:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103481:	8d 15 75 53 10 00    	lea    0x105375,%edx
  103487:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10348a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf("Starting task at %x", entry);
  10348d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103490:	89 14 24             	mov    %edx,(%esp)
  103493:	89 44 24 04          	mov    %eax,0x4(%esp)
  103497:	e8 e4 ee ff ff       	call   102380 <kprintf>

  uint32_t old_fpd = first_pagedir;
  10349c:	8b 0d 24 b4 10 00    	mov    0x10b424,%ecx
  1034a2:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  uint32_t old_pagedir = vmm_get_current_pagedir();
  1034a5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  1034a8:	e8 63 d2 ff ff       	call   100710 <vmm_get_current_pagedir>
  1034ad:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t task_next_pagedir = 0;    
  1034b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  
  if(first_pagedir == 0) {
  1034b7:	81 3d 24 b4 10 00 00 	cmpl   $0x0,0x10b424
  1034be:	00 00 00 
  1034c1:	0f 85 0d 00 00 00    	jne    1034d4 <init_task+0x64>
    first_pagedir = task_pagedir;
  1034c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034ca:	a3 24 b4 10 00       	mov    %eax,0x10b424
  }
  1034cf:	e9 26 00 00 00       	jmp    1034fa <init_task+0x8a>
  else
  {
    task_next_pagedir = first_pagedir;
  1034d4:	a1 24 b4 10 00       	mov    0x10b424,%eax
  1034d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    first_pagedir = task_pagedir;
  1034dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034df:	a3 24 b4 10 00       	mov    %eax,0x10b424
    vmm_activate_pagedir(task_next_pagedir);
  1034e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1034e7:	89 04 24             	mov    %eax,(%esp)
  1034ea:	e8 e1 db ff ff       	call   1010d0 <vmm_activate_pagedir>
    *prev_pagedir = task_pagedir;
  1034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034f2:	8b 0d 9c 41 10 00    	mov    0x10419c,%ecx
  1034f8:	89 01                	mov    %eax,(%ecx)
  }
  
  vmm_activate_pagedir(task_pagedir);
  1034fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034fd:	89 04 24             	mov    %eax,(%esp)
  103500:	e8 cb db ff ff       	call   1010d0 <vmm_activate_pagedir>
  103505:	b8 00 00 00 00       	mov    $0x0,%eax
  10350a:	b9 04 00 00 00       	mov    $0x4,%ecx
  
  vmm_alloc_static(0x0000, PT_PUBLIC);
  10350f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  103516:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  10351d:	00 
  10351e:	89 45 a0             	mov    %eax,-0x60(%ebp)
  103521:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  103524:	e8 07 db ff ff       	call   101030 <vmm_alloc_static>
  103529:	b9 00 10 00 00       	mov    $0x1000,%ecx
  10352e:	ba 04 00 00 00       	mov    $0x4,%edx
  vmm_alloc_static(0x1000, PT_PUBLIC);
  103533:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  10353a:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  103541:	00 
  103542:	89 45 98             	mov    %eax,-0x68(%ebp)
  103545:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  103548:	89 55 90             	mov    %edx,-0x70(%ebp)
  10354b:	e8 e0 da ff ff       	call   101030 <vmm_alloc_static>
  103550:	b9 00 20 00 00       	mov    $0x2000,%ecx
  103555:	ba 00 00 00 00       	mov    $0x0,%edx
  vmm_alloc_static(0x2000, 0);
  10355a:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  103561:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103568:	00 
  103569:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10356c:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  10356f:	89 55 84             	mov    %edx,-0x7c(%ebp)
  103572:	e8 b9 da ff ff       	call   101030 <vmm_alloc_static>
  103577:	b9 38 00 00 00       	mov    $0x38,%ecx
  10357c:	8d 55 a8             	lea    -0x58(%ebp),%edx
  
  *next_pagedir = task_next_pagedir;
  10357f:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  103582:	8b 3d 98 41 10 00    	mov    0x104198,%edi
  103588:	89 37                	mov    %esi,(%edi)

  struct cpu_state new_state = {
  10358a:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
  103591:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  103598:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  10359f:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  1035a6:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  1035ad:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  1035b4:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  1035bb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  1035c2:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  1035c9:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1035cc:	89 75 cc             	mov    %esi,-0x34(%ebp)
  1035cf:	c7 45 d0 1b 00 00 00 	movl   $0x1b,-0x30(%ebp)
  1035d6:	c7 45 d4 02 02 00 00 	movl   $0x202,-0x2c(%ebp)
  1035dd:	8b 35 94 41 10 00    	mov    0x104194,%esi
  1035e3:	81 c6 00 10 00 00    	add    $0x1000,%esi
  1035e9:	89 75 d8             	mov    %esi,-0x28(%ebp)
  1035ec:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%ebp)
      .ss  = 0x20 | 0x03,
      
      .eflags = 0x202,
  };
      
  *current_cpu = new_state;
  1035f3:	8b 35 90 41 10 00    	mov    0x104190,%esi
  1035f9:	89 34 24             	mov    %esi,(%esp)
  1035fc:	89 54 24 04          	mov    %edx,0x4(%esp)
  103600:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103607:	00 
  103608:	89 45 80             	mov    %eax,-0x80(%ebp)
  10360b:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  103611:	e8 2a f2 ff ff       	call   102840 <memcpy>
  
  vmm_activate_pagedir(old_pagedir);
  103616:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103619:	89 04 24             	mov    %eax,(%esp)
  10361c:	e8 af da ff ff       	call   1010d0 <vmm_activate_pagedir>
  
  if(old_fpd == 0) {
  103621:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  103628:	0f 85 9c 00 00 00    	jne    1036ca <init_task+0x25a>
  10362e:	b8 00 00 00 00       	mov    $0x0,%eax
  103633:	b9 04 00 00 00       	mov    $0x4,%ecx
    vmm_alloc_static(0x0000, PT_PUBLIC);
  103638:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10363f:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  103646:	00 
  103647:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  10364d:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
  103653:	e8 d8 d9 ff ff       	call   101030 <vmm_alloc_static>
  103658:	b9 00 10 00 00       	mov    $0x1000,%ecx
  10365d:	ba 04 00 00 00       	mov    $0x4,%edx
    vmm_alloc_static(0x1000, PT_PUBLIC);
  103662:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  103669:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  103670:	00 
  103671:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  103677:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  10367d:	89 95 68 ff ff ff    	mov    %edx,-0x98(%ebp)
  103683:	e8 a8 d9 ff ff       	call   101030 <vmm_alloc_static>
  103688:	b9 00 20 00 00       	mov    $0x2000,%ecx
  10368d:	ba 00 00 00 00       	mov    $0x0,%edx
    vmm_alloc_static(0x2000, 0);
  103692:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  103699:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1036a0:	00 
  1036a1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  1036a7:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  1036ad:	89 95 5c ff ff ff    	mov    %edx,-0xa4(%ebp)
  1036b3:	e8 78 d9 ff ff       	call   101030 <vmm_alloc_static>
    *next_pagedir = 0;
  1036b8:	8b 0d 98 41 10 00    	mov    0x104198,%ecx
  1036be:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
  1036c4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  }
  
  return task_pagedir;
  1036ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036cd:	81 c4 b0 00 00 00    	add    $0xb0,%esp
  1036d3:	5e                   	pop    %esi
  1036d4:	5f                   	pop    %edi
  1036d5:	5d                   	pop    %ebp
  1036d6:	c3                   	ret    
