
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 bc                	in     $0xbc,%al

0010000c <_start>:
  10000c:	bc 00 80 10 00       	mov    $0x108000,%esp
  100011:	53                   	push   %ebx
  100012:	e8 09 00 00 00       	call   100020 <init>

00100017 <_stop>:
  100017:	fa                   	cli    
  100018:	f4                   	hlt    
  100019:	eb fc                	jmp    100017 <_stop>
  10001b:	66 90                	xchg   %ax,%ax
  10001d:	66 90                	xchg   %ax,%ax
  10001f:	90                   	nop

00100020 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  100020:	55                   	push   %ebp
  100021:	89 e5                	mov    %esp,%ebp
  100023:	83 ec 28             	sub    $0x28,%esp
  100026:	8b 45 08             	mov    0x8(%ebp),%eax
  100029:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10002c:	e8 ef 22 00 00       	call   102320 <clrscr>
  pmm_init(mb_info);
  100031:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100034:	89 04 24             	mov    %eax,(%esp)
  100037:	e8 f4 04 00 00       	call   100530 <pmm_init>
  10003c:	8d 05 32 50 10 00    	lea    0x105032,%eax
  100042:	8d 0d 55 50 10 00    	lea    0x105055,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100048:	89 04 24             	mov    %eax,(%esp)
  10004b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10004f:	e8 4c 23 00 00       	call   1023a0 <kprintf>
  100054:	8d 0d 5f 50 10 00    	lea    0x10505f,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10005a:	89 0c 24             	mov    %ecx,(%esp)
  10005d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100060:	e8 3b 23 00 00       	call   1023a0 <kprintf>
  100065:	8d 0d 9e 50 10 00    	lea    0x10509e,%ecx

	kprintf("Initializing GDT...\n");
  10006b:	89 0c 24             	mov    %ecx,(%esp)
  10006e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100071:	e8 2a 23 00 00       	call   1023a0 <kprintf>
	
	init_gdt();
  100076:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100079:	e8 b2 2e 00 00       	call   102f30 <init_gdt>
  10007e:	8d 05 b3 50 10 00    	lea    0x1050b3,%eax

	kprintf("Initializing IDT...\n");
  100084:	89 04 24             	mov    %eax,(%esp)
  100087:	e8 14 23 00 00       	call   1023a0 <kprintf>
  10008c:	8d 0d c8 50 10 00    	lea    0x1050c8,%ecx

	init_idt();
  100092:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100095:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100098:	e8 33 13 00 00       	call   1013d0 <init_idt>

	kprintf("init_drivers()\n");
  10009d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1000a0:	89 04 24             	mov    %eax,(%esp)
  1000a3:	e8 f8 22 00 00       	call   1023a0 <kprintf>

	init_drivers();
  1000a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1000ab:	e8 30 00 00 00       	call   1000e0 <init_drivers>
  1000b0:	8d 05 d8 50 10 00    	lea    0x1050d8,%eax
	
	kprintf("switching to kernel_main()\n");
  1000b6:	89 04 24             	mov    %eax,(%esp)
  1000b9:	e8 e2 22 00 00       	call   1023a0 <kprintf>

	kernel_main(mb_info);
  1000be:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1000c1:	89 0c 24             	mov    %ecx,(%esp)
  1000c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000c7:	e8 44 29 00 00       	call   102a10 <kernel_main>

  return;
  1000cc:	83 c4 28             	add    $0x28,%esp
  1000cf:	5d                   	pop    %ebp
  1000d0:	c3                   	ret    
  1000d1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1000d8:	0f 1f 84 00 00 00 00 
  1000df:	00 

001000e0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
	init_keyboard_drv();
  1000e3:	83 ec 08             	sub    $0x8,%esp
  1000e6:	e8 05 02 00 00       	call   1002f0 <init_keyboard_drv>
}
  1000eb:	83 c4 08             	add    $0x8,%esp
  1000ee:	5d                   	pop    %ebp
  1000ef:	c3                   	ret    

001000f0 <translate_scancode>:

static uint8_t buffer[4096];
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000f0:	55                   	push   %ebp
  1000f1:	89 e5                	mov    %esp,%ebp
  1000f3:	83 ec 28             	sub    $0x28,%esp
  1000f6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000fa:	66 89 c1             	mov    %ax,%cx
  1000fd:	8b 45 08             	mov    0x8(%ebp),%eax
  100100:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100103:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  100107:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  10010b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10010e:	89 c2                	mov    %eax,%edx
  100110:	83 ea 02             	sub    $0x2,%edx
  100113:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100116:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100119:	0f 84 4f 00 00 00    	je     10016e <translate_scancode+0x7e>
  10011f:	e9 00 00 00 00       	jmp    100124 <translate_scancode+0x34>
  100124:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100127:	83 e8 01             	sub    $0x1,%eax
  10012a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10012d:	0f 84 28 00 00 00    	je     10015b <translate_scancode+0x6b>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x48>
  100138:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10013b:	85 c0                	test   %eax,%eax
  10013d:	0f 85 54 00 00 00    	jne    100197 <translate_scancode+0xa7>
  100143:	e9 00 00 00 00       	jmp    100148 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100148:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014c:	8a 0c 05 00 40 10 00 	mov    0x104000(,%eax,1),%cl
  100153:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100156:	e9 3c 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10015b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10015f:	8a 0c 05 80 40 10 00 	mov    0x104080(,%eax,1),%cl
  100166:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100169:	e9 29 00 00 00       	jmp    100197 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10016e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100172:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100177:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10017a:	0f 85 0e 00 00 00    	jne    10018e <translate_scancode+0x9e>
  100180:	e9 00 00 00 00       	jmp    100185 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100185:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100189:	e9 04 00 00 00       	jmp    100192 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10018e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100192:	e9 00 00 00 00       	jmp    100197 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100197:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10019b:	3d 00 00 00 00       	cmp    $0x0,%eax
  1001a0:	0f 85 20 00 00 00    	jne    1001c6 <translate_scancode+0xd6>
  1001a6:	8d 05 f4 50 10 00    	lea    0x1050f4,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1001ac:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001b0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001b3:	89 04 24             	mov    %eax,(%esp)
  1001b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001ba:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001be:	e8 dd 21 00 00       	call   1023a0 <kprintf>
  1001c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001c6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ca:	83 c4 28             	add    $0x28,%esp
  1001cd:	5d                   	pop    %ebp
  1001ce:	c3                   	ret    
  1001cf:	90                   	nop

001001d0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
  return;
  1001d3:	5d                   	pop    %ebp
  1001d4:	c3                   	ret    
  1001d5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1001dc:	00 00 00 00 

001001e0 <getc>:
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}

char getc() {
  1001e0:	55                   	push   %ebp
  1001e1:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  1001e3:	83 ec 08             	sub    $0x8,%esp
  1001e6:	a0 0a a0 10 00       	mov    0x10a00a,%al
  1001eb:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1001ee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001f8:	3b 05 0c b0 10 00    	cmp    0x10b00c,%eax
  1001fe:	0f 8d 24 00 00 00    	jge    100228 <getc+0x48>
		buffer[i] = buffer[i+1];	
  100204:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100207:	8a 0c 05 0b a0 10 00 	mov    0x10a00b(,%eax,1),%cl
  10020e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100211:	88 0c 05 0a a0 10 00 	mov    %cl,0x10a00a(,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100218:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10021b:	05 01 00 00 00       	add    $0x1,%eax
  100220:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100223:	e9 cd ff ff ff       	jmp    1001f5 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100228:	a1 0c b0 10 00       	mov    0x10b00c,%eax
  10022d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100232:	a3 0c b0 10 00       	mov    %eax,0x10b00c

	return ret;
  100237:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10023b:	83 c4 08             	add    $0x8,%esp
  10023e:	5d                   	pop    %ebp
  10023f:	c3                   	ret    

00100240 <send_command>:
}

void send_command(uint8_t command) {
  100240:	55                   	push   %ebp
  100241:	89 e5                	mov    %esp,%ebp
  100243:	83 ec 18             	sub    $0x18,%esp
  100246:	8a 45 08             	mov    0x8(%ebp),%al
  100249:	88 45 ff             	mov    %al,-0x1(%ebp)
  10024c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100251:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100258:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10025b:	e8 40 00 00 00       	call   1002a0 <inb>
  100260:	0f b6 c8             	movzbl %al,%ecx
  100263:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100269:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10026f:	0f 84 05 00 00 00    	je     10027a <send_command+0x3a>
  100275:	e9 d2 ff ff ff       	jmp    10024c <send_command+0xc>
  10027a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10027f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100286:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10028a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10028e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100291:	e8 2a 00 00 00       	call   1002c0 <outb>
}
  100296:	83 c4 18             	add    $0x18,%esp
  100299:	5d                   	pop    %ebp
  10029a:	c3                   	ret    
  10029b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001002a0 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  1002a0:	55                   	push   %ebp
  1002a1:	89 e5                	mov    %esp,%ebp
  1002a3:	50                   	push   %eax
  1002a4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002a8:	66 89 c1             	mov    %ax,%cx
  1002ab:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  1002af:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002b3:	ec                   	in     (%dx),%al
  1002b4:	88 45 fd             	mov    %al,-0x3(%ebp)
	return result;
  1002b7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  1002bb:	83 c4 04             	add    $0x4,%esp
  1002be:	5d                   	pop    %ebp
  1002bf:	c3                   	ret    

001002c0 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  1002c0:	55                   	push   %ebp
  1002c1:	89 e5                	mov    %esp,%ebp
  1002c3:	50                   	push   %eax
  1002c4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002c8:	66 89 c1             	mov    %ax,%cx
  1002cb:	8a 55 0c             	mov    0xc(%ebp),%dl
  1002ce:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  1002d2:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1002d5:	8a 45 fd             	mov    -0x3(%ebp),%al
  1002d8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002dc:	ee                   	out    %al,(%dx)
}
  1002dd:	83 c4 04             	add    $0x4,%esp
  1002e0:	5d                   	pop    %ebp
  1002e1:	c3                   	ret    
  1002e2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1002e9:	1f 84 00 00 00 00 00 

001002f0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1002f0:	55                   	push   %ebp
  1002f1:	89 e5                	mov    %esp,%ebp
  1002f3:	83 ec 28             	sub    $0x28,%esp
  1002f6:	b8 21 00 00 00       	mov    $0x21,%eax
  1002fb:	8d 0d d0 01 10 00    	lea    0x1001d0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  100301:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100308:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10030c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10030f:	e8 ec 1c 00 00       	call   102000 <register_intr_handler>
  100314:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100319:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100320:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100323:	e8 78 ff ff ff       	call   1002a0 <inb>
  100328:	0f b6 c8             	movzbl %al,%ecx
  10032b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100331:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100337:	0f 84 1c 00 00 00    	je     100359 <init_keyboard_drv+0x69>
  10033d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100342:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100349:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10034c:	e8 4f ff ff ff       	call   1002a0 <inb>
	}
  100351:	88 45 f3             	mov    %al,-0xd(%ebp)
  100354:	e9 bb ff ff ff       	jmp    100314 <init_keyboard_drv+0x24>
  100359:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10035e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100365:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100368:	e8 d3 fe ff ff       	call   100240 <send_command>

	init_done = 1;
  10036d:	c7 05 10 b0 10 00 01 	movl   $0x1,0x10b010
  100374:	00 00 00 
}
  100377:	83 c4 28             	add    $0x28,%esp
  10037a:	5d                   	pop    %ebp
  10037b:	c3                   	ret    
  10037c:	66 90                	xchg   %ax,%ax
  10037e:	66 90                	xchg   %ax,%ax

00100380 <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  100380:	55                   	push   %ebp
  100381:	89 e5                	mov    %esp,%ebp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100383:	56                   	push   %esi
  100384:	83 ec 10             	sub    $0x10,%esp
  100387:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10038e:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  100395:	0f 8d b7 00 00 00    	jge    100452 <pmm_alloc+0xd2>
		if(allocatable[i]) {
  10039b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10039e:	81 3c 85 2c b4 10 00 	cmpl   $0x0,0x10b42c(,%eax,4)
  1003a5:	00 00 00 00 
  1003a9:	0f 84 8e 00 00 00    	je     10043d <pmm_alloc+0xbd>
			int s;
			for(s = 0; s < 32; s++) {
  1003af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1003b6:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  1003bd:	0f 8d 75 00 00 00    	jge    100438 <pmm_alloc+0xb8>
  1003c3:	b8 01 00 00 00       	mov    $0x1,%eax
				if(allocatable[i] & (1 << s)) {
  1003c8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1003cb:	8b 0c 8d 2c b4 10 00 	mov    0x10b42c(,%ecx,4),%ecx
  1003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1003d5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1003d8:	89 d1                	mov    %edx,%ecx
  1003da:	d3 e0                	shl    %cl,%eax
  1003dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1003df:	21 c2                	and    %eax,%edx
  1003e1:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  1003e7:	0f 84 36 00 00 00    	je     100423 <pmm_alloc+0xa3>
  1003ed:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  1003f2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1003f5:	d3 e0                	shl    %cl,%eax
  1003f7:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  1003fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1003ff:	8b 34 95 2c b4 10 00 	mov    0x10b42c(,%edx,4),%esi
  100406:	21 c6                	and    %eax,%esi
  100408:	89 34 95 2c b4 10 00 	mov    %esi,0x10b42c(,%edx,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  10040f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100412:	c1 e0 05             	shl    $0x5,%eax
  100415:	03 45 f0             	add    -0x10(%ebp),%eax
  100418:	c1 e0 0c             	shl    $0xc,%eax
  10041b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10041e:	e9 36 00 00 00       	jmp    100459 <pmm_alloc+0xd9>
				}
			}
  100423:	e9 00 00 00 00       	jmp    100428 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100428:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10042b:	05 01 00 00 00       	add    $0x1,%eax
  100430:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100433:	e9 7e ff ff ff       	jmp    1003b6 <pmm_alloc+0x36>
				if(allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
  100438:	e9 00 00 00 00       	jmp    10043d <pmm_alloc+0xbd>
	}
  10043d:	e9 00 00 00 00       	jmp    100442 <pmm_alloc+0xc2>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100442:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100445:	05 01 00 00 00       	add    $0x1,%eax
  10044a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10044d:	e9 3c ff ff ff       	jmp    10038e <pmm_alloc+0xe>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  100452:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  100459:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10045c:	83 c4 10             	add    $0x10,%esp
  10045f:	5e                   	pop    %esi
  100460:	5d                   	pop    %ebp
  100461:	c3                   	ret    
  100462:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100469:	1f 84 00 00 00 00 00 

00100470 <pmm_free>:

void pmm_free(void* addr) {
  100470:	55                   	push   %ebp
  100471:	89 e5                	mov    %esp,%ebp
  100473:	56                   	push   %esi
  100474:	83 ec 14             	sub    $0x14,%esp
  100477:	8b 45 08             	mov    0x8(%ebp),%eax
  10047a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10047f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100482:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100485:	c1 e8 0c             	shr    $0xc,%eax
  100488:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10048b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10048e:	25 1f 00 00 00       	and    $0x1f,%eax
  100493:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  100496:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100499:	c1 e8 05             	shr    $0x5,%eax
  10049c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  10049f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1004a2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1004a5:	89 c1                	mov    %eax,%ecx
  1004a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004aa:	d3 e0                	shl    %cl,%eax
  1004ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1004af:	8b 34 95 2c b4 10 00 	mov    0x10b42c(,%edx,4),%esi
  1004b6:	09 c6                	or     %eax,%esi
  1004b8:	89 34 95 2c b4 10 00 	mov    %esi,0x10b42c(,%edx,4)
}
  1004bf:	83 c4 14             	add    $0x14,%esp
  1004c2:	5e                   	pop    %esi
  1004c3:	5d                   	pop    %ebp
  1004c4:	c3                   	ret    
  1004c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1004cc:	00 00 00 00 

001004d0 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
  1004d3:	56                   	push   %esi
  1004d4:	83 ec 14             	sub    $0x14,%esp
  1004d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1004da:	b9 01 00 00 00       	mov    $0x1,%ecx
  1004df:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  1004e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1004e5:	c1 e8 0c             	shr    $0xc,%eax
  1004e8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  1004eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004ee:	25 1f 00 00 00       	and    $0x1f,%eax
  1004f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  1004f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1004f9:	c1 e8 05             	shr    $0x5,%eax
  1004fc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  1004ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100502:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100505:	89 c1                	mov    %eax,%ecx
  100507:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10050a:	d3 e0                	shl    %cl,%eax
  10050c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  100511:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100514:	8b 34 95 2c b4 10 00 	mov    0x10b42c(,%edx,4),%esi
  10051b:	21 c6                	and    %eax,%esi
  10051d:	89 34 95 2c b4 10 00 	mov    %esi,0x10b42c(,%edx,4)
}
  100524:	83 c4 14             	add    $0x14,%esp
  100527:	5e                   	pop    %esi
  100528:	5d                   	pop    %ebp
  100529:	c3                   	ret    
  10052a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100530 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100530:	55                   	push   %ebp
  100531:	89 e5                	mov    %esp,%ebp
  100533:	53                   	push   %ebx
  100534:	57                   	push   %edi
  100535:	56                   	push   %esi
  100536:	83 ec 5c             	sub    $0x5c,%esp
  100539:	8b 45 08             	mov    0x8(%ebp),%eax
  10053c:	8d 0d 1a 51 10 00    	lea    0x10511a,%ecx
  100542:	8d 15 2c b4 10 00    	lea    0x10b42c,%edx
  100548:	89 d6                	mov    %edx,%esi
  10054a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  100550:	89 d7                	mov    %edx,%edi
  100552:	bb 00 00 00 00       	mov    $0x0,%ebx
  100557:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10055a:	b8 00 00 02 00       	mov    $0x20000,%eax
  10055f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100562:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100565:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  100568:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10056b:	8b 40 30             	mov    0x30(%eax),%eax
  10056e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
  100571:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100574:	8b 40 30             	mov    0x30(%eax),%eax
  100577:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10057a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10057d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100580:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100583:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  100586:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  100589:	03 41 2c             	add    0x2c(%ecx),%eax
  10058c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  10058f:	89 3c 24             	mov    %edi,(%esp)
  100592:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100599:	00 
  10059a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  1005a1:	00 
  1005a2:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  1005a5:	89 55 b8             	mov    %edx,-0x48(%ebp)
  1005a8:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  1005ab:	e8 50 22 00 00       	call   102800 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  1005b0:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1005b3:	89 04 24             	mov    %eax,(%esp)
  1005b6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  1005b9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1005bd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1005c0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1005c4:	e8 d7 1d 00 00       	call   1023a0 <kprintf>
  1005c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
	 
	while (mmap < mmap_end) {
  1005cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005cf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  1005d2:	0f 83 60 00 00 00    	jae    100638 <pmm_init+0x108>
		  if (mmap->mm_type == 1) {
  1005d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005db:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  1005e2:	0f 85 40 00 00 00    	jne    100628 <pmm_init+0xf8>
		      uintptr_t addr = mmap->mm_base_addr;
  1005e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005eb:	8b 40 04             	mov    0x4(%eax),%eax
  1005ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  1005f1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1005f4:	8b 49 0c             	mov    0xc(%ecx),%ecx
  1005f7:	01 c8                	add    %ecx,%eax
  1005f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 
		      while (addr < end_addr) {
  1005fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1005ff:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100602:	0f 83 1b 00 00 00    	jae    100623 <pmm_init+0xf3>
		          pmm_free((void*) addr);
  100608:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10060b:	89 04 24             	mov    %eax,(%esp)
  10060e:	e8 5d fe ff ff       	call   100470 <pmm_free>
		          addr += 0x1000;
  100613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100616:	05 00 10 00 00       	add    $0x1000,%eax
  10061b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		      }
  10061e:	e9 d9 ff ff ff       	jmp    1005fc <pmm_init+0xcc>
		  }
  100623:	e9 00 00 00 00       	jmp    100628 <pmm_init+0xf8>
		  mmap++;
  100628:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10062b:	05 18 00 00 00       	add    $0x18,%eax
  100630:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  100633:	e9 94 ff ff ff       	jmp    1005cc <pmm_init+0x9c>
  100638:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  10063e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100641:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  100647:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  10064a:	0f 83 1b 00 00 00    	jae    10066b <pmm_init+0x13b>
		  pmm_mark_used((void*) addr);
  100650:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100653:	89 04 24             	mov    %eax,(%esp)
  100656:	e8 75 fe ff ff       	call   1004d0 <pmm_mark_used>
		  addr += 0x1000;
  10065b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10065e:	05 00 10 00 00       	add    $0x1000,%eax
  100663:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  100666:	e9 d6 ff ff ff       	jmp    100641 <pmm_init+0x111>

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  10066b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10066e:	8b 40 18             	mov    0x18(%eax),%eax
  100671:	89 45 d8             	mov    %eax,-0x28(%ebp)

  pmm_mark_used(mb_info);
  100674:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100677:	89 04 24             	mov    %eax,(%esp)
  10067a:	e8 51 fe ff ff       	call   1004d0 <pmm_mark_used>
  pmm_mark_used(modules);
  10067f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100682:	89 04 24             	mov    %eax,(%esp)
  100685:	e8 46 fe ff ff       	call   1004d0 <pmm_mark_used>

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  10068a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  100691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100694:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100697:	3b 41 14             	cmp    0x14(%ecx),%eax
  10069a:	0f 83 59 00 00 00    	jae    1006f9 <pmm_init+0x1c9>
      addr = (uintptr_t)modules[i].start;
  1006a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1006a3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1006a6:	c1 e0 04             	shl    $0x4,%eax
  1006a9:	01 c1                	add    %eax,%ecx
  1006ab:	8b 01                	mov    (%ecx),%eax
  1006ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  1006b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006b3:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  1006b6:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1006b9:	c1 e1 04             	shl    $0x4,%ecx
  1006bc:	01 ca                	add    %ecx,%edx
  1006be:	8b 4a 04             	mov    0x4(%edx),%ecx
  1006c1:	39 c8                	cmp    %ecx,%eax
  1006c3:	0f 83 1b 00 00 00    	jae    1006e4 <pmm_init+0x1b4>
          pmm_mark_used((void*) addr);
  1006c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006cc:	89 04 24             	mov    %eax,(%esp)
  1006cf:	e8 fc fd ff ff       	call   1004d0 <pmm_mark_used>
          addr += 0x1000;
  1006d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006d7:	05 00 10 00 00       	add    $0x1000,%eax
  1006dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
      }
  1006df:	e9 cc ff ff ff       	jmp    1006b0 <pmm_init+0x180>
  }
  1006e4:	e9 00 00 00 00       	jmp    1006e9 <pmm_init+0x1b9>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  uint32_t i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1006e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1006ec:	05 01 00 00 00       	add    $0x1,%eax
  1006f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1006f4:	e9 98 ff ff ff       	jmp    100691 <pmm_init+0x161>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  1006f9:	83 c4 5c             	add    $0x5c,%esp
  1006fc:	5e                   	pop    %esi
  1006fd:	5f                   	pop    %edi
  1006fe:	5b                   	pop    %ebx
  1006ff:	5d                   	pop    %ebp
  100700:	c3                   	ret    
  100701:	66 90                	xchg   %ax,%ax
  100703:	66 90                	xchg   %ax,%ax
  100705:	66 90                	xchg   %ax,%ax
  100707:	66 90                	xchg   %ax,%ax
  100709:	66 90                	xchg   %ax,%ax
  10070b:	66 90                	xchg   %ax,%ax
  10070d:	66 90                	xchg   %ax,%ax
  10070f:	90                   	nop

00100710 <vmm_get_current_pagedir>:
uint32_t* active_pagetables        = (void*)(ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*)(ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

uint32_t vmm_get_current_pagedir(void) {
  100710:	55                   	push   %ebp
  100711:	89 e5                	mov    %esp,%ebp
  return active_pagedir;
  100713:	a1 14 b0 10 00       	mov    0x10b014,%eax
  100718:	5d                   	pop    %ebp
  100719:	c3                   	ret    
  10071a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100720 <vmm_fork_current>:
}

//TODO: join fork_current and create_pagedir together

uint32_t vmm_fork_current(void)
{
  100720:	55                   	push   %ebp
  100721:	89 e5                	mov    %esp,%ebp
  100723:	53                   	push   %ebx
  100724:	57                   	push   %edi
  100725:	56                   	push   %esi
  100726:	81 ec 5c 10 00 00    	sub    $0x105c,%esp
  10072c:	8d 45 f0             	lea    -0x10(%ebp),%eax
  uint32_t phys_context = 0;
  10072f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  100736:	89 04 24             	mov    %eax,(%esp)
  100739:	e8 42 03 00 00       	call   100a80 <vmm_alloc>
  10073e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
  100741:	89 45 ec             	mov    %eax,-0x14(%ebp)
  
  uint32_t phys_pagedir = 0;
  100744:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  10074b:	89 0c 24             	mov    %ecx,(%esp)
  10074e:	e8 2d 03 00 00       	call   100a80 <vmm_alloc>
  100753:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100756:	89 01                	mov    %eax,(%ecx)
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100758:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  10075f:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100766:	0f 83 ab 00 00 00    	jae    100817 <vmm_fork_current+0xf7>
  10076c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  10076f:	89 04 24             	mov    %eax,(%esp)
  100772:	e8 09 03 00 00       	call   100a80 <vmm_alloc>
  100777:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10077a:	89 84 8d dc ef ff ff 	mov    %eax,-0x1024(%ebp,%ecx,4)
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  100781:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100784:	0d 01 00 00 00       	or     $0x1,%eax
  100789:	0d 02 00 00 00       	or     $0x2,%eax
  10078e:	0d 04 00 00 00       	or     $0x4,%eax
  100793:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100796:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100799:	8b 12                	mov    (%edx),%edx
  10079b:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    for(i2 = 0; i2 < 1024; i2++) {
  10079e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  1007a5:	81 7d dc 00 04 00 00 	cmpl   $0x400,-0x24(%ebp)
  1007ac:	0f 83 50 00 00 00    	jae    100802 <vmm_fork_current+0xe2>
  1007b2:	b8 00 02 00 00       	mov    $0x200,%eax
  1007b7:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  1007bc:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1007bf:	c1 e2 18             	shl    $0x18,%edx
  1007c2:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1007c5:	c1 e6 0c             	shl    $0xc,%esi
  1007c8:	01 f2                	add    %esi,%edx
  1007ca:	89 95 d8 ef ff ff    	mov    %edx,-0x1028(%ebp)
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  1007d0:	81 bd d8 ef ff ff 00 	cmpl   $0x2000000,-0x1028(%ebp)
  1007d7:	00 00 02 
  1007da:	0f 97 c3             	seta   %bl
  1007dd:	84 db                	test   %bl,%bl
  1007df:	0f 44 c1             	cmove  %ecx,%eax
  1007e2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1007e5:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1007e8:	8b 94 95 dc ef ff ff 	mov    -0x1024(%ebp,%edx,4),%edx
  1007ef:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
  for(i = 0; i < 1024; i++) {
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    for(i2 = 0; i2 < 1024; i2++) {
  1007f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1007f5:	05 01 00 00 00       	add    $0x1,%eax
  1007fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1007fd:	e9 a3 ff ff ff       	jmp    1007a5 <vmm_fork_current+0x85>
      uint32_t vaddr = (i << 24) + (i2 << 12);
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  100802:	e9 00 00 00 00       	jmp    100807 <vmm_fork_current+0xe7>
  uint32_t phys_pagedir = 0;
  context->pagedir = vmm_alloc(&phys_pagedir);
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100807:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10080a:	05 01 00 00 00       	add    $0x1,%eax
  10080f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100812:	e9 48 ff ff ff       	jmp    10075f <vmm_fork_current+0x3f>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100817:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  10081e:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100825:	0f 83 5e 00 00 00    	jae    100889 <vmm_fork_current+0x169>
  10082b:	b8 00 00 00 00       	mov    $0x0,%eax
  100830:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
  100836:	8b 55 e0             	mov    -0x20(%ebp),%edx
  100839:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10083c:	8b 36                	mov    (%esi),%esi
  10083e:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100841:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100847:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  10084a:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100850:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100853:	c1 e6 0c             	shl    $0xc,%esi
  100856:	01 f2                	add    %esi,%edx
  100858:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10085b:	89 0c 24             	mov    %ecx,(%esp)
  10085e:	89 54 24 04          	mov    %edx,0x4(%esp)
  100862:	89 74 24 08          	mov    %esi,0x8(%esp)
  100866:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10086d:	00 
  10086e:	89 85 cc ef ff ff    	mov    %eax,-0x1034(%ebp)
  100874:	e8 87 02 00 00       	call   100b00 <map_address_context>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100879:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10087c:	05 01 00 00 00       	add    $0x1,%eax
  100881:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100884:	e9 95 ff ff ff       	jmp    10081e <vmm_fork_current+0xfe>
  100889:	b8 00 00 00 00       	mov    $0x0,%eax
  10088e:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  100894:	8b 15 04 41 10 00    	mov    0x104104,%edx
  10089a:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10089d:	89 0c 24             	mov    %ecx,(%esp)
  1008a0:	89 54 24 04          	mov    %edx,0x4(%esp)
  1008a4:	89 74 24 08          	mov    %esi,0x8(%esp)
  1008a8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1008af:	00 
  1008b0:	89 85 c8 ef ff ff    	mov    %eax,-0x1038(%ebp)
  1008b6:	e8 45 02 00 00       	call   100b00 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1008bb:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
  1008c2:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  1008c8:	39 45 e0             	cmp    %eax,-0x20(%ebp)
  1008cb:	0f 83 3f 00 00 00    	jae    100910 <vmm_fork_current+0x1f0>
  1008d1:	b8 00 00 00 00       	mov    $0x0,%eax
  1008d6:	8d 8d dc ef ff ff    	lea    -0x1024(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, 0);
  1008dc:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1008df:	8b 75 e0             	mov    -0x20(%ebp),%esi
  1008e2:	89 0c 24             	mov    %ecx,(%esp)
  1008e5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1008e9:	89 74 24 08          	mov    %esi,0x8(%esp)
  1008ed:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1008f4:	00 
  1008f5:	89 85 c4 ef ff ff    	mov    %eax,-0x103c(%ebp)
  1008fb:	e8 00 02 00 00       	call   100b00 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100900:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100903:	05 00 10 00 00       	add    $0x1000,%eax
  100908:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10090b:	e9 b2 ff ff ff       	jmp    1008c2 <vmm_fork_current+0x1a2>
    map_address_context(pagedir_ptr, i, i, 0);
  }
  
  for(i = USERSPACE_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  100910:	c7 45 e0 00 00 00 02 	movl   $0x2000000,-0x20(%ebp)
  100917:	81 7d e0 00 f0 ff ff 	cmpl   $0xfffff000,-0x20(%ebp)
  10091e:	0f 83 d1 00 00 00    	jae    1009f5 <vmm_fork_current+0x2d5>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100924:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100927:	c1 e8 0c             	shr    $0xc,%eax
  10092a:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100930:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100933:	25 01 02 00 00       	and    $0x201,%eax
  100938:	3d 01 02 00 00       	cmp    $0x201,%eax
  10093d:	0f 85 9d 00 00 00    	jne    1009e0 <vmm_fork_current+0x2c0>
  100943:	8d 45 e4             	lea    -0x1c(%ebp),%eax
      void* newp = vmm_alloc(&paddr);
  100946:	89 04 24             	mov    %eax,(%esp)
  100949:	e8 32 01 00 00       	call   100a80 <vmm_alloc>
  10094e:	8d 0d 30 51 10 00    	lea    0x105130,%ecx
  100954:	89 85 d4 ef ff ff    	mov    %eax,-0x102c(%ebp)
      
      kprintf("copying program %x \n", i);
  10095a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10095d:	89 0c 24             	mov    %ecx,(%esp)
  100960:	89 44 24 04          	mov    %eax,0x4(%esp)
  100964:	e8 37 1a 00 00       	call   1023a0 <kprintf>
  100969:	b9 04 02 00 00       	mov    $0x204,%ecx
  10096e:	8d 95 dc ef ff ff    	lea    -0x1024(%ebp),%edx
  100974:	be 00 10 00 00       	mov    $0x1000,%esi
      
      memcpy(newp, (void*)i, 0x1000);
  100979:	8b bd d4 ef ff ff    	mov    -0x102c(%ebp),%edi
  10097f:	8b 5d e0             	mov    -0x20(%ebp),%ebx
  100982:	89 3c 24             	mov    %edi,(%esp)
  100985:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  100989:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  100990:	00 
  100991:	89 85 c0 ef ff ff    	mov    %eax,-0x1040(%ebp)
  100997:	89 8d bc ef ff ff    	mov    %ecx,-0x1044(%ebp)
  10099d:	89 95 b8 ef ff ff    	mov    %edx,-0x1048(%ebp)
  1009a3:	89 b5 b4 ef ff ff    	mov    %esi,-0x104c(%ebp)
  1009a9:	e8 b2 1e 00 00       	call   102860 <memcpy>
      map_address_context(pagedir_ptr, i, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  1009ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1009b1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1009b4:	8b 95 b8 ef ff ff    	mov    -0x1048(%ebp),%edx
  1009ba:	89 14 24             	mov    %edx,(%esp)
  1009bd:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009c1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  1009c5:	c7 44 24 0c 04 02 00 	movl   $0x204,0xc(%esp)
  1009cc:	00 
  1009cd:	e8 2e 01 00 00       	call   100b00 <map_address_context>
      
      vmm_unmap(newp);
  1009d2:	8b 85 d4 ef ff ff    	mov    -0x102c(%ebp),%eax
  1009d8:	89 04 24             	mov    %eax,(%esp)
  1009db:	e8 90 01 00 00       	call   100b70 <vmm_unmap>
    }
  }
  1009e0:	e9 00 00 00 00       	jmp    1009e5 <vmm_fork_current+0x2c5>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
    map_address_context(pagedir_ptr, i, i, 0);
  }
  
  for(i = USERSPACE_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  1009e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1009e8:	05 00 10 00 00       	add    $0x1000,%eax
  1009ed:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1009f0:	e9 22 ff ff ff       	jmp    100917 <vmm_fork_current+0x1f7>
    }
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  1009f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  1009fc:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100a03:	0f 83 22 00 00 00    	jae    100a2b <vmm_fork_current+0x30b>
    vmm_unmap((void*)pagedir_ptr[i]); 
  100a09:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100a0c:	8b 84 85 dc ef ff ff 	mov    -0x1024(%ebp,%eax,4),%eax
  100a13:	89 04 24             	mov    %eax,(%esp)
  100a16:	e8 55 01 00 00       	call   100b70 <vmm_unmap>
    }
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100a1b:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100a1e:	05 01 00 00 00       	add    $0x1,%eax
  100a23:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100a26:	e9 d1 ff ff ff       	jmp    1009fc <vmm_fork_current+0x2dc>
  100a2b:	8d 85 dc ef ff ff    	lea    -0x1024(%ebp),%eax
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  100a31:	89 04 24             	mov    %eax,(%esp)
  100a34:	e8 37 01 00 00       	call   100b70 <vmm_unmap>
  
  uint32_t* pd_ptr = context->pagedir;
  100a39:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100a3c:	8b 00                	mov    (%eax),%eax
  100a3e:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  100a44:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a47:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100a4a:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  100a4c:	8b 85 d0 ef ff ff    	mov    -0x1030(%ebp),%eax
  100a52:	89 04 24             	mov    %eax,(%esp)
  100a55:	e8 16 01 00 00       	call   100b70 <vmm_unmap>
  vmm_unmap(context);
  100a5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100a5d:	89 04 24             	mov    %eax,(%esp)
  100a60:	e8 0b 01 00 00       	call   100b70 <vmm_unmap>
  
  return phys_pagedir;
  100a65:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100a68:	81 c4 5c 10 00 00    	add    $0x105c,%esp
  100a6e:	5e                   	pop    %esi
  100a6f:	5f                   	pop    %edi
  100a70:	5b                   	pop    %ebx
  100a71:	5d                   	pop    %ebp
  100a72:	c3                   	ret    
  100a73:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100a7a:	84 00 00 00 00 00 

00100a80 <vmm_alloc>:
    asm volatile("invlpg %0" : : "m" (vaddr));
  }
}


void* vmm_alloc(uint32_t* retpaddr) {
  100a80:	55                   	push   %ebp
  100a81:	89 e5                	mov    %esp,%ebp
  100a83:	83 ec 18             	sub    $0x18,%esp
  100a86:	8b 45 08             	mov    0x8(%ebp),%eax
  100a89:	89 45 fc             	mov    %eax,-0x4(%ebp)
  void* vaddr = 0;
  100a8c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  100a93:	c7 45 f4 00 00 00 02 	movl   $0x2000000,-0xc(%ebp)
  100a9a:	81 7d f4 00 f0 ff ff 	cmpl   $0xfffff000,-0xc(%ebp)
  100aa1:	0f 87 3f 00 00 00    	ja     100ae6 <vmm_alloc+0x66>
    if((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == PT_ALLOCATABLE) {
  100aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100aaa:	c1 e8 0c             	shr    $0xc,%eax
  100aad:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100ab3:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100ab6:	25 01 02 00 00       	and    $0x201,%eax
  100abb:	3d 00 02 00 00       	cmp    $0x200,%eax
  100ac0:	0f 85 0b 00 00 00    	jne    100ad1 <vmm_alloc+0x51>
      vaddr = (void*) i;
  100ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ac9:	89 45 f8             	mov    %eax,-0x8(%ebp)
      break;
  100acc:	e9 15 00 00 00       	jmp    100ae6 <vmm_alloc+0x66>
    }
  }
  100ad1:	e9 00 00 00 00       	jmp    100ad6 <vmm_alloc+0x56>


void* vmm_alloc(uint32_t* retpaddr) {
  void* vaddr = 0;

  for(uint32_t i = USERSPACE_BOTTOM; i <= 0xFFFFF000; i += 0x1000) {
  100ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100ad9:	05 00 10 00 00       	add    $0x1000,%eax
  100ade:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100ae1:	e9 b4 ff ff ff       	jmp    100a9a <vmm_alloc+0x1a>
      vaddr = (void*) i;
      break;
    }
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
  100ae6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ae9:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100aec:	89 04 24             	mov    %eax,(%esp)
  100aef:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100af3:	e8 c8 04 00 00       	call   100fc0 <vmm_alloc_addr>
  100af8:	83 c4 18             	add    $0x18,%esp
  100afb:	5d                   	pop    %ebp
  100afc:	c3                   	ret    
  100afd:	0f 1f 00             	nopl   (%eax)

00100b00 <map_address_context>:
  for(uint32_t i = 0; i < length; i+= 0x1000) {
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  100b00:	55                   	push   %ebp
  100b01:	89 e5                	mov    %esp,%ebp
  100b03:	56                   	push   %esi
  100b04:	83 ec 18             	sub    $0x18,%esp
  100b07:	8b 45 14             	mov    0x14(%ebp),%eax
  100b0a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100b0d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100b10:	8b 75 08             	mov    0x8(%ebp),%esi
  100b13:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100b16:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100b19:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100b1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t pd_entry =  vaddr >> 22;
  100b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b22:	c1 e8 16             	shr    $0x16,%eax
  100b25:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  100b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b2b:	c1 e8 0c             	shr    $0xc,%eax
  100b2e:	25 ff 03 00 00       	and    $0x3ff,%eax
  100b33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  100b36:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100b39:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100b3e:	0d 01 00 00 00       	or     $0x1,%eax
  100b43:	0d 02 00 00 00       	or     $0x2,%eax
  100b48:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100b4b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100b51:	09 c8                	or     %ecx,%eax
  100b53:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100b56:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100b59:	8b 75 f8             	mov    -0x8(%ebp),%esi
  100b5c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100b5f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100b65:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
}
  100b68:	83 c4 18             	add    $0x18,%esp
  100b6b:	5e                   	pop    %esi
  100b6c:	5d                   	pop    %ebp
  100b6d:	c3                   	ret    
  100b6e:	66 90                	xchg   %ax,%ax

00100b70 <vmm_unmap>:
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
    asm volatile("invlpg %0" : : "m" (vaddr));
  }
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  100b70:	55                   	push   %ebp
  100b71:	89 e5                	mov    %esp,%ebp
  100b73:	83 ec 08             	sub    $0x8,%esp
  100b76:	8b 45 08             	mov    0x8(%ebp),%eax
  100b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100b7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b7f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100b82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100b85:	c1 e8 0c             	shr    $0xc,%eax
  100b88:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100b8e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100b91:	25 01 02 00 00       	and    $0x201,%eax
  100b96:	3d 01 02 00 00       	cmp    $0x201,%eax
  100b9b:	0f 85 17 00 00 00    	jne    100bb8 <vmm_unmap+0x48>
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  100ba1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ba4:	c1 e8 0c             	shr    $0xc,%eax
  100ba7:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100bad:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  100bb4:	0f 01 7d f8          	invlpg -0x8(%ebp)
  }
}
  100bb8:	83 c4 08             	add    $0x8,%esp
  100bbb:	5d                   	pop    %ebp
  100bbc:	c3                   	ret    
  100bbd:	0f 1f 00             	nopl   (%eax)

00100bc0 <vmm_create_pagedir>:
  
  return phys_pagedir;
}

uint32_t vmm_create_pagedir()
{
  100bc0:	55                   	push   %ebp
  100bc1:	89 e5                	mov    %esp,%ebp
  100bc3:	53                   	push   %ebx
  100bc4:	56                   	push   %esi
  100bc5:	81 ec 40 10 00 00    	sub    $0x1040,%esp
  100bcb:	8d 45 f4             	lea    -0xc(%ebp),%eax
  uint32_t phys_context = 0;
  100bce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  struct vmm_context* context = vmm_alloc(&phys_context);
  100bd5:	89 04 24             	mov    %eax,(%esp)
  100bd8:	e8 a3 fe ff ff       	call   100a80 <vmm_alloc>
  100bdd:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  100be0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  uint32_t phys_pagedir = 0;
  100be3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  context->pagedir = vmm_alloc(&phys_pagedir);
  100bea:	89 0c 24             	mov    %ecx,(%esp)
  100bed:	e8 8e fe ff ff       	call   100a80 <vmm_alloc>
  100bf2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100bf5:	89 01                	mov    %eax,(%ecx)
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100bf7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100bfe:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  100c05:	0f 83 ab 00 00 00    	jae    100cb6 <vmm_create_pagedir+0xf6>
  100c0b:	8d 45 e8             	lea    -0x18(%ebp),%eax
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  100c0e:	89 04 24             	mov    %eax,(%esp)
  100c11:	e8 6a fe ff ff       	call   100a80 <vmm_alloc>
  100c16:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100c19:	89 84 8d e0 ef ff ff 	mov    %eax,-0x1020(%ebp,%ecx,4)
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  100c20:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100c23:	0d 01 00 00 00       	or     $0x1,%eax
  100c28:	0d 02 00 00 00       	or     $0x2,%eax
  100c2d:	0d 04 00 00 00       	or     $0x4,%eax
  100c32:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  100c35:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100c38:	8b 12                	mov    (%edx),%edx
  100c3a:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
    for(i2 = 0; i2 < 1024; i2++) {
  100c3d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  100c44:	81 7d e0 00 04 00 00 	cmpl   $0x400,-0x20(%ebp)
  100c4b:	0f 83 50 00 00 00    	jae    100ca1 <vmm_create_pagedir+0xe1>
  100c51:	b8 00 02 00 00       	mov    $0x200,%eax
  100c56:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  100c5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100c5e:	c1 e2 18             	shl    $0x18,%edx
  100c61:	8b 75 e0             	mov    -0x20(%ebp),%esi
  100c64:	c1 e6 0c             	shl    $0xc,%esi
  100c67:	01 f2                	add    %esi,%edx
  100c69:	89 95 dc ef ff ff    	mov    %edx,-0x1024(%ebp)
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  100c6f:	81 bd dc ef ff ff 00 	cmpl   $0x2000000,-0x1024(%ebp)
  100c76:	00 00 02 
  100c79:	0f 97 c3             	seta   %bl
  100c7c:	84 db                	test   %bl,%bl
  100c7e:	0f 44 c1             	cmove  %ecx,%eax
  100c81:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100c84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100c87:	8b 94 95 e0 ef ff ff 	mov    -0x1020(%ebp,%edx,4),%edx
  100c8e:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    
  for(i = 0; i < 1024; i++) {
    pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
    context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
    
    for(i2 = 0; i2 < 1024; i2++) {
  100c91:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100c94:	05 01 00 00 00       	add    $0x1,%eax
  100c99:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100c9c:	e9 a3 ff ff ff       	jmp    100c44 <vmm_create_pagedir+0x84>
      uint32_t vaddr = (i << 24) + (i2 << 12);
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  100ca1:	e9 00 00 00 00       	jmp    100ca6 <vmm_create_pagedir+0xe6>
  uint32_t phys_pagedir = 0;
  context->pagedir = vmm_alloc(&phys_pagedir);
  
  uint32_t paddr, i, i2, pagedir_ptr[1024];
    
  for(i = 0; i < 1024; i++) {
  100ca6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100ca9:	05 01 00 00 00       	add    $0x1,%eax
  100cae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100cb1:	e9 48 ff ff ff       	jmp    100bfe <vmm_create_pagedir+0x3e>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100cb6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100cbd:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  100cc4:	0f 83 5e 00 00 00    	jae    100d28 <vmm_create_pagedir+0x168>
  100cca:	b8 00 00 00 00       	mov    $0x0,%eax
  100ccf:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
  100cd5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100cd8:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100cdb:	8b 36                	mov    (%esi),%esi
  100cdd:	8b 14 96             	mov    (%esi,%edx,4),%edx
  100ce0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  100ce6:	89 55 e8             	mov    %edx,-0x18(%ebp)
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  100ce9:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100cef:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  100cf2:	c1 e6 0c             	shl    $0xc,%esi
  100cf5:	01 f2                	add    %esi,%edx
  100cf7:	8b 75 e8             	mov    -0x18(%ebp),%esi
  100cfa:	89 0c 24             	mov    %ecx,(%esp)
  100cfd:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d01:	89 74 24 08          	mov    %esi,0x8(%esp)
  100d05:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100d0c:	00 
  100d0d:	89 85 d4 ef ff ff    	mov    %eax,-0x102c(%ebp)
  100d13:	e8 e8 fd ff ff       	call   100b00 <map_address_context>
    
      ((uint32_t*)(pagedir_ptr[i]))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  
  for(i = 0; i < 1024; i++) {        
  100d18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100d1b:	05 01 00 00 00       	add    $0x1,%eax
  100d20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100d23:	e9 95 ff ff ff       	jmp    100cbd <vmm_create_pagedir+0xfd>
  100d28:	b8 00 00 00 00       	mov    $0x0,%eax
  100d2d:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  100d33:	8b 15 04 41 10 00    	mov    0x104104,%edx
  100d39:	8b 75 f4             	mov    -0xc(%ebp),%esi
  100d3c:	89 0c 24             	mov    %ecx,(%esp)
  100d3f:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d43:	89 74 24 08          	mov    %esi,0x8(%esp)
  100d47:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100d4e:	00 
  100d4f:	89 85 d0 ef ff ff    	mov    %eax,-0x1030(%ebp)
  100d55:	e8 a6 fd ff ff       	call   100b00 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100d5a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
  100d61:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  100d67:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  100d6a:	0f 83 3f 00 00 00    	jae    100daf <vmm_create_pagedir+0x1ef>
  100d70:	b8 00 00 00 00       	mov    $0x0,%eax
  100d75:	8d 8d e0 ef ff ff    	lea    -0x1020(%ebp),%ecx
    map_address_context(pagedir_ptr, i, i, 0);
  100d7b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  100d7e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  100d81:	89 0c 24             	mov    %ecx,(%esp)
  100d84:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d88:	89 74 24 08          	mov    %esi,0x8(%esp)
  100d8c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100d93:	00 
  100d94:	89 85 cc ef ff ff    	mov    %eax,-0x1034(%ebp)
  100d9a:	e8 61 fd ff ff       	call   100b00 <map_address_context>
    map_address_context(pagedir_ptr, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  100d9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100da2:	05 00 10 00 00       	add    $0x1000,%eax
  100da7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100daa:	e9 b2 ff ff ff       	jmp    100d61 <vmm_create_pagedir+0x1a1>
    map_address_context(pagedir_ptr, i, i, 0);
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100daf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100db6:	81 7d e4 00 04 00 00 	cmpl   $0x400,-0x1c(%ebp)
  100dbd:	0f 83 22 00 00 00    	jae    100de5 <vmm_create_pagedir+0x225>
    vmm_unmap((void*)pagedir_ptr[i]); 
  100dc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100dc6:	8b 84 85 e0 ef ff ff 	mov    -0x1020(%ebp,%eax,4),%eax
  100dcd:	89 04 24             	mov    %eax,(%esp)
  100dd0:	e8 9b fd ff ff       	call   100b70 <vmm_unmap>
    map_address_context(pagedir_ptr, i, i, 0);
  }
  
  //Following code has a memory leak. A context must free its own resources on destruction.
  
  for(i = 0; i < 1024; i++) {       
  100dd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100dd8:	05 01 00 00 00       	add    $0x1,%eax
  100ddd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100de0:	e9 d1 ff ff ff       	jmp    100db6 <vmm_create_pagedir+0x1f6>
  100de5:	8d 85 e0 ef ff ff    	lea    -0x1020(%ebp),%eax
    vmm_unmap((void*)pagedir_ptr[i]); 
  }
  
  vmm_unmap(pagedir_ptr);
  100deb:	89 04 24             	mov    %eax,(%esp)
  100dee:	e8 7d fd ff ff       	call   100b70 <vmm_unmap>
  
  uint32_t* pd_ptr = context->pagedir;
  100df3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100df6:	8b 00                	mov    (%eax),%eax
  100df8:	89 85 d8 ef ff ff    	mov    %eax,-0x1028(%ebp)
  context->pagedir = (uint32_t*) phys_pagedir;
  100dfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e01:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100e04:	89 01                	mov    %eax,(%ecx)
  
  vmm_unmap(pd_ptr);
  100e06:	8b 85 d8 ef ff ff    	mov    -0x1028(%ebp),%eax
  100e0c:	89 04 24             	mov    %eax,(%esp)
  100e0f:	e8 5c fd ff ff       	call   100b70 <vmm_unmap>
  vmm_unmap(context);
  100e14:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100e17:	89 04 24             	mov    %eax,(%esp)
  100e1a:	e8 51 fd ff ff       	call   100b70 <vmm_unmap>
  
  return phys_pagedir;
  100e1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e22:	81 c4 40 10 00 00    	add    $0x1040,%esp
  100e28:	5e                   	pop    %esi
  100e29:	5b                   	pop    %ebx
  100e2a:	5d                   	pop    %ebp
  100e2b:	c3                   	ret    
  100e2c:	0f 1f 40 00          	nopl   0x0(%eax)

00100e30 <vmm_resolve>:
}

uint32_t vmm_resolve(void* vaddr) {
  100e30:	55                   	push   %ebp
  100e31:	89 e5                	mov    %esp,%ebp
  100e33:	50                   	push   %eax
  100e34:	8b 45 08             	mov    0x8(%ebp),%eax
  100e37:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return active_pagetables[(uint32_t)vaddr >> 12] & 0xFFFFF000;
  100e3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e3d:	c1 e8 0c             	shr    $0xc,%eax
  100e40:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100e46:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100e49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100e4e:	83 c4 04             	add    $0x4,%esp
  100e51:	5d                   	pop    %ebp
  100e52:	c3                   	ret    
  100e53:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100e5a:	84 00 00 00 00 00 

00100e60 <vmm_map_range>:
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  100e60:	55                   	push   %ebp
  100e61:	89 e5                	mov    %esp,%ebp
  100e63:	56                   	push   %esi
  100e64:	83 ec 24             	sub    $0x24,%esp
  100e67:	8b 45 14             	mov    0x14(%ebp),%eax
  100e6a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100e6d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100e70:	8b 75 08             	mov    0x8(%ebp),%esi
  100e73:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100e76:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100e79:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100e7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if((uint32_t)vaddr & 0xFFF) return;
  100e7f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e82:	25 ff 0f 00 00       	and    $0xfff,%eax
  100e87:	3d 00 00 00 00       	cmp    $0x0,%eax
  100e8c:	0f 84 05 00 00 00    	je     100e97 <vmm_map_range+0x37>
  100e92:	e9 5a 00 00 00       	jmp    100ef1 <vmm_map_range+0x91>
  if((uint32_t)paddr & 0xFFF) return;
  100e97:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100e9a:	25 ff 0f 00 00       	and    $0xfff,%eax
  100e9f:	3d 00 00 00 00       	cmp    $0x0,%eax
  100ea4:	0f 84 05 00 00 00    	je     100eaf <vmm_map_range+0x4f>
  100eaa:	e9 42 00 00 00       	jmp    100ef1 <vmm_map_range+0x91>
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100eaf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  100eb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100eb9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100ebc:	0f 83 2f 00 00 00    	jae    100ef1 <vmm_map_range+0x91>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  100ec2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100ec5:	03 45 e8             	add    -0x18(%ebp),%eax
  100ec8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100ecb:	03 4d e8             	add    -0x18(%ebp),%ecx
  100ece:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100ed1:	89 04 24             	mov    %eax,(%esp)
  100ed4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100ed8:	89 54 24 08          	mov    %edx,0x8(%esp)
  100edc:	e8 1f 00 00 00       	call   100f00 <map_address_active>

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  if((uint32_t)vaddr & 0xFFF) return;
  if((uint32_t)paddr & 0xFFF) return;
  
  for(uint32_t i = 0; i < length; i+= 0x1000) {
  100ee1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ee4:	05 00 10 00 00       	add    $0x1000,%eax
  100ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100eec:	e9 c5 ff ff ff       	jmp    100eb6 <vmm_map_range+0x56>
    map_address_active((uint32_t)vaddr + i, (uint32_t)paddr + i, flags);
  }
}
  100ef1:	83 c4 24             	add    $0x24,%esp
  100ef4:	5e                   	pop    %esi
  100ef5:	5d                   	pop    %ebp
  100ef6:	c3                   	ret    
  100ef7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  100efe:	00 00 

00100f00 <map_address_active>:
  uint32_t pt_entry = (vaddr >> 12) % 1024;
  
  ((uint32_t*)(pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {  
  100f00:	55                   	push   %ebp
  100f01:	89 e5                	mov    %esp,%ebp
  100f03:	83 ec 0c             	sub    $0xc,%esp
  100f06:	8b 45 10             	mov    0x10(%ebp),%eax
  100f09:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100f0c:	8b 55 08             	mov    0x8(%ebp),%edx
  100f0f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100f12:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100f15:	89 45 f4             	mov    %eax,-0xc(%ebp)
  active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF);
  100f18:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f1b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100f20:	0d 01 00 00 00       	or     $0x1,%eax
  100f25:	0d 02 00 00 00       	or     $0x2,%eax
  100f2a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100f2d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  100f33:	09 c8                	or     %ecx,%eax
  100f35:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100f38:	c1 e9 0c             	shr    $0xc,%ecx
  100f3b:	8b 15 00 41 10 00    	mov    0x104100,%edx
  100f41:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
  asm volatile("invlpg %0" : : "m" (vaddr));
  100f44:	0f 01 7d fc          	invlpg -0x4(%ebp)
}
  100f48:	83 c4 0c             	add    $0xc,%esp
  100f4b:	5d                   	pop    %ebp
  100f4c:	c3                   	ret    
  100f4d:	0f 1f 00             	nopl   (%eax)

00100f50 <vmm_free>:

void vmm_free(void* p_vaddr) {
  100f50:	55                   	push   %ebp
  100f51:	89 e5                	mov    %esp,%ebp
  100f53:	83 ec 18             	sub    $0x18,%esp
  100f56:	8b 45 08             	mov    0x8(%ebp),%eax
  100f59:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t vaddr = (uint32_t)p_vaddr;
  100f5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f5f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) == (PT_ALLOCATABLE | PT_PRESENT)) {
  100f62:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f65:	c1 e8 0c             	shr    $0xc,%eax
  100f68:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100f6e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100f71:	25 01 02 00 00       	and    $0x201,%eax
  100f76:	3d 01 02 00 00       	cmp    $0x201,%eax
  100f7b:	0f 85 33 00 00 00    	jne    100fb4 <vmm_free+0x64>
    pmm_free((void*)(active_pagetables[vaddr >> 12] & 0xFFFFF000));
  100f81:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100f84:	c1 e8 0c             	shr    $0xc,%eax
  100f87:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100f8d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100f90:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  100f95:	89 04 24             	mov    %eax,(%esp)
  100f98:	e8 d3 f4 ff ff       	call   100470 <pmm_free>
   
    active_pagetables[vaddr >> 12] = PT_ALLOCATABLE;
  100f9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100fa0:	c1 e8 0c             	shr    $0xc,%eax
  100fa3:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100fa9:	c7 04 81 00 02 00 00 	movl   $0x200,(%ecx,%eax,4)
    asm volatile("invlpg %0" : : "m" (vaddr));
  100fb0:	0f 01 7d f8          	invlpg -0x8(%ebp)
  }
}
  100fb4:	83 c4 18             	add    $0x18,%esp
  100fb7:	5d                   	pop    %ebp
  100fb8:	c3                   	ret    
  100fb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00100fc0 <vmm_alloc_addr>:
  }
 
  return vmm_alloc_addr(vaddr, retpaddr);  
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  100fc0:	55                   	push   %ebp
  100fc1:	89 e5                	mov    %esp,%ebp
  100fc3:	83 ec 28             	sub    $0x28,%esp
  100fc6:	8b 45 0c             	mov    0xc(%ebp),%eax
  100fc9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100fcc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if((active_pagetables[(uint32_t)reqvaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) return 0;
  100fd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100fd5:	c1 e8 0c             	shr    $0xc,%eax
  100fd8:	8b 0d 00 41 10 00    	mov    0x104100,%ecx
  100fde:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  100fe1:	25 01 02 00 00       	and    $0x201,%eax
  100fe6:	3d 00 02 00 00       	cmp    $0x200,%eax
  100feb:	0f 84 0c 00 00 00    	je     100ffd <vmm_alloc_addr+0x3d>
  100ff1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100ff8:	e9 45 00 00 00       	jmp    101042 <vmm_alloc_addr+0x82>
  100ffd:	b8 04 02 00 00       	mov    $0x204,%eax

  uint32_t paddr = (uint32_t) pmm_alloc();
  101002:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101005:	e8 76 f3 ff ff       	call   100380 <pmm_alloc>
  10100a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  map_address_active((uint32_t)reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  10100d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101010:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101013:	89 04 24             	mov    %eax,(%esp)
  101016:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10101a:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  101021:	00 
  101022:	e8 d9 fe ff ff       	call   100f00 <map_address_active>
  
  if(retpaddr != 0) *retpaddr = paddr;
  101027:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10102e:	0f 84 08 00 00 00    	je     10103c <vmm_alloc_addr+0x7c>
  101034:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101037:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10103a:	89 01                	mov    %eax,(%ecx)
  
  return reqvaddr;
  10103c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10103f:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  101042:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101045:	83 c4 28             	add    $0x28,%esp
  101048:	5d                   	pop    %ebp
  101049:	c3                   	ret    
  10104a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00101050 <vmm_alloc_static>:

//TODO: VMM_ALLOC_STATIC will override already allocated memory

void* vmm_alloc_static(uint32_t offset, uint32_t flags) {
  101050:	55                   	push   %ebp
  101051:	89 e5                	mov    %esp,%ebp
  101053:	83 ec 28             	sub    $0x28,%esp
  101056:	8b 45 0c             	mov    0xc(%ebp),%eax
  101059:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10105c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10105f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(offset < 0x100000) {
  101062:	81 7d f8 00 00 10 00 	cmpl   $0x100000,-0x8(%ebp)
  101069:	0f 83 5f 00 00 00    	jae    1010ce <vmm_alloc_static+0x7e>
    if((offset & 0xFFFFF000) != offset) {
  10106f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101072:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  101077:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  10107a:	0f 84 11 00 00 00    	je     101091 <vmm_alloc_static+0x41>
  101080:	8d 05 45 51 10 00    	lea    0x105145,%eax
      kprintf("Tried to allocate not 4K-aligned static vaddr. \n");
  101086:	89 04 24             	mov    %eax,(%esp)
  101089:	e8 12 13 00 00       	call   1023a0 <kprintf>
  10108e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    }
    uint32_t vaddr = offset + STATIC_ALLOC_VADDR;
  101091:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101094:	05 00 00 90 01       	add    $0x1900000,%eax
  101099:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t paddr = (uint32_t) pmm_alloc();
  10109c:	e8 df f2 ff ff       	call   100380 <pmm_alloc>
  1010a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    map_address_active(vaddr, paddr, flags & 0xFFF);
  1010a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1010a7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1010aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1010ad:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  1010b3:	89 04 24             	mov    %eax,(%esp)
  1010b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010ba:	89 54 24 08          	mov    %edx,0x8(%esp)
  1010be:	e8 3d fe ff ff       	call   100f00 <map_address_active>
    return (void*) vaddr;
  1010c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1010c6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1010c9:	e9 18 00 00 00       	jmp    1010e6 <vmm_alloc_static+0x96>
  1010ce:	8d 05 76 51 10 00    	lea    0x105176,%eax
  }
  else
  {
    kprintf("Tried to allocate static vaddr outside reserved range. \n");
  1010d4:	89 04 24             	mov    %eax,(%esp)
  1010d7:	e8 c4 12 00 00       	call   1023a0 <kprintf>
    return 0;
  1010dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1010e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }
}
  1010e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010e9:	83 c4 28             	add    $0x28,%esp
  1010ec:	5d                   	pop    %ebp
  1010ed:	c3                   	ret    
  1010ee:	66 90                	xchg   %ax,%ax

001010f0 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  1010f0:	55                   	push   %ebp
  1010f1:	89 e5                	mov    %esp,%ebp
  1010f3:	50                   	push   %eax
  1010f4:	8b 45 08             	mov    0x8(%ebp),%eax
  1010f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  active_pagedir = pdpaddr;
  1010fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1010fd:	a3 14 b0 10 00       	mov    %eax,0x10b014
  asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  101102:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101105:	0f 22 d8             	mov    %eax,%cr3
}
  101108:	83 c4 04             	add    $0x4,%esp
  10110b:	5d                   	pop    %ebp
  10110c:	c3                   	ret    
  10110d:	0f 1f 00             	nopl   (%eax)

00101110 <vmm_init>:

uint32_t vmm_init(void)
{
  101110:	55                   	push   %ebp
  101111:	89 e5                	mov    %esp,%ebp
  //CREATE CONTEXT ************************************************************
  
  struct vmm_context* context = pmm_alloc();
  101113:	53                   	push   %ebx
  101114:	56                   	push   %esi
  101115:	83 ec 40             	sub    $0x40,%esp
  101118:	e8 63 f2 ff ff       	call   100380 <pmm_alloc>
  10111d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  101120:	e8 5b f2 ff ff       	call   100380 <pmm_alloc>
  101125:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101128:	89 01                	mov    %eax,(%ecx)
  
  for(i = 0; i < 1024; i++) {
  10112a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101131:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  101138:	0f 83 99 00 00 00    	jae    1011d7 <vmm_init+0xc7>
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  10113e:	e8 3d f2 ff ff       	call   100380 <pmm_alloc>
  101143:	0d 01 00 00 00       	or     $0x1,%eax
  101148:	0d 02 00 00 00       	or     $0x2,%eax
  10114d:	0d 04 00 00 00       	or     $0x4,%eax
  101152:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101155:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101158:	8b 12                	mov    (%edx),%edx
  10115a:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        
    for(i2 = 0; i2 < 1024; i2++) {
  10115d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  101164:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  10116b:	0f 83 51 00 00 00    	jae    1011c2 <vmm_init+0xb2>
  101171:	b8 00 02 00 00       	mov    $0x200,%eax
  101176:	b9 00 00 00 00       	mov    $0x0,%ecx
      uint32_t vaddr = (i << 24) + (i2 << 12);
  10117b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10117e:	c1 e2 18             	shl    $0x18,%edx
  101181:	8b 75 ec             	mov    -0x14(%ebp),%esi
  101184:	c1 e6 0c             	shl    $0xc,%esi
  101187:	01 f2                	add    %esi,%edx
  101189:	89 55 e8             	mov    %edx,-0x18(%ebp)
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
  10118c:	81 7d e8 00 00 00 02 	cmpl   $0x2000000,-0x18(%ebp)
  101193:	0f 97 c3             	seta   %bl
  101196:	84 db                	test   %bl,%bl
  101198:	0f 44 c1             	cmove  %ecx,%eax
  10119b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10119e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1011a1:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1011a4:	8b 36                	mov    (%esi),%esi
  1011a6:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1011a9:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  1011af:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
    context->pagedir[i] = ((int)pmm_alloc()) | PD_PRESENT | PD_WRITE | PD_PUBLIC;
        
    for(i2 = 0; i2 < 1024; i2++) {
  1011b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1011b5:	05 01 00 00 00       	add    $0x1,%eax
  1011ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1011bd:	e9 a2 ff ff ff       	jmp    101164 <vmm_init+0x54>
      uint32_t vaddr = (i << 24) + (i2 << 12);
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
  1011c2:	e9 00 00 00 00       	jmp    1011c7 <vmm_init+0xb7>
  struct vmm_context* context = pmm_alloc();
  uint32_t i, i2;
  
  context->pagedir = pmm_alloc();
  
  for(i = 0; i < 1024; i++) {
  1011c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1011ca:	05 01 00 00 00       	add    $0x1,%eax
  1011cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1011d2:	e9 5a ff ff ff       	jmp    101131 <vmm_init+0x21>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  1011d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1011de:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  1011e5:	0f 83 5a 00 00 00    	jae    101245 <vmm_init+0x135>
  1011eb:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  1011f0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1011f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1011f6:	8b 12                	mov    (%edx),%edx
  1011f8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1011fb:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  101201:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  101204:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101207:	8b 09                	mov    (%ecx),%ecx
  101209:	8b 15 00 41 10 00    	mov    0x104100,%edx
  10120f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101212:	c1 e6 0c             	shl    $0xc,%esi
  101215:	01 f2                	add    %esi,%edx
  101217:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10121a:	89 0c 24             	mov    %ecx,(%esp)
  10121d:	89 54 24 04          	mov    %edx,0x4(%esp)
  101221:	89 74 24 08          	mov    %esi,0x8(%esp)
  101225:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10122c:	00 
  10122d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  101230:	e8 cb f8 ff ff       	call   100b00 <map_address_context>
      
      ((uint32_t*)(context->pagedir[i] & 0xFFFFF000))[i2] = (vaddr > USERSPACE_BOTTOM) ? PT_ALLOCATABLE : 0;
    }
  }
    
  for(i = 0; i < 1024; i++) {    
  101235:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101238:	05 01 00 00 00       	add    $0x1,%eax
  10123d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101240:	e9 99 ff ff ff       	jmp    1011de <vmm_init+0xce>
  101245:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  10124a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10124d:	8b 09                	mov    (%ecx),%ecx
  10124f:	8b 15 04 41 10 00    	mov    0x104104,%edx
  101255:	8b 75 f4             	mov    -0xc(%ebp),%esi
  101258:	89 0c 24             	mov    %ecx,(%esp)
  10125b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10125f:	89 74 24 08          	mov    %esi,0x8(%esp)
  101263:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10126a:	00 
  10126b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10126e:	e8 8d f8 ff ff       	call   100b00 <map_address_context>
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  101273:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
  10127a:	8d 05 00 c0 12 00    	lea    0x12c000,%eax
  101280:	39 45 f0             	cmp    %eax,-0x10(%ebp)
  101283:	0f 83 3b 00 00 00    	jae    1012c4 <vmm_init+0x1b4>
  101289:	b8 04 00 00 00       	mov    $0x4,%eax
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  10128e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101291:	8b 09                	mov    (%ecx),%ecx
  101293:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101296:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101299:	89 0c 24             	mov    %ecx,(%esp)
  10129c:	89 54 24 04          	mov    %edx,0x4(%esp)
  1012a0:	89 74 24 08          	mov    %esi,0x8(%esp)
  1012a4:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  1012ab:	00 
  1012ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1012af:	e8 4c f8 ff ff       	call   100b00 <map_address_context>
    map_address_context(context->pagedir, (uint32_t)active_pagetables + i * 0x1000, paddr, 0);
  }
  
  map_address_context(context->pagedir, (uint32_t) active_context, (uint32_t) context, 0);
  
  for(i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1012b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1012b7:	05 00 10 00 00       	add    $0x1000,%eax
  1012bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1012bf:	e9 b6 ff ff ff       	jmp    10127a <vmm_init+0x16a>
    map_address_context(context->pagedir, i, i, PT_PUBLIC); //TODO: no PT_PUBLIC flag here!... only for task testing
  }
  
  //END CREATE CONTEXT ********************************************************
  
  vmm_activate_pagedir((uint32_t) context->pagedir);
  1012c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1012c7:	8b 00                	mov    (%eax),%eax
  1012c9:	89 04 24             	mov    %eax,(%esp)
  1012cc:	e8 1f fe ff ff       	call   1010f0 <vmm_activate_pagedir>

  uint32_t cr0;

  asm volatile("mov %%cr0, %0" : "=r" (cr0));
  1012d1:	0f 20 c0             	mov    %cr0,%eax
  1012d4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  cr0 |= (1 << 31);
  1012d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1012da:	0d 00 00 00 80       	or     $0x80000000,%eax
  1012df:	89 45 e0             	mov    %eax,-0x20(%ebp)
  asm volatile("mov %0, %%cr0" : : "r" (cr0));
  1012e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1012e5:	0f 22 c0             	mov    %eax,%cr0
  
  return (uint32_t) active_context->pagedir;
  1012e8:	a1 04 41 10 00       	mov    0x104104,%eax
  1012ed:	8b 00                	mov    (%eax),%eax
  1012ef:	83 c4 40             	add    $0x40,%esp
  1012f2:	5e                   	pop    %esi
  1012f3:	5b                   	pop    %ebx
  1012f4:	5d                   	pop    %ebp
  1012f5:	c3                   	ret    
  1012f6:	66 90                	xchg   %ax,%ax
  1012f8:	66 90                	xchg   %ax,%ax
  1012fa:	66 90                	xchg   %ax,%ax
  1012fc:	66 90                	xchg   %ax,%ax
  1012fe:	66 90                	xchg   %ax,%ax

00101300 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101300:	55                   	push   %ebp
  101301:	89 e5                	mov    %esp,%ebp
  101303:	53                   	push   %ebx
  101304:	57                   	push   %edi
  101305:	56                   	push   %esi
  101306:	83 ec 10             	sub    $0x10,%esp
  101309:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  10130d:	66 89 c1             	mov    %ax,%cx
  101310:	8a 55 14             	mov    0x14(%ebp),%dl
  101313:	8b 45 0c             	mov    0xc(%ebp),%eax
  101316:	8b 75 08             	mov    0x8(%ebp),%esi
  101319:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10131c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10131f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  101323:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101326:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101329:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  10132c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  101330:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101333:	89 04 f5 18 b0 10 00 	mov    %eax,0x10b018(,%esi,8)
  10133a:	c7 04 f5 1c b0 10 00 	movl   $0x0,0x10b01c(,%esi,8)
  101341:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  101345:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  101349:	c1 e0 10             	shl    $0x10,%eax
  10134c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10134f:	8b 3c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%edi
  101356:	8b 1c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%ebx
  10135d:	09 c3                	or     %eax,%ebx
  10135f:	89 3c f5 1c b0 10 00 	mov    %edi,0x10b01c(,%esi,8)
  101366:	89 1c f5 18 b0 10 00 	mov    %ebx,0x10b018(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  10136d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  101371:	c1 e0 08             	shl    $0x8,%eax
  101374:	8b 75 f0             	mov    -0x10(%ebp),%esi
  101377:	8b 3c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%edi
  10137e:	8b 1c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%ebx
  101385:	09 c3                	or     %eax,%ebx
  101387:	89 3c f5 18 b0 10 00 	mov    %edi,0x10b018(,%esi,8)
  10138e:	89 1c f5 1c b0 10 00 	mov    %ebx,0x10b01c(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  101395:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  101399:	c1 e0 10             	shl    $0x10,%eax
  10139c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10139f:	8b 3c f5 18 b0 10 00 	mov    0x10b018(,%esi,8),%edi
  1013a6:	8b 1c f5 1c b0 10 00 	mov    0x10b01c(,%esi,8),%ebx
  1013ad:	09 c3                	or     %eax,%ebx
  1013af:	89 3c f5 18 b0 10 00 	mov    %edi,0x10b018(,%esi,8)
  1013b6:	89 1c f5 1c b0 10 00 	mov    %ebx,0x10b01c(,%esi,8)
}
  1013bd:	83 c4 10             	add    $0x10,%esp
  1013c0:	5e                   	pop    %esi
  1013c1:	5f                   	pop    %edi
  1013c2:	5b                   	pop    %ebx
  1013c3:	5d                   	pop    %ebp
  1013c4:	c3                   	ret    
  1013c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1013cc:	00 00 00 00 

001013d0 <init_idt>:

void init_idt() {
  1013d0:	55                   	push   %ebp
  1013d1:	89 e5                	mov    %esp,%ebp
	struct {
  1013d3:	56                   	push   %esi
  1013d4:	81 ec 34 02 00 00    	sub    $0x234,%esp
  1013da:	a1 00 50 10 00       	mov    0x105000,%eax
  1013df:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1013e2:	66 8b 0d 04 50 10 00 	mov    0x105004,%cx
  1013e9:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};

	int i = 0;
  1013ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  1013f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1013fb:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  101402:	0f 8d 1e 00 00 00    	jge    101426 <init_idt+0x56>
		handler_set[i] = 0;
  101408:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10140b:	c7 04 85 18 b2 10 00 	movl   $0x0,0x10b218(,%eax,4)
  101412:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  101416:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101419:	05 01 00 00 00       	add    $0x1,%eax
  10141e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101421:	e9 d5 ff ff ff       	jmp    1013fb <init_idt+0x2b>
  101426:	b8 20 00 00 00       	mov    $0x20,%eax
  10142b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  101430:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101437:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10143e:	00 
  10143f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101442:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  101445:	e8 86 0b 00 00       	call   101fd0 <outb>
  10144a:	b8 21 00 00 00       	mov    $0x21,%eax
  10144f:	b9 20 00 00 00       	mov    $0x20,%ecx
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  101454:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10145b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101462:	00 
  101463:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101466:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  101469:	e8 62 0b 00 00       	call   101fd0 <outb>
  10146e:	b8 21 00 00 00       	mov    $0x21,%eax
  101473:	b9 04 00 00 00       	mov    $0x4,%ecx
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  101478:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10147f:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  101486:	00 
  101487:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10148a:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10148d:	e8 3e 0b 00 00       	call   101fd0 <outb>
  101492:	b8 21 00 00 00       	mov    $0x21,%eax
  101497:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0x21, 0x01); // ICW 4
  10149c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1014a3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1014aa:	00 
  1014ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1014ae:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  1014b1:	e8 1a 0b 00 00       	call   101fd0 <outb>
  1014b6:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1014bb:	b9 11 00 00 00       	mov    $0x11,%ecx

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  1014c0:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1014c7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1014ce:	00 
  1014cf:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1014d2:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  1014d5:	e8 f6 0a 00 00       	call   101fd0 <outb>
  1014da:	b8 a1 00 00 00       	mov    $0xa1,%eax
  1014df:	b9 28 00 00 00       	mov    $0x28,%ecx
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  1014e4:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1014eb:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  1014f2:	00 
  1014f3:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1014f6:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  1014f9:	e8 d2 0a 00 00       	call   101fd0 <outb>
  1014fe:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101503:	b9 02 00 00 00       	mov    $0x2,%ecx
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101508:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10150f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101516:	00 
  101517:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10151a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10151d:	e8 ae 0a 00 00       	call   101fd0 <outb>
  101522:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101527:	b9 01 00 00 00       	mov    $0x1,%ecx
  outb(0xa1, 0x01); // ICW 4
  10152c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101533:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10153a:	00 
  10153b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10153e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  101541:	e8 8a 0a 00 00       	call   101fd0 <outb>
  101546:	b8 20 00 00 00       	mov    $0x20,%eax
  10154b:	b9 00 00 00 00       	mov    $0x0,%ecx

  outb(0x20, 0x0);
  101550:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101557:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10155e:	00 
  10155f:	89 45 a8             	mov    %eax,-0x58(%ebp)
  101562:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  101565:	e8 66 0a 00 00       	call   101fd0 <outb>
  10156a:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10156f:	b9 00 00 00 00       	mov    $0x0,%ecx
  outb(0xa0, 0x0);
  101574:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10157b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101582:	00 
  101583:	89 45 a0             	mov    %eax,-0x60(%ebp)
  101586:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  101589:	e8 42 0a 00 00       	call   101fd0 <outb>
  10158e:	b8 00 00 00 00       	mov    $0x0,%eax
  101593:	8d 0d a0 2c 10 00    	lea    0x102ca0,%ecx
  101599:	ba 08 00 00 00       	mov    $0x8,%edx
  10159e:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015a3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1015aa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015ae:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015b5:	00 
  1015b6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015bd:	00 
  1015be:	89 45 98             	mov    %eax,-0x68(%ebp)
  1015c1:	89 75 94             	mov    %esi,-0x6c(%ebp)
  1015c4:	89 55 90             	mov    %edx,-0x70(%ebp)
  1015c7:	e8 34 fd ff ff       	call   101300 <idt_set_entry>
  1015cc:	b8 01 00 00 00       	mov    $0x1,%eax
  1015d1:	8d 0d a9 2c 10 00    	lea    0x102ca9,%ecx
  1015d7:	ba 08 00 00 00       	mov    $0x8,%edx
  1015dc:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1015e1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1015e8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015ec:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015f3:	00 
  1015f4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015fb:	00 
  1015fc:	89 45 8c             	mov    %eax,-0x74(%ebp)
  1015ff:	89 75 88             	mov    %esi,-0x78(%ebp)
  101602:	89 55 84             	mov    %edx,-0x7c(%ebp)
  101605:	e8 f6 fc ff ff       	call   101300 <idt_set_entry>
  10160a:	b8 02 00 00 00       	mov    $0x2,%eax
  10160f:	8d 0d b2 2c 10 00    	lea    0x102cb2,%ecx
  101615:	ba 08 00 00 00       	mov    $0x8,%edx
  10161a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10161f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101626:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10162a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101631:	00 
  101632:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101639:	00 
  10163a:	89 45 80             	mov    %eax,-0x80(%ebp)
  10163d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  101643:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  101649:	e8 b2 fc ff ff       	call   101300 <idt_set_entry>
  10164e:	b8 03 00 00 00       	mov    $0x3,%eax
  101653:	8d 0d bb 2c 10 00    	lea    0x102cbb,%ecx
  101659:	ba 08 00 00 00       	mov    $0x8,%edx
  10165e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101663:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  10166a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10166e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101675:	00 
  101676:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10167d:	00 
  10167e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  101684:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  10168a:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101690:	e8 6b fc ff ff       	call   101300 <idt_set_entry>
  101695:	b8 04 00 00 00       	mov    $0x4,%eax
  10169a:	8d 0d c4 2c 10 00    	lea    0x102cc4,%ecx
  1016a0:	ba 08 00 00 00       	mov    $0x8,%edx
  1016a5:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016aa:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1016b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016b5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016bc:	00 
  1016bd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016c4:	00 
  1016c5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  1016cb:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  1016d1:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  1016d7:	e8 24 fc ff ff       	call   101300 <idt_set_entry>
  1016dc:	b8 05 00 00 00       	mov    $0x5,%eax
  1016e1:	8d 0d cd 2c 10 00    	lea    0x102ccd,%ecx
  1016e7:	ba 08 00 00 00       	mov    $0x8,%edx
  1016ec:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016f1:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1016f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016fc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101703:	00 
  101704:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10170b:	00 
  10170c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101712:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101718:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10171e:	e8 dd fb ff ff       	call   101300 <idt_set_entry>
  101723:	b8 06 00 00 00       	mov    $0x6,%eax
  101728:	8d 0d d6 2c 10 00    	lea    0x102cd6,%ecx
  10172e:	ba 08 00 00 00       	mov    $0x8,%edx
  101733:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101738:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10173f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101743:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10174a:	00 
  10174b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101752:	00 
  101753:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  101759:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  10175f:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  101765:	e8 96 fb ff ff       	call   101300 <idt_set_entry>
  10176a:	b8 07 00 00 00       	mov    $0x7,%eax
  10176f:	8d 0d df 2c 10 00    	lea    0x102cdf,%ecx
  101775:	ba 08 00 00 00       	mov    $0x8,%edx
  10177a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10177f:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  101786:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10178a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101791:	00 
  101792:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101799:	00 
  10179a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  1017a0:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  1017a6:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  1017ac:	e8 4f fb ff ff       	call   101300 <idt_set_entry>
  1017b1:	b8 08 00 00 00       	mov    $0x8,%eax
  1017b6:	8d 0d e8 2c 10 00    	lea    0x102ce8,%ecx
  1017bc:	ba 8e 00 00 00       	mov    $0x8e,%edx
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017c1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1017c8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017cc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017d3:	00 
  1017d4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017db:	00 
  1017dc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  1017e2:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  1017e8:	e8 13 fb ff ff       	call   101300 <idt_set_entry>
  1017ed:	b8 09 00 00 00       	mov    $0x9,%eax
  1017f2:	8d 0d ef 2c 10 00    	lea    0x102cef,%ecx
  1017f8:	ba 08 00 00 00       	mov    $0x8,%edx
  1017fd:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101802:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101809:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10180d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101814:	00 
  101815:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10181c:	00 
  10181d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101823:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101829:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10182f:	e8 cc fa ff ff       	call   101300 <idt_set_entry>
  101834:	b8 0a 00 00 00       	mov    $0xa,%eax
  101839:	8d 0d f8 2c 10 00    	lea    0x102cf8,%ecx
  10183f:	ba 08 00 00 00       	mov    $0x8,%edx
  101844:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101849:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  101850:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101854:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10185b:	00 
  10185c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101863:	00 
  101864:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  10186a:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  101870:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  101876:	e8 85 fa ff ff       	call   101300 <idt_set_entry>
  10187b:	b8 0b 00 00 00       	mov    $0xb,%eax
  101880:	8d 0d ff 2c 10 00    	lea    0x102cff,%ecx
  101886:	ba 08 00 00 00       	mov    $0x8,%edx
  10188b:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101890:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101897:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10189b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018a2:	00 
  1018a3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018aa:	00 
  1018ab:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  1018b1:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  1018b7:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  1018bd:	e8 3e fa ff ff       	call   101300 <idt_set_entry>
  1018c2:	b8 0c 00 00 00       	mov    $0xc,%eax
  1018c7:	8d 0d 06 2d 10 00    	lea    0x102d06,%ecx
  1018cd:	ba 08 00 00 00       	mov    $0x8,%edx
  1018d2:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018d7:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  1018de:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018e2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018e9:	00 
  1018ea:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018f1:	00 
  1018f2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  1018f8:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  1018fe:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101904:	e8 f7 f9 ff ff       	call   101300 <idt_set_entry>
  101909:	b8 0d 00 00 00       	mov    $0xd,%eax
  10190e:	8d 0d 0d 2d 10 00    	lea    0x102d0d,%ecx
  101914:	ba 08 00 00 00       	mov    $0x8,%edx
  101919:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10191e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101925:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101929:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101930:	00 
  101931:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101938:	00 
  101939:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10193f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  101945:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  10194b:	e8 b0 f9 ff ff       	call   101300 <idt_set_entry>
  101950:	b8 0e 00 00 00       	mov    $0xe,%eax
  101955:	8d 0d 14 2d 10 00    	lea    0x102d14,%ecx
  10195b:	ba 08 00 00 00       	mov    $0x8,%edx
  101960:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101965:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  10196c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101970:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101977:	00 
  101978:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10197f:	00 
  101980:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  101986:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  10198c:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101992:	e8 69 f9 ff ff       	call   101300 <idt_set_entry>
  101997:	b8 0f 00 00 00       	mov    $0xf,%eax
  10199c:	8d 0d 18 2d 10 00    	lea    0x102d18,%ecx
  1019a2:	ba 08 00 00 00       	mov    $0x8,%edx
  1019a7:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019ac:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  1019b3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019b7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019be:	00 
  1019bf:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019c6:	00 
  1019c7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  1019cd:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  1019d3:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  1019d9:	e8 22 f9 ff ff       	call   101300 <idt_set_entry>
  1019de:	b8 10 00 00 00       	mov    $0x10,%eax
  1019e3:	8d 0d 1e 2d 10 00    	lea    0x102d1e,%ecx
  1019e9:	ba 08 00 00 00       	mov    $0x8,%edx
  1019ee:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019f3:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1019fa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019fe:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a05:	00 
  101a06:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a0d:	00 
  101a0e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101a14:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  101a1a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101a20:	e8 db f8 ff ff       	call   101300 <idt_set_entry>
  101a25:	b8 11 00 00 00       	mov    $0x11,%eax
  101a2a:	8d 0d 24 2d 10 00    	lea    0x102d24,%ecx
  101a30:	ba 08 00 00 00       	mov    $0x8,%edx
  101a35:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a3a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101a41:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a45:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a4c:	00 
  101a4d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a54:	00 
  101a55:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  101a5b:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  101a61:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  101a67:	e8 94 f8 ff ff       	call   101300 <idt_set_entry>
  101a6c:	b8 12 00 00 00       	mov    $0x12,%eax
  101a71:	8d 0d 28 2d 10 00    	lea    0x102d28,%ecx
  101a77:	ba 08 00 00 00       	mov    $0x8,%edx
  101a7c:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a81:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  101a88:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a8c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a93:	00 
  101a94:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a9b:	00 
  101a9c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101aa2:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101aa8:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  101aae:	e8 4d f8 ff ff       	call   101300 <idt_set_entry>
  101ab3:	b8 20 00 00 00       	mov    $0x20,%eax
  101ab8:	8d 0d 2e 2d 10 00    	lea    0x102d2e,%ecx
  101abe:	ba 08 00 00 00       	mov    $0x8,%edx
  101ac3:	be 8e 00 00 00       	mov    $0x8e,%esi

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ac8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101acf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ad3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ada:	00 
  101adb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ae2:	00 
  101ae3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101ae9:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  101aef:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101af5:	e8 06 f8 ff ff       	call   101300 <idt_set_entry>
  101afa:	b8 21 00 00 00       	mov    $0x21,%eax
  101aff:	8d 0d 34 2d 10 00    	lea    0x102d34,%ecx
  101b05:	ba 08 00 00 00       	mov    $0x8,%edx
  101b0a:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b0f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101b16:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b1a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b21:	00 
  101b22:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b29:	00 
  101b2a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  101b30:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  101b36:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  101b3c:	e8 bf f7 ff ff       	call   101300 <idt_set_entry>
  101b41:	b8 22 00 00 00       	mov    $0x22,%eax
  101b46:	8d 0d 3a 2d 10 00    	lea    0x102d3a,%ecx
  101b4c:	ba 08 00 00 00       	mov    $0x8,%edx
  101b51:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(34, intr_stub_34, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b56:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  101b5d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b61:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b68:	00 
  101b69:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b70:	00 
  101b71:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  101b77:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  101b7d:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  101b83:	e8 78 f7 ff ff       	call   101300 <idt_set_entry>
  101b88:	b8 23 00 00 00       	mov    $0x23,%eax
  101b8d:	8d 0d 40 2d 10 00    	lea    0x102d40,%ecx
  101b93:	ba 08 00 00 00       	mov    $0x8,%edx
  101b98:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(35, intr_stub_35, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b9d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101ba4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ba8:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101baf:	00 
  101bb0:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bb7:	00 
  101bb8:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101bbe:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101bc4:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101bca:	e8 31 f7 ff ff       	call   101300 <idt_set_entry>
  101bcf:	b8 24 00 00 00       	mov    $0x24,%eax
  101bd4:	8d 0d 46 2d 10 00    	lea    0x102d46,%ecx
  101bda:	ba 08 00 00 00       	mov    $0x8,%edx
  101bdf:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(36, intr_stub_36, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101be4:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101beb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101bef:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bf6:	00 
  101bf7:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bfe:	00 
  101bff:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101c05:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101c0b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101c11:	e8 ea f6 ff ff       	call   101300 <idt_set_entry>
  101c16:	b8 25 00 00 00       	mov    $0x25,%eax
  101c1b:	8d 0d 4c 2d 10 00    	lea    0x102d4c,%ecx
  101c21:	ba 08 00 00 00       	mov    $0x8,%edx
  101c26:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(37, intr_stub_37, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c2b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101c32:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c36:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c3d:	00 
  101c3e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c45:	00 
  101c46:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101c4c:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101c52:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101c58:	e8 a3 f6 ff ff       	call   101300 <idt_set_entry>
  101c5d:	b8 26 00 00 00       	mov    $0x26,%eax
  101c62:	8d 0d 52 2d 10 00    	lea    0x102d52,%ecx
  101c68:	ba 08 00 00 00       	mov    $0x8,%edx
  101c6d:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(38, intr_stub_38, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101c72:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101c79:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c7d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c84:	00 
  101c85:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c8c:	00 
  101c8d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101c93:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101c99:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101c9f:	e8 5c f6 ff ff       	call   101300 <idt_set_entry>
  101ca4:	b8 27 00 00 00       	mov    $0x27,%eax
  101ca9:	8d 0d 58 2d 10 00    	lea    0x102d58,%ecx
  101caf:	ba 08 00 00 00       	mov    $0x8,%edx
  101cb4:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(39, intr_stub_39, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101cb9:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101cc0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cc4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ccb:	00 
  101ccc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101cd3:	00 
  101cd4:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101cda:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101ce0:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101ce6:	e8 15 f6 ff ff       	call   101300 <idt_set_entry>
  101ceb:	b8 28 00 00 00       	mov    $0x28,%eax
  101cf0:	8d 0d 5e 2d 10 00    	lea    0x102d5e,%ecx
  101cf6:	ba 08 00 00 00       	mov    $0x8,%edx
  101cfb:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(40, intr_stub_40, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d00:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101d07:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d0b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d12:	00 
  101d13:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d1a:	00 
  101d1b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101d21:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101d27:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101d2d:	e8 ce f5 ff ff       	call   101300 <idt_set_entry>
  101d32:	b8 29 00 00 00       	mov    $0x29,%eax
  101d37:	8d 0d 64 2d 10 00    	lea    0x102d64,%ecx
  101d3d:	ba 08 00 00 00       	mov    $0x8,%edx
  101d42:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(41, intr_stub_41, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d47:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101d4e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d52:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d59:	00 
  101d5a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d61:	00 
  101d62:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101d68:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101d6e:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101d74:	e8 87 f5 ff ff       	call   101300 <idt_set_entry>
  101d79:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101d7e:	8d 0d 6a 2d 10 00    	lea    0x102d6a,%ecx
  101d84:	ba 08 00 00 00       	mov    $0x8,%edx
  101d89:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(42, intr_stub_42, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101d8e:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101d95:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d99:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101da0:	00 
  101da1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101da8:	00 
  101da9:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101daf:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101db5:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101dbb:	e8 40 f5 ff ff       	call   101300 <idt_set_entry>
  101dc0:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101dc5:	8d 0d 70 2d 10 00    	lea    0x102d70,%ecx
  101dcb:	ba 08 00 00 00       	mov    $0x8,%edx
  101dd0:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(43, intr_stub_43, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101dd5:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101ddc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101de0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101de7:	00 
  101de8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101def:	00 
  101df0:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101df6:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101dfc:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101e02:	e8 f9 f4 ff ff       	call   101300 <idt_set_entry>
  101e07:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101e0c:	8d 0d 76 2d 10 00    	lea    0x102d76,%ecx
  101e12:	ba 08 00 00 00       	mov    $0x8,%edx
  101e17:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(44, intr_stub_44, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e1c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101e23:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e27:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e2e:	00 
  101e2f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e36:	00 
  101e37:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101e3d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101e43:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101e49:	e8 b2 f4 ff ff       	call   101300 <idt_set_entry>
  101e4e:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101e53:	8d 0d 7c 2d 10 00    	lea    0x102d7c,%ecx
  101e59:	ba 08 00 00 00       	mov    $0x8,%edx
  101e5e:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(45, intr_stub_45, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101e63:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101e6a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e6e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101e75:	00 
  101e76:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101e7d:	00 
  101e7e:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  101e84:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  101e8a:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101e90:	e8 6b f4 ff ff       	call   101300 <idt_set_entry>
  101e95:	b8 2e 00 00 00       	mov    $0x2e,%eax
  101e9a:	8d 0d 82 2d 10 00    	lea    0x102d82,%ecx
  101ea0:	ba 08 00 00 00       	mov    $0x8,%edx
  101ea5:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(46, intr_stub_46, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101eaa:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101eb1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101eb5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ebc:	00 
  101ebd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ec4:	00 
  101ec5:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  101ecb:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101ed1:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101ed7:	e8 24 f4 ff ff       	call   101300 <idt_set_entry>
  101edc:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101ee1:	8d 0d 88 2d 10 00    	lea    0x102d88,%ecx
  101ee7:	ba 08 00 00 00       	mov    $0x8,%edx
  101eec:	be 8e 00 00 00       	mov    $0x8e,%esi
  idt_set_entry(47, intr_stub_47, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ef1:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101ef8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101efc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f03:	00 
  101f04:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101f0b:	00 
  101f0c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101f12:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101f18:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  101f1e:	e8 dd f3 ff ff       	call   101300 <idt_set_entry>
  101f23:	b8 30 00 00 00       	mov    $0x30,%eax
  101f28:	8d 0d 8e 2d 10 00    	lea    0x102d8e,%ecx
  101f2e:	ba 08 00 00 00       	mov    $0x8,%edx
  101f33:	be ee 00 00 00       	mov    $0xee,%esi

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101f38:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101f3f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f43:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101f4a:	00 
  101f4b:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101f52:	00 
  101f53:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  101f59:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  101f5f:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  101f65:	e8 96 f3 ff ff       	call   101300 <idt_set_entry>
  101f6a:	b8 05 00 00 00       	mov    $0x5,%eax
  101f6f:	8d 0d 08 41 10 00    	lea    0x104108,%ecx
  101f75:	ba 80 00 00 00       	mov    $0x80,%edx
  101f7a:	be e9 00 00 00       	mov    $0xe9,%esi

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101f7f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101f86:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f8a:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101f91:	00 
  101f92:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101f99:	00 
  101f9a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101fa0:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101fa6:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  101fac:	e8 5f 0e 00 00       	call   102e10 <set_gdt_entry>
  101fb1:	b8 28 00 00 00       	mov    $0x28,%eax

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101fb6:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101fb9:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  101fbd:	fb                   	sti    
}
  101fbe:	81 c4 34 02 00 00    	add    $0x234,%esp
  101fc4:	5e                   	pop    %esi
  101fc5:	5d                   	pop    %ebp
  101fc6:	c3                   	ret    
  101fc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  101fce:	00 00 

00101fd0 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  101fd0:	55                   	push   %ebp
  101fd1:	89 e5                	mov    %esp,%ebp
  101fd3:	50                   	push   %eax
  101fd4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101fd8:	66 89 c1             	mov    %ax,%cx
  101fdb:	8a 55 0c             	mov    0xc(%ebp),%dl
  101fde:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101fe2:	88 55 fd             	mov    %dl,-0x3(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101fe5:	8a 45 fd             	mov    -0x3(%ebp),%al
  101fe8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101fec:	ee                   	out    %al,(%dx)
}
  101fed:	83 c4 04             	add    $0x4,%esp
  101ff0:	5d                   	pop    %ebp
  101ff1:	c3                   	ret    
  101ff2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101ff9:	1f 84 00 00 00 00 00 

00102000 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  102000:	55                   	push   %ebp
  102001:	89 e5                	mov    %esp,%ebp
  102003:	83 ec 08             	sub    $0x8,%esp
  102006:	8b 45 0c             	mov    0xc(%ebp),%eax
  102009:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10200c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10200f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  102012:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102015:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102018:	89 04 8d 18 b3 10 00 	mov    %eax,0x10b318(,%ecx,4)
	handler_set[i] = 1;
  10201f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102022:	c7 04 85 18 b2 10 00 	movl   $0x1,0x10b218(,%eax,4)
  102029:	01 00 00 00 
}
  10202d:	83 c4 08             	add    $0x8,%esp
  102030:	5d                   	pop    %ebp
  102031:	c3                   	ret    
  102032:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102039:	1f 84 00 00 00 00 00 

00102040 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  102040:	55                   	push   %ebp
  102041:	89 e5                	mov    %esp,%ebp
  102043:	83 ec 28             	sub    $0x28,%esp
  102046:	8b 45 08             	mov    0x8(%ebp),%eax
  102049:	89 45 fc             	mov    %eax,-0x4(%ebp)
  struct cpu_state* new_cpu = cpu;
  10204c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10204f:	89 45 f8             	mov    %eax,-0x8(%ebp)

  if (cpu->intr <= 0x1f) {
  102052:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102055:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  10205c:	0f 87 3d 00 00 00    	ja     10209f <handle_interrupt+0x5f>
    if(!scheduling_enabled()) {
  102062:	e8 29 10 00 00       	call   103090 <scheduling_enabled>
  102067:	3d 00 00 00 00       	cmp    $0x0,%eax
  10206c:	0f 85 1a 00 00 00    	jne    10208c <handle_interrupt+0x4c>
  102072:	8d 05 af 51 10 00    	lea    0x1051af,%eax
      show_cod(cpu, "Kernel PANIC!");
  102078:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10207b:	89 0c 24             	mov    %ecx,(%esp)
  10207e:	89 44 24 04          	mov    %eax,0x4(%esp)
  102082:	e8 39 01 00 00       	call   1021c0 <show_cod>
    }
  102087:	e9 0e 00 00 00       	jmp    10209a <handle_interrupt+0x5a>
    else
    {
      schedule_exception(cpu);
  10208c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10208f:	89 04 24             	mov    %eax,(%esp)
  102092:	e8 09 10 00 00       	call   1030a0 <schedule_exception>
  102097:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  10209a:	e9 16 01 00 00       	jmp    1021b5 <handle_interrupt+0x175>
  10209f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020a2:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  1020a9:	0f 82 b4 00 00 00    	jb     102163 <handle_interrupt+0x123>
  1020af:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020b2:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  1020b9:	0f 87 a4 00 00 00    	ja     102163 <handle_interrupt+0x123>
    if (cpu->intr >= 0x28) {
  1020bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020c2:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  1020c9:	0f 82 24 00 00 00    	jb     1020f3 <handle_interrupt+0xb3>
  1020cf:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1020d4:	b9 20 00 00 00       	mov    $0x20,%ecx
      outb(0xa0, 0x20);
  1020d9:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1020e0:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1020e7:	00 
  1020e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1020eb:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1020ee:	e8 dd fe ff ff       	call   101fd0 <outb>
    }
    if (cpu->intr == 0x20) {
  1020f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1020f6:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  1020fd:	0f 85 1b 00 00 00    	jne    10211e <handle_interrupt+0xde>
      new_cpu = schedule(cpu);
  102103:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102106:	89 04 24             	mov    %eax,(%esp)
  102109:	e8 12 11 00 00       	call   103220 <schedule>
  10210e:	89 45 f8             	mov    %eax,-0x8(%ebp)
      tss[1] = (uint32_t) (new_cpu + 1);
  102111:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102114:	05 38 00 00 00       	add    $0x38,%eax
  102119:	a3 0c 41 10 00       	mov    %eax,0x10410c
  10211e:	b8 20 00 00 00       	mov    $0x20,%eax
    }
    outb(0x20, 0x20);
  102123:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10212a:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  102131:	00 
  102132:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102135:	e8 96 fe ff ff       	call   101fd0 <outb>
		if(handler_set[cpu->intr]) {
  10213a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10213d:	8b 40 1c             	mov    0x1c(%eax),%eax
  102140:	81 3c 85 18 b2 10 00 	cmpl   $0x0,0x10b218(,%eax,4)
  102147:	00 00 00 00 
  10214b:	0f 84 0d 00 00 00    	je     10215e <handle_interrupt+0x11e>
			handlers[cpu->intr]();
  102151:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102154:	8b 40 1c             	mov    0x1c(%eax),%eax
  102157:	ff 14 85 18 b3 10 00 	call   *0x10b318(,%eax,4)
		}
  } else if (cpu->intr == 0x30) {
  10215e:	e9 4d 00 00 00       	jmp    1021b0 <handle_interrupt+0x170>
  102163:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102166:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  10216d:	0f 85 20 00 00 00    	jne    102193 <handle_interrupt+0x153>
		new_cpu = syscall(new_cpu);
  102173:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102176:	89 04 24             	mov    %eax,(%esp)
  102179:	e8 52 07 00 00       	call   1028d0 <syscall>
  10217e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    tss[1] = (uint32_t) (new_cpu + 1);
  102181:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102184:	05 38 00 00 00       	add    $0x38,%eax
  102189:	a3 0c 41 10 00       	mov    %eax,0x10410c
  } else {
  10218e:	e9 18 00 00 00       	jmp    1021ab <handle_interrupt+0x16b>
  102193:	8d 05 bd 51 10 00    	lea    0x1051bd,%eax
    kprintf("Unbekannter Interrupt\n");
  102199:	89 04 24             	mov    %eax,(%esp)
  10219c:	e8 ff 01 00 00       	call   1023a0 <kprintf>
  1021a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  1021a4:	fa                   	cli    
  1021a5:	f4                   	hlt    
    }
  1021a6:	e9 f9 ff ff ff       	jmp    1021a4 <handle_interrupt+0x164>
  1021ab:	e9 00 00 00 00       	jmp    1021b0 <handle_interrupt+0x170>
  1021b0:	e9 00 00 00 00       	jmp    1021b5 <handle_interrupt+0x175>
  }  

  return new_cpu;
  1021b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021b8:	83 c4 28             	add    $0x28,%esp
  1021bb:	5d                   	pop    %ebp
  1021bc:	c3                   	ret    
  1021bd:	66 90                	xchg   %ax,%ax
  1021bf:	90                   	nop

001021c0 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu, char* fstr) {
  1021c0:	55                   	push   %ebp
  1021c1:	89 e5                	mov    %esp,%ebp
  1021c3:	56                   	push   %esi
  1021c4:	83 ec 24             	sub    $0x24,%esp
  1021c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1021ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1021cd:	ba 04 00 00 00       	mov    $0x4,%edx
  1021d2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1021d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  kprintf ("          '''  \\   `-._.'`---^_))) \n");
  kprintf ("                `-._ )))       ``` \n");
  kprintf ("                     ```            \n");
  #endif
  
  setclr(0x04);
  1021d8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1021df:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1021e2:	e8 99 01 00 00       	call   102380 <setclr>
  kprintf(fstr);
  1021e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021ea:	89 04 24             	mov    %eax,(%esp)
  1021ed:	e8 ae 01 00 00       	call   1023a0 <kprintf>
  1021f2:	8d 0d d4 51 10 00    	lea    0x1051d4,%ecx
  kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  1021f8:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1021fb:	8b 52 1c             	mov    0x1c(%edx),%edx
  1021fe:	8b 75 f8             	mov    -0x8(%ebp),%esi
  102201:	8b 76 20             	mov    0x20(%esi),%esi
  102204:	89 0c 24             	mov    %ecx,(%esp)
  102207:	89 54 24 04          	mov    %edx,0x4(%esp)
  10220b:	89 74 24 08          	mov    %esi,0x8(%esp)
  10220f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102212:	e8 89 01 00 00       	call   1023a0 <kprintf>
  show_dump(cpu);
  102217:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10221a:	89 0c 24             	mov    %ecx,(%esp)
  10221d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102220:	e8 0b 00 00 00       	call   102230 <show_dump>

  while(1) {
    asm volatile("cli; hlt");
  102225:	fa                   	cli    
  102226:	f4                   	hlt    
  }
  102227:	e9 f9 ff ff ff       	jmp    102225 <show_cod+0x65>
  10222c:	0f 1f 40 00          	nopl   0x0(%eax)

00102230 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  102230:	55                   	push   %ebp
  102231:	89 e5                	mov    %esp,%ebp
  102233:	53                   	push   %ebx
  102234:	57                   	push   %edi
  102235:	56                   	push   %esi
  102236:	83 ec 2c             	sub    $0x2c,%esp
  102239:	8b 45 08             	mov    0x8(%ebp),%eax
  10223c:	8d 0d f9 51 10 00    	lea    0x1051f9,%ecx
  102242:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  102245:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102248:	8b 00                	mov    (%eax),%eax
  10224a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10224d:	8b 52 04             	mov    0x4(%edx),%edx
  102250:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102253:	8b 76 08             	mov    0x8(%esi),%esi
  102256:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102259:	8b 7f 0c             	mov    0xc(%edi),%edi
  10225c:	89 0c 24             	mov    %ecx,(%esp)
  10225f:	89 44 24 04          	mov    %eax,0x4(%esp)
  102263:	89 54 24 08          	mov    %edx,0x8(%esp)
  102267:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10226b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10226f:	e8 2c 01 00 00       	call   1023a0 <kprintf>
  102274:	8d 0d 1a 52 10 00    	lea    0x10521a,%ecx
  kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  10227a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10227d:	8b 52 10             	mov    0x10(%edx),%edx
  102280:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102283:	8b 76 14             	mov    0x14(%esi),%esi
  102286:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102289:	8b 7f 18             	mov    0x18(%edi),%edi
  10228c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10228f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  102292:	89 0c 24             	mov    %ecx,(%esp)
  102295:	89 54 24 04          	mov    %edx,0x4(%esp)
  102299:	89 74 24 08          	mov    %esi,0x8(%esp)
  10229d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1022a1:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1022a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1022a8:	e8 f3 00 00 00       	call   1023a0 <kprintf>
  1022ad:	8d 0d 3b 52 10 00    	lea    0x10523b,%ecx
  kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  1022b3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1022b6:	8b 52 28             	mov    0x28(%edx),%edx
  1022b9:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1022bc:	8b 76 2c             	mov    0x2c(%esi),%esi
  1022bf:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1022c2:	8b 7f 30             	mov    0x30(%edi),%edi
  1022c5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1022c8:	8b 5b 34             	mov    0x34(%ebx),%ebx
  1022cb:	89 0c 24             	mov    %ecx,(%esp)
  1022ce:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022d2:	89 74 24 08          	mov    %esi,0x8(%esp)
  1022d6:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1022da:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1022de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1022e1:	e8 ba 00 00 00       	call   1023a0 <kprintf>
  1022e6:	8d 0d 5d 52 10 00    	lea    0x10525d,%ecx

  uint32_t cr2 = 0;
  1022ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

  asm volatile("mov %%cr2, %0" : "=r" (cr2));
  1022f3:	0f 20 d2             	mov    %cr2,%edx
  1022f6:	89 55 ec             	mov    %edx,-0x14(%ebp)

  kprintf("CR2: %x \n", cr2);
  1022f9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1022fc:	89 0c 24             	mov    %ecx,(%esp)
  1022ff:	89 54 24 04          	mov    %edx,0x4(%esp)
  102303:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102306:	e8 95 00 00 00       	call   1023a0 <kprintf>
}
  10230b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10230e:	83 c4 2c             	add    $0x2c,%esp
  102311:	5e                   	pop    %esi
  102312:	5f                   	pop    %edi
  102313:	5b                   	pop    %ebx
  102314:	5d                   	pop    %ebp
  102315:	c3                   	ret    
  102316:	66 90                	xchg   %ax,%ax
  102318:	66 90                	xchg   %ax,%ax
  10231a:	66 90                	xchg   %ax,%ax
  10231c:	66 90                	xchg   %ax,%ax
  10231e:	66 90                	xchg   %ax,%ax

00102320 <clrscr>:
    } while (x);
    kputs(p);
}

void clrscr(void)
{
  102320:	55                   	push   %ebp
  102321:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102323:	50                   	push   %eax
  102324:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10232b:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  102332:	0f 8d 1d 00 00 00    	jge    102355 <clrscr+0x35>
        video[i] = 0;
  102338:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10233b:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102341:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  102345:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102348:	05 01 00 00 00       	add    $0x1,%eax
  10234d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102350:	e9 d6 ff ff ff       	jmp    10232b <clrscr+0xb>
        video[i] = 0;
    }
    
    color = 0x07;
  102355:	c6 05 8c 41 10 00 07 	movb   $0x7,0x10418c

    x = y = 0;
  10235c:	c7 05 18 b4 10 00 00 	movl   $0x0,0x10b418
  102363:	00 00 00 
  102366:	c7 05 1c b4 10 00 00 	movl   $0x0,0x10b41c
  10236d:	00 00 00 
}
  102370:	83 c4 04             	add    $0x4,%esp
  102373:	5d                   	pop    %ebp
  102374:	c3                   	ret    
  102375:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10237c:	00 00 00 00 

00102380 <setclr>:

void setclr(char clr) {
  102380:	55                   	push   %ebp
  102381:	89 e5                	mov    %esp,%ebp
  102383:	50                   	push   %eax
  102384:	8a 45 08             	mov    0x8(%ebp),%al
  102387:	88 45 ff             	mov    %al,-0x1(%ebp)
  color = clr;
  10238a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10238d:	a2 8c 41 10 00       	mov    %al,0x10418c
}
  102392:	83 c4 04             	add    $0x4,%esp
  102395:	5d                   	pop    %ebp
  102396:	c3                   	ret    
  102397:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10239e:	00 00 

001023a0 <kprintf>:

int kprintf(const char* fmt, ...)
{
  1023a0:	55                   	push   %ebp
  1023a1:	89 e5                	mov    %esp,%ebp
  1023a3:	83 ec 58             	sub    $0x58,%esp
  1023a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1023a9:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  1023ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1023af:	8d 45 0c             	lea    0xc(%ebp),%eax
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  1023b2:	89 01                	mov    %eax,(%ecx)
  kprintf_res = 0;
  1023b4:	c7 05 20 b4 10 00 00 	movl   $0x0,0x10b420
  1023bb:	00 00 00 
  while (*fmt) {
  1023be:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023c1:	80 38 00             	cmpb   $0x0,(%eax)
  1023c4:	0f 84 dd 01 00 00    	je     1025a7 <kprintf+0x207>
    if (*fmt == '%') {
  1023ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023cd:	0f be 00             	movsbl (%eax),%eax
  1023d0:	3d 25 00 00 00       	cmp    $0x25,%eax
  1023d5:	0f 85 ae 01 00 00    	jne    102589 <kprintf+0x1e9>
      fmt++;
  1023db:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023de:	89 c1                	mov    %eax,%ecx
  1023e0:	41                   	inc    %ecx
  1023e1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
      switch (*fmt) {
  1023e4:	0f be 40 01          	movsbl 0x1(%eax),%eax
  1023e8:	89 c1                	mov    %eax,%ecx
  1023ea:	83 e9 24             	sub    $0x24,%ecx
  1023ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1023f0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1023f3:	0f 8f 15 00 00 00    	jg     10240e <kprintf+0x6e>
  1023f9:	e9 00 00 00 00       	jmp    1023fe <kprintf+0x5e>
  1023fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102401:	85 c0                	test   %eax,%eax
  102403:	0f 84 54 01 00 00    	je     10255d <kprintf+0x1bd>
  102409:	e9 54 01 00 00       	jmp    102562 <kprintf+0x1c2>
  10240e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102411:	83 e8 62             	sub    $0x62,%eax
  102414:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102417:	0f 8f 19 00 00 00    	jg     102436 <kprintf+0x96>
  10241d:	e9 00 00 00 00       	jmp    102422 <kprintf+0x82>
  102422:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102425:	83 e8 25             	sub    $0x25,%eax
  102428:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10242b:	0f 84 13 01 00 00    	je     102544 <kprintf+0x1a4>
  102431:	e9 2c 01 00 00       	jmp    102562 <kprintf+0x1c2>
  102436:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102439:	83 e8 6f             	sub    $0x6f,%eax
  10243c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10243f:	0f 8f 2d 00 00 00    	jg     102472 <kprintf+0xd2>
  102445:	e9 00 00 00 00       	jmp    10244a <kprintf+0xaa>
  10244a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10244d:	83 e8 63             	sub    $0x63,%eax
  102450:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102453:	0f 84 c5 00 00 00    	je     10251e <kprintf+0x17e>
  102459:	e9 00 00 00 00       	jmp    10245e <kprintf+0xbe>
  10245e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102461:	83 e8 64             	sub    $0x64,%eax
  102464:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102467:	0f 84 4b 00 00 00    	je     1024b8 <kprintf+0x118>
  10246d:	e9 f0 00 00 00       	jmp    102562 <kprintf+0x1c2>
  102472:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102475:	83 c0 90             	add    $0xffffff90,%eax
  102478:	89 c1                	mov    %eax,%ecx
  10247a:	83 e9 08             	sub    $0x8,%ecx
  10247d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102480:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  102483:	0f 87 d9 00 00 00    	ja     102562 <kprintf+0x1c2>
  102489:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10248c:	8b 0c 85 08 50 10 00 	mov    0x105008(,%eax,4),%ecx
  102493:	ff e1                	jmp    *%ecx
        case 's':
          s = va_arg(ap, char*);
  102495:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102498:	89 c1                	mov    %eax,%ecx
  10249a:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1024a0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1024a3:	8b 00                	mov    (%eax),%eax
  1024a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  1024a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024ab:	89 04 24             	mov    %eax,(%esp)
  1024ae:	e8 0d 01 00 00       	call   1025c0 <kputs>
          break;
  1024b3:	e9 cc 00 00 00       	jmp    102584 <kprintf+0x1e4>
  1024b8:	b8 0a 00 00 00       	mov    $0xa,%eax
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  1024bd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1024c0:	89 ca                	mov    %ecx,%edx
  1024c2:	81 c2 04 00 00 00    	add    $0x4,%edx
  1024c8:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1024cb:	8b 09                	mov    (%ecx),%ecx
  1024cd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 10);
  1024d0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1024d3:	89 0c 24             	mov    %ecx,(%esp)
  1024d6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1024dd:	00 
  1024de:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1024e1:	e8 1a 01 00 00       	call   102600 <kputn>
          break;
  1024e6:	e9 99 00 00 00       	jmp    102584 <kprintf+0x1e4>
  1024eb:	b8 10 00 00 00       	mov    $0x10,%eax
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  1024f0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1024f3:	89 ca                	mov    %ecx,%edx
  1024f5:	81 c2 04 00 00 00    	add    $0x4,%edx
  1024fb:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1024fe:	8b 09                	mov    (%ecx),%ecx
  102500:	89 4d f0             	mov    %ecx,-0x10(%ebp)
          kputn(n, 16);
  102503:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102506:	89 0c 24             	mov    %ecx,(%esp)
  102509:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  102510:	00 
  102511:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102514:	e8 e7 00 00 00       	call   102600 <kputn>
          break;
  102519:	e9 66 00 00 00       	jmp    102584 <kprintf+0x1e4>
        case 'c':
          c = va_arg(ap, int);
  10251e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102521:	89 c1                	mov    %eax,%ecx
  102523:	81 c1 04 00 00 00    	add    $0x4,%ecx
  102529:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10252c:	8b 00                	mov    (%eax),%eax
  10252e:	88 c2                	mov    %al,%dl
  102530:	88 55 ef             	mov    %dl,-0x11(%ebp)
          kputc(c);
  102533:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  102537:	89 04 24             	mov    %eax,(%esp)
  10253a:	e8 61 01 00 00       	call   1026a0 <kputc>
          break;
  10253f:	e9 40 00 00 00       	jmp    102584 <kprintf+0x1e4>
  102544:	b8 25 00 00 00       	mov    $0x25,%eax
        case '%':
          kputc('%');
  102549:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  102550:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102553:	e8 48 01 00 00       	call   1026a0 <kputc>
          break;
  102558:	e9 27 00 00 00       	jmp    102584 <kprintf+0x1e4>
        case '\0':
          goto out;
  10255d:	e9 4a 00 00 00       	jmp    1025ac <kprintf+0x20c>
  102562:	b8 25 00 00 00       	mov    $0x25,%eax
        default:
          kputc('%');
  102567:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10256e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102571:	e8 2a 01 00 00       	call   1026a0 <kputc>
          kputc(*fmt);
  102576:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102579:	0f be 00             	movsbl (%eax),%eax
  10257c:	89 04 24             	mov    %eax,(%esp)
  10257f:	e8 1c 01 00 00       	call   1026a0 <kputc>
          break;
      }
    } else {
  102584:	e9 0e 00 00 00       	jmp    102597 <kprintf+0x1f7>
      kputc(*fmt);
  102589:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10258c:	0f be 00             	movsbl (%eax),%eax
  10258f:	89 04 24             	mov    %eax,(%esp)
  102592:	e8 09 01 00 00       	call   1026a0 <kputc>
    }

    fmt++;
  102597:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10259a:	05 01 00 00 00       	add    $0x1,%eax
  10259f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  1025a2:	e9 17 fe ff ff       	jmp    1023be <kprintf+0x1e>
  1025a7:	e9 00 00 00 00       	jmp    1025ac <kprintf+0x20c>

out:
  va_end(ap);

  return kprintf_res;
  1025ac:	a1 20 b4 10 00       	mov    0x10b420,%eax
  1025b1:	83 c4 58             	add    $0x58,%esp
  1025b4:	5d                   	pop    %ebp
  1025b5:	c3                   	ret    
  1025b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1025bd:	00 00 00 

001025c0 <kputs>:
    x++;
    kprintf_res++;
}

static void kputs(const char* s)
{
  1025c0:	55                   	push   %ebp
  1025c1:	89 e5                	mov    %esp,%ebp
  1025c3:	83 ec 08             	sub    $0x8,%esp
  1025c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1025c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  1025cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025cf:	80 38 00             	cmpb   $0x0,(%eax)
  1025d2:	0f 84 1e 00 00 00    	je     1025f6 <kputs+0x36>
        kputc(*s++);
  1025d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025db:	89 c1                	mov    %eax,%ecx
  1025dd:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1025e3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1025e6:	0f be 00             	movsbl (%eax),%eax
  1025e9:	89 04 24             	mov    %eax,(%esp)
  1025ec:	e8 af 00 00 00       	call   1026a0 <kputc>
    }
  1025f1:	e9 d6 ff ff ff       	jmp    1025cc <kputs+0xc>
}
  1025f6:	83 c4 08             	add    $0x8,%esp
  1025f9:	5d                   	pop    %ebp
  1025fa:	c3                   	ret    
  1025fb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102600 <kputn>:

static void kputn(unsigned long x, int base)
{
  102600:	55                   	push   %ebp
  102601:	89 e5                	mov    %esp,%ebp
  102603:	56                   	push   %esi
  102604:	83 ec 64             	sub    $0x64,%esp
  102607:	8b 45 0c             	mov    0xc(%ebp),%eax
  10260a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10260d:	8d 15 67 52 10 00    	lea    0x105267,%edx
  102613:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102616:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  102619:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  10261c:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  102623:	0f 8e 05 00 00 00    	jle    10262e <kputn+0x2e>
        return;
  102629:	e9 5d 00 00 00       	jmp    10268b <kputn+0x8b>
  10262e:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  102631:	05 40 00 00 00       	add    $0x40,%eax
  102636:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  102639:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10263c:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  10263f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102642:	31 d2                	xor    %edx,%edx
  102644:	f7 75 f4             	divl   -0xc(%ebp)
  102647:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10264a:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  10264d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102650:	89 c2                	mov    %eax,%edx
  102652:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  102658:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10265b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10265e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102661:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102664:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102667:	89 d0                	mov    %edx,%eax
  102669:	31 d2                	xor    %edx,%edx
  10266b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10266e:	f7 f6                	div    %esi
  102670:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  102673:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10267a:	0f 85 bf ff ff ff    	jne    10263f <kputn+0x3f>
    kputs(p);
  102680:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102683:	89 04 24             	mov    %eax,(%esp)
  102686:	e8 35 ff ff ff       	call   1025c0 <kputs>
}
  10268b:	83 c4 64             	add    $0x64,%esp
  10268e:	5e                   	pop    %esi
  10268f:	5d                   	pop    %ebp
  102690:	c3                   	ret    
  102691:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102698:	0f 1f 84 00 00 00 00 
  10269f:	00 

001026a0 <kputc>:
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c)
{
  1026a0:	55                   	push   %ebp
  1026a1:	89 e5                	mov    %esp,%ebp
  1026a3:	83 ec 08             	sub    $0x8,%esp
  1026a6:	8a 45 08             	mov    0x8(%ebp),%al
  1026a9:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((c == '\n') || (x > 79)) {
  1026ac:	0f be 4d ff          	movsbl -0x1(%ebp),%ecx
  1026b0:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  1026b6:	0f 84 10 00 00 00    	je     1026cc <kputc+0x2c>
  1026bc:	81 3d 1c b4 10 00 4f 	cmpl   $0x4f,0x10b41c
  1026c3:	00 00 00 
  1026c6:	0f 8e 19 00 00 00    	jle    1026e5 <kputc+0x45>
        x = 0;
  1026cc:	c7 05 1c b4 10 00 00 	movl   $0x0,0x10b41c
  1026d3:	00 00 00 
        y++;
  1026d6:	a1 18 b4 10 00       	mov    0x10b418,%eax
  1026db:	05 01 00 00 00       	add    $0x1,%eax
  1026e0:	a3 18 b4 10 00       	mov    %eax,0x10b418
    }

    if (c == '\n') {
  1026e5:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1026e9:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1026ee:	0f 85 05 00 00 00    	jne    1026f9 <kputc+0x59>
        return;
  1026f4:	e9 f3 00 00 00       	jmp    1027ec <kputc+0x14c>
    }

    if (y > 24) {
  1026f9:	81 3d 18 b4 10 00 18 	cmpl   $0x18,0x10b418
  102700:	00 00 00 
  102703:	0f 8e 7e 00 00 00    	jle    102787 <kputc+0xe7>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  102709:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  102710:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  102717:	0f 8d 2c 00 00 00    	jge    102749 <kputc+0xa9>
            video[i] = video[i + 160];
  10271d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102720:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102726:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  10272d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102730:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102736:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  102739:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10273c:	05 01 00 00 00       	add    $0x1,%eax
  102741:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102744:	e9 c7 ff ff ff       	jmp    102710 <kputc+0x70>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102749:	e9 00 00 00 00       	jmp    10274e <kputc+0xae>
  10274e:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  102755:	0f 8d 1d 00 00 00    	jge    102778 <kputc+0xd8>
            video[i] = 0;
  10275b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10275e:	8b 0d 88 41 10 00    	mov    0x104188,%ecx
  102764:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  102768:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10276b:	05 01 00 00 00       	add    $0x1,%eax
  102770:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102773:	e9 d6 ff ff ff       	jmp    10274e <kputc+0xae>
            video[i] = 0;
        }
        y--;
  102778:	a1 18 b4 10 00       	mov    0x10b418,%eax
  10277d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  102782:	a3 18 b4 10 00       	mov    %eax,0x10b418
    }

    video[2 * (y * 80 + x)] = c;
  102787:	8a 45 ff             	mov    -0x1(%ebp),%al
  10278a:	69 0d 18 b4 10 00 50 	imul   $0x50,0x10b418,%ecx
  102791:	00 00 00 
  102794:	03 0d 1c b4 10 00    	add    0x10b41c,%ecx
  10279a:	c1 e1 01             	shl    $0x1,%ecx
  10279d:	8b 15 88 41 10 00    	mov    0x104188,%edx
  1027a3:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  1027a6:	a0 8c 41 10 00       	mov    0x10418c,%al
  1027ab:	69 0d 18 b4 10 00 50 	imul   $0x50,0x10b418,%ecx
  1027b2:	00 00 00 
  1027b5:	03 0d 1c b4 10 00    	add    0x10b41c,%ecx
  1027bb:	c1 e1 01             	shl    $0x1,%ecx
  1027be:	8b 15 88 41 10 00    	mov    0x104188,%edx
  1027c4:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  1027c8:	8b 0d 1c b4 10 00    	mov    0x10b41c,%ecx
  1027ce:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1027d4:	89 0d 1c b4 10 00    	mov    %ecx,0x10b41c
    kprintf_res++;
  1027da:	8b 0d 20 b4 10 00    	mov    0x10b420,%ecx
  1027e0:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1027e6:	89 0d 20 b4 10 00    	mov    %ecx,0x10b420
}
  1027ec:	83 c4 08             	add    $0x8,%esp
  1027ef:	5d                   	pop    %ebp
  1027f0:	c3                   	ret    
  1027f1:	66 90                	xchg   %ax,%ax
  1027f3:	66 90                	xchg   %ax,%ax
  1027f5:	66 90                	xchg   %ax,%ax
  1027f7:	66 90                	xchg   %ax,%ax
  1027f9:	66 90                	xchg   %ax,%ax
  1027fb:	66 90                	xchg   %ax,%ax
  1027fd:	66 90                	xchg   %ax,%ax
  1027ff:	90                   	nop

00102800 <memset>:
#include "vmm.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n)
{
  102800:	55                   	push   %ebp
  102801:	89 e5                	mov    %esp,%ebp
  102803:	83 ec 10             	sub    $0x10,%esp
  102806:	8b 45 10             	mov    0x10(%ebp),%eax
  102809:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10280c:	8b 55 08             	mov    0x8(%ebp),%edx
  10280f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102812:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102815:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  102818:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10281b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  10281e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102821:	89 c1                	mov    %eax,%ecx
  102823:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102829:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10282c:	3d 00 00 00 00       	cmp    $0x0,%eax
  102831:	0f 84 1a 00 00 00    	je     102851 <memset+0x51>
        *p++ = c;
  102837:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10283a:	88 c1                	mov    %al,%cl
  10283c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10283f:	89 c2                	mov    %eax,%edx
  102841:	81 c2 01 00 00 00    	add    $0x1,%edx
  102847:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10284a:	88 08                	mov    %cl,(%eax)
    }
  10284c:	e9 cd ff ff ff       	jmp    10281e <memset+0x1e>

    return buf;
  102851:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102854:	83 c4 10             	add    $0x10,%esp
  102857:	5d                   	pop    %ebp
  102858:	c3                   	ret    
  102859:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102860 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n)
{
  102860:	55                   	push   %ebp
  102861:	89 e5                	mov    %esp,%ebp
  102863:	83 ec 14             	sub    $0x14,%esp
  102866:	8b 45 10             	mov    0x10(%ebp),%eax
  102869:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10286c:	8b 55 08             	mov    0x8(%ebp),%edx
  10286f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102872:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102875:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  102878:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10287b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  10287e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102881:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  102884:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102887:	89 c1                	mov    %eax,%ecx
  102889:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10288f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102892:	3d 00 00 00 00       	cmp    $0x0,%eax
  102897:	0f 84 25 00 00 00    	je     1028c2 <memcpy+0x62>
      *(d++) = *(s++);
  10289d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028a0:	89 c1                	mov    %eax,%ecx
  1028a2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1028a8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1028ab:	8a 10                	mov    (%eax),%dl
  1028ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028b0:	89 c1                	mov    %eax,%ecx
  1028b2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1028b8:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1028bb:	88 10                	mov    %dl,(%eax)
    }
  1028bd:	e9 c2 ff ff ff       	jmp    102884 <memcpy+0x24>

    return dest;
  1028c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028c5:	83 c4 14             	add    $0x14,%esp
  1028c8:	5d                   	pop    %ebp
  1028c9:	c3                   	ret    
  1028ca:	66 90                	xchg   %ax,%ax
  1028cc:	66 90                	xchg   %ax,%ax
  1028ce:	66 90                	xchg   %ax,%ax

001028d0 <syscall>:
#include "elf.h"
#include "vmm.h"
#include "idt.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  1028d0:	55                   	push   %ebp
  1028d1:	89 e5                	mov    %esp,%ebp
  1028d3:	83 ec 28             	sub    $0x28,%esp
  1028d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1028d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t forkpdir;

  switch (cpu->eax) {
  1028dc:	8b 00                	mov    (%eax),%eax
  1028de:	89 c1                	mov    %eax,%ecx
  1028e0:	81 e9 c9 00 00 00    	sub    $0xc9,%ecx
  1028e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1028e9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1028ec:	0f 84 78 00 00 00    	je     10296a <syscall+0x9a>
  1028f2:	e9 00 00 00 00       	jmp    1028f7 <syscall+0x27>
  1028f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1028fa:	83 e8 02             	sub    $0x2,%eax
  1028fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102900:	0f 84 2c 00 00 00    	je     102932 <syscall+0x62>
  102906:	e9 00 00 00 00       	jmp    10290b <syscall+0x3b>
  10290b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10290e:	83 e8 01             	sub    $0x1,%eax
  102911:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102914:	0f 85 6b 00 00 00    	jne    102985 <syscall+0xb5>
  10291a:	e9 00 00 00 00       	jmp    10291f <syscall+0x4f>
    case 1: /* exit */
      cpu = terminate_current(cpu);
  10291f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102922:	89 04 24             	mov    %eax,(%esp)
  102925:	e8 66 08 00 00       	call   103190 <terminate_current>
  10292a:	89 45 fc             	mov    %eax,-0x4(%ebp)
      break;
  10292d:	e9 53 00 00 00       	jmp    102985 <syscall+0xb5>

    case 2: /* fork */
      forkpdir = vmm_fork_current();
  102932:	e8 e9 dd ff ff       	call   100720 <vmm_fork_current>
  102937:	b9 00 00 00 00       	mov    $0x0,%ecx
  10293c:	89 45 f8             	mov    %eax,-0x8(%ebp)
      cpu->eax = init_task(forkpdir, 0);
  10293f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102942:	89 04 24             	mov    %eax,(%esp)
  102945:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10294c:	00 
  10294d:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  102950:	e8 cb 0a 00 00       	call   103420 <init_task>
  102955:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102958:	89 01                	mov    %eax,(%ecx)
      clone_task_state(forkpdir);
  10295a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10295d:	89 04 24             	mov    %eax,(%esp)
  102960:	e8 4b 09 00 00       	call   1032b0 <clone_task_state>
      break;
  102965:	e9 1b 00 00 00       	jmp    102985 <syscall+0xb5>
  10296a:	8d 05 8c 52 10 00    	lea    0x10528c,%eax
      
    case 201: /* putc */
      kprintf("%c", cpu->ebx);
  102970:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102973:	8b 49 04             	mov    0x4(%ecx),%ecx
  102976:	89 04 24             	mov    %eax,(%esp)
  102979:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10297d:	e8 1e fa ff ff       	call   1023a0 <kprintf>
  102982:	89 45 e0             	mov    %eax,-0x20(%ebp)
      break;
  }

  return cpu;
  102985:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102988:	83 c4 28             	add    $0x28,%esp
  10298b:	5d                   	pop    %ebp
  10298c:	c3                   	ret    
  10298d:	0f 1f 00             	nopl   (%eax)

00102990 <task2>:
}

void task2() {
  102990:	55                   	push   %ebp
  102991:	89 e5                	mov    %esp,%ebp
  102993:	83 ec 18             	sub    $0x18,%esp
  102996:	8d 05 8f 52 10 00    	lea    0x10528f,%eax
  uint32_t n = 0;
  10299c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("2222: %x \n", n);
  1029a3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029a6:	89 04 24             	mov    %eax,(%esp)
  1029a9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029ad:	e8 ee f9 ff ff       	call   1023a0 <kprintf>
  1029b2:	89 45 f8             	mov    %eax,-0x8(%ebp)

  while(1) { 
    n++;
  1029b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1029b8:	05 01 00 00 00       	add    $0x1,%eax
  1029bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  1029c0:	e9 f0 ff ff ff       	jmp    1029b5 <task2+0x25>
  1029c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1029cc:	00 00 00 00 

001029d0 <task1>:
}

void task1() {
  1029d0:	55                   	push   %ebp
  1029d1:	89 e5                	mov    %esp,%ebp
  1029d3:	83 ec 18             	sub    $0x18,%esp
  1029d6:	8d 05 9a 52 10 00    	lea    0x10529a,%eax
  uint32_t n = 0;
  1029dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  
  kprintf("1111: %x \n", n);
  1029e3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1029e6:	89 04 24             	mov    %eax,(%esp)
  1029e9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029ed:	e8 ae f9 ff ff       	call   1023a0 <kprintf>
  1029f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while(1) { 
    n++;
  1029f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1029f8:	05 01 00 00 00       	add    $0x1,%eax
  1029fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  }
  102a00:	e9 f0 ff ff ff       	jmp    1029f5 <task1+0x25>
  102a05:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102a0c:	00 00 00 00 

00102a10 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  102a10:	55                   	push   %ebp
  102a11:	89 e5                	mov    %esp,%ebp
  102a13:	53                   	push   %ebx
  102a14:	57                   	push   %edi
  102a15:	56                   	push   %esi
  102a16:	83 ec 6c             	sub    $0x6c,%esp
  102a19:	8b 45 08             	mov    0x8(%ebp),%eax
  102a1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  102a1f:	e8 ec e6 ff ff       	call   101110 <vmm_init>
  102a24:	b9 00 00 00 00       	mov    $0x0,%ecx
  102a29:	89 45 ec             	mov    %eax,-0x14(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  102a2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a2f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102a32:	89 04 24             	mov    %eax,(%esp)
  102a35:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a39:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102a40:	00 
  102a41:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  102a44:	e8 b7 e4 ff ff       	call   100f00 <map_address_active>
  102a49:	b8 00 00 00 00       	mov    $0x0,%eax
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
  102a4e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102a51:	8b 49 18             	mov    0x18(%ecx),%ecx
  102a54:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102a57:	8b 52 18             	mov    0x18(%edx),%edx
  102a5a:	89 0c 24             	mov    %ecx,(%esp)
  102a5d:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a61:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102a68:	00 
  102a69:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102a6c:	e8 8f e4 ff ff       	call   100f00 <map_address_active>
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  102a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a74:	8b 00                	mov    (%eax),%eax
  102a76:	25 08 00 00 00       	and    $0x8,%eax
  102a7b:	3d 00 00 00 00       	cmp    $0x0,%eax
  102a80:	0f 84 ff 01 00 00    	je     102c85 <kernel_main+0x275>
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102a86:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  102a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102a90:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102a93:	3b 41 14             	cmp    0x14(%ecx),%eax
  102a96:	0f 83 df 01 00 00    	jae    102c7b <kernel_main+0x26b>
  102a9c:	8d 05 a5 52 10 00    	lea    0x1052a5,%eax
	    kprintf("Loading mod at %x \n", mb_info->mi_mods_addr[i].start);
  102aa2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102aa5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102aa8:	8b 52 18             	mov    0x18(%edx),%edx
  102aab:	c1 e1 04             	shl    $0x4,%ecx
  102aae:	01 ca                	add    %ecx,%edx
  102ab0:	8b 0a                	mov    (%edx),%ecx
  102ab2:	89 04 24             	mov    %eax,(%esp)
  102ab5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102ab9:	e8 e2 f8 ff ff       	call   1023a0 <kprintf>
	    
	    uint32_t elf_mod_pdir = vmm_create_pagedir();
  102abe:	89 45 bc             	mov    %eax,-0x44(%ebp)
  102ac1:	e8 fa e0 ff ff       	call   100bc0 <vmm_create_pagedir>
  102ac6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    void* elf_mod_entry = 0;
  102ac9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	    
	    vmm_activate_pagedir(elf_mod_pdir);
  102ad0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102ad3:	89 04 24             	mov    %eax,(%esp)
  102ad6:	e8 15 e6 ff ff       	call   1010f0 <vmm_activate_pagedir>
  102adb:	b8 00 00 00 00       	mov    $0x0,%eax
	    
	    vmm_map_range(mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].start, mb_info->mi_mods_addr[i].end - mb_info->mi_mods_addr[i].start, 0);
  102ae0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102ae3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102ae6:	8b 52 18             	mov    0x18(%edx),%edx
  102ae9:	c1 e1 04             	shl    $0x4,%ecx
  102aec:	01 ca                	add    %ecx,%edx
  102aee:	8b 0a                	mov    (%edx),%ecx
  102af0:	8b 55 e8             	mov    -0x18(%ebp),%edx
  102af3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  102af6:	8b 76 18             	mov    0x18(%esi),%esi
  102af9:	c1 e2 04             	shl    $0x4,%edx
  102afc:	01 d6                	add    %edx,%esi
  102afe:	8b 16                	mov    (%esi),%edx
  102b00:	8b 75 e8             	mov    -0x18(%ebp),%esi
  102b03:	8b 7d f0             	mov    -0x10(%ebp),%edi
  102b06:	8b 7f 18             	mov    0x18(%edi),%edi
  102b09:	c1 e6 04             	shl    $0x4,%esi
  102b0c:	01 f7                	add    %esi,%edi
  102b0e:	8b 77 04             	mov    0x4(%edi),%esi
  102b11:	8b 7d e8             	mov    -0x18(%ebp),%edi
  102b14:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  102b17:	8b 5b 18             	mov    0x18(%ebx),%ebx
  102b1a:	c1 e7 04             	shl    $0x4,%edi
  102b1d:	01 fb                	add    %edi,%ebx
  102b1f:	8b 3b                	mov    (%ebx),%edi
  102b21:	29 fe                	sub    %edi,%esi
  102b23:	89 0c 24             	mov    %ecx,(%esp)
  102b26:	89 54 24 04          	mov    %edx,0x4(%esp)
  102b2a:	89 74 24 08          	mov    %esi,0x8(%esp)
  102b2e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102b35:	00 
  102b36:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102b39:	e8 22 e3 ff ff       	call   100e60 <vmm_map_range>
      
      struct elf_header* header = mb_info->mi_mods_addr[i].start;
  102b3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102b41:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102b44:	8b 49 18             	mov    0x18(%ecx),%ecx
  102b47:	c1 e0 04             	shl    $0x4,%eax
  102b4a:	01 c1                	add    %eax,%ecx
  102b4c:	8b 01                	mov    (%ecx),%eax
  102b4e:	89 45 dc             	mov    %eax,-0x24(%ebp)
      struct elf_program_header* ph;

      /* Ist es ueberhaupt eine ELF-Datei? */
      if (header->magic != ELF_MAGIC) {
  102b51:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102b54:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  102b5a:	0f 84 16 00 00 00    	je     102b76 <kernel_main+0x166>
  102b60:	8d 05 b9 52 10 00    	lea    0x1052b9,%eax
        kprintf("Invalid ELF-Magic!\n");
  102b66:	89 04 24             	mov    %eax,(%esp)
  102b69:	e8 32 f8 ff ff       	call   1023a0 <kprintf>
        continue;
  102b6e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  102b71:	e9 f5 00 00 00       	jmp    102c6b <kernel_main+0x25b>
      }
      
      elf_mod_entry = (void*)( header->entry );
  102b76:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102b79:	8b 40 18             	mov    0x18(%eax),%eax
  102b7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  102b7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102b82:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102b85:	03 41 1c             	add    0x1c(%ecx),%eax
  102b88:	89 45 d8             	mov    %eax,-0x28(%ebp)
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102b8b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102b92:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102b95:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102b98:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  102b9c:	39 c8                	cmp    %ecx,%eax
  102b9e:	0f 83 a7 00 00 00    	jae    102c4b <kernel_main+0x23b>
        void* dest = (void*) ph->virt_addr;
  102ba4:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102ba7:	8b 40 08             	mov    0x8(%eax),%eax
  102baa:	89 45 d0             	mov    %eax,-0x30(%ebp)
        void* src = ((char*) header) + ph->offset;
  102bad:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102bb0:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102bb3:	03 41 04             	add    0x4(%ecx),%eax
  102bb6:	89 45 cc             	mov    %eax,-0x34(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  102bb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102bbc:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  102bc2:	0f 84 05 00 00 00    	je     102bcd <kernel_main+0x1bd>
            continue;
  102bc8:	e9 63 00 00 00       	jmp    102c30 <kernel_main+0x220>
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  102bcd:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  102bd4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102bd7:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102bda:	3b 41 14             	cmp    0x14(%ecx),%eax
  102bdd:	0f 83 31 00 00 00    	jae    102c14 <kernel_main+0x204>
  102be3:	b8 00 00 00 00       	mov    $0x0,%eax
          vmm_alloc_addr(dest + offset, 0);
  102be8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  102beb:	03 4d c8             	add    -0x38(%ebp),%ecx
  102bee:	89 0c 24             	mov    %ecx,(%esp)
  102bf1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102bf8:	00 
  102bf9:	89 45 b0             	mov    %eax,-0x50(%ebp)
  102bfc:	e8 bf e3 ff ff       	call   100fc0 <vmm_alloc_addr>
  102c01:	89 45 ac             	mov    %eax,-0x54(%ebp)
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }
 
        for(uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  102c04:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102c07:	05 00 10 00 00       	add    $0x1000,%eax
  102c0c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102c0f:	e9 c0 ff ff ff       	jmp    102bd4 <kernel_main+0x1c4>
          vmm_alloc_addr(dest + offset, 0);
        }
        
        memcpy(dest, src, ph->file_size);
  102c14:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102c17:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  102c1a:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102c1d:	8b 52 10             	mov    0x10(%edx),%edx
  102c20:	89 04 24             	mov    %eax,(%esp)
  102c23:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c27:	89 54 24 08          	mov    %edx,0x8(%esp)
  102c2b:	e8 30 fc ff ff       	call   102860 <memcpy>
      }
      
      elf_mod_entry = (void*)( header->entry );
      
      ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
      for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  102c30:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102c33:	05 01 00 00 00       	add    $0x1,%eax
  102c38:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102c3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102c3e:	05 20 00 00 00       	add    $0x20,%eax
  102c43:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102c46:	e9 47 ff ff ff       	jmp    102b92 <kernel_main+0x182>
        }
        
        memcpy(dest, src, ph->file_size);
      }
      
      vmm_activate_pagedir(kernel_init_pdir);
  102c4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c4e:	89 04 24             	mov    %eax,(%esp)
  102c51:	e8 9a e4 ff ff       	call   1010f0 <vmm_activate_pagedir>
      
      init_task(elf_mod_pdir, elf_mod_entry);
  102c56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102c59:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  102c5c:	89 04 24             	mov    %eax,(%esp)
  102c5f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c63:	e8 b8 07 00 00       	call   103420 <init_task>
  102c68:	89 45 a8             	mov    %eax,-0x58(%ebp)
	
  map_address_active((uint32_t) mb_info, (uint32_t) mb_info, 0);
  map_address_active((uint32_t) mb_info->mi_mods_addr, (uint32_t) mb_info->mi_mods_addr, 0);
	
  if(mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
	  for(uint32_t i = 0; i < mb_info->mi_mods_count; i++) {
  102c6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102c6e:	05 01 00 00 00       	add    $0x1,%eax
  102c73:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102c76:	e9 12 fe ff ff       	jmp    102a8d <kernel_main+0x7d>
      vmm_activate_pagedir(kernel_init_pdir);
      
      init_task(elf_mod_pdir, elf_mod_entry);
	  }
	
	  enable_scheduling();
  102c7b:	e8 00 04 00 00       	call   103080 <enable_scheduling>
	}
  102c80:	e9 11 00 00 00       	jmp    102c96 <kernel_main+0x286>
  102c85:	8d 05 cd 52 10 00    	lea    0x1052cd,%eax
	else
	{
	  kprintf("No Modules loadable. Microkernel shutting down.\nThank you for using this pointless version of mikrOS\n");
  102c8b:	89 04 24             	mov    %eax,(%esp)
  102c8e:	e8 0d f7 ff ff       	call   1023a0 <kprintf>
  102c93:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	}

	while(1) {  }
  102c96:	e9 00 00 00 00       	jmp    102c9b <kernel_main+0x28b>
  102c9b:	e9 fb ff ff ff       	jmp    102c9b <kernel_main+0x28b>

00102ca0 <intr_stub_0>:
  102ca0:	6a 00                	push   $0x0
  102ca2:	6a 00                	push   $0x0
  102ca4:	e9 eb 00 00 00       	jmp    102d94 <intr_common_handler>

00102ca9 <intr_stub_1>:
  102ca9:	6a 00                	push   $0x0
  102cab:	6a 01                	push   $0x1
  102cad:	e9 e2 00 00 00       	jmp    102d94 <intr_common_handler>

00102cb2 <intr_stub_2>:
  102cb2:	6a 00                	push   $0x0
  102cb4:	6a 02                	push   $0x2
  102cb6:	e9 d9 00 00 00       	jmp    102d94 <intr_common_handler>

00102cbb <intr_stub_3>:
  102cbb:	6a 00                	push   $0x0
  102cbd:	6a 03                	push   $0x3
  102cbf:	e9 d0 00 00 00       	jmp    102d94 <intr_common_handler>

00102cc4 <intr_stub_4>:
  102cc4:	6a 00                	push   $0x0
  102cc6:	6a 04                	push   $0x4
  102cc8:	e9 c7 00 00 00       	jmp    102d94 <intr_common_handler>

00102ccd <intr_stub_5>:
  102ccd:	6a 00                	push   $0x0
  102ccf:	6a 05                	push   $0x5
  102cd1:	e9 be 00 00 00       	jmp    102d94 <intr_common_handler>

00102cd6 <intr_stub_6>:
  102cd6:	6a 00                	push   $0x0
  102cd8:	6a 06                	push   $0x6
  102cda:	e9 b5 00 00 00       	jmp    102d94 <intr_common_handler>

00102cdf <intr_stub_7>:
  102cdf:	6a 00                	push   $0x0
  102ce1:	6a 07                	push   $0x7
  102ce3:	e9 ac 00 00 00       	jmp    102d94 <intr_common_handler>

00102ce8 <intr_stub_8>:
  102ce8:	6a 08                	push   $0x8
  102cea:	e9 a5 00 00 00       	jmp    102d94 <intr_common_handler>

00102cef <intr_stub_9>:
  102cef:	6a 00                	push   $0x0
  102cf1:	6a 09                	push   $0x9
  102cf3:	e9 9c 00 00 00       	jmp    102d94 <intr_common_handler>

00102cf8 <intr_stub_10>:
  102cf8:	6a 0a                	push   $0xa
  102cfa:	e9 95 00 00 00       	jmp    102d94 <intr_common_handler>

00102cff <intr_stub_11>:
  102cff:	6a 0b                	push   $0xb
  102d01:	e9 8e 00 00 00       	jmp    102d94 <intr_common_handler>

00102d06 <intr_stub_12>:
  102d06:	6a 0c                	push   $0xc
  102d08:	e9 87 00 00 00       	jmp    102d94 <intr_common_handler>

00102d0d <intr_stub_13>:
  102d0d:	6a 0d                	push   $0xd
  102d0f:	e9 80 00 00 00       	jmp    102d94 <intr_common_handler>

00102d14 <intr_stub_14>:
  102d14:	6a 0e                	push   $0xe
  102d16:	eb 7c                	jmp    102d94 <intr_common_handler>

00102d18 <intr_stub_15>:
  102d18:	6a 00                	push   $0x0
  102d1a:	6a 0f                	push   $0xf
  102d1c:	eb 76                	jmp    102d94 <intr_common_handler>

00102d1e <intr_stub_16>:
  102d1e:	6a 00                	push   $0x0
  102d20:	6a 10                	push   $0x10
  102d22:	eb 70                	jmp    102d94 <intr_common_handler>

00102d24 <intr_stub_17>:
  102d24:	6a 11                	push   $0x11
  102d26:	eb 6c                	jmp    102d94 <intr_common_handler>

00102d28 <intr_stub_18>:
  102d28:	6a 00                	push   $0x0
  102d2a:	6a 12                	push   $0x12
  102d2c:	eb 66                	jmp    102d94 <intr_common_handler>

00102d2e <intr_stub_32>:
  102d2e:	6a 00                	push   $0x0
  102d30:	6a 20                	push   $0x20
  102d32:	eb 60                	jmp    102d94 <intr_common_handler>

00102d34 <intr_stub_33>:
  102d34:	6a 00                	push   $0x0
  102d36:	6a 21                	push   $0x21
  102d38:	eb 5a                	jmp    102d94 <intr_common_handler>

00102d3a <intr_stub_34>:
  102d3a:	6a 00                	push   $0x0
  102d3c:	6a 22                	push   $0x22
  102d3e:	eb 54                	jmp    102d94 <intr_common_handler>

00102d40 <intr_stub_35>:
  102d40:	6a 00                	push   $0x0
  102d42:	6a 23                	push   $0x23
  102d44:	eb 4e                	jmp    102d94 <intr_common_handler>

00102d46 <intr_stub_36>:
  102d46:	6a 00                	push   $0x0
  102d48:	6a 24                	push   $0x24
  102d4a:	eb 48                	jmp    102d94 <intr_common_handler>

00102d4c <intr_stub_37>:
  102d4c:	6a 00                	push   $0x0
  102d4e:	6a 25                	push   $0x25
  102d50:	eb 42                	jmp    102d94 <intr_common_handler>

00102d52 <intr_stub_38>:
  102d52:	6a 00                	push   $0x0
  102d54:	6a 26                	push   $0x26
  102d56:	eb 3c                	jmp    102d94 <intr_common_handler>

00102d58 <intr_stub_39>:
  102d58:	6a 00                	push   $0x0
  102d5a:	6a 27                	push   $0x27
  102d5c:	eb 36                	jmp    102d94 <intr_common_handler>

00102d5e <intr_stub_40>:
  102d5e:	6a 00                	push   $0x0
  102d60:	6a 28                	push   $0x28
  102d62:	eb 30                	jmp    102d94 <intr_common_handler>

00102d64 <intr_stub_41>:
  102d64:	6a 00                	push   $0x0
  102d66:	6a 29                	push   $0x29
  102d68:	eb 2a                	jmp    102d94 <intr_common_handler>

00102d6a <intr_stub_42>:
  102d6a:	6a 00                	push   $0x0
  102d6c:	6a 2a                	push   $0x2a
  102d6e:	eb 24                	jmp    102d94 <intr_common_handler>

00102d70 <intr_stub_43>:
  102d70:	6a 00                	push   $0x0
  102d72:	6a 2b                	push   $0x2b
  102d74:	eb 1e                	jmp    102d94 <intr_common_handler>

00102d76 <intr_stub_44>:
  102d76:	6a 00                	push   $0x0
  102d78:	6a 2c                	push   $0x2c
  102d7a:	eb 18                	jmp    102d94 <intr_common_handler>

00102d7c <intr_stub_45>:
  102d7c:	6a 00                	push   $0x0
  102d7e:	6a 2d                	push   $0x2d
  102d80:	eb 12                	jmp    102d94 <intr_common_handler>

00102d82 <intr_stub_46>:
  102d82:	6a 00                	push   $0x0
  102d84:	6a 2e                	push   $0x2e
  102d86:	eb 0c                	jmp    102d94 <intr_common_handler>

00102d88 <intr_stub_47>:
  102d88:	6a 00                	push   $0x0
  102d8a:	6a 2f                	push   $0x2f
  102d8c:	eb 06                	jmp    102d94 <intr_common_handler>

00102d8e <intr_stub_48>:
  102d8e:	6a 00                	push   $0x0
  102d90:	6a 30                	push   $0x30
  102d92:	eb 00                	jmp    102d94 <intr_common_handler>

00102d94 <intr_common_handler>:
  102d94:	55                   	push   %ebp
  102d95:	57                   	push   %edi
  102d96:	56                   	push   %esi
  102d97:	52                   	push   %edx
  102d98:	51                   	push   %ecx
  102d99:	53                   	push   %ebx
  102d9a:	50                   	push   %eax
  102d9b:	66 b8 10 00          	mov    $0x10,%ax
  102d9f:	66 8e d8             	mov    %ax,%ds
  102da2:	66 8e c0             	mov    %ax,%es
  102da5:	89 e0                	mov    %esp,%eax
  102da7:	bc 00 a0 10 00       	mov    $0x10a000,%esp
  102dac:	50                   	push   %eax
  102dad:	e8 8e f2 ff ff       	call   102040 <handle_interrupt>
  102db2:	89 c4                	mov    %eax,%esp
  102db4:	66 b8 23 00          	mov    $0x23,%ax
  102db8:	66 8e d8             	mov    %ax,%ds
  102dbb:	66 8e c0             	mov    %ax,%es
  102dbe:	58                   	pop    %eax
  102dbf:	5b                   	pop    %ebx
  102dc0:	59                   	pop    %ecx
  102dc1:	5a                   	pop    %edx
  102dc2:	5e                   	pop    %esi
  102dc3:	5f                   	pop    %edi
  102dc4:	5d                   	pop    %ebp
  102dc5:	83 c4 08             	add    $0x8,%esp
  102dc8:	cf                   	iret   
  102dc9:	66 90                	xchg   %ax,%ax
  102dcb:	66 90                	xchg   %ax,%ax
  102dcd:	66 90                	xchg   %ax,%ax
  102dcf:	90                   	nop

00102dd0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  102dd0:	55                   	push   %ebp
  102dd1:	89 e5                	mov    %esp,%ebp
	struct {
  102dd3:	83 ec 08             	sub    $0x8,%esp
  102dd6:	a1 2c 50 10 00       	mov    0x10502c,%eax
  102ddb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102dde:	66 8b 0d 30 50 10 00 	mov    0x105030,%cx
  102de5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
	asm volatile("lgdt %0" : : "m" (gdtp));
  102de9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  102ded:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  102df1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  102df4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  102df7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  102dfa:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  102dfd:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  102e00:	83 c4 08             	add    $0x8,%esp
  102e03:	5d                   	pop    %ebp
  102e04:	c3                   	ret    
  102e05:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102e0c:	00 00 00 00 

00102e10 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  102e10:	55                   	push   %ebp
  102e11:	89 e5                	mov    %esp,%ebp
  102e13:	56                   	push   %esi
  102e14:	83 ec 10             	sub    $0x10,%esp
  102e17:	8b 45 14             	mov    0x14(%ebp),%eax
  102e1a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  102e1d:	8b 55 0c             	mov    0xc(%ebp),%edx
  102e20:	8b 75 08             	mov    0x8(%ebp),%esi
  102e23:	89 75 f8             	mov    %esi,-0x8(%ebp)
  102e26:	89 55 f4             	mov    %edx,-0xc(%ebp)
  102e29:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102e2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    gdt[i] = limit & 0xffffLL;
  102e2f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  102e33:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102e36:	89 04 cd 30 b4 12 00 	mov    %eax,0x12b430(,%ecx,8)
  102e3d:	c7 04 cd 34 b4 12 00 	movl   $0x0,0x12b434(,%ecx,8)
  102e44:	00 00 00 00 
    gdt[i] |= (base & 0xffffffLL) << 16;
  102e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e4b:	25 ff ff ff 00       	and    $0xffffff,%eax
  102e50:	89 c1                	mov    %eax,%ecx
  102e52:	c1 e1 10             	shl    $0x10,%ecx
  102e55:	c1 e8 10             	shr    $0x10,%eax
  102e58:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102e5b:	8b 34 d5 34 b4 12 00 	mov    0x12b434(,%edx,8),%esi
  102e62:	09 f0                	or     %esi,%eax
  102e64:	8b 34 d5 30 b4 12 00 	mov    0x12b430(,%edx,8),%esi
  102e6b:	09 ce                	or     %ecx,%esi
  102e6d:	89 04 d5 34 b4 12 00 	mov    %eax,0x12b434(,%edx,8)
  102e74:	89 34 d5 30 b4 12 00 	mov    %esi,0x12b430(,%edx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  102e7b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  102e7f:	c1 e0 08             	shl    $0x8,%eax
  102e82:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102e85:	8b 14 cd 30 b4 12 00 	mov    0x12b430(,%ecx,8),%edx
  102e8c:	8b 34 cd 34 b4 12 00 	mov    0x12b434(,%ecx,8),%esi
  102e93:	09 c6                	or     %eax,%esi
  102e95:	89 14 cd 30 b4 12 00 	mov    %edx,0x12b430(,%ecx,8)
  102e9c:	89 34 cd 34 b4 12 00 	mov    %esi,0x12b434(,%ecx,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  102ea3:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  102ea7:	83 e0 0f             	and    $0xf,%eax
  102eaa:	c1 e0 10             	shl    $0x10,%eax
  102ead:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102eb0:	8b 14 cd 30 b4 12 00 	mov    0x12b430(,%ecx,8),%edx
  102eb7:	8b 34 cd 34 b4 12 00 	mov    0x12b434(,%ecx,8),%esi
  102ebe:	09 c6                	or     %eax,%esi
  102ec0:	89 14 cd 30 b4 12 00 	mov    %edx,0x12b430(,%ecx,8)
  102ec7:	89 34 cd 34 b4 12 00 	mov    %esi,0x12b434(,%ecx,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  102ece:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102ed1:	c1 e0 0c             	shl    $0xc,%eax
  102ed4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  102ed9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102edc:	8b 14 cd 30 b4 12 00 	mov    0x12b430(,%ecx,8),%edx
  102ee3:	8b 34 cd 34 b4 12 00 	mov    0x12b434(,%ecx,8),%esi
  102eea:	09 c6                	or     %eax,%esi
  102eec:	89 14 cd 30 b4 12 00 	mov    %edx,0x12b430(,%ecx,8)
  102ef3:	89 34 cd 34 b4 12 00 	mov    %esi,0x12b434(,%ecx,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  102efa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  102efe:	c1 e0 18             	shl    $0x18,%eax
  102f01:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102f04:	8b 14 cd 30 b4 12 00 	mov    0x12b430(,%ecx,8),%edx
  102f0b:	8b 34 cd 34 b4 12 00 	mov    0x12b434(,%ecx,8),%esi
  102f12:	09 c6                	or     %eax,%esi
  102f14:	89 14 cd 30 b4 12 00 	mov    %edx,0x12b430(,%ecx,8)
  102f1b:	89 34 cd 34 b4 12 00 	mov    %esi,0x12b434(,%ecx,8)
}
  102f22:	83 c4 10             	add    $0x10,%esp
  102f25:	5e                   	pop    %esi
  102f26:	5d                   	pop    %ebp
  102f27:	c3                   	ret    
  102f28:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  102f2f:	00 

00102f30 <init_gdt>:

void init_gdt(void)
{
  102f30:	55                   	push   %ebp
  102f31:	89 e5                	mov    %esp,%ebp
  102f33:	56                   	push   %esi
  102f34:	83 ec 54             	sub    $0x54,%esp
  102f37:	b8 00 00 00 00       	mov    $0x0,%eax
    set_gdt_entry(0, 0, 0, 0);
  102f3c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102f43:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f4a:	00 
  102f4b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102f52:	00 
  102f53:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102f5a:	00 
  102f5b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102f5e:	e8 ad fe ff ff       	call   102e10 <set_gdt_entry>
  102f63:	b8 01 00 00 00       	mov    $0x1,%eax
  102f68:	b9 00 00 00 00       	mov    $0x0,%ecx
  102f6d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102f72:	be 9a 0c 00 00       	mov    $0xc9a,%esi
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102f77:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  102f7e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102f85:	00 
  102f86:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102f8d:	00 
  102f8e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  102f95:	00 
  102f96:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102f99:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102f9c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102f9f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  102fa2:	e8 69 fe ff ff       	call   102e10 <set_gdt_entry>
  102fa7:	b8 02 00 00 00       	mov    $0x2,%eax
  102fac:	b9 00 00 00 00       	mov    $0x0,%ecx
  102fb1:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102fb6:	be 92 0c 00 00       	mov    $0xc92,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102fbb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  102fc2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102fc9:	00 
  102fca:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  102fd1:	00 
  102fd2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  102fd9:	00 
  102fda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102fdd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  102fe0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  102fe3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  102fe6:	e8 25 fe ff ff       	call   102e10 <set_gdt_entry>
  102feb:	b8 03 00 00 00       	mov    $0x3,%eax
  102ff0:	b9 00 00 00 00       	mov    $0x0,%ecx
  102ff5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  102ffa:	be fa 0c 00 00       	mov    $0xcfa,%esi
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  102fff:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  103006:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10300d:	00 
  10300e:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103015:	00 
  103016:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10301d:	00 
  10301e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  103021:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  103024:	89 55 cc             	mov    %edx,-0x34(%ebp)
  103027:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10302a:	e8 e1 fd ff ff       	call   102e10 <set_gdt_entry>
  10302f:	b8 04 00 00 00       	mov    $0x4,%eax
  103034:	b9 00 00 00 00       	mov    $0x0,%ecx
  103039:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10303e:	be f2 0c 00 00       	mov    $0xcf2,%esi
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  103043:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10304a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103051:	00 
  103052:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  103059:	00 
  10305a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  103061:	00 
  103062:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  103065:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  103068:	89 55 bc             	mov    %edx,-0x44(%ebp)
  10306b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  10306e:	e8 9d fd ff ff       	call   102e10 <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  103073:	e8 58 fd ff ff       	call   102dd0 <load_gdt>
}
  103078:	83 c4 54             	add    $0x54,%esp
  10307b:	5e                   	pop    %esi
  10307c:	5d                   	pop    %ebp
  10307d:	c3                   	ret    
  10307e:	66 90                	xchg   %ax,%ax

00103080 <enable_scheduling>:
struct cpu_state* current_pdir_cpu = (void*) STATIC_ALLOC_VADDR + 0x1000 - sizeof(struct cpu_state);
uint8_t* user_stack                = (void*) STATIC_ALLOC_VADDR + 0x1000;
uint32_t* next_pagedir             = (void*) STATIC_ALLOC_VADDR + 0x2000;
uint32_t* prev_pagedir             = (void*) STATIC_ALLOC_VADDR + 0x2004;

void enable_scheduling(void) {
  103080:	55                   	push   %ebp
  103081:	89 e5                	mov    %esp,%ebp
  sched_enabled = 1;
  103083:	c7 05 28 b4 10 00 01 	movl   $0x1,0x10b428
  10308a:	00 00 00 
}
  10308d:	5d                   	pop    %ebp
  10308e:	c3                   	ret    
  10308f:	90                   	nop

00103090 <scheduling_enabled>:

uint32_t scheduling_enabled(void) {
  103090:	55                   	push   %ebp
  103091:	89 e5                	mov    %esp,%ebp
  return sched_enabled;
  103093:	a1 28 b4 10 00       	mov    0x10b428,%eax
  103098:	5d                   	pop    %ebp
  103099:	c3                   	ret    
  10309a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001030a0 <schedule_exception>:
}

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  1030a0:	55                   	push   %ebp
  1030a1:	89 e5                	mov    %esp,%ebp
  1030a3:	83 ec 28             	sub    $0x28,%esp
  1030a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1030a9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(vmm_get_current_pagedir() == first_pagedir && *next_pagedir == 0) {
  1030ac:	e8 5f d6 ff ff       	call   100710 <vmm_get_current_pagedir>
  1030b1:	3b 05 24 b4 10 00    	cmp    0x10b424,%eax
  1030b7:	0f 85 2b 00 00 00    	jne    1030e8 <schedule_exception+0x48>
  1030bd:	a1 98 41 10 00       	mov    0x104198,%eax
  1030c2:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  1030c8:	0f 85 1a 00 00 00    	jne    1030e8 <schedule_exception+0x48>
  1030ce:	8d 05 33 53 10 00    	lea    0x105333,%eax
    //Only one process is running, which just crashed. Stop system.
    show_cod(cpu, "Last task crashed. Terminating kernel...");
  1030d4:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1030d7:	89 0c 24             	mov    %ecx,(%esp)
  1030da:	89 44 24 04          	mov    %eax,0x4(%esp)
  1030de:	e8 dd f0 ff ff       	call   1021c0 <show_cod>
  }
  1030e3:	e9 91 00 00 00       	jmp    103179 <schedule_exception+0xd9>
  1030e8:	b8 04 00 00 00       	mov    $0x4,%eax
  else
  {
    //Potential security leaks available in following code.
    setclr(0x04);
  1030ed:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1030f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1030f7:	e8 84 f2 ff ff       	call   102380 <setclr>
  1030fc:	8d 05 5c 53 10 00    	lea    0x10535c,%eax
    kprintf("\n Terminated task due to exception %x:%x \n", cpu->intr, cpu->error);
  103102:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103105:	8b 49 1c             	mov    0x1c(%ecx),%ecx
  103108:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10310b:	8b 52 20             	mov    0x20(%edx),%edx
  10310e:	89 04 24             	mov    %eax,(%esp)
  103111:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103115:	89 54 24 08          	mov    %edx,0x8(%esp)
  103119:	e8 82 f2 ff ff       	call   1023a0 <kprintf>
  10311e:	8d 0d ad 51 10 00    	lea    0x1051ad,%ecx
    kprintf("\n");
  103124:	89 0c 24             	mov    %ecx,(%esp)
  103127:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10312a:	e8 71 f2 ff ff       	call   1023a0 <kprintf>
    show_dump(cpu);
  10312f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103132:	89 0c 24             	mov    %ecx,(%esp)
  103135:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103138:	e8 f3 f0 ff ff       	call   102230 <show_dump>
  10313d:	b8 07 00 00 00       	mov    $0x7,%eax
    setclr(0x07);
  103142:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  103149:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10314c:	e8 2f f2 ff ff       	call   102380 <setclr>
  103151:	8d 05 87 53 10 00    	lea    0x105387,%eax
    show_cod(cpu, "Task crashed. Terminating kernel...");
  103157:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10315a:	89 0c 24             	mov    %ecx,(%esp)
  10315d:	89 44 24 04          	mov    %eax,0x4(%esp)
  103161:	e8 5a f0 ff ff       	call   1021c0 <show_cod>
    
    return terminate_current(cpu);
  103166:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103169:	89 04 24             	mov    %eax,(%esp)
  10316c:	e8 1f 00 00 00       	call   103190 <terminate_current>
  103171:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103174:	e9 06 00 00 00       	jmp    10317f <schedule_exception+0xdf>
  }
  return cpu;
  103179:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10317c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10317f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103182:	83 c4 28             	add    $0x28,%esp
  103185:	5d                   	pop    %ebp
  103186:	c3                   	ret    
  103187:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10318e:	00 00 

00103190 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  103190:	55                   	push   %ebp
  103191:	89 e5                	mov    %esp,%ebp
  103193:	83 ec 18             	sub    $0x18,%esp
  103196:	8b 45 08             	mov    0x8(%ebp),%eax
  103199:	89 45 fc             	mov    %eax,-0x4(%ebp)
  uint32_t next = *next_pagedir;
  10319c:	a1 98 41 10 00       	mov    0x104198,%eax
  1031a1:	8b 00                	mov    (%eax),%eax
  1031a3:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t prev = *prev_pagedir;
  1031a6:	a1 9c 41 10 00       	mov    0x10419c,%eax
  1031ab:	8b 00                	mov    (%eax),%eax
  1031ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  //TODO: free resources here
  
  if(vmm_get_current_pagedir() == first_pagedir) {
  1031b0:	e8 5b d5 ff ff       	call   100710 <vmm_get_current_pagedir>
  1031b5:	3b 05 24 b4 10 00    	cmp    0x10b424,%eax
  1031bb:	0f 85 08 00 00 00    	jne    1031c9 <terminate_current+0x39>
    first_pagedir = next;
  1031c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031c4:	a3 24 b4 10 00       	mov    %eax,0x10b424
  }
  
  if(next != 0) {
  1031c9:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1031d0:	0f 84 16 00 00 00    	je     1031ec <terminate_current+0x5c>
    vmm_activate_pagedir(next);
  1031d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031d9:	89 04 24             	mov    %eax,(%esp)
  1031dc:	e8 0f df ff ff       	call   1010f0 <vmm_activate_pagedir>
    *prev_pagedir = prev;
  1031e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031e4:	8b 0d 9c 41 10 00    	mov    0x10419c,%ecx
  1031ea:	89 01                	mov    %eax,(%ecx)
  }

  if(prev != 0) {
  1031ec:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1031f3:	0f 84 16 00 00 00    	je     10320f <terminate_current+0x7f>
    vmm_activate_pagedir(prev);
  1031f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031fc:	89 04 24             	mov    %eax,(%esp)
  1031ff:	e8 ec de ff ff       	call   1010f0 <vmm_activate_pagedir>
    *next_pagedir = next;
  103204:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103207:	8b 0d 98 41 10 00    	mov    0x104198,%ecx
  10320d:	89 01                	mov    %eax,(%ecx)
  }
  

  return schedule(cpu);
  10320f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103212:	89 04 24             	mov    %eax,(%esp)
  103215:	e8 06 00 00 00       	call   103220 <schedule>
  10321a:	83 c4 18             	add    $0x18,%esp
  10321d:	5d                   	pop    %ebp
  10321e:	c3                   	ret    
  10321f:	90                   	nop

00103220 <schedule>:
  
  return task_pagedir;
}

struct cpu_state* schedule(struct cpu_state* cpu)
{
  103220:	55                   	push   %ebp
  103221:	89 e5                	mov    %esp,%ebp
  103223:	83 ec 18             	sub    $0x18,%esp
  103226:	8b 45 08             	mov    0x8(%ebp),%eax
  103229:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t newCPU = 0;
  10322c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  
  if(first_pagedir != 0 && sched_enabled) {  
  103233:	81 3d 24 b4 10 00 00 	cmpl   $0x0,0x10b424
  10323a:	00 00 00 
  10323d:	0f 84 41 00 00 00    	je     103284 <schedule+0x64>
  103243:	81 3d 28 b4 10 00 00 	cmpl   $0x0,0x10b428
  10324a:	00 00 00 
  10324d:	0f 84 31 00 00 00    	je     103284 <schedule+0x64>
    uint32_t next = *next_pagedir;
  103253:	a1 98 41 10 00       	mov    0x104198,%eax
  103258:	8b 00                	mov    (%eax),%eax
  10325a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(next == 0) next = first_pagedir;
  10325d:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103264:	0f 85 08 00 00 00    	jne    103272 <schedule+0x52>
  10326a:	a1 24 b4 10 00       	mov    0x10b424,%eax
  10326f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    //*current_pdir_cpu = *cpu;
    
    newCPU = 1;            
  103272:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    vmm_activate_pagedir(next);
  103279:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10327c:	89 04 24             	mov    %eax,(%esp)
  10327f:	e8 6c de ff ff       	call   1010f0 <vmm_activate_pagedir>
  }
  
  if(newCPU) return current_pdir_cpu;
  103284:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10328b:	0f 84 0d 00 00 00    	je     10329e <schedule+0x7e>
  103291:	a1 90 41 10 00       	mov    0x104190,%eax
  103296:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103299:	e9 06 00 00 00       	jmp    1032a4 <schedule+0x84>
  return cpu;
  10329e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1032a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1032a7:	83 c4 18             	add    $0x18,%esp
  1032aa:	5d                   	pop    %ebp
  1032ab:	c3                   	ret    
  1032ac:	0f 1f 40 00          	nopl   0x0(%eax)

001032b0 <clone_task_state>:
  

  return schedule(cpu);
}

void clone_task_state(uint32_t task_pagedir) {
  1032b0:	55                   	push   %ebp
  1032b1:	89 e5                	mov    %esp,%ebp
  1032b3:	56                   	push   %esi
  1032b4:	83 ec 44             	sub    $0x44,%esp
  1032b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1032ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
  uint32_t old_pagedir = vmm_get_current_pagedir();
  1032bd:	e8 4e d4 ff ff       	call   100710 <vmm_get_current_pagedir>
  1032c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  
  uint32_t pdir_seg_paddr = 0;
  1032c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  uint32_t stack_seg_paddr = 0;
  1032cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  
  vmm_activate_pagedir(task_pagedir);
  1032d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032d6:	89 04 24             	mov    %eax,(%esp)
  1032d9:	e8 12 de ff ff       	call   1010f0 <vmm_activate_pagedir>
  
  pdir_seg_paddr = vmm_resolve((void*)((uint32_t)current_pdir_cpu & 0xFFFFF000));
  1032de:	a1 90 41 10 00       	mov    0x104190,%eax
  1032e3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1032e8:	89 04 24             	mov    %eax,(%esp)
  1032eb:	e8 40 db ff ff       	call   100e30 <vmm_resolve>
  1032f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  stack_seg_paddr = vmm_resolve((void*)((uint32_t)user_stack & 0xFFFFF000));
  1032f3:	a1 94 41 10 00       	mov    0x104194,%eax
  1032f8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1032fd:	89 04 24             	mov    %eax,(%esp)
  103300:	e8 2b db ff ff       	call   100e30 <vmm_resolve>
  103305:	89 45 ec             	mov    %eax,-0x14(%ebp)
  
  vmm_activate_pagedir(old_pagedir);
  103308:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10330b:	89 04 24             	mov    %eax,(%esp)
  10330e:	e8 dd dd ff ff       	call   1010f0 <vmm_activate_pagedir>
  103313:	b8 00 00 00 00       	mov    $0x0,%eax
  
  void* fvaddr = vmm_alloc(0);
  103318:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10331f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103322:	e8 59 d7 ff ff       	call   100a80 <vmm_alloc>
  103327:	89 45 e8             	mov    %eax,-0x18(%ebp)
  vmm_free(fvaddr); //trick to find a empty vaddr
  10332a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10332d:	89 04 24             	mov    %eax,(%esp)
  103330:	e8 1b dc ff ff       	call   100f50 <vmm_free>
  103335:	b8 00 02 00 00       	mov    $0x200,%eax
  
  map_address_active((uint32_t)fvaddr, pdir_seg_paddr, PT_ALLOCATABLE);
  10333a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10333d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103340:	89 0c 24             	mov    %ecx,(%esp)
  103343:	89 54 24 04          	mov    %edx,0x4(%esp)
  103347:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
  10334e:	00 
  10334f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  103352:	e8 a9 db ff ff       	call   100f00 <map_address_active>
  103357:	8d 05 ab 53 10 00    	lea    0x1053ab,%eax
  10335d:	b9 00 10 00 00       	mov    $0x1000,%ecx
  memcpy(fvaddr, (void*)((uint32_t)current_pdir_cpu & 0xFFFFF000), 4096);
  103362:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103365:	8b 35 90 41 10 00    	mov    0x104190,%esi
  10336b:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
  103371:	89 14 24             	mov    %edx,(%esp)
  103374:	89 74 24 04          	mov    %esi,0x4(%esp)
  103378:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  10337f:	00 
  103380:	89 45 dc             	mov    %eax,-0x24(%ebp)
  103383:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  103386:	e8 d5 f4 ff ff       	call   102860 <memcpy>
  
  //vmm_resolve(fvaddr);
  kprintf("test\n");
  10338b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10338e:	89 04 24             	mov    %eax,(%esp)
  103391:	e8 0a f0 ff ff       	call   1023a0 <kprintf>
  103396:	b9 00 02 00 00       	mov    $0x200,%ecx
  
  map_address_active((uint32_t)fvaddr, stack_seg_paddr, PT_ALLOCATABLE);
  10339b:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10339e:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1033a1:	89 14 24             	mov    %edx,(%esp)
  1033a4:	89 74 24 04          	mov    %esi,0x4(%esp)
  1033a8:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)
  1033af:	00 
  1033b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1033b3:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  1033b6:	e8 45 db ff ff       	call   100f00 <map_address_active>
  1033bb:	b8 00 10 00 00       	mov    $0x1000,%eax
  memcpy(fvaddr, (void*)((uint32_t)user_stack & 0xFFFFF000), 4096);
  1033c0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1033c3:	8b 15 94 41 10 00    	mov    0x104194,%edx
  1033c9:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  1033cf:	89 0c 24             	mov    %ecx,(%esp)
  1033d2:	89 54 24 04          	mov    %edx,0x4(%esp)
  1033d6:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  1033dd:	00 
  1033de:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1033e1:	e8 7a f4 ff ff       	call   102860 <memcpy>
  
  //vmm_resolve(fvaddr);
  
  vmm_unmap(fvaddr);
  1033e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1033e9:	89 04 24             	mov    %eax,(%esp)
  1033ec:	e8 7f d7 ff ff       	call   100b70 <vmm_unmap>
  1033f1:	8d 05 b1 53 10 00    	lea    0x1053b1,%eax
  
  //kprintf("fvaddr=%x \n", fvaddr);
  //kprintf("cpdcpu=%x \n", (void*)((uint32_t)current_pdir_cpu & 0xFFFFF000));
  kprintf("\npdir_seg_paddr=%x \n stack_seg_paddr=%x halt.", pdir_seg_paddr, stack_seg_paddr);
  1033f7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1033fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1033fd:	89 04 24             	mov    %eax,(%esp)
  103400:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103404:	89 54 24 08          	mov    %edx,0x8(%esp)
  103408:	e8 93 ef ff ff       	call   1023a0 <kprintf>
  10340d:	89 45 c8             	mov    %eax,-0x38(%ebp)
  
  while(1);
  103410:	e9 fb ff ff ff       	jmp    103410 <clone_task_state+0x160>
  103415:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10341c:	00 00 00 00 

00103420 <init_task>:
}

uint32_t init_task(uint32_t task_pagedir, void* entry)
{
  103420:	55                   	push   %ebp
  103421:	89 e5                	mov    %esp,%ebp
  103423:	57                   	push   %edi
  103424:	56                   	push   %esi
  103425:	81 ec b0 00 00 00    	sub    $0xb0,%esp
  10342b:	8b 45 0c             	mov    0xc(%ebp),%eax
  10342e:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103431:	8d 15 df 53 10 00    	lea    0x1053df,%edx
  103437:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10343a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf("Starting task at %x", entry);
  10343d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103440:	89 14 24             	mov    %edx,(%esp)
  103443:	89 44 24 04          	mov    %eax,0x4(%esp)
  103447:	e8 54 ef ff ff       	call   1023a0 <kprintf>

  uint32_t old_fpd = first_pagedir;
  10344c:	8b 0d 24 b4 10 00    	mov    0x10b424,%ecx
  103452:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  uint32_t old_pagedir = vmm_get_current_pagedir();
  103455:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  103458:	e8 b3 d2 ff ff       	call   100710 <vmm_get_current_pagedir>
  10345d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t task_next_pagedir = 0;    
  103460:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  
  if(first_pagedir == 0) {
  103467:	81 3d 24 b4 10 00 00 	cmpl   $0x0,0x10b424
  10346e:	00 00 00 
  103471:	0f 85 0d 00 00 00    	jne    103484 <init_task+0x64>
    first_pagedir = task_pagedir;
  103477:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10347a:	a3 24 b4 10 00       	mov    %eax,0x10b424
  }
  10347f:	e9 26 00 00 00       	jmp    1034aa <init_task+0x8a>
  else
  {
    task_next_pagedir = first_pagedir;
  103484:	a1 24 b4 10 00       	mov    0x10b424,%eax
  103489:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    first_pagedir = task_pagedir;
  10348c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10348f:	a3 24 b4 10 00       	mov    %eax,0x10b424
    vmm_activate_pagedir(task_next_pagedir);
  103494:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103497:	89 04 24             	mov    %eax,(%esp)
  10349a:	e8 51 dc ff ff       	call   1010f0 <vmm_activate_pagedir>
    *prev_pagedir = task_pagedir;
  10349f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034a2:	8b 0d 9c 41 10 00    	mov    0x10419c,%ecx
  1034a8:	89 01                	mov    %eax,(%ecx)
  }
  
  vmm_activate_pagedir(task_pagedir);
  1034aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034ad:	89 04 24             	mov    %eax,(%esp)
  1034b0:	e8 3b dc ff ff       	call   1010f0 <vmm_activate_pagedir>
  1034b5:	b8 00 00 00 00       	mov    $0x0,%eax
  1034ba:	b9 04 00 00 00       	mov    $0x4,%ecx
  
  vmm_alloc_static(0x0000, PT_PUBLIC);
  1034bf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1034c6:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1034cd:	00 
  1034ce:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1034d1:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1034d4:	e8 77 db ff ff       	call   101050 <vmm_alloc_static>
  1034d9:	b9 00 10 00 00       	mov    $0x1000,%ecx
  1034de:	ba 04 00 00 00       	mov    $0x4,%edx
  vmm_alloc_static(0x1000, PT_PUBLIC);
  1034e3:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  1034ea:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1034f1:	00 
  1034f2:	89 45 98             	mov    %eax,-0x68(%ebp)
  1034f5:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  1034f8:	89 55 90             	mov    %edx,-0x70(%ebp)
  1034fb:	e8 50 db ff ff       	call   101050 <vmm_alloc_static>
  103500:	b9 00 20 00 00       	mov    $0x2000,%ecx
  103505:	ba 00 00 00 00       	mov    $0x0,%edx
  vmm_alloc_static(0x2000, 0);
  10350a:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  103511:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103518:	00 
  103519:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10351c:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  10351f:	89 55 84             	mov    %edx,-0x7c(%ebp)
  103522:	e8 29 db ff ff       	call   101050 <vmm_alloc_static>
  103527:	b9 38 00 00 00       	mov    $0x38,%ecx
  10352c:	8d 55 a8             	lea    -0x58(%ebp),%edx
  
  *next_pagedir = task_next_pagedir;
  10352f:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  103532:	8b 3d 98 41 10 00    	mov    0x104198,%edi
  103538:	89 37                	mov    %esi,(%edi)

  struct cpu_state new_state = {
  10353a:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
  103541:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  103548:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  10354f:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  103556:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10355d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  103564:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  10356b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  103572:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  103579:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10357c:	89 75 cc             	mov    %esi,-0x34(%ebp)
  10357f:	c7 45 d0 1b 00 00 00 	movl   $0x1b,-0x30(%ebp)
  103586:	c7 45 d4 02 02 00 00 	movl   $0x202,-0x2c(%ebp)
  10358d:	8b 35 94 41 10 00    	mov    0x104194,%esi
  103593:	81 c6 00 10 00 00    	add    $0x1000,%esi
  103599:	89 75 d8             	mov    %esi,-0x28(%ebp)
  10359c:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%ebp)
      .ss  = 0x20 | 0x03,
      
      .eflags = 0x202,
  };
      
  *current_pdir_cpu = new_state;
  1035a3:	8b 35 90 41 10 00    	mov    0x104190,%esi
  1035a9:	89 34 24             	mov    %esi,(%esp)
  1035ac:	89 54 24 04          	mov    %edx,0x4(%esp)
  1035b0:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1035b7:	00 
  1035b8:	89 45 80             	mov    %eax,-0x80(%ebp)
  1035bb:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  1035c1:	e8 9a f2 ff ff       	call   102860 <memcpy>
  
  vmm_activate_pagedir(old_pagedir);
  1035c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1035c9:	89 04 24             	mov    %eax,(%esp)
  1035cc:	e8 1f db ff ff       	call   1010f0 <vmm_activate_pagedir>
  
  if(old_fpd == 0) {
  1035d1:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  1035d8:	0f 85 9c 00 00 00    	jne    10367a <init_task+0x25a>
  1035de:	b8 00 00 00 00       	mov    $0x0,%eax
  1035e3:	b9 04 00 00 00       	mov    $0x4,%ecx
    vmm_alloc_static(0x0000, PT_PUBLIC);
  1035e8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1035ef:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1035f6:	00 
  1035f7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  1035fd:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
  103603:	e8 48 da ff ff       	call   101050 <vmm_alloc_static>
  103608:	b9 00 10 00 00       	mov    $0x1000,%ecx
  10360d:	ba 04 00 00 00       	mov    $0x4,%edx
    vmm_alloc_static(0x1000, PT_PUBLIC);
  103612:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  103619:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  103620:	00 
  103621:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  103627:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  10362d:	89 95 68 ff ff ff    	mov    %edx,-0x98(%ebp)
  103633:	e8 18 da ff ff       	call   101050 <vmm_alloc_static>
  103638:	b9 00 20 00 00       	mov    $0x2000,%ecx
  10363d:	ba 00 00 00 00       	mov    $0x0,%edx
    vmm_alloc_static(0x2000, 0);
  103642:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
  103649:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103650:	00 
  103651:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  103657:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  10365d:	89 95 5c ff ff ff    	mov    %edx,-0xa4(%ebp)
  103663:	e8 e8 d9 ff ff       	call   101050 <vmm_alloc_static>
    *next_pagedir = 0;
  103668:	8b 0d 98 41 10 00    	mov    0x104198,%ecx
  10366e:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
  103674:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  }
  
  return task_pagedir;
  10367a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10367d:	81 c4 b0 00 00 00    	add    $0xb0,%esp
  103683:	5e                   	pop    %esi
  103684:	5f                   	pop    %edi
  103685:	5d                   	pop    %ebp
  103686:	c3                   	ret    
