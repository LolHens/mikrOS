
kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <load_gdt-0xc>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 55                	in     $0x55,%al

0010000c <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];
 
void load_gdt() {
  10000c:	55                   	push   %ebp
  10000d:	89 e5                	mov    %esp,%ebp
  10000f:	83 ec 10             	sub    $0x10,%esp
		  uint16_t limit;
		  void* pointer;
	} __attribute__((packed)) gdtp = {
		  .limit = GDT_ENTRIES * 8 - 1,
		  .pointer = gdt,
	};
  100012:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
  100018:	c7 45 fc 40 64 10 00 	movl   $0x106440,-0x4(%ebp)
	asm volatile("lgdt %0" : : "m" (gdtp));
  10001f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

	asm ("mov $0x10, %ax");
  100023:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100027:	8e d8                	mov    %eax,%ds
	asm ("mov %ax, %es");
  100029:	8e c0                	mov    %eax,%es
	asm ("mov %ax, %fs");
  10002b:	8e e0                	mov    %eax,%fs
	asm ("mov %ax, %gs");
  10002d:	8e e8                	mov    %eax,%gs
	asm ("mov %ax, %ss");
  10002f:	8e d0                	mov    %eax,%ss
	asm ("ljmp $0x8, $.1");
  100031:	ea 38 00 10 00 08 00 	ljmp   $0x8,$0x100038

00100038 <.1>:
	asm (".1:");
}
  100038:	c9                   	leave  
  100039:	c3                   	ret    

0010003a <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags)
{
  10003a:	55                   	push   %ebp
  10003b:	89 e5                	mov    %esp,%ebp
  10003d:	57                   	push   %edi
  10003e:	56                   	push   %esi
  10003f:	53                   	push   %ebx
  100040:	83 ec 4c             	sub    $0x4c,%esp
    gdt[i] = limit & 0xffffLL;
  100043:	8b 45 08             	mov    0x8(%ebp),%eax
  100046:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100049:	8b 45 10             	mov    0x10(%ebp),%eax
  10004c:	ba 00 00 00 00       	mov    $0x0,%edx
  100051:	0f b7 c8             	movzwl %ax,%ecx
  100054:	89 d3                	mov    %edx,%ebx
  100056:	83 e3 00             	and    $0x0,%ebx
  100059:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10005c:	89 0c d5 40 64 10 00 	mov    %ecx,0x106440(,%edx,8)
  100063:	89 1c d5 44 64 10 00 	mov    %ebx,0x106444(,%edx,8)
    gdt[i] |= (base & 0xffffffLL) << 16;
  10006a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10006d:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100070:	8b 45 08             	mov    0x8(%ebp),%eax
  100073:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  10007a:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100081:	8b 45 0c             	mov    0xc(%ebp),%eax
  100084:	ba 00 00 00 00       	mov    $0x0,%edx
  100089:	89 c6                	mov    %eax,%esi
  10008b:	81 e6 ff ff ff 00    	and    $0xffffff,%esi
  100091:	89 d7                	mov    %edx,%edi
  100093:	83 e7 00             	and    $0x0,%edi
  100096:	89 f0                	mov    %esi,%eax
  100098:	89 fa                	mov    %edi,%edx
  10009a:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  10009e:	c1 e0 10             	shl    $0x10,%eax
  1000a1:	89 ce                	mov    %ecx,%esi
  1000a3:	09 c6                	or     %eax,%esi
  1000a5:	89 75 b0             	mov    %esi,-0x50(%ebp)
  1000a8:	89 df                	mov    %ebx,%edi
  1000aa:	09 d7                	or     %edx,%edi
  1000ac:	89 7d b4             	mov    %edi,-0x4c(%ebp)
  1000af:	8b 45 b0             	mov    -0x50(%ebp),%eax
  1000b2:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1000b5:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  1000b8:	89 04 cd 40 64 10 00 	mov    %eax,0x106440(,%ecx,8)
  1000bf:	89 14 cd 44 64 10 00 	mov    %edx,0x106444(,%ecx,8)
    gdt[i] |= (flags & 0xffLL) << 40;
  1000c6:	8b 75 08             	mov    0x8(%ebp),%esi
  1000c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1000cc:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  1000d3:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  1000da:	8b 45 14             	mov    0x14(%ebp),%eax
  1000dd:	89 c2                	mov    %eax,%edx
  1000df:	c1 fa 1f             	sar    $0x1f,%edx
  1000e2:	0f b6 f8             	movzbl %al,%edi
  1000e5:	89 7d b8             	mov    %edi,-0x48(%ebp)
  1000e8:	89 d7                	mov    %edx,%edi
  1000ea:	83 e7 00             	and    $0x0,%edi
  1000ed:	89 7d bc             	mov    %edi,-0x44(%ebp)
  1000f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1000f3:	8b 55 bc             	mov    -0x44(%ebp),%edx
  1000f6:	89 c2                	mov    %eax,%edx
  1000f8:	b8 00 00 00 00       	mov    $0x0,%eax
  1000fd:	c1 e2 08             	shl    $0x8,%edx
  100100:	89 cf                	mov    %ecx,%edi
  100102:	09 c7                	or     %eax,%edi
  100104:	89 7d c0             	mov    %edi,-0x40(%ebp)
  100107:	89 df                	mov    %ebx,%edi
  100109:	09 d7                	or     %edx,%edi
  10010b:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  10010e:	8b 45 c0             	mov    -0x40(%ebp),%eax
  100111:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  100114:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  10011b:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100122:	8b 75 08             	mov    0x8(%ebp),%esi
  100125:	8b 45 08             	mov    0x8(%ebp),%eax
  100128:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  10012f:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100136:	8b 45 10             	mov    0x10(%ebp),%eax
  100139:	c1 e8 10             	shr    $0x10,%eax
  10013c:	ba 00 00 00 00       	mov    $0x0,%edx
  100141:	89 c7                	mov    %eax,%edi
  100143:	83 e7 0f             	and    $0xf,%edi
  100146:	89 7d c8             	mov    %edi,-0x38(%ebp)
  100149:	89 d7                	mov    %edx,%edi
  10014b:	83 e7 00             	and    $0x0,%edi
  10014e:	89 7d cc             	mov    %edi,-0x34(%ebp)
  100151:	8b 45 c8             	mov    -0x38(%ebp),%eax
  100154:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100157:	89 c2                	mov    %eax,%edx
  100159:	b8 00 00 00 00       	mov    $0x0,%eax
  10015e:	c1 e2 10             	shl    $0x10,%edx
  100161:	89 cf                	mov    %ecx,%edi
  100163:	09 c7                	or     %eax,%edi
  100165:	89 7d d0             	mov    %edi,-0x30(%ebp)
  100168:	89 df                	mov    %ebx,%edi
  10016a:	09 d7                	or     %edx,%edi
  10016c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  10016f:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100172:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100175:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  10017c:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((flags >> 8 )& 0xffLL) << 52;
  100183:	8b 75 08             	mov    0x8(%ebp),%esi
  100186:	8b 45 08             	mov    0x8(%ebp),%eax
  100189:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  100190:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  100197:	8b 45 14             	mov    0x14(%ebp),%eax
  10019a:	c1 f8 08             	sar    $0x8,%eax
  10019d:	89 c2                	mov    %eax,%edx
  10019f:	c1 fa 1f             	sar    $0x1f,%edx
  1001a2:	0f b6 f8             	movzbl %al,%edi
  1001a5:	89 7d d8             	mov    %edi,-0x28(%ebp)
  1001a8:	89 d7                	mov    %edx,%edi
  1001aa:	83 e7 00             	and    $0x0,%edi
  1001ad:	89 7d dc             	mov    %edi,-0x24(%ebp)
  1001b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1001b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1001b6:	89 c2                	mov    %eax,%edx
  1001b8:	b8 00 00 00 00       	mov    $0x0,%eax
  1001bd:	c1 e2 14             	shl    $0x14,%edx
  1001c0:	89 cf                	mov    %ecx,%edi
  1001c2:	09 c7                	or     %eax,%edi
  1001c4:	89 7d e0             	mov    %edi,-0x20(%ebp)
  1001c7:	89 df                	mov    %ebx,%edi
  1001c9:	09 d7                	or     %edx,%edi
  1001cb:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  1001ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1001d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1001d4:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  1001db:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
    gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  1001e2:	8b 75 08             	mov    0x8(%ebp),%esi
  1001e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1001e8:	8b 0c c5 40 64 10 00 	mov    0x106440(,%eax,8),%ecx
  1001ef:	8b 1c c5 44 64 10 00 	mov    0x106444(,%eax,8),%ebx
  1001f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1001f9:	c1 e8 18             	shr    $0x18,%eax
  1001fc:	ba 00 00 00 00       	mov    $0x0,%edx
  100201:	89 c2                	mov    %eax,%edx
  100203:	b8 00 00 00 00       	mov    $0x0,%eax
  100208:	c1 e2 18             	shl    $0x18,%edx
  10020b:	89 cf                	mov    %ecx,%edi
  10020d:	09 c7                	or     %eax,%edi
  10020f:	89 7d e8             	mov    %edi,-0x18(%ebp)
  100212:	89 df                	mov    %ebx,%edi
  100214:	09 d7                	or     %edx,%edi
  100216:	89 7d ec             	mov    %edi,-0x14(%ebp)
  100219:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10021c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10021f:	89 04 f5 40 64 10 00 	mov    %eax,0x106440(,%esi,8)
  100226:	89 14 f5 44 64 10 00 	mov    %edx,0x106444(,%esi,8)
}
  10022d:	83 c4 4c             	add    $0x4c,%esp
  100230:	5b                   	pop    %ebx
  100231:	5e                   	pop    %esi
  100232:	5f                   	pop    %edi
  100233:	5d                   	pop    %ebp
  100234:	c3                   	ret    

00100235 <init_gdt>:

void init_gdt(void)
{
  100235:	55                   	push   %ebp
  100236:	89 e5                	mov    %esp,%ebp
  100238:	83 ec 10             	sub    $0x10,%esp
    set_gdt_entry(0, 0, 0, 0);
  10023b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100242:	00 
  100243:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10024a:	00 
  10024b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100252:	00 
  100253:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10025a:	e8 db fd ff ff       	call   10003a <set_gdt_entry>
    set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  10025f:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100266:	00 
  100267:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  10026e:	00 
  10026f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100276:	00 
  100277:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10027e:	e8 b7 fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100283:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  10028a:	00 
  10028b:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100292:	00 
  100293:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10029a:	00 
  10029b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1002a2:	e8 93 fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
    set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1002a7:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  1002ae:	00 
  1002af:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1002b6:	00 
  1002b7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1002be:	00 
  1002bf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1002c6:	e8 6f fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
    set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1002cb:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  1002d2:	00 
  1002d3:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1002da:	00 
  1002db:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1002e2:	00 
  1002e3:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1002ea:	e8 4b fd ff ff       	call   10003a <set_gdt_entry>
        GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
 
    load_gdt();
  1002ef:	e8 18 fd ff ff       	call   10000c <load_gdt>
}
  1002f4:	c9                   	leave  
  1002f5:	c3                   	ret    
	...

001002f8 <intr_stub_0>:
  1002f8:	6a 00                	push   $0x0
  1002fa:	6a 00                	push   $0x0
  1002fc:	e9 eb 00 00 00       	jmp    1003ec <intr_common_handler>

00100301 <intr_stub_1>:
  100301:	6a 00                	push   $0x0
  100303:	6a 01                	push   $0x1
  100305:	e9 e2 00 00 00       	jmp    1003ec <intr_common_handler>

0010030a <intr_stub_2>:
  10030a:	6a 00                	push   $0x0
  10030c:	6a 02                	push   $0x2
  10030e:	e9 d9 00 00 00       	jmp    1003ec <intr_common_handler>

00100313 <intr_stub_3>:
  100313:	6a 00                	push   $0x0
  100315:	6a 03                	push   $0x3
  100317:	e9 d0 00 00 00       	jmp    1003ec <intr_common_handler>

0010031c <intr_stub_4>:
  10031c:	6a 00                	push   $0x0
  10031e:	6a 04                	push   $0x4
  100320:	e9 c7 00 00 00       	jmp    1003ec <intr_common_handler>

00100325 <intr_stub_5>:
  100325:	6a 00                	push   $0x0
  100327:	6a 05                	push   $0x5
  100329:	e9 be 00 00 00       	jmp    1003ec <intr_common_handler>

0010032e <intr_stub_6>:
  10032e:	6a 00                	push   $0x0
  100330:	6a 06                	push   $0x6
  100332:	e9 b5 00 00 00       	jmp    1003ec <intr_common_handler>

00100337 <intr_stub_7>:
  100337:	6a 00                	push   $0x0
  100339:	6a 07                	push   $0x7
  10033b:	e9 ac 00 00 00       	jmp    1003ec <intr_common_handler>

00100340 <intr_stub_8>:
  100340:	6a 08                	push   $0x8
  100342:	e9 a5 00 00 00       	jmp    1003ec <intr_common_handler>

00100347 <intr_stub_9>:
  100347:	6a 00                	push   $0x0
  100349:	6a 09                	push   $0x9
  10034b:	e9 9c 00 00 00       	jmp    1003ec <intr_common_handler>

00100350 <intr_stub_10>:
  100350:	6a 0a                	push   $0xa
  100352:	e9 95 00 00 00       	jmp    1003ec <intr_common_handler>

00100357 <intr_stub_11>:
  100357:	6a 0b                	push   $0xb
  100359:	e9 8e 00 00 00       	jmp    1003ec <intr_common_handler>

0010035e <intr_stub_12>:
  10035e:	6a 0c                	push   $0xc
  100360:	e9 87 00 00 00       	jmp    1003ec <intr_common_handler>

00100365 <intr_stub_13>:
  100365:	6a 0d                	push   $0xd
  100367:	e9 80 00 00 00       	jmp    1003ec <intr_common_handler>

0010036c <intr_stub_14>:
  10036c:	6a 0e                	push   $0xe
  10036e:	eb 7c                	jmp    1003ec <intr_common_handler>

00100370 <intr_stub_15>:
  100370:	6a 00                	push   $0x0
  100372:	6a 0f                	push   $0xf
  100374:	eb 76                	jmp    1003ec <intr_common_handler>

00100376 <intr_stub_16>:
  100376:	6a 00                	push   $0x0
  100378:	6a 10                	push   $0x10
  10037a:	eb 70                	jmp    1003ec <intr_common_handler>

0010037c <intr_stub_17>:
  10037c:	6a 11                	push   $0x11
  10037e:	eb 6c                	jmp    1003ec <intr_common_handler>

00100380 <intr_stub_18>:
  100380:	6a 00                	push   $0x0
  100382:	6a 12                	push   $0x12
  100384:	eb 66                	jmp    1003ec <intr_common_handler>

00100386 <intr_stub_32>:
  100386:	6a 00                	push   $0x0
  100388:	6a 20                	push   $0x20
  10038a:	eb 60                	jmp    1003ec <intr_common_handler>

0010038c <intr_stub_33>:
  10038c:	6a 00                	push   $0x0
  10038e:	6a 21                	push   $0x21
  100390:	eb 5a                	jmp    1003ec <intr_common_handler>

00100392 <intr_stub_34>:
  100392:	6a 00                	push   $0x0
  100394:	6a 22                	push   $0x22
  100396:	eb 54                	jmp    1003ec <intr_common_handler>

00100398 <intr_stub_35>:
  100398:	6a 00                	push   $0x0
  10039a:	6a 23                	push   $0x23
  10039c:	eb 4e                	jmp    1003ec <intr_common_handler>

0010039e <intr_stub_36>:
  10039e:	6a 00                	push   $0x0
  1003a0:	6a 24                	push   $0x24
  1003a2:	eb 48                	jmp    1003ec <intr_common_handler>

001003a4 <intr_stub_37>:
  1003a4:	6a 00                	push   $0x0
  1003a6:	6a 25                	push   $0x25
  1003a8:	eb 42                	jmp    1003ec <intr_common_handler>

001003aa <intr_stub_38>:
  1003aa:	6a 00                	push   $0x0
  1003ac:	6a 26                	push   $0x26
  1003ae:	eb 3c                	jmp    1003ec <intr_common_handler>

001003b0 <intr_stub_39>:
  1003b0:	6a 00                	push   $0x0
  1003b2:	6a 27                	push   $0x27
  1003b4:	eb 36                	jmp    1003ec <intr_common_handler>

001003b6 <intr_stub_40>:
  1003b6:	6a 00                	push   $0x0
  1003b8:	6a 28                	push   $0x28
  1003ba:	eb 30                	jmp    1003ec <intr_common_handler>

001003bc <intr_stub_41>:
  1003bc:	6a 00                	push   $0x0
  1003be:	6a 29                	push   $0x29
  1003c0:	eb 2a                	jmp    1003ec <intr_common_handler>

001003c2 <intr_stub_42>:
  1003c2:	6a 00                	push   $0x0
  1003c4:	6a 2a                	push   $0x2a
  1003c6:	eb 24                	jmp    1003ec <intr_common_handler>

001003c8 <intr_stub_43>:
  1003c8:	6a 00                	push   $0x0
  1003ca:	6a 2b                	push   $0x2b
  1003cc:	eb 1e                	jmp    1003ec <intr_common_handler>

001003ce <intr_stub_44>:
  1003ce:	6a 00                	push   $0x0
  1003d0:	6a 2c                	push   $0x2c
  1003d2:	eb 18                	jmp    1003ec <intr_common_handler>

001003d4 <intr_stub_45>:
  1003d4:	6a 00                	push   $0x0
  1003d6:	6a 2d                	push   $0x2d
  1003d8:	eb 12                	jmp    1003ec <intr_common_handler>

001003da <intr_stub_46>:
  1003da:	6a 00                	push   $0x0
  1003dc:	6a 2e                	push   $0x2e
  1003de:	eb 0c                	jmp    1003ec <intr_common_handler>

001003e0 <intr_stub_47>:
  1003e0:	6a 00                	push   $0x0
  1003e2:	6a 2f                	push   $0x2f
  1003e4:	eb 06                	jmp    1003ec <intr_common_handler>

001003e6 <intr_stub_48>:
  1003e6:	6a 00                	push   $0x0
  1003e8:	6a 30                	push   $0x30
  1003ea:	eb 00                	jmp    1003ec <intr_common_handler>

001003ec <intr_common_handler>:
  1003ec:	55                   	push   %ebp
  1003ed:	57                   	push   %edi
  1003ee:	56                   	push   %esi
  1003ef:	52                   	push   %edx
  1003f0:	51                   	push   %ecx
  1003f1:	53                   	push   %ebx
  1003f2:	50                   	push   %eax
  1003f3:	66 b8 10 00          	mov    $0x10,%ax
  1003f7:	8e d8                	mov    %eax,%ds
  1003f9:	8e c0                	mov    %eax,%es
  1003fb:	54                   	push   %esp
  1003fc:	e8 27 18 00 00       	call   101c28 <handle_interrupt>
  100401:	89 c4                	mov    %eax,%esp
  100403:	66 b8 23 00          	mov    $0x23,%ax
  100407:	8e d8                	mov    %eax,%ds
  100409:	8e c0                	mov    %eax,%es
  10040b:	58                   	pop    %eax
  10040c:	5b                   	pop    %ebx
  10040d:	59                   	pop    %ecx
  10040e:	5a                   	pop    %edx
  10040f:	5e                   	pop    %esi
  100410:	5f                   	pop    %edi
  100411:	5d                   	pop    %ebp
  100412:	83 c4 08             	add    $0x8,%esp
  100415:	cf                   	iret   
	...

00100418 <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100418:	55                   	push   %ebp
  100419:	89 e5                	mov    %esp,%ebp
  10041b:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  10041e:	8b 45 08             	mov    0x8(%ebp),%eax
  100421:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100424:	eb 0e                	jmp    100434 <memset+0x1c>
        *p++ = c;
  100426:	8b 45 0c             	mov    0xc(%ebp),%eax
  100429:	89 c2                	mov    %eax,%edx
  10042b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10042e:	88 10                	mov    %dl,(%eax)
  100430:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100434:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100438:	0f 95 c0             	setne  %al
  10043b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  10043f:	84 c0                	test   %al,%al
  100441:	75 e3                	jne    100426 <memset+0xe>
        *p++ = c;
    }

    return buf;
  100443:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100446:	c9                   	leave  
  100447:	c3                   	ret    

00100448 <memcpy>:

static inline void* memcpy(void* dest, const void* src, size_t n)
{
  100448:	55                   	push   %ebp
  100449:	89 e5                	mov    %esp,%ebp
  10044b:	83 ec 10             	sub    $0x10,%esp
    unsigned char* d = dest;
  10044e:	8b 45 08             	mov    0x8(%ebp),%eax
  100451:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const unsigned char* s = src;
  100454:	8b 45 0c             	mov    0xc(%ebp),%eax
  100457:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  10045a:	eb 13                	jmp    10046f <memcpy+0x27>
        *d++ = *s++;
  10045c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10045f:	0f b6 10             	movzbl (%eax),%edx
  100462:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100465:	88 10                	mov    %dl,(%eax)
  100467:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  10046b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
static inline void* memcpy(void* dest, const void* src, size_t n)
{
    unsigned char* d = dest;
    const unsigned char* s = src;

    while (n--) {
  10046f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100473:	0f 95 c0             	setne  %al
  100476:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  10047a:	84 c0                	test   %al,%al
  10047c:	75 de                	jne    10045c <memcpy+0x14>
        *d++ = *s++;
    }

    return dest;
  10047e:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100481:	c9                   	leave  
  100482:	c3                   	ret    

00100483 <syscall>:
#include "string.h"
#include "elf.h"
#include "vmm.h"

struct cpu_state* syscall(struct cpu_state* cpu)
{
  100483:	55                   	push   %ebp
  100484:	89 e5                	mov    %esp,%ebp
  100486:	83 ec 18             	sub    $0x18,%esp
    switch (cpu->eax) {
  100489:	8b 45 08             	mov    0x8(%ebp),%eax
  10048c:	8b 00                	mov    (%eax),%eax
  10048e:	85 c0                	test   %eax,%eax
  100490:	75 16                	jne    1004a8 <syscall+0x25>
        case 0: /* putc */
            kprintf("%c", cpu->ebx);
  100492:	8b 45 08             	mov    0x8(%ebp),%eax
  100495:	8b 40 04             	mov    0x4(%eax),%eax
  100498:	89 44 24 04          	mov    %eax,0x4(%esp)
  10049c:	c7 04 24 00 30 10 00 	movl   $0x103000,(%esp)
  1004a3:	e8 55 0e 00 00       	call   1012fd <kprintf>
            break;
    }
 
    return cpu;
  1004a8:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1004ab:	c9                   	leave  
  1004ac:	c3                   	ret    

001004ad <init_elf>:

void init_elf(void* image)
{
  1004ad:	55                   	push   %ebp
  1004ae:	89 e5                	mov    %esp,%ebp
  1004b0:	83 ec 38             	sub    $0x38,%esp
    /*
     * FIXME Wir muessen eigentlich die Laenge vom Image pruefen, damit wir bei
     * korrupten ELF-Dateien nicht ueber das Dateiende hinauslesen.
     */
 
    struct elf_header* header = image;
  1004b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1004b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct elf_program_header* ph;
    int i;
 
    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  1004b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1004bc:	8b 00                	mov    (%eax),%eax
  1004be:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  1004c3:	74 11                	je     1004d6 <init_elf+0x29>
        kprintf("Keine gueltige ELF-Magic!\n");
  1004c5:	c7 04 24 03 30 10 00 	movl   $0x103003,(%esp)
  1004cc:	e8 2c 0e 00 00       	call   1012fd <kprintf>
        return;
  1004d1:	e9 8a 00 00 00       	jmp    100560 <init_elf+0xb3>
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
  1004d6:	8b 55 08             	mov    0x8(%ebp),%edx
  1004d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1004dc:	8b 40 1c             	mov    0x1c(%eax),%eax
  1004df:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1004e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  1004e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1004ec:	eb 63                	jmp    100551 <init_elf+0xa4>
        void* dest = (void*) ph->virt_addr;
  1004ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004f1:	8b 40 08             	mov    0x8(%eax),%eax
  1004f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        void* src = ((char*) image) + ph->offset;
  1004f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1004fa:	8b 40 04             	mov    0x4(%eax),%eax
  1004fd:	03 45 08             	add    0x8(%ebp),%eax
  100500:	89 45 f4             	mov    %eax,-0xc(%ebp)
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  100503:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100506:	8b 00                	mov    (%eax),%eax
  100508:	83 f8 01             	cmp    $0x1,%eax
  10050b:	75 3b                	jne    100548 <init_elf+0x9b>
            continue;
        }
 
        memset(dest, 0, ph->mem_size);
  10050d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100510:	8b 40 14             	mov    0x14(%eax),%eax
  100513:	89 44 24 08          	mov    %eax,0x8(%esp)
  100517:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10051e:	00 
  10051f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100522:	89 04 24             	mov    %eax,(%esp)
  100525:	e8 ee fe ff ff       	call   100418 <memset>
        memcpy(dest, src, ph->file_size);
  10052a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10052d:	8b 40 10             	mov    0x10(%eax),%eax
  100530:	89 44 24 08          	mov    %eax,0x8(%esp)
  100534:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100537:	89 44 24 04          	mov    %eax,0x4(%esp)
  10053b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10053e:	89 04 24             	mov    %eax,(%esp)
  100541:	e8 02 ff ff ff       	call   100448 <memcpy>
  100546:	eb 01                	jmp    100549 <init_elf+0x9c>
        void* dest = (void*) ph->virt_addr;
        void* src = ((char*) image) + ph->offset;
 
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
  100548:	90                   	nop
        kprintf("Keine gueltige ELF-Magic!\n");
        return;
    }
 
    ph = (struct elf_program_header*) (((char*) image) + header->ph_offset);
    for (i = 0; i < header->ph_entry_count; i++, ph++) {
  100549:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  10054d:	83 45 e8 20          	addl   $0x20,-0x18(%ebp)
  100551:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100554:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  100558:	0f b7 c0             	movzwl %ax,%eax
  10055b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10055e:	7f 8e                	jg     1004ee <init_elf+0x41>
        memset(dest, 0, ph->mem_size);
        memcpy(dest, src, ph->file_size);
    }
 
    //init_task((void*) header->entry);
}
  100560:	c9                   	leave  
  100561:	c3                   	ret    

00100562 <task>:

void task() {
  100562:	55                   	push   %ebp
  100563:	89 e5                	mov    %esp,%ebp
  100565:	83 ec 18             	sub    $0x18,%esp
  kprintf("task");
  100568:	c7 04 24 1e 30 10 00 	movl   $0x10301e,(%esp)
  10056f:	e8 89 0d 00 00       	call   1012fd <kprintf>
  
  while(1) { }
  100574:	eb fe                	jmp    100574 <task+0x12>

00100576 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {	
  100576:	55                   	push   %ebp
  100577:	89 e5                	mov    %esp,%ebp
  100579:	83 ec 28             	sub    $0x28,%esp
	struct vmm_context* context = vmm_init(mb_info);
  10057c:	8b 45 08             	mov    0x8(%ebp),%eax
  10057f:	89 04 24             	mov    %eax,(%esp)
  100582:	e8 d3 07 00 00       	call   100d5a <vmm_init>
  100587:	89 45 f4             	mov    %eax,-0xc(%ebp)
		init_elf((void*) modules[i].start);
	}*/
	
	//init_task(task, context);

	kprintf("abc");
  10058a:	c7 04 24 23 30 10 00 	movl   $0x103023,(%esp)
  100591:	e8 67 0d 00 00       	call   1012fd <kprintf>

	while(1) {  }
  100596:	eb fe                	jmp    100596 <kernel_main+0x20>

00100598 <init_task>:

static struct task* first_task = NULL;
static struct task* current_task = NULL;

struct task* init_task(void* entry, struct vmm_context* context)
{
  100598:	55                   	push   %ebp
  100599:	89 e5                	mov    %esp,%ebp
  10059b:	57                   	push   %edi
  10059c:	56                   	push   %esi
  10059d:	53                   	push   %ebx
  10059e:	83 ec 7c             	sub    $0x7c,%esp
    uint8_t* stack = vmm_alloc(context, 1);
  1005a1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1005a8:	00 
  1005a9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1005ac:	89 04 24             	mov    %eax,(%esp)
  1005af:	e8 3e 07 00 00       	call   100cf2 <vmm_alloc>
  1005b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
    uint8_t* user_stack = vmm_alloc(context, 1);
  1005b7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1005be:	00 
  1005bf:	8b 45 0c             	mov    0xc(%ebp),%eax
  1005c2:	89 04 24             	mov    %eax,(%esp)
  1005c5:	e8 28 07 00 00       	call   100cf2 <vmm_alloc>
  1005ca:	89 45 dc             	mov    %eax,-0x24(%ebp)

		kprintf("entry: %x", (uint32_t) entry);
  1005cd:	8b 45 08             	mov    0x8(%ebp),%eax
  1005d0:	89 44 24 04          	mov    %eax,0x4(%esp)
  1005d4:	c7 04 24 27 30 10 00 	movl   $0x103027,(%esp)
  1005db:	e8 1d 0d 00 00       	call   1012fd <kprintf>
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
        .eip = (uint32_t) entry,
  1005e0:	8b 75 08             	mov    0x8(%ebp),%esi
        .ecx = 0,
        .edx = 0,
        .esi = 0,
        .edi = 0,
        .ebp = 0,
        .esp = (uint32_t) user_stack + 4096,
  1005e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1005e6:	05 00 10 00 00       	add    $0x1000,%eax
  1005eb:	89 45 94             	mov    %eax,-0x6c(%ebp)

        .cs  = 0x18 | 0x03,
        .ss  = 0x20 | 0x03,

        .eflags = 0x200,
    };
  1005ee:	8d 5d a0             	lea    -0x60(%ebp),%ebx
  1005f1:	b8 00 00 00 00       	mov    $0x0,%eax
  1005f6:	ba 0e 00 00 00       	mov    $0xe,%edx
  1005fb:	89 df                	mov    %ebx,%edi
  1005fd:	89 d1                	mov    %edx,%ecx
  1005ff:	f3 ab                	rep stos %eax,%es:(%edi)
  100601:	89 75 c4             	mov    %esi,-0x3c(%ebp)
  100604:	c7 45 c8 1b 00 00 00 	movl   $0x1b,-0x38(%ebp)
  10060b:	c7 45 cc 00 02 00 00 	movl   $0x200,-0x34(%ebp)
  100612:	8b 45 94             	mov    -0x6c(%ebp),%eax
  100615:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100618:	c7 45 d4 23 00 00 00 	movl   $0x23,-0x2c(%ebp)

    struct cpu_state* state = (void*) (stack + 4096 - sizeof(new_state));
  10061f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100622:	05 c8 0f 00 00       	add    $0xfc8,%eax
  100627:	89 45 e0             	mov    %eax,-0x20(%ebp)
    *state = new_state;
  10062a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10062d:	8b 55 a0             	mov    -0x60(%ebp),%edx
  100630:	89 10                	mov    %edx,(%eax)
  100632:	8b 55 a4             	mov    -0x5c(%ebp),%edx
  100635:	89 50 04             	mov    %edx,0x4(%eax)
  100638:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10063b:	89 50 08             	mov    %edx,0x8(%eax)
  10063e:	8b 55 ac             	mov    -0x54(%ebp),%edx
  100641:	89 50 0c             	mov    %edx,0xc(%eax)
  100644:	8b 55 b0             	mov    -0x50(%ebp),%edx
  100647:	89 50 10             	mov    %edx,0x10(%eax)
  10064a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  10064d:	89 50 14             	mov    %edx,0x14(%eax)
  100650:	8b 55 b8             	mov    -0x48(%ebp),%edx
  100653:	89 50 18             	mov    %edx,0x18(%eax)
  100656:	8b 55 bc             	mov    -0x44(%ebp),%edx
  100659:	89 50 1c             	mov    %edx,0x1c(%eax)
  10065c:	8b 55 c0             	mov    -0x40(%ebp),%edx
  10065f:	89 50 20             	mov    %edx,0x20(%eax)
  100662:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  100665:	89 50 24             	mov    %edx,0x24(%eax)
  100668:	8b 55 c8             	mov    -0x38(%ebp),%edx
  10066b:	89 50 28             	mov    %edx,0x28(%eax)
  10066e:	8b 55 cc             	mov    -0x34(%ebp),%edx
  100671:	89 50 2c             	mov    %edx,0x2c(%eax)
  100674:	8b 55 d0             	mov    -0x30(%ebp),%edx
  100677:	89 50 30             	mov    %edx,0x30(%eax)
  10067a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  10067d:	89 50 34             	mov    %edx,0x34(%eax)

    struct task* task = vmm_alloc(context, 1);
  100680:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100687:	00 
  100688:	8b 45 0c             	mov    0xc(%ebp),%eax
  10068b:	89 04 24             	mov    %eax,(%esp)
  10068e:	e8 5f 06 00 00       	call   100cf2 <vmm_alloc>
  100693:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    task->cpu_state = state;
  100696:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100699:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10069c:	89 10                	mov    %edx,(%eax)
    task->next = first_task;
  10069e:	8b 15 00 40 10 00    	mov    0x104000,%edx
  1006a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1006a7:	89 50 04             	mov    %edx,0x4(%eax)
    first_task = task;
  1006aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1006ad:	a3 00 40 10 00       	mov    %eax,0x104000
    return task;
  1006b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
  1006b5:	83 c4 7c             	add    $0x7c,%esp
  1006b8:	5b                   	pop    %ebx
  1006b9:	5e                   	pop    %esi
  1006ba:	5f                   	pop    %edi
  1006bb:	5d                   	pop    %ebp
  1006bc:	c3                   	ret    

001006bd <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu)
{
  1006bd:	55                   	push   %ebp
  1006be:	89 e5                	mov    %esp,%ebp
    if(first_task == NULL) return cpu;
  1006c0:	a1 00 40 10 00       	mov    0x104000,%eax
  1006c5:	85 c0                	test   %eax,%eax
  1006c7:	75 05                	jne    1006ce <schedule+0x11>
  1006c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1006cc:	eb 55                	jmp    100723 <schedule+0x66>
    
    if (current_task != NULL) {
  1006ce:	a1 04 40 10 00       	mov    0x104004,%eax
  1006d3:	85 c0                	test   %eax,%eax
  1006d5:	74 0a                	je     1006e1 <schedule+0x24>
        current_task->cpu_state = cpu;
  1006d7:	a1 04 40 10 00       	mov    0x104004,%eax
  1006dc:	8b 55 08             	mov    0x8(%ebp),%edx
  1006df:	89 10                	mov    %edx,(%eax)
    }

    if (current_task == NULL) {
  1006e1:	a1 04 40 10 00       	mov    0x104004,%eax
  1006e6:	85 c0                	test   %eax,%eax
  1006e8:	75 0c                	jne    1006f6 <schedule+0x39>
        current_task = first_task;
  1006ea:	a1 00 40 10 00       	mov    0x104000,%eax
  1006ef:	a3 04 40 10 00       	mov    %eax,0x104004
  1006f4:	eb 20                	jmp    100716 <schedule+0x59>
    } else {
        current_task = current_task->next;
  1006f6:	a1 04 40 10 00       	mov    0x104004,%eax
  1006fb:	8b 40 04             	mov    0x4(%eax),%eax
  1006fe:	a3 04 40 10 00       	mov    %eax,0x104004
        if (current_task == NULL) {
  100703:	a1 04 40 10 00       	mov    0x104004,%eax
  100708:	85 c0                	test   %eax,%eax
  10070a:	75 0a                	jne    100716 <schedule+0x59>
            current_task = first_task;
  10070c:	a1 00 40 10 00       	mov    0x104000,%eax
  100711:	a3 04 40 10 00       	mov    %eax,0x104004
        }
    }  

    cpu = current_task->cpu_state;
  100716:	a1 04 40 10 00       	mov    0x104004,%eax
  10071b:	8b 00                	mov    (%eax),%eax
  10071d:	89 45 08             	mov    %eax,0x8(%ebp)

    return cpu;
  100720:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100723:	5d                   	pop    %ebp
  100724:	c3                   	ret    
  100725:	00 00                	add    %al,(%eax)
	...

00100728 <inb>:
	asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
	return result;
}

static inline uint8_t inb(uint16_t _port)
{
  100728:	55                   	push   %ebp
  100729:	89 e5                	mov    %esp,%ebp
  10072b:	83 ec 14             	sub    $0x14,%esp
  10072e:	8b 45 08             	mov    0x8(%ebp),%eax
  100731:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t result;
	asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  100735:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  100739:	89 c2                	mov    %eax,%edx
  10073b:	ec                   	in     (%dx),%al
  10073c:	88 45 ff             	mov    %al,-0x1(%ebp)
	return result;
  10073f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  100743:	c9                   	leave  
  100744:	c3                   	ret    

00100745 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  100745:	55                   	push   %ebp
  100746:	89 e5                	mov    %esp,%ebp
  100748:	83 ec 08             	sub    $0x8,%esp
  10074b:	8b 55 08             	mov    0x8(%ebp),%edx
  10074e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100751:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  100755:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100758:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  10075c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  100760:	ee                   	out    %al,(%dx)
}
  100761:	c9                   	leave  
  100762:	c3                   	ret    

00100763 <translate_scancode>:

static uint8_t* buffer;
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  100763:	55                   	push   %ebp
  100764:	89 e5                	mov    %esp,%ebp
  100766:	83 ec 38             	sub    $0x38,%esp
  100769:	8b 45 0c             	mov    0xc(%ebp),%eax
  10076c:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
  uint8_t keycode = 0;
  100770:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)

  switch (set) {
  100774:	8b 45 08             	mov    0x8(%ebp),%eax
  100777:	83 f8 01             	cmp    $0x1,%eax
  10077a:	74 19                	je     100795 <translate_scancode+0x32>
  10077c:	83 f8 02             	cmp    $0x2,%eax
  10077f:	74 24                	je     1007a5 <translate_scancode+0x42>
  100781:	85 c0                	test   %eax,%eax
  100783:	75 35                	jne    1007ba <translate_scancode+0x57>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100785:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100789:	0f b6 80 00 20 10 00 	movzbl 0x102000(%eax),%eax
  100790:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  100793:	eb 25                	jmp    1007ba <translate_scancode+0x57>
    case 1:
      keycode = sc_to_kc[1][scancode];
  100795:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100799:	0f b6 80 80 20 10 00 	movzbl 0x102080(%eax),%eax
  1007a0:	88 45 f7             	mov    %al,-0x9(%ebp)
      break;
  1007a3:	eb 15                	jmp    1007ba <translate_scancode+0x57>
    case 2:
      switch (scancode) {
  1007a5:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1007a9:	3d 1d 45 00 00       	cmp    $0x451d,%eax
  1007ae:	75 06                	jne    1007b6 <translate_scancode+0x53>
        case 0x451D:
          keycode = 119;
  1007b0:	c6 45 f7 77          	movb   $0x77,-0x9(%ebp)
          break;
  1007b4:	eb 04                	jmp    1007ba <translate_scancode+0x57>

        default:
          keycode = 0x0;	
  1007b6:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
      };
      break;
  }

  if (keycode == 0) {
  1007ba:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
  1007be:	75 1b                	jne    1007db <translate_scancode+0x78>
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  1007c0:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1007c4:	8b 55 08             	mov    0x8(%ebp),%edx
  1007c7:	89 54 24 08          	mov    %edx,0x8(%esp)
  1007cb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1007cf:	c7 04 24 34 30 10 00 	movl   $0x103034,(%esp)
  1007d6:	e8 22 0b 00 00       	call   1012fd <kprintf>
  }

  return keycode;
  1007db:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
}
  1007df:	c9                   	leave  
  1007e0:	c3                   	ret    

001007e1 <keyboard_handler>:

void keyboard_handler() {    
  1007e1:	55                   	push   %ebp
  1007e2:	89 e5                	mov    %esp,%ebp
  1007e4:	83 ec 28             	sub    $0x28,%esp
  uint8_t scancode;
  uint8_t keycode = 0;
  1007e7:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
  int break_code = 0;
  1007eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  static int      e0_code = 0;
  static int      e1_code = 0;
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);
  1007f2:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1007f9:	e8 2a ff ff ff       	call   100728 <inb>
  1007fe:	88 45 f2             	mov    %al,-0xe(%ebp)

  if (!init_done) {
  100801:	a1 08 40 10 00       	mov    0x104008,%eax
  100806:	85 c0                	test   %eax,%eax
  100808:	0f 84 26 01 00 00    	je     100934 <keyboard_handler+0x153>
    return;
  }

  if ((scancode & 0x80) &&
  10080e:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100812:	84 c0                	test   %al,%al
  100814:	79 29                	jns    10083f <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
  100816:	a1 14 40 10 00       	mov    0x104014,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  10081b:	85 c0                	test   %eax,%eax
  10081d:	75 06                	jne    100825 <keyboard_handler+0x44>
  10081f:	80 7d f2 e1          	cmpb   $0xe1,-0xe(%ebp)
  100823:	74 1a                	je     10083f <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  100825:	a1 18 40 10 00       	mov    0x104018,%eax

  if (!init_done) {
    return;
  }

  if ((scancode & 0x80) &&
  10082a:	85 c0                	test   %eax,%eax
  10082c:	75 06                	jne    100834 <keyboard_handler+0x53>
  10082e:	80 7d f2 e0          	cmpb   $0xe0,-0xe(%ebp)
  100832:	74 0b                	je     10083f <keyboard_handler+0x5e>
      (e1_code || (scancode != 0xE1)) &&
      (e0_code || (scancode != 0xE0)))
  {
      break_code = 1;
  100834:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
      scancode &= ~0x80;
  10083b:	80 65 f2 7f          	andb   $0x7f,-0xe(%ebp)
  }

  if (e0_code) {
  10083f:	a1 18 40 10 00       	mov    0x104018,%eax
  100844:	85 c0                	test   %eax,%eax
  100846:	74 41                	je     100889 <keyboard_handler+0xa8>
      if ((scancode == 0x2A) || (scancode == 0x36)) {
  100848:	80 7d f2 2a          	cmpb   $0x2a,-0xe(%ebp)
  10084c:	74 06                	je     100854 <keyboard_handler+0x73>
  10084e:	80 7d f2 36          	cmpb   $0x36,-0xe(%ebp)
  100852:	75 0f                	jne    100863 <keyboard_handler+0x82>
          e0_code = 0;
  100854:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  10085b:	00 00 00 
          return;
  10085e:	e9 d2 00 00 00       	jmp    100935 <keyboard_handler+0x154>
      }
      keycode = translate_scancode(1, scancode);
  100863:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100867:	89 44 24 04          	mov    %eax,0x4(%esp)
  10086b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100872:	e8 ec fe ff ff       	call   100763 <translate_scancode>
  100877:	88 45 f3             	mov    %al,-0xd(%ebp)
      e0_code = 0;
  10087a:	c7 05 18 40 10 00 00 	movl   $0x0,0x104018
  100881:	00 00 00 
  100884:	e9 ac 00 00 00       	jmp    100935 <keyboard_handler+0x154>
  } else if (e1_code == 2) {
  100889:	a1 14 40 10 00       	mov    0x104014,%eax
  10088e:	83 f8 02             	cmp    $0x2,%eax
  100891:	75 41                	jne    1008d4 <keyboard_handler+0xf3>
      e1_prev |= ((uint16_t) scancode << 8);
  100893:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  100897:	c1 e0 08             	shl    $0x8,%eax
  10089a:	89 c2                	mov    %eax,%edx
  10089c:	0f b7 05 1c 40 10 00 	movzwl 0x10401c,%eax
  1008a3:	09 d0                	or     %edx,%eax
  1008a5:	66 a3 1c 40 10 00    	mov    %ax,0x10401c
      keycode = translate_scancode(2, e1_prev);
  1008ab:	0f b7 05 1c 40 10 00 	movzwl 0x10401c,%eax
  1008b2:	0f b7 c0             	movzwl %ax,%eax
  1008b5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1008b9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1008c0:	e8 9e fe ff ff       	call   100763 <translate_scancode>
  1008c5:	88 45 f3             	mov    %al,-0xd(%ebp)
      e1_code = 0;
  1008c8:	c7 05 14 40 10 00 00 	movl   $0x0,0x104014
  1008cf:	00 00 00 
  1008d2:	eb 61                	jmp    100935 <keyboard_handler+0x154>
  } else if (e1_code == 1) {
  1008d4:	a1 14 40 10 00       	mov    0x104014,%eax
  1008d9:	83 f8 01             	cmp    $0x1,%eax
  1008dc:	75 19                	jne    1008f7 <keyboard_handler+0x116>
      e1_prev = scancode;
  1008de:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  1008e2:	66 a3 1c 40 10 00    	mov    %ax,0x10401c
      e1_code++;
  1008e8:	a1 14 40 10 00       	mov    0x104014,%eax
  1008ed:	83 c0 01             	add    $0x1,%eax
  1008f0:	a3 14 40 10 00       	mov    %eax,0x104014
  1008f5:	eb 3e                	jmp    100935 <keyboard_handler+0x154>
  } else if (scancode == 0xE0) {
  1008f7:	80 7d f2 e0          	cmpb   $0xe0,-0xe(%ebp)
  1008fb:	75 0c                	jne    100909 <keyboard_handler+0x128>
      e0_code = 1;
  1008fd:	c7 05 18 40 10 00 01 	movl   $0x1,0x104018
  100904:	00 00 00 
  100907:	eb 2c                	jmp    100935 <keyboard_handler+0x154>
  } else if (scancode == 0xE1) {
  100909:	80 7d f2 e1          	cmpb   $0xe1,-0xe(%ebp)
  10090d:	75 0c                	jne    10091b <keyboard_handler+0x13a>
      e1_code = 1;
  10090f:	c7 05 14 40 10 00 01 	movl   $0x1,0x104014
  100916:	00 00 00 
  100919:	eb 1a                	jmp    100935 <keyboard_handler+0x154>
  } else {
      keycode = translate_scancode(0, scancode);
  10091b:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
  10091f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100923:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10092a:	e8 34 fe ff ff       	call   100763 <translate_scancode>
  10092f:	88 45 f3             	mov    %al,-0xd(%ebp)
  100932:	eb 01                	jmp    100935 <keyboard_handler+0x154>
  static uint16_t  e1_prev = 0;

  scancode = inb(0x60);

  if (!init_done) {
    return;
  100934:	90                   	nop

	if(keycode != 0x0) {
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}
  100935:	c9                   	leave  
  100936:	c3                   	ret    

00100937 <getc>:

char getc() {
  100937:	55                   	push   %ebp
  100938:	89 e5                	mov    %esp,%ebp
  10093a:	83 ec 10             	sub    $0x10,%esp
	char ret = buffer[0];
  10093d:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100942:	0f b6 00             	movzbl (%eax),%eax
  100945:	88 45 fb             	mov    %al,-0x5(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100948:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10094f:	eb 21                	jmp    100972 <getc+0x3b>
		buffer[i] = buffer[i+1];	
  100951:	8b 15 0c 40 10 00    	mov    0x10400c,%edx
  100957:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10095a:	01 c2                	add    %eax,%edx
  10095c:	a1 0c 40 10 00       	mov    0x10400c,%eax
  100961:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100964:	83 c1 01             	add    $0x1,%ecx
  100967:	01 c8                	add    %ecx,%eax
  100969:	0f b6 00             	movzbl (%eax),%eax
  10096c:	88 02                	mov    %al,(%edx)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  10096e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100972:	a1 10 40 10 00       	mov    0x104010,%eax
  100977:	39 45 fc             	cmp    %eax,-0x4(%ebp)
  10097a:	7c d5                	jl     100951 <getc+0x1a>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  10097c:	a1 10 40 10 00       	mov    0x104010,%eax
  100981:	83 e8 01             	sub    $0x1,%eax
  100984:	a3 10 40 10 00       	mov    %eax,0x104010

	return ret;
  100989:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
  10098d:	c9                   	leave  
  10098e:	c3                   	ret    

0010098f <send_command>:

void send_command(uint8_t command) {
  10098f:	55                   	push   %ebp
  100990:	89 e5                	mov    %esp,%ebp
  100992:	83 ec 0c             	sub    $0xc,%esp
  100995:	8b 45 08             	mov    0x8(%ebp),%eax
  100998:	88 45 fc             	mov    %al,-0x4(%ebp)
	while((inb(0x64) & 0x2)) { }
  10099b:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1009a2:	e8 81 fd ff ff       	call   100728 <inb>
  1009a7:	0f b6 c0             	movzbl %al,%eax
  1009aa:	83 e0 02             	and    $0x2,%eax
  1009ad:	85 c0                	test   %eax,%eax
  1009af:	75 ea                	jne    10099b <send_command+0xc>
	outb(0x60, command);
  1009b1:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  1009b5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009b9:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1009c0:	e8 80 fd ff ff       	call   100745 <outb>
}
  1009c5:	c9                   	leave  
  1009c6:	c3                   	ret    

001009c7 <init_keyboard_drv>:

void init_keyboard_drv() {
  1009c7:	55                   	push   %ebp
  1009c8:	89 e5                	mov    %esp,%ebp
  1009ca:	83 ec 18             	sub    $0x18,%esp
	register_intr_handler(0x21, &keyboard_handler);
  1009cd:	c7 44 24 04 e1 07 10 	movl   $0x1007e1,0x4(%esp)
  1009d4:	00 
  1009d5:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1009dc:	e8 27 12 00 00       	call   101c08 <register_intr_handler>

	while(inb(0x64) & 0x1) {
  1009e1:	eb 0c                	jmp    1009ef <init_keyboard_drv+0x28>
		inb(0x60);
  1009e3:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  1009ea:	e8 39 fd ff ff       	call   100728 <inb>
}

void init_keyboard_drv() {
	register_intr_handler(0x21, &keyboard_handler);

	while(inb(0x64) & 0x1) {
  1009ef:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  1009f6:	e8 2d fd ff ff       	call   100728 <inb>
  1009fb:	0f b6 c0             	movzbl %al,%eax
  1009fe:	83 e0 01             	and    $0x1,%eax
  100a01:	84 c0                	test   %al,%al
  100a03:	75 de                	jne    1009e3 <init_keyboard_drv+0x1c>
		inb(0x60);
	}

	send_command(0xF4);
  100a05:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100a0c:	e8 7e ff ff ff       	call   10098f <send_command>

	init_done = 1;
  100a11:	c7 05 08 40 10 00 01 	movl   $0x1,0x104008
  100a18:	00 00 00 
}
  100a1b:	c9                   	leave  
  100a1c:	c3                   	ret    
  100a1d:	00 00                	add    %al,(%eax)
	...

00100a20 <vmm_create_context>:
#define ACT_CONTEXT 0xFF000000

static uint8_t use_phys_addr = 1;

struct vmm_context* vmm_create_context(void)
{
  100a20:	55                   	push   %ebp
  100a21:	89 e5                	mov    %esp,%ebp
  100a23:	83 ec 28             	sub    $0x28,%esp
  struct vmm_context* context = pmm_alloc();
  100a26:	e8 55 04 00 00       	call   100e80 <pmm_alloc>
  100a2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  int i;


  context->pagedir = pmm_alloc();
  100a2e:	e8 4d 04 00 00       	call   100e80 <pmm_alloc>
  100a33:	89 c2                	mov    %eax,%edx
  100a35:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a38:	89 10                	mov    %edx,(%eax)
  for (i = 0; i < 1023; i++) {
  100a3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100a41:	eb 17                	jmp    100a5a <vmm_create_context+0x3a>
    context->pagedir[i] = 0;
  100a43:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a46:	8b 00                	mov    (%eax),%eax
  100a48:	8b 55 f4             	mov    -0xc(%ebp),%edx
  100a4b:	c1 e2 02             	shl    $0x2,%edx
  100a4e:	01 d0                	add    %edx,%eax
  100a50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  struct vmm_context* context = pmm_alloc();
  int i;


  context->pagedir = pmm_alloc();
  for (i = 0; i < 1023; i++) {
  100a56:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100a5a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
  100a61:	7e e0                	jle    100a43 <vmm_create_context+0x23>
    context->pagedir[i] = 0;
  }
  context->pagedir[1023] = context->pagedir;
  100a63:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a66:	8b 00                	mov    (%eax),%eax
  100a68:	8d 90 fc 0f 00 00    	lea    0xffc(%eax),%edx
  100a6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a71:	8b 00                	mov    (%eax),%eax
  100a73:	89 02                	mov    %eax,(%edx)
  
  context->vpagedir = VIRT_PDIR;
  100a75:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a78:	c7 40 04 00 f0 ff ff 	movl   $0xfffff000,0x4(%eax)

  vmm_map_page(context, ACT_CONTEXT, context, PTE_PRESENT | PTE_WRITE);
  100a7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a82:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100a89:	00 
  100a8a:	89 44 24 08          	mov    %eax,0x8(%esp)
  100a8e:	c7 44 24 04 00 00 00 	movl   $0xff000000,0x4(%esp)
  100a95:	ff 
  100a96:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a99:	89 04 24             	mov    %eax,(%esp)
  100a9c:	e8 05 00 00 00       	call   100aa6 <vmm_map_page>
  
  return context;
  100aa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  100aa4:	c9                   	leave  
  100aa5:	c3                   	ret    

00100aa6 <vmm_map_page>:

int vmm_map_page(struct vmm_context* context, uintptr_t virt, uintptr_t phys, uint32_t flags)
{
  100aa6:	55                   	push   %ebp
  100aa7:	89 e5                	mov    %esp,%ebp
  100aa9:	53                   	push   %ebx
  100aaa:	83 ec 44             	sub    $0x44,%esp
  uint32_t page_index = virt / 0x1000;
  100aad:	8b 45 0c             	mov    0xc(%ebp),%eax
  100ab0:	c1 e8 0c             	shr    $0xc,%eax
  100ab3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  uint32_t pd_index = page_index / 1024;
  100ab6:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ab9:	c1 e8 0a             	shr    $0xa,%eax
  100abc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  uint32_t pt_index = page_index % 1024;
  100abf:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ac2:	25 ff 03 00 00       	and    $0x3ff,%eax
  100ac7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  
  uint32_t* page_dir;
  
  if(use_phys_addr) {
  100aca:	0f b6 05 00 21 10 00 	movzbl 0x102100,%eax
  100ad1:	84 c0                	test   %al,%al
  100ad3:	74 0a                	je     100adf <vmm_map_page+0x39>
    page_dir = context->pagedir;
  100ad5:	8b 45 08             	mov    0x8(%ebp),%eax
  100ad8:	8b 00                	mov    (%eax),%eax
  100ada:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100add:	eb 09                	jmp    100ae8 <vmm_map_page+0x42>
  }
  else
  {
    page_dir = context->vpagedir;
  100adf:	8b 45 08             	mov    0x8(%ebp),%eax
  100ae2:	8b 40 04             	mov    0x4(%eax),%eax
  100ae5:	89 45 ec             	mov    %eax,-0x14(%ebp)

  uint32_t* page_table;
  int i;

  /* Wir brauchen 4k-Alignment */
  if ((virt & 0xFFF) || (phys & 0xFFF)) {
  100ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
  100aeb:	25 ff 0f 00 00       	and    $0xfff,%eax
  100af0:	85 c0                	test   %eax,%eax
  100af2:	75 0c                	jne    100b00 <vmm_map_page+0x5a>
  100af4:	8b 45 10             	mov    0x10(%ebp),%eax
  100af7:	25 ff 0f 00 00       	and    $0xfff,%eax
  100afc:	85 c0                	test   %eax,%eax
  100afe:	74 24                	je     100b24 <vmm_map_page+0x7e>
			kprintf("map err %x to %x\n", phys, virt);
  100b00:	8b 45 0c             	mov    0xc(%ebp),%eax
  100b03:	89 44 24 08          	mov    %eax,0x8(%esp)
  100b07:	8b 45 10             	mov    0x10(%ebp),%eax
  100b0a:	89 44 24 04          	mov    %eax,0x4(%esp)
  100b0e:	c7 04 24 5a 30 10 00 	movl   $0x10305a,(%esp)
  100b15:	e8 e3 07 00 00       	call   1012fd <kprintf>
      return -1;
  100b1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100b1f:	e9 30 01 00 00       	jmp    100c54 <vmm_map_page+0x1ae>
  }

  if(use_phys_addr) {
  100b24:	0f b6 05 00 21 10 00 	movzbl 0x102100,%eax
  100b2b:	84 c0                	test   %al,%al
  100b2d:	74 6f                	je     100b9e <vmm_map_page+0xf8>
    if (page_dir[pd_index] & PTE_PRESENT) {
  100b2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b32:	c1 e0 02             	shl    $0x2,%eax
  100b35:	03 45 ec             	add    -0x14(%ebp),%eax
  100b38:	8b 00                	mov    (%eax),%eax
  100b3a:	83 e0 01             	and    $0x1,%eax
  100b3d:	84 c0                	test   %al,%al
  100b3f:	74 13                	je     100b54 <vmm_map_page+0xae>
      page_table = page_dir[pd_index];
  100b41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b44:	c1 e0 02             	shl    $0x2,%eax
  100b47:	03 45 ec             	add    -0x14(%ebp),%eax
  100b4a:	8b 00                	mov    (%eax),%eax
  100b4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100b4f:	e9 b4 00 00 00       	jmp    100c08 <vmm_map_page+0x162>
    } else {
      page_dir[pd_index] = (uint32_t) pmm_alloc() | PTE_PRESENT | PTE_WRITE;
  100b54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b57:	c1 e0 02             	shl    $0x2,%eax
  100b5a:	89 c3                	mov    %eax,%ebx
  100b5c:	03 5d ec             	add    -0x14(%ebp),%ebx
  100b5f:	e8 1c 03 00 00       	call   100e80 <pmm_alloc>
  100b64:	83 c8 03             	or     $0x3,%eax
  100b67:	89 03                	mov    %eax,(%ebx)
      
      page_table = page_dir[pd_index];
  100b69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b6c:	c1 e0 02             	shl    $0x2,%eax
  100b6f:	03 45 ec             	add    -0x14(%ebp),%eax
  100b72:	8b 00                	mov    (%eax),%eax
  100b74:	89 45 f0             	mov    %eax,-0x10(%ebp)

      for (i = 0; i < 1024; i++) {
  100b77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100b7e:	eb 13                	jmp    100b93 <vmm_map_page+0xed>
          page_table[i] = 0;
  100b80:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b83:	c1 e0 02             	shl    $0x2,%eax
  100b86:	03 45 f0             	add    -0x10(%ebp),%eax
  100b89:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    } else {
      page_dir[pd_index] = (uint32_t) pmm_alloc() | PTE_PRESENT | PTE_WRITE;
      
      page_table = page_dir[pd_index];

      for (i = 0; i < 1024; i++) {
  100b8f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100b93:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100b9a:	7e e4                	jle    100b80 <vmm_map_page+0xda>
  100b9c:	eb 6a                	jmp    100c08 <vmm_map_page+0x162>
      }
    }
  }
  else
  {
    if (page_dir[pd_index] & PTE_PRESENT) {
  100b9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100ba1:	c1 e0 02             	shl    $0x2,%eax
  100ba4:	03 45 ec             	add    -0x14(%ebp),%eax
  100ba7:	8b 00                	mov    (%eax),%eax
  100ba9:	83 e0 01             	and    $0x1,%eax
  100bac:	84 c0                	test   %al,%al
  100bae:	74 10                	je     100bc0 <vmm_map_page+0x11a>
      page_table = (uint32_t*) (0xFFC00000 + pd_index * 4096);
  100bb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100bb3:	05 00 fc 0f 00       	add    $0xffc00,%eax
  100bb8:	c1 e0 0c             	shl    $0xc,%eax
  100bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100bbe:	eb 48                	jmp    100c08 <vmm_map_page+0x162>
    } else {
      page_dir[pd_index] = (uint32_t) pmm_alloc() | PTE_PRESENT | PTE_WRITE;
  100bc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100bc3:	c1 e0 02             	shl    $0x2,%eax
  100bc6:	89 c3                	mov    %eax,%ebx
  100bc8:	03 5d ec             	add    -0x14(%ebp),%ebx
  100bcb:	e8 b0 02 00 00       	call   100e80 <pmm_alloc>
  100bd0:	83 c8 03             	or     $0x3,%eax
  100bd3:	89 03                	mov    %eax,(%ebx)
      
      page_table = (uint32_t*) (0xFFC00000  + pd_index * 4096);
  100bd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100bd8:	05 00 fc 0f 00       	add    $0xffc00,%eax
  100bdd:	c1 e0 0c             	shl    $0xc,%eax
  100be0:	89 45 f0             	mov    %eax,-0x10(%ebp)

      for (i = 0; i < 1024; i++) {
  100be3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100bea:	eb 13                	jmp    100bff <vmm_map_page+0x159>
          page_table[i] = 0;
  100bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100bef:	c1 e0 02             	shl    $0x2,%eax
  100bf2:	03 45 f0             	add    -0x10(%ebp),%eax
  100bf5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    } else {
      page_dir[pd_index] = (uint32_t) pmm_alloc() | PTE_PRESENT | PTE_WRITE;
      
      page_table = (uint32_t*) (0xFFC00000  + pd_index * 4096);

      for (i = 0; i < 1024; i++) {
  100bfb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100bff:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100c06:	7e e4                	jle    100bec <vmm_map_page+0x146>
      }
    }
  }

  /* Neues Mapping in the Page Table eintragen */
  page_table[pt_index] = phys | flags;
  100c08:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100c0b:	c1 e0 02             	shl    $0x2,%eax
  100c0e:	03 45 f0             	add    -0x10(%ebp),%eax
  100c11:	8b 55 14             	mov    0x14(%ebp),%edx
  100c14:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100c17:	09 ca                	or     %ecx,%edx
  100c19:	89 10                	mov    %edx,(%eax)
  asm volatile("invlpg %0" : : "m" (*(char*)virt));
  100c1b:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c1e:	0f 01 38             	invlpg (%eax)

	kprintf("mapped %x to %x\nPT:%x PTI:%x\n", phys, virt, page_table, &page_table[pt_index]);
  100c21:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100c24:	c1 e0 02             	shl    $0x2,%eax
  100c27:	03 45 f0             	add    -0x10(%ebp),%eax
  100c2a:	89 44 24 10          	mov    %eax,0x10(%esp)
  100c2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100c31:	89 44 24 0c          	mov    %eax,0xc(%esp)
  100c35:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c38:	89 44 24 08          	mov    %eax,0x8(%esp)
  100c3c:	8b 45 10             	mov    0x10(%ebp),%eax
  100c3f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c43:	c7 04 24 6c 30 10 00 	movl   $0x10306c,(%esp)
  100c4a:	e8 ae 06 00 00       	call   1012fd <kprintf>

  return 0;
  100c4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100c54:	83 c4 44             	add    $0x44,%esp
  100c57:	5b                   	pop    %ebx
  100c58:	5d                   	pop    %ebp
  100c59:	c3                   	ret    

00100c5a <vmm_activate_context>:
 
void vmm_activate_context(struct vmm_context* context)
{
  100c5a:	55                   	push   %ebp
  100c5b:	89 e5                	mov    %esp,%ebp
    asm volatile("mov %0, %%cr3" : : "r" (context->pagedir));
  100c5d:	8b 45 08             	mov    0x8(%ebp),%eax
  100c60:	8b 00                	mov    (%eax),%eax
  100c62:	0f 22 d8             	mov    %eax,%cr3
}
  100c65:	5d                   	pop    %ebp
  100c66:	c3                   	ret    

00100c67 <vmm_map_kernel>:

void vmm_map_kernel(struct vmm_context* context) {
  100c67:	55                   	push   %ebp
  100c68:	89 e5                	mov    %esp,%ebp
  100c6a:	83 ec 28             	sub    $0x28,%esp
	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  100c6d:	c7 45 f4 00 00 10 00 	movl   $0x100000,-0xc(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  100c74:	eb 28                	jmp    100c9e <vmm_map_kernel+0x37>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100c76:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100c7d:	00 
  100c7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c81:	89 44 24 08          	mov    %eax,0x8(%esp)
  100c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100c88:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c8c:	8b 45 08             	mov    0x8(%ebp),%eax
  100c8f:	89 04 24             	mov    %eax,(%esp)
  100c92:	e8 0f fe ff ff       	call   100aa6 <vmm_map_page>
		addr += 0x1000;
  100c97:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
void vmm_map_kernel(struct vmm_context* context) {
	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  100c9e:	b8 00 70 12 00       	mov    $0x127000,%eax
  100ca3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
  100ca6:	72 ce                	jb     100c76 <vmm_map_kernel+0xf>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}

	addr = 0xB8000;
  100ca8:	c7 45 f4 00 80 0b 00 	movl   $0xb8000,-0xc(%ebp)
	while (addr < 0xBFFFF) {
  100caf:	eb 28                	jmp    100cd9 <vmm_map_kernel+0x72>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100cb1:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100cb8:	00 
  100cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100cbc:	89 44 24 08          	mov    %eax,0x8(%esp)
  100cc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100cc3:	89 44 24 04          	mov    %eax,0x4(%esp)
  100cc7:	8b 45 08             	mov    0x8(%ebp),%eax
  100cca:	89 04 24             	mov    %eax,(%esp)
  100ccd:	e8 d4 fd ff ff       	call   100aa6 <vmm_map_page>
		addr += 0x1000;
  100cd2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}

	addr = 0xB8000;
	while (addr < 0xBFFFF) {
  100cd9:	81 7d f4 fe ff 0b 00 	cmpl   $0xbfffe,-0xc(%ebp)
  100ce0:	76 cf                	jbe    100cb1 <vmm_map_kernel+0x4a>
		vmm_map_page(context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
		addr += 0x1000;
	}
}
  100ce2:	c9                   	leave  
  100ce3:	c3                   	ret    

00100ce4 <vmm_set_alloc_offset>:

void vmm_set_alloc_offset(struct vmm_context* context, uintptr_t offset) {
  100ce4:	55                   	push   %ebp
  100ce5:	89 e5                	mov    %esp,%ebp
	context->alloc_offset = offset;
  100ce7:	8b 45 08             	mov    0x8(%ebp),%eax
  100cea:	8b 55 0c             	mov    0xc(%ebp),%edx
  100ced:	89 50 08             	mov    %edx,0x8(%eax)
}
  100cf0:	5d                   	pop    %ebp
  100cf1:	c3                   	ret    

00100cf2 <vmm_alloc>:

void* vmm_alloc(struct vmm_context* context, uint16_t count) {
  100cf2:	55                   	push   %ebp
  100cf3:	89 e5                	mov    %esp,%ebp
  100cf5:	83 ec 38             	sub    $0x38,%esp
  100cf8:	8b 45 0c             	mov    0xc(%ebp),%eax
  100cfb:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	uintptr_t ptr = context->alloc_offset;
  100cff:	8b 45 08             	mov    0x8(%ebp),%eax
  100d02:	8b 40 08             	mov    0x8(%eax),%eax
  100d05:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
	while(count--) {
  100d08:	eb 3a                	jmp    100d44 <vmm_alloc+0x52>
		vmm_map_page(context, context->alloc_offset, (uintptr_t) pmm_alloc(), PTE_PRESENT | PTE_WRITE | PTE_USER);
  100d0a:	e8 71 01 00 00       	call   100e80 <pmm_alloc>
  100d0f:	89 c2                	mov    %eax,%edx
  100d11:	8b 45 08             	mov    0x8(%ebp),%eax
  100d14:	8b 40 08             	mov    0x8(%eax),%eax
  100d17:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  100d1e:	00 
  100d1f:	89 54 24 08          	mov    %edx,0x8(%esp)
  100d23:	89 44 24 04          	mov    %eax,0x4(%esp)
  100d27:	8b 45 08             	mov    0x8(%ebp),%eax
  100d2a:	89 04 24             	mov    %eax,(%esp)
  100d2d:	e8 74 fd ff ff       	call   100aa6 <vmm_map_page>
		context->alloc_offset += 0x1000;
  100d32:	8b 45 08             	mov    0x8(%ebp),%eax
  100d35:	8b 40 08             	mov    0x8(%eax),%eax
  100d38:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
  100d3e:	8b 45 08             	mov    0x8(%ebp),%eax
  100d41:	89 50 08             	mov    %edx,0x8(%eax)
}

void* vmm_alloc(struct vmm_context* context, uint16_t count) {
	uintptr_t ptr = context->alloc_offset;
	
	while(count--) {
  100d44:	66 83 7d e4 00       	cmpw   $0x0,-0x1c(%ebp)
  100d49:	0f 95 c0             	setne  %al
  100d4c:	66 83 6d e4 01       	subw   $0x1,-0x1c(%ebp)
  100d51:	84 c0                	test   %al,%al
  100d53:	75 b5                	jne    100d0a <vmm_alloc+0x18>
		vmm_map_page(context, context->alloc_offset, (uintptr_t) pmm_alloc(), PTE_PRESENT | PTE_WRITE | PTE_USER);
		context->alloc_offset += 0x1000;
	}

	return (void*)(ptr);
  100d55:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  100d58:	c9                   	leave  
  100d59:	c3                   	ret    

00100d5a <vmm_init>:
 
static struct vmm_context* kernel_context;
 
struct vmm_context* vmm_init(struct multiboot_info* mb_info)
{
  100d5a:	55                   	push   %ebp
  100d5b:	89 e5                	mov    %esp,%ebp
  100d5d:	83 ec 28             	sub    $0x28,%esp
  kernel_context = vmm_create_context();
  100d60:	e8 bb fc ff ff       	call   100a20 <vmm_create_context>
  100d65:	a3 20 40 10 00       	mov    %eax,0x104020

	vmm_map_kernel(kernel_context);
  100d6a:	a1 20 40 10 00       	mov    0x104020,%eax
  100d6f:	89 04 24             	mov    %eax,(%esp)
  100d72:	e8 f0 fe ff ff       	call   100c67 <vmm_map_kernel>
	
  struct multiboot_module* modules = mb_info->mi_mods_addr;
  100d77:	8b 45 08             	mov    0x8(%ebp),%eax
  100d7a:	8b 40 18             	mov    0x18(%eax),%eax
  100d7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  int i;

  vmm_map_page(kernel_context, (uintptr_t) mb_info, (uintptr_t) mb_info, PTE_PRESENT | PTE_WRITE);
  100d80:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100d83:	8b 55 08             	mov    0x8(%ebp),%edx
  100d86:	a1 20 40 10 00       	mov    0x104020,%eax
  100d8b:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100d92:	00 
  100d93:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100d97:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d9b:	89 04 24             	mov    %eax,(%esp)
  100d9e:	e8 03 fd ff ff       	call   100aa6 <vmm_map_page>
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);
  100da3:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100da6:	8b 55 e8             	mov    -0x18(%ebp),%edx
  100da9:	a1 20 40 10 00       	mov    0x104020,%eax
  100dae:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100db5:	00 
  100db6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100dba:	89 54 24 04          	mov    %edx,0x4(%esp)
  100dbe:	89 04 24             	mov    %eax,(%esp)
  100dc1:	e8 e0 fc ff ff       	call   100aa6 <vmm_map_page>

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100dc6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100dcd:	eb 4f                	jmp    100e1e <vmm_init+0xc4>
      addr = (uintptr_t)modules[i].start;
  100dcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100dd2:	c1 e0 04             	shl    $0x4,%eax
  100dd5:	03 45 e8             	add    -0x18(%ebp),%eax
  100dd8:	8b 00                	mov    (%eax),%eax
  100dda:	89 45 f0             	mov    %eax,-0x10(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  100ddd:	eb 2a                	jmp    100e09 <vmm_init+0xaf>
 				  vmm_map_page(kernel_context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
  100ddf:	a1 20 40 10 00       	mov    0x104020,%eax
  100de4:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  100deb:	00 
  100dec:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100def:	89 54 24 08          	mov    %edx,0x8(%esp)
  100df3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100df6:	89 54 24 04          	mov    %edx,0x4(%esp)
  100dfa:	89 04 24             	mov    %eax,(%esp)
  100dfd:	e8 a4 fc ff ff       	call   100aa6 <vmm_map_page>
          addr += 0x1000;
  100e02:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  100e09:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e0c:	c1 e0 04             	shl    $0x4,%eax
  100e0f:	03 45 e8             	add    -0x18(%ebp),%eax
  100e12:	8b 40 04             	mov    0x4(%eax),%eax
  100e15:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100e18:	77 c5                	ja     100ddf <vmm_init+0x85>

  vmm_map_page(kernel_context, (uintptr_t) mb_info, (uintptr_t) mb_info, PTE_PRESENT | PTE_WRITE);
  vmm_map_page(kernel_context, (uintptr_t) modules, (uintptr_t) modules, PTE_PRESENT | PTE_WRITE);

	uintptr_t addr;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  100e1a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  100e1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100e21:	8b 45 08             	mov    0x8(%ebp),%eax
  100e24:	8b 40 14             	mov    0x14(%eax),%eax
  100e27:	39 c2                	cmp    %eax,%edx
  100e29:	72 a4                	jb     100dcf <vmm_init+0x75>
 				  vmm_map_page(kernel_context, (uintptr_t) addr, (uintptr_t) addr, PTE_PRESENT | PTE_WRITE);
          addr += 0x1000;
      }
  }

	vmm_set_alloc_offset(kernel_context, 0x200000);
  100e2b:	a1 20 40 10 00       	mov    0x104020,%eax
  100e30:	c7 44 24 04 00 00 20 	movl   $0x200000,0x4(%esp)
  100e37:	00 
  100e38:	89 04 24             	mov    %eax,(%esp)
  100e3b:	e8 a4 fe ff ff       	call   100ce4 <vmm_set_alloc_offset>
 
  vmm_activate_context(kernel_context);
  100e40:	a1 20 40 10 00       	mov    0x104020,%eax
  100e45:	89 04 24             	mov    %eax,(%esp)
  100e48:	e8 0d fe ff ff       	call   100c5a <vmm_activate_context>
  
  uint32_t cr0;
  
  while(1) { }
  100e4d:	eb fe                	jmp    100e4d <vmm_init+0xf3>
	...

00100e50 <memset>:

#include "stddef.h"
#include "console.h"

static inline void* memset(void* buf, int c, int n)
{
  100e50:	55                   	push   %ebp
  100e51:	89 e5                	mov    %esp,%ebp
  100e53:	83 ec 10             	sub    $0x10,%esp
    unsigned char* p = buf;
  100e56:	8b 45 08             	mov    0x8(%ebp),%eax
  100e59:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (n--) {
  100e5c:	eb 0e                	jmp    100e6c <memset+0x1c>
        *p++ = c;
  100e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100e61:	89 c2                	mov    %eax,%edx
  100e63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100e66:	88 10                	mov    %dl,(%eax)
  100e68:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

static inline void* memset(void* buf, int c, int n)
{
    unsigned char* p = buf;

    while (n--) {
  100e6c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100e70:	0f 95 c0             	setne  %al
  100e73:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
  100e77:	84 c0                	test   %al,%al
  100e79:	75 e3                	jne    100e5e <memset+0xe>
        *p++ = c;
    }

    return buf;
  100e7b:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100e7e:	c9                   	leave  
  100e7f:	c3                   	ret    

00100e80 <pmm_alloc>:

#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
  100e80:	55                   	push   %ebp
  100e81:	89 e5                	mov    %esp,%ebp
  100e83:	57                   	push   %edi
  100e84:	56                   	push   %esi
  100e85:	53                   	push   %ebx
  100e86:	83 ec 10             	sub    $0x10,%esp
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100e89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100e90:	eb 7b                	jmp    100f0d <pmm_alloc+0x8d>
		if(allocatable[i]) {
  100e92:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e95:	8b 04 85 80 64 10 00 	mov    0x106480(,%eax,4),%eax
  100e9c:	85 c0                	test   %eax,%eax
  100e9e:	74 69                	je     100f09 <pmm_alloc+0x89>
			int s;
			for(s = 0; s < 32; s++) {
  100ea0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  100ea7:	eb 5a                	jmp    100f03 <pmm_alloc+0x83>
				if(allocatable[i] & (1 << s)) {
  100ea9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100eac:	8b 14 85 80 64 10 00 	mov    0x106480(,%eax,4),%edx
  100eb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100eb6:	bb 01 00 00 00       	mov    $0x1,%ebx
  100ebb:	89 de                	mov    %ebx,%esi
  100ebd:	89 c1                	mov    %eax,%ecx
  100ebf:	d3 e6                	shl    %cl,%esi
  100ec1:	89 f0                	mov    %esi,%eax
  100ec3:	21 d0                	and    %edx,%eax
  100ec5:	85 c0                	test   %eax,%eax
  100ec7:	74 36                	je     100eff <pmm_alloc+0x7f>
					allocatable[i] &= ~(1 << s);
  100ec9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ecc:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100ecf:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100ed6:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100ed9:	be 01 00 00 00       	mov    $0x1,%esi
  100ede:	89 f7                	mov    %esi,%edi
  100ee0:	89 d1                	mov    %edx,%ecx
  100ee2:	d3 e7                	shl    %cl,%edi
  100ee4:	89 fa                	mov    %edi,%edx
  100ee6:	f7 d2                	not    %edx
  100ee8:	21 da                	and    %ebx,%edx
  100eea:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
					return (uint8_t*)((i * 32 + s) * 4096);
  100ef1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ef4:	c1 e0 05             	shl    $0x5,%eax
  100ef7:	03 45 f0             	add    -0x10(%ebp),%eax
  100efa:	c1 e0 0c             	shl    $0xc,%eax
  100efd:	eb 20                	jmp    100f1f <pmm_alloc+0x9f>
void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
		if(allocatable[i]) {
			int s;
			for(s = 0; s < 32; s++) {
  100eff:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  100f03:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  100f07:	7e a0                	jle    100ea9 <pmm_alloc+0x29>

uint32_t allocatable[BITMAP_SIZE];

void* pmm_alloc() {
	int i;
	for(i = 0; i < BITMAP_SIZE; i++) {
  100f09:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  100f0d:	81 7d ec ff 7f 00 00 	cmpl   $0x7fff,-0x14(%ebp)
  100f14:	0f 8e 78 ff ff ff    	jle    100e92 <pmm_alloc+0x12>
					return (uint8_t*)((i * 32 + s) * 4096);
				}
			}
		}	
	}
	return NULL;
  100f1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100f1f:	83 c4 10             	add    $0x10,%esp
  100f22:	5b                   	pop    %ebx
  100f23:	5e                   	pop    %esi
  100f24:	5f                   	pop    %edi
  100f25:	5d                   	pop    %ebp
  100f26:	c3                   	ret    

00100f27 <pmm_free>:

void pmm_free(void* addr) {
  100f27:	55                   	push   %ebp
  100f28:	89 e5                	mov    %esp,%ebp
  100f2a:	57                   	push   %edi
  100f2b:	56                   	push   %esi
  100f2c:	53                   	push   %ebx
  100f2d:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100f30:	8b 45 08             	mov    0x8(%ebp),%eax
  100f33:	c1 e8 0c             	shr    $0xc,%eax
  100f36:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uintptr_t s = ptr % 32;
  100f39:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f3c:	83 e0 1f             	and    $0x1f,%eax
  100f3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t i = ptr / 32;
  100f42:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f45:	c1 e8 05             	shr    $0x5,%eax
  100f48:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] |= (1 << s);
  100f4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100f4e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100f51:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100f58:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100f5b:	be 01 00 00 00       	mov    $0x1,%esi
  100f60:	89 f7                	mov    %esi,%edi
  100f62:	89 d1                	mov    %edx,%ecx
  100f64:	d3 e7                	shl    %cl,%edi
  100f66:	89 fa                	mov    %edi,%edx
  100f68:	09 da                	or     %ebx,%edx
  100f6a:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
}
  100f71:	83 c4 10             	add    $0x10,%esp
  100f74:	5b                   	pop    %ebx
  100f75:	5e                   	pop    %esi
  100f76:	5f                   	pop    %edi
  100f77:	5d                   	pop    %ebp
  100f78:	c3                   	ret    

00100f79 <pmm_mark_used>:

void pmm_mark_used(void* addr)  {
  100f79:	55                   	push   %ebp
  100f7a:	89 e5                	mov    %esp,%ebp
  100f7c:	57                   	push   %edi
  100f7d:	56                   	push   %esi
  100f7e:	53                   	push   %ebx
  100f7f:	83 ec 10             	sub    $0x10,%esp
	uintptr_t ptr = ((uintptr_t)addr) / 4096;
  100f82:	8b 45 08             	mov    0x8(%ebp),%eax
  100f85:	c1 e8 0c             	shr    $0xc,%eax
  100f88:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uintptr_t s = ptr % 32;
  100f8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f8e:	83 e0 1f             	and    $0x1f,%eax
  100f91:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t i = ptr / 32;
  100f94:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f97:	c1 e8 05             	shr    $0x5,%eax
  100f9a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	allocatable[i] &= ~(1 << s);
  100f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100fa0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100fa3:	8b 1c 95 80 64 10 00 	mov    0x106480(,%edx,4),%ebx
  100faa:	8b 55 ec             	mov    -0x14(%ebp),%edx
  100fad:	be 01 00 00 00       	mov    $0x1,%esi
  100fb2:	89 f7                	mov    %esi,%edi
  100fb4:	89 d1                	mov    %edx,%ecx
  100fb6:	d3 e7                	shl    %cl,%edi
  100fb8:	89 fa                	mov    %edi,%edx
  100fba:	f7 d2                	not    %edx
  100fbc:	21 da                	and    %ebx,%edx
  100fbe:	89 14 85 80 64 10 00 	mov    %edx,0x106480(,%eax,4)
}
  100fc5:	83 c4 10             	add    $0x10,%esp
  100fc8:	5b                   	pop    %ebx
  100fc9:	5e                   	pop    %esi
  100fca:	5f                   	pop    %edi
  100fcb:	5d                   	pop    %ebp
  100fcc:	c3                   	ret    

00100fcd <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  100fcd:	55                   	push   %ebp
  100fce:	89 e5                	mov    %esp,%ebp
  100fd0:	83 ec 38             	sub    $0x38,%esp
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  100fd3:	8b 45 08             	mov    0x8(%ebp),%eax
  100fd6:	8b 40 30             	mov    0x30(%eax),%eax
  100fd9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	struct multiboot_mmap* mmap_end = (void*)
		  ((uintptr_t) mb_info->mi_mmap_addr + mb_info->mi_mmap_length);
  100fdc:	8b 45 08             	mov    0x8(%ebp),%eax
  100fdf:	8b 40 30             	mov    0x30(%eax),%eax
  100fe2:	89 c2                	mov    %eax,%edx
  100fe4:	8b 45 08             	mov    0x8(%ebp),%eax
  100fe7:	8b 40 2c             	mov    0x2c(%eax),%eax
  100fea:	8d 04 02             	lea    (%edx,%eax,1),%eax
  100fed:	89 45 e0             	mov    %eax,-0x20(%ebp)

	memset(allocatable, 0, sizeof(allocatable));
  100ff0:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  100ff7:	00 
  100ff8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100fff:	00 
  101000:	c7 04 24 80 64 10 00 	movl   $0x106480,(%esp)
  101007:	e8 44 fe ff ff       	call   100e50 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  10100c:	b8 80 64 12 00       	mov    $0x126480,%eax
  101011:	89 44 24 08          	mov    %eax,0x8(%esp)
  101015:	c7 44 24 04 80 64 10 	movl   $0x106480,0x4(%esp)
  10101c:	00 
  10101d:	c7 04 24 8a 30 10 00 	movl   $0x10308a,(%esp)
  101024:	e8 d4 02 00 00       	call   1012fd <kprintf>
	 
	while (mmap < mmap_end) {
  101029:	eb 46                	jmp    101071 <pmm_init+0xa4>
		  if (mmap->mm_type == 1) {
  10102b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10102e:	8b 40 14             	mov    0x14(%eax),%eax
  101031:	83 f8 01             	cmp    $0x1,%eax
  101034:	75 37                	jne    10106d <pmm_init+0xa0>
		      uintptr_t addr = mmap->mm_base_addr;
  101036:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101039:	8b 50 08             	mov    0x8(%eax),%edx
  10103c:	8b 40 04             	mov    0x4(%eax),%eax
  10103f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		      uintptr_t end_addr = addr + mmap->mm_length;
  101042:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101045:	8b 50 10             	mov    0x10(%eax),%edx
  101048:	8b 40 0c             	mov    0xc(%eax),%eax
  10104b:	03 45 f0             	add    -0x10(%ebp),%eax
  10104e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 
		      while (addr < end_addr) {
  101051:	eb 12                	jmp    101065 <pmm_init+0x98>
		          pmm_free((void*) addr);
  101053:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101056:	89 04 24             	mov    %eax,(%esp)
  101059:	e8 c9 fe ff ff       	call   100f27 <pmm_free>
		          addr += 0x1000;
  10105e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	while (mmap < mmap_end) {
		  if (mmap->mm_type == 1) {
		      uintptr_t addr = mmap->mm_base_addr;
		      uintptr_t end_addr = addr + mmap->mm_length;
	 
		      while (addr < end_addr) {
  101065:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101068:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10106b:	72 e6                	jb     101053 <pmm_init+0x86>
		          pmm_free((void*) addr);
		          addr += 0x1000;
		      }
		  }
		  mmap++;
  10106d:	83 45 dc 18          	addl   $0x18,-0x24(%ebp)

	memset(allocatable, 0, sizeof(allocatable));

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
	 
	while (mmap < mmap_end) {
  101071:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101074:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  101077:	72 b2                	jb     10102b <pmm_init+0x5e>
	}

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
  101079:	c7 45 e4 00 00 10 00 	movl   $0x100000,-0x1c(%ebp)
	while (addr < (uintptr_t) &kernel_end) {
  101080:	eb 12                	jmp    101094 <pmm_init+0xc7>
		  pmm_mark_used((void*) addr);
  101082:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101085:	89 04 24             	mov    %eax,(%esp)
  101088:	e8 ec fe ff ff       	call   100f79 <pmm_mark_used>
		  addr += 0x1000;
  10108d:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)

	extern const void kernel_start;
	extern const void kernel_end;
	 
	uintptr_t addr = (uintptr_t) &kernel_start;
	while (addr < (uintptr_t) &kernel_end) {
  101094:	b8 00 70 12 00       	mov    $0x127000,%eax
  101099:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
  10109c:	72 e4                	jb     101082 <pmm_init+0xb5>
		  pmm_mark_used((void*) addr);
		  addr += 0x1000;
	}

  struct multiboot_module* modules = mb_info->mi_mods_addr;
  10109e:	8b 45 08             	mov    0x8(%ebp),%eax
  1010a1:	8b 40 18             	mov    0x18(%eax),%eax
  1010a4:	89 45 e8             	mov    %eax,-0x18(%ebp)

  pmm_mark_used(mb_info);
  1010a7:	8b 45 08             	mov    0x8(%ebp),%eax
  1010aa:	89 04 24             	mov    %eax,(%esp)
  1010ad:	e8 c7 fe ff ff       	call   100f79 <pmm_mark_used>
  pmm_mark_used(modules);
  1010b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1010b5:	89 04 24             	mov    %eax,(%esp)
  1010b8:	e8 bc fe ff ff       	call   100f79 <pmm_mark_used>

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1010bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1010c4:	eb 37                	jmp    1010fd <pmm_init+0x130>
      addr = (uintptr_t)modules[i].start;
  1010c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1010c9:	c1 e0 04             	shl    $0x4,%eax
  1010cc:	03 45 e8             	add    -0x18(%ebp),%eax
  1010cf:	8b 00                	mov    (%eax),%eax
  1010d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      while (addr < (uintptr_t)modules[i].end) {
  1010d4:	eb 12                	jmp    1010e8 <pmm_init+0x11b>
          pmm_mark_used((void*) addr);
  1010d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1010d9:	89 04 24             	mov    %eax,(%esp)
  1010dc:	e8 98 fe ff ff       	call   100f79 <pmm_mark_used>
          addr += 0x1000;
  1010e1:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
      addr = (uintptr_t)modules[i].start;
      while (addr < (uintptr_t)modules[i].end) {
  1010e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1010eb:	c1 e0 04             	shl    $0x4,%eax
  1010ee:	03 45 e8             	add    -0x18(%ebp),%eax
  1010f1:	8b 40 04             	mov    0x4(%eax),%eax
  1010f4:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  1010f7:	77 dd                	ja     1010d6 <pmm_init+0x109>

  pmm_mark_used(mb_info);
  pmm_mark_used(modules);

  int i;
  for (i = 0; i < mb_info->mi_mods_count; i++) {
  1010f9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  1010fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101100:	8b 45 08             	mov    0x8(%ebp),%eax
  101103:	8b 40 14             	mov    0x14(%eax),%eax
  101106:	39 c2                	cmp    %eax,%edx
  101108:	72 bc                	jb     1010c6 <pmm_init+0xf9>
      while (addr < (uintptr_t)modules[i].end) {
          pmm_mark_used((void*) addr);
          addr += 0x1000;
      }
  }
}
  10110a:	c9                   	leave  
  10110b:	c3                   	ret    

0010110c <kputc>:
static char* video = (char*) 0xb8000;

static int kprintf_res = 0;

static void kputc(char c)
{
  10110c:	55                   	push   %ebp
  10110d:	89 e5                	mov    %esp,%ebp
  10110f:	83 ec 14             	sub    $0x14,%esp
  101112:	8b 45 08             	mov    0x8(%ebp),%eax
  101115:	88 45 ec             	mov    %al,-0x14(%ebp)
    if ((c == '\n') || (x > 79)) {
  101118:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  10111c:	74 0a                	je     101128 <kputc+0x1c>
  10111e:	a1 24 40 10 00       	mov    0x104024,%eax
  101123:	83 f8 4f             	cmp    $0x4f,%eax
  101126:	7e 17                	jle    10113f <kputc+0x33>
        x = 0;
  101128:	c7 05 24 40 10 00 00 	movl   $0x0,0x104024
  10112f:	00 00 00 
        y++;
  101132:	a1 28 40 10 00       	mov    0x104028,%eax
  101137:	83 c0 01             	add    $0x1,%eax
  10113a:	a3 28 40 10 00       	mov    %eax,0x104028
    }

    if (c == '\n') {
  10113f:	80 7d ec 0a          	cmpb   $0xa,-0x14(%ebp)
  101143:	0f 84 dd 00 00 00    	je     101226 <kputc+0x11a>
        return;
    }

    if (y > 24) {
  101149:	a1 28 40 10 00       	mov    0x104028,%eax
  10114e:	83 f8 18             	cmp    $0x18,%eax
  101151:	7e 61                	jle    1011b4 <kputc+0xa8>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  101153:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10115a:	eb 24                	jmp    101180 <kputc+0x74>
            video[i] = video[i + 160];
  10115c:	8b 15 04 21 10 00    	mov    0x102104,%edx
  101162:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101165:	01 c2                	add    %eax,%edx
  101167:	a1 04 21 10 00       	mov    0x102104,%eax
  10116c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10116f:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  101175:	01 c8                	add    %ecx,%eax
  101177:	0f b6 00             	movzbl (%eax),%eax
  10117a:	88 02                	mov    %al,(%edx)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  10117c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  101180:	81 7d fc ff 0e 00 00 	cmpl   $0xeff,-0x4(%ebp)
  101187:	7e d3                	jle    10115c <kputc+0x50>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  101189:	eb 13                	jmp    10119e <kputc+0x92>
            video[i] = 0;
  10118b:	8b 15 04 21 10 00    	mov    0x102104,%edx
  101191:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101194:	8d 04 02             	lea    (%edx,%eax,1),%eax
  101197:	c6 00 00             	movb   $0x0,(%eax)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10119a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  10119e:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  1011a5:	7e e4                	jle    10118b <kputc+0x7f>
            video[i] = 0;
        }
        y--;
  1011a7:	a1 28 40 10 00       	mov    0x104028,%eax
  1011ac:	83 e8 01             	sub    $0x1,%eax
  1011af:	a3 28 40 10 00       	mov    %eax,0x104028
    }

    video[2 * (y * 80 + x)] = c;
  1011b4:	8b 0d 04 21 10 00    	mov    0x102104,%ecx
  1011ba:	8b 15 28 40 10 00    	mov    0x104028,%edx
  1011c0:	89 d0                	mov    %edx,%eax
  1011c2:	c1 e0 02             	shl    $0x2,%eax
  1011c5:	01 d0                	add    %edx,%eax
  1011c7:	c1 e0 04             	shl    $0x4,%eax
  1011ca:	89 c2                	mov    %eax,%edx
  1011cc:	a1 24 40 10 00       	mov    0x104024,%eax
  1011d1:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1011d4:	01 c0                	add    %eax,%eax
  1011d6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  1011d9:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  1011dd:	88 02                	mov    %al,(%edx)
    video[2 * (y * 80 + x) + 1] = 0x07;
  1011df:	8b 0d 04 21 10 00    	mov    0x102104,%ecx
  1011e5:	8b 15 28 40 10 00    	mov    0x104028,%edx
  1011eb:	89 d0                	mov    %edx,%eax
  1011ed:	c1 e0 02             	shl    $0x2,%eax
  1011f0:	01 d0                	add    %edx,%eax
  1011f2:	c1 e0 04             	shl    $0x4,%eax
  1011f5:	89 c2                	mov    %eax,%edx
  1011f7:	a1 24 40 10 00       	mov    0x104024,%eax
  1011fc:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1011ff:	01 c0                	add    %eax,%eax
  101201:	83 c0 01             	add    $0x1,%eax
  101204:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  101207:	c6 00 07             	movb   $0x7,(%eax)

    x++;
  10120a:	a1 24 40 10 00       	mov    0x104024,%eax
  10120f:	83 c0 01             	add    $0x1,%eax
  101212:	a3 24 40 10 00       	mov    %eax,0x104024
    kprintf_res++;
  101217:	a1 2c 40 10 00       	mov    0x10402c,%eax
  10121c:	83 c0 01             	add    $0x1,%eax
  10121f:	a3 2c 40 10 00       	mov    %eax,0x10402c
  101224:	eb 01                	jmp    101227 <kputc+0x11b>
        x = 0;
        y++;
    }

    if (c == '\n') {
        return;
  101226:	90                   	nop
    video[2 * (y * 80 + x)] = c;
    video[2 * (y * 80 + x) + 1] = 0x07;

    x++;
    kprintf_res++;
}
  101227:	c9                   	leave  
  101228:	c3                   	ret    

00101229 <kputs>:

static void kputs(const char* s)
{
  101229:	55                   	push   %ebp
  10122a:	89 e5                	mov    %esp,%ebp
  10122c:	83 ec 04             	sub    $0x4,%esp
    while (*s) {
  10122f:	eb 15                	jmp    101246 <kputs+0x1d>
        kputc(*s++);
  101231:	8b 45 08             	mov    0x8(%ebp),%eax
  101234:	0f b6 00             	movzbl (%eax),%eax
  101237:	0f be c0             	movsbl %al,%eax
  10123a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10123e:	89 04 24             	mov    %eax,(%esp)
  101241:	e8 c6 fe ff ff       	call   10110c <kputc>
    kprintf_res++;
}

static void kputs(const char* s)
{
    while (*s) {
  101246:	8b 45 08             	mov    0x8(%ebp),%eax
  101249:	0f b6 00             	movzbl (%eax),%eax
  10124c:	84 c0                	test   %al,%al
  10124e:	75 e1                	jne    101231 <kputs+0x8>
        kputc(*s++);
    }
}
  101250:	c9                   	leave  
  101251:	c3                   	ret    

00101252 <kputn>:

static void kputn(unsigned long x, int base)
{
  101252:	55                   	push   %ebp
  101253:	89 e5                	mov    %esp,%ebp
  101255:	83 ec 58             	sub    $0x58,%esp
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  101258:	c7 45 f8 a0 30 10 00 	movl   $0x1030a0,-0x8(%ebp)
    char* p;

    if (base > 36) {
  10125f:	83 7d 0c 24          	cmpl   $0x24,0xc(%ebp)
  101263:	7f 54                	jg     1012b9 <kputn+0x67>
        return;
    }

    p = buf + 64;
  101265:	8d 45 b7             	lea    -0x49(%ebp),%eax
  101268:	83 c0 40             	add    $0x40,%eax
  10126b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *p = '\0';
  10126e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101271:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  101274:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
  101278:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10127b:	8b 45 08             	mov    0x8(%ebp),%eax
  10127e:	ba 00 00 00 00       	mov    $0x0,%edx
  101283:	f7 f1                	div    %ecx
  101285:	89 d0                	mov    %edx,%eax
  101287:	03 45 f8             	add    -0x8(%ebp),%eax
  10128a:	0f b6 10             	movzbl (%eax),%edx
  10128d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101290:	88 10                	mov    %dl,(%eax)
        x /= base;
  101292:	8b 45 0c             	mov    0xc(%ebp),%eax
  101295:	89 45 ac             	mov    %eax,-0x54(%ebp)
  101298:	8b 45 08             	mov    0x8(%ebp),%eax
  10129b:	ba 00 00 00 00       	mov    $0x0,%edx
  1012a0:	f7 75 ac             	divl   -0x54(%ebp)
  1012a3:	89 45 08             	mov    %eax,0x8(%ebp)
    } while (x);
  1012a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1012aa:	75 c8                	jne    101274 <kputn+0x22>
    kputs(p);
  1012ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1012af:	89 04 24             	mov    %eax,(%esp)
  1012b2:	e8 72 ff ff ff       	call   101229 <kputs>
  1012b7:	eb 01                	jmp    1012ba <kputn+0x68>
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* p;

    if (base > 36) {
        return;
  1012b9:	90                   	nop
    do {
        *--p = digits[x % base];
        x /= base;
    } while (x);
    kputs(p);
}
  1012ba:	c9                   	leave  
  1012bb:	c3                   	ret    

001012bc <clrscr>:

void clrscr(void)
{
  1012bc:	55                   	push   %ebp
  1012bd:	89 e5                	mov    %esp,%ebp
  1012bf:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1012c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1012c9:	eb 13                	jmp    1012de <clrscr+0x22>
        video[i] = 0;
  1012cb:	8b 15 04 21 10 00    	mov    0x102104,%edx
  1012d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1012d4:	8d 04 02             	lea    (%edx,%eax,1),%eax
  1012d7:	c6 00 00             	movb   $0x0,(%eax)
}

void clrscr(void)
{
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1012da:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1012de:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  1012e5:	7e e4                	jle    1012cb <clrscr+0xf>
        video[i] = 0;
    }

    x = y = 0;
  1012e7:	c7 05 28 40 10 00 00 	movl   $0x0,0x104028
  1012ee:	00 00 00 
  1012f1:	a1 28 40 10 00       	mov    0x104028,%eax
  1012f6:	a3 24 40 10 00       	mov    %eax,0x104024
}
  1012fb:	c9                   	leave  
  1012fc:	c3                   	ret    

001012fd <kprintf>:

int kprintf(const char* fmt, ...)
{
  1012fd:	55                   	push   %ebp
  1012fe:	89 e5                	mov    %esp,%ebp
  101300:	83 ec 18             	sub    $0x18,%esp
  va_list ap;
  const char* s;
  unsigned long n;
	char c;

  va_start(ap, fmt);
  101303:	8d 45 0c             	lea    0xc(%ebp),%eax
  101306:	89 45 f0             	mov    %eax,-0x10(%ebp)
  kprintf_res = 0;
  101309:	c7 05 2c 40 10 00 00 	movl   $0x0,0x10402c
  101310:	00 00 00 
  while (*fmt) {
  101313:	e9 2d 01 00 00       	jmp    101445 <kprintf+0x148>
    if (*fmt == '%') {
  101318:	8b 45 08             	mov    0x8(%ebp),%eax
  10131b:	0f b6 00             	movzbl (%eax),%eax
  10131e:	3c 25                	cmp    $0x25,%al
  101320:	0f 85 0a 01 00 00    	jne    101430 <kprintf+0x133>
      fmt++;
  101326:	83 45 08 01          	addl   $0x1,0x8(%ebp)
      switch (*fmt) {
  10132a:	8b 45 08             	mov    0x8(%ebp),%eax
  10132d:	0f b6 00             	movzbl (%eax),%eax
  101330:	0f be c0             	movsbl %al,%eax
  101333:	83 f8 70             	cmp    $0x70,%eax
  101336:	0f 84 87 00 00 00    	je     1013c3 <kprintf+0xc6>
  10133c:	83 f8 70             	cmp    $0x70,%eax
  10133f:	7f 2e                	jg     10136f <kprintf+0x72>
  101341:	83 f8 63             	cmp    $0x63,%eax
  101344:	0f 84 9c 00 00 00    	je     1013e6 <kprintf+0xe9>
  10134a:	83 f8 63             	cmp    $0x63,%eax
  10134d:	7f 16                	jg     101365 <kprintf+0x68>
  10134f:	85 c0                	test   %eax,%eax
  101351:	0f 84 fe 00 00 00    	je     101455 <kprintf+0x158>
  101357:	83 f8 25             	cmp    $0x25,%eax
  10135a:	0f 84 a2 00 00 00    	je     101402 <kprintf+0x105>
  101360:	e9 ac 00 00 00       	jmp    101411 <kprintf+0x114>
  101365:	83 f8 64             	cmp    $0x64,%eax
  101368:	74 36                	je     1013a0 <kprintf+0xa3>
  10136a:	e9 a2 00 00 00       	jmp    101411 <kprintf+0x114>
  10136f:	83 f8 75             	cmp    $0x75,%eax
  101372:	74 2c                	je     1013a0 <kprintf+0xa3>
  101374:	83 f8 78             	cmp    $0x78,%eax
  101377:	74 4a                	je     1013c3 <kprintf+0xc6>
  101379:	83 f8 73             	cmp    $0x73,%eax
  10137c:	0f 85 8f 00 00 00    	jne    101411 <kprintf+0x114>
        case 's':
          s = va_arg(ap, char*);
  101382:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101385:	8d 50 04             	lea    0x4(%eax),%edx
  101388:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10138b:	8b 00                	mov    (%eax),%eax
  10138d:	89 45 f4             	mov    %eax,-0xc(%ebp)
          kputs(s);
  101390:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101393:	89 04 24             	mov    %eax,(%esp)
  101396:	e8 8e fe ff ff       	call   101229 <kputs>
          break;
  10139b:	e9 a1 00 00 00       	jmp    101441 <kprintf+0x144>
        case 'd':
        case 'u':
          n = va_arg(ap, unsigned long int);
  1013a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1013a3:	8d 50 04             	lea    0x4(%eax),%edx
  1013a6:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1013a9:	8b 00                	mov    (%eax),%eax
  1013ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 10);
  1013ae:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1013b5:	00 
  1013b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1013b9:	89 04 24             	mov    %eax,(%esp)
  1013bc:	e8 91 fe ff ff       	call   101252 <kputn>
          break;
  1013c1:	eb 7e                	jmp    101441 <kprintf+0x144>
        case 'x':
        case 'p':
          n = va_arg(ap, unsigned long int);
  1013c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1013c6:	8d 50 04             	lea    0x4(%eax),%edx
  1013c9:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1013cc:	8b 00                	mov    (%eax),%eax
  1013ce:	89 45 f8             	mov    %eax,-0x8(%ebp)
          kputn(n, 16);
  1013d1:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1013d8:	00 
  1013d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1013dc:	89 04 24             	mov    %eax,(%esp)
  1013df:	e8 6e fe ff ff       	call   101252 <kputn>
          break;
  1013e4:	eb 5b                	jmp    101441 <kprintf+0x144>
				case 'c':
					c = va_arg(ap, int);
  1013e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1013e9:	8d 50 04             	lea    0x4(%eax),%edx
  1013ec:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1013ef:	8b 00                	mov    (%eax),%eax
  1013f1:	88 45 ff             	mov    %al,-0x1(%ebp)
					kputc(c);
  1013f4:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1013f8:	89 04 24             	mov    %eax,(%esp)
  1013fb:	e8 0c fd ff ff       	call   10110c <kputc>
					break;
  101400:	eb 3f                	jmp    101441 <kprintf+0x144>
        case '%':
          kputc('%');
  101402:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101409:	e8 fe fc ff ff       	call   10110c <kputc>
          break;
  10140e:	90                   	nop
  10140f:	eb 30                	jmp    101441 <kprintf+0x144>
        case '\0':
          goto out;
        default:
          kputc('%');
  101411:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101418:	e8 ef fc ff ff       	call   10110c <kputc>
          kputc(*fmt);
  10141d:	8b 45 08             	mov    0x8(%ebp),%eax
  101420:	0f b6 00             	movzbl (%eax),%eax
  101423:	0f be c0             	movsbl %al,%eax
  101426:	89 04 24             	mov    %eax,(%esp)
  101429:	e8 de fc ff ff       	call   10110c <kputc>
  10142e:	eb 11                	jmp    101441 <kprintf+0x144>
          break;
      }
    } else {
      kputc(*fmt);
  101430:	8b 45 08             	mov    0x8(%ebp),%eax
  101433:	0f b6 00             	movzbl (%eax),%eax
  101436:	0f be c0             	movsbl %al,%eax
  101439:	89 04 24             	mov    %eax,(%esp)
  10143c:	e8 cb fc ff ff       	call   10110c <kputc>
    }

    fmt++;
  101441:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  unsigned long n;
	char c;

  va_start(ap, fmt);
  kprintf_res = 0;
  while (*fmt) {
  101445:	8b 45 08             	mov    0x8(%ebp),%eax
  101448:	0f b6 00             	movzbl (%eax),%eax
  10144b:	84 c0                	test   %al,%al
  10144d:	0f 85 c5 fe ff ff    	jne    101318 <kprintf+0x1b>
  101453:	eb 01                	jmp    101456 <kprintf+0x159>
					break;
        case '%':
          kputc('%');
          break;
        case '\0':
          goto out;
  101455:	90                   	nop
  }

out:
  va_end(ap);

  return kprintf_res;
  101456:	a1 2c 40 10 00       	mov    0x10402c,%eax
}
  10145b:	c9                   	leave  
  10145c:	c3                   	ret    
  10145d:	00 00                	add    %al,(%eax)
	...

00101460 <outb>:
{
	asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data)
{
  101460:	55                   	push   %ebp
  101461:	89 e5                	mov    %esp,%ebp
  101463:	83 ec 08             	sub    $0x8,%esp
  101466:	8b 55 08             	mov    0x8(%ebp),%edx
  101469:	8b 45 0c             	mov    0xc(%ebp),%eax
  10146c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  101470:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101473:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  101477:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  10147b:	ee                   	out    %al,(%dx)
}
  10147c:	c9                   	leave  
  10147d:	c3                   	ret    

0010147e <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  10147e:	55                   	push   %ebp
  10147f:	89 e5                	mov    %esp,%ebp
  101481:	57                   	push   %edi
  101482:	56                   	push   %esi
  101483:	53                   	push   %ebx
  101484:	83 ec 34             	sub    $0x34,%esp
  101487:	8b 55 10             	mov    0x10(%ebp),%edx
  10148a:	8b 45 14             	mov    0x14(%ebp),%eax
  10148d:	66 89 55 dc          	mov    %dx,-0x24(%ebp)
  101491:	88 45 d8             	mov    %al,-0x28(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101494:	8b 45 0c             	mov    0xc(%ebp),%eax
  101497:	89 45 ec             	mov    %eax,-0x14(%ebp)
	idt[i] = handler & 0xffffLL;
  10149a:	8b 75 08             	mov    0x8(%ebp),%esi
  10149d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1014a0:	ba 00 00 00 00       	mov    $0x0,%edx
  1014a5:	0f b7 c8             	movzwl %ax,%ecx
  1014a8:	89 d3                	mov    %edx,%ebx
  1014aa:	83 e3 00             	and    $0x0,%ebx
  1014ad:	89 0c f5 40 40 10 00 	mov    %ecx,0x104040(,%esi,8)
  1014b4:	89 1c f5 44 40 10 00 	mov    %ebx,0x104044(,%esi,8)
	idt[i] |= (selector & 0xffffLL) << 16;
  1014bb:	8b 75 08             	mov    0x8(%ebp),%esi
  1014be:	8b 45 08             	mov    0x8(%ebp),%eax
  1014c1:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  1014c8:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  1014cf:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
  1014d3:	ba 00 00 00 00       	mov    $0x0,%edx
  1014d8:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  1014dc:	c1 e0 10             	shl    $0x10,%eax
  1014df:	89 cf                	mov    %ecx,%edi
  1014e1:	09 c7                	or     %eax,%edi
  1014e3:	89 7d c0             	mov    %edi,-0x40(%ebp)
  1014e6:	89 df                	mov    %ebx,%edi
  1014e8:	09 d7                	or     %edx,%edi
  1014ea:	89 7d c4             	mov    %edi,-0x3c(%ebp)
  1014ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1014f0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1014f3:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  1014fa:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  101501:	8b 75 08             	mov    0x8(%ebp),%esi
  101504:	8b 45 08             	mov    0x8(%ebp),%eax
  101507:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  10150e:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  101515:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
  101519:	ba 00 00 00 00       	mov    $0x0,%edx
  10151e:	89 c2                	mov    %eax,%edx
  101520:	b8 00 00 00 00       	mov    $0x0,%eax
  101525:	c1 e2 08             	shl    $0x8,%edx
  101528:	89 cf                	mov    %ecx,%edi
  10152a:	09 c7                	or     %eax,%edi
  10152c:	89 7d c8             	mov    %edi,-0x38(%ebp)
  10152f:	89 df                	mov    %ebx,%edi
  101531:	09 d7                	or     %edx,%edi
  101533:	89 7d cc             	mov    %edi,-0x34(%ebp)
  101536:	8b 45 c8             	mov    -0x38(%ebp),%eax
  101539:	8b 55 cc             	mov    -0x34(%ebp),%edx
  10153c:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  101543:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
	idt[i] |= ((handler>> 16) & 0xffffLL) << 48;
  10154a:	8b 75 08             	mov    0x8(%ebp),%esi
  10154d:	8b 45 08             	mov    0x8(%ebp),%eax
  101550:	8b 0c c5 40 40 10 00 	mov    0x104040(,%eax,8),%ecx
  101557:	8b 1c c5 44 40 10 00 	mov    0x104044(,%eax,8),%ebx
  10155e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101561:	c1 e8 10             	shr    $0x10,%eax
  101564:	ba 00 00 00 00       	mov    $0x0,%edx
  101569:	89 c2                	mov    %eax,%edx
  10156b:	b8 00 00 00 00       	mov    $0x0,%eax
  101570:	c1 e2 10             	shl    $0x10,%edx
  101573:	89 cf                	mov    %ecx,%edi
  101575:	09 c7                	or     %eax,%edi
  101577:	89 7d d0             	mov    %edi,-0x30(%ebp)
  10157a:	89 df                	mov    %ebx,%edi
  10157c:	09 d7                	or     %edx,%edi
  10157e:	89 7d d4             	mov    %edi,-0x2c(%ebp)
  101581:	8b 45 d0             	mov    -0x30(%ebp),%eax
  101584:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  101587:	89 04 f5 40 40 10 00 	mov    %eax,0x104040(,%esi,8)
  10158e:	89 14 f5 44 40 10 00 	mov    %edx,0x104044(,%esi,8)
}
  101595:	83 c4 34             	add    $0x34,%esp
  101598:	5b                   	pop    %ebx
  101599:	5e                   	pop    %esi
  10159a:	5f                   	pop    %edi
  10159b:	5d                   	pop    %ebp
  10159c:	c3                   	ret    

0010159d <init_idt>:

void init_idt() {
  10159d:	55                   	push   %ebp
  10159e:	89 e5                	mov    %esp,%ebp
  1015a0:	83 ec 28             	sub    $0x28,%esp
		  unsigned short int limit;
		  void* pointer;
	} __attribute__((packed)) idtp = {
		  .limit = IDT_ENTRIES * 8 - 1,
		  .pointer = idt,
	};
  1015a3:	66 c7 45 ee ff 01    	movw   $0x1ff,-0x12(%ebp)
  1015a9:	c7 45 f0 40 40 10 00 	movl   $0x104040,-0x10(%ebp)

	int i = 0;
  1015b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(i = 0; i < IDT_ENTRIES; i++) {
  1015b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1015be:	eb 12                	jmp    1015d2 <init_idt+0x35>
		handler_set[i] = 0;
  1015c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1015c3:	c7 04 85 40 43 10 00 	movl   $0x0,0x104340(,%eax,4)
  1015ca:	00 00 00 00 
		  .pointer = idt,
	};

	int i = 0;

	for(i = 0; i < IDT_ENTRIES; i++) {
  1015ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1015d2:	83 7d f4 3f          	cmpl   $0x3f,-0xc(%ebp)
  1015d6:	7e e8                	jle    1015c0 <init_idt+0x23>
		handler_set[i] = 0;
	}

  outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  1015d8:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1015df:	00 
  1015e0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1015e7:	e8 74 fe ff ff       	call   101460 <outb>
  outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  1015ec:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1015f3:	00 
  1015f4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1015fb:	e8 60 fe ff ff       	call   101460 <outb>
  outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  101600:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  101607:	00 
  101608:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10160f:	e8 4c fe ff ff       	call   101460 <outb>
  outb(0x21, 0x01); // ICW 4
  101614:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10161b:	00 
  10161c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101623:	e8 38 fe ff ff       	call   101460 <outb>

  outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  101628:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10162f:	00 
  101630:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101637:	e8 24 fe ff ff       	call   101460 <outb>
  outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  10163c:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101643:	00 
  101644:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10164b:	e8 10 fe ff ff       	call   101460 <outb>
  outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101650:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101657:	00 
  101658:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10165f:	e8 fc fd ff ff       	call   101460 <outb>
  outb(0xa1, 0x01); // ICW 4
  101664:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10166b:	00 
  10166c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  101673:	e8 e8 fd ff ff       	call   101460 <outb>

  outb(0x20, 0x0);
  101678:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10167f:	00 
  101680:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101687:	e8 d4 fd ff ff       	call   101460 <outb>
  outb(0xa0, 0x0);
  10168c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101693:	00 
  101694:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  10169b:	e8 c0 fd ff ff       	call   101460 <outb>

  idt_set_entry(0, intr_stub_0, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016a0:	b8 f8 02 10 00       	mov    $0x1002f8,%eax
  1016a5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016ac:	00 
  1016ad:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016b4:	00 
  1016b5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016b9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1016c0:	e8 b9 fd ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(1, intr_stub_1, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016c5:	b8 01 03 10 00       	mov    $0x100301,%eax
  1016ca:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016d1:	00 
  1016d2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016d9:	00 
  1016da:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1016e5:	e8 94 fd ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(2, intr_stub_2, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1016ea:	b8 0a 03 10 00       	mov    $0x10030a,%eax
  1016ef:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016f6:	00 
  1016f7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016fe:	00 
  1016ff:	89 44 24 04          	mov    %eax,0x4(%esp)
  101703:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  10170a:	e8 6f fd ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(3, intr_stub_3, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10170f:	b8 13 03 10 00       	mov    $0x100313,%eax
  101714:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10171b:	00 
  10171c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101723:	00 
  101724:	89 44 24 04          	mov    %eax,0x4(%esp)
  101728:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  10172f:	e8 4a fd ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(4, intr_stub_4, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101734:	b8 1c 03 10 00       	mov    $0x10031c,%eax
  101739:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101740:	00 
  101741:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101748:	00 
  101749:	89 44 24 04          	mov    %eax,0x4(%esp)
  10174d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101754:	e8 25 fd ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(5, intr_stub_5, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101759:	b8 25 03 10 00       	mov    $0x100325,%eax
  10175e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101765:	00 
  101766:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10176d:	00 
  10176e:	89 44 24 04          	mov    %eax,0x4(%esp)
  101772:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101779:	e8 00 fd ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(6, intr_stub_6, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10177e:	b8 2e 03 10 00       	mov    $0x10032e,%eax
  101783:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10178a:	00 
  10178b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101792:	00 
  101793:	89 44 24 04          	mov    %eax,0x4(%esp)
  101797:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10179e:	e8 db fc ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(7, intr_stub_7, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017a3:	b8 37 03 10 00       	mov    $0x100337,%eax
  1017a8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017af:	00 
  1017b0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017b7:	00 
  1017b8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017bc:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1017c3:	e8 b6 fc ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(8, intr_stub_8, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017c8:	b8 40 03 10 00       	mov    $0x100340,%eax
  1017cd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017d4:	00 
  1017d5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017dc:	00 
  1017dd:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017e1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1017e8:	e8 91 fc ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(9, intr_stub_9, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1017ed:	b8 47 03 10 00       	mov    $0x100347,%eax
  1017f2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017f9:	00 
  1017fa:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101801:	00 
  101802:	89 44 24 04          	mov    %eax,0x4(%esp)
  101806:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  10180d:	e8 6c fc ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(10, intr_stub_10, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101812:	b8 50 03 10 00       	mov    $0x100350,%eax
  101817:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10181e:	00 
  10181f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101826:	00 
  101827:	89 44 24 04          	mov    %eax,0x4(%esp)
  10182b:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  101832:	e8 47 fc ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(11, intr_stub_11, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101837:	b8 57 03 10 00       	mov    $0x100357,%eax
  10183c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101843:	00 
  101844:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10184b:	00 
  10184c:	89 44 24 04          	mov    %eax,0x4(%esp)
  101850:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101857:	e8 22 fc ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(12, intr_stub_12, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10185c:	b8 5e 03 10 00       	mov    $0x10035e,%eax
  101861:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101868:	00 
  101869:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101870:	00 
  101871:	89 44 24 04          	mov    %eax,0x4(%esp)
  101875:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10187c:	e8 fd fb ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(13, intr_stub_13, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101881:	b8 65 03 10 00       	mov    $0x100365,%eax
  101886:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10188d:	00 
  10188e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101895:	00 
  101896:	89 44 24 04          	mov    %eax,0x4(%esp)
  10189a:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  1018a1:	e8 d8 fb ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(14, intr_stub_14, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018a6:	b8 6c 03 10 00       	mov    $0x10036c,%eax
  1018ab:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018b2:	00 
  1018b3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018ba:	00 
  1018bb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018bf:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1018c6:	e8 b3 fb ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(15, intr_stub_15, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018cb:	b8 70 03 10 00       	mov    $0x100370,%eax
  1018d0:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018d7:	00 
  1018d8:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018df:	00 
  1018e0:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018e4:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  1018eb:	e8 8e fb ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(16, intr_stub_16, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1018f0:	b8 76 03 10 00       	mov    $0x100376,%eax
  1018f5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018fc:	00 
  1018fd:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101904:	00 
  101905:	89 44 24 04          	mov    %eax,0x4(%esp)
  101909:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  101910:	e8 69 fb ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(17, intr_stub_17, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101915:	b8 7c 03 10 00       	mov    $0x10037c,%eax
  10191a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101921:	00 
  101922:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101929:	00 
  10192a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10192e:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  101935:	e8 44 fb ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(18, intr_stub_18, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10193a:	b8 80 03 10 00       	mov    $0x100380,%eax
  10193f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101946:	00 
  101947:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10194e:	00 
  10194f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101953:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  10195a:	e8 1f fb ff ff       	call   10147e <idt_set_entry>

  idt_set_entry(32, intr_stub_32, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  10195f:	b8 86 03 10 00       	mov    $0x100386,%eax
  101964:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10196b:	00 
  10196c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101973:	00 
  101974:	89 44 24 04          	mov    %eax,0x4(%esp)
  101978:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10197f:	e8 fa fa ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(33, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101984:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101989:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101990:	00 
  101991:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101998:	00 
  101999:	89 44 24 04          	mov    %eax,0x4(%esp)
  10199d:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1019a4:	e8 d5 fa ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(34, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019a9:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019ae:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019b5:	00 
  1019b6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019bd:	00 
  1019be:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019c2:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1019c9:	e8 b0 fa ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(35, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019ce:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019d3:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019da:	00 
  1019db:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019e2:	00 
  1019e3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019e7:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  1019ee:	e8 8b fa ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(36, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  1019f3:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  1019f8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019ff:	00 
  101a00:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a07:	00 
  101a08:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a0c:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101a13:	e8 66 fa ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(37, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a18:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a1d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a24:	00 
  101a25:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a2c:	00 
  101a2d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a31:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101a38:	e8 41 fa ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(38, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a3d:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a42:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a49:	00 
  101a4a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a51:	00 
  101a52:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a56:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101a5d:	e8 1c fa ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(39, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a62:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a67:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a6e:	00 
  101a6f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a76:	00 
  101a77:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a7b:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101a82:	e8 f7 f9 ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(40, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101a87:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101a8c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a93:	00 
  101a94:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a9b:	00 
  101a9c:	89 44 24 04          	mov    %eax,0x4(%esp)
  101aa0:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101aa7:	e8 d2 f9 ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(41, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101aac:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101ab1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ab8:	00 
  101ab9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ac0:	00 
  101ac1:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ac5:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101acc:	e8 ad f9 ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(42, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101ad1:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101ad6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101add:	00 
  101ade:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ae5:	00 
  101ae6:	89 44 24 04          	mov    %eax,0x4(%esp)
  101aea:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101af1:	e8 88 f9 ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(43, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101af6:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101afb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b02:	00 
  101b03:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b0a:	00 
  101b0b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b0f:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101b16:	e8 63 f9 ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(44, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b1b:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b20:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b27:	00 
  101b28:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b2f:	00 
  101b30:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b34:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101b3b:	e8 3e f9 ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(45, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b40:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b45:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b4c:	00 
  101b4d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b54:	00 
  101b55:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b59:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101b60:	e8 19 f9 ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(46, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b65:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b6a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b71:	00 
  101b72:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b79:	00 
  101b7a:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b7e:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101b85:	e8 f4 f8 ff ff       	call   10147e <idt_set_entry>
  idt_set_entry(47, intr_stub_33, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
  101b8a:	b8 8c 03 10 00       	mov    $0x10038c,%eax
  101b8f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b96:	00 
  101b97:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b9e:	00 
  101b9f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ba3:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101baa:	e8 cf f8 ff ff       	call   10147e <idt_set_entry>

  idt_set_entry(48, intr_stub_48, 0x8, IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);
  101baf:	b8 e6 03 10 00       	mov    $0x1003e6,%eax
  101bb4:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101bbb:	00 
  101bbc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bc3:	00 
  101bc4:	89 44 24 04          	mov    %eax,0x4(%esp)
  101bc8:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101bcf:	e8 aa f8 ff ff       	call   10147e <idt_set_entry>

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss), GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
  101bd4:	b8 20 21 10 00       	mov    $0x102120,%eax
  101bd9:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101be0:	00 
  101be1:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101be8:	00 
  101be9:	89 44 24 04          	mov    %eax,0x4(%esp)
  101bed:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101bf4:	e8 41 e4 ff ff       	call   10003a <set_gdt_entry>

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101bf9:	b8 28 00 00 00       	mov    $0x28,%eax
  101bfe:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101c01:	0f 01 5d ee          	lidtl  -0x12(%ebp)
	asm volatile("sti");
  101c05:	fb                   	sti    
}
  101c06:	c9                   	leave  
  101c07:	c3                   	ret    

00101c08 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)())
{
  101c08:	55                   	push   %ebp
  101c09:	89 e5                	mov    %esp,%ebp
	handlers[i] = fn;
  101c0b:	8b 45 08             	mov    0x8(%ebp),%eax
  101c0e:	8b 55 0c             	mov    0xc(%ebp),%edx
  101c11:	89 14 85 40 42 10 00 	mov    %edx,0x104240(,%eax,4)
	handler_set[i] = 1;
  101c18:	8b 45 08             	mov    0x8(%ebp),%eax
  101c1b:	c7 04 85 40 43 10 00 	movl   $0x1,0x104340(,%eax,4)
  101c22:	01 00 00 00 
}
  101c26:	5d                   	pop    %ebp
  101c27:	c3                   	ret    

00101c28 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu)
{
  101c28:	55                   	push   %ebp
  101c29:	89 e5                	mov    %esp,%ebp
  101c2b:	53                   	push   %ebx
  101c2c:	83 ec 34             	sub    $0x34,%esp
  struct cpu_state* new_cpu = cpu;
  101c2f:	8b 45 08             	mov    0x8(%ebp),%eax
  101c32:	89 45 f0             	mov    %eax,-0x10(%ebp)

  if (cpu->intr <= 0x1f) {
  101c35:	8b 45 08             	mov    0x8(%ebp),%eax
  101c38:	8b 40 1c             	mov    0x1c(%eax),%eax
  101c3b:	83 f8 1f             	cmp    $0x1f,%eax
  101c3e:	0f 87 df 00 00 00    	ja     101d23 <handle_interrupt+0xfb>
    kprintf("\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  101c44:	8b 45 08             	mov    0x8(%ebp),%eax
  101c47:	8b 50 20             	mov    0x20(%eax),%edx
  101c4a:	8b 45 08             	mov    0x8(%ebp),%eax
  101c4d:	8b 40 1c             	mov    0x1c(%eax),%eax
  101c50:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c54:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c58:	c7 04 24 c8 30 10 00 	movl   $0x1030c8,(%esp)
  101c5f:	e8 99 f6 ff ff       	call   1012fd <kprintf>

		kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx, cpu->edx);
  101c64:	8b 45 08             	mov    0x8(%ebp),%eax
  101c67:	8b 58 0c             	mov    0xc(%eax),%ebx
  101c6a:	8b 45 08             	mov    0x8(%ebp),%eax
  101c6d:	8b 48 08             	mov    0x8(%eax),%ecx
  101c70:	8b 45 08             	mov    0x8(%ebp),%eax
  101c73:	8b 50 04             	mov    0x4(%eax),%edx
  101c76:	8b 45 08             	mov    0x8(%ebp),%eax
  101c79:	8b 00                	mov    (%eax),%eax
  101c7b:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101c7f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101c83:	89 54 24 08          	mov    %edx,0x8(%esp)
  101c87:	89 44 24 04          	mov    %eax,0x4(%esp)
  101c8b:	c7 04 24 ec 30 10 00 	movl   $0x1030ec,(%esp)
  101c92:	e8 66 f6 ff ff       	call   1012fd <kprintf>
		kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp, cpu->eip);
  101c97:	8b 45 08             	mov    0x8(%ebp),%eax
  101c9a:	8b 58 24             	mov    0x24(%eax),%ebx
  101c9d:	8b 45 08             	mov    0x8(%ebp),%eax
  101ca0:	8b 48 18             	mov    0x18(%eax),%ecx
  101ca3:	8b 45 08             	mov    0x8(%ebp),%eax
  101ca6:	8b 50 14             	mov    0x14(%eax),%edx
  101ca9:	8b 45 08             	mov    0x8(%ebp),%eax
  101cac:	8b 40 10             	mov    0x10(%eax),%eax
  101caf:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101cb3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101cb7:	89 54 24 08          	mov    %edx,0x8(%esp)
  101cbb:	89 44 24 04          	mov    %eax,0x4(%esp)
  101cbf:	c7 04 24 10 31 10 00 	movl   $0x103110,(%esp)
  101cc6:	e8 32 f6 ff ff       	call   1012fd <kprintf>
		kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags, cpu->esp, cpu->ss);
  101ccb:	8b 45 08             	mov    0x8(%ebp),%eax
  101cce:	8b 58 34             	mov    0x34(%eax),%ebx
  101cd1:	8b 45 08             	mov    0x8(%ebp),%eax
  101cd4:	8b 48 30             	mov    0x30(%eax),%ecx
  101cd7:	8b 45 08             	mov    0x8(%ebp),%eax
  101cda:	8b 50 2c             	mov    0x2c(%eax),%edx
  101cdd:	8b 45 08             	mov    0x8(%ebp),%eax
  101ce0:	8b 40 28             	mov    0x28(%eax),%eax
  101ce3:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  101ce7:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  101ceb:	89 54 24 08          	mov    %edx,0x8(%esp)
  101cef:	89 44 24 04          	mov    %eax,0x4(%esp)
  101cf3:	c7 04 24 34 31 10 00 	movl   $0x103134,(%esp)
  101cfa:	e8 fe f5 ff ff       	call   1012fd <kprintf>

		uint32_t cr2 = 0;
  101cff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		asm volatile("mov %%cr2, %0" : "=r" (cr2));
  101d06:	0f 20 d0             	mov    %cr2,%eax
  101d09:	89 45 f4             	mov    %eax,-0xc(%ebp)

		kprintf("CR2: %x", cr2);
  101d0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101d0f:	89 44 24 04          	mov    %eax,0x4(%esp)
  101d13:	c7 04 24 56 31 10 00 	movl   $0x103156,(%esp)
  101d1a:	e8 de f5 ff ff       	call   1012fd <kprintf>
	
    while(1) {
      asm volatile("cli; hlt");
  101d1f:	fa                   	cli    
  101d20:	f4                   	hlt    
    }
  101d21:	eb fc                	jmp    101d1f <handle_interrupt+0xf7>
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101d23:	8b 45 08             	mov    0x8(%ebp),%eax
  101d26:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d29:	83 f8 1f             	cmp    $0x1f,%eax
  101d2c:	0f 86 84 00 00 00    	jbe    101db6 <handle_interrupt+0x18e>
  101d32:	8b 45 08             	mov    0x8(%ebp),%eax
  101d35:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d38:	83 f8 2f             	cmp    $0x2f,%eax
  101d3b:	77 79                	ja     101db6 <handle_interrupt+0x18e>
    if (cpu->intr >= 0x28) {
  101d3d:	8b 45 08             	mov    0x8(%ebp),%eax
  101d40:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d43:	83 f8 27             	cmp    $0x27,%eax
  101d46:	76 14                	jbe    101d5c <handle_interrupt+0x134>
      outb(0xa0, 0x20);
  101d48:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101d4f:	00 
  101d50:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101d57:	e8 04 f7 ff ff       	call   101460 <outb>
    }
    if (cpu->intr == 0x20) {
  101d5c:	8b 45 08             	mov    0x8(%ebp),%eax
  101d5f:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d62:	83 f8 20             	cmp    $0x20,%eax
  101d65:	75 19                	jne    101d80 <handle_interrupt+0x158>
        new_cpu = schedule(cpu);
  101d67:	8b 45 08             	mov    0x8(%ebp),%eax
  101d6a:	89 04 24             	mov    %eax,(%esp)
  101d6d:	e8 4b e9 ff ff       	call   1006bd <schedule>
  101d72:	89 45 f0             	mov    %eax,-0x10(%ebp)
        tss[1] = (uint32_t) (new_cpu + 1);
  101d75:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d78:	83 c0 38             	add    $0x38,%eax
  101d7b:	a3 24 21 10 00       	mov    %eax,0x102124
    }
    outb(0x20, 0x20);
  101d80:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101d87:	00 
  101d88:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101d8f:	e8 cc f6 ff ff       	call   101460 <outb>
		if(handler_set[cpu->intr]) {
  101d94:	8b 45 08             	mov    0x8(%ebp),%eax
  101d97:	8b 40 1c             	mov    0x1c(%eax),%eax
  101d9a:	8b 04 85 40 43 10 00 	mov    0x104340(,%eax,4),%eax
  101da1:	85 c0                	test   %eax,%eax
  101da3:	74 3c                	je     101de1 <handle_interrupt+0x1b9>
			handlers[cpu->intr]();
  101da5:	8b 45 08             	mov    0x8(%ebp),%eax
  101da8:	8b 40 1c             	mov    0x1c(%eax),%eax
  101dab:	8b 04 85 40 42 10 00 	mov    0x104240(,%eax,4),%eax
  101db2:	ff d0                	call   *%eax
		kprintf("CR2: %x", cr2);
	
    while(1) {
      asm volatile("cli; hlt");
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101db4:	eb 2c                	jmp    101de2 <handle_interrupt+0x1ba>
    }
    outb(0x20, 0x20);
		if(handler_set[cpu->intr]) {
			handlers[cpu->intr]();
		}
  } else if (cpu->intr == 0x30) {
  101db6:	8b 45 08             	mov    0x8(%ebp),%eax
  101db9:	8b 40 1c             	mov    0x1c(%eax),%eax
  101dbc:	83 f8 30             	cmp    $0x30,%eax
  101dbf:	75 10                	jne    101dd1 <handle_interrupt+0x1a9>
		new_cpu = syscall(new_cpu);
  101dc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101dc4:	89 04 24             	mov    %eax,(%esp)
  101dc7:	e8 b7 e6 ff ff       	call   100483 <syscall>
  101dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101dcf:	eb 11                	jmp    101de2 <handle_interrupt+0x1ba>
  } else {
    kprintf("Unbekannter Interrupt\n");
  101dd1:	c7 04 24 5e 31 10 00 	movl   $0x10315e,(%esp)
  101dd8:	e8 20 f5 ff ff       	call   1012fd <kprintf>
    while(1) {
      // Prozessor anhalten
      asm volatile("cli; hlt");
  101ddd:	fa                   	cli    
  101dde:	f4                   	hlt    
    }
  101ddf:	eb fc                	jmp    101ddd <handle_interrupt+0x1b5>
		kprintf("CR2: %x", cr2);
	
    while(1) {
      asm volatile("cli; hlt");
    }
  } else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101de1:	90                   	nop
      // Prozessor anhalten
      asm volatile("cli; hlt");
    }
  }  

  return new_cpu;
  101de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  101de5:	83 c4 34             	add    $0x34,%esp
  101de8:	5b                   	pop    %ebx
  101de9:	5d                   	pop    %ebp
  101dea:	c3                   	ret    
	...

00101dec <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  101dec:	55                   	push   %ebp
  101ded:	89 e5                	mov    %esp,%ebp
  101def:	83 ec 08             	sub    $0x8,%esp
	init_keyboard_drv();
  101df2:	e8 d0 eb ff ff       	call   1009c7 <init_keyboard_drv>
}
  101df7:	c9                   	leave  
  101df8:	c3                   	ret    

00101df9 <init>:

#define true 1
#define false 2

void init(struct multiboot_info* mb_info)
{
  101df9:	55                   	push   %ebp
  101dfa:	89 e5                	mov    %esp,%ebp
  101dfc:	83 ec 18             	sub    $0x18,%esp
	clrscr();
  101dff:	e8 b8 f4 ff ff       	call   1012bc <clrscr>
  pmm_init(mb_info);
  101e04:	8b 45 08             	mov    0x8(%ebp),%eax
  101e07:	89 04 24             	mov    %eax,(%esp)
  101e0a:	e8 be f1 ff ff       	call   100fcd <pmm_init>

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  101e0f:	c7 44 24 04 78 31 10 	movl   $0x103178,0x4(%esp)
  101e16:	00 
  101e17:	c7 04 24 84 31 10 00 	movl   $0x103184,(%esp)
  101e1e:	e8 da f4 ff ff       	call   1012fd <kprintf>
	kprintf("(C) Copyright 2012 Fabian Sachara.  All Rights Reserved.\n");
  101e23:	c7 04 24 a8 31 10 00 	movl   $0x1031a8,(%esp)
  101e2a:	e8 ce f4 ff ff       	call   1012fd <kprintf>

	kprintf("Initializing GDT...\n");
  101e2f:	c7 04 24 e2 31 10 00 	movl   $0x1031e2,(%esp)
  101e36:	e8 c2 f4 ff ff       	call   1012fd <kprintf>
	
	init_gdt();
  101e3b:	e8 f5 e3 ff ff       	call   100235 <init_gdt>

	kprintf("Initializing IDT...\n");
  101e40:	c7 04 24 f7 31 10 00 	movl   $0x1031f7,(%esp)
  101e47:	e8 b1 f4 ff ff       	call   1012fd <kprintf>

	init_idt();
  101e4c:	e8 4c f7 ff ff       	call   10159d <init_idt>

	kprintf("init_drivers()\n");
  101e51:	c7 04 24 0c 32 10 00 	movl   $0x10320c,(%esp)
  101e58:	e8 a0 f4 ff ff       	call   1012fd <kprintf>

	init_drivers();
  101e5d:	e8 8a ff ff ff       	call   101dec <init_drivers>
	
	kprintf("switching to kernel_main()\n");
  101e62:	c7 04 24 1c 32 10 00 	movl   $0x10321c,(%esp)
  101e69:	e8 8f f4 ff ff       	call   1012fd <kprintf>

	kernel_main(mb_info);
  101e6e:	8b 45 08             	mov    0x8(%ebp),%eax
  101e71:	89 04 24             	mov    %eax,(%esp)
  101e74:	e8 fd e6 ff ff       	call   100576 <kernel_main>

  return;
}
  101e79:	c9                   	leave  
  101e7a:	c3                   	ret    
	...

00101e7c <_start>:
  101e7c:	bc 40 64 10 00       	mov    $0x106440,%esp
  101e81:	53                   	push   %ebx
  101e82:	e8 72 ff ff ff       	call   101df9 <init>

00101e87 <_stop>:
  101e87:	fa                   	cli    
  101e88:	f4                   	hlt    
  101e89:	eb fc                	jmp    101e87 <_stop>
