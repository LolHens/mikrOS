
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaKernelDev 1.01"

void init(struct multiboot_info* mb_info) {
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	83 ec 28             	sub    $0x28,%esp
  100016:	8b 45 08             	mov    0x8(%ebp),%eax
  100019:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10001c:	e8 af 04 00 00       	call   1004d0 <clrscr>
	pmm_init(mb_info);
  100021:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100024:	89 04 24             	mov    %eax,(%esp)
  100027:	e8 a4 23 00 00       	call   1023d0 <pmm_init>
  10002c:	8d 05 78 70 10 00    	lea    0x107078,%eax
  100032:	8d 0d 9b 70 10 00    	lea    0x10709b,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100038:	89 04 24             	mov    %eax,(%esp)
  10003b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10003f:	e8 0c 05 00 00       	call   100550 <kprintf>
  100044:	8d 0d af 70 10 00    	lea    0x1070af,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10004a:	89 0c 24             	mov    %ecx,(%esp)
  10004d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100050:	e8 fb 04 00 00       	call   100550 <kprintf>
  100055:	8d 0d ee 70 10 00    	lea    0x1070ee,%ecx

	kprintf("Initializing GDT...\n");
  10005b:	89 0c 24             	mov    %ecx,(%esp)
  10005e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100061:	e8 ea 04 00 00       	call   100550 <kprintf>

	init_gdt();
  100066:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100069:	e8 a2 0a 00 00       	call   100b10 <init_gdt>
  10006e:	8d 05 03 71 10 00    	lea    0x107103,%eax

	kprintf("Initializing IDT...\n");
  100074:	89 04 24             	mov    %eax,(%esp)
  100077:	e8 d4 04 00 00       	call   100550 <kprintf>
  10007c:	8d 0d 18 71 10 00    	lea    0x107118,%ecx

	init_idt();
  100082:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100085:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100088:	e8 a3 0c 00 00       	call   100d30 <init_idt>

	kprintf("Initializing in-kernel-Drivers...\n");
  10008d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100090:	89 04 24             	mov    %eax,(%esp)
  100093:	e8 b8 04 00 00       	call   100550 <kprintf>

	init_drivers();
  100098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10009b:	e8 30 00 00 00       	call   1000d0 <init_drivers>
  1000a0:	8d 05 3b 71 10 00    	lea    0x10713b,%eax

	kprintf("Initializing Kernel...\n");
  1000a6:	89 04 24             	mov    %eax,(%esp)
  1000a9:	e8 a2 04 00 00       	call   100550 <kprintf>

	pmm_print_stats();
  1000ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000b1:	e8 2a 21 00 00       	call   1021e0 <pmm_print_stats>

	kernel_main(mb_info);
  1000b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000b9:	89 04 24             	mov    %eax,(%esp)
  1000bc:	e8 af 1e 00 00       	call   101f70 <kernel_main>

	return;
  1000c1:	83 c4 28             	add    $0x28,%esp
  1000c4:	5d                   	pop    %ebp
  1000c5:	c3                   	ret    
  1000c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1000cd:	00 00 00 

001000d0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000d0:	55                   	push   %ebp
  1000d1:	89 e5                	mov    %esp,%ebp
    init_keyboard_drv();
  1000d3:	83 ec 08             	sub    $0x8,%esp
  1000d6:	e8 05 02 00 00       	call   1002e0 <init_keyboard_drv>
}
  1000db:	83 c4 08             	add    $0x8,%esp
  1000de:	5d                   	pop    %ebp
  1000df:	c3                   	ret    

001000e0 <translate_scancode>:

static uint8_t buffer[4096];
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
  1000e3:	83 ec 28             	sub    $0x28,%esp
  1000e6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000ea:	66 89 c1             	mov    %ax,%cx
  1000ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1000f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1000f3:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  1000f7:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  1000fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000fe:	89 c2                	mov    %eax,%edx
  100100:	83 ea 02             	sub    $0x2,%edx
  100103:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100106:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100109:	0f 84 4f 00 00 00    	je     10015e <translate_scancode+0x7e>
  10010f:	e9 00 00 00 00       	jmp    100114 <translate_scancode+0x34>
  100114:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100117:	83 e8 01             	sub    $0x1,%eax
  10011a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10011d:	0f 84 28 00 00 00    	je     10014b <translate_scancode+0x6b>
  100123:	e9 00 00 00 00       	jmp    100128 <translate_scancode+0x48>
  100128:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10012b:	85 c0                	test   %eax,%eax
  10012d:	0f 85 54 00 00 00    	jne    100187 <translate_scancode+0xa7>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100138:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10013c:	8a 0c 05 00 60 10 00 	mov    0x106000(,%eax,1),%cl
  100143:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100146:	e9 3c 00 00 00       	jmp    100187 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10014b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014f:	8a 0c 05 80 60 10 00 	mov    0x106080(,%eax,1),%cl
  100156:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100159:	e9 29 00 00 00       	jmp    100187 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10015e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100162:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100167:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10016a:	0f 85 0e 00 00 00    	jne    10017e <translate_scancode+0x9e>
  100170:	e9 00 00 00 00       	jmp    100175 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100175:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100179:	e9 04 00 00 00       	jmp    100182 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10017e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100182:	e9 00 00 00 00       	jmp    100187 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100187:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10018b:	3d 00 00 00 00       	cmp    $0x0,%eax
  100190:	0f 85 20 00 00 00    	jne    1001b6 <translate_scancode+0xd6>
  100196:	8d 05 53 71 10 00    	lea    0x107153,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  10019c:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001a0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001a3:	89 04 24             	mov    %eax,(%esp)
  1001a6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001aa:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001ae:	e8 9d 03 00 00       	call   100550 <kprintf>
  1001b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001b6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ba:	83 c4 28             	add    $0x28,%esp
  1001bd:	5d                   	pop    %ebp
  1001be:	c3                   	ret    
  1001bf:	90                   	nop

001001c0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001c0:	55                   	push   %ebp
  1001c1:	89 e5                	mov    %esp,%ebp
  return;
  1001c3:	5d                   	pop    %ebp
  1001c4:	c3                   	ret    
  1001c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1001cc:	00 00 00 00 

001001d0 <getc>:
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}

char getc() {
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  1001d3:	83 ec 08             	sub    $0x8,%esp
  1001d6:	a0 0a 80 10 00       	mov    0x10800a,%al
  1001db:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1001de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001e8:	3b 05 0c 90 10 00    	cmp    0x10900c,%eax
  1001ee:	0f 8d 24 00 00 00    	jge    100218 <getc+0x48>
		buffer[i] = buffer[i+1];	
  1001f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001f7:	8a 0c 05 0b 80 10 00 	mov    0x10800b(,%eax,1),%cl
  1001fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100201:	88 0c 05 0a 80 10 00 	mov    %cl,0x10800a(,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100208:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10020b:	05 01 00 00 00       	add    $0x1,%eax
  100210:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100213:	e9 cd ff ff ff       	jmp    1001e5 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100218:	a1 0c 90 10 00       	mov    0x10900c,%eax
  10021d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100222:	a3 0c 90 10 00       	mov    %eax,0x10900c

	return ret;
  100227:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10022b:	83 c4 08             	add    $0x8,%esp
  10022e:	5d                   	pop    %ebp
  10022f:	c3                   	ret    

00100230 <send_command>:
}

void send_command(uint8_t command) {
  100230:	55                   	push   %ebp
  100231:	89 e5                	mov    %esp,%ebp
  100233:	83 ec 18             	sub    $0x18,%esp
  100236:	8a 45 08             	mov    0x8(%ebp),%al
  100239:	88 45 ff             	mov    %al,-0x1(%ebp)
  10023c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100241:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100248:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10024b:	e8 40 00 00 00       	call   100290 <inb>
  100250:	0f b6 c8             	movzbl %al,%ecx
  100253:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100259:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10025f:	0f 84 05 00 00 00    	je     10026a <send_command+0x3a>
  100265:	e9 d2 ff ff ff       	jmp    10023c <send_command+0xc>
  10026a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10026f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100276:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10027a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10027e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100281:	e8 2a 00 00 00       	call   1002b0 <outb>
}
  100286:	83 c4 18             	add    $0x18,%esp
  100289:	5d                   	pop    %ebp
  10028a:	c3                   	ret    
  10028b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100290 <inb>:
    uint16_t result;
    asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline uint8_t inb(uint16_t _port) {
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	50                   	push   %eax
  100294:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100298:	66 89 c1             	mov    %ax,%cx
  10029b:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
    uint8_t result;
    asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  10029f:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002a3:	ec                   	in     (%dx),%al
  1002a4:	88 45 fd             	mov    %al,-0x3(%ebp)
    return result;
  1002a7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  1002ab:	83 c4 04             	add    $0x4,%esp
  1002ae:	5d                   	pop    %ebp
  1002af:	c3                   	ret    

001002b0 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  1002b0:	55                   	push   %ebp
  1002b1:	89 e5                	mov    %esp,%ebp
  1002b3:	50                   	push   %eax
  1002b4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002b8:	66 89 c1             	mov    %ax,%cx
  1002bb:	8a 55 0c             	mov    0xc(%ebp),%dl
  1002be:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  1002c2:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1002c5:	8a 45 fd             	mov    -0x3(%ebp),%al
  1002c8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002cc:	ee                   	out    %al,(%dx)
}
  1002cd:	83 c4 04             	add    $0x4,%esp
  1002d0:	5d                   	pop    %ebp
  1002d1:	c3                   	ret    
  1002d2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1002d9:	1f 84 00 00 00 00 00 

001002e0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1002e0:	55                   	push   %ebp
  1002e1:	89 e5                	mov    %esp,%ebp
  1002e3:	83 ec 28             	sub    $0x28,%esp
  1002e6:	b8 21 00 00 00       	mov    $0x21,%eax
  1002eb:	8d 0d c0 01 10 00    	lea    0x1001c0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  1002f1:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1002f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1002fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1002ff:	e8 5c 16 00 00       	call   101960 <register_intr_handler>
  100304:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100309:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100310:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100313:	e8 78 ff ff ff       	call   100290 <inb>
  100318:	0f b6 c8             	movzbl %al,%ecx
  10031b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100321:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100327:	0f 84 1c 00 00 00    	je     100349 <init_keyboard_drv+0x69>
  10032d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100332:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100339:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10033c:	e8 4f ff ff ff       	call   100290 <inb>
	}
  100341:	88 45 f3             	mov    %al,-0xd(%ebp)
  100344:	e9 bb ff ff ff       	jmp    100304 <init_keyboard_drv+0x24>
  100349:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10034e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100355:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100358:	e8 d3 fe ff ff       	call   100230 <send_command>

	init_done = 1;
  10035d:	c7 05 10 90 10 00 01 	movl   $0x1,0x109010
  100364:	00 00 00 
}
  100367:	83 c4 28             	add    $0x28,%esp
  10036a:	5d                   	pop    %ebp
  10036b:	c3                   	ret    
  10036c:	66 90                	xchg   %ax,%ax
  10036e:	66 90                	xchg   %ax,%ax

00100370 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu, char* fstr) {
  100370:	55                   	push   %ebp
  100371:	89 e5                	mov    %esp,%ebp
  100373:	56                   	push   %esi
  100374:	83 ec 24             	sub    $0x24,%esp
  100377:	8b 45 0c             	mov    0xc(%ebp),%eax
  10037a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10037d:	ba 04 00 00 00       	mov    $0x4,%edx
  100382:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100385:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kprintf ("          '''  \\   `-._.'`---^_))) \n");
    kprintf ("                `-._ )))       ``` \n");
    kprintf ("                     ```            \n");
#endif

    setclr(0x04);
  100388:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10038f:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100392:	e8 99 01 00 00       	call   100530 <setclr>
    kprintf(fstr);
  100397:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10039a:	89 04 24             	mov    %eax,(%esp)
  10039d:	e8 ae 01 00 00       	call   100550 <kprintf>
  1003a2:	8d 0d 79 71 10 00    	lea    0x107179,%ecx
    kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  1003a8:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1003ab:	8b 52 1c             	mov    0x1c(%edx),%edx
  1003ae:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1003b1:	8b 76 20             	mov    0x20(%esi),%esi
  1003b4:	89 0c 24             	mov    %ecx,(%esp)
  1003b7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1003bb:	89 74 24 08          	mov    %esi,0x8(%esp)
  1003bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1003c2:	e8 89 01 00 00       	call   100550 <kprintf>
    show_dump(cpu);
  1003c7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1003ca:	89 0c 24             	mov    %ecx,(%esp)
  1003cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1003d0:	e8 0b 00 00 00       	call   1003e0 <show_dump>

    while (1) {
        asm volatile("cli; hlt");
  1003d5:	fa                   	cli    
  1003d6:	f4                   	hlt    
    }
  1003d7:	e9 f9 ff ff ff       	jmp    1003d5 <show_cod+0x65>
  1003dc:	0f 1f 40 00          	nopl   0x0(%eax)

001003e0 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  1003e0:	55                   	push   %ebp
  1003e1:	89 e5                	mov    %esp,%ebp
  1003e3:	53                   	push   %ebx
  1003e4:	57                   	push   %edi
  1003e5:	56                   	push   %esi
  1003e6:	83 ec 2c             	sub    $0x2c,%esp
  1003e9:	8b 45 08             	mov    0x8(%ebp),%eax
  1003ec:	8d 0d 9e 71 10 00    	lea    0x10719e,%ecx
  1003f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx,
  1003f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1003f8:	8b 00                	mov    (%eax),%eax
  1003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1003fd:	8b 52 04             	mov    0x4(%edx),%edx
  100400:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100403:	8b 76 08             	mov    0x8(%esi),%esi
  100406:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100409:	8b 7f 0c             	mov    0xc(%edi),%edi
  10040c:	89 0c 24             	mov    %ecx,(%esp)
  10040f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100413:	89 54 24 08          	mov    %edx,0x8(%esp)
  100417:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10041b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10041f:	e8 2c 01 00 00       	call   100550 <kprintf>
  100424:	8d 0d bf 71 10 00    	lea    0x1071bf,%ecx
            cpu->edx);
    kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp,
  10042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10042d:	8b 52 10             	mov    0x10(%edx),%edx
  100430:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100433:	8b 76 14             	mov    0x14(%esi),%esi
  100436:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100439:	8b 7f 18             	mov    0x18(%edi),%edi
  10043c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10043f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  100442:	89 0c 24             	mov    %ecx,(%esp)
  100445:	89 54 24 04          	mov    %edx,0x4(%esp)
  100449:	89 74 24 08          	mov    %esi,0x8(%esp)
  10044d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  100451:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  100455:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100458:	e8 f3 00 00 00       	call   100550 <kprintf>
  10045d:	8d 0d e0 71 10 00    	lea    0x1071e0,%ecx
            cpu->eip);
    kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags,
  100463:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100466:	8b 52 28             	mov    0x28(%edx),%edx
  100469:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10046c:	8b 76 2c             	mov    0x2c(%esi),%esi
  10046f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100472:	8b 7f 30             	mov    0x30(%edi),%edi
  100475:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  100478:	8b 5b 34             	mov    0x34(%ebx),%ebx
  10047b:	89 0c 24             	mov    %ecx,(%esp)
  10047e:	89 54 24 04          	mov    %edx,0x4(%esp)
  100482:	89 74 24 08          	mov    %esi,0x8(%esp)
  100486:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10048a:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  10048e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100491:	e8 ba 00 00 00       	call   100550 <kprintf>
  100496:	8d 0d 02 72 10 00    	lea    0x107202,%ecx
            cpu->esp, cpu->ss);

    uint32_t cr2 = 0;
  10049c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    asm volatile("mov %%cr2, %0" : "=r" (cr2));
  1004a3:	0f 20 d2             	mov    %cr2,%edx
  1004a6:	89 55 ec             	mov    %edx,-0x14(%ebp)

    kprintf("CR2: %x \n", cr2);
  1004a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1004ac:	89 0c 24             	mov    %ecx,(%esp)
  1004af:	89 54 24 04          	mov    %edx,0x4(%esp)
  1004b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1004b6:	e8 95 00 00 00       	call   100550 <kprintf>
}
  1004bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1004be:	83 c4 2c             	add    $0x2c,%esp
  1004c1:	5e                   	pop    %esi
  1004c2:	5f                   	pop    %edi
  1004c3:	5b                   	pop    %ebx
  1004c4:	5d                   	pop    %ebp
  1004c5:	c3                   	ret    
  1004c6:	66 90                	xchg   %ax,%ax
  1004c8:	66 90                	xchg   %ax,%ax
  1004ca:	66 90                	xchg   %ax,%ax
  1004cc:	66 90                	xchg   %ax,%ax
  1004ce:	66 90                	xchg   %ax,%ax

001004d0 <clrscr>:
        x /= base;
    } while (x);
    kputs(p);
}

void clrscr(void) {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1004d3:	50                   	push   %eax
  1004d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1004db:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  1004e2:	0f 8d 1d 00 00 00    	jge    100505 <clrscr+0x35>
        video[i] = 0;
  1004e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004eb:	8b 0d 00 61 10 00    	mov    0x106100,%ecx
  1004f1:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1004f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004f8:	05 01 00 00 00       	add    $0x1,%eax
  1004fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100500:	e9 d6 ff ff ff       	jmp    1004db <clrscr+0xb>
        video[i] = 0;
    }

    color = 0x07;
  100505:	c6 05 04 61 10 00 07 	movb   $0x7,0x106104

    x = y = 0;
  10050c:	c7 05 14 90 10 00 00 	movl   $0x0,0x109014
  100513:	00 00 00 
  100516:	c7 05 18 90 10 00 00 	movl   $0x0,0x109018
  10051d:	00 00 00 
}
  100520:	83 c4 04             	add    $0x4,%esp
  100523:	5d                   	pop    %ebp
  100524:	c3                   	ret    
  100525:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10052c:	00 00 00 00 

00100530 <setclr>:

void setclr(char clr) {
  100530:	55                   	push   %ebp
  100531:	89 e5                	mov    %esp,%ebp
  100533:	50                   	push   %eax
  100534:	8a 45 08             	mov    0x8(%ebp),%al
  100537:	88 45 ff             	mov    %al,-0x1(%ebp)
    color = clr;
  10053a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10053d:	a2 04 61 10 00       	mov    %al,0x106104
}
  100542:	83 c4 04             	add    $0x4,%esp
  100545:	5d                   	pop    %ebp
  100546:	c3                   	ret    
  100547:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10054e:	00 00 

00100550 <kprintf>:

int kprintf(const char* fmt, ...) {
  100550:	55                   	push   %ebp
  100551:	89 e5                	mov    %esp,%ebp
  100553:	83 ec 58             	sub    $0x58,%esp
  100556:	8b 45 08             	mov    0x8(%ebp),%eax
  100559:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  10055c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10055f:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  100562:	89 01                	mov    %eax,(%ecx)
    kprintf_res = 0;
  100564:	c7 05 1c 90 10 00 00 	movl   $0x0,0x10901c
  10056b:	00 00 00 
    while (*fmt) {
  10056e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100571:	80 38 00             	cmpb   $0x0,(%eax)
  100574:	0f 84 dd 01 00 00    	je     100757 <kprintf+0x207>
        if (*fmt == '%') {
  10057a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10057d:	0f be 00             	movsbl (%eax),%eax
  100580:	3d 25 00 00 00       	cmp    $0x25,%eax
  100585:	0f 85 ae 01 00 00    	jne    100739 <kprintf+0x1e9>
            fmt++;
  10058b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10058e:	89 c1                	mov    %eax,%ecx
  100590:	41                   	inc    %ecx
  100591:	89 4d fc             	mov    %ecx,-0x4(%ebp)
            switch (*fmt) {
  100594:	0f be 40 01          	movsbl 0x1(%eax),%eax
  100598:	89 c1                	mov    %eax,%ecx
  10059a:	83 e9 24             	sub    $0x24,%ecx
  10059d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1005a0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1005a3:	0f 8f 15 00 00 00    	jg     1005be <kprintf+0x6e>
  1005a9:	e9 00 00 00 00       	jmp    1005ae <kprintf+0x5e>
  1005ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005b1:	85 c0                	test   %eax,%eax
  1005b3:	0f 84 54 01 00 00    	je     10070d <kprintf+0x1bd>
  1005b9:	e9 54 01 00 00       	jmp    100712 <kprintf+0x1c2>
  1005be:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005c1:	83 e8 62             	sub    $0x62,%eax
  1005c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1005c7:	0f 8f 19 00 00 00    	jg     1005e6 <kprintf+0x96>
  1005cd:	e9 00 00 00 00       	jmp    1005d2 <kprintf+0x82>
  1005d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005d5:	83 e8 25             	sub    $0x25,%eax
  1005d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1005db:	0f 84 13 01 00 00    	je     1006f4 <kprintf+0x1a4>
  1005e1:	e9 2c 01 00 00       	jmp    100712 <kprintf+0x1c2>
  1005e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005e9:	83 e8 6f             	sub    $0x6f,%eax
  1005ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1005ef:	0f 8f 2d 00 00 00    	jg     100622 <kprintf+0xd2>
  1005f5:	e9 00 00 00 00       	jmp    1005fa <kprintf+0xaa>
  1005fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005fd:	83 e8 63             	sub    $0x63,%eax
  100600:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100603:	0f 84 c5 00 00 00    	je     1006ce <kprintf+0x17e>
  100609:	e9 00 00 00 00       	jmp    10060e <kprintf+0xbe>
  10060e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100611:	83 e8 64             	sub    $0x64,%eax
  100614:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100617:	0f 84 4b 00 00 00    	je     100668 <kprintf+0x118>
  10061d:	e9 f0 00 00 00       	jmp    100712 <kprintf+0x1c2>
  100622:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100625:	83 c0 90             	add    $0xffffff90,%eax
  100628:	89 c1                	mov    %eax,%ecx
  10062a:	83 e9 08             	sub    $0x8,%ecx
  10062d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100630:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100633:	0f 87 d9 00 00 00    	ja     100712 <kprintf+0x1c2>
  100639:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10063c:	8b 0c 85 00 70 10 00 	mov    0x107000(,%eax,4),%ecx
  100643:	ff e1                	jmp    *%ecx
            case 's':
                s = va_arg(ap, char*);
  100645:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100648:	89 c1                	mov    %eax,%ecx
  10064a:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100650:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100653:	8b 00                	mov    (%eax),%eax
  100655:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  100658:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10065b:	89 04 24             	mov    %eax,(%esp)
  10065e:	e8 0d 01 00 00       	call   100770 <kputs>
                break;
  100663:	e9 cc 00 00 00       	jmp    100734 <kprintf+0x1e4>
  100668:	b8 0a 00 00 00       	mov    $0xa,%eax
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  10066d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100670:	89 ca                	mov    %ecx,%edx
  100672:	81 c2 04 00 00 00    	add    $0x4,%edx
  100678:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10067b:	8b 09                	mov    (%ecx),%ecx
  10067d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 10);
  100680:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100683:	89 0c 24             	mov    %ecx,(%esp)
  100686:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10068d:	00 
  10068e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100691:	e8 1a 01 00 00       	call   1007b0 <kputn>
                break;
  100696:	e9 99 00 00 00       	jmp    100734 <kprintf+0x1e4>
  10069b:	b8 10 00 00 00       	mov    $0x10,%eax
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  1006a0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1006a3:	89 ca                	mov    %ecx,%edx
  1006a5:	81 c2 04 00 00 00    	add    $0x4,%edx
  1006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1006ae:	8b 09                	mov    (%ecx),%ecx
  1006b0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 16);
  1006b3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1006b6:	89 0c 24             	mov    %ecx,(%esp)
  1006b9:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1006c0:	00 
  1006c1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1006c4:	e8 e7 00 00 00       	call   1007b0 <kputn>
                break;
  1006c9:	e9 66 00 00 00       	jmp    100734 <kprintf+0x1e4>
            case 'c':
                c = va_arg(ap, int);
  1006ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1006d1:	89 c1                	mov    %eax,%ecx
  1006d3:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1006d9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1006dc:	8b 00                	mov    (%eax),%eax
  1006de:	88 c2                	mov    %al,%dl
  1006e0:	88 55 ef             	mov    %dl,-0x11(%ebp)
                kputc(c);
  1006e3:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  1006e7:	89 04 24             	mov    %eax,(%esp)
  1006ea:	e8 61 01 00 00       	call   100850 <kputc>
                break;
  1006ef:	e9 40 00 00 00       	jmp    100734 <kprintf+0x1e4>
  1006f4:	b8 25 00 00 00       	mov    $0x25,%eax
            case '%':
                kputc('%');
  1006f9:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100700:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100703:	e8 48 01 00 00       	call   100850 <kputc>
                break;
  100708:	e9 27 00 00 00       	jmp    100734 <kprintf+0x1e4>
            case '\0':
                goto out;
  10070d:	e9 4a 00 00 00       	jmp    10075c <kprintf+0x20c>
  100712:	b8 25 00 00 00       	mov    $0x25,%eax
            default:
                kputc('%');
  100717:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10071e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100721:	e8 2a 01 00 00       	call   100850 <kputc>
                kputc(*fmt);
  100726:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100729:	0f be 00             	movsbl (%eax),%eax
  10072c:	89 04 24             	mov    %eax,(%esp)
  10072f:	e8 1c 01 00 00       	call   100850 <kputc>
                break;
            }
        } else {
  100734:	e9 0e 00 00 00       	jmp    100747 <kprintf+0x1f7>
            kputc(*fmt);
  100739:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10073c:	0f be 00             	movsbl (%eax),%eax
  10073f:	89 04 24             	mov    %eax,(%esp)
  100742:	e8 09 01 00 00       	call   100850 <kputc>
        }

        fmt++;
  100747:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10074a:	05 01 00 00 00       	add    $0x1,%eax
  10074f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  100752:	e9 17 fe ff ff       	jmp    10056e <kprintf+0x1e>
  100757:	e9 00 00 00 00       	jmp    10075c <kprintf+0x20c>

    out:
    va_end(ap);

    return kprintf_res;
  10075c:	a1 1c 90 10 00       	mov    0x10901c,%eax
  100761:	83 c4 58             	add    $0x58,%esp
  100764:	5d                   	pop    %ebp
  100765:	c3                   	ret    
  100766:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10076d:	00 00 00 

00100770 <kputs>:

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  100770:	55                   	push   %ebp
  100771:	89 e5                	mov    %esp,%ebp
  100773:	83 ec 08             	sub    $0x8,%esp
  100776:	8b 45 08             	mov    0x8(%ebp),%eax
  100779:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  10077c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10077f:	80 38 00             	cmpb   $0x0,(%eax)
  100782:	0f 84 1e 00 00 00    	je     1007a6 <kputs+0x36>
        kputc(*s++);
  100788:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10078b:	89 c1                	mov    %eax,%ecx
  10078d:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100793:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100796:	0f be 00             	movsbl (%eax),%eax
  100799:	89 04 24             	mov    %eax,(%esp)
  10079c:	e8 af 00 00 00       	call   100850 <kputc>
    }
  1007a1:	e9 d6 ff ff ff       	jmp    10077c <kputs+0xc>
}
  1007a6:	83 c4 08             	add    $0x8,%esp
  1007a9:	5d                   	pop    %ebp
  1007aa:	c3                   	ret    
  1007ab:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001007b0 <kputn>:

static void kputn(unsigned long x, int base) {
  1007b0:	55                   	push   %ebp
  1007b1:	89 e5                	mov    %esp,%ebp
  1007b3:	56                   	push   %esi
  1007b4:	83 ec 64             	sub    $0x64,%esp
  1007b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1007ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1007bd:	8d 15 0c 72 10 00    	lea    0x10720c,%edx
  1007c3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1007c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1007c9:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  1007cc:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  1007d3:	0f 8e 05 00 00 00    	jle    1007de <kputn+0x2e>
        return;
  1007d9:	e9 5d 00 00 00       	jmp    10083b <kputn+0x8b>
  1007de:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  1007e1:	05 40 00 00 00       	add    $0x40,%eax
  1007e6:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  1007e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1007ec:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  1007ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1007f2:	31 d2                	xor    %edx,%edx
  1007f4:	f7 75 f4             	divl   -0xc(%ebp)
  1007f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
  1007fa:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  1007fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100800:	89 c2                	mov    %eax,%edx
  100802:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  100808:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10080b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10080e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100811:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100814:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  100817:	89 d0                	mov    %edx,%eax
  100819:	31 d2                	xor    %edx,%edx
  10081b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10081e:	f7 f6                	div    %esi
  100820:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  100823:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10082a:	0f 85 bf ff ff ff    	jne    1007ef <kputn+0x3f>
    kputs(p);
  100830:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100833:	89 04 24             	mov    %eax,(%esp)
  100836:	e8 35 ff ff ff       	call   100770 <kputs>
}
  10083b:	83 c4 64             	add    $0x64,%esp
  10083e:	5e                   	pop    %esi
  10083f:	5d                   	pop    %ebp
  100840:	c3                   	ret    
  100841:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100848:	0f 1f 84 00 00 00 00 
  10084f:	00 

00100850 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  100850:	55                   	push   %ebp
  100851:	89 e5                	mov    %esp,%ebp
  100853:	83 ec 08             	sub    $0x8,%esp
  100856:	8a 45 08             	mov    0x8(%ebp),%al
  100859:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((c == '\n') || (x > 79)) {
  10085c:	0f be 4d ff          	movsbl -0x1(%ebp),%ecx
  100860:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  100866:	0f 84 10 00 00 00    	je     10087c <kputc+0x2c>
  10086c:	81 3d 18 90 10 00 4f 	cmpl   $0x4f,0x109018
  100873:	00 00 00 
  100876:	0f 8e 19 00 00 00    	jle    100895 <kputc+0x45>
        x = 0;
  10087c:	c7 05 18 90 10 00 00 	movl   $0x0,0x109018
  100883:	00 00 00 
        y++;
  100886:	a1 14 90 10 00       	mov    0x109014,%eax
  10088b:	05 01 00 00 00       	add    $0x1,%eax
  100890:	a3 14 90 10 00       	mov    %eax,0x109014
    }

    if (c == '\n') {
  100895:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  100899:	3d 0a 00 00 00       	cmp    $0xa,%eax
  10089e:	0f 85 05 00 00 00    	jne    1008a9 <kputc+0x59>
        return;
  1008a4:	e9 f3 00 00 00       	jmp    10099c <kputc+0x14c>
    }

    if (y > 24) {
  1008a9:	81 3d 14 90 10 00 18 	cmpl   $0x18,0x109014
  1008b0:	00 00 00 
  1008b3:	0f 8e 7e 00 00 00    	jle    100937 <kputc+0xe7>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1008b9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1008c0:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  1008c7:	0f 8d 2c 00 00 00    	jge    1008f9 <kputc+0xa9>
            video[i] = video[i + 160];
  1008cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1008d0:	8b 0d 00 61 10 00    	mov    0x106100,%ecx
  1008d6:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  1008dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1008e0:	8b 0d 00 61 10 00    	mov    0x106100,%ecx
  1008e6:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1008e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1008ec:	05 01 00 00 00       	add    $0x1,%eax
  1008f1:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1008f4:	e9 c7 ff ff ff       	jmp    1008c0 <kputc+0x70>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  1008f9:	e9 00 00 00 00       	jmp    1008fe <kputc+0xae>
  1008fe:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  100905:	0f 8d 1d 00 00 00    	jge    100928 <kputc+0xd8>
            video[i] = 0;
  10090b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10090e:	8b 0d 00 61 10 00    	mov    0x106100,%ecx
  100914:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100918:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10091b:	05 01 00 00 00       	add    $0x1,%eax
  100920:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100923:	e9 d6 ff ff ff       	jmp    1008fe <kputc+0xae>
            video[i] = 0;
        }
        y--;
  100928:	a1 14 90 10 00       	mov    0x109014,%eax
  10092d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100932:	a3 14 90 10 00       	mov    %eax,0x109014
    }

    video[2 * (y * 80 + x)] = c;
  100937:	8a 45 ff             	mov    -0x1(%ebp),%al
  10093a:	69 0d 14 90 10 00 50 	imul   $0x50,0x109014,%ecx
  100941:	00 00 00 
  100944:	03 0d 18 90 10 00    	add    0x109018,%ecx
  10094a:	c1 e1 01             	shl    $0x1,%ecx
  10094d:	8b 15 00 61 10 00    	mov    0x106100,%edx
  100953:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  100956:	a0 04 61 10 00       	mov    0x106104,%al
  10095b:	69 0d 14 90 10 00 50 	imul   $0x50,0x109014,%ecx
  100962:	00 00 00 
  100965:	03 0d 18 90 10 00    	add    0x109018,%ecx
  10096b:	c1 e1 01             	shl    $0x1,%ecx
  10096e:	8b 15 00 61 10 00    	mov    0x106100,%edx
  100974:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  100978:	8b 0d 18 90 10 00    	mov    0x109018,%ecx
  10097e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100984:	89 0d 18 90 10 00    	mov    %ecx,0x109018
    kprintf_res++;
  10098a:	8b 0d 1c 90 10 00    	mov    0x10901c,%ecx
  100990:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100996:	89 0d 1c 90 10 00    	mov    %ecx,0x10901c
}
  10099c:	83 c4 08             	add    $0x8,%esp
  10099f:	5d                   	pop    %ebp
  1009a0:	c3                   	ret    
  1009a1:	66 90                	xchg   %ax,%ax
  1009a3:	66 90                	xchg   %ax,%ax
  1009a5:	66 90                	xchg   %ax,%ax
  1009a7:	66 90                	xchg   %ax,%ax
  1009a9:	66 90                	xchg   %ax,%ax
  1009ab:	66 90                	xchg   %ax,%ax
  1009ad:	66 90                	xchg   %ax,%ax
  1009af:	90                   	nop

001009b0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];

void load_gdt() {
  1009b0:	55                   	push   %ebp
  1009b1:	89 e5                	mov    %esp,%ebp
	struct {
  1009b3:	83 ec 08             	sub    $0x8,%esp
  1009b6:	a1 24 70 10 00       	mov    0x107024,%eax
  1009bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1009be:	66 8b 0d 28 70 10 00 	mov    0x107028,%cx
  1009c5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		uint16_t limit;
		void* pointer;
	}__attribute__((packed)) gdtp = { .limit = GDT_ENTRIES * 8 - 1, .pointer =
			gdt, };

	asm volatile("lgdt %0" : : "m" (gdtp));
  1009c9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  1009cd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  1009d1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  1009d4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  1009d7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  1009da:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  1009dd:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  1009e0:	83 c4 08             	add    $0x8,%esp
  1009e3:	5d                   	pop    %ebp
  1009e4:	c3                   	ret    
  1009e5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1009ec:	00 00 00 00 

001009f0 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags) {
  1009f0:	55                   	push   %ebp
  1009f1:	89 e5                	mov    %esp,%ebp
  1009f3:	56                   	push   %esi
  1009f4:	83 ec 10             	sub    $0x10,%esp
  1009f7:	8b 45 14             	mov    0x14(%ebp),%eax
  1009fa:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1009fd:	8b 55 0c             	mov    0xc(%ebp),%edx
  100a00:	8b 75 08             	mov    0x8(%ebp),%esi
  100a03:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100a06:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100a09:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100a0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gdt[i] = limit & 0xffffLL;
  100a0f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  100a13:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100a16:	89 04 cd 60 94 12 00 	mov    %eax,0x129460(,%ecx,8)
  100a1d:	c7 04 cd 64 94 12 00 	movl   $0x0,0x129464(,%ecx,8)
  100a24:	00 00 00 00 
	gdt[i] |= (base & 0xffffffLL) << 16;
  100a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100a2b:	25 ff ff ff 00       	and    $0xffffff,%eax
  100a30:	89 c1                	mov    %eax,%ecx
  100a32:	c1 e1 10             	shl    $0x10,%ecx
  100a35:	c1 e8 10             	shr    $0x10,%eax
  100a38:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100a3b:	8b 34 d5 64 94 12 00 	mov    0x129464(,%edx,8),%esi
  100a42:	09 f0                	or     %esi,%eax
  100a44:	8b 34 d5 60 94 12 00 	mov    0x129460(,%edx,8),%esi
  100a4b:	09 ce                	or     %ecx,%esi
  100a4d:	89 04 d5 64 94 12 00 	mov    %eax,0x129464(,%edx,8)
  100a54:	89 34 d5 60 94 12 00 	mov    %esi,0x129460(,%edx,8)
	gdt[i] |= (flags & 0xffLL) << 40;
  100a5b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  100a5f:	c1 e0 08             	shl    $0x8,%eax
  100a62:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100a65:	8b 14 cd 60 94 12 00 	mov    0x129460(,%ecx,8),%edx
  100a6c:	8b 34 cd 64 94 12 00 	mov    0x129464(,%ecx,8),%esi
  100a73:	09 c6                	or     %eax,%esi
  100a75:	89 14 cd 60 94 12 00 	mov    %edx,0x129460(,%ecx,8)
  100a7c:	89 34 cd 64 94 12 00 	mov    %esi,0x129464(,%ecx,8)
	gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100a83:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  100a87:	83 e0 0f             	and    $0xf,%eax
  100a8a:	c1 e0 10             	shl    $0x10,%eax
  100a8d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100a90:	8b 14 cd 60 94 12 00 	mov    0x129460(,%ecx,8),%edx
  100a97:	8b 34 cd 64 94 12 00 	mov    0x129464(,%ecx,8),%esi
  100a9e:	09 c6                	or     %eax,%esi
  100aa0:	89 14 cd 60 94 12 00 	mov    %edx,0x129460(,%ecx,8)
  100aa7:	89 34 cd 64 94 12 00 	mov    %esi,0x129464(,%ecx,8)
	gdt[i] |= ((flags >> 8) & 0xffLL) << 52;
  100aae:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ab1:	c1 e0 0c             	shl    $0xc,%eax
  100ab4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  100ab9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100abc:	8b 14 cd 60 94 12 00 	mov    0x129460(,%ecx,8),%edx
  100ac3:	8b 34 cd 64 94 12 00 	mov    0x129464(,%ecx,8),%esi
  100aca:	09 c6                	or     %eax,%esi
  100acc:	89 14 cd 60 94 12 00 	mov    %edx,0x129460(,%ecx,8)
  100ad3:	89 34 cd 64 94 12 00 	mov    %esi,0x129464(,%ecx,8)
	gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100ada:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100ade:	c1 e0 18             	shl    $0x18,%eax
  100ae1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100ae4:	8b 14 cd 60 94 12 00 	mov    0x129460(,%ecx,8),%edx
  100aeb:	8b 34 cd 64 94 12 00 	mov    0x129464(,%ecx,8),%esi
  100af2:	09 c6                	or     %eax,%esi
  100af4:	89 14 cd 60 94 12 00 	mov    %edx,0x129460(,%ecx,8)
  100afb:	89 34 cd 64 94 12 00 	mov    %esi,0x129464(,%ecx,8)
}
  100b02:	83 c4 10             	add    $0x10,%esp
  100b05:	5e                   	pop    %esi
  100b06:	5d                   	pop    %ebp
  100b07:	c3                   	ret    
  100b08:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100b0f:	00 

00100b10 <init_gdt>:

void init_gdt(void) {
  100b10:	55                   	push   %ebp
  100b11:	89 e5                	mov    %esp,%ebp
  100b13:	56                   	push   %esi
  100b14:	83 ec 54             	sub    $0x54,%esp
  100b17:	b8 00 00 00 00       	mov    $0x0,%eax
	set_gdt_entry(0, 0, 0, 0);
  100b1c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100b23:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100b2a:	00 
  100b2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100b32:	00 
  100b33:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100b3a:	00 
  100b3b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100b3e:	e8 ad fe ff ff       	call   1009f0 <set_gdt_entry>
  100b43:	b8 01 00 00 00       	mov    $0x1,%eax
  100b48:	b9 00 00 00 00       	mov    $0x0,%ecx
  100b4d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100b52:	be 9a 0c 00 00       	mov    $0xc9a,%esi
	set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100b57:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100b5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100b65:	00 
  100b66:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100b6d:	00 
  100b6e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100b75:	00 
  100b76:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100b79:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100b7c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100b7f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  100b82:	e8 69 fe ff ff       	call   1009f0 <set_gdt_entry>
  100b87:	b8 02 00 00 00       	mov    $0x2,%eax
  100b8c:	b9 00 00 00 00       	mov    $0x0,%ecx
  100b91:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100b96:	be 92 0c 00 00       	mov    $0xc92,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100b9b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100ba2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ba9:	00 
  100baa:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100bb1:	00 
  100bb2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  100bb9:	00 
  100bba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100bbd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  100bc0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  100bc3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  100bc6:	e8 25 fe ff ff       	call   1009f0 <set_gdt_entry>
  100bcb:	b8 03 00 00 00       	mov    $0x3,%eax
  100bd0:	b9 00 00 00 00       	mov    $0x0,%ecx
  100bd5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100bda:	be fa 0c 00 00       	mov    $0xcfa,%esi
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100bdf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100be6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100bed:	00 
  100bee:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100bf5:	00 
  100bf6:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  100bfd:	00 
  100bfe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100c01:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  100c04:	89 55 cc             	mov    %edx,-0x34(%ebp)
  100c07:	89 75 c8             	mov    %esi,-0x38(%ebp)
  100c0a:	e8 e1 fd ff ff       	call   1009f0 <set_gdt_entry>
  100c0f:	b8 04 00 00 00       	mov    $0x4,%eax
  100c14:	b9 00 00 00 00       	mov    $0x0,%ecx
  100c19:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100c1e:	be f2 0c 00 00       	mov    $0xcf2,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
	set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100c23:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  100c2a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100c31:	00 
  100c32:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100c39:	00 
  100c3a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  100c41:	00 
  100c42:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100c45:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  100c48:	89 55 bc             	mov    %edx,-0x44(%ebp)
  100c4b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  100c4e:	e8 9d fd ff ff       	call   1009f0 <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	load_gdt();
  100c53:	e8 58 fd ff ff       	call   1009b0 <load_gdt>
}
  100c58:	83 c4 54             	add    $0x54,%esp
  100c5b:	5e                   	pop    %esi
  100c5c:	5d                   	pop    %ebp
  100c5d:	c3                   	ret    
  100c5e:	66 90                	xchg   %ax,%ax

00100c60 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  100c60:	55                   	push   %ebp
  100c61:	89 e5                	mov    %esp,%ebp
  100c63:	53                   	push   %ebx
  100c64:	57                   	push   %edi
  100c65:	56                   	push   %esi
  100c66:	83 ec 10             	sub    $0x10,%esp
  100c69:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  100c6d:	66 89 c1             	mov    %ax,%cx
  100c70:	8a 55 14             	mov    0x14(%ebp),%dl
  100c73:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c76:	8b 75 08             	mov    0x8(%ebp),%esi
  100c79:	89 75 f0             	mov    %esi,-0x10(%ebp)
  100c7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100c7f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  100c83:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  100c86:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100c89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  100c8c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100c90:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100c93:	89 04 f5 20 90 10 00 	mov    %eax,0x109020(,%esi,8)
  100c9a:	c7 04 f5 24 90 10 00 	movl   $0x0,0x109024(,%esi,8)
  100ca1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  100ca5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  100ca9:	c1 e0 10             	shl    $0x10,%eax
  100cac:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100caf:	8b 3c f5 24 90 10 00 	mov    0x109024(,%esi,8),%edi
  100cb6:	8b 1c f5 20 90 10 00 	mov    0x109020(,%esi,8),%ebx
  100cbd:	09 c3                	or     %eax,%ebx
  100cbf:	89 3c f5 24 90 10 00 	mov    %edi,0x109024(,%esi,8)
  100cc6:	89 1c f5 20 90 10 00 	mov    %ebx,0x109020(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  100ccd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  100cd1:	c1 e0 08             	shl    $0x8,%eax
  100cd4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100cd7:	8b 3c f5 20 90 10 00 	mov    0x109020(,%esi,8),%edi
  100cde:	8b 1c f5 24 90 10 00 	mov    0x109024(,%esi,8),%ebx
  100ce5:	09 c3                	or     %eax,%ebx
  100ce7:	89 3c f5 20 90 10 00 	mov    %edi,0x109020(,%esi,8)
  100cee:	89 1c f5 24 90 10 00 	mov    %ebx,0x109024(,%esi,8)
	idt[i] |= ((handler >> 16) & 0xffffLL) << 48;
  100cf5:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  100cf9:	c1 e0 10             	shl    $0x10,%eax
  100cfc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100cff:	8b 3c f5 20 90 10 00 	mov    0x109020(,%esi,8),%edi
  100d06:	8b 1c f5 24 90 10 00 	mov    0x109024(,%esi,8),%ebx
  100d0d:	09 c3                	or     %eax,%ebx
  100d0f:	89 3c f5 20 90 10 00 	mov    %edi,0x109020(,%esi,8)
  100d16:	89 1c f5 24 90 10 00 	mov    %ebx,0x109024(,%esi,8)
}
  100d1d:	83 c4 10             	add    $0x10,%esp
  100d20:	5e                   	pop    %esi
  100d21:	5f                   	pop    %edi
  100d22:	5b                   	pop    %ebx
  100d23:	5d                   	pop    %ebp
  100d24:	c3                   	ret    
  100d25:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  100d2c:	00 00 00 00 

00100d30 <init_idt>:

void init_idt() {
  100d30:	55                   	push   %ebp
  100d31:	89 e5                	mov    %esp,%ebp
	struct {
  100d33:	56                   	push   %esi
  100d34:	81 ec 34 02 00 00    	sub    $0x234,%esp
  100d3a:	a1 2a 70 10 00       	mov    0x10702a,%eax
  100d3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100d42:	66 8b 0d 2e 70 10 00 	mov    0x10702e,%cx
  100d49:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
		unsigned short int limit;
		void* pointer;
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;
  100d4d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for (i = 0; i < IDT_ENTRIES; i++) {
  100d54:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100d5b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  100d62:	0f 8d 1e 00 00 00    	jge    100d86 <init_idt+0x56>
		handler_set[i] = 0;
  100d68:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d6b:	c7 04 85 20 92 10 00 	movl   $0x0,0x109220(,%eax,4)
  100d72:	00 00 00 00 
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;

	for (i = 0; i < IDT_ENTRIES; i++) {
  100d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d79:	05 01 00 00 00       	add    $0x1,%eax
  100d7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100d81:	e9 d5 ff ff ff       	jmp    100d5b <init_idt+0x2b>
  100d86:	b8 20 00 00 00       	mov    $0x20,%eax
  100d8b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

	outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  100d90:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100d97:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100d9e:	00 
  100d9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100da2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100da5:	e8 86 0b 00 00       	call   101930 <outb>
  100daa:	b8 21 00 00 00       	mov    $0x21,%eax
  100daf:	b9 20 00 00 00       	mov    $0x20,%ecx
	outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  100db4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100dbb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  100dc2:	00 
  100dc3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100dc6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  100dc9:	e8 62 0b 00 00       	call   101930 <outb>
  100dce:	b8 21 00 00 00       	mov    $0x21,%eax
  100dd3:	b9 04 00 00 00       	mov    $0x4,%ecx
	outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  100dd8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100ddf:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  100de6:	00 
  100de7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100dea:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  100ded:	e8 3e 0b 00 00       	call   101930 <outb>
  100df2:	b8 21 00 00 00       	mov    $0x21,%eax
  100df7:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0x21, 0x01); // ICW 4
  100dfc:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100e03:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100e0a:	00 
  100e0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100e0e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  100e11:	e8 1a 0b 00 00       	call   101930 <outb>
  100e16:	b8 a0 00 00 00       	mov    $0xa0,%eax
  100e1b:	b9 11 00 00 00       	mov    $0x11,%ecx

	outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  100e20:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100e27:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100e2e:	00 
  100e2f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  100e32:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  100e35:	e8 f6 0a 00 00       	call   101930 <outb>
  100e3a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e3f:	b9 28 00 00 00       	mov    $0x28,%ecx
	outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  100e44:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100e4b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  100e52:	00 
  100e53:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100e56:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  100e59:	e8 d2 0a 00 00       	call   101930 <outb>
  100e5e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e63:	b9 02 00 00 00       	mov    $0x2,%ecx
	outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  100e68:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100e6f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100e76:	00 
  100e77:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100e7a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  100e7d:	e8 ae 0a 00 00       	call   101930 <outb>
  100e82:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e87:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0xa1, 0x01); // ICW 4
  100e8c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100e93:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100e9a:	00 
  100e9b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  100e9e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100ea1:	e8 8a 0a 00 00       	call   101930 <outb>
  100ea6:	b8 20 00 00 00       	mov    $0x20,%eax
  100eab:	b9 00 00 00 00       	mov    $0x0,%ecx

	outb(0x20, 0x0);
  100eb0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100eb7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ebe:	00 
  100ebf:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100ec2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  100ec5:	e8 66 0a 00 00       	call   101930 <outb>
  100eca:	b8 a0 00 00 00       	mov    $0xa0,%eax
  100ecf:	b9 00 00 00 00       	mov    $0x0,%ecx
	outb(0xa0, 0x0);
  100ed4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100edb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ee2:	00 
  100ee3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  100ee6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  100ee9:	e8 42 0a 00 00       	call   101930 <outb>
  100eee:	b8 00 00 00 00       	mov    $0x0,%eax
  100ef3:	8d 0d 04 1b 10 00    	lea    0x101b04,%ecx
  100ef9:	ba 08 00 00 00       	mov    $0x8,%edx
  100efe:	be 8e 00 00 00       	mov    $0x8e,%esi

	idt_set_entry(0, intr_stub_0, 0x8,
  100f03:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100f0a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f0e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100f15:	00 
  100f16:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100f1d:	00 
  100f1e:	89 45 98             	mov    %eax,-0x68(%ebp)
  100f21:	89 75 94             	mov    %esi,-0x6c(%ebp)
  100f24:	89 55 90             	mov    %edx,-0x70(%ebp)
  100f27:	e8 34 fd ff ff       	call   100c60 <idt_set_entry>
  100f2c:	b8 01 00 00 00       	mov    $0x1,%eax
  100f31:	8d 0d 0d 1b 10 00    	lea    0x101b0d,%ecx
  100f37:	ba 08 00 00 00       	mov    $0x8,%edx
  100f3c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(1, intr_stub_1, 0x8,
  100f41:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100f48:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f4c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100f53:	00 
  100f54:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100f5b:	00 
  100f5c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  100f5f:	89 75 88             	mov    %esi,-0x78(%ebp)
  100f62:	89 55 84             	mov    %edx,-0x7c(%ebp)
  100f65:	e8 f6 fc ff ff       	call   100c60 <idt_set_entry>
  100f6a:	b8 02 00 00 00       	mov    $0x2,%eax
  100f6f:	8d 0d 16 1b 10 00    	lea    0x101b16,%ecx
  100f75:	ba 08 00 00 00       	mov    $0x8,%edx
  100f7a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(2, intr_stub_2, 0x8,
  100f7f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100f86:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f8a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100f91:	00 
  100f92:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100f99:	00 
  100f9a:	89 45 80             	mov    %eax,-0x80(%ebp)
  100f9d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  100fa3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  100fa9:	e8 b2 fc ff ff       	call   100c60 <idt_set_entry>
  100fae:	b8 03 00 00 00       	mov    $0x3,%eax
  100fb3:	8d 0d 1f 1b 10 00    	lea    0x101b1f,%ecx
  100fb9:	ba 08 00 00 00       	mov    $0x8,%edx
  100fbe:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(3, intr_stub_3, 0x8,
  100fc3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100fca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100fce:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100fd5:	00 
  100fd6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100fdd:	00 
  100fde:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  100fe4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  100fea:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  100ff0:	e8 6b fc ff ff       	call   100c60 <idt_set_entry>
  100ff5:	b8 04 00 00 00       	mov    $0x4,%eax
  100ffa:	8d 0d 28 1b 10 00    	lea    0x101b28,%ecx
  101000:	ba 08 00 00 00       	mov    $0x8,%edx
  101005:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(4, intr_stub_4, 0x8,
  10100a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101011:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101015:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10101c:	00 
  10101d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101024:	00 
  101025:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10102b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101031:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101037:	e8 24 fc ff ff       	call   100c60 <idt_set_entry>
  10103c:	b8 05 00 00 00       	mov    $0x5,%eax
  101041:	8d 0d 31 1b 10 00    	lea    0x101b31,%ecx
  101047:	ba 08 00 00 00       	mov    $0x8,%edx
  10104c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(5, intr_stub_5, 0x8,
  101051:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101058:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10105c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101063:	00 
  101064:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10106b:	00 
  10106c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101072:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101078:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10107e:	e8 dd fb ff ff       	call   100c60 <idt_set_entry>
  101083:	b8 06 00 00 00       	mov    $0x6,%eax
  101088:	8d 0d 3a 1b 10 00    	lea    0x101b3a,%ecx
  10108e:	ba 08 00 00 00       	mov    $0x8,%edx
  101093:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(6, intr_stub_6, 0x8,
  101098:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10109f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010a3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010aa:	00 
  1010ab:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1010b2:	00 
  1010b3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1010b9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1010bf:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1010c5:	e8 96 fb ff ff       	call   100c60 <idt_set_entry>
  1010ca:	b8 07 00 00 00       	mov    $0x7,%eax
  1010cf:	8d 0d 43 1b 10 00    	lea    0x101b43,%ecx
  1010d5:	ba 08 00 00 00       	mov    $0x8,%edx
  1010da:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(7, intr_stub_7, 0x8,
  1010df:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1010e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010ea:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010f1:	00 
  1010f2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1010f9:	00 
  1010fa:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101100:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101106:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10110c:	e8 4f fb ff ff       	call   100c60 <idt_set_entry>
  101111:	b8 08 00 00 00       	mov    $0x8,%eax
  101116:	8d 0d 4c 1b 10 00    	lea    0x101b4c,%ecx
  10111c:	ba 8e 00 00 00       	mov    $0x8e,%edx
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(8, intr_stub_8, 0x8,
  101121:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101128:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10112c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101133:	00 
  101134:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10113b:	00 
  10113c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101142:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101148:	e8 13 fb ff ff       	call   100c60 <idt_set_entry>
  10114d:	b8 09 00 00 00       	mov    $0x9,%eax
  101152:	8d 0d 53 1b 10 00    	lea    0x101b53,%ecx
  101158:	ba 08 00 00 00       	mov    $0x8,%edx
  10115d:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(9, intr_stub_9, 0x8,
  101162:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101169:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10116d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101174:	00 
  101175:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10117c:	00 
  10117d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101183:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101189:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10118f:	e8 cc fa ff ff       	call   100c60 <idt_set_entry>
  101194:	b8 0a 00 00 00       	mov    $0xa,%eax
  101199:	8d 0d 5c 1b 10 00    	lea    0x101b5c,%ecx
  10119f:	ba 08 00 00 00       	mov    $0x8,%edx
  1011a4:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(10, intr_stub_10, 0x8,
  1011a9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1011b0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011b4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1011bb:	00 
  1011bc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1011c3:	00 
  1011c4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1011ca:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1011d0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1011d6:	e8 85 fa ff ff       	call   100c60 <idt_set_entry>
  1011db:	b8 0b 00 00 00       	mov    $0xb,%eax
  1011e0:	8d 0d 63 1b 10 00    	lea    0x101b63,%ecx
  1011e6:	ba 08 00 00 00       	mov    $0x8,%edx
  1011eb:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(11, intr_stub_11, 0x8,
  1011f0:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  1011f7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011fb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101202:	00 
  101203:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10120a:	00 
  10120b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101211:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101217:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10121d:	e8 3e fa ff ff       	call   100c60 <idt_set_entry>
  101222:	b8 0c 00 00 00       	mov    $0xc,%eax
  101227:	8d 0d 6a 1b 10 00    	lea    0x101b6a,%ecx
  10122d:	ba 08 00 00 00       	mov    $0x8,%edx
  101232:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(12, intr_stub_12, 0x8,
  101237:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10123e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101242:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101249:	00 
  10124a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101251:	00 
  101252:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101258:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10125e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101264:	e8 f7 f9 ff ff       	call   100c60 <idt_set_entry>
  101269:	b8 0d 00 00 00       	mov    $0xd,%eax
  10126e:	8d 0d 71 1b 10 00    	lea    0x101b71,%ecx
  101274:	ba 08 00 00 00       	mov    $0x8,%edx
  101279:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(13, intr_stub_13, 0x8,
  10127e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101285:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101289:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101290:	00 
  101291:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101298:	00 
  101299:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10129f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  1012a5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  1012ab:	e8 b0 f9 ff ff       	call   100c60 <idt_set_entry>
  1012b0:	b8 0e 00 00 00       	mov    $0xe,%eax
  1012b5:	8d 0d 78 1b 10 00    	lea    0x101b78,%ecx
  1012bb:	ba 08 00 00 00       	mov    $0x8,%edx
  1012c0:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(14, intr_stub_14, 0x8,
  1012c5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1012cc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1012d0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1012d7:	00 
  1012d8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1012df:	00 
  1012e0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1012e6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1012ec:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  1012f2:	e8 69 f9 ff ff       	call   100c60 <idt_set_entry>
  1012f7:	b8 0f 00 00 00       	mov    $0xf,%eax
  1012fc:	8d 0d 7c 1b 10 00    	lea    0x101b7c,%ecx
  101302:	ba 08 00 00 00       	mov    $0x8,%edx
  101307:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(15, intr_stub_15, 0x8,
  10130c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101313:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101317:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10131e:	00 
  10131f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101326:	00 
  101327:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10132d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101333:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101339:	e8 22 f9 ff ff       	call   100c60 <idt_set_entry>
  10133e:	b8 10 00 00 00       	mov    $0x10,%eax
  101343:	8d 0d 82 1b 10 00    	lea    0x101b82,%ecx
  101349:	ba 08 00 00 00       	mov    $0x8,%edx
  10134e:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(16, intr_stub_16, 0x8,
  101353:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10135a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10135e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101365:	00 
  101366:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10136d:	00 
  10136e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101374:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  10137a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101380:	e8 db f8 ff ff       	call   100c60 <idt_set_entry>
  101385:	b8 11 00 00 00       	mov    $0x11,%eax
  10138a:	8d 0d 88 1b 10 00    	lea    0x101b88,%ecx
  101390:	ba 08 00 00 00       	mov    $0x8,%edx
  101395:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(17, intr_stub_17, 0x8,
  10139a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1013a1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1013a5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013ac:	00 
  1013ad:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013b4:	00 
  1013b5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  1013bb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  1013c1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  1013c7:	e8 94 f8 ff ff       	call   100c60 <idt_set_entry>
  1013cc:	b8 12 00 00 00       	mov    $0x12,%eax
  1013d1:	8d 0d 8c 1b 10 00    	lea    0x101b8c,%ecx
  1013d7:	ba 08 00 00 00       	mov    $0x8,%edx
  1013dc:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(18, intr_stub_18, 0x8,
  1013e1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1013e8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1013ec:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013f3:	00 
  1013f4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013fb:	00 
  1013fc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101402:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101408:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10140e:	e8 4d f8 ff ff       	call   100c60 <idt_set_entry>
  101413:	b8 20 00 00 00       	mov    $0x20,%eax
  101418:	8d 0d 92 1b 10 00    	lea    0x101b92,%ecx
  10141e:	ba 08 00 00 00       	mov    $0x8,%edx
  101423:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(32, intr_stub_32, 0x8,
  101428:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10142f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101433:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10143a:	00 
  10143b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101442:	00 
  101443:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101449:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  10144f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101455:	e8 06 f8 ff ff       	call   100c60 <idt_set_entry>
  10145a:	b8 21 00 00 00       	mov    $0x21,%eax
  10145f:	8d 0d 98 1b 10 00    	lea    0x101b98,%ecx
  101465:	ba 08 00 00 00       	mov    $0x8,%edx
  10146a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(33, intr_stub_33, 0x8,
  10146f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101476:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10147a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101481:	00 
  101482:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101489:	00 
  10148a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  101490:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  101496:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  10149c:	e8 bf f7 ff ff       	call   100c60 <idt_set_entry>
  1014a1:	b8 22 00 00 00       	mov    $0x22,%eax
  1014a6:	8d 0d 9e 1b 10 00    	lea    0x101b9e,%ecx
  1014ac:	ba 08 00 00 00       	mov    $0x8,%edx
  1014b1:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(34, intr_stub_34, 0x8,
  1014b6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1014bd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014c1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014c8:	00 
  1014c9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014d0:	00 
  1014d1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  1014d7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  1014dd:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  1014e3:	e8 78 f7 ff ff       	call   100c60 <idt_set_entry>
  1014e8:	b8 23 00 00 00       	mov    $0x23,%eax
  1014ed:	8d 0d a4 1b 10 00    	lea    0x101ba4,%ecx
  1014f3:	ba 08 00 00 00       	mov    $0x8,%edx
  1014f8:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(35, intr_stub_35, 0x8,
  1014fd:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101504:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101508:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10150f:	00 
  101510:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101517:	00 
  101518:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  10151e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101524:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  10152a:	e8 31 f7 ff ff       	call   100c60 <idt_set_entry>
  10152f:	b8 24 00 00 00       	mov    $0x24,%eax
  101534:	8d 0d aa 1b 10 00    	lea    0x101baa,%ecx
  10153a:	ba 08 00 00 00       	mov    $0x8,%edx
  10153f:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(36, intr_stub_36, 0x8,
  101544:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  10154b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10154f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101556:	00 
  101557:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10155e:	00 
  10155f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101565:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  10156b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101571:	e8 ea f6 ff ff       	call   100c60 <idt_set_entry>
  101576:	b8 25 00 00 00       	mov    $0x25,%eax
  10157b:	8d 0d b0 1b 10 00    	lea    0x101bb0,%ecx
  101581:	ba 08 00 00 00       	mov    $0x8,%edx
  101586:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(37, intr_stub_37, 0x8,
  10158b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101592:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101596:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10159d:	00 
  10159e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015a5:	00 
  1015a6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  1015ac:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  1015b2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  1015b8:	e8 a3 f6 ff ff       	call   100c60 <idt_set_entry>
  1015bd:	b8 26 00 00 00       	mov    $0x26,%eax
  1015c2:	8d 0d b6 1b 10 00    	lea    0x101bb6,%ecx
  1015c8:	ba 08 00 00 00       	mov    $0x8,%edx
  1015cd:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(38, intr_stub_38, 0x8,
  1015d2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  1015d9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015dd:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015e4:	00 
  1015e5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015ec:	00 
  1015ed:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  1015f3:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  1015f9:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  1015ff:	e8 5c f6 ff ff       	call   100c60 <idt_set_entry>
  101604:	b8 27 00 00 00       	mov    $0x27,%eax
  101609:	8d 0d bc 1b 10 00    	lea    0x101bbc,%ecx
  10160f:	ba 08 00 00 00       	mov    $0x8,%edx
  101614:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(39, intr_stub_39, 0x8,
  101619:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101620:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101624:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10162b:	00 
  10162c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101633:	00 
  101634:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  10163a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101640:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101646:	e8 15 f6 ff ff       	call   100c60 <idt_set_entry>
  10164b:	b8 28 00 00 00       	mov    $0x28,%eax
  101650:	8d 0d c2 1b 10 00    	lea    0x101bc2,%ecx
  101656:	ba 08 00 00 00       	mov    $0x8,%edx
  10165b:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(40, intr_stub_40, 0x8,
  101660:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101667:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10166b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101672:	00 
  101673:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10167a:	00 
  10167b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101681:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101687:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  10168d:	e8 ce f5 ff ff       	call   100c60 <idt_set_entry>
  101692:	b8 29 00 00 00       	mov    $0x29,%eax
  101697:	8d 0d c8 1b 10 00    	lea    0x101bc8,%ecx
  10169d:	ba 08 00 00 00       	mov    $0x8,%edx
  1016a2:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(41, intr_stub_41, 0x8,
  1016a7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  1016ae:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016b2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016b9:	00 
  1016ba:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016c1:	00 
  1016c2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  1016c8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  1016ce:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  1016d4:	e8 87 f5 ff ff       	call   100c60 <idt_set_entry>
  1016d9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  1016de:	8d 0d ce 1b 10 00    	lea    0x101bce,%ecx
  1016e4:	ba 08 00 00 00       	mov    $0x8,%edx
  1016e9:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(42, intr_stub_42, 0x8,
  1016ee:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  1016f5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016f9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101700:	00 
  101701:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101708:	00 
  101709:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  10170f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101715:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  10171b:	e8 40 f5 ff ff       	call   100c60 <idt_set_entry>
  101720:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101725:	8d 0d d4 1b 10 00    	lea    0x101bd4,%ecx
  10172b:	ba 08 00 00 00       	mov    $0x8,%edx
  101730:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(43, intr_stub_43, 0x8,
  101735:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  10173c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101740:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101747:	00 
  101748:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10174f:	00 
  101750:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101756:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  10175c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101762:	e8 f9 f4 ff ff       	call   100c60 <idt_set_entry>
  101767:	b8 2c 00 00 00       	mov    $0x2c,%eax
  10176c:	8d 0d da 1b 10 00    	lea    0x101bda,%ecx
  101772:	ba 08 00 00 00       	mov    $0x8,%edx
  101777:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(44, intr_stub_44, 0x8,
  10177c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101783:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101787:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10178e:	00 
  10178f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101796:	00 
  101797:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  10179d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  1017a3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  1017a9:	e8 b2 f4 ff ff       	call   100c60 <idt_set_entry>
  1017ae:	b8 2d 00 00 00       	mov    $0x2d,%eax
  1017b3:	8d 0d e0 1b 10 00    	lea    0x101be0,%ecx
  1017b9:	ba 08 00 00 00       	mov    $0x8,%edx
  1017be:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(45, intr_stub_45, 0x8,
  1017c3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  1017ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017ce:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017d5:	00 
  1017d6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017dd:	00 
  1017de:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  1017e4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  1017ea:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  1017f0:	e8 6b f4 ff ff       	call   100c60 <idt_set_entry>
  1017f5:	b8 2e 00 00 00       	mov    $0x2e,%eax
  1017fa:	8d 0d e6 1b 10 00    	lea    0x101be6,%ecx
  101800:	ba 08 00 00 00       	mov    $0x8,%edx
  101805:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(46, intr_stub_46, 0x8,
  10180a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101811:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101815:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10181c:	00 
  10181d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101824:	00 
  101825:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  10182b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101831:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101837:	e8 24 f4 ff ff       	call   100c60 <idt_set_entry>
  10183c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101841:	8d 0d ec 1b 10 00    	lea    0x101bec,%ecx
  101847:	ba 08 00 00 00       	mov    $0x8,%edx
  10184c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(47, intr_stub_47, 0x8,
  101851:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101858:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10185c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101863:	00 
  101864:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10186b:	00 
  10186c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101872:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101878:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  10187e:	e8 dd f3 ff ff       	call   100c60 <idt_set_entry>
  101883:	b8 30 00 00 00       	mov    $0x30,%eax
  101888:	8d 0d f2 1b 10 00    	lea    0x101bf2,%ecx
  10188e:	ba 08 00 00 00       	mov    $0x8,%edx
  101893:	be ee 00 00 00       	mov    $0xee,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(48, intr_stub_48, 0x8,
  101898:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  10189f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018a3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018aa:	00 
  1018ab:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  1018b2:	00 
  1018b3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  1018b9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  1018bf:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  1018c5:	e8 96 f3 ff ff       	call   100c60 <idt_set_entry>
  1018ca:	b8 05 00 00 00       	mov    $0x5,%eax
  1018cf:	8d 0d 08 61 10 00    	lea    0x106108,%ecx
  1018d5:	ba 80 00 00 00       	mov    $0x80,%edx
  1018da:	be e9 00 00 00       	mov    $0xe9,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss),
  1018df:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1018e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018ea:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  1018f1:	00 
  1018f2:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  1018f9:	00 
  1018fa:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101900:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101906:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  10190c:	e8 df f0 ff ff       	call   1009f0 <set_gdt_entry>
  101911:	b8 28 00 00 00       	mov    $0x28,%eax
			GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101916:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101919:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  10191d:	fb                   	sti    
}
  10191e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101924:	5e                   	pop    %esi
  101925:	5d                   	pop    %ebp
  101926:	c3                   	ret    
  101927:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10192e:	00 00 

00101930 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  101930:	55                   	push   %ebp
  101931:	89 e5                	mov    %esp,%ebp
  101933:	50                   	push   %eax
  101934:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101938:	66 89 c1             	mov    %ax,%cx
  10193b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10193e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101942:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101945:	8a 45 fd             	mov    -0x3(%ebp),%al
  101948:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10194c:	ee                   	out    %al,(%dx)
}
  10194d:	83 c4 04             	add    $0x4,%esp
  101950:	5d                   	pop    %ebp
  101951:	c3                   	ret    
  101952:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101959:	1f 84 00 00 00 00 00 

00101960 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)()) {
  101960:	55                   	push   %ebp
  101961:	89 e5                	mov    %esp,%ebp
  101963:	83 ec 08             	sub    $0x8,%esp
  101966:	8b 45 0c             	mov    0xc(%ebp),%eax
  101969:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10196c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10196f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101972:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101975:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101978:	89 04 8d 20 93 10 00 	mov    %eax,0x109320(,%ecx,4)
	handler_set[i] = 1;
  10197f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101982:	c7 04 85 20 92 10 00 	movl   $0x1,0x109220(,%eax,4)
  101989:	01 00 00 00 
}
  10198d:	83 c4 08             	add    $0x8,%esp
  101990:	5d                   	pop    %ebp
  101991:	c3                   	ret    
  101992:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101999:	1f 84 00 00 00 00 00 

001019a0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu) {
  1019a0:	55                   	push   %ebp
  1019a1:	89 e5                	mov    %esp,%ebp
  1019a3:	83 ec 28             	sub    $0x28,%esp
  1019a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1019a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct cpu_state* new_cpu = cpu;
  1019ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019af:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if (cpu->intr <= 0x1f) {
  1019b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019b5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  1019bc:	0f 87 3d 00 00 00    	ja     1019ff <handle_interrupt+0x5f>
		if (!isSchedulingEnabled()) {
  1019c2:	e8 99 18 00 00       	call   103260 <isSchedulingEnabled>
  1019c7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1019cc:	0f 85 1a 00 00 00    	jne    1019ec <handle_interrupt+0x4c>
  1019d2:	8d 05 31 72 10 00    	lea    0x107231,%eax
			show_cod(cpu, "Kernel PANIC!");
  1019d8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1019db:	89 0c 24             	mov    %ecx,(%esp)
  1019de:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019e2:	e8 89 e9 ff ff       	call   100370 <show_cod>
		} else {
  1019e7:	e9 0e 00 00 00       	jmp    1019fa <handle_interrupt+0x5a>
			schedule_exception(cpu);
  1019ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019ef:	89 04 24             	mov    %eax,(%esp)
  1019f2:	e8 c9 19 00 00       	call   1033c0 <schedule_exception>
  1019f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}
	} else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  1019fa:	e9 fc 00 00 00       	jmp    101afb <handle_interrupt+0x15b>
  1019ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a02:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101a09:	0f 82 a7 00 00 00    	jb     101ab6 <handle_interrupt+0x116>
  101a0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a12:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  101a19:	0f 87 97 00 00 00    	ja     101ab6 <handle_interrupt+0x116>
		if (cpu->intr >= 0x28) {
  101a1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a22:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  101a29:	0f 82 24 00 00 00    	jb     101a53 <handle_interrupt+0xb3>
  101a2f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101a34:	b9 20 00 00 00       	mov    $0x20,%ecx
			outb(0xa0, 0x20);
  101a39:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101a40:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101a47:	00 
  101a48:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101a4b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  101a4e:	e8 dd fe ff ff       	call   101930 <outb>
		}
		if (cpu->intr == 0x20) {
  101a53:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a56:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101a5d:	0f 85 0e 00 00 00    	jne    101a71 <handle_interrupt+0xd1>
			new_cpu = schedule(cpu);
  101a63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a66:	89 04 24             	mov    %eax,(%esp)
  101a69:	e8 a2 1d 00 00       	call   103810 <schedule>
  101a6e:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101a71:	b8 20 00 00 00       	mov    $0x20,%eax
		}
		outb(0x20, 0x20);
  101a76:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101a7d:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101a84:	00 
  101a85:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101a88:	e8 a3 fe ff ff       	call   101930 <outb>
		if (handler_set[cpu->intr]) {
  101a8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a90:	8b 40 1c             	mov    0x1c(%eax),%eax
  101a93:	81 3c 85 20 92 10 00 	cmpl   $0x0,0x109220(,%eax,4)
  101a9a:	00 00 00 00 
  101a9e:	0f 84 0d 00 00 00    	je     101ab1 <handle_interrupt+0x111>
			handlers[cpu->intr]();
  101aa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101aa7:	8b 40 1c             	mov    0x1c(%eax),%eax
  101aaa:	ff 14 85 20 93 10 00 	call   *0x109320(,%eax,4)
		}
	} else if (cpu->intr == 0x30) {
  101ab1:	e9 40 00 00 00       	jmp    101af6 <handle_interrupt+0x156>
  101ab6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ab9:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  101ac0:	0f 85 13 00 00 00    	jne    101ad9 <handle_interrupt+0x139>
		new_cpu = syscall(new_cpu);
  101ac6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ac9:	89 04 24             	mov    %eax,(%esp)
  101acc:	e8 5f 01 00 00       	call   101c30 <syscall>
  101ad1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	} else {
  101ad4:	e9 18 00 00 00       	jmp    101af1 <handle_interrupt+0x151>
  101ad9:	8d 05 3f 72 10 00    	lea    0x10723f,%eax
		kprintf("Unbekannter Interrupt\n");
  101adf:	89 04 24             	mov    %eax,(%esp)
  101ae2:	e8 69 ea ff ff       	call   100550 <kprintf>
  101ae7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		while (1) {
			// Prozessor anhalten
			asm volatile("cli; hlt");
  101aea:	fa                   	cli    
  101aeb:	f4                   	hlt    
		}
  101aec:	e9 f9 ff ff ff       	jmp    101aea <handle_interrupt+0x14a>
  101af1:	e9 00 00 00 00       	jmp    101af6 <handle_interrupt+0x156>
  101af6:	e9 00 00 00 00       	jmp    101afb <handle_interrupt+0x15b>
	}

	return new_cpu;
  101afb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101afe:	83 c4 28             	add    $0x28,%esp
  101b01:	5d                   	pop    %ebp
  101b02:	c3                   	ret    
  101b03:	90                   	nop

00101b04 <intr_stub_0>:
  101b04:	6a 00                	push   $0x0
  101b06:	6a 00                	push   $0x0
  101b08:	e9 eb 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b0d <intr_stub_1>:
  101b0d:	6a 00                	push   $0x0
  101b0f:	6a 01                	push   $0x1
  101b11:	e9 e2 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b16 <intr_stub_2>:
  101b16:	6a 00                	push   $0x0
  101b18:	6a 02                	push   $0x2
  101b1a:	e9 d9 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b1f <intr_stub_3>:
  101b1f:	6a 00                	push   $0x0
  101b21:	6a 03                	push   $0x3
  101b23:	e9 d0 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b28 <intr_stub_4>:
  101b28:	6a 00                	push   $0x0
  101b2a:	6a 04                	push   $0x4
  101b2c:	e9 c7 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b31 <intr_stub_5>:
  101b31:	6a 00                	push   $0x0
  101b33:	6a 05                	push   $0x5
  101b35:	e9 be 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b3a <intr_stub_6>:
  101b3a:	6a 00                	push   $0x0
  101b3c:	6a 06                	push   $0x6
  101b3e:	e9 b5 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b43 <intr_stub_7>:
  101b43:	6a 00                	push   $0x0
  101b45:	6a 07                	push   $0x7
  101b47:	e9 ac 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b4c <intr_stub_8>:
  101b4c:	6a 08                	push   $0x8
  101b4e:	e9 a5 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b53 <intr_stub_9>:
  101b53:	6a 00                	push   $0x0
  101b55:	6a 09                	push   $0x9
  101b57:	e9 9c 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b5c <intr_stub_10>:
  101b5c:	6a 0a                	push   $0xa
  101b5e:	e9 95 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b63 <intr_stub_11>:
  101b63:	6a 0b                	push   $0xb
  101b65:	e9 8e 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b6a <intr_stub_12>:
  101b6a:	6a 0c                	push   $0xc
  101b6c:	e9 87 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b71 <intr_stub_13>:
  101b71:	6a 0d                	push   $0xd
  101b73:	e9 80 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b78 <intr_stub_14>:
  101b78:	6a 0e                	push   $0xe
  101b7a:	eb 7c                	jmp    101bf8 <intr_common_handler>

00101b7c <intr_stub_15>:
  101b7c:	6a 00                	push   $0x0
  101b7e:	6a 0f                	push   $0xf
  101b80:	eb 76                	jmp    101bf8 <intr_common_handler>

00101b82 <intr_stub_16>:
  101b82:	6a 00                	push   $0x0
  101b84:	6a 10                	push   $0x10
  101b86:	eb 70                	jmp    101bf8 <intr_common_handler>

00101b88 <intr_stub_17>:
  101b88:	6a 11                	push   $0x11
  101b8a:	eb 6c                	jmp    101bf8 <intr_common_handler>

00101b8c <intr_stub_18>:
  101b8c:	6a 00                	push   $0x0
  101b8e:	6a 12                	push   $0x12
  101b90:	eb 66                	jmp    101bf8 <intr_common_handler>

00101b92 <intr_stub_32>:
  101b92:	6a 00                	push   $0x0
  101b94:	6a 20                	push   $0x20
  101b96:	eb 60                	jmp    101bf8 <intr_common_handler>

00101b98 <intr_stub_33>:
  101b98:	6a 00                	push   $0x0
  101b9a:	6a 21                	push   $0x21
  101b9c:	eb 5a                	jmp    101bf8 <intr_common_handler>

00101b9e <intr_stub_34>:
  101b9e:	6a 00                	push   $0x0
  101ba0:	6a 22                	push   $0x22
  101ba2:	eb 54                	jmp    101bf8 <intr_common_handler>

00101ba4 <intr_stub_35>:
  101ba4:	6a 00                	push   $0x0
  101ba6:	6a 23                	push   $0x23
  101ba8:	eb 4e                	jmp    101bf8 <intr_common_handler>

00101baa <intr_stub_36>:
  101baa:	6a 00                	push   $0x0
  101bac:	6a 24                	push   $0x24
  101bae:	eb 48                	jmp    101bf8 <intr_common_handler>

00101bb0 <intr_stub_37>:
  101bb0:	6a 00                	push   $0x0
  101bb2:	6a 25                	push   $0x25
  101bb4:	eb 42                	jmp    101bf8 <intr_common_handler>

00101bb6 <intr_stub_38>:
  101bb6:	6a 00                	push   $0x0
  101bb8:	6a 26                	push   $0x26
  101bba:	eb 3c                	jmp    101bf8 <intr_common_handler>

00101bbc <intr_stub_39>:
  101bbc:	6a 00                	push   $0x0
  101bbe:	6a 27                	push   $0x27
  101bc0:	eb 36                	jmp    101bf8 <intr_common_handler>

00101bc2 <intr_stub_40>:
  101bc2:	6a 00                	push   $0x0
  101bc4:	6a 28                	push   $0x28
  101bc6:	eb 30                	jmp    101bf8 <intr_common_handler>

00101bc8 <intr_stub_41>:
  101bc8:	6a 00                	push   $0x0
  101bca:	6a 29                	push   $0x29
  101bcc:	eb 2a                	jmp    101bf8 <intr_common_handler>

00101bce <intr_stub_42>:
  101bce:	6a 00                	push   $0x0
  101bd0:	6a 2a                	push   $0x2a
  101bd2:	eb 24                	jmp    101bf8 <intr_common_handler>

00101bd4 <intr_stub_43>:
  101bd4:	6a 00                	push   $0x0
  101bd6:	6a 2b                	push   $0x2b
  101bd8:	eb 1e                	jmp    101bf8 <intr_common_handler>

00101bda <intr_stub_44>:
  101bda:	6a 00                	push   $0x0
  101bdc:	6a 2c                	push   $0x2c
  101bde:	eb 18                	jmp    101bf8 <intr_common_handler>

00101be0 <intr_stub_45>:
  101be0:	6a 00                	push   $0x0
  101be2:	6a 2d                	push   $0x2d
  101be4:	eb 12                	jmp    101bf8 <intr_common_handler>

00101be6 <intr_stub_46>:
  101be6:	6a 00                	push   $0x0
  101be8:	6a 2e                	push   $0x2e
  101bea:	eb 0c                	jmp    101bf8 <intr_common_handler>

00101bec <intr_stub_47>:
  101bec:	6a 00                	push   $0x0
  101bee:	6a 2f                	push   $0x2f
  101bf0:	eb 06                	jmp    101bf8 <intr_common_handler>

00101bf2 <intr_stub_48>:
  101bf2:	6a 00                	push   $0x0
  101bf4:	6a 30                	push   $0x30
  101bf6:	eb 00                	jmp    101bf8 <intr_common_handler>

00101bf8 <intr_common_handler>:
  101bf8:	55                   	push   %ebp
  101bf9:	57                   	push   %edi
  101bfa:	56                   	push   %esi
  101bfb:	52                   	push   %edx
  101bfc:	51                   	push   %ecx
  101bfd:	53                   	push   %ebx
  101bfe:	50                   	push   %eax
  101bff:	54                   	push   %esp
  101c00:	66 b8 10 00          	mov    $0x10,%ax
  101c04:	66 8e d8             	mov    %ax,%ds
  101c07:	66 8e c0             	mov    %ax,%es
  101c0a:	e8 91 fd ff ff       	call   1019a0 <handle_interrupt>
  101c0f:	89 c4                	mov    %eax,%esp
  101c11:	66 b8 23 00          	mov    $0x23,%ax
  101c15:	66 8e d8             	mov    %ax,%ds
  101c18:	66 8e c0             	mov    %ax,%es
  101c1b:	58                   	pop    %eax
  101c1c:	5b                   	pop    %ebx
  101c1d:	59                   	pop    %ecx
  101c1e:	5a                   	pop    %edx
  101c1f:	5e                   	pop    %esi
  101c20:	5f                   	pop    %edi
  101c21:	5d                   	pop    %ebp
  101c22:	83 c4 08             	add    $0x8,%esp
  101c25:	cf                   	iret   
  101c26:	66 90                	xchg   %ax,%ax
  101c28:	66 90                	xchg   %ax,%ax
  101c2a:	66 90                	xchg   %ax,%ax
  101c2c:	66 90                	xchg   %ax,%ax
  101c2e:	66 90                	xchg   %ax,%ax

00101c30 <syscall>:
#include "vfs.h"
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"

struct cpu_state* syscall(struct cpu_state* cpu) {
  101c30:	55                   	push   %ebp
  101c31:	89 e5                	mov    %esp,%ebp
  101c33:	56                   	push   %esi
  101c34:	83 ec 74             	sub    $0x74,%esp
  101c37:	8b 45 08             	mov    0x8(%ebp),%eax
  101c3a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	switch (cpu->eax) {
  101c3d:	8b 00                	mov    (%eax),%eax
  101c3f:	89 c1                	mov    %eax,%ecx
  101c41:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  101c47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  101c4a:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  101c4d:	0f 8f 26 00 00 00    	jg     101c79 <syscall+0x49>
  101c53:	e9 00 00 00 00       	jmp    101c58 <syscall+0x28>
  101c58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101c5b:	48                   	dec    %eax
  101c5c:	89 c1                	mov    %eax,%ecx
  101c5e:	83 e9 0c             	sub    $0xc,%ecx
  101c61:	89 45 cc             	mov    %eax,-0x34(%ebp)
  101c64:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  101c67:	0f 87 db 02 00 00    	ja     101f48 <syscall+0x318>
  101c6d:	8b 45 cc             	mov    -0x34(%ebp),%eax
  101c70:	8b 0c 85 44 70 10 00 	mov    0x107044(,%eax,4),%ecx
  101c77:	ff e1                	jmp    *%ecx
  101c79:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101c7c:	05 37 ff ff ff       	add    $0xffffff37,%eax
  101c81:	89 c1                	mov    %eax,%ecx
  101c83:	83 e9 04             	sub    $0x4,%ecx
  101c86:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101c89:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  101c8c:	0f 87 b6 02 00 00    	ja     101f48 <syscall+0x318>
  101c92:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  101c95:	8b 0c 85 30 70 10 00 	mov    0x107030(,%eax,4),%ecx
  101c9c:	ff e1                	jmp    *%ecx
	case 1: /* exit */
		cpu = terminate_current(cpu);
  101c9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ca1:	89 04 24             	mov    %eax,(%esp)
  101ca4:	e8 47 18 00 00       	call   1034f0 <terminate_current>
  101ca9:	89 45 f8             	mov    %eax,-0x8(%ebp)
		break;
  101cac:	e9 b1 02 00 00       	jmp    101f62 <syscall+0x332>

	case 2: /* fork */
	{
		save_cpu_state(cpu);
  101cb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101cb4:	89 04 24             	mov    %eax,(%esp)
  101cb7:	e8 14 1b 00 00       	call   1037d0 <save_cpu_state>

		uint32_t forkpdir = vmm_fork_current();
  101cbc:	e8 7f 34 00 00       	call   105140 <vmm_fork_current>
  101cc1:	b9 00 00 00 00       	mov    $0x0,%ecx
  101cc6:	89 45 f4             	mov    %eax,-0xc(%ebp)

		struct task* ntask = init_task(forkpdir, 0);
  101cc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ccc:	89 04 24             	mov    %eax,(%esp)
  101ccf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101cd6:	00 
  101cd7:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101cda:	e8 41 19 00 00       	call   103620 <init_task>
  101cdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		fork_task_state(ntask);
  101ce2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101ce5:	89 04 24             	mov    %eax,(%esp)
  101ce8:	e8 d3 18 00 00       	call   1035c0 <fork_task_state>

		cpu->eax = ntask->PID;
  101ced:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101cf0:	8b 00                	mov    (%eax),%eax
  101cf2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101cf5:	89 01                	mov    %eax,(%ecx)
	}
        break;
  101cf7:	e9 66 02 00 00       	jmp    101f62 <syscall+0x332>
    case 3: /* exec */
    {
        save_cpu_state(cpu);
  101cfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101cff:	89 04 24             	mov    %eax,(%esp)
  101d02:	e8 c9 1a 00 00       	call   1037d0 <save_cpu_state>
        vfs_exec((char*) cpu->ebx, (char**) cpu->ecx, get_current_task());
  101d07:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d0a:	8b 40 04             	mov    0x4(%eax),%eax
  101d0d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101d10:	8b 49 08             	mov    0x8(%ecx),%ecx
  101d13:	89 45 b8             	mov    %eax,-0x48(%ebp)
  101d16:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  101d19:	e8 52 15 00 00       	call   103270 <get_current_task>
  101d1e:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  101d21:	89 0c 24             	mov    %ecx,(%esp)
  101d24:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  101d27:	89 54 24 04          	mov    %edx,0x4(%esp)
  101d2b:	89 44 24 08          	mov    %eax,0x8(%esp)
  101d2f:	e8 3c 2e 00 00       	call   104b70 <vfs_exec>
        cpu = get_current_task()->cpuState;
  101d34:	e8 37 15 00 00       	call   103270 <get_current_task>
  101d39:	8b 40 04             	mov    0x4(%eax),%eax
  101d3c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
        break;
  101d3f:	e9 1e 02 00 00       	jmp    101f62 <syscall+0x332>
    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  101d44:	e8 27 15 00 00       	call   103270 <get_current_task>
  101d49:	8b 40 18             	mov    0x18(%eax),%eax
  101d4c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101d4f:	89 01                	mov    %eax,(%ecx)
    }
        break;
  101d51:	e9 0c 02 00 00       	jmp    101f62 <syscall+0x332>

	case 10: /* fopen */
	{
	    char* name = (char*) cpu->ebx;
  101d56:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d59:	8b 40 04             	mov    0x4(%eax),%eax
  101d5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	    uint32_t fmode = (uint32_t) cpu->ecx;
  101d5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d62:	8b 40 08             	mov    0x8(%eax),%eax
  101d65:	89 45 e8             	mov    %eax,-0x18(%ebp)

	    struct res_handle* handle = vfs_open(name, fmode);
  101d68:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101d6b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  101d6e:	89 04 24             	mov    %eax,(%esp)
  101d71:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d75:	e8 66 2a 00 00       	call   1047e0 <vfs_open>
  101d7a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    if(handle) {
  101d7d:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  101d84:	0f 84 1b 00 00 00    	je     101da5 <syscall+0x175>
	        register_handle(handle);
  101d8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101d8d:	89 04 24             	mov    %eax,(%esp)
  101d90:	e8 eb 14 00 00       	call   103280 <register_handle>
	        cpu->eax = (uint32_t) handle;
  101d95:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  101d98:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101d9b:	89 0a                	mov    %ecx,(%edx)
	    }
  101d9d:	89 45 b0             	mov    %eax,-0x50(%ebp)
  101da0:	e9 09 00 00 00       	jmp    101dae <syscall+0x17e>
	    else
	    {
	        cpu->eax = 0;
  101da5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101da8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    }
	}
	    break;
  101dae:	e9 af 01 00 00       	jmp    101f62 <syscall+0x332>

	case 11: /* fclose */
	{
	    struct res_handle* handle = (void*) cpu->ebx;
  101db3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101db6:	8b 40 04             	mov    0x4(%eax),%eax
  101db9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	    if(!unregister_handle(handle)) {
  101dbc:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101dbf:	89 04 24             	mov    %eax,(%esp)
  101dc2:	e8 19 15 00 00       	call   1032e0 <unregister_handle>
  101dc7:	3d 00 00 00 00       	cmp    $0x0,%eax
  101dcc:	0f 85 1c 00 00 00    	jne    101dee <syscall+0x1be>
	        vfs_close(handle);
  101dd2:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101dd5:	89 04 24             	mov    %eax,(%esp)
  101dd8:	e8 83 2a 00 00       	call   104860 <vfs_close>

	        cpu->eax = 0;
  101ddd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101de0:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	    }
  101de6:	89 45 ac             	mov    %eax,-0x54(%ebp)
  101de9:	e9 09 00 00 00       	jmp    101df7 <syscall+0x1c7>
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  101dee:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101df1:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	    }
	}
	    break;
  101df7:	e9 66 01 00 00       	jmp    101f62 <syscall+0x332>

	case 12: /* fwrite */
	{
	    struct res_handle* handle = (void*) cpu->ebx;
  101dfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101dff:	8b 40 04             	mov    0x4(%eax),%eax
  101e02:	89 45 dc             	mov    %eax,-0x24(%ebp)
	    if(handle != 0) {
  101e05:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  101e0c:	0f 84 39 00 00 00    	je     101e4b <syscall+0x21b>
  101e12:	b8 01 00 00 00       	mov    $0x1,%eax
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  101e17:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  101e1a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101e1d:	8b 52 08             	mov    0x8(%edx),%edx
  101e20:	8b 75 f8             	mov    -0x8(%ebp),%esi
  101e23:	8b 76 0c             	mov    0xc(%esi),%esi
  101e26:	89 0c 24             	mov    %ecx,(%esp)
  101e29:	89 54 24 04          	mov    %edx,0x4(%esp)
  101e2d:	89 74 24 08          	mov    %esi,0x8(%esp)
  101e31:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  101e38:	00 
  101e39:	89 45 a8             	mov    %eax,-0x58(%ebp)
  101e3c:	e8 4f 2b 00 00       	call   104990 <vfs_write>
  101e41:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101e44:	89 01                	mov    %eax,(%ecx)
	    }
  101e46:	e9 09 00 00 00       	jmp    101e54 <syscall+0x224>
	    else
	    {
            cpu->eax = RW_ERR_VFS;
  101e4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e4e:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	    }
	}
	    break;
  101e54:	e9 09 01 00 00       	jmp    101f62 <syscall+0x332>

	case 13: /* fread */
	{
        struct res_handle* handle = (void*) cpu->ebx;
  101e59:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e5c:	8b 40 04             	mov    0x4(%eax),%eax
  101e5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if(handle != 0) {
  101e62:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  101e69:	0f 84 39 00 00 00    	je     101ea8 <syscall+0x278>
  101e6f:	b8 01 00 00 00       	mov    $0x1,%eax
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  101e74:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  101e77:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101e7a:	8b 52 08             	mov    0x8(%edx),%edx
  101e7d:	8b 75 f8             	mov    -0x8(%ebp),%esi
  101e80:	8b 76 0c             	mov    0xc(%esi),%esi
  101e83:	89 0c 24             	mov    %ecx,(%esp)
  101e86:	89 54 24 04          	mov    %edx,0x4(%esp)
  101e8a:	89 74 24 08          	mov    %esi,0x8(%esp)
  101e8e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  101e95:	00 
  101e96:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  101e99:	e8 12 2a 00 00       	call   1048b0 <vfs_read>
  101e9e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101ea1:	89 01                	mov    %eax,(%ecx)
        }
  101ea3:	e9 09 00 00 00       	jmp    101eb1 <syscall+0x281>
        else
        {
            cpu->eax = RW_ERR_VFS;
  101ea8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101eab:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        }
	}
	    break;
  101eb1:	e9 ac 00 00 00       	jmp    101f62 <syscall+0x332>
  101eb6:	8d 05 56 72 10 00    	lea    0x107256,%eax

	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
  101ebc:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101ebf:	8b 49 04             	mov    0x4(%ecx),%ecx
  101ec2:	89 04 24             	mov    %eax,(%esp)
  101ec5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101ec9:	e8 82 e6 ff ff       	call   100550 <kprintf>
  101ece:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101ed1:	89 01                	mov    %eax,(%ecx)
		break;
  101ed3:	e9 8a 00 00 00       	jmp    101f62 <syscall+0x332>
  101ed8:	8d 05 59 72 10 00    	lea    0x107259,%eax
	case 202: /* kputs */
		cpu->eax = kprintf("%s", cpu->ebx);
  101ede:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101ee1:	8b 49 04             	mov    0x4(%ecx),%ecx
  101ee4:	89 04 24             	mov    %eax,(%esp)
  101ee7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101eeb:	e8 60 e6 ff ff       	call   100550 <kprintf>
  101ef0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101ef3:	89 01                	mov    %eax,(%ecx)
		break;
  101ef5:	e9 68 00 00 00       	jmp    101f62 <syscall+0x332>
	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  101efa:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101efd:	8b 40 04             	mov    0x4(%eax),%eax
  101f00:	89 04 24             	mov    %eax,(%esp)
  101f03:	e8 88 3a 00 00       	call   105990 <vmm_alloc_ucont>
  101f08:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101f0b:	89 01                	mov    %eax,(%ecx)
		break;
  101f0d:	e9 50 00 00 00       	jmp    101f62 <syscall+0x332>
	case 204: /* vmm_free */
		cpu->eax = 0;
  101f12:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101f15:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  101f1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101f1e:	81 78 04 00 10 40 20 	cmpl   $0x20401000,0x4(%eax)
  101f25:	0f 82 0e 00 00 00    	jb     101f39 <syscall+0x309>
			vmm_free((void*) cpu->ebx);
  101f2b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101f2e:	8b 40 04             	mov    0x4(%eax),%eax
  101f31:	89 04 24             	mov    %eax,(%esp)
  101f34:	e8 c7 38 00 00       	call   105800 <vmm_free>
		}
		break;
  101f39:	e9 24 00 00 00       	jmp    101f62 <syscall+0x332>
	case 205: /* pmm_print_stats */
		pmm_print_stats();
  101f3e:	e8 9d 02 00 00       	call   1021e0 <pmm_print_stats>
		break;
  101f43:	e9 1a 00 00 00       	jmp    101f62 <syscall+0x332>
  101f48:	8d 05 5c 72 10 00    	lea    0x10725c,%eax
	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  101f4e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101f51:	8b 09                	mov    (%ecx),%ecx
  101f53:	89 04 24             	mov    %eax,(%esp)
  101f56:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f5a:	e8 f1 e5 ff ff       	call   100550 <kprintf>
  101f5f:	89 45 a0             	mov    %eax,-0x60(%ebp)
		break;
	}

	return cpu;
  101f62:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101f65:	83 c4 74             	add    $0x74,%esp
  101f68:	5e                   	pop    %esi
  101f69:	5d                   	pop    %ebp
  101f6a:	c3                   	ret    
  101f6b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00101f70 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {
  101f70:	55                   	push   %ebp
  101f71:	89 e5                	mov    %esp,%ebp
  101f73:	57                   	push   %edi
  101f74:	56                   	push   %esi
  101f75:	83 ec 40             	sub    $0x40,%esp
  101f78:	8b 45 08             	mov    0x8(%ebp),%eax
  101f7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  101f7e:	e8 0d 3d 00 00       	call   105c90 <vmm_init>
  101f83:	8d 0d 72 72 10 00    	lea    0x107272,%ecx
  101f89:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kprintf("Initializing vfs...\n");
  101f8c:	89 0c 24             	mov    %ecx,(%esp)
  101f8f:	e8 bc e5 ff ff       	call   100550 <kprintf>

    vfs_init_root();
  101f94:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101f97:	e8 04 2f 00 00       	call   104ea0 <vfs_init_root>
  101f9c:	b8 00 00 00 00       	mov    $0x0,%eax
    ramfs_fifo_init();
  101fa1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101fa4:	e8 c7 0a 00 00       	call   102a70 <ramfs_fifo_init>
    ramfs_block_init();
  101fa9:	e8 12 06 00 00       	call   1025c0 <ramfs_block_init>

    map_address_active((uint32_t) mb_info,
  101fae:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101fb1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101fb4:	89 04 24             	mov    %eax,(%esp)
  101fb7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101fbb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101fc2:	00 
  101fc3:	e8 b8 38 00 00       	call   105880 <map_address_active>
  101fc8:	b8 00 00 00 00       	mov    $0x0,%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
  101fcd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101fd0:	8b 49 18             	mov    0x18(%ecx),%ecx
  101fd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101fd6:	8b 52 18             	mov    0x18(%edx),%edx
  101fd9:	89 0c 24             	mov    %ecx,(%esp)
  101fdc:	89 54 24 04          	mov    %edx,0x4(%esp)
  101fe0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101fe7:	00 
  101fe8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  101feb:	e8 90 38 00 00       	call   105880 <map_address_active>
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  101ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ff3:	8b 00                	mov    (%eax),%eax
  101ff5:	25 08 00 00 00       	and    $0x8,%eax
  101ffa:	3d 00 00 00 00       	cmp    $0x0,%eax
  101fff:	0f 84 80 00 00 00    	je     102085 <kernel_main+0x115>
  102005:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  10200a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10200d:	8b 49 18             	mov    0x18(%ecx),%ecx
  102010:	8b 09                	mov    (%ecx),%ecx
  102012:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102015:	8b 52 18             	mov    0x18(%edx),%edx
  102018:	8b 12                	mov    (%edx),%edx
  10201a:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10201d:	8b 76 18             	mov    0x18(%esi),%esi
  102020:	8b 76 04             	mov    0x4(%esi),%esi
  102023:	8b 7d f4             	mov    -0xc(%ebp),%edi
  102026:	8b 7f 18             	mov    0x18(%edi),%edi
  102029:	8b 3f                	mov    (%edi),%edi
  10202b:	29 fe                	sub    %edi,%esi
  10202d:	89 0c 24             	mov    %ecx,(%esp)
  102030:	89 54 24 04          	mov    %edx,0x4(%esp)
  102034:	89 74 24 08          	mov    %esi,0x8(%esp)
  102038:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10203f:	00 
  102040:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102043:	e8 a8 38 00 00       	call   1058f0 <vmm_map_range>
  102048:	8d 05 87 72 10 00    	lea    0x107287,%eax
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
  10204e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102051:	8b 49 18             	mov    0x18(%ecx),%ecx
  102054:	8b 49 04             	mov    0x4(%ecx),%ecx
  102057:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10205a:	8b 52 18             	mov    0x18(%edx),%edx
  10205d:	8b 12                	mov    (%edx),%edx
  10205f:	29 d1                	sub    %edx,%ecx
  102061:	89 04 24             	mov    %eax,(%esp)
  102064:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102068:	e8 e3 e4 ff ff       	call   100550 <kprintf>

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
  10206d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102070:	8b 49 18             	mov    0x18(%ecx),%ecx
  102073:	8b 09                	mov    (%ecx),%ecx
  102075:	89 0c 24             	mov    %ecx,(%esp)
  102078:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10207b:	e8 90 0f 00 00       	call   103010 <tar_load_ramfs>
    } else {
  102080:	e9 11 00 00 00       	jmp    102096 <kernel_main+0x126>
  102085:	8d 05 c7 72 10 00    	lea    0x1072c7,%eax
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
  10208b:	89 04 24             	mov    %eax,(%esp)
  10208e:	e8 bd e4 ff ff       	call   100550 <kprintf>
  102093:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102096:	8d 05 f9 72 10 00    	lea    0x1072f9,%eax
    }

    if(vfs_exists("/ibin/init")) {
  10209c:	89 04 24             	mov    %eax,(%esp)
  10209f:	e8 3c 2a 00 00       	call   104ae0 <vfs_exists>
  1020a4:	3d 00 00 00 00       	cmp    $0x0,%eax
  1020a9:	0f 84 11 00 00 00    	je     1020c0 <kernel_main+0x150>
  1020af:	8d 05 04 73 10 00    	lea    0x107304,%eax
        kprintf("[init] /ibin/init found. Executing...\n");
  1020b5:	89 04 24             	mov    %eax,(%esp)
  1020b8:	e8 93 e4 ff ff       	call   100550 <kprintf>
  1020bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1020c0:	8d 05 f9 72 10 00    	lea    0x1072f9,%eax
  1020c6:	b9 00 00 00 00       	mov    $0x0,%ecx
    }

    vfs_exec("/ibin/init", 0, 0);
  1020cb:	89 04 24             	mov    %eax,(%esp)
  1020ce:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1020d5:	00 
  1020d6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1020dd:	00 
  1020de:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  1020e1:	e8 8a 2a 00 00       	call   104b70 <vfs_exec>
    enableScheduling();
  1020e6:	e8 65 11 00 00       	call   103250 <enableScheduling>


	while(1);
  1020eb:	e9 fb ff ff ff       	jmp    1020eb <kernel_main+0x17b>

001020f0 <pmm_alloc>:
#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
  1020f0:	55                   	push   %ebp
  1020f1:	89 e5                	mov    %esp,%ebp
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  1020f3:	56                   	push   %esi
  1020f4:	83 ec 10             	sub    $0x10,%esp
  1020f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1020fe:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102105:	0f 8d b7 00 00 00    	jge    1021c2 <pmm_alloc+0xd2>
		if (allocatable[i]) {
  10210b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10210e:	81 3c 85 90 94 12 00 	cmpl   $0x0,0x129490(,%eax,4)
  102115:	00 00 00 00 
  102119:	0f 84 8e 00 00 00    	je     1021ad <pmm_alloc+0xbd>
			int s;
			for (s = 0; s < 32; s++) {
  10211f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102126:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  10212d:	0f 8d 75 00 00 00    	jge    1021a8 <pmm_alloc+0xb8>
  102133:	b8 01 00 00 00       	mov    $0x1,%eax
				if (allocatable[i] & (1 << s)) {
  102138:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10213b:	8b 0c 8d 90 94 12 00 	mov    0x129490(,%ecx,4),%ecx
  102142:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102145:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102148:	89 d1                	mov    %edx,%ecx
  10214a:	d3 e0                	shl    %cl,%eax
  10214c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10214f:	21 c2                	and    %eax,%edx
  102151:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  102157:	0f 84 36 00 00 00    	je     102193 <pmm_alloc+0xa3>
  10215d:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  102162:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102165:	d3 e0                	shl    %cl,%eax
  102167:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  10216c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10216f:	8b 34 95 90 94 12 00 	mov    0x129490(,%edx,4),%esi
  102176:	21 c6                	and    %eax,%esi
  102178:	89 34 95 90 94 12 00 	mov    %esi,0x129490(,%edx,4)
					return (uint8_t*) ((i * 32 + s) * 4096);
  10217f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102182:	c1 e0 05             	shl    $0x5,%eax
  102185:	03 45 f0             	add    -0x10(%ebp),%eax
  102188:	c1 e0 0c             	shl    $0xc,%eax
  10218b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10218e:	e9 36 00 00 00       	jmp    1021c9 <pmm_alloc+0xd9>
				}
			}
  102193:	e9 00 00 00 00       	jmp    102198 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
		if (allocatable[i]) {
			int s;
			for (s = 0; s < 32; s++) {
  102198:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10219b:	05 01 00 00 00       	add    $0x1,%eax
  1021a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1021a3:	e9 7e ff ff ff       	jmp    102126 <pmm_alloc+0x36>
				if (allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
  1021a8:	e9 00 00 00 00       	jmp    1021ad <pmm_alloc+0xbd>
	}
  1021ad:	e9 00 00 00 00       	jmp    1021b2 <pmm_alloc+0xc2>
uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  1021b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021b5:	05 01 00 00 00       	add    $0x1,%eax
  1021ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1021bd:	e9 3c ff ff ff       	jmp    1020fe <pmm_alloc+0xe>
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
	}
	return NULL ;
  1021c2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  1021c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021cc:	83 c4 10             	add    $0x10,%esp
  1021cf:	5e                   	pop    %esi
  1021d0:	5d                   	pop    %ebp
  1021d1:	c3                   	ret    
  1021d2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1021d9:	1f 84 00 00 00 00 00 

001021e0 <pmm_print_stats>:

void pmm_print_stats() {
  1021e0:	55                   	push   %ebp
  1021e1:	89 e5                	mov    %esp,%ebp
  1021e3:	56                   	push   %esi
  1021e4:	83 ec 34             	sub    $0x34,%esp
  1021e7:	b8 00 00 10 00       	mov    $0x100000,%eax
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
  1021ec:	c7 04 24 00 00 10 00 	movl   $0x100000,(%esp)
  1021f3:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1021f6:	e8 65 00 00 00       	call   102260 <pmm_get_free_space>
  1021fb:	b9 00 04 00 00       	mov    $0x400,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102200:	8b 15 20 94 10 00    	mov    0x109420,%edx
  102206:	c1 ea 14             	shr    $0x14,%edx
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
  102209:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  102210:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102213:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102216:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102219:	e8 42 00 00 00       	call   102260 <pmm_get_free_space>
  10221e:	8d 0d 2b 73 10 00    	lea    0x10732b,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102224:	8b 15 20 94 10 00    	mov    0x109420,%edx
  10222a:	c1 ea 0a             	shr    $0xa,%edx
  10222d:	89 0c 24             	mov    %ecx,(%esp)
  102230:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102233:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102237:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10223a:	89 74 24 08          	mov    %esi,0x8(%esp)
  10223e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  102242:	89 54 24 10          	mov    %edx,0x10(%esp)
  102246:	e8 05 e3 ff ff       	call   100550 <kprintf>
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
}
  10224b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10224e:	83 c4 34             	add    $0x34,%esp
  102251:	5e                   	pop    %esi
  102252:	5d                   	pop    %ebp
  102253:	c3                   	ret    
  102254:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10225b:	00 00 00 00 00 

00102260 <pmm_get_free_space>:

uint32_t pmm_get_free_space(uint32_t div) {
  102260:	55                   	push   %ebp
  102261:	89 e5                	mov    %esp,%ebp
  102263:	83 ec 14             	sub    $0x14,%esp
  102266:	8b 45 08             	mov    0x8(%ebp),%eax
  102269:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t free = 0;
  10226c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10227a:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102281:	0f 83 73 00 00 00    	jae    1022fa <pmm_get_free_space+0x9a>
		for (uint32_t s = 0; s < 32; s++) {
  102287:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10228e:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  102295:	0f 83 4a 00 00 00    	jae    1022e5 <pmm_get_free_space+0x85>
  10229b:	b8 01 00 00 00       	mov    $0x1,%eax
			if (allocatable[i] & (1 << s))
  1022a0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1022a3:	8b 0c 8d 90 94 12 00 	mov    0x129490(,%ecx,4),%ecx
  1022aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1022ad:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1022b0:	89 d1                	mov    %edx,%ecx
  1022b2:	d3 e0                	shl    %cl,%eax
  1022b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1022b7:	21 c2                	and    %eax,%edx
  1022b9:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  1022bf:	0f 84 0b 00 00 00    	je     1022d0 <pmm_get_free_space+0x70>
				free += 0x1000;
  1022c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1022c8:	05 00 10 00 00       	add    $0x1000,%eax
  1022cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  1022d0:	e9 00 00 00 00       	jmp    1022d5 <pmm_get_free_space+0x75>

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
		for (uint32_t s = 0; s < 32; s++) {
  1022d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1022d8:	05 01 00 00 00       	add    $0x1,%eax
  1022dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1022e0:	e9 a9 ff ff ff       	jmp    10228e <pmm_get_free_space+0x2e>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}
  1022e5:	e9 00 00 00 00       	jmp    1022ea <pmm_get_free_space+0x8a>
}

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  1022ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022ed:	05 01 00 00 00       	add    $0x1,%eax
  1022f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1022f5:	e9 80 ff ff ff       	jmp    10227a <pmm_get_free_space+0x1a>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}

	return free / div;
  1022fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1022fd:	31 d2                	xor    %edx,%edx
  1022ff:	f7 75 fc             	divl   -0x4(%ebp)
  102302:	83 c4 14             	add    $0x14,%esp
  102305:	5d                   	pop    %ebp
  102306:	c3                   	ret    
  102307:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10230e:	00 00 

00102310 <pmm_free>:
}

void pmm_free(void* addr) {
  102310:	55                   	push   %ebp
  102311:	89 e5                	mov    %esp,%ebp
  102313:	56                   	push   %esi
  102314:	83 ec 14             	sub    $0x14,%esp
  102317:	8b 45 08             	mov    0x8(%ebp),%eax
  10231a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10231f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102322:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102325:	c1 e8 0c             	shr    $0xc,%eax
  102328:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10232b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10232e:	25 1f 00 00 00       	and    $0x1f,%eax
  102333:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102336:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102339:	c1 e8 05             	shr    $0x5,%eax
  10233c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  10233f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102342:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102345:	89 c1                	mov    %eax,%ecx
  102347:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10234a:	d3 e0                	shl    %cl,%eax
  10234c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10234f:	8b 34 95 90 94 12 00 	mov    0x129490(,%edx,4),%esi
  102356:	09 c6                	or     %eax,%esi
  102358:	89 34 95 90 94 12 00 	mov    %esi,0x129490(,%edx,4)
}
  10235f:	83 c4 14             	add    $0x14,%esp
  102362:	5e                   	pop    %esi
  102363:	5d                   	pop    %ebp
  102364:	c3                   	ret    
  102365:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10236c:	00 00 00 00 

00102370 <pmm_mark_used>:

void pmm_mark_used(void* addr) {
  102370:	55                   	push   %ebp
  102371:	89 e5                	mov    %esp,%ebp
  102373:	56                   	push   %esi
  102374:	83 ec 14             	sub    $0x14,%esp
  102377:	8b 45 08             	mov    0x8(%ebp),%eax
  10237a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10237f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102382:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102385:	c1 e8 0c             	shr    $0xc,%eax
  102388:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10238b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10238e:	25 1f 00 00 00       	and    $0x1f,%eax
  102393:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102396:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102399:	c1 e8 05             	shr    $0x5,%eax
  10239c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  10239f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1023a2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1023a5:	89 c1                	mov    %eax,%ecx
  1023a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1023aa:	d3 e0                	shl    %cl,%eax
  1023ac:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  1023b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1023b4:	8b 34 95 90 94 12 00 	mov    0x129490(,%edx,4),%esi
  1023bb:	21 c6                	and    %eax,%esi
  1023bd:	89 34 95 90 94 12 00 	mov    %esi,0x129490(,%edx,4)
}
  1023c4:	83 c4 14             	add    $0x14,%esp
  1023c7:	5e                   	pop    %esi
  1023c8:	5d                   	pop    %ebp
  1023c9:	c3                   	ret    
  1023ca:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001023d0 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  1023d0:	55                   	push   %ebp
  1023d1:	89 e5                	mov    %esp,%ebp
  1023d3:	53                   	push   %ebx
  1023d4:	57                   	push   %edi
  1023d5:	56                   	push   %esi
  1023d6:	83 ec 5c             	sub    $0x5c,%esp
  1023d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1023dc:	8d 0d 68 73 10 00    	lea    0x107368,%ecx
  1023e2:	8d 15 90 94 12 00    	lea    0x129490,%edx
  1023e8:	89 d6                	mov    %edx,%esi
  1023ea:	81 c6 00 00 02 00    	add    $0x20000,%esi
  1023f0:	89 d7                	mov    %edx,%edi
  1023f2:	bb 00 00 00 00       	mov    $0x0,%ebx
  1023f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1023fa:	b8 00 00 02 00       	mov    $0x20000,%eax
  1023ff:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102402:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102405:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  102408:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10240b:	8b 40 30             	mov    0x30(%eax),%eax
  10240e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  102411:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102414:	8b 40 30             	mov    0x30(%eax),%eax
  102417:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10241a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10241d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102420:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102423:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  102426:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  102429:	03 41 2c             	add    0x2c(%ecx),%eax
  10242c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			+ mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  10242f:	89 3c 24             	mov    %edi,(%esp)
  102432:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102439:	00 
  10243a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  102441:	00 
  102442:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  102445:	89 55 b8             	mov    %edx,-0x48(%ebp)
  102448:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  10244b:	e8 00 1b 00 00       	call   103f50 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  102450:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102453:	89 04 24             	mov    %eax,(%esp)
  102456:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102459:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10245d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  102460:	89 54 24 08          	mov    %edx,0x8(%esp)
  102464:	e8 e7 e0 ff ff       	call   100550 <kprintf>
  102469:	89 45 b0             	mov    %eax,-0x50(%ebp)

	while (mmap < mmap_end) {
  10246c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10246f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  102472:	0f 83 77 00 00 00    	jae    1024ef <pmm_init+0x11f>
		if (mmap->mm_type == 1) {
  102478:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10247b:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  102482:	0f 85 57 00 00 00    	jne    1024df <pmm_init+0x10f>
			uintptr_t addr = mmap->mm_base_addr;
  102488:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10248b:	8b 40 04             	mov    0x4(%eax),%eax
  10248e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uintptr_t end_addr = addr + mmap->mm_length;
  102491:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102494:	8b 49 0c             	mov    0xc(%ecx),%ecx
  102497:	01 c8                	add    %ecx,%eax
  102499:	89 45 e0             	mov    %eax,-0x20(%ebp)

			while (addr < end_addr) {
  10249c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10249f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  1024a2:	0f 83 32 00 00 00    	jae    1024da <pmm_init+0x10a>
				pmm_free((void*) addr);
  1024a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1024ab:	89 04 24             	mov    %eax,(%esp)
  1024ae:	e8 5d fe ff ff       	call   102310 <pmm_free>
				if (addr > upper_limit)
  1024b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1024b6:	3b 05 20 94 10 00    	cmp    0x109420,%eax
  1024bc:	0f 86 08 00 00 00    	jbe    1024ca <pmm_init+0xfa>
					upper_limit = addr;
  1024c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1024c5:	a3 20 94 10 00       	mov    %eax,0x109420
				addr += 0x1000;
  1024ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1024cd:	05 00 10 00 00       	add    $0x1000,%eax
  1024d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			}
  1024d5:	e9 c2 ff ff ff       	jmp    10249c <pmm_init+0xcc>
		}
  1024da:	e9 00 00 00 00       	jmp    1024df <pmm_init+0x10f>
		mmap++;
  1024df:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1024e2:	05 18 00 00 00       	add    $0x18,%eax
  1024e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  1024ea:	e9 7d ff ff ff       	jmp    10246c <pmm_init+0x9c>
  1024ef:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
  1024f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1024f8:	8d 05 00 a0 18 00    	lea    0x18a000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  1024fe:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  102501:	0f 83 1b 00 00 00    	jae    102522 <pmm_init+0x152>
		pmm_mark_used((void*) addr);
  102507:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10250a:	89 04 24             	mov    %eax,(%esp)
  10250d:	e8 5e fe ff ff       	call   102370 <pmm_mark_used>
		addr += 0x1000;
  102512:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102515:	05 00 10 00 00       	add    $0x1000,%eax
  10251a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  10251d:	e9 d6 ff ff ff       	jmp    1024f8 <pmm_init+0x128>

	struct multiboot_module* modules = mb_info->mi_mods_addr;
  102522:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102525:	8b 40 18             	mov    0x18(%eax),%eax
  102528:	89 45 d8             	mov    %eax,-0x28(%ebp)

	pmm_mark_used(mb_info);
  10252b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10252e:	89 04 24             	mov    %eax,(%esp)
  102531:	e8 3a fe ff ff       	call   102370 <pmm_mark_used>
	pmm_mark_used(modules);
  102536:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102539:	89 04 24             	mov    %eax,(%esp)
  10253c:	e8 2f fe ff ff       	call   102370 <pmm_mark_used>

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  102541:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102548:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10254b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10254e:	3b 41 14             	cmp    0x14(%ecx),%eax
  102551:	0f 83 59 00 00 00    	jae    1025b0 <pmm_init+0x1e0>
		addr = (uintptr_t) modules[i].start;
  102557:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10255a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10255d:	c1 e0 04             	shl    $0x4,%eax
  102560:	01 c1                	add    %eax,%ecx
  102562:	8b 01                	mov    (%ecx),%eax
  102564:	89 45 dc             	mov    %eax,-0x24(%ebp)
		while (addr < (uintptr_t) modules[i].end) {
  102567:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10256a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10256d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102570:	c1 e1 04             	shl    $0x4,%ecx
  102573:	01 ca                	add    %ecx,%edx
  102575:	8b 4a 04             	mov    0x4(%edx),%ecx
  102578:	39 c8                	cmp    %ecx,%eax
  10257a:	0f 83 1b 00 00 00    	jae    10259b <pmm_init+0x1cb>
			pmm_mark_used((void*) addr);
  102580:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102583:	89 04 24             	mov    %eax,(%esp)
  102586:	e8 e5 fd ff ff       	call   102370 <pmm_mark_used>
			addr += 0x1000;
  10258b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10258e:	05 00 10 00 00       	add    $0x1000,%eax
  102593:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
  102596:	e9 cc ff ff ff       	jmp    102567 <pmm_init+0x197>
	}
  10259b:	e9 00 00 00 00       	jmp    1025a0 <pmm_init+0x1d0>

	pmm_mark_used(mb_info);
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  1025a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1025a3:	05 01 00 00 00       	add    $0x1,%eax
  1025a8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1025ab:	e9 98 ff ff ff       	jmp    102548 <pmm_init+0x178>
		while (addr < (uintptr_t) modules[i].end) {
			pmm_mark_used((void*) addr);
			addr += 0x1000;
		}
	}
}
  1025b0:	83 c4 5c             	add    $0x5c,%esp
  1025b3:	5e                   	pop    %esi
  1025b4:	5f                   	pop    %edi
  1025b5:	5b                   	pop    %ebx
  1025b6:	5d                   	pop    %ebp
  1025b7:	c3                   	ret    
  1025b8:	66 90                	xchg   %ax,%ax
  1025ba:	66 90                	xchg   %ax,%ax
  1025bc:	66 90                	xchg   %ax,%ax
  1025be:	66 90                	xchg   %ax,%ax

001025c0 <ramfs_block_init>:
#include "ramfs/block.h"

struct block_buffer* buffer[65536];

void ramfs_block_init() {
  1025c0:	55                   	push   %ebp
  1025c1:	89 e5                	mov    %esp,%ebp
  1025c3:	83 ec 18             	sub    $0x18,%esp
  1025c6:	8d 05 90 94 14 00    	lea    0x149490,%eax
  1025cc:	b9 00 00 00 00       	mov    $0x0,%ecx
  1025d1:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  1025d6:	89 04 24             	mov    %eax,(%esp)
  1025d9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1025e0:	00 
  1025e1:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  1025e8:	00 
  1025e9:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1025ec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1025ef:	e8 5c 19 00 00       	call   103f50 <memset>
}
  1025f4:	83 c4 18             	add    $0x18,%esp
  1025f7:	5d                   	pop    %ebp
  1025f8:	c3                   	ret    
  1025f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102600 <ramfs_block_read>:
    }

    return 0;
}

uint32_t ramfs_block_read(struct res_handle* handle, void* dest, uint32_t length) {
  102600:	55                   	push   %ebp
  102601:	89 e5                	mov    %esp,%ebp
  102603:	83 ec 28             	sub    $0x28,%esp
  102606:	8b 45 10             	mov    0x10(%ebp),%eax
  102609:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10260c:	8b 55 08             	mov    0x8(%ebp),%edx
  10260f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102612:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102615:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102618:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10261b:	8b 40 04             	mov    0x4(%eax),%eax
  10261e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102621:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102624:	8b 00                	mov    (%eax),%eax
  102626:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  10262d:	00 00 00 00 
  102631:	0f 84 70 00 00 00    	je     1026a7 <ramfs_block_read+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't read that much biatch
  102637:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10263a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10263d:	8b 09                	mov    (%ecx),%ecx
  10263f:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102646:	8b 49 04             	mov    0x4(%ecx),%ecx
  102649:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10264c:	2b 4a 08             	sub    0x8(%edx),%ecx
  10264f:	39 c8                	cmp    %ecx,%eax
  102651:	0f 86 0c 00 00 00    	jbe    102663 <ramfs_block_read+0x63>
  102657:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  10265e:	e9 4b 00 00 00       	jmp    1026ae <ramfs_block_read+0xae>

        memcpy(dest, buffer[kf->id]->buffer + handle->position, length);
  102663:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102666:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102669:	8b 09                	mov    (%ecx),%ecx
  10266b:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102672:	8b 09                	mov    (%ecx),%ecx
  102674:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102677:	03 4a 08             	add    0x8(%edx),%ecx
  10267a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10267d:	89 04 24             	mov    %eax,(%esp)
  102680:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102684:	89 54 24 08          	mov    %edx,0x8(%esp)
  102688:	e8 23 19 00 00       	call   103fb0 <memcpy>
        handle->position += length;
  10268d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102690:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102693:	8b 51 08             	mov    0x8(%ecx),%edx
  102696:	01 c2                	add    %eax,%edx
  102698:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10269b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1026a2:	e9 07 00 00 00       	jmp    1026ae <ramfs_block_read+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  1026a7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  1026ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1026b1:	83 c4 28             	add    $0x28,%esp
  1026b4:	5d                   	pop    %ebp
  1026b5:	c3                   	ret    
  1026b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1026bd:	00 00 00 

001026c0 <ramfs_block_write>:

uint32_t ramfs_block_write(struct res_handle* handle, void* src, uint32_t length) {
  1026c0:	55                   	push   %ebp
  1026c1:	89 e5                	mov    %esp,%ebp
  1026c3:	83 ec 28             	sub    $0x28,%esp
  1026c6:	8b 45 10             	mov    0x10(%ebp),%eax
  1026c9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1026cc:	8b 55 08             	mov    0x8(%ebp),%edx
  1026cf:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1026d2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1026d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1026d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1026db:	8b 40 04             	mov    0x4(%eax),%eax
  1026de:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  1026e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1026e4:	8b 00                	mov    (%eax),%eax
  1026e6:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  1026ed:	00 00 00 00 
  1026f1:	0f 84 70 00 00 00    	je     102767 <ramfs_block_write+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't write  that much biatch TODO realloc so file may grow
  1026f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1026fa:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1026fd:	8b 09                	mov    (%ecx),%ecx
  1026ff:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102706:	8b 49 04             	mov    0x4(%ecx),%ecx
  102709:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10270c:	2b 4a 08             	sub    0x8(%edx),%ecx
  10270f:	39 c8                	cmp    %ecx,%eax
  102711:	0f 86 0c 00 00 00    	jbe    102723 <ramfs_block_write+0x63>
  102717:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  10271e:	e9 4b 00 00 00       	jmp    10276e <ramfs_block_write+0xae>

        memcpy(buffer[kf->id]->buffer + handle->position, src, length);
  102723:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102726:	8b 00                	mov    (%eax),%eax
  102728:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  10272f:	8b 00                	mov    (%eax),%eax
  102731:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102734:	03 41 08             	add    0x8(%ecx),%eax
  102737:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10273a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10273d:	89 04 24             	mov    %eax,(%esp)
  102740:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102744:	89 54 24 08          	mov    %edx,0x8(%esp)
  102748:	e8 63 18 00 00       	call   103fb0 <memcpy>
        handle->position += length;
  10274d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102750:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102753:	8b 51 08             	mov    0x8(%ecx),%edx
  102756:	01 c2                	add    %eax,%edx
  102758:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10275b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102762:	e9 07 00 00 00       	jmp    10276e <ramfs_block_write+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  102767:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10276e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102771:	83 c4 28             	add    $0x28,%esp
  102774:	5d                   	pop    %ebp
  102775:	c3                   	ret    
  102776:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10277d:	00 00 00 

00102780 <ramfs_block_open>:

struct res_handle* ramfs_block_open(struct res_kfile* kf, uint32_t filemode) {
  102780:	55                   	push   %ebp
  102781:	89 e5                	mov    %esp,%ebp
  102783:	83 ec 18             	sub    $0x18,%esp
  102786:	8b 45 0c             	mov    0xc(%ebp),%eax
  102789:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10278c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10278f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  102792:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102795:	8b 00                	mov    (%eax),%eax
  102797:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  10279e:	00 00 00 00 
  1027a2:	0f 84 9d 00 00 00    	je     102845 <ramfs_block_open+0xc5>
        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  1027a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027ab:	25 01 00 00 00       	and    $0x1,%eax
  1027b0:	3d 00 00 00 00       	cmp    $0x0,%eax
  1027b5:	0f 84 18 00 00 00    	je     1027d3 <ramfs_block_open+0x53>
  1027bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1027be:	8b 00                	mov    (%eax),%eax
  1027c0:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  1027c7:	8b 48 08             	mov    0x8(%eax),%ecx
  1027ca:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1027d0:	89 48 08             	mov    %ecx,0x8(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  1027d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027d6:	25 02 00 00 00       	and    $0x2,%eax
  1027db:	3d 00 00 00 00       	cmp    $0x0,%eax
  1027e0:	0f 84 18 00 00 00    	je     1027fe <ramfs_block_open+0x7e>
  1027e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1027e9:	8b 00                	mov    (%eax),%eax
  1027eb:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  1027f2:	8b 48 0c             	mov    0xc(%eax),%ecx
  1027f5:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1027fb:	89 48 0c             	mov    %ecx,0xc(%eax)
  1027fe:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  102803:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10280a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10280d:	e8 ce 10 00 00       	call   1038e0 <malloc>
  102812:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  102815:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102818:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10281b:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  10281e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102821:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  102828:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10282b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  102831:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102834:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102837:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  10283a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10283d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102840:	e9 08 00 00 00       	jmp    10284d <ramfs_block_open+0xcd>
  102845:	b8 01 00 00 00       	mov    $0x1,%eax
    }

    return (void*)1;
  10284a:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10284d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102850:	83 c4 18             	add    $0x18,%esp
  102853:	5d                   	pop    %ebp
  102854:	c3                   	ret    
  102855:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10285c:	00 00 00 00 

00102860 <ramfs_block_close>:

uint32_t ramfs_block_close(struct res_handle* handle) {
  102860:	55                   	push   %ebp
  102861:	89 e5                	mov    %esp,%ebp
  102863:	83 ec 18             	sub    $0x18,%esp
  102866:	8b 45 08             	mov    0x8(%ebp),%eax
  102869:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10286c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10286f:	8b 40 04             	mov    0x4(%eax),%eax
  102872:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  102875:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102878:	8b 00                	mov    (%eax),%eax
  10287a:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  102881:	00 00 00 00 
  102885:	0f 84 61 00 00 00    	je     1028ec <ramfs_block_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  10288b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10288e:	8b 40 0c             	mov    0xc(%eax),%eax
  102891:	25 01 00 00 00       	and    $0x1,%eax
  102896:	3d 00 00 00 00       	cmp    $0x0,%eax
  10289b:	0f 84 18 00 00 00    	je     1028b9 <ramfs_block_close+0x59>
  1028a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028a4:	8b 00                	mov    (%eax),%eax
  1028a6:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  1028ad:	8b 48 08             	mov    0x8(%eax),%ecx
  1028b0:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1028b6:	89 48 08             	mov    %ecx,0x8(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  1028b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028bc:	8b 40 0c             	mov    0xc(%eax),%eax
  1028bf:	25 02 00 00 00       	and    $0x2,%eax
  1028c4:	3d 00 00 00 00       	cmp    $0x0,%eax
  1028c9:	0f 84 18 00 00 00    	je     1028e7 <ramfs_block_close+0x87>
  1028cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028d2:	8b 00                	mov    (%eax),%eax
  1028d4:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  1028db:	8b 48 0c             	mov    0xc(%eax),%ecx
  1028de:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1028e4:	89 48 0c             	mov    %ecx,0xc(%eax)
    }
  1028e7:	e9 00 00 00 00       	jmp    1028ec <ramfs_block_close+0x8c>

    free(handle);
  1028ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028ef:	89 04 24             	mov    %eax,(%esp)
  1028f2:	e8 b9 13 00 00       	call   103cb0 <free>
  1028f7:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  1028fc:	83 c4 18             	add    $0x18,%esp
  1028ff:	5d                   	pop    %ebp
  102900:	c3                   	ret    
  102901:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102908:	0f 1f 84 00 00 00 00 
  10290f:	00 

00102910 <ramfs_block_available>:

struct kfs_driver* ramfs_block_driver_struct() {
    return &block_driver;
}

uint32_t ramfs_block_available(struct res_handle* handle) {
  102910:	55                   	push   %ebp
  102911:	89 e5                	mov    %esp,%ebp
  102913:	83 ec 0c             	sub    $0xc,%esp
  102916:	8b 45 08             	mov    0x8(%ebp),%eax
  102919:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10291c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10291f:	8b 40 04             	mov    0x4(%eax),%eax
  102922:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  102925:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102928:	8b 00                	mov    (%eax),%eax
  10292a:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  102931:	00 00 00 00 
  102935:	0f 84 1d 00 00 00    	je     102958 <ramfs_block_available+0x48>
        return buffer[kf->id]->size - handle->position;
  10293b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10293e:	8b 00                	mov    (%eax),%eax
  102940:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102947:	8b 40 04             	mov    0x4(%eax),%eax
  10294a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10294d:	2b 41 08             	sub    0x8(%ecx),%eax
  102950:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102953:	e9 07 00 00 00       	jmp    10295f <ramfs_block_available+0x4f>
    }

    return 0;
  102958:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10295f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102962:	83 c4 0c             	add    $0xc,%esp
  102965:	5d                   	pop    %ebp
  102966:	c3                   	ret    
  102967:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10296e:	00 00 

00102970 <ramfs_block_create>:

struct res_kfile* ramfs_block_create(uint32_t* args) {
  102970:	55                   	push   %ebp
  102971:	89 e5                	mov    %esp,%ebp
  102973:	83 ec 28             	sub    $0x28,%esp
  102976:	8b 45 08             	mov    0x8(%ebp),%eax
  102979:	b9 08 00 00 00       	mov    $0x8,%ecx
  10297e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  102981:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  102988:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10298b:	e8 50 0f 00 00       	call   1038e0 <malloc>
  102990:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  102993:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10299a:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  1029a1:	0f 8d a7 00 00 00    	jge    102a4e <ramfs_block_create+0xde>
        if(buffer[i] == 0) {
  1029a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1029aa:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  1029b1:	00 00 00 00 
  1029b5:	0f 85 7e 00 00 00    	jne    102a39 <ramfs_block_create+0xc9>
  1029bb:	b8 10 00 00 00       	mov    $0x10,%eax
            buffer[i] = malloc(sizeof(struct block_buffer));
  1029c0:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1029c7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1029ca:	e8 11 0f 00 00       	call   1038e0 <malloc>
  1029cf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1029d2:	89 04 8d 90 94 14 00 	mov    %eax,0x149490(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  1029d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1029dc:	8b 00                	mov    (%eax),%eax
  1029de:	89 04 24             	mov    %eax,(%esp)
  1029e1:	e8 fa 0e 00 00       	call   1038e0 <malloc>
  1029e6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1029e9:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  1029f0:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  1029f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1029f5:	8b 00                	mov    (%eax),%eax
  1029f7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1029fa:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102a01:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->writers = 0;
  102a04:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a07:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102a0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            buffer[i]->readers = 0;
  102a15:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a18:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102a1f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            kfret->id = i;
  102a26:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a29:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102a2c:	89 01                	mov    %eax,(%ecx)

            return kfret;
  102a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a31:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102a34:	e9 1c 00 00 00       	jmp    102a55 <ramfs_block_create+0xe5>
        }
    }
  102a39:	e9 00 00 00 00       	jmp    102a3e <ramfs_block_create+0xce>
}

struct res_kfile* ramfs_block_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  102a3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a41:	05 01 00 00 00       	add    $0x1,%eax
  102a46:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102a49:	e9 4c ff ff ff       	jmp    10299a <ramfs_block_create+0x2a>

            return kfret;
        }
    }

    return 0;
  102a4e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102a55:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a58:	83 c4 28             	add    $0x28,%esp
  102a5b:	5d                   	pop    %ebp
  102a5c:	c3                   	ret    
  102a5d:	0f 1f 00             	nopl   (%eax)

00102a60 <ramfs_block_driver_struct>:
    .close     = ramfs_block_close,
    .available = ramfs_block_available,
    .drvname   = "RAMFILE"
};

struct kfs_driver* ramfs_block_driver_struct() {
  102a60:	55                   	push   %ebp
  102a61:	89 e5                	mov    %esp,%ebp
  102a63:	8d 05 88 61 10 00    	lea    0x106188,%eax
    return &block_driver;
  102a69:	5d                   	pop    %ebp
  102a6a:	c3                   	ret    
  102a6b:	66 90                	xchg   %ax,%ax
  102a6d:	66 90                	xchg   %ax,%ax
  102a6f:	90                   	nop

00102a70 <ramfs_fifo_init>:
#include "ramfs/fifo.h"

struct fifo_buffer* buffer[65536];

void ramfs_fifo_init() {
  102a70:	55                   	push   %ebp
  102a71:	89 e5                	mov    %esp,%ebp
  102a73:	83 ec 18             	sub    $0x18,%esp
  102a76:	8d 05 90 94 14 00    	lea    0x149490,%eax
  102a7c:	b9 00 00 00 00       	mov    $0x0,%ecx
  102a81:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  102a86:	89 04 24             	mov    %eax,(%esp)
  102a89:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102a90:	00 
  102a91:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  102a98:	00 
  102a99:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102a9c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102a9f:	e8 ac 14 00 00       	call   103f50 <memset>
}
  102aa4:	83 c4 18             	add    $0x18,%esp
  102aa7:	5d                   	pop    %ebp
  102aa8:	c3                   	ret    
  102aa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102ab0 <ramfs_fifo_read>:
    }

    return 0;
}

uint32_t ramfs_fifo_read(struct res_handle* handle, void* dest, uint32_t length) {
  102ab0:	55                   	push   %ebp
  102ab1:	89 e5                	mov    %esp,%ebp
  102ab3:	56                   	push   %esi
  102ab4:	83 ec 24             	sub    $0x24,%esp
  102ab7:	8b 45 10             	mov    0x10(%ebp),%eax
  102aba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102abd:	8b 55 08             	mov    0x8(%ebp),%edx
  102ac0:	89 55 f4             	mov    %edx,-0xc(%ebp)
  102ac3:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102ac6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102ac9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102acc:	8b 40 04             	mov    0x4(%eax),%eax
  102acf:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if(buffer[kf->id] != 0) {
  102ad2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102ad5:	8b 00                	mov    (%eax),%eax
  102ad7:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  102ade:	00 00 00 00 
  102ae2:	0f 84 b9 00 00 00    	je     102ba1 <ramfs_fifo_read+0xf1>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't read cause buffer too small
  102ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102aeb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102aee:	8b 09                	mov    (%ecx),%ecx
  102af0:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102af7:	3b 41 04             	cmp    0x4(%ecx),%eax
  102afa:	0f 86 0c 00 00 00    	jbe    102b0c <ramfs_fifo_read+0x5c>
  102b00:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  102b07:	e9 9c 00 00 00       	jmp    102ba8 <ramfs_fifo_read+0xf8>
        if(length > buffer[kf->id]->pos)  return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has writers
  102b0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102b0f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102b12:	8b 09                	mov    (%ecx),%ecx
  102b14:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102b1b:	3b 41 08             	cmp    0x8(%ecx),%eax
  102b1e:	0f 86 0c 00 00 00    	jbe    102b30 <ramfs_fifo_read+0x80>
  102b24:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  102b2b:	e9 78 00 00 00       	jmp    102ba8 <ramfs_fifo_read+0xf8>

        memcpy(dest, buffer[kf->id]->buffer, length);
  102b30:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b33:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102b36:	8b 09                	mov    (%ecx),%ecx
  102b38:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102b3f:	8b 09                	mov    (%ecx),%ecx
  102b41:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102b44:	89 04 24             	mov    %eax,(%esp)
  102b47:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b4b:	89 54 24 08          	mov    %edx,0x8(%esp)
  102b4f:	e8 5c 14 00 00       	call   103fb0 <memcpy>
        memcpy(buffer[kf->id]->buffer, buffer[kf->id]->buffer + length, length - buffer[kf->id]->pos);
  102b54:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102b57:	8b 00                	mov    (%eax),%eax
  102b59:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102b60:	8b 00                	mov    (%eax),%eax
  102b62:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102b65:	8b 09                	mov    (%ecx),%ecx
  102b67:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102b6e:	8b 09                	mov    (%ecx),%ecx
  102b70:	03 4d ec             	add    -0x14(%ebp),%ecx
  102b73:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102b76:	8b 75 e8             	mov    -0x18(%ebp),%esi
  102b79:	8b 36                	mov    (%esi),%esi
  102b7b:	8b 34 b5 90 94 14 00 	mov    0x149490(,%esi,4),%esi
  102b82:	2b 56 08             	sub    0x8(%esi),%edx
  102b85:	89 04 24             	mov    %eax,(%esp)
  102b88:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b8c:	89 54 24 08          	mov    %edx,0x8(%esp)
  102b90:	e8 1b 14 00 00       	call   103fb0 <memcpy>

        return RW_OK;
  102b95:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  102b9c:	e9 07 00 00 00       	jmp    102ba8 <ramfs_fifo_read+0xf8>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  102ba1:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
}
  102ba8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102bab:	83 c4 24             	add    $0x24,%esp
  102bae:	5e                   	pop    %esi
  102baf:	5d                   	pop    %ebp
  102bb0:	c3                   	ret    
  102bb1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102bb8:	0f 1f 84 00 00 00 00 
  102bbf:	00 

00102bc0 <ramfs_fifo_write>:

uint32_t ramfs_fifo_write(struct res_handle* handle, void* src, uint32_t length) {
  102bc0:	55                   	push   %ebp
  102bc1:	89 e5                	mov    %esp,%ebp
  102bc3:	83 ec 28             	sub    $0x28,%esp
  102bc6:	8b 45 10             	mov    0x10(%ebp),%eax
  102bc9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102bcc:	8b 55 08             	mov    0x8(%ebp),%edx
  102bcf:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102bd2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102bd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102bd8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102bdb:	8b 40 04             	mov    0x4(%eax),%eax
  102bde:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102be1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102be4:	8b 00                	mov    (%eax),%eax
  102be6:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  102bed:	00 00 00 00 
  102bf1:	0f 84 af 00 00 00    	je     102ca6 <ramfs_fifo_write+0xe6>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't write cause buffer too small
  102bf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102bfa:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102bfd:	8b 09                	mov    (%ecx),%ecx
  102bff:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102c06:	3b 41 04             	cmp    0x4(%ecx),%eax
  102c09:	0f 86 0c 00 00 00    	jbe    102c1b <ramfs_fifo_write+0x5b>
  102c0f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  102c16:	e9 92 00 00 00       	jmp    102cad <ramfs_fifo_write+0xed>
        if(length > (buffer[kf->id]->size - buffer[kf->id]->pos)) return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has readers
  102c1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c1e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102c21:	8b 09                	mov    (%ecx),%ecx
  102c23:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102c2a:	8b 49 04             	mov    0x4(%ecx),%ecx
  102c2d:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102c30:	8b 12                	mov    (%edx),%edx
  102c32:	8b 14 95 90 94 14 00 	mov    0x149490(,%edx,4),%edx
  102c39:	2b 4a 08             	sub    0x8(%edx),%ecx
  102c3c:	39 c8                	cmp    %ecx,%eax
  102c3e:	0f 86 0c 00 00 00    	jbe    102c50 <ramfs_fifo_write+0x90>
  102c44:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  102c4b:	e9 5d 00 00 00       	jmp    102cad <ramfs_fifo_write+0xed>

        memcpy(buffer[kf->id]->buffer + buffer[kf->id]->pos, src, length);
  102c50:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c53:	8b 00                	mov    (%eax),%eax
  102c55:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102c5c:	8b 00                	mov    (%eax),%eax
  102c5e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102c61:	8b 09                	mov    (%ecx),%ecx
  102c63:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102c6a:	03 41 08             	add    0x8(%ecx),%eax
  102c6d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102c70:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102c73:	89 04 24             	mov    %eax,(%esp)
  102c76:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c7a:	89 54 24 08          	mov    %edx,0x8(%esp)
  102c7e:	e8 2d 13 00 00       	call   103fb0 <memcpy>
        buffer[kf->id]->pos += length;
  102c83:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c86:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102c89:	8b 09                	mov    (%ecx),%ecx
  102c8b:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102c92:	8b 51 08             	mov    0x8(%ecx),%edx
  102c95:	01 c2                	add    %eax,%edx
  102c97:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  102c9a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102ca1:	e9 07 00 00 00       	jmp    102cad <ramfs_fifo_write+0xed>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  102ca6:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  102cad:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102cb0:	83 c4 28             	add    $0x28,%esp
  102cb3:	5d                   	pop    %ebp
  102cb4:	c3                   	ret    
  102cb5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102cbc:	00 00 00 00 

00102cc0 <ramfs_fifo_open>:

struct res_handle* ramfs_fifo_open(struct res_kfile* kf, uint32_t filemode) {
  102cc0:	55                   	push   %ebp
  102cc1:	89 e5                	mov    %esp,%ebp
  102cc3:	83 ec 18             	sub    $0x18,%esp
  102cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
  102cc9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102ccc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102ccf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  102cd2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102cd5:	8b 00                	mov    (%eax),%eax
  102cd7:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  102cde:	00 00 00 00 
  102ce2:	0f 84 f6 00 00 00    	je     102dde <ramfs_fifo_open+0x11e>
        if(filemode & FM_EXEC) return (void*)3;
  102ce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ceb:	25 04 00 00 00       	and    $0x4,%eax
  102cf0:	3d 00 00 00 00       	cmp    $0x0,%eax
  102cf5:	0f 84 0d 00 00 00    	je     102d08 <ramfs_fifo_open+0x48>
  102cfb:	b8 03 00 00 00       	mov    $0x3,%eax
  102d00:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102d03:	e9 de 00 00 00       	jmp    102de6 <ramfs_fifo_open+0x126>
        if((filemode & FM_READ) && buffer[kf->id]->readers > 0) return (void*)2;
  102d08:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d0b:	25 01 00 00 00       	and    $0x1,%eax
  102d10:	3d 00 00 00 00       	cmp    $0x0,%eax
  102d15:	0f 84 26 00 00 00    	je     102d41 <ramfs_fifo_open+0x81>
  102d1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d1e:	8b 00                	mov    (%eax),%eax
  102d20:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102d27:	81 78 0c 00 00 00 00 	cmpl   $0x0,0xc(%eax)
  102d2e:	0f 86 0d 00 00 00    	jbe    102d41 <ramfs_fifo_open+0x81>
  102d34:	b8 02 00 00 00       	mov    $0x2,%eax
  102d39:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102d3c:	e9 a5 00 00 00       	jmp    102de6 <ramfs_fifo_open+0x126>

        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  102d41:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d44:	25 01 00 00 00       	and    $0x1,%eax
  102d49:	3d 00 00 00 00       	cmp    $0x0,%eax
  102d4e:	0f 84 18 00 00 00    	je     102d6c <ramfs_fifo_open+0xac>
  102d54:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d57:	8b 00                	mov    (%eax),%eax
  102d59:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102d60:	8b 48 0c             	mov    0xc(%eax),%ecx
  102d63:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102d69:	89 48 0c             	mov    %ecx,0xc(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  102d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d6f:	25 02 00 00 00       	and    $0x2,%eax
  102d74:	3d 00 00 00 00       	cmp    $0x0,%eax
  102d79:	0f 84 18 00 00 00    	je     102d97 <ramfs_fifo_open+0xd7>
  102d7f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d82:	8b 00                	mov    (%eax),%eax
  102d84:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102d8b:	8b 48 10             	mov    0x10(%eax),%ecx
  102d8e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102d94:	89 48 10             	mov    %ecx,0x10(%eax)
  102d97:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  102d9c:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  102da3:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102da6:	e8 35 0b 00 00       	call   1038e0 <malloc>
  102dab:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  102dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102db1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102db4:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  102db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102dba:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  102dc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102dc4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  102dca:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102dcd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102dd0:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  102dd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102dd6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102dd9:	e9 08 00 00 00       	jmp    102de6 <ramfs_fifo_open+0x126>
  102dde:	b8 01 00 00 00       	mov    $0x1,%eax
    }

    return (void*)1;
  102de3:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  102de6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102de9:	83 c4 18             	add    $0x18,%esp
  102dec:	5d                   	pop    %ebp
  102ded:	c3                   	ret    
  102dee:	66 90                	xchg   %ax,%ax

00102df0 <ramfs_fifo_close>:

uint32_t ramfs_fifo_close(struct res_handle* handle) {
  102df0:	55                   	push   %ebp
  102df1:	89 e5                	mov    %esp,%ebp
  102df3:	83 ec 18             	sub    $0x18,%esp
  102df6:	8b 45 08             	mov    0x8(%ebp),%eax
  102df9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102dfc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102dff:	8b 40 04             	mov    0x4(%eax),%eax
  102e02:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  102e05:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e08:	8b 00                	mov    (%eax),%eax
  102e0a:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  102e11:	00 00 00 00 
  102e15:	0f 84 61 00 00 00    	je     102e7c <ramfs_fifo_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  102e1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102e1e:	8b 40 0c             	mov    0xc(%eax),%eax
  102e21:	25 01 00 00 00       	and    $0x1,%eax
  102e26:	3d 00 00 00 00       	cmp    $0x0,%eax
  102e2b:	0f 84 18 00 00 00    	je     102e49 <ramfs_fifo_close+0x59>
  102e31:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e34:	8b 00                	mov    (%eax),%eax
  102e36:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102e3d:	8b 48 0c             	mov    0xc(%eax),%ecx
  102e40:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102e46:	89 48 0c             	mov    %ecx,0xc(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  102e49:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102e4c:	8b 40 0c             	mov    0xc(%eax),%eax
  102e4f:	25 02 00 00 00       	and    $0x2,%eax
  102e54:	3d 00 00 00 00       	cmp    $0x0,%eax
  102e59:	0f 84 18 00 00 00    	je     102e77 <ramfs_fifo_close+0x87>
  102e5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e62:	8b 00                	mov    (%eax),%eax
  102e64:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102e6b:	8b 48 10             	mov    0x10(%eax),%ecx
  102e6e:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102e74:	89 48 10             	mov    %ecx,0x10(%eax)
    }
  102e77:	e9 00 00 00 00       	jmp    102e7c <ramfs_fifo_close+0x8c>

    free(handle);
  102e7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102e7f:	89 04 24             	mov    %eax,(%esp)
  102e82:	e8 29 0e 00 00       	call   103cb0 <free>
  102e87:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  102e8c:	83 c4 18             	add    $0x18,%esp
  102e8f:	5d                   	pop    %ebp
  102e90:	c3                   	ret    
  102e91:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102e98:	0f 1f 84 00 00 00 00 
  102e9f:	00 

00102ea0 <ramfs_fifo_available>:

struct kfs_driver* ramfs_fifo_driver_struct() {
    return &fifo_driver;
}

uint32_t ramfs_fifo_available(struct res_handle* handle) {
  102ea0:	55                   	push   %ebp
  102ea1:	89 e5                	mov    %esp,%ebp
  102ea3:	83 ec 0c             	sub    $0xc,%esp
  102ea6:	8b 45 08             	mov    0x8(%ebp),%eax
  102ea9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102eac:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102eaf:	8b 40 04             	mov    0x4(%eax),%eax
  102eb2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  102eb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102eb8:	8b 00                	mov    (%eax),%eax
  102eba:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  102ec1:	00 00 00 00 
  102ec5:	0f 84 17 00 00 00    	je     102ee2 <ramfs_fifo_available+0x42>
        return buffer[kf->id]->pos;
  102ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ece:	8b 00                	mov    (%eax),%eax
  102ed0:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102ed7:	8b 40 08             	mov    0x8(%eax),%eax
  102eda:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102edd:	e9 07 00 00 00       	jmp    102ee9 <ramfs_fifo_available+0x49>
    }

    return 0;
  102ee2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102ee9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102eec:	83 c4 0c             	add    $0xc,%esp
  102eef:	5d                   	pop    %ebp
  102ef0:	c3                   	ret    
  102ef1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102ef8:	0f 1f 84 00 00 00 00 
  102eff:	00 

00102f00 <ramfs_fifo_create>:

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
  102f00:	55                   	push   %ebp
  102f01:	89 e5                	mov    %esp,%ebp
  102f03:	83 ec 28             	sub    $0x28,%esp
  102f06:	8b 45 08             	mov    0x8(%ebp),%eax
  102f09:	b9 08 00 00 00       	mov    $0x8,%ecx
  102f0e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  102f11:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  102f18:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102f1b:	e8 c0 09 00 00       	call   1038e0 <malloc>
  102f20:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  102f23:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102f2a:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  102f31:	0f 8d b8 00 00 00    	jge    102fef <ramfs_fifo_create+0xef>
        if(buffer[i] == 0) {
  102f37:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f3a:	81 3c 85 90 94 14 00 	cmpl   $0x0,0x149490(,%eax,4)
  102f41:	00 00 00 00 
  102f45:	0f 85 8f 00 00 00    	jne    102fda <ramfs_fifo_create+0xda>
  102f4b:	b8 14 00 00 00       	mov    $0x14,%eax
            buffer[i] = malloc(sizeof(struct fifo_buffer));
  102f50:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
  102f57:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102f5a:	e8 81 09 00 00       	call   1038e0 <malloc>
  102f5f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102f62:	89 04 8d 90 94 14 00 	mov    %eax,0x149490(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  102f69:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f6c:	8b 00                	mov    (%eax),%eax
  102f6e:	89 04 24             	mov    %eax,(%esp)
  102f71:	e8 6a 09 00 00       	call   1038e0 <malloc>
  102f76:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102f79:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102f80:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  102f82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f85:	8b 00                	mov    (%eax),%eax
  102f87:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102f8a:	8b 0c 8d 90 94 14 00 	mov    0x149490(,%ecx,4),%ecx
  102f91:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->pos = 0;
  102f94:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f97:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102f9e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            buffer[i]->writers = 0;
  102fa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102fa8:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102faf:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
            buffer[i]->readers = 0;
  102fb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102fb9:	8b 04 85 90 94 14 00 	mov    0x149490(,%eax,4),%eax
  102fc0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            kfret->id = i;
  102fc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102fca:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102fcd:	89 01                	mov    %eax,(%ecx)

            return kfret;
  102fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102fd2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102fd5:	e9 1c 00 00 00       	jmp    102ff6 <ramfs_fifo_create+0xf6>
        }
    }
  102fda:	e9 00 00 00 00       	jmp    102fdf <ramfs_fifo_create+0xdf>
}

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  102fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102fe2:	05 01 00 00 00       	add    $0x1,%eax
  102fe7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102fea:	e9 3b ff ff ff       	jmp    102f2a <ramfs_fifo_create+0x2a>

            return kfret;
        }
    }

    return 0;
  102fef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102ff9:	83 c4 28             	add    $0x28,%esp
  102ffc:	5d                   	pop    %ebp
  102ffd:	c3                   	ret    
  102ffe:	66 90                	xchg   %ax,%ax

00103000 <ramfs_fifo_driver_struct>:
    .close     = ramfs_fifo_close,
    .available = ramfs_fifo_available,
    .drvname   = "FIFO"
};

struct kfs_driver* ramfs_fifo_driver_struct() {
  103000:	55                   	push   %ebp
  103001:	89 e5                	mov    %esp,%ebp
  103003:	8d 05 a4 61 10 00    	lea    0x1061a4,%eax
    return &fifo_driver;
  103009:	5d                   	pop    %ebp
  10300a:	c3                   	ret    
  10300b:	90                   	nop
  10300c:	66 90                	xchg   %ax,%ax
  10300e:	66 90                	xchg   %ax,%ax

00103010 <tar_load_ramfs>:

    return size;

}

void tar_load_ramfs(void* tarball) {
  103010:	55                   	push   %ebp
  103011:	89 e5                	mov    %esp,%ebp
  103013:	56                   	push   %esi
  103014:	83 ec 64             	sub    $0x64,%esp
  103017:	8b 45 08             	mov    0x8(%ebp),%eax
  10301a:	8d 0d 8b 73 10 00    	lea    0x10738b,%ecx
  103020:	89 45 f8             	mov    %eax,-0x8(%ebp)
    void* address = tarball;
  103023:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103026:	89 45 f4             	mov    %eax,-0xc(%ebp)

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);
  103029:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10302c:	89 0c 24             	mov    %ecx,(%esp)
  10302f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103033:	e8 18 d5 ff ff       	call   100550 <kprintf>

    for (i = 0; ; i++)
  103038:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10303f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    {

        struct tar_header *header = (struct tar_header*)address;
  103042:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103045:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (header->name[0] == '\0')
  103048:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10304b:	0f be 00             	movsbl (%eax),%eax
  10304e:	3d 00 00 00 00       	cmp    $0x0,%eax
  103053:	0f 85 05 00 00 00    	jne    10305e <tar_load_ramfs+0x4e>
            break;
  103059:	e9 67 01 00 00       	jmp    1031c5 <tar_load_ramfs+0x1b5>

        uint32_t size = tar_parse_number(header->size);
  10305e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103061:	05 7c 00 00 00       	add    $0x7c,%eax
  103066:	89 04 24             	mov    %eax,(%esp)
  103069:	e8 72 01 00 00       	call   1031e0 <tar_parse_number>
  10306e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        address += 512;
  103071:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103074:	05 00 02 00 00       	add    $0x200,%eax
  103079:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(size != 0) {
  10307c:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  103083:	0f 84 cb 00 00 00    	je     103154 <tar_load_ramfs+0x144>
  103089:	8d 05 b7 73 10 00    	lea    0x1073b7,%eax
            kprintf("[initrfs] Extracting %s (%d bytes)\n", header->name, size);
  10308f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103092:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103095:	89 04 24             	mov    %eax,(%esp)
  103098:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10309c:	89 54 24 08          	mov    %edx,0x8(%esp)
  1030a0:	e8 ab d4 ff ff       	call   100550 <kprintf>
  1030a5:	8d 4d e8             	lea    -0x18(%ebp),%ecx

            vfs_create_kfile(header->name, ramfs_block_driver_struct(), &size);
  1030a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1030ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1030ae:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1030b1:	89 55 d0             	mov    %edx,-0x30(%ebp)
  1030b4:	e8 a7 f9 ff ff       	call   102a60 <ramfs_block_driver_struct>
  1030b9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1030bc:	89 0c 24             	mov    %ecx,(%esp)
  1030bf:	89 44 24 04          	mov    %eax,0x4(%esp)
  1030c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1030c6:	89 44 24 08          	mov    %eax,0x8(%esp)
  1030ca:	e8 a1 15 00 00       	call   104670 <vfs_create_kfile>
  1030cf:	b9 02 00 00 00       	mov    $0x2,%ecx
            struct res_handle* h = vfs_open(header->name, FM_WRITE);
  1030d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1030d7:	89 14 24             	mov    %edx,(%esp)
  1030da:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1030e1:	00 
  1030e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1030e5:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  1030e8:	e8 f3 16 00 00       	call   1047e0 <vfs_open>
  1030ed:	b9 01 00 00 00       	mov    $0x1,%ecx
  1030f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            uint32_t err = vfs_write(h, address, size, 1);
  1030f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1030f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1030fb:	8b 75 e8             	mov    -0x18(%ebp),%esi
  1030fe:	89 04 24             	mov    %eax,(%esp)
  103101:	89 54 24 04          	mov    %edx,0x4(%esp)
  103105:	89 74 24 08          	mov    %esi,0x8(%esp)
  103109:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103110:	00 
  103111:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  103114:	e8 77 18 00 00       	call   104990 <vfs_write>
  103119:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(err) {
  10311c:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  103123:	0f 84 18 00 00 00    	je     103141 <tar_load_ramfs+0x131>
  103129:	8d 05 db 73 10 00    	lea    0x1073db,%eax
                kprintf("[initrfs] VFS ERROR: %d\n", err);
  10312f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103132:	89 04 24             	mov    %eax,(%esp)
  103135:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103139:	e8 12 d4 ff ff       	call   100550 <kprintf>
  10313e:	89 45 c0             	mov    %eax,-0x40(%ebp)
            }

            vfs_close(h);
  103141:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103144:	89 04 24             	mov    %eax,(%esp)
  103147:	e8 14 17 00 00       	call   104860 <vfs_close>
        }
  10314c:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10314f:	e9 2d 00 00 00       	jmp    103181 <tar_load_ramfs+0x171>
  103154:	8d 05 f4 73 10 00    	lea    0x1073f4,%eax
        else
        {
            kprintf("[initrfs] Creating dir %s (%d bytes)\n", header->name, size);
  10315a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10315d:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103160:	89 04 24             	mov    %eax,(%esp)
  103163:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103167:	89 54 24 08          	mov    %edx,0x8(%esp)
  10316b:	e8 e0 d3 ff ff       	call   100550 <kprintf>
            vfs_create_dir(header->name);
  103170:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103173:	89 0c 24             	mov    %ecx,(%esp)
  103176:	89 45 b8             	mov    %eax,-0x48(%ebp)
  103179:	e8 62 13 00 00       	call   1044e0 <vfs_create_dir>
  10317e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        }

        address += (size / 512) * 512;
  103181:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103184:	c1 e8 09             	shr    $0x9,%eax
  103187:	c1 e0 09             	shl    $0x9,%eax
  10318a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10318d:	01 c1                	add    %eax,%ecx
  10318f:	89 4d f4             	mov    %ecx,-0xc(%ebp)

        if (size % 512)
  103192:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103195:	25 ff 01 00 00       	and    $0x1ff,%eax
  10319a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10319f:	0f 84 0b 00 00 00    	je     1031b0 <tar_load_ramfs+0x1a0>
            address += 512;
  1031a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031a8:	05 00 02 00 00       	add    $0x200,%eax
  1031ad:	89 45 f4             	mov    %eax,-0xc(%ebp)

    }
  1031b0:	e9 00 00 00 00       	jmp    1031b5 <tar_load_ramfs+0x1a5>

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);

    for (i = 0; ; i++)
  1031b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1031b8:	05 01 00 00 00       	add    $0x1,%eax
  1031bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1031c0:	e9 7d fe ff ff       	jmp    103042 <tar_load_ramfs+0x32>
  1031c5:	8d 05 1a 74 10 00    	lea    0x10741a,%eax
        if (size % 512)
            address += 512;

    }

    kprintf("[initrfs] Finished unpacking tarball\n");
  1031cb:	89 04 24             	mov    %eax,(%esp)
  1031ce:	e8 7d d3 ff ff       	call   100550 <kprintf>
}
  1031d3:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1031d6:	83 c4 64             	add    $0x64,%esp
  1031d9:	5e                   	pop    %esi
  1031da:	5d                   	pop    %ebp
  1031db:	c3                   	ret    
  1031dc:	0f 1f 40 00          	nopl   0x0(%eax)

001031e0 <tar_parse_number>:
#include "ramfs/tar.h"
#include "ramfs/block.h"
#include "vfs.h"

static uint32_t tar_parse_number(const char *in)
{
  1031e0:	55                   	push   %ebp
  1031e1:	89 e5                	mov    %esp,%ebp
  1031e3:	83 ec 10             	sub    $0x10,%esp
  1031e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1031e9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    unsigned int size = 0;
  1031ec:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    unsigned int j;
    unsigned int count = 1;
  1031f3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

    for (j = 11; j > 0; j--, count *= 8)
  1031fa:	c7 45 f4 0b 00 00 00 	movl   $0xb,-0xc(%ebp)
  103201:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103208:	0f 86 39 00 00 00    	jbe    103247 <tar_parse_number+0x67>
        size += ((in[j - 1] - '0') * count);
  10320e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103211:	2d 01 00 00 00       	sub    $0x1,%eax
  103216:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103219:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  10321d:	2d 30 00 00 00       	sub    $0x30,%eax
  103222:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  103226:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103229:	01 c1                	add    %eax,%ecx
  10322b:	89 4d f8             	mov    %ecx,-0x8(%ebp)

    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;

    for (j = 11; j > 0; j--, count *= 8)
  10322e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103231:	05 ff ff ff ff       	add    $0xffffffff,%eax
  103236:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103239:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10323c:	c1 e0 03             	shl    $0x3,%eax
  10323f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103242:	e9 ba ff ff ff       	jmp    103201 <tar_parse_number+0x21>
        size += ((in[j - 1] - '0') * count);

    return size;
  103247:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10324a:	83 c4 10             	add    $0x10,%esp
  10324d:	5d                   	pop    %ebp
  10324e:	c3                   	ret    
  10324f:	90                   	nop

00103250 <enableScheduling>:
struct task* first_task = 0;
struct task* current_task = 0;

int nextPID = 1;

void enableScheduling(void) {
  103250:	55                   	push   %ebp
  103251:	89 e5                	mov    %esp,%ebp
    schedulingEnabled = 1;
  103253:	c7 05 24 94 10 00 01 	movl   $0x1,0x109424
  10325a:	00 00 00 
}
  10325d:	5d                   	pop    %ebp
  10325e:	c3                   	ret    
  10325f:	90                   	nop

00103260 <isSchedulingEnabled>:

uint32_t isSchedulingEnabled(void) {
  103260:	55                   	push   %ebp
  103261:	89 e5                	mov    %esp,%ebp
    return schedulingEnabled;
  103263:	a1 24 94 10 00       	mov    0x109424,%eax
  103268:	5d                   	pop    %ebp
  103269:	c3                   	ret    
  10326a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103270 <get_current_task>:
}

struct task* get_current_task(void) {
  103270:	55                   	push   %ebp
  103271:	89 e5                	mov    %esp,%ebp
    return current_task;
  103273:	a1 2c 94 10 00       	mov    0x10942c,%eax
  103278:	5d                   	pop    %ebp
  103279:	c3                   	ret    
  10327a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103280 <register_handle>:
}

uint32_t register_handle(struct res_handle* h) {
  103280:	55                   	push   %ebp
  103281:	89 e5                	mov    %esp,%ebp
  103283:	83 ec 18             	sub    $0x18,%esp
  103286:	8b 45 08             	mov    0x8(%ebp),%eax
  103289:	b9 08 00 00 00       	mov    $0x8,%ecx
  10328e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct hl_node* old = current_task->handle_list;
  103291:	a1 2c 94 10 00       	mov    0x10942c,%eax
  103296:	8b 40 1c             	mov    0x1c(%eax),%eax
  103299:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task->handle_list = malloc(sizeof(struct hl_node));
  10329c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1032a3:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1032a6:	e8 35 06 00 00       	call   1038e0 <malloc>
  1032ab:	b9 00 00 00 00       	mov    $0x0,%ecx
  1032b0:	8b 15 2c 94 10 00    	mov    0x10942c,%edx
  1032b6:	89 42 1c             	mov    %eax,0x1c(%edx)
    current_task->handle_list->next = old;
  1032b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032bc:	8b 15 2c 94 10 00    	mov    0x10942c,%edx
  1032c2:	8b 52 1c             	mov    0x1c(%edx),%edx
  1032c5:	89 42 04             	mov    %eax,0x4(%edx)
    current_task->handle_list->handle = h;
  1032c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1032cb:	8b 15 2c 94 10 00    	mov    0x10942c,%edx
  1032d1:	8b 52 1c             	mov    0x1c(%edx),%edx
  1032d4:	89 02                	mov    %eax,(%edx)

    return 0;
  1032d6:	89 c8                	mov    %ecx,%eax
  1032d8:	83 c4 18             	add    $0x18,%esp
  1032db:	5d                   	pop    %ebp
  1032dc:	c3                   	ret    
  1032dd:	0f 1f 00             	nopl   (%eax)

001032e0 <unregister_handle>:
}

uint32_t unregister_handle(struct res_handle* h) {
  1032e0:	55                   	push   %ebp
  1032e1:	89 e5                	mov    %esp,%ebp
  1032e3:	83 ec 18             	sub    $0x18,%esp
  1032e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1032e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct hl_node* cur = current_task->handle_list;
  1032ec:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1032f1:	8b 40 1c             	mov    0x1c(%eax),%eax
  1032f4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(h == 0) return 2;
  1032f7:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1032fe:	0f 85 0c 00 00 00    	jne    103310 <unregister_handle+0x30>
  103304:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
  10330b:	e9 a8 00 00 00       	jmp    1033b8 <unregister_handle+0xd8>
    if(cur == 0) return 1;
  103310:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103317:	0f 85 0c 00 00 00    	jne    103329 <unregister_handle+0x49>
  10331d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  103324:	e9 8f 00 00 00       	jmp    1033b8 <unregister_handle+0xd8>

    if(cur->handle == h) {
  103329:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10332c:	8b 00                	mov    (%eax),%eax
  10332e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103331:	0f 85 1a 00 00 00    	jne    103351 <unregister_handle+0x71>
        current_task->handle_list = cur->next;
  103337:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10333a:	8b 40 04             	mov    0x4(%eax),%eax
  10333d:	8b 0d 2c 94 10 00    	mov    0x10942c,%ecx
  103343:	89 41 1c             	mov    %eax,0x1c(%ecx)
        free(cur);
  103346:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103349:	89 04 24             	mov    %eax,(%esp)
  10334c:	e8 5f 09 00 00       	call   103cb0 <free>
    }

    while(cur != 0) {
  103351:	e9 00 00 00 00       	jmp    103356 <unregister_handle+0x76>
  103356:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10335d:	0f 84 4e 00 00 00    	je     1033b1 <unregister_handle+0xd1>
        if(cur->next->handle == h) {
  103363:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103366:	8b 40 04             	mov    0x4(%eax),%eax
  103369:	8b 00                	mov    (%eax),%eax
  10336b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  10336e:	0f 85 2f 00 00 00    	jne    1033a3 <unregister_handle+0xc3>
            void* next = cur->next;
  103374:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103377:	8b 40 04             	mov    0x4(%eax),%eax
  10337a:	89 45 f0             	mov    %eax,-0x10(%ebp)
            cur->next =  cur->next->next;
  10337d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103380:	8b 40 04             	mov    0x4(%eax),%eax
  103383:	8b 40 04             	mov    0x4(%eax),%eax
  103386:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103389:	89 41 04             	mov    %eax,0x4(%ecx)

            free(next);
  10338c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10338f:	89 04 24             	mov    %eax,(%esp)
  103392:	e8 19 09 00 00       	call   103cb0 <free>

            return 0;
  103397:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10339e:	e9 15 00 00 00       	jmp    1033b8 <unregister_handle+0xd8>
        }

        cur = cur->next;
  1033a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1033a6:	8b 40 04             	mov    0x4(%eax),%eax
  1033a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  1033ac:	e9 a5 ff ff ff       	jmp    103356 <unregister_handle+0x76>

    return 3;
  1033b1:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  1033b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1033bb:	83 c4 18             	add    $0x18,%esp
  1033be:	5d                   	pop    %ebp
  1033bf:	c3                   	ret    

001033c0 <schedule_exception>:

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  1033c0:	55                   	push   %ebp
  1033c1:	89 e5                	mov    %esp,%ebp
  1033c3:	56                   	push   %esi
  1033c4:	83 ec 34             	sub    $0x34,%esp
  1033c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1033ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (current_task == first_task && current_task->next == 0) {
  1033cd:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1033d2:	3b 05 28 94 10 00    	cmp    0x109428,%eax
  1033d8:	0f 85 71 00 00 00    	jne    10344f <schedule_exception+0x8f>
  1033de:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1033e3:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  1033ea:	0f 85 5f 00 00 00    	jne    10344f <schedule_exception+0x8f>
  1033f0:	b8 04 00 00 00       	mov    $0x4,%eax
        //Only one process is running, which just crashed. Stop system.
        setclr(0x04);
  1033f5:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1033fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1033ff:	e8 2c d1 ff ff       	call   100530 <setclr>
  103404:	8d 05 40 74 10 00    	lea    0x107440,%eax
        kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n",
  10340a:	8b 0d 2c 94 10 00    	mov    0x10942c,%ecx
  103410:	8b 09                	mov    (%ecx),%ecx
  103412:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103415:	8b 52 1c             	mov    0x1c(%edx),%edx
  103418:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10341b:	8b 76 20             	mov    0x20(%esi),%esi
  10341e:	89 04 24             	mov    %eax,(%esp)
  103421:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103425:	89 54 24 08          	mov    %edx,0x8(%esp)
  103429:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10342d:	e8 1e d1 ff ff       	call   100550 <kprintf>
  103432:	8d 0d 74 74 10 00    	lea    0x107474,%ecx
                current_task->PID, cpu->intr, cpu->error);
        show_cod(cpu, "Last task crashed. Terminating kernel...");
  103438:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10343b:	89 14 24             	mov    %edx,(%esp)
  10343e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103442:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103445:	e8 26 cf ff ff       	call   100370 <show_cod>
    } else {
  10344a:	e9 88 00 00 00       	jmp    1034d7 <schedule_exception+0x117>
  10344f:	b8 04 00 00 00       	mov    $0x4,%eax
        //Potential security leaks available in following code.
        setclr(0x04);
  103454:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10345b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10345e:	e8 cd d0 ff ff       	call   100530 <setclr>
  103463:	8d 05 40 74 10 00    	lea    0x107440,%eax
        kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n",
  103469:	8b 0d 2c 94 10 00    	mov    0x10942c,%ecx
  10346f:	8b 09                	mov    (%ecx),%ecx
  103471:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103474:	8b 52 1c             	mov    0x1c(%edx),%edx
  103477:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10347a:	8b 76 20             	mov    0x20(%esi),%esi
  10347d:	89 04 24             	mov    %eax,(%esp)
  103480:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103484:	89 54 24 08          	mov    %edx,0x8(%esp)
  103488:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10348c:	e8 bf d0 ff ff       	call   100550 <kprintf>
  103491:	8d 0d c5 72 10 00    	lea    0x1072c5,%ecx
                current_task->PID, cpu->intr, cpu->error);
        kprintf("\n");
  103497:	89 0c 24             	mov    %ecx,(%esp)
  10349a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10349d:	e8 ae d0 ff ff       	call   100550 <kprintf>
        show_dump(cpu);
  1034a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1034a5:	89 0c 24             	mov    %ecx,(%esp)
  1034a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1034ab:	e8 30 cf ff ff       	call   1003e0 <show_dump>
  1034b0:	b8 07 00 00 00       	mov    $0x7,%eax
        setclr(0x07);
  1034b5:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1034bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1034bf:	e8 6c d0 ff ff       	call   100530 <setclr>

        return terminate_current(cpu);
  1034c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034c7:	89 04 24             	mov    %eax,(%esp)
  1034ca:	e8 21 00 00 00       	call   1034f0 <terminate_current>
  1034cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1034d2:	e9 06 00 00 00       	jmp    1034dd <schedule_exception+0x11d>
    }
    return cpu;
  1034d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034da:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  1034dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1034e0:	83 c4 34             	add    $0x34,%esp
  1034e3:	5e                   	pop    %esi
  1034e4:	5d                   	pop    %ebp
  1034e5:	c3                   	ret    
  1034e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1034ed:	00 00 00 

001034f0 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  1034f0:	55                   	push   %ebp
  1034f1:	89 e5                	mov    %esp,%ebp
  1034f3:	83 ec 18             	sub    $0x18,%esp
  1034f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1034f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct task* next = current_task->next;
  1034fc:	a1 2c 94 10 00       	mov    0x10942c,%eax
  103501:	8b 40 08             	mov    0x8(%eax),%eax
  103504:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* prev = current_task->prev;
  103507:	a1 2c 94 10 00       	mov    0x10942c,%eax
  10350c:	8b 40 0c             	mov    0xc(%eax),%eax
  10350f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //TODO: free resources here

    if (current_task == first_task) {
  103512:	a1 2c 94 10 00       	mov    0x10942c,%eax
  103517:	3b 05 28 94 10 00    	cmp    0x109428,%eax
  10351d:	0f 85 0d 00 00 00    	jne    103530 <terminate_current+0x40>
        first_task = current_task->next;
  103523:	a1 2c 94 10 00       	mov    0x10942c,%eax
  103528:	8b 40 08             	mov    0x8(%eax),%eax
  10352b:	a3 28 94 10 00       	mov    %eax,0x109428
    }

    if (next != 0) {
  103530:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103537:	0f 84 09 00 00 00    	je     103546 <terminate_current+0x56>
        next->prev = prev;
  10353d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103540:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103543:	89 41 0c             	mov    %eax,0xc(%ecx)
    }

    if (prev != 0) {
  103546:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10354d:	0f 84 09 00 00 00    	je     10355c <terminate_current+0x6c>
        prev->next = next;
  103553:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103556:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103559:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    //TODO: handle if all tasks are closed

    if (next == 0)
  10355c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103563:	0f 85 08 00 00 00    	jne    103571 <terminate_current+0x81>
        next = first_task;
  103569:	a1 28 94 10 00       	mov    0x109428,%eax
  10356e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task = next;
  103571:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103574:	a3 2c 94 10 00       	mov    %eax,0x10942c

    if(current_task == 0) {
  103579:	81 3d 2c 94 10 00 00 	cmpl   $0x0,0x10942c
  103580:	00 00 00 
  103583:	0f 85 15 00 00 00    	jne    10359e <terminate_current+0xae>
  103589:	8d 05 9d 74 10 00    	lea    0x10749d,%eax
        show_cod(cpu, "Last task terminated.");
  10358f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103592:	89 0c 24             	mov    %ecx,(%esp)
  103595:	89 44 24 04          	mov    %eax,0x4(%esp)
  103599:	e8 d2 cd ff ff       	call   100370 <show_cod>
    }

    vmm_activate_pagedir(current_task->phys_pdir);
  10359e:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1035a3:	8b 40 14             	mov    0x14(%eax),%eax
  1035a6:	89 04 24             	mov    %eax,(%esp)
  1035a9:	e8 c2 26 00 00       	call   105c70 <vmm_activate_pagedir>
    return current_task->cpuState;
  1035ae:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1035b3:	8b 40 04             	mov    0x4(%eax),%eax
  1035b6:	83 c4 18             	add    $0x18,%esp
  1035b9:	5d                   	pop    %ebp
  1035ba:	c3                   	ret    
  1035bb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001035c0 <fork_task_state>:
}

void fork_task_state(struct task* new_task) {
  1035c0:	55                   	push   %ebp
  1035c1:	89 e5                	mov    %esp,%ebp
  1035c3:	83 ec 18             	sub    $0x18,%esp
  1035c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1035c9:	b9 38 00 00 00       	mov    $0x38,%ecx
  1035ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
    new_task->user_stack_bottom = current_task->user_stack_bottom;
  1035d1:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1035d6:	8b 40 10             	mov    0x10(%eax),%eax
  1035d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1035dc:	89 42 10             	mov    %eax,0x10(%edx)

    memcpy(new_task->cpuState, current_task->cpuState,
  1035df:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1035e2:	8b 40 04             	mov    0x4(%eax),%eax
  1035e5:	8b 15 2c 94 10 00    	mov    0x10942c,%edx
  1035eb:	8b 52 04             	mov    0x4(%edx),%edx
  1035ee:	89 04 24             	mov    %eax,(%esp)
  1035f1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1035f5:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1035fc:	00 
  1035fd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103600:	e8 ab 09 00 00       	call   103fb0 <memcpy>
            sizeof(struct cpu_state));

    new_task->cpuState->eax = 0;
  103605:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103608:	8b 40 04             	mov    0x4(%eax),%eax
  10360b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
  103611:	83 c4 18             	add    $0x18,%esp
  103614:	5d                   	pop    %ebp
  103615:	c3                   	ret    
  103616:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10361d:	00 00 00 

00103620 <init_task>:

struct task* init_task(uint32_t task_pagedir, void* entry) {
  103620:	55                   	push   %ebp
  103621:	89 e5                	mov    %esp,%ebp
  103623:	83 ec 68             	sub    $0x68,%esp
  103626:	8b 45 0c             	mov    0xc(%ebp),%eax
  103629:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10362c:	ba 20 00 00 00       	mov    $0x20,%edx
  103631:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103634:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* ntask = malloc(sizeof(struct task));
  103637:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10363e:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  103641:	e8 9a 02 00 00       	call   1038e0 <malloc>
  103646:	b9 38 00 00 00       	mov    $0x38,%ecx
  10364b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ntask->cpuState = malloc(sizeof(struct cpu_state));
  10364e:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  103655:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  103658:	e8 83 02 00 00       	call   1038e0 <malloc>
  10365d:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  103662:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103665:	89 42 04             	mov    %eax,0x4(%edx)

    ntask->phys_pdir = task_pagedir;
  103668:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10366b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10366e:	89 42 14             	mov    %eax,0x14(%edx)
    ntask->user_stack_bottom = (void*) 0xFFFFE000;
  103671:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103674:	89 48 10             	mov    %ecx,0x10(%eax)
    ntask->PID = nextPID++;
  103677:	a1 c0 61 10 00       	mov    0x1061c0,%eax
  10367c:	89 c1                	mov    %eax,%ecx
  10367e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  103684:	89 0d c0 61 10 00    	mov    %ecx,0x1061c0
  10368a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10368d:	89 01                	mov    %eax,(%ecx)

    ntask->next = (void*) 0;
  10368f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103692:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    ntask->prev = (void*) 0;
  103699:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10369c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    if (first_task == 0) {
  1036a3:	81 3d 28 94 10 00 00 	cmpl   $0x0,0x109428
  1036aa:	00 00 00 
  1036ad:	0f 85 0d 00 00 00    	jne    1036c0 <init_task+0xa0>
        first_task = ntask;
  1036b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036b6:	a3 28 94 10 00       	mov    %eax,0x109428
    } else {
  1036bb:	e9 1f 00 00 00       	jmp    1036df <init_task+0xbf>
        ntask->next = first_task;
  1036c0:	a1 28 94 10 00       	mov    0x109428,%eax
  1036c5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1036c8:	89 41 08             	mov    %eax,0x8(%ecx)
        first_task->prev = ntask;
  1036cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036ce:	8b 0d 28 94 10 00    	mov    0x109428,%ecx
  1036d4:	89 41 0c             	mov    %eax,0xc(%ecx)
        first_task = ntask;
  1036d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1036da:	a3 28 94 10 00       	mov    %eax,0x109428
    }

    uint32_t rest_pdir = vmm_get_current_pagedir();
  1036df:	e8 4c 1a 00 00       	call   105130 <vmm_get_current_pagedir>
  1036e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    vmm_activate_pagedir(task_pagedir);
  1036e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1036ea:	89 04 24             	mov    %eax,(%esp)
  1036ed:	e8 7e 25 00 00       	call   105c70 <vmm_activate_pagedir>

    if (entry != 0) { //entry == 0 means that this will be forked
  1036f2:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1036f9:	0f 84 21 00 00 00    	je     103720 <init_task+0x100>
  1036ff:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_alloc_addr(ntask->user_stack_bottom, 0);
  103704:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103707:	8b 49 10             	mov    0x10(%ecx),%ecx
  10370a:	89 0c 24             	mov    %ecx,(%esp)
  10370d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103714:	00 
  103715:	89 45 ac             	mov    %eax,-0x54(%ebp)
  103718:	e8 53 24 00 00       	call   105b70 <vmm_alloc_addr>
  10371d:	89 45 a8             	mov    %eax,-0x58(%ebp)
  103720:	b8 38 00 00 00       	mov    $0x38,%eax
  103725:	8d 4d b8             	lea    -0x48(%ebp),%ecx
    }

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  103728:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10372f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  103736:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  10373d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  103744:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  10374b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  103752:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  103759:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  103760:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  103767:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10376a:	89 55 dc             	mov    %edx,-0x24(%ebp)
  10376d:	c7 45 e0 1b 00 00 00 	movl   $0x1b,-0x20(%ebp)
  103774:	c7 45 e4 00 02 00 00 	movl   $0x200,-0x1c(%ebp)
  10377b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10377e:	8b 52 10             	mov    0x10(%edx),%edx
  103781:	81 c2 00 10 00 00    	add    $0x1000,%edx
  103787:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10378a:	c7 45 ec 23 00 00 00 	movl   $0x23,-0x14(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(ntask->cpuState, &nstate, sizeof(struct cpu_state));
  103791:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103794:	8b 52 04             	mov    0x4(%edx),%edx
  103797:	89 14 24             	mov    %edx,(%esp)
  10379a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10379e:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1037a5:	00 
  1037a6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  1037a9:	e8 02 08 00 00       	call   103fb0 <memcpy>

    vmm_activate_pagedir(rest_pdir);
  1037ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1037b1:	89 04 24             	mov    %eax,(%esp)
  1037b4:	e8 b7 24 00 00       	call   105c70 <vmm_activate_pagedir>

    return ntask;
  1037b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037bc:	83 c4 68             	add    $0x68,%esp
  1037bf:	5d                   	pop    %ebp
  1037c0:	c3                   	ret    
  1037c1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1037c8:	0f 1f 84 00 00 00 00 
  1037cf:	00 

001037d0 <save_cpu_state>:
}

void save_cpu_state(struct cpu_state* cpu) {
  1037d0:	55                   	push   %ebp
  1037d1:	89 e5                	mov    %esp,%ebp
  1037d3:	83 ec 18             	sub    $0x18,%esp
  1037d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1037d9:	b9 38 00 00 00       	mov    $0x38,%ecx
  1037de:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memcpy(current_task->cpuState, cpu, sizeof(struct cpu_state));
  1037e1:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1037e6:	8b 40 04             	mov    0x4(%eax),%eax
  1037e9:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1037ec:	89 04 24             	mov    %eax,(%esp)
  1037ef:	89 54 24 04          	mov    %edx,0x4(%esp)
  1037f3:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1037fa:	00 
  1037fb:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1037fe:	e8 ad 07 00 00       	call   103fb0 <memcpy>
}
  103803:	83 c4 18             	add    $0x18,%esp
  103806:	5d                   	pop    %ebp
  103807:	c3                   	ret    
  103808:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10380f:	00 

00103810 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu) {
  103810:	55                   	push   %ebp
  103811:	89 e5                	mov    %esp,%ebp
  103813:	83 ec 18             	sub    $0x18,%esp
  103816:	8b 45 08             	mov    0x8(%ebp),%eax
  103819:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (first_task != 0 && schedulingEnabled) {
  10381c:	81 3d 28 94 10 00 00 	cmpl   $0x0,0x109428
  103823:	00 00 00 
  103826:	0f 84 9d 00 00 00    	je     1038c9 <schedule+0xb9>
  10382c:	81 3d 24 94 10 00 00 	cmpl   $0x0,0x109424
  103833:	00 00 00 
  103836:	0f 84 8d 00 00 00    	je     1038c9 <schedule+0xb9>
        if (current_task == 0) {
  10383c:	81 3d 2c 94 10 00 00 	cmpl   $0x0,0x10942c
  103843:	00 00 00 
  103846:	0f 85 2a 00 00 00    	jne    103876 <schedule+0x66>
            current_task = first_task;
  10384c:	a1 28 94 10 00       	mov    0x109428,%eax
  103851:	a3 2c 94 10 00       	mov    %eax,0x10942c
            vmm_activate_pagedir(current_task->phys_pdir);
  103856:	a1 2c 94 10 00       	mov    0x10942c,%eax
  10385b:	8b 40 14             	mov    0x14(%eax),%eax
  10385e:	89 04 24             	mov    %eax,(%esp)
  103861:	e8 0a 24 00 00       	call   105c70 <vmm_activate_pagedir>
            return current_task->cpuState;
  103866:	a1 2c 94 10 00       	mov    0x10942c,%eax
  10386b:	8b 40 04             	mov    0x4(%eax),%eax
  10386e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103871:	e9 59 00 00 00       	jmp    1038cf <schedule+0xbf>
        }

        struct task* next = current_task->next;
  103876:	a1 2c 94 10 00       	mov    0x10942c,%eax
  10387b:	8b 40 08             	mov    0x8(%eax),%eax
  10387e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (next == 0)
  103881:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103888:	0f 85 08 00 00 00    	jne    103896 <schedule+0x86>
            next = first_task;
  10388e:	a1 28 94 10 00       	mov    0x109428,%eax
  103893:	89 45 f4             	mov    %eax,-0xc(%ebp)

        save_cpu_state(cpu);
  103896:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103899:	89 04 24             	mov    %eax,(%esp)
  10389c:	e8 2f ff ff ff       	call   1037d0 <save_cpu_state>

        current_task = next;
  1038a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1038a4:	a3 2c 94 10 00       	mov    %eax,0x10942c
        vmm_activate_pagedir(current_task->phys_pdir);
  1038a9:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1038ae:	8b 40 14             	mov    0x14(%eax),%eax
  1038b1:	89 04 24             	mov    %eax,(%esp)
  1038b4:	e8 b7 23 00 00       	call   105c70 <vmm_activate_pagedir>
        return current_task->cpuState;
  1038b9:	a1 2c 94 10 00       	mov    0x10942c,%eax
  1038be:	8b 40 04             	mov    0x4(%eax),%eax
  1038c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1038c4:	e9 06 00 00 00       	jmp    1038cf <schedule+0xbf>
    }
    return cpu;
  1038c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1038cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1038cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1038d2:	83 c4 18             	add    $0x18,%esp
  1038d5:	5d                   	pop    %ebp
  1038d6:	c3                   	ret    
  1038d7:	66 90                	xchg   %ax,%ax
  1038d9:	66 90                	xchg   %ax,%ax
  1038db:	66 90                	xchg   %ax,%ax
  1038dd:	66 90                	xchg   %ax,%ax
  1038df:	90                   	nop

001038e0 <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
  1038e0:	55                   	push   %ebp
  1038e1:	89 e5                	mov    %esp,%ebp
  1038e3:	83 ec 38             	sub    $0x38,%esp
  1038e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1038e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(size == 0) return 0;
  1038ec:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1038f3:	0f 85 0c 00 00 00    	jne    103905 <malloc+0x25>
  1038f9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103900:	e9 95 01 00 00       	jmp    103a9a <malloc+0x1ba>

    struct memory_node* last = 0;
  103905:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = first_free;
  10390c:	a1 38 94 10 00       	mov    0x109438,%eax
  103911:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  103914:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10391b:	0f 84 27 00 00 00    	je     103948 <malloc+0x68>
        if (cur->size >= size) {
  103921:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103924:	8b 00                	mov    (%eax),%eax
  103926:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103929:	0f 82 05 00 00 00    	jb     103934 <malloc+0x54>
            break;
  10392f:	e9 14 00 00 00       	jmp    103948 <malloc+0x68>
        }
        last = cur;
  103934:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103937:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  10393a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10393d:	8b 40 08             	mov    0x8(%eax),%eax
  103940:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  103943:	e9 cc ff ff ff       	jmp    103914 <malloc+0x34>

    if (cur == 0) {
  103948:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10394f:	0f 85 bc 00 00 00    	jne    103a11 <malloc+0x131>
        uint32_t pgs = size / PAGESIZE;
  103955:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103958:	c1 e8 0c             	shr    $0xc,%eax
  10395b:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if ((size % PAGESIZE) != 0)
  10395e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103961:	25 ff 0f 00 00       	and    $0xfff,%eax
  103966:	3d 00 00 00 00       	cmp    $0x0,%eax
  10396b:	0f 84 0b 00 00 00    	je     10397c <malloc+0x9c>
            pgs++;
  103971:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103974:	05 01 00 00 00       	add    $0x1,%eax
  103979:	89 45 ec             	mov    %eax,-0x14(%ebp)

        void* addr = vmm_alloc_cont(pgs);
  10397c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10397f:	89 04 24             	mov    %eax,(%esp)
  103982:	e8 99 21 00 00       	call   105b20 <vmm_alloc_cont>
  103987:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
  10398a:	e8 81 04 00 00       	call   103e10 <pop_unused_node>
  10398f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
  103992:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103995:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103998:	89 41 04             	mov    %eax,0x4(%ecx)
        fill->size = (uint32_t) size;
  10399b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10399e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1039a1:	89 01                	mov    %eax,(%ecx)

        if (pgs * PAGESIZE > size) {
  1039a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1039a6:	c1 e0 0c             	shl    $0xc,%eax
  1039a9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1039ac:	0f 86 3c 00 00 00    	jbe    1039ee <malloc+0x10e>
            struct memory_node* free = pop_unused_node();
  1039b2:	e8 59 04 00 00       	call   103e10 <pop_unused_node>
  1039b7:	8d 0d 38 94 10 00    	lea    0x109438,%ecx
  1039bd:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
  1039c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1039c3:	8b 40 04             	mov    0x4(%eax),%eax
  1039c6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1039c9:	03 02                	add    (%edx),%eax
  1039cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1039ce:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = pgs * PAGESIZE - size;
  1039d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1039d4:	c1 e0 0c             	shl    $0xc,%eax
  1039d7:	2b 45 f8             	sub    -0x8(%ebp),%eax
  1039da:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1039dd:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  1039df:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1039e2:	89 0c 24             	mov    %ecx,(%esp)
  1039e5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1039e9:	e8 c2 00 00 00       	call   103ab0 <append_to_list>
  1039ee:	8d 05 34 94 10 00    	lea    0x109434,%eax
        }

        append_to_list(&first_used, fill);
  1039f4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1039f7:	89 04 24             	mov    %eax,(%esp)
  1039fa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1039fe:	e8 ad 00 00 00       	call   103ab0 <append_to_list>

        return (void*) fill->address;
  103a03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103a06:	8b 40 04             	mov    0x4(%eax),%eax
  103a09:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103a0c:	e9 89 00 00 00       	jmp    103a9a <malloc+0x1ba>
  103a11:	8d 05 38 94 10 00    	lea    0x109438,%eax
    } else {
        uint32_t freesize = cur->size - size;
  103a17:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103a1a:	8b 09                	mov    (%ecx),%ecx
  103a1c:	2b 4d f8             	sub    -0x8(%ebp),%ecx
  103a1f:	89 4d dc             	mov    %ecx,-0x24(%ebp)

        cur->size = size;
  103a22:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103a25:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103a28:	89 0a                	mov    %ecx,(%edx)

        remove_from_list(&first_free, cur);
  103a2a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103a2d:	89 04 24             	mov    %eax,(%esp)
  103a30:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103a34:	e8 a7 00 00 00       	call   103ae0 <remove_from_list>
  103a39:	8d 05 34 94 10 00    	lea    0x109434,%eax
        append_to_list(&first_used, cur);
  103a3f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103a42:	89 04 24             	mov    %eax,(%esp)
  103a45:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103a49:	e8 62 00 00 00       	call   103ab0 <append_to_list>

        if (freesize > 0) {
  103a4e:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  103a55:	0f 86 36 00 00 00    	jbe    103a91 <malloc+0x1b1>
            struct memory_node* free = pop_unused_node();
  103a5b:	e8 b0 03 00 00       	call   103e10 <pop_unused_node>
  103a60:	8d 0d 38 94 10 00    	lea    0x109438,%ecx
  103a66:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
  103a69:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a6c:	8b 40 04             	mov    0x4(%eax),%eax
  103a6f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103a72:	03 02                	add    (%edx),%eax
  103a74:	8b 55 d8             	mov    -0x28(%ebp),%edx
  103a77:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = freesize;
  103a7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103a7d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  103a80:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  103a82:	8b 45 d8             	mov    -0x28(%ebp),%eax
  103a85:	89 0c 24             	mov    %ecx,(%esp)
  103a88:	89 44 24 04          	mov    %eax,0x4(%esp)
  103a8c:	e8 1f 00 00 00       	call   103ab0 <append_to_list>
        }

        return (void*) cur->address;
  103a91:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a94:	8b 40 04             	mov    0x4(%eax),%eax
  103a97:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  103a9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a9d:	83 c4 38             	add    $0x38,%esp
  103aa0:	5d                   	pop    %ebp
  103aa1:	c3                   	ret    
  103aa2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103aa9:	1f 84 00 00 00 00 00 

00103ab0 <append_to_list>:
        cur = cur->next;
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
  103ab0:	55                   	push   %ebp
  103ab1:	89 e5                	mov    %esp,%ebp
  103ab3:	83 ec 08             	sub    $0x8,%esp
  103ab6:	8b 45 0c             	mov    0xc(%ebp),%eax
  103ab9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103abc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103abf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    element->next = *root;
  103ac2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103ac5:	8b 00                	mov    (%eax),%eax
  103ac7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103aca:	89 41 08             	mov    %eax,0x8(%ecx)
    *root = element;
  103acd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ad0:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103ad3:	89 01                	mov    %eax,(%ecx)
}
  103ad5:	83 c4 08             	add    $0x8,%esp
  103ad8:	5d                   	pop    %ebp
  103ad9:	c3                   	ret    
  103ada:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103ae0 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
  103ae0:	55                   	push   %ebp
  103ae1:	89 e5                	mov    %esp,%ebp
  103ae3:	83 ec 10             	sub    $0x10,%esp
  103ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
  103ae9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103aec:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103aef:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct memory_node* last = 0;
  103af2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = *root;
  103af9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103afc:	8b 00                	mov    (%eax),%eax
  103afe:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  103b01:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103b08:	0f 84 4e 00 00 00    	je     103b5c <remove_from_list+0x7c>
        if (cur == element) {
  103b0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103b11:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103b14:	0f 85 2e 00 00 00    	jne    103b48 <remove_from_list+0x68>
            if (last == 0) {
  103b1a:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103b21:	0f 85 10 00 00 00    	jne    103b37 <remove_from_list+0x57>
                *root = cur->next;
  103b27:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103b2a:	8b 40 08             	mov    0x8(%eax),%eax
  103b2d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103b30:	89 01                	mov    %eax,(%ecx)
                return;
  103b32:	e9 25 00 00 00       	jmp    103b5c <remove_from_list+0x7c>
            } else {
                last->next = cur->next;
  103b37:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103b3a:	8b 40 08             	mov    0x8(%eax),%eax
  103b3d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103b40:	89 41 08             	mov    %eax,0x8(%ecx)
                return;
  103b43:	e9 14 00 00 00       	jmp    103b5c <remove_from_list+0x7c>
            }
        }
        last = cur;
  103b48:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  103b4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103b51:	8b 40 08             	mov    0x8(%eax),%eax
  103b54:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  103b57:	e9 a5 ff ff ff       	jmp    103b01 <remove_from_list+0x21>
}
  103b5c:	83 c4 10             	add    $0x10,%esp
  103b5f:	5d                   	pop    %ebp
  103b60:	c3                   	ret    
  103b61:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103b68:	0f 1f 84 00 00 00 00 
  103b6f:	00 

00103b70 <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
  103b70:	55                   	push   %ebp
  103b71:	89 e5                	mov    %esp,%ebp
  103b73:	83 ec 28             	sub    $0x28,%esp
  103b76:	8b 45 0c             	mov    0xc(%ebp),%eax
  103b79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103b7c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103b7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t gsize = num * size;
  103b82:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103b85:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  103b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
  103b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b8f:	89 04 24             	mov    %eax,(%esp)
  103b92:	e8 49 fd ff ff       	call   1038e0 <malloc>
  103b97:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
  103b9a:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103ba1:	0f 84 22 00 00 00    	je     103bc9 <calloc+0x59>
  103ba7:	b8 00 00 00 00       	mov    $0x0,%eax
        memset(p, 0, gsize);
  103bac:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103baf:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103bb2:	89 0c 24             	mov    %ecx,(%esp)
  103bb5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103bbc:	00 
  103bbd:	89 54 24 08          	mov    %edx,0x8(%esp)
  103bc1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103bc4:	e8 87 03 00 00       	call   103f50 <memset>
    }

    return p;
  103bc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103bcc:	83 c4 28             	add    $0x28,%esp
  103bcf:	5d                   	pop    %ebp
  103bd0:	c3                   	ret    
  103bd1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103bd8:	0f 1f 84 00 00 00 00 
  103bdf:	00 

00103be0 <realloc>:
}

void* realloc(void* ptr, size_t size) {
  103be0:	55                   	push   %ebp
  103be1:	89 e5                	mov    %esp,%ebp
  103be3:	83 ec 28             	sub    $0x28,%esp
  103be6:	8b 45 0c             	mov    0xc(%ebp),%eax
  103be9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103bec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103bef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct memory_node* last = 0;
  103bf2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
  103bf9:	a1 34 94 10 00       	mov    0x109434,%eax
  103bfe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (cur != 0) {
  103c01:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  103c08:	0f 84 8e 00 00 00    	je     103c9c <realloc+0xbc>
        if (cur->address == (uint32_t) ptr) {
  103c0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103c11:	8b 40 04             	mov    0x4(%eax),%eax
  103c14:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103c17:	39 c8                	cmp    %ecx,%eax
  103c19:	0f 85 69 00 00 00    	jne    103c88 <realloc+0xa8>
            if (size == 0) {
  103c1f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103c26:	0f 85 17 00 00 00    	jne    103c43 <realloc+0x63>
                free(ptr);
  103c2c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103c2f:	89 04 24             	mov    %eax,(%esp)
  103c32:	e8 79 00 00 00       	call   103cb0 <free>
                return 0;
  103c37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103c3e:	e9 60 00 00 00       	jmp    103ca3 <realloc+0xc3>
            } else {
                void* new = malloc(size);
  103c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c46:	89 04 24             	mov    %eax,(%esp)
  103c49:	e8 92 fc ff ff       	call   1038e0 <malloc>
  103c4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
  103c51:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103c54:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103c57:	8b 49 04             	mov    0x4(%ecx),%ecx
  103c5a:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103c5d:	8b 12                	mov    (%edx),%edx
  103c5f:	89 04 24             	mov    %eax,(%esp)
  103c62:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103c66:	89 54 24 08          	mov    %edx,0x8(%esp)
  103c6a:	e8 41 03 00 00       	call   103fb0 <memcpy>
                free((void*) cur->address);
  103c6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103c72:	8b 40 04             	mov    0x4(%eax),%eax
  103c75:	89 04 24             	mov    %eax,(%esp)
  103c78:	e8 33 00 00 00       	call   103cb0 <free>

                return new;
  103c7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103c80:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103c83:	e9 1b 00 00 00       	jmp    103ca3 <realloc+0xc3>
            }
        }
        last = cur;
  103c88:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103c8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
  103c8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103c91:	8b 40 08             	mov    0x8(%eax),%eax
  103c94:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
  103c97:	e9 65 ff ff ff       	jmp    103c01 <realloc+0x21>
    return 0;
  103c9c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103ca3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103ca6:	83 c4 28             	add    $0x28,%esp
  103ca9:	5d                   	pop    %ebp
  103caa:	c3                   	ret    
  103cab:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103cb0 <free>:

void free(void* ptr) {
  103cb0:	55                   	push   %ebp
  103cb1:	89 e5                	mov    %esp,%ebp
  103cb3:	83 ec 18             	sub    $0x18,%esp
  103cb6:	8b 45 08             	mov    0x8(%ebp),%eax
  103cb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* last = 0;
  103cbc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
  103cc3:	a1 34 94 10 00       	mov    0x109434,%eax
  103cc8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  103ccb:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103cd2:	0f 84 35 00 00 00    	je     103d0d <free+0x5d>
        if (cur->address == (uint32_t) ptr) {
  103cd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cdb:	8b 40 04             	mov    0x4(%eax),%eax
  103cde:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103ce1:	39 c8                	cmp    %ecx,%eax
  103ce3:	0f 85 10 00 00 00    	jne    103cf9 <free+0x49>
            merge_into_frees(cur);
  103ce9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cec:	89 04 24             	mov    %eax,(%esp)
  103cef:	e8 2c 00 00 00       	call   103d20 <merge_into_frees>
            break;
  103cf4:	e9 14 00 00 00       	jmp    103d0d <free+0x5d>
        }
        last = cur;
  103cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cfc:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
  103cff:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103d02:	8b 40 08             	mov    0x8(%eax),%eax
  103d05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  103d08:	e9 be ff ff ff       	jmp    103ccb <free+0x1b>
}
  103d0d:	83 c4 18             	add    $0x18,%esp
  103d10:	5d                   	pop    %ebp
  103d11:	c3                   	ret    
  103d12:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103d19:	1f 84 00 00 00 00 00 

00103d20 <merge_into_frees>:
    }

    return ret;
}

static void merge_into_frees(struct memory_node* tf) {
  103d20:	55                   	push   %ebp
  103d21:	89 e5                	mov    %esp,%ebp
  103d23:	56                   	push   %esi
  103d24:	83 ec 14             	sub    $0x14,%esp
  103d27:	8b 45 08             	mov    0x8(%ebp),%eax
  103d2a:	8d 0d 34 94 10 00    	lea    0x109434,%ecx
  103d30:	89 45 f8             	mov    %eax,-0x8(%ebp)
    remove_from_list(&first_used, tf);
  103d33:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d36:	89 0c 24             	mov    %ecx,(%esp)
  103d39:	89 44 24 04          	mov    %eax,0x4(%esp)
  103d3d:	e8 9e fd ff ff       	call   103ae0 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
  103d42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    cur = first_free;
  103d49:	a1 38 94 10 00       	mov    0x109438,%eax
  103d4e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  103d51:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103d58:	0f 84 92 00 00 00    	je     103df0 <merge_into_frees+0xd0>
        if (cur->address + cur->size == tf->address) {
  103d5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103d61:	8b 40 04             	mov    0x4(%eax),%eax
  103d64:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103d67:	03 01                	add    (%ecx),%eax
  103d69:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103d6c:	3b 41 04             	cmp    0x4(%ecx),%eax
  103d6f:	0f 85 26 00 00 00    	jne    103d9b <merge_into_frees+0x7b>
  103d75:	8d 05 38 94 10 00    	lea    0x109438,%eax
            tf->address = cur->address;
  103d7b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103d7e:	8b 49 04             	mov    0x4(%ecx),%ecx
  103d81:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103d84:	89 4a 04             	mov    %ecx,0x4(%edx)
            remove_from_list(&first_free, cur);
  103d87:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103d8a:	89 04 24             	mov    %eax,(%esp)
  103d8d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103d91:	e8 4a fd ff ff       	call   103ae0 <remove_from_list>
            goto editedList;
  103d96:	e9 a7 ff ff ff       	jmp    103d42 <merge_into_frees+0x22>
        }

        if (cur->address == tf->address + tf->size) {
  103d9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103d9e:	8b 40 04             	mov    0x4(%eax),%eax
  103da1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103da4:	8b 49 04             	mov    0x4(%ecx),%ecx
  103da7:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103daa:	03 0a                	add    (%edx),%ecx
  103dac:	39 c8                	cmp    %ecx,%eax
  103dae:	0f 85 28 00 00 00    	jne    103ddc <merge_into_frees+0xbc>
  103db4:	8d 05 38 94 10 00    	lea    0x109438,%eax
            tf->size += cur->size;
  103dba:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103dbd:	8b 09                	mov    (%ecx),%ecx
  103dbf:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103dc2:	8b 32                	mov    (%edx),%esi
  103dc4:	01 ce                	add    %ecx,%esi
  103dc6:	89 32                	mov    %esi,(%edx)
            remove_from_list(&first_free, cur);
  103dc8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103dcb:	89 04 24             	mov    %eax,(%esp)
  103dce:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103dd2:	e8 09 fd ff ff       	call   103ae0 <remove_from_list>
            goto editedList;
  103dd7:	e9 66 ff ff ff       	jmp    103d42 <merge_into_frees+0x22>
        }

        last = cur;
  103ddc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103ddf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  103de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103de5:	8b 40 08             	mov    0x8(%eax),%eax
  103de8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  103deb:	e9 61 ff ff ff       	jmp    103d51 <merge_into_frees+0x31>
  103df0:	8d 05 38 94 10 00    	lea    0x109438,%eax

    append_to_list(&first_free, tf);
  103df6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103df9:	89 04 24             	mov    %eax,(%esp)
  103dfc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103e00:	e8 ab fc ff ff       	call   103ab0 <append_to_list>
}
  103e05:	83 c4 14             	add    $0x14,%esp
  103e08:	5e                   	pop    %esi
  103e09:	5d                   	pop    %ebp
  103e0a:	c3                   	ret    
  103e0b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103e10 <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
  103e10:	55                   	push   %ebp
  103e11:	89 e5                	mov    %esp,%ebp
  103e13:	83 ec 08             	sub    $0x8,%esp
  103e16:	8d 05 30 94 10 00    	lea    0x109430,%eax
    struct memory_node* ret = pop_from_list(&first_unused);
  103e1c:	89 04 24             	mov    %eax,(%esp)
  103e1f:	e8 3c 00 00 00       	call   103e60 <pop_from_list>
  103e24:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (ret == 0) {
  103e27:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  103e2e:	0f 85 1b 00 00 00    	jne    103e4f <pop_unused_node+0x3f>
        allocate_unused_nodes();
  103e34:	e8 77 00 00 00       	call   103eb0 <allocate_unused_nodes>
  103e39:	8d 05 30 94 10 00    	lea    0x109430,%eax
        ret = pop_from_list(&first_unused);
  103e3f:	89 04 24             	mov    %eax,(%esp)
  103e42:	e8 19 00 00 00       	call   103e60 <pop_from_list>
  103e47:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  103e4a:	e9 d8 ff ff ff       	jmp    103e27 <pop_unused_node+0x17>

    return ret;
  103e4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103e52:	83 c4 08             	add    $0x8,%esp
  103e55:	5d                   	pop    %ebp
  103e56:	c3                   	ret    
  103e57:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  103e5e:	00 00 

00103e60 <pop_from_list>:
        struct memory_node* element) {
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
  103e60:	55                   	push   %ebp
  103e61:	89 e5                	mov    %esp,%ebp
  103e63:	83 ec 18             	sub    $0x18,%esp
  103e66:	8b 45 08             	mov    0x8(%ebp),%eax
  103e69:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (*root == 0)
  103e6c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103e6f:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  103e75:	0f 85 0c 00 00 00    	jne    103e87 <pop_from_list+0x27>
        return 0;
  103e7b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103e82:	e9 20 00 00 00       	jmp    103ea7 <pop_from_list+0x47>
    struct memory_node* pop = *root;
  103e87:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103e8a:	8b 00                	mov    (%eax),%eax
  103e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    remove_from_list(root, pop);
  103e8f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103e92:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103e95:	89 04 24             	mov    %eax,(%esp)
  103e98:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103e9c:	e8 3f fc ff ff       	call   103ae0 <remove_from_list>
    return pop;
  103ea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ea4:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  103ea7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103eaa:	83 c4 18             	add    $0x18,%esp
  103ead:	5d                   	pop    %ebp
  103eae:	c3                   	ret    
  103eaf:	90                   	nop

00103eb0 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  103eb0:	55                   	push   %ebp
  103eb1:	89 e5                	mov    %esp,%ebp
  103eb3:	83 ec 28             	sub    $0x28,%esp
  103eb6:	b8 01 00 00 00       	mov    $0x1,%eax
    struct memory_node* new_nodes = vmm_alloc_cont(1);
  103ebb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  103ec2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103ec5:	e8 56 1c 00 00       	call   105b20 <vmm_alloc_cont>
  103eca:	b9 00 00 00 00       	mov    $0x0,%ecx
  103ecf:	ba 00 10 00 00       	mov    $0x1000,%edx
  103ed4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memset(new_nodes, 0, PAGESIZE);
  103ed7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103eda:	89 04 24             	mov    %eax,(%esp)
  103edd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103ee4:	00 
  103ee5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  103eec:	00 
  103eed:	89 55 f0             	mov    %edx,-0x10(%ebp)
  103ef0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  103ef3:	e8 58 00 00 00       	call   103f50 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  103ef8:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  103eff:	81 7d f8 55 01 00 00 	cmpl   $0x155,-0x8(%ebp)
  103f06:	0f 83 30 00 00 00    	jae    103f3c <allocate_unused_nodes+0x8c>
  103f0c:	8d 05 30 94 10 00    	lea    0x109430,%eax
        append_to_list(&first_unused, &(new_nodes[i]));
  103f12:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103f15:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103f18:	69 c9 0c 00 00 00    	imul   $0xc,%ecx,%ecx
  103f1e:	01 ca                	add    %ecx,%edx
  103f20:	89 04 24             	mov    %eax,(%esp)
  103f23:	89 54 24 04          	mov    %edx,0x4(%esp)
  103f27:	e8 84 fb ff ff       	call   103ab0 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  103f2c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103f2f:	05 01 00 00 00       	add    $0x1,%eax
  103f34:	89 45 f8             	mov    %eax,-0x8(%ebp)
  103f37:	e9 c3 ff ff ff       	jmp    103eff <allocate_unused_nodes+0x4f>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
  103f3c:	83 c4 28             	add    $0x28,%esp
  103f3f:	5d                   	pop    %ebp
  103f40:	c3                   	ret    
  103f41:	66 90                	xchg   %ax,%ax
  103f43:	66 90                	xchg   %ax,%ax
  103f45:	66 90                	xchg   %ax,%ax
  103f47:	66 90                	xchg   %ax,%ax
  103f49:	66 90                	xchg   %ax,%ax
  103f4b:	66 90                	xchg   %ax,%ax
  103f4d:	66 90                	xchg   %ax,%ax
  103f4f:	90                   	nop

00103f50 <memset>:
#include "vmm.h"
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
  103f50:	55                   	push   %ebp
  103f51:	89 e5                	mov    %esp,%ebp
  103f53:	83 ec 10             	sub    $0x10,%esp
  103f56:	8b 45 10             	mov    0x10(%ebp),%eax
  103f59:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103f5c:	8b 55 08             	mov    0x8(%ebp),%edx
  103f5f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  103f62:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103f65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  103f68:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103f6b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  103f6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f71:	89 c1                	mov    %eax,%ecx
  103f73:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103f79:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103f7c:	3d 00 00 00 00       	cmp    $0x0,%eax
  103f81:	0f 84 1a 00 00 00    	je     103fa1 <memset+0x51>
        *p++ = c;
  103f87:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103f8a:	88 c1                	mov    %al,%cl
  103f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103f8f:	89 c2                	mov    %eax,%edx
  103f91:	81 c2 01 00 00 00    	add    $0x1,%edx
  103f97:	89 55 f0             	mov    %edx,-0x10(%ebp)
  103f9a:	88 08                	mov    %cl,(%eax)
    }
  103f9c:	e9 cd ff ff ff       	jmp    103f6e <memset+0x1e>

    return buf;
  103fa1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103fa4:	83 c4 10             	add    $0x10,%esp
  103fa7:	5d                   	pop    %ebp
  103fa8:	c3                   	ret    
  103fa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00103fb0 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n) {
  103fb0:	55                   	push   %ebp
  103fb1:	89 e5                	mov    %esp,%ebp
  103fb3:	83 ec 14             	sub    $0x14,%esp
  103fb6:	8b 45 10             	mov    0x10(%ebp),%eax
  103fb9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103fbc:	8b 55 08             	mov    0x8(%ebp),%edx
  103fbf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  103fc2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103fc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  103fc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103fcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  103fce:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103fd1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  103fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103fd7:	89 c1                	mov    %eax,%ecx
  103fd9:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103fdf:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103fe2:	3d 00 00 00 00       	cmp    $0x0,%eax
  103fe7:	0f 84 25 00 00 00    	je     104012 <memcpy+0x62>
        *(d++) = *(s++);
  103fed:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103ff0:	89 c1                	mov    %eax,%ecx
  103ff2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  103ff8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  103ffb:	8a 10                	mov    (%eax),%dl
  103ffd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104000:	89 c1                	mov    %eax,%ecx
  104002:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104008:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10400b:	88 10                	mov    %dl,(%eax)
    }
  10400d:	e9 c2 ff ff ff       	jmp    103fd4 <memcpy+0x24>

    return dest;
  104012:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104015:	83 c4 14             	add    $0x14,%esp
  104018:	5d                   	pop    %ebp
  104019:	c3                   	ret    
  10401a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104020 <memcmp>:
}

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
  104020:	55                   	push   %ebp
  104021:	89 e5                	mov    %esp,%ebp
  104023:	83 ec 1c             	sub    $0x1c,%esp
  104026:	8b 45 10             	mov    0x10(%ebp),%eax
  104029:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10402c:	8b 55 08             	mov    0x8(%ebp),%edx
  10402f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  104032:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104035:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (ptr1 == 0)
  104038:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10403f:	0f 85 0c 00 00 00    	jne    104051 <memcmp+0x31>
        return -1;
  104045:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  10404c:	e9 a7 00 00 00       	jmp    1040f8 <memcmp+0xd8>
    if (ptr2 == 0)
  104051:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104058:	0f 85 0c 00 00 00    	jne    10406a <memcmp+0x4a>
        return 1;
  10405e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  104065:	e9 8e 00 00 00       	jmp    1040f8 <memcmp+0xd8>
    if (num == 0)
  10406a:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104071:	0f 85 0c 00 00 00    	jne    104083 <memcmp+0x63>
        return 0;
  104077:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10407e:	e9 75 00 00 00       	jmp    1040f8 <memcmp+0xd8>

    const uint8_t* pa = ptr1;
  104083:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104086:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const uint8_t* pb = ptr2;
  104089:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10408c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (uint32_t i = 0; i < num; i++) {
  10408f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  104096:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104099:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10409c:	0f 83 4f 00 00 00    	jae    1040f1 <memcmp+0xd1>
        if (pa[i] != pb[i]) {
  1040a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1040a5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1040a8:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  1040ac:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1040af:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1040b2:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  1040b6:	39 c8                	cmp    %ecx,%eax
  1040b8:	0f 84 1e 00 00 00    	je     1040dc <memcmp+0xbc>
            return pa[i] - pb[i];
  1040be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1040c1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1040c4:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  1040c8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1040cb:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1040ce:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  1040d2:	29 c8                	sub    %ecx,%eax
  1040d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1040d7:	e9 1c 00 00 00       	jmp    1040f8 <memcmp+0xd8>
        }
    }
  1040dc:	e9 00 00 00 00       	jmp    1040e1 <memcmp+0xc1>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
  1040e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1040e4:	05 01 00 00 00       	add    $0x1,%eax
  1040e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1040ec:	e9 a5 ff ff ff       	jmp    104096 <memcmp+0x76>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
  1040f1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1040f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1040fb:	83 c4 1c             	add    $0x1c,%esp
  1040fe:	5d                   	pop    %ebp
  1040ff:	c3                   	ret    

00104100 <strcmp>:

int strcmp(const char* str1, const char* str2) {
  104100:	55                   	push   %ebp
  104101:	89 e5                	mov    %esp,%ebp
  104103:	56                   	push   %esi
  104104:	83 ec 24             	sub    $0x24,%esp
  104107:	8b 45 0c             	mov    0xc(%ebp),%eax
  10410a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10410d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104110:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l1 = strlen(str1);
  104113:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104116:	89 e1                	mov    %esp,%ecx
  104118:	89 01                	mov    %eax,(%ecx)
  10411a:	e8 61 00 00 00       	call   104180 <strlen>
  10411f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int l2 = strlen(str2);
  104122:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104125:	89 e1                	mov    %esp,%ecx
  104127:	89 01                	mov    %eax,(%ecx)
  104129:	e8 52 00 00 00       	call   104180 <strlen>
  10412e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    l1 = l1 < l2 ? l1 : l2;
  104131:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104134:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104137:	0f 8d 0b 00 00 00    	jge    104148 <strcmp+0x48>
  10413d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104140:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104143:	e9 06 00 00 00       	jmp    10414e <strcmp+0x4e>
  104148:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10414b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10414e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104151:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return memcmp(str1, str2, l1 * sizeof(char));
  104154:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104157:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10415a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10415d:	c1 e2 00             	shl    $0x0,%edx
  104160:	89 e6                	mov    %esp,%esi
  104162:	89 56 08             	mov    %edx,0x8(%esi)
  104165:	89 4e 04             	mov    %ecx,0x4(%esi)
  104168:	89 06                	mov    %eax,(%esi)
  10416a:	e8 b1 fe ff ff       	call   104020 <memcmp>
  10416f:	83 c4 24             	add    $0x24,%esp
  104172:	5e                   	pop    %esi
  104173:	5d                   	pop    %ebp
  104174:	c3                   	ret    
  104175:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10417c:	00 00 00 00 

00104180 <strlen>:
}

unsigned int strlen(const char* str) {
  104180:	55                   	push   %ebp
  104181:	89 e5                	mov    %esp,%ebp
  104183:	83 ec 0c             	sub    $0xc,%esp
  104186:	8b 45 08             	mov    0x8(%ebp),%eax
  104189:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (str == 0)
  10418c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104193:	0f 85 0c 00 00 00    	jne    1041a5 <strlen+0x25>
        return 0;
  104199:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1041a0:	e9 37 00 00 00       	jmp    1041dc <strlen+0x5c>
    int i;
    for (i = 0; str[i] != '\0'; i++)
  1041a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1041ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041af:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1041b2:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  1041b6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1041bb:	0f 84 15 00 00 00    	je     1041d6 <strlen+0x56>
  1041c1:	e9 00 00 00 00       	jmp    1041c6 <strlen+0x46>
  1041c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041c9:	05 01 00 00 00       	add    $0x1,%eax
  1041ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1041d1:	e9 d6 ff ff ff       	jmp    1041ac <strlen+0x2c>
        ;
    return i;
  1041d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1041dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1041df:	83 c4 0c             	add    $0xc,%esp
  1041e2:	5d                   	pop    %ebp
  1041e3:	c3                   	ret    
  1041e4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1041eb:	00 00 00 00 00 

001041f0 <strcpy>:

char* strcpy(char* dest, const char* src) {
  1041f0:	55                   	push   %ebp
  1041f1:	89 e5                	mov    %esp,%ebp
  1041f3:	56                   	push   %esi
  1041f4:	83 ec 24             	sub    $0x24,%esp
  1041f7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1041fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1041fd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104200:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
  104203:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104206:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104209:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10420c:	89 e6                	mov    %esp,%esi
  10420e:	89 16                	mov    %edx,(%esi)
  104210:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104213:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104216:	e8 65 ff ff ff       	call   104180 <strlen>
  10421b:	c1 e0 00             	shl    $0x0,%eax
  10421e:	05 01 00 00 00       	add    $0x1,%eax
  104223:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104226:	89 0c 24             	mov    %ecx,(%esp)
  104229:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10422c:	89 54 24 04          	mov    %edx,0x4(%esp)
  104230:	89 44 24 08          	mov    %eax,0x8(%esp)
  104234:	e8 77 fd ff ff       	call   103fb0 <memcpy>
    return dest;
  104239:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10423c:	83 c4 24             	add    $0x24,%esp
  10423f:	5e                   	pop    %esi
  104240:	5d                   	pop    %ebp
  104241:	c3                   	ret    
  104242:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104249:	1f 84 00 00 00 00 00 

00104250 <strclone>:
}

char* strclone(char* str) {
  104250:	55                   	push   %ebp
  104251:	89 e5                	mov    %esp,%ebp
  104253:	83 ec 18             	sub    $0x18,%esp
  104256:	8b 45 08             	mov    0x8(%ebp),%eax
  104259:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
  10425c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10425f:	89 e1                	mov    %esp,%ecx
  104261:	89 01                	mov    %eax,(%ecx)
  104263:	e8 18 ff ff ff       	call   104180 <strlen>
  104268:	c1 e0 00             	shl    $0x0,%eax
  10426b:	05 01 00 00 00       	add    $0x1,%eax
  104270:	89 04 24             	mov    %eax,(%esp)
  104273:	e8 68 f6 ff ff       	call   1038e0 <malloc>
  104278:	89 45 f8             	mov    %eax,-0x8(%ebp)
    strcpy(ret, str);
  10427b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10427e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104281:	89 e2                	mov    %esp,%edx
  104283:	89 4a 04             	mov    %ecx,0x4(%edx)
  104286:	89 02                	mov    %eax,(%edx)
  104288:	e8 63 ff ff ff       	call   1041f0 <strcpy>

    return ret;
  10428d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104290:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104293:	89 c8                	mov    %ecx,%eax
  104295:	83 c4 18             	add    $0x18,%esp
  104298:	5d                   	pop    %ebp
  104299:	c3                   	ret    
  10429a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001042a0 <strtok>:
}

char* sp = NULL; /* the start position of the string */

char* strtok(char* str, const char* delimiters) {
  1042a0:	55                   	push   %ebp
  1042a1:	89 e5                	mov    %esp,%ebp
  1042a3:	83 ec 18             	sub    $0x18,%esp
  1042a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1042a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1042ac:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1042af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(str != 0) {
  1042b2:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1042b9:	0f 84 22 00 00 00    	je     1042e1 <strtok+0x41>
        return strtoknc(strclone(str), delimiters);
  1042bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1042c2:	89 04 24             	mov    %eax,(%esp)
  1042c5:	e8 86 ff ff ff       	call   104250 <strclone>
  1042ca:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1042cd:	89 04 24             	mov    %eax,(%esp)
  1042d0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1042d4:	e8 37 00 00 00       	call   104310 <strtoknc>
  1042d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1042dc:	e9 1e 00 00 00       	jmp    1042ff <strtok+0x5f>
  1042e1:	b8 00 00 00 00       	mov    $0x0,%eax
    }
    return strtoknc(0, delimiters);
  1042e6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1042e9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1042f0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1042f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1042f7:	e8 14 00 00 00       	call   104310 <strtoknc>
  1042fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1042ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104302:	83 c4 18             	add    $0x18,%esp
  104305:	5d                   	pop    %ebp
  104306:	c3                   	ret    
  104307:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10430e:	00 00 

00104310 <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
  104310:	55                   	push   %ebp
  104311:	89 e5                	mov    %esp,%ebp
  104313:	83 ec 28             	sub    $0x28,%esp
  104316:	8b 45 0c             	mov    0xc(%ebp),%eax
  104319:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10431c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10431f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i = 0;
  104322:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int len = strlen(delimiters);
  104329:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10432c:	89 e1                	mov    %esp,%ecx
  10432e:	89 01                	mov    %eax,(%ecx)
  104330:	e8 4b fe ff ff       	call   104180 <strlen>
  104335:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* check in the delimiters */
    if (len == 0)
  104338:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  10433f:	0f 85 0c 00 00 00    	jne    104351 <strtoknc+0x41>
        return 0;
  104345:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10434c:	e9 80 01 00 00       	jmp    1044d1 <strtoknc+0x1c1>

    /* if the original string has nothing left */
    if (!str && !sp)
  104351:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104358:	0f 85 1c 00 00 00    	jne    10437a <strtoknc+0x6a>
  10435e:	81 3d 3c 94 10 00 00 	cmpl   $0x0,0x10943c
  104365:	00 00 00 
  104368:	0f 85 0c 00 00 00    	jne    10437a <strtoknc+0x6a>
        return 0;
  10436e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104375:	e9 57 01 00 00       	jmp    1044d1 <strtoknc+0x1c1>

    /* initialize the sp during the first call */
    if (str && !sp)
  10437a:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104381:	0f 84 18 00 00 00    	je     10439f <strtoknc+0x8f>
  104387:	81 3d 3c 94 10 00 00 	cmpl   $0x0,0x10943c
  10438e:	00 00 00 
  104391:	0f 85 08 00 00 00    	jne    10439f <strtoknc+0x8f>
        sp = str;
  104397:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10439a:	a3 3c 94 10 00       	mov    %eax,0x10943c

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
  10439f:	a1 3c 94 10 00       	mov    0x10943c,%eax
  1043a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
  1043a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1043ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043b1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1043b4:	0f 8d 3d 00 00 00    	jge    1043f7 <strtoknc+0xe7>
            if (*p_start == delimiters[i]) {
  1043ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1043bd:	0f be 00             	movsbl (%eax),%eax
  1043c0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1043c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1043c6:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  1043ca:	39 c8                	cmp    %ecx,%eax
  1043cc:	0f 85 10 00 00 00    	jne    1043e2 <strtoknc+0xd2>
                p_start++;
  1043d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1043d5:	05 01 00 00 00       	add    $0x1,%eax
  1043da:	89 45 e8             	mov    %eax,-0x18(%ebp)
                break;
  1043dd:	e9 15 00 00 00       	jmp    1043f7 <strtoknc+0xe7>
            }
        }
  1043e2:	e9 00 00 00 00       	jmp    1043e7 <strtoknc+0xd7>
        sp = str;

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
  1043e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043ea:	05 01 00 00 00       	add    $0x1,%eax
  1043ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1043f2:	e9 b7 ff ff ff       	jmp    1043ae <strtoknc+0x9e>
                p_start++;
                break;
            }
        }

        if (i == len) {
  1043f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043fa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1043fd:	0f 85 0d 00 00 00    	jne    104410 <strtoknc+0x100>
            sp = p_start;
  104403:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104406:	a3 3c 94 10 00       	mov    %eax,0x10943c
            break;
  10440b:	e9 05 00 00 00       	jmp    104415 <strtoknc+0x105>
        }
    }
  104410:	e9 92 ff ff ff       	jmp    1043a7 <strtoknc+0x97>

    /* return NULL if nothing left */
    if (*sp == '\0') {
  104415:	a1 3c 94 10 00       	mov    0x10943c,%eax
  10441a:	0f be 00             	movsbl (%eax),%eax
  10441d:	3d 00 00 00 00       	cmp    $0x0,%eax
  104422:	0f 85 17 00 00 00    	jne    10443f <strtoknc+0x12f>
        sp = NULL;
  104428:	c7 05 3c 94 10 00 00 	movl   $0x0,0x10943c
  10442f:	00 00 00 
        return sp;
  104432:	a1 3c 94 10 00       	mov    0x10943c,%eax
  104437:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10443a:	e9 92 00 00 00       	jmp    1044d1 <strtoknc+0x1c1>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  10443f:	e9 00 00 00 00       	jmp    104444 <strtoknc+0x134>
  104444:	a1 3c 94 10 00       	mov    0x10943c,%eax
  104449:	0f be 00             	movsbl (%eax),%eax
  10444c:	3d 00 00 00 00       	cmp    $0x0,%eax
  104451:	0f 84 74 00 00 00    	je     1044cb <strtoknc+0x1bb>
        for (i = 0; i < len; i++) {
  104457:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10445e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104461:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104464:	0f 8d 3c 00 00 00    	jge    1044a6 <strtoknc+0x196>
            if (*sp == delimiters[i]) {
  10446a:	a1 3c 94 10 00       	mov    0x10943c,%eax
  10446f:	0f be 00             	movsbl (%eax),%eax
  104472:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104475:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104478:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  10447c:	39 c8                	cmp    %ecx,%eax
  10447e:	0f 85 0d 00 00 00    	jne    104491 <strtoknc+0x181>
                *sp = '\0';
  104484:	a1 3c 94 10 00       	mov    0x10943c,%eax
  104489:	c6 00 00             	movb   $0x0,(%eax)
                break;
  10448c:	e9 15 00 00 00       	jmp    1044a6 <strtoknc+0x196>
            }
        }
  104491:	e9 00 00 00 00       	jmp    104496 <strtoknc+0x186>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
  104496:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104499:	05 01 00 00 00       	add    $0x1,%eax
  10449e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1044a1:	e9 b8 ff ff ff       	jmp    10445e <strtoknc+0x14e>
                *sp = '\0';
                break;
            }
        }

        sp++;
  1044a6:	a1 3c 94 10 00       	mov    0x10943c,%eax
  1044ab:	05 01 00 00 00       	add    $0x1,%eax
  1044b0:	a3 3c 94 10 00       	mov    %eax,0x10943c
        if (i < len)
  1044b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1044bb:	0f 8d 05 00 00 00    	jge    1044c6 <strtoknc+0x1b6>
            break;
  1044c1:	e9 05 00 00 00       	jmp    1044cb <strtoknc+0x1bb>
    }
  1044c6:	e9 79 ff ff ff       	jmp    104444 <strtoknc+0x134>

    return p_start;
  1044cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1044ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1044d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1044d4:	83 c4 28             	add    $0x28,%esp
  1044d7:	5d                   	pop    %ebp
  1044d8:	c3                   	ret    
  1044d9:	66 90                	xchg   %ax,%ax
  1044db:	66 90                	xchg   %ax,%ax
  1044dd:	66 90                	xchg   %ax,%ax
  1044df:	90                   	nop

001044e0 <vfs_create_dir>:
    }

    return child;
}

uint32_t vfs_create_dir(char* path) {
  1044e0:	55                   	push   %ebp
  1044e1:	89 e5                	mov    %esp,%ebp
  1044e3:	83 ec 08             	sub    $0x8,%esp
  1044e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1044e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return vfs_create_path(path);
  1044ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1044ef:	89 04 24             	mov    %eax,(%esp)
  1044f2:	e8 09 00 00 00       	call   104500 <vfs_create_path>
  1044f7:	83 c4 08             	add    $0x8,%esp
  1044fa:	5d                   	pop    %ebp
  1044fb:	c3                   	ret    
  1044fc:	0f 1f 40 00          	nopl   0x0(%eax)

00104500 <vfs_create_path>:
    }

    return 1;
}

static int vfs_create_path(char* path) {
  104500:	55                   	push   %ebp
  104501:	89 e5                	mov    %esp,%ebp
  104503:	83 ec 38             	sub    $0x38,%esp
  104506:	8b 45 08             	mov    0x8(%ebp),%eax
  104509:	8d 0d 8c 75 10 00    	lea    0x10758c,%ecx
  10450f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = root;
  104512:	a1 40 94 10 00       	mov    0x109440,%eax
  104517:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  10451a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    int created = 0;
  104521:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    sub = strtok(path, "/");
  104528:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10452b:	89 04 24             	mov    %eax,(%esp)
  10452e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104532:	e8 69 fd ff ff       	call   1042a0 <strtok>
  104537:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  10453a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10453d:	0f be 00             	movsbl (%eax),%eax
  104540:	3d 00 00 00 00       	cmp    $0x0,%eax
  104545:	0f 85 21 00 00 00    	jne    10456c <vfs_create_path+0x6c>
  10454b:	b8 00 00 00 00       	mov    $0x0,%eax
  104550:	8d 0d 8c 75 10 00    	lea    0x10758c,%ecx
  104556:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10455d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104561:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104564:	e8 37 fd ff ff       	call   1042a0 <strtok>
  104569:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  10456c:	e9 00 00 00 00       	jmp    104571 <vfs_create_path+0x71>
  104571:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104578:	0f 84 e8 00 00 00    	je     104666 <vfs_create_path+0x166>
    {
        child = vfs_find_node(parent, sub);
  10457e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104581:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104584:	89 04 24             	mov    %eax,(%esp)
  104587:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10458b:	e8 80 0a 00 00       	call   105010 <vfs_find_node>
  104590:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if(child == 0) {
  104593:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10459a:	0f 85 9a 00 00 00    	jne    10463a <vfs_create_path+0x13a>
  1045a0:	b8 10 01 00 00       	mov    $0x110,%eax
            child = malloc(sizeof(struct res_node));
  1045a5:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  1045ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1045af:	e8 2c f3 ff ff       	call   1038e0 <malloc>
  1045b4:	89 45 f0             	mov    %eax,-0x10(%ebp)

            strcpy(child->name, sub);
  1045b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1045ba:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1045bd:	89 e2                	mov    %esp,%edx
  1045bf:	89 4a 04             	mov    %ecx,0x4(%edx)
  1045c2:	89 02                	mov    %eax,(%edx)
  1045c4:	e8 27 fc ff ff       	call   1041f0 <strcpy>
            child->res_type = RES_SUBDIR;
  1045c9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1045cc:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  1045d3:	00 00 00 
            child->res_ptr = 0;
  1045d6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1045d9:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  1045e0:	00 00 00 

            created++;
  1045e3:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1045e6:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1045ec:	89 4d ec             	mov    %ecx,-0x14(%ebp)

            if(vfs_insert_node(parent, child)) {
  1045ef:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1045f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1045f5:	89 0c 24             	mov    %ecx,(%esp)
  1045f8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1045fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1045ff:	e8 9c 0a 00 00       	call   1050a0 <vfs_insert_node>
  104604:	3d 00 00 00 00       	cmp    $0x0,%eax
  104609:	0f 84 26 00 00 00    	je     104635 <vfs_create_path+0x135>
  10460f:	b8 38 00 00 00       	mov    $0x38,%eax
                show_cod(malloc(sizeof(struct cpu_state)), "Tried to insert VFS node in non RES_SUBDIR parent");
  104614:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  10461b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10461e:	e8 bd f2 ff ff       	call   1038e0 <malloc>
  104623:	8d 0d 8e 75 10 00    	lea    0x10758e,%ecx
  104629:	89 04 24             	mov    %eax,(%esp)
  10462c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104630:	e8 3b bd ff ff       	call   100370 <show_cod>
            }
        }
  104635:	e9 00 00 00 00       	jmp    10463a <vfs_create_path+0x13a>
  10463a:	b8 00 00 00 00       	mov    $0x0,%eax
  10463f:	8d 0d 8c 75 10 00    	lea    0x10758c,%ecx

        parent = child;
  104645:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104648:	89 55 f4             	mov    %edx,-0xc(%ebp)

        sub = strtok(0, "/");
  10464b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104652:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104656:	89 45 d8             	mov    %eax,-0x28(%ebp)
  104659:	e8 42 fc ff ff       	call   1042a0 <strtok>
  10465e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  104661:	e9 0b ff ff ff       	jmp    104571 <vfs_create_path+0x71>

    return created;
  104666:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104669:	83 c4 38             	add    $0x38,%esp
  10466c:	5d                   	pop    %ebp
  10466d:	c3                   	ret    
  10466e:	66 90                	xchg   %ax,%ax

00104670 <vfs_create_kfile>:

uint32_t vfs_create_dir(char* path) {
    return vfs_create_path(path);
}

uint32_t vfs_create_kfile(char* path, struct kfs_driver* driver, uint32_t* params) {
  104670:	55                   	push   %ebp
  104671:	89 e5                	mov    %esp,%ebp
  104673:	83 ec 28             	sub    $0x28,%esp
  104676:	8b 45 10             	mov    0x10(%ebp),%eax
  104679:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10467c:	8b 55 08             	mov    0x8(%ebp),%edx
  10467f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104682:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104685:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* pathc = malloc(strlen(path) + 1);
  104688:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10468b:	89 e1                	mov    %esp,%ecx
  10468d:	89 01                	mov    %eax,(%ecx)
  10468f:	e8 ec fa ff ff       	call   104180 <strlen>
  104694:	05 01 00 00 00       	add    $0x1,%eax
  104699:	89 04 24             	mov    %eax,(%esp)
  10469c:	e8 3f f2 ff ff       	call   1038e0 <malloc>
  1046a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    strcpy(pathc, path);
  1046a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046a7:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1046aa:	89 e2                	mov    %esp,%edx
  1046ac:	89 4a 04             	mov    %ecx,0x4(%edx)
  1046af:	89 02                	mov    %eax,(%edx)
  1046b1:	e8 3a fb ff ff       	call   1041f0 <strcpy>

    uint32_t ret = vfs_create_path(pathc);
  1046b6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1046b9:	89 0c 24             	mov    %ecx,(%esp)
  1046bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1046bf:	e8 3c fe ff ff       	call   104500 <vfs_create_path>
  1046c4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    static struct res_node* node;
    node = vfs_get_node(path);
  1046c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1046ca:	89 04 24             	mov    %eax,(%esp)
  1046cd:	e8 4e 00 00 00       	call   104720 <vfs_get_node>
  1046d2:	a3 4c 94 10 00       	mov    %eax,0x10944c

    node->res_type = RES_KERNDRV;
  1046d7:	a1 4c 94 10 00       	mov    0x10944c,%eax
  1046dc:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  1046e3:	00 00 00 
    node->res_ptr = driver->create(params);
  1046e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1046e9:	8b 40 14             	mov    0x14(%eax),%eax
  1046ec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1046ef:	89 0c 24             	mov    %ecx,(%esp)
  1046f2:	ff d0                	call   *%eax
  1046f4:	8b 0d 4c 94 10 00    	mov    0x10944c,%ecx
  1046fa:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)
    ((struct res_kfile*) node->res_ptr)->driver = driver;
  104700:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104703:	8b 0d 4c 94 10 00    	mov    0x10944c,%ecx
  104709:	8b 89 04 01 00 00    	mov    0x104(%ecx),%ecx
  10470f:	89 41 04             	mov    %eax,0x4(%ecx)

    return ret;
  104712:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104715:	83 c4 28             	add    $0x28,%esp
  104718:	5d                   	pop    %ebp
  104719:	c3                   	ret    
  10471a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104720 <vfs_get_node>:
    }

    return created;
}

static struct res_node* vfs_get_node(char* path) {
  104720:	55                   	push   %ebp
  104721:	89 e5                	mov    %esp,%ebp
  104723:	83 ec 28             	sub    $0x28,%esp
  104726:	8b 45 08             	mov    0x8(%ebp),%eax
  104729:	8d 0d 8c 75 10 00    	lea    0x10758c,%ecx
  10472f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = root;
  104732:	a1 40 94 10 00       	mov    0x109440,%eax
  104737:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  10473a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    sub = strtok(path, "/");
  104741:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104744:	89 04 24             	mov    %eax,(%esp)
  104747:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10474b:	e8 50 fb ff ff       	call   1042a0 <strtok>
  104750:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  104753:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104756:	0f be 00             	movsbl (%eax),%eax
  104759:	3d 00 00 00 00       	cmp    $0x0,%eax
  10475e:	0f 85 21 00 00 00    	jne    104785 <vfs_get_node+0x65>
  104764:	b8 00 00 00 00       	mov    $0x0,%eax
  104769:	8d 0d 8c 75 10 00    	lea    0x10758c,%ecx
  10476f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104776:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10477a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10477d:	e8 1e fb ff ff       	call   1042a0 <strtok>
  104782:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  104785:	e9 00 00 00 00       	jmp    10478a <vfs_get_node+0x6a>
  10478a:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104791:	0f 84 41 00 00 00    	je     1047d8 <vfs_get_node+0xb8>
    {
        child = vfs_find_node(parent, sub);
  104797:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10479a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10479d:	89 04 24             	mov    %eax,(%esp)
  1047a0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1047a4:	e8 67 08 00 00       	call   105010 <vfs_find_node>
  1047a9:	b9 00 00 00 00       	mov    $0x0,%ecx
  1047ae:	8d 15 8c 75 10 00    	lea    0x10758c,%edx
  1047b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        parent = child;
  1047b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1047ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
        sub = strtok(0, "/");
  1047bd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1047c4:	89 54 24 04          	mov    %edx,0x4(%esp)
  1047c8:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1047cb:	e8 d0 fa ff ff       	call   1042a0 <strtok>
  1047d0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  1047d3:	e9 b2 ff ff ff       	jmp    10478a <vfs_get_node+0x6a>

    return child;
  1047d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1047db:	83 c4 28             	add    $0x28,%esp
  1047de:	5d                   	pop    %ebp
  1047df:	c3                   	ret    

001047e0 <vfs_open>:
    ((struct res_kfile*) node->res_ptr)->driver = driver;

    return ret;
}

struct res_handle* vfs_open(char* path, uint32_t filemode) {
  1047e0:	55                   	push   %ebp
  1047e1:	89 e5                	mov    %esp,%ebp
  1047e3:	83 ec 28             	sub    $0x28,%esp
  1047e6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1047e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1047ec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1047ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static struct res_node* node;

    node = vfs_get_node(path);
  1047f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1047f5:	89 04 24             	mov    %eax,(%esp)
  1047f8:	e8 23 ff ff ff       	call   104720 <vfs_get_node>
  1047fd:	a3 50 94 10 00       	mov    %eax,0x109450

    if(node->res_type == RES_KERNDRV) {
  104802:	a1 50 94 10 00       	mov    0x109450,%eax
  104807:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  10480e:	00 00 00 
  104811:	0f 85 34 00 00 00    	jne    10484b <vfs_open+0x6b>
        struct res_kfile* kf = (struct res_kfile*)node->res_ptr;
  104817:	a1 50 94 10 00       	mov    0x109450,%eax
  10481c:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104822:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct res_handle* handle = kf->driver->open(kf, filemode);
  104825:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104828:	8b 40 04             	mov    0x4(%eax),%eax
  10482b:	8b 40 08             	mov    0x8(%eax),%eax
  10482e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104831:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104834:	89 0c 24             	mov    %ecx,(%esp)
  104837:	89 54 24 04          	mov    %edx,0x4(%esp)
  10483b:	ff d0                	call   *%eax
  10483d:	89 45 ec             	mov    %eax,-0x14(%ebp)

        return handle;
  104840:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104843:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104846:	e9 07 00 00 00       	jmp    104852 <vfs_open+0x72>
    }

    return 0;
  10484b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104852:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104855:	83 c4 28             	add    $0x28,%esp
  104858:	5d                   	pop    %ebp
  104859:	c3                   	ret    
  10485a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104860 <vfs_close>:

uint32_t vfs_close(struct res_handle* handle) {
  104860:	55                   	push   %ebp
  104861:	89 e5                	mov    %esp,%ebp
  104863:	83 ec 18             	sub    $0x18,%esp
  104866:	8b 45 08             	mov    0x8(%ebp),%eax
  104869:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle->res_type == RES_KERNDRV) {
  10486c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10486f:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  104875:	0f 85 22 00 00 00    	jne    10489d <vfs_close+0x3d>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  10487b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10487e:	8b 40 04             	mov    0x4(%eax),%eax
  104881:	89 45 f4             	mov    %eax,-0xc(%ebp)

       return kf->driver->close(handle);
  104884:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104887:	8b 40 04             	mov    0x4(%eax),%eax
  10488a:	8b 40 0c             	mov    0xc(%eax),%eax
  10488d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104890:	89 0c 24             	mov    %ecx,(%esp)
  104893:	ff d0                	call   *%eax
  104895:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104898:	e9 07 00 00 00       	jmp    1048a4 <vfs_close+0x44>
    }

    return 0;
  10489d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1048a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1048a7:	83 c4 18             	add    $0x18,%esp
  1048aa:	5d                   	pop    %ebp
  1048ab:	c3                   	ret    
  1048ac:	0f 1f 40 00          	nopl   0x0(%eax)

001048b0 <vfs_read>:

uint32_t vfs_read(struct res_handle* handle, void* dest, uint32_t size, uint32_t count) {
  1048b0:	55                   	push   %ebp
  1048b1:	89 e5                	mov    %esp,%ebp
  1048b3:	56                   	push   %esi
  1048b4:	83 ec 34             	sub    $0x34,%esp
  1048b7:	8b 45 14             	mov    0x14(%ebp),%eax
  1048ba:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1048bd:	8b 55 0c             	mov    0xc(%ebp),%edx
  1048c0:	8b 75 08             	mov    0x8(%ebp),%esi
  1048c3:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1048c6:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1048c9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1048cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  1048cf:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1048d6:	0f 85 0c 00 00 00    	jne    1048e8 <vfs_read+0x38>
  1048dc:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  1048e3:	e9 94 00 00 00       	jmp    10497c <vfs_read+0xcc>

    if(handle->res_type == RES_KERNDRV) {
  1048e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1048eb:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  1048f1:	0f 85 7e 00 00 00    	jne    104975 <vfs_read+0xc5>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  1048f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1048fa:	8b 40 04             	mov    0x4(%eax),%eax
  1048fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rread(handle, dest, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  104900:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104903:	8b 40 04             	mov    0x4(%eax),%eax
  104906:	8b 00                	mov    (%eax),%eax
  104908:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10490b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10490e:	8b 75 ec             	mov    -0x14(%ebp),%esi
  104911:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  104915:	89 0c 24             	mov    %ecx,(%esp)
  104918:	89 54 24 04          	mov    %edx,0x4(%esp)
  10491c:	89 74 24 08          	mov    %esi,0x8(%esp)
  104920:	ff d0                	call   *%eax
  104922:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  104925:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  10492c:	0f 85 1e 00 00 00    	jne    104950 <vfs_read+0xa0>
           handle->position += size * count;
  104932:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104935:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  104939:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10493c:	8b 51 08             	mov    0x8(%ecx),%edx
  10493f:	01 c2                	add    %eax,%edx
  104941:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  104944:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10494b:	e9 2c 00 00 00       	jmp    10497c <vfs_read+0xcc>
       }

       if(res == RW_BLOCK) {
  104950:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  104957:	0f 85 0c 00 00 00    	jne    104969 <vfs_read+0xb9>
           return RW_BLOCK;
  10495d:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  104964:	e9 13 00 00 00       	jmp    10497c <vfs_read+0xcc>
       }

       return RW_ERR_DRIVER;
  104969:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  104970:	e9 07 00 00 00       	jmp    10497c <vfs_read+0xcc>
    }

    return RW_ERR_VFS;
  104975:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  10497c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10497f:	83 c4 34             	add    $0x34,%esp
  104982:	5e                   	pop    %esi
  104983:	5d                   	pop    %ebp
  104984:	c3                   	ret    
  104985:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10498c:	00 00 00 00 

00104990 <vfs_write>:

uint32_t vfs_write(struct res_handle* handle, void* src,  uint32_t size, uint32_t count) {
  104990:	55                   	push   %ebp
  104991:	89 e5                	mov    %esp,%ebp
  104993:	56                   	push   %esi
  104994:	83 ec 34             	sub    $0x34,%esp
  104997:	8b 45 14             	mov    0x14(%ebp),%eax
  10499a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10499d:	8b 55 0c             	mov    0xc(%ebp),%edx
  1049a0:	8b 75 08             	mov    0x8(%ebp),%esi
  1049a3:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1049a6:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1049a9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1049ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  1049af:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1049b6:	0f 85 0c 00 00 00    	jne    1049c8 <vfs_write+0x38>
  1049bc:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  1049c3:	e9 95 00 00 00       	jmp    104a5d <vfs_write+0xcd>

    if(handle->res_type == RES_KERNDRV) {
  1049c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1049cb:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  1049d1:	0f 85 7f 00 00 00    	jne    104a56 <vfs_write+0xc6>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  1049d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1049da:	8b 40 04             	mov    0x4(%eax),%eax
  1049dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rwrite(handle, src, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  1049e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1049e3:	8b 40 04             	mov    0x4(%eax),%eax
  1049e6:	8b 40 04             	mov    0x4(%eax),%eax
  1049e9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1049ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1049ef:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1049f2:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  1049f6:	89 0c 24             	mov    %ecx,(%esp)
  1049f9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1049fd:	89 74 24 08          	mov    %esi,0x8(%esp)
  104a01:	ff d0                	call   *%eax
  104a03:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  104a06:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  104a0d:	0f 85 1e 00 00 00    	jne    104a31 <vfs_write+0xa1>
           handle->position += size * count;
  104a13:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104a16:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  104a1a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104a1d:	8b 51 08             	mov    0x8(%ecx),%edx
  104a20:	01 c2                	add    %eax,%edx
  104a22:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  104a25:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  104a2c:	e9 2c 00 00 00       	jmp    104a5d <vfs_write+0xcd>
       }

       if(res == RW_BLOCK) {
  104a31:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  104a38:	0f 85 0c 00 00 00    	jne    104a4a <vfs_write+0xba>
           return RW_BLOCK;
  104a3e:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  104a45:	e9 13 00 00 00       	jmp    104a5d <vfs_write+0xcd>
       }

       return RW_ERR_DRIVER;
  104a4a:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  104a51:	e9 07 00 00 00       	jmp    104a5d <vfs_write+0xcd>
    }

    return RW_ERR_VFS;
  104a56:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  104a5d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104a60:	83 c4 34             	add    $0x34,%esp
  104a63:	5e                   	pop    %esi
  104a64:	5d                   	pop    %ebp
  104a65:	c3                   	ret    
  104a66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  104a6d:	00 00 00 

00104a70 <vfs_available>:

uint32_t vfs_available(struct res_handle* handle) {
  104a70:	55                   	push   %ebp
  104a71:	89 e5                	mov    %esp,%ebp
  104a73:	83 ec 18             	sub    $0x18,%esp
  104a76:	8b 45 08             	mov    0x8(%ebp),%eax
  104a79:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle == 0) return 0;
  104a7c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104a83:	0f 85 0c 00 00 00    	jne    104a95 <vfs_available+0x25>
  104a89:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104a90:	e9 38 00 00 00       	jmp    104acd <vfs_available+0x5d>

    if(handle->res_type == RES_KERNDRV) {
  104a95:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104a98:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  104a9e:	0f 85 22 00 00 00    	jne    104ac6 <vfs_available+0x56>
        struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  104aa4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104aa7:	8b 40 04             	mov    0x4(%eax),%eax
  104aaa:	89 45 f4             	mov    %eax,-0xc(%ebp)

        return kf->driver->available(handle);
  104aad:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104ab0:	8b 40 04             	mov    0x4(%eax),%eax
  104ab3:	8b 40 10             	mov    0x10(%eax),%eax
  104ab6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104ab9:	89 0c 24             	mov    %ecx,(%esp)
  104abc:	ff d0                	call   *%eax
  104abe:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104ac1:	e9 07 00 00 00       	jmp    104acd <vfs_available+0x5d>
    }

    return 0;
  104ac6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104acd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104ad0:	83 c4 18             	add    $0x18,%esp
  104ad3:	5d                   	pop    %ebp
  104ad4:	c3                   	ret    
  104ad5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  104adc:	00 00 00 00 

00104ae0 <vfs_exists>:

uint32_t vfs_exists(char* path) {
  104ae0:	55                   	push   %ebp
  104ae1:	89 e5                	mov    %esp,%ebp
  104ae3:	83 ec 18             	sub    $0x18,%esp
  104ae6:	8b 45 08             	mov    0x8(%ebp),%eax
  104ae9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(vfs_get_node(path) != 0) return 1;
  104aec:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104aef:	89 04 24             	mov    %eax,(%esp)
  104af2:	e8 29 fc ff ff       	call   104720 <vfs_get_node>
  104af7:	3d 00 00 00 00       	cmp    $0x0,%eax
  104afc:	0f 84 0c 00 00 00    	je     104b0e <vfs_exists+0x2e>
  104b02:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  104b09:	e9 07 00 00 00       	jmp    104b15 <vfs_exists+0x35>
    return 0;
  104b0e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104b15:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104b18:	83 c4 18             	add    $0x18,%esp
  104b1b:	5d                   	pop    %ebp
  104b1c:	c3                   	ret    
  104b1d:	0f 1f 00             	nopl   (%eax)

00104b20 <vfs_seek>:

void vfs_seek(struct res_handle* handle, uint32_t offset, uint32_t origin) {
  104b20:	55                   	push   %ebp
  104b21:	89 e5                	mov    %esp,%ebp
  104b23:	83 ec 0c             	sub    $0xc,%esp
  104b26:	8b 45 10             	mov    0x10(%ebp),%eax
  104b29:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104b2c:	8b 55 08             	mov    0x8(%ebp),%edx
  104b2f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104b32:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104b35:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(origin == SEEK_SET) {
  104b38:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104b3f:	0f 85 09 00 00 00    	jne    104b4e <vfs_seek+0x2e>
        handle->position = offset;
  104b45:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104b48:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104b4b:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if(origin == SEEK_CUR) {
  104b4e:	81 7d f4 01 00 00 00 	cmpl   $0x1,-0xc(%ebp)
  104b55:	0f 85 0e 00 00 00    	jne    104b69 <vfs_seek+0x49>
        handle->position += offset;
  104b5b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104b5e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104b61:	8b 51 08             	mov    0x8(%ecx),%edx
  104b64:	01 c2                	add    %eax,%edx
  104b66:	89 51 08             	mov    %edx,0x8(%ecx)
    }
}
  104b69:	83 c4 0c             	add    $0xc,%esp
  104b6c:	5d                   	pop    %ebp
  104b6d:	c3                   	ret    
  104b6e:	66 90                	xchg   %ax,%ax

00104b70 <vfs_exec>:

void vfs_exec(char* ip, char* args[], struct task* task) {
  104b70:	55                   	push   %ebp
  104b71:	89 e5                	mov    %esp,%ebp
  104b73:	56                   	push   %esi
  104b74:	81 ec 94 00 00 00    	sub    $0x94,%esp
  104b7a:	8b 45 10             	mov    0x10(%ebp),%eax
  104b7d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104b80:	8b 55 08             	mov    0x8(%ebp),%edx
  104b83:	89 55 f8             	mov    %edx,-0x8(%ebp)
  104b86:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104b89:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char* path = strclone(ip);
  104b8c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104b8f:	89 04 24             	mov    %eax,(%esp)
  104b92:	e8 b9 f6 ff ff       	call   104250 <strclone>
  104b97:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(vfs_exists(path)) {
  104b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104b9d:	89 04 24             	mov    %eax,(%esp)
  104ba0:	e8 3b ff ff ff       	call   104ae0 <vfs_exists>
  104ba5:	3d 00 00 00 00       	cmp    $0x0,%eax
  104baa:	0f 84 dd 02 00 00    	je     104e8d <vfs_exec+0x31d>
        uint32_t elf_mod_pdir;

        if(task == 0) {
  104bb0:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104bb7:	0f 85 35 00 00 00    	jne    104bf2 <vfs_exec+0x82>
            elf_mod_pdir = vmm_create_pagedir();
  104bbd:	e8 ce 0a 00 00       	call   105690 <vmm_create_pagedir>
  104bc2:	b9 01 00 00 00       	mov    $0x1,%ecx
  104bc7:	89 45 e8             	mov    %eax,-0x18(%ebp)
            task = init_task(elf_mod_pdir, (void*)1);
  104bca:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104bcd:	89 04 24             	mov    %eax,(%esp)
  104bd0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104bd4:	e8 47 ea ff ff       	call   103620 <init_task>
  104bd9:	8d 0d b3 74 10 00    	lea    0x1074b3,%ecx
  104bdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
            kprintf("[exec] Initialized new task...\n");
  104be2:	89 0c 24             	mov    %ecx,(%esp)
  104be5:	e8 66 b9 ff ff       	call   100550 <kprintf>
        }
  104bea:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  104bed:	e9 1a 00 00 00       	jmp    104c0c <vfs_exec+0x9c>
  104bf2:	8d 05 d3 74 10 00    	lea    0x1074d3,%eax
        else
        {
            elf_mod_pdir = task->phys_pdir;
  104bf8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104bfb:	8b 49 14             	mov    0x14(%ecx),%ecx
  104bfe:	89 4d e8             	mov    %ecx,-0x18(%ebp)
            kprintf("[exec] Replacing old task...\n");
  104c01:	89 04 24             	mov    %eax,(%esp)
  104c04:	e8 47 b9 ff ff       	call   100550 <kprintf>
  104c09:	89 45 b0             	mov    %eax,-0x50(%ebp)
  104c0c:	b8 05 00 00 00       	mov    $0x5,%eax
        }

        struct res_handle* handle = vfs_open(path, FM_EXEC | FM_READ);
  104c11:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104c14:	89 0c 24             	mov    %ecx,(%esp)
  104c17:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  104c1e:	00 
  104c1f:	89 45 ac             	mov    %eax,-0x54(%ebp)
  104c22:	e8 b9 fb ff ff       	call   1047e0 <vfs_open>
  104c27:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if(handle) {
  104c2a:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  104c31:	0f 84 39 02 00 00    	je     104e70 <vfs_exec+0x300>
            uint32_t size = vfs_available(handle);
  104c37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104c3a:	89 04 24             	mov    %eax,(%esp)
  104c3d:	e8 2e fe ff ff       	call   104a70 <vfs_available>
  104c42:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(size == 0) {
  104c45:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  104c4c:	0f 85 1d 00 00 00    	jne    104c6f <vfs_exec+0xff>
  104c52:	8d 05 f1 74 10 00    	lea    0x1074f1,%eax
                kprintf("[exec] %s is empty\n", path);
  104c58:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104c5b:	89 04 24             	mov    %eax,(%esp)
  104c5e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104c62:	e8 e9 b8 ff ff       	call   100550 <kprintf>
                return;
  104c67:	89 45 a8             	mov    %eax,-0x58(%ebp)
  104c6a:	e9 1e 02 00 00       	jmp    104e8d <vfs_exec+0x31d>
            }

            void* modsrc = malloc(size);
  104c6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104c72:	89 04 24             	mov    %eax,(%esp)
  104c75:	e8 66 ec ff ff       	call   1038e0 <malloc>
  104c7a:	b9 01 00 00 00       	mov    $0x1,%ecx
  104c7f:	89 45 dc             	mov    %eax,-0x24(%ebp)

            uint32_t res = vfs_read(handle, modsrc, size, 1);
  104c82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104c85:	8b 55 dc             	mov    -0x24(%ebp),%edx
  104c88:	8b 75 e0             	mov    -0x20(%ebp),%esi
  104c8b:	89 04 24             	mov    %eax,(%esp)
  104c8e:	89 54 24 04          	mov    %edx,0x4(%esp)
  104c92:	89 74 24 08          	mov    %esi,0x8(%esp)
  104c96:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  104c9d:	00 
  104c9e:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  104ca1:	e8 0a fc ff ff       	call   1048b0 <vfs_read>
  104ca6:	89 45 d8             	mov    %eax,-0x28(%ebp)

            if(res != RW_OK) {
  104ca9:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  104cb0:	0f 84 21 00 00 00    	je     104cd7 <vfs_exec+0x167>
  104cb6:	8d 05 05 75 10 00    	lea    0x107505,%eax
                kprintf("[exec] Error while reading %s\n");
  104cbc:	89 04 24             	mov    %eax,(%esp)
  104cbf:	e8 8c b8 ff ff       	call   100550 <kprintf>
                free(modsrc);
  104cc4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  104cc7:	89 0c 24             	mov    %ecx,(%esp)
  104cca:	89 45 a0             	mov    %eax,-0x60(%ebp)
  104ccd:	e8 de ef ff ff       	call   103cb0 <free>
                return;
  104cd2:	e9 b6 01 00 00       	jmp    104e8d <vfs_exec+0x31d>
            }

            uint32_t old_pdir = vmm_get_current_pagedir();
  104cd7:	e8 54 04 00 00       	call   105130 <vmm_get_current_pagedir>
  104cdc:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            //**********************************************************************************************************
            if(task != get_current_task())  vmm_activate_pagedir(elf_mod_pdir);
  104cdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ce2:	89 45 9c             	mov    %eax,-0x64(%ebp)
  104ce5:	e8 86 e5 ff ff       	call   103270 <get_current_task>
  104cea:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  104ced:	39 c1                	cmp    %eax,%ecx
  104cef:	0f 84 0b 00 00 00    	je     104d00 <vfs_exec+0x190>
  104cf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104cf8:	89 04 24             	mov    %eax,(%esp)
  104cfb:	e8 70 0f 00 00       	call   105c70 <vmm_activate_pagedir>

            struct elf_header* header = modsrc;
  104d00:	8b 45 dc             	mov    -0x24(%ebp),%eax
  104d03:	89 45 d0             	mov    %eax,-0x30(%ebp)
            struct elf_program_header* ph;

            /* Ist es ueberhaupt eine ELF-Datei? */
            if (header->magic != ELF_MAGIC) {
  104d06:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104d09:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  104d0f:	0f 84 28 00 00 00    	je     104d3d <vfs_exec+0x1cd>
  104d15:	8d 05 24 75 10 00    	lea    0x107524,%eax
                kprintf("[exec] Invalid ELF-Magic in %s!\n", path);
  104d1b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104d1e:	89 04 24             	mov    %eax,(%esp)
  104d21:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104d25:	e8 26 b8 ff ff       	call   100550 <kprintf>
                free(modsrc);
  104d2a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  104d2d:	89 0c 24             	mov    %ecx,(%esp)
  104d30:	89 45 98             	mov    %eax,-0x68(%ebp)
  104d33:	e8 78 ef ff ff       	call   103cb0 <free>
                return;
  104d38:	e9 50 01 00 00       	jmp    104e8d <vfs_exec+0x31d>
            }

            void* elf_mod_entry = (void*) (header->entry);
  104d3d:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104d40:	8b 40 18             	mov    0x18(%eax),%eax
  104d43:	89 45 c8             	mov    %eax,-0x38(%ebp)

            ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  104d46:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104d49:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  104d4c:	03 41 1c             	add    0x1c(%ecx),%eax
  104d4f:	89 45 cc             	mov    %eax,-0x34(%ebp)

            for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  104d52:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  104d59:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  104d5c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  104d5f:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  104d63:	39 c8                	cmp    %ecx,%eax
  104d65:	0f 83 a7 00 00 00    	jae    104e12 <vfs_exec+0x2a2>
                void* dest = (void*) ph->virt_addr;
  104d6b:	8b 45 cc             	mov    -0x34(%ebp),%eax
  104d6e:	8b 40 08             	mov    0x8(%eax),%eax
  104d71:	89 45 c0             	mov    %eax,-0x40(%ebp)
                void* src = ((char*) header) + ph->offset;
  104d74:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104d77:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  104d7a:	03 41 04             	add    0x4(%ecx),%eax
  104d7d:	89 45 bc             	mov    %eax,-0x44(%ebp)

                /* Nur Program Header vom Typ LOAD laden */
                if (ph->type != 1) {
  104d80:	8b 45 cc             	mov    -0x34(%ebp),%eax
  104d83:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  104d89:	0f 84 05 00 00 00    	je     104d94 <vfs_exec+0x224>
                    continue;
  104d8f:	e9 63 00 00 00       	jmp    104df7 <vfs_exec+0x287>
                }

                for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  104d94:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  104d9b:	8b 45 b8             	mov    -0x48(%ebp),%eax
  104d9e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  104da1:	3b 41 14             	cmp    0x14(%ecx),%eax
  104da4:	0f 83 31 00 00 00    	jae    104ddb <vfs_exec+0x26b>
  104daa:	b8 00 00 00 00       	mov    $0x0,%eax
                    vmm_alloc_addr(dest + offset, 0);
  104daf:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  104db2:	03 4d b8             	add    -0x48(%ebp),%ecx
  104db5:	89 0c 24             	mov    %ecx,(%esp)
  104db8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104dbf:	00 
  104dc0:	89 45 94             	mov    %eax,-0x6c(%ebp)
  104dc3:	e8 a8 0d 00 00       	call   105b70 <vmm_alloc_addr>
  104dc8:	89 45 90             	mov    %eax,-0x70(%ebp)
                /* Nur Program Header vom Typ LOAD laden */
                if (ph->type != 1) {
                    continue;
                }

                for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  104dcb:	8b 45 b8             	mov    -0x48(%ebp),%eax
  104dce:	05 00 10 00 00       	add    $0x1000,%eax
  104dd3:	89 45 b8             	mov    %eax,-0x48(%ebp)
  104dd6:	e9 c0 ff ff ff       	jmp    104d9b <vfs_exec+0x22b>
                    vmm_alloc_addr(dest + offset, 0);
                }

                memcpy(dest, src, ph->file_size);
  104ddb:	8b 45 c0             	mov    -0x40(%ebp),%eax
  104dde:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  104de1:	8b 55 cc             	mov    -0x34(%ebp),%edx
  104de4:	8b 52 10             	mov    0x10(%edx),%edx
  104de7:	89 04 24             	mov    %eax,(%esp)
  104dea:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104dee:	89 54 24 08          	mov    %edx,0x8(%esp)
  104df2:	e8 b9 f1 ff ff       	call   103fb0 <memcpy>

            void* elf_mod_entry = (void*) (header->entry);

            ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);

            for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  104df7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  104dfa:	05 01 00 00 00       	add    $0x1,%eax
  104dff:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  104e02:	8b 45 cc             	mov    -0x34(%ebp),%eax
  104e05:	05 20 00 00 00       	add    $0x20,%eax
  104e0a:	89 45 cc             	mov    %eax,-0x34(%ebp)
  104e0d:	e9 47 ff ff ff       	jmp    104d59 <vfs_exec+0x1e9>
                }

                memcpy(dest, src, ph->file_size);
            }

            task->args = args;
  104e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e15:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104e18:	89 41 18             	mov    %eax,0x18(%ecx)
            task->cpuState->eip = (uint32_t) elf_mod_entry;
  104e1b:	8b 45 c8             	mov    -0x38(%ebp),%eax
  104e1e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104e21:	8b 49 04             	mov    0x4(%ecx),%ecx
  104e24:	89 41 24             	mov    %eax,0x24(%ecx)

            if(task != get_current_task()) vmm_activate_pagedir(old_pdir);
  104e27:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104e2a:	89 45 8c             	mov    %eax,-0x74(%ebp)
  104e2d:	e8 3e e4 ff ff       	call   103270 <get_current_task>
  104e32:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  104e35:	39 c1                	cmp    %eax,%ecx
  104e37:	0f 84 0b 00 00 00    	je     104e48 <vfs_exec+0x2d8>
  104e3d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104e40:	89 04 24             	mov    %eax,(%esp)
  104e43:	e8 28 0e 00 00       	call   105c70 <vmm_activate_pagedir>
  104e48:	8d 05 45 75 10 00    	lea    0x107545,%eax

            kprintf("[exec] Executed %s\n", path);
  104e4e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104e51:	89 04 24             	mov    %eax,(%esp)
  104e54:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104e58:	e8 f3 b6 ff ff       	call   100550 <kprintf>
            free(modsrc);
  104e5d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  104e60:	89 0c 24             	mov    %ecx,(%esp)
  104e63:	89 45 88             	mov    %eax,-0x78(%ebp)
  104e66:	e8 45 ee ff ff       	call   103cb0 <free>
        }
  104e6b:	e9 18 00 00 00       	jmp    104e88 <vfs_exec+0x318>
  104e70:	8d 05 59 75 10 00    	lea    0x107559,%eax
        else
        {
            kprintf("[exec] %s doesn't exist\n", path);
  104e76:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104e79:	89 04 24             	mov    %eax,(%esp)
  104e7c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104e80:	e8 cb b6 ff ff       	call   100550 <kprintf>
  104e85:	89 45 84             	mov    %eax,-0x7c(%ebp)
        }
    }
  104e88:	e9 00 00 00 00       	jmp    104e8d <vfs_exec+0x31d>
}
  104e8d:	81 c4 94 00 00 00    	add    $0x94,%esp
  104e93:	5e                   	pop    %esi
  104e94:	5d                   	pop    %ebp
  104e95:	c3                   	ret    
  104e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  104e9d:	00 00 00 

00104ea0 <vfs_init_root>:

void vfs_init_root() {
  104ea0:	55                   	push   %ebp
  104ea1:	89 e5                	mov    %esp,%ebp
    if(root == 0) {
  104ea3:	83 ec 18             	sub    $0x18,%esp
  104ea6:	81 3d 40 94 10 00 00 	cmpl   $0x0,0x109440
  104ead:	00 00 00 
  104eb0:	0f 85 6f 00 00 00    	jne    104f25 <vfs_init_root+0x85>
  104eb6:	b8 10 01 00 00       	mov    $0x110,%eax
        root = malloc(sizeof(struct res_node));
  104ebb:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  104ec2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104ec5:	e8 16 ea ff ff       	call   1038e0 <malloc>
  104eca:	a3 40 94 10 00       	mov    %eax,0x109440
        root->next = 0;
  104ecf:	a1 40 94 10 00       	mov    0x109440,%eax
  104ed4:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  104edb:	00 00 00 
        root->parent = 0;
  104ede:	a1 40 94 10 00       	mov    0x109440,%eax
  104ee3:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  104eea:	00 00 00 
        strcpy(root->name, "$");
  104eed:	a1 40 94 10 00       	mov    0x109440,%eax
  104ef2:	89 e1                	mov    %esp,%ecx
  104ef4:	89 01                	mov    %eax,(%ecx)
  104ef6:	c7 41 04 72 75 10 00 	movl   $0x107572,0x4(%ecx)
  104efd:	e8 ee f2 ff ff       	call   1041f0 <strcpy>
        root->res_ptr = 0;
  104f02:	8b 0d 40 94 10 00    	mov    0x109440,%ecx
  104f08:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  104f0f:	00 00 00 
        root->res_type = RES_SUBDIR;
  104f12:	8b 0d 40 94 10 00    	mov    0x109440,%ecx
  104f18:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  104f1f:	00 00 00 
  104f22:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
}
  104f25:	83 c4 18             	add    $0x18,%esp
  104f28:	5d                   	pop    %ebp
  104f29:	c3                   	ret    
  104f2a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104f30 <vfs_debug_ls>:

void vfs_debug_ls(char* path) {
  104f30:	55                   	push   %ebp
  104f31:	89 e5                	mov    %esp,%ebp
  104f33:	56                   	push   %esi
  104f34:	83 ec 24             	sub    $0x24,%esp
  104f37:	8b 45 08             	mov    0x8(%ebp),%eax
  104f3a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    static struct res_node* node;
    node = vfs_get_node(path);
  104f3d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f40:	89 04 24             	mov    %eax,(%esp)
  104f43:	e8 d8 f7 ff ff       	call   104720 <vfs_get_node>
  104f48:	a3 54 94 10 00       	mov    %eax,0x109454
    node = node->res_ptr;
  104f4d:	a1 54 94 10 00       	mov    0x109454,%eax
  104f52:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104f58:	a3 54 94 10 00       	mov    %eax,0x109454

    while(node != 0) {
  104f5d:	81 3d 54 94 10 00 00 	cmpl   $0x0,0x109454
  104f64:	00 00 00 
  104f67:	0f 84 90 00 00 00    	je     104ffd <vfs_debug_ls+0xcd>
  104f6d:	8d 05 74 75 10 00    	lea    0x107574,%eax
        char* type = "N/A";
  104f73:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(node->res_type == RES_SUBDIR) {
  104f76:	a1 54 94 10 00       	mov    0x109454,%eax
  104f7b:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  104f82:	00 00 00 
  104f85:	0f 85 09 00 00 00    	jne    104f94 <vfs_debug_ls+0x64>
  104f8b:	8d 05 78 75 10 00    	lea    0x107578,%eax
            type = "DIR";
  104f91:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        if(node->res_type == RES_KERNDRV) {
  104f94:	a1 54 94 10 00       	mov    0x109454,%eax
  104f99:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  104fa0:	00 00 00 
  104fa3:	0f 85 14 00 00 00    	jne    104fbd <vfs_debug_ls+0x8d>
            type = ((struct res_kfile*)node->res_ptr)->driver->drvname;
  104fa9:	a1 54 94 10 00       	mov    0x109454,%eax
  104fae:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104fb4:	8b 40 04             	mov    0x4(%eax),%eax
  104fb7:	8b 40 18             	mov    0x18(%eax),%eax
  104fba:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104fbd:	8d 05 7c 75 10 00    	lea    0x10757c,%eax
        }

        kprintf("LS %s: %s [%s]\n", path, node->name, type);
  104fc3:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104fc6:	8b 15 54 94 10 00    	mov    0x109454,%edx
  104fcc:	8b 75 f4             	mov    -0xc(%ebp),%esi
  104fcf:	89 04 24             	mov    %eax,(%esp)
  104fd2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104fd6:	89 54 24 08          	mov    %edx,0x8(%esp)
  104fda:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104fde:	e8 6d b5 ff ff       	call   100550 <kprintf>

        node = node->next;
  104fe3:	8b 0d 54 94 10 00    	mov    0x109454,%ecx
  104fe9:	8b 89 08 01 00 00    	mov    0x108(%ecx),%ecx
  104fef:	89 0d 54 94 10 00    	mov    %ecx,0x109454
    }
  104ff5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104ff8:	e9 60 ff ff ff       	jmp    104f5d <vfs_debug_ls+0x2d>
}
  104ffd:	83 c4 24             	add    $0x24,%esp
  105000:	5e                   	pop    %esi
  105001:	5d                   	pop    %ebp
  105002:	c3                   	ret    
  105003:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10500a:	84 00 00 00 00 00 

00105010 <vfs_find_node>:

struct res_node* root = 0;
struct res_node* current = 0;
struct res_node* temp = 0;

static struct res_node* vfs_find_node(struct res_node* parent, char* name) {
  105010:	55                   	push   %ebp
  105011:	89 e5                	mov    %esp,%ebp
  105013:	83 ec 18             	sub    $0x18,%esp
  105016:	8b 45 0c             	mov    0xc(%ebp),%eax
  105019:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10501c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10501f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_type == RES_SUBDIR) {
  105022:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105025:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  10502c:	00 00 00 
  10502f:	0f 85 57 00 00 00    	jne    10508c <vfs_find_node+0x7c>
        struct res_node* ptr = parent->res_ptr;
  105035:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105038:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  10503e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        while(ptr != 0) {
  105041:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105048:	0f 84 39 00 00 00    	je     105087 <vfs_find_node+0x77>
            if(strcmp(name, ptr->name) == 0) {
  10504e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105051:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105054:	89 e2                	mov    %esp,%edx
  105056:	89 4a 04             	mov    %ecx,0x4(%edx)
  105059:	89 02                	mov    %eax,(%edx)
  10505b:	e8 a0 f0 ff ff       	call   104100 <strcmp>
  105060:	3d 00 00 00 00       	cmp    $0x0,%eax
  105065:	0f 85 0b 00 00 00    	jne    105076 <vfs_find_node+0x66>
                return ptr;
  10506b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10506e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105071:	e9 1d 00 00 00       	jmp    105093 <vfs_find_node+0x83>
            }

            ptr = ptr->next;
  105076:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105079:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  10507f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
  105082:	e9 ba ff ff ff       	jmp    105041 <vfs_find_node+0x31>
    }
  105087:	e9 00 00 00 00       	jmp    10508c <vfs_find_node+0x7c>

    return 0;
  10508c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105093:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105096:	83 c4 18             	add    $0x18,%esp
  105099:	5d                   	pop    %ebp
  10509a:	c3                   	ret    
  10509b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001050a0 <vfs_insert_node>:

static int vfs_insert_node(struct res_node* parent, struct res_node* child) {
  1050a0:	55                   	push   %ebp
  1050a1:	89 e5                	mov    %esp,%ebp
  1050a3:	83 ec 0c             	sub    $0xc,%esp
  1050a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1050a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1050ac:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1050af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_ptr == 0) {
  1050b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1050b5:	81 b8 04 01 00 00 00 	cmpl   $0x0,0x104(%eax)
  1050bc:	00 00 00 
  1050bf:	0f 85 0d 00 00 00    	jne    1050d2 <vfs_insert_node+0x32>
        parent->res_type = RES_SUBDIR;
  1050c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1050c8:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  1050cf:	00 00 00 
    }

    if(parent->res_type == RES_SUBDIR) {
  1050d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1050d5:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  1050dc:	00 00 00 
  1050df:	0f 85 36 00 00 00    	jne    10511b <vfs_insert_node+0x7b>
        child->next = parent->res_ptr;
  1050e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1050e8:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1050ee:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1050f1:	89 81 08 01 00 00    	mov    %eax,0x108(%ecx)
        child->parent = parent;
  1050f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1050fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1050fd:	89 81 0c 01 00 00    	mov    %eax,0x10c(%ecx)
        parent->res_ptr = child;
  105103:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105106:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105109:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)

        return 0;
  10510f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105116:	e9 07 00 00 00       	jmp    105122 <vfs_insert_node+0x82>
    }

    return 1;
  10511b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
}
  105122:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105125:	83 c4 0c             	add    $0xc,%esp
  105128:	5d                   	pop    %ebp
  105129:	c3                   	ret    
  10512a:	66 90                	xchg   %ax,%ax
  10512c:	66 90                	xchg   %ax,%ax
  10512e:	66 90                	xchg   %ax,%ax

00105130 <vmm_get_current_pagedir>:
	}

	vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  105130:	55                   	push   %ebp
  105131:	89 e5                	mov    %esp,%ebp
	return active_pagedir;
  105133:	a1 58 94 10 00       	mov    0x109458,%eax
  105138:	5d                   	pop    %ebp
  105139:	c3                   	ret    
  10513a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105140 <vmm_fork_current>:
}

uint32_t vmm_fork_current(void) {
  105140:	55                   	push   %ebp
  105141:	89 e5                	mov    %esp,%ebp
  105143:	56                   	push   %esi
  105144:	83 ec 34             	sub    $0x34,%esp
  105147:	8d 45 f8             	lea    -0x8(%ebp),%eax
	uint32_t phys_pagedir, paddr, i;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  10514a:	89 04 24             	mov    %eax,(%esp)
  10514d:	e8 ce 00 00 00       	call   105220 <vmm_create_vpdraw>
  105152:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for (i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  105155:	c7 45 f0 00 10 40 20 	movl   $0x20401000,-0x10(%ebp)
  10515c:	81 7d f0 00 f0 ff ff 	cmpl   $0xfffff000,-0x10(%ebp)
  105163:	0f 83 98 00 00 00    	jae    105201 <vmm_fork_current+0xc1>
		if (active_pagetables[i >> 12] & PT_PRESENT) {
  105169:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10516c:	c1 e8 0c             	shr    $0xc,%eax
  10516f:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  105175:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105178:	25 01 00 00 00       	and    $0x1,%eax
  10517d:	3d 00 00 00 00       	cmp    $0x0,%eax
  105182:	0f 84 64 00 00 00    	je     1051ec <vmm_fork_current+0xac>
  105188:	8d 45 f4             	lea    -0xc(%ebp),%eax
			void* newp = vmm_alloc_user(&paddr);
  10518b:	89 04 24             	mov    %eax,(%esp)
  10518e:	e8 4d 03 00 00       	call   1054e0 <vmm_alloc_user>
  105193:	b9 00 00 00 00       	mov    $0x0,%ecx
  105198:	ba 00 10 00 00       	mov    $0x1000,%edx
  10519d:	89 45 e8             	mov    %eax,-0x18(%ebp)

			memcpy(newp, (void*) i, 0x1000);
  1051a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1051a3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1051a6:	89 04 24             	mov    %eax,(%esp)
  1051a9:	89 74 24 04          	mov    %esi,0x4(%esp)
  1051ad:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  1051b4:	00 
  1051b5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  1051b8:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  1051bb:	e8 f0 ed ff ff       	call   103fb0 <memcpy>
			map_address_context(pdptr, i, paddr, 0);
  1051c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1051c3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1051c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1051c9:	89 04 24             	mov    %eax,(%esp)
  1051cc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1051d0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1051d4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1051db:	00 
  1051dc:	e8 4f 03 00 00       	call   105530 <map_address_context>

			vmm_unmap(newp);
  1051e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1051e4:	89 04 24             	mov    %eax,(%esp)
  1051e7:	e8 d4 03 00 00       	call   1055c0 <vmm_unmap>
		}

	}
  1051ec:	e9 00 00 00 00       	jmp    1051f1 <vmm_fork_current+0xb1>

uint32_t vmm_fork_current(void) {
	uint32_t phys_pagedir, paddr, i;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);

	for (i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  1051f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1051f4:	05 00 10 00 00       	add    $0x1000,%eax
  1051f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1051fc:	e9 5b ff ff ff       	jmp    10515c <vmm_fork_current+0x1c>
			vmm_unmap(newp);
		}

	}

	vmm_free_pdptr(pdptr);
  105201:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105204:	89 04 24             	mov    %eax,(%esp)
  105207:	e8 24 04 00 00       	call   105630 <vmm_free_pdptr>

	return phys_pagedir;
  10520c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10520f:	83 c4 34             	add    $0x34,%esp
  105212:	5e                   	pop    %esi
  105213:	5d                   	pop    %ebp
  105214:	c3                   	ret    
  105215:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10521c:	00 00 00 00 

00105220 <vmm_create_vpdraw>:
uint32_t* active_pagetables = (uint32_t*) (ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*) (ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  105220:	55                   	push   %ebp
  105221:	89 e5                	mov    %esp,%ebp
  105223:	53                   	push   %ebx
  105224:	57                   	push   %edi
  105225:	56                   	push   %esi
  105226:	83 ec 4c             	sub    $0x4c,%esp
  105229:	8b 45 08             	mov    0x8(%ebp),%eax
  10522c:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  10522f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t phys_context = 0;
  105232:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct vmm_context* context = vmm_alloc(&phys_context);
  105239:	89 0c 24             	mov    %ecx,(%esp)
  10523c:	e8 6f 05 00 00       	call   1057b0 <vmm_alloc>
  105241:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  105244:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uint32_t phys_pagedir = 0;
  105247:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	context->pagedir = vmm_alloc(&phys_pagedir);
  10524e:	89 0c 24             	mov    %ecx,(%esp)
  105251:	e8 5a 05 00 00       	call   1057b0 <vmm_alloc>
  105256:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  105259:	89 01                	mov    %eax,(%ecx)
	if (pagedir != 0)
  10525b:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105262:	0f 84 08 00 00 00    	je     105270 <vmm_create_vpdraw+0x50>
		*pagedir = phys_pagedir;
  105268:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10526b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10526e:	89 01                	mov    %eax,(%ecx)
  105270:	b8 00 00 00 00       	mov    $0x0,%eax

	uint32_t* pagedir_ptr = vmm_alloc(0);
  105275:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10527c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10527f:	e8 2c 05 00 00       	call   1057b0 <vmm_alloc>
  105284:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  105287:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  10528e:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  105295:	0f 83 25 01 00 00    	jae    1053c0 <vmm_create_vpdraw+0x1a0>
  10529b:	8d 45 dc             	lea    -0x24(%ebp),%eax
		pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  10529e:	89 04 24             	mov    %eax,(%esp)
  1052a1:	e8 0a 05 00 00       	call   1057b0 <vmm_alloc>
  1052a6:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1052a9:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1052ac:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i < PMEM_TABLES) {
  1052af:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  1052b6:	0f 83 4d 00 00 00    	jae    105309 <vmm_create_vpdraw+0xe9>
			vmm_free((void*) (pagedir_ptr[i]));
  1052bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1052bf:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1052c2:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1052c5:	89 04 24             	mov    %eax,(%esp)
  1052c8:	e8 33 05 00 00       	call   105800 <vmm_free>
  1052cd:	b8 00 00 00 00       	mov    $0x0,%eax
			map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  1052d2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1052d5:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1052d8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1052db:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1052de:	8b 14 95 90 94 18 00 	mov    0x189490(,%edx,4),%edx
  1052e5:	89 0c 24             	mov    %ecx,(%esp)
  1052e8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1052ec:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1052f3:	00 
  1052f4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1052f7:	e8 84 05 00 00       	call   105880 <map_address_active>
			paddr = kernel_pagetables[i];
  1052fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1052ff:	8b 04 85 90 94 18 00 	mov    0x189490(,%eax,4),%eax
  105306:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  105309:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10530c:	0d 01 00 00 00       	or     $0x1,%eax
  105311:	0d 02 00 00 00       	or     $0x2,%eax
  105316:	0d 04 00 00 00       	or     $0x4,%eax
  10531b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10531e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105321:	8b 12                	mov    (%edx),%edx
  105323:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
  105326:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  10532d:	0f 82 78 00 00 00    	jb     1053ab <vmm_create_vpdraw+0x18b>
			for (i2 = 0; i2 < 1024; i2++) {
  105333:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  10533a:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  105341:	0f 83 5f 00 00 00    	jae    1053a6 <vmm_create_vpdraw+0x186>
  105347:	b8 04 00 00 00       	mov    $0x4,%eax
  10534c:	b9 00 00 00 00       	mov    $0x0,%ecx
  105351:	ba 00 02 00 00       	mov    $0x200,%edx
				uint32_t vaddr = (i << 22) + (i2 << 12);
  105356:	8b 75 d8             	mov    -0x28(%ebp),%esi
  105359:	c1 e6 16             	shl    $0x16,%esi
  10535c:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  10535f:	c1 e7 0c             	shl    $0xc,%edi
  105362:	01 fe                	add    %edi,%esi
  105364:	89 75 d0             	mov    %esi,-0x30(%ebp)

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  105367:	81 7d d0 00 00 80 00 	cmpl   $0x800000,-0x30(%ebp)
  10536e:	0f 97 c3             	seta   %bl
  105371:	84 db                	test   %bl,%bl
  105373:	0f 44 d1             	cmove  %ecx,%edx
  105376:	81 7d d0 00 10 40 20 	cmpl   $0x20401000,-0x30(%ebp)
  10537d:	0f 97 c3             	seta   %bl
  105380:	84 db                	test   %bl,%bl
  105382:	0f 44 c1             	cmove  %ecx,%eax
  105385:	09 c2                	or     %eax,%edx
  105387:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10538a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10538d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  105390:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  105393:	89 14 81             	mov    %edx,(%ecx,%eax,4)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
  105396:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105399:	05 01 00 00 00       	add    $0x1,%eax
  10539e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1053a1:	e9 94 ff ff ff       	jmp    10533a <vmm_create_vpdraw+0x11a>

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
						(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
  1053a6:	e9 00 00 00 00       	jmp    1053ab <vmm_create_vpdraw+0x18b>
	}
  1053ab:	e9 00 00 00 00       	jmp    1053b0 <vmm_create_vpdraw+0x190>
		*pagedir = phys_pagedir;

	uint32_t* pagedir_ptr = vmm_alloc(0);
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  1053b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1053b3:	05 01 00 00 00       	add    $0x1,%eax
  1053b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1053bb:	e9 ce fe ff ff       	jmp    10528e <vmm_create_vpdraw+0x6e>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  1053c0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  1053c7:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  1053ce:	0f 83 58 00 00 00    	jae    10542c <vmm_create_vpdraw+0x20c>
  1053d4:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
  1053d9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1053dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1053df:	8b 12                	mov    (%edx),%edx
  1053e1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1053e4:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  1053ea:	89 4d dc             	mov    %ecx,-0x24(%ebp)
		map_address_context(pagedir_ptr,
  1053ed:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1053f0:	8b 15 c4 61 10 00    	mov    0x1061c4,%edx
  1053f6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1053f9:	c1 e6 0c             	shl    $0xc,%esi
  1053fc:	01 f2                	add    %esi,%edx
  1053fe:	8b 75 dc             	mov    -0x24(%ebp),%esi
  105401:	89 0c 24             	mov    %ecx,(%esp)
  105404:	89 54 24 04          	mov    %edx,0x4(%esp)
  105408:	89 74 24 08          	mov    %esi,0x8(%esp)
  10540c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105413:	00 
  105414:	89 45 c0             	mov    %eax,-0x40(%ebp)
  105417:	e8 14 01 00 00       	call   105530 <map_address_context>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  10541c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10541f:	05 01 00 00 00       	add    $0x1,%eax
  105424:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105427:	e9 9b ff ff ff       	jmp    1053c7 <vmm_create_vpdraw+0x1a7>
  10542c:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
  105431:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105434:	8b 15 c8 61 10 00    	mov    0x1061c8,%edx
  10543a:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10543d:	89 0c 24             	mov    %ecx,(%esp)
  105440:	89 54 24 04          	mov    %edx,0x4(%esp)
  105444:	89 74 24 08          	mov    %esi,0x8(%esp)
  105448:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10544f:	00 
  105450:	89 45 bc             	mov    %eax,-0x44(%ebp)
  105453:	e8 d8 00 00 00       	call   105530 <map_address_context>
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  105458:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  10545f:	8d 05 00 a0 18 00    	lea    0x18a000,%eax
  105465:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  105468:	0f 83 39 00 00 00    	jae    1054a7 <vmm_create_vpdraw+0x287>
  10546e:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(pagedir_ptr, i, i, 0);
  105473:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105476:	8b 55 d8             	mov    -0x28(%ebp),%edx
  105479:	8b 75 d8             	mov    -0x28(%ebp),%esi
  10547c:	89 0c 24             	mov    %ecx,(%esp)
  10547f:	89 54 24 04          	mov    %edx,0x4(%esp)
  105483:	89 74 24 08          	mov    %esi,0x8(%esp)
  105487:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10548e:	00 
  10548f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  105492:	e8 99 00 00 00       	call   105530 <map_address_context>
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  105497:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10549a:	05 00 10 00 00       	add    $0x1000,%eax
  10549f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1054a2:	e9 b8 ff ff ff       	jmp    10545f <vmm_create_vpdraw+0x23f>
		map_address_context(pagedir_ptr, i, i, 0);
	}

	uint32_t* pd_ptr = context->pagedir;
  1054a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1054aa:	8b 00                	mov    (%eax),%eax
  1054ac:	89 45 cc             	mov    %eax,-0x34(%ebp)
	context->pagedir = (uint32_t*) phys_pagedir;
  1054af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1054b2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1054b5:	89 01                	mov    %eax,(%ecx)

	vmm_unmap(pd_ptr);
  1054b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1054ba:	89 04 24             	mov    %eax,(%esp)
  1054bd:	e8 fe 00 00 00       	call   1055c0 <vmm_unmap>
	vmm_unmap(context);
  1054c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1054c5:	89 04 24             	mov    %eax,(%esp)
  1054c8:	e8 f3 00 00 00       	call   1055c0 <vmm_unmap>

	return pagedir_ptr;
  1054cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1054d0:	83 c4 4c             	add    $0x4c,%esp
  1054d3:	5e                   	pop    %esi
  1054d4:	5f                   	pop    %edi
  1054d5:	5b                   	pop    %ebx
  1054d6:	5d                   	pop    %ebp
  1054d7:	c3                   	ret    
  1054d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  1054df:	00 

001054e0 <vmm_alloc_user>:

void* vmm_alloc_ucont(uint32_t cont) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  1054e0:	55                   	push   %ebp
  1054e1:	89 e5                	mov    %esp,%ebp
  1054e3:	56                   	push   %esi
  1054e4:	83 ec 24             	sub    $0x24,%esp
  1054e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1054ea:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  1054ef:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  1054f4:	be 01 00 00 00       	mov    $0x1,%esi
  1054f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  1054fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1054ff:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  105506:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  10550d:	ff 
  10550e:	89 44 24 08          	mov    %eax,0x8(%esp)
  105512:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  105519:	00 
  10551a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10551d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105520:	89 55 ec             	mov    %edx,-0x14(%ebp)
  105523:	e8 b8 04 00 00       	call   1059e0 <vmm_alloc_in_range>
  105528:	83 c4 24             	add    $0x24,%esp
  10552b:	5e                   	pop    %esi
  10552c:	5d                   	pop    %ebp
  10552d:	c3                   	ret    
  10552e:	66 90                	xchg   %ax,%ax

00105530 <map_address_context>:
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
  105530:	55                   	push   %ebp
  105531:	89 e5                	mov    %esp,%ebp
  105533:	56                   	push   %esi
  105534:	83 ec 18             	sub    $0x18,%esp
  105537:	8b 45 14             	mov    0x14(%ebp),%eax
  10553a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10553d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105540:	8b 75 08             	mov    0x8(%ebp),%esi
  105543:	89 75 f8             	mov    %esi,-0x8(%ebp)
  105546:	89 55 f4             	mov    %edx,-0xc(%ebp)
  105549:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10554c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32_t pd_entry = vaddr >> 22;
  10554f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105552:	c1 e8 16             	shr    $0x16,%eax
  105555:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32_t pt_entry = (vaddr >> 12) % 1024;
  105558:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10555b:	c1 e8 0c             	shr    $0xc,%eax
  10555e:	25 ff 03 00 00       	and    $0x3ff,%eax
  105563:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  105566:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105569:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10556e:	0d 01 00 00 00       	or     $0x1,%eax
  105573:	0d 02 00 00 00       	or     $0x2,%eax
  105578:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10557b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  105581:	09 c8                	or     %ecx,%eax
  105583:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105586:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105589:	8b 75 f8             	mov    -0x8(%ebp),%esi
  10558c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10558f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  105595:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105598:	81 e1 04 02 00 00    	and    $0x204,%ecx
  10559e:	09 c8                	or     %ecx,%eax
  1055a0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1055a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1055a6:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1055a9:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1055ac:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  1055b2:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}
  1055b5:	83 c4 18             	add    $0x18,%esp
  1055b8:	5e                   	pop    %esi
  1055b9:	5d                   	pop    %ebp
  1055ba:	c3                   	ret    
  1055bb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001055c0 <vmm_unmap>:
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  1055c0:	55                   	push   %ebp
  1055c1:	89 e5                	mov    %esp,%ebp
  1055c3:	83 ec 08             	sub    $0x8,%esp
  1055c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1055c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  1055cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1055cf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  1055d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1055d5:	c1 e8 0c             	shr    $0xc,%eax
  1055d8:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  1055de:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1055e1:	25 01 02 00 00       	and    $0x201,%eax
  1055e6:	3d 01 02 00 00       	cmp    $0x201,%eax
  1055eb:	0f 85 2e 00 00 00    	jne    10561f <vmm_unmap+0x5f>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  1055f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1055f4:	c1 e8 0c             	shr    $0xc,%eax
  1055f7:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  1055fd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105600:	25 04 00 00 00       	and    $0x4,%eax
  105605:	0d 00 02 00 00       	or     $0x200,%eax
  10560a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10560d:	c1 e9 0c             	shr    $0xc,%ecx
  105610:	8b 15 c4 61 10 00    	mov    0x1061c4,%edx
  105616:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  105619:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10561c:	0f 01 38             	invlpg (%eax)
	}
}
  10561f:	83 c4 08             	add    $0x8,%esp
  105622:	5d                   	pop    %ebp
  105623:	c3                   	ret    
  105624:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10562b:	00 00 00 00 00 

00105630 <vmm_free_pdptr>:
	vmm_unmap(context);

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  105630:	55                   	push   %ebp
  105631:	89 e5                	mov    %esp,%ebp
  105633:	83 ec 18             	sub    $0x18,%esp
  105636:	8b 45 08             	mov    0x8(%ebp),%eax
  105639:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (uint32_t i = 0; i < 1024; i++) {
  10563c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  105643:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  10564a:	0f 83 21 00 00 00    	jae    105671 <vmm_free_pdptr+0x41>
		vmm_unmap((void*) pagedir_ptr[i]);
  105650:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105653:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105656:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105659:	89 04 24             	mov    %eax,(%esp)
  10565c:	e8 5f ff ff ff       	call   1055c0 <vmm_unmap>

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
	for (uint32_t i = 0; i < 1024; i++) {
  105661:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105664:	05 01 00 00 00       	add    $0x1,%eax
  105669:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10566c:	e9 d2 ff ff ff       	jmp    105643 <vmm_free_pdptr+0x13>
		vmm_unmap((void*) pagedir_ptr[i]);
	}

	vmm_unmap(pagedir_ptr);
  105671:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105674:	89 04 24             	mov    %eax,(%esp)
  105677:	e8 44 ff ff ff       	call   1055c0 <vmm_unmap>
}
  10567c:	83 c4 18             	add    $0x18,%esp
  10567f:	5d                   	pop    %ebp
  105680:	c3                   	ret    
  105681:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105688:	0f 1f 84 00 00 00 00 
  10568f:	00 

00105690 <vmm_create_pagedir>:
	vmm_free_pdptr(pdptr);

	return phys_pagedir;
}

uint32_t vmm_create_pagedir() {
  105690:	55                   	push   %ebp
  105691:	89 e5                	mov    %esp,%ebp
  105693:	83 ec 18             	sub    $0x18,%esp
  105696:	8d 45 fc             	lea    -0x4(%ebp),%eax
	uint32_t phys_pagedir;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  105699:	89 04 24             	mov    %eax,(%esp)
  10569c:	e8 7f fb ff ff       	call   105220 <vmm_create_vpdraw>
  1056a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	vmm_free_pdptr(pdptr);
  1056a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1056a7:	89 04 24             	mov    %eax,(%esp)
  1056aa:	e8 81 ff ff ff       	call   105630 <vmm_free_pdptr>

	return phys_pagedir;
  1056af:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1056b2:	83 c4 18             	add    $0x18,%esp
  1056b5:	5d                   	pop    %ebp
  1056b6:	c3                   	ret    
  1056b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1056be:	00 00 

001056c0 <vmm_resolve>:
}

uint32_t vmm_resolve(void* vaddr) {
  1056c0:	55                   	push   %ebp
  1056c1:	89 e5                	mov    %esp,%ebp
  1056c3:	50                   	push   %eax
  1056c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1056c7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return active_pagetables[(uint32_t) vaddr >> 12] & 0xFFFFF000;
  1056ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1056cd:	c1 e8 0c             	shr    $0xc,%eax
  1056d0:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  1056d6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1056d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1056de:	83 c4 04             	add    $0x4,%esp
  1056e1:	5d                   	pop    %ebp
  1056e2:	c3                   	ret    
  1056e3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1056ea:	84 00 00 00 00 00 

001056f0 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  1056f0:	55                   	push   %ebp
  1056f1:	89 e5                	mov    %esp,%ebp
  1056f3:	83 ec 38             	sub    $0x38,%esp
  1056f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1056f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1056fc:	ba 00 00 00 00       	mov    $0x0,%edx
  105701:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  105704:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uint32_t pd_entry = (uint32_t) vaddr >> 22;
  105707:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10570a:	c1 e8 16             	shr    $0x16,%eax
  10570d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = ((uint32_t) vaddr >> 12) % 1024;
  105710:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105713:	c1 e8 0c             	shr    $0xc,%eax
  105716:	25 ff 03 00 00       	and    $0x3ff,%eax
  10571b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32_t* vpd = vmm_alloc(0);
  10571e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105725:	89 55 e0             	mov    %edx,-0x20(%ebp)
  105728:	e8 83 00 00 00       	call   1057b0 <vmm_alloc>
  10572d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vmm_free(vpd);
  105730:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105733:	89 04 24             	mov    %eax,(%esp)
  105736:	e8 c5 00 00 00       	call   105800 <vmm_free>
  10573b:	b8 00 00 00 00       	mov    $0x0,%eax

	map_address_active((uint32_t) vpd, pdir, 0);
  105740:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105743:	8b 55 fc             	mov    -0x4(%ebp),%edx
  105746:	89 0c 24             	mov    %ecx,(%esp)
  105749:	89 54 24 04          	mov    %edx,0x4(%esp)
  10574d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105754:	00 
  105755:	89 45 dc             	mov    %eax,-0x24(%ebp)
  105758:	e8 23 01 00 00       	call   105880 <map_address_active>
  10575d:	b8 00 00 00 00       	mov    $0x0,%eax
	uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  105762:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105765:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105768:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  10576b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  105771:	89 4d e8             	mov    %ecx,-0x18(%ebp)

	map_address_active((uint32_t) vpd, table, 0);
  105774:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105777:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10577a:	89 0c 24             	mov    %ecx,(%esp)
  10577d:	89 54 24 04          	mov    %edx,0x4(%esp)
  105781:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105788:	00 
  105789:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10578c:	e8 ef 00 00 00       	call   105880 <map_address_active>
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  105791:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105794:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105797:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10579a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10579f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	return addr & 0xFFFFF000;
  1057a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1057a5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1057aa:	83 c4 38             	add    $0x38,%esp
  1057ad:	5d                   	pop    %ebp
  1057ae:	c3                   	ret    
  1057af:	90                   	nop

001057b0 <vmm_alloc>:

void* vmm_alloc_cont(uint32_t cont) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
}

void* vmm_alloc(uint32_t* retpaddr) {
  1057b0:	55                   	push   %ebp
  1057b1:	89 e5                	mov    %esp,%ebp
  1057b3:	56                   	push   %esi
  1057b4:	83 ec 24             	sub    $0x24,%esp
  1057b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1057ba:	b9 00 00 80 00       	mov    $0x800000,%ecx
  1057bf:	ba 00 00 00 20       	mov    $0x20000000,%edx
  1057c4:	be 01 00 00 00       	mov    $0x1,%esi
  1057c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  1057cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1057cf:	c7 04 24 00 00 80 00 	movl   $0x800000,(%esp)
  1057d6:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  1057dd:	20 
  1057de:	89 44 24 08          	mov    %eax,0x8(%esp)
  1057e2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1057e9:	00 
  1057ea:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1057ed:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1057f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1057f3:	e8 e8 01 00 00       	call   1059e0 <vmm_alloc_in_range>
  1057f8:	83 c4 24             	add    $0x24,%esp
  1057fb:	5e                   	pop    %esi
  1057fc:	5d                   	pop    %ebp
  1057fd:	c3                   	ret    
  1057fe:	66 90                	xchg   %ax,%ax

00105800 <vmm_free>:
			| PT_WRITE | (flags & 0xFFF)
			| (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  105800:	55                   	push   %ebp
  105801:	89 e5                	mov    %esp,%ebp
  105803:	83 ec 18             	sub    $0x18,%esp
  105806:	8b 45 08             	mov    0x8(%ebp),%eax
  105809:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  10580c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10580f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  105812:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105815:	c1 e8 0c             	shr    $0xc,%eax
  105818:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  10581e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105821:	25 01 02 00 00       	and    $0x201,%eax
  105826:	3d 01 02 00 00       	cmp    $0x201,%eax
  10582b:	0f 85 4a 00 00 00    	jne    10587b <vmm_free+0x7b>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));
  105831:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105834:	c1 e8 0c             	shr    $0xc,%eax
  105837:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  10583d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105840:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105845:	89 04 24             	mov    %eax,(%esp)
  105848:	e8 c3 ca ff ff       	call   102310 <pmm_free>

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  10584d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105850:	c1 e8 0c             	shr    $0xc,%eax
  105853:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  105859:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10585c:	25 04 00 00 00       	and    $0x4,%eax
  105861:	0d 00 02 00 00       	or     $0x200,%eax
  105866:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105869:	c1 e9 0c             	shr    $0xc,%ecx
  10586c:	8b 15 c4 61 10 00    	mov    0x1061c4,%edx
  105872:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  105875:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105878:	0f 01 38             	invlpg (%eax)
	}
}
  10587b:	83 c4 18             	add    $0x18,%esp
  10587e:	5d                   	pop    %ebp
  10587f:	c3                   	ret    

00105880 <map_address_active>:
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  105880:	55                   	push   %ebp
  105881:	89 e5                	mov    %esp,%ebp
  105883:	83 ec 0c             	sub    $0xc,%esp
  105886:	8b 45 10             	mov    0x10(%ebp),%eax
  105889:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10588c:	8b 55 08             	mov    0x8(%ebp),%edx
  10588f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  105892:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105895:	89 45 f4             	mov    %eax,-0xc(%ebp)
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT
  105898:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10589b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1058a0:	0d 01 00 00 00       	or     $0x1,%eax
  1058a5:	0d 02 00 00 00       	or     $0x2,%eax
  1058aa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1058ad:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  1058b3:	09 c8                	or     %ecx,%eax
  1058b5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1058b8:	c1 e9 0c             	shr    $0xc,%ecx
  1058bb:	8b 15 c4 61 10 00    	mov    0x1061c4,%edx
  1058c1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1058c4:	81 e1 04 02 00 00    	and    $0x204,%ecx
  1058ca:	09 c8                	or     %ecx,%eax
  1058cc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1058cf:	c1 e9 0c             	shr    $0xc,%ecx
  1058d2:	8b 15 c4 61 10 00    	mov    0x1061c4,%edx
  1058d8:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			| PT_WRITE | (flags & 0xFFF)
			| (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  1058db:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1058de:	0f 01 38             	invlpg (%eax)
}
  1058e1:	83 c4 0c             	add    $0xc,%esp
  1058e4:	5d                   	pop    %ebp
  1058e5:	c3                   	ret    
  1058e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1058ed:	00 00 00 

001058f0 <vmm_map_range>:
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;

	return addr & 0xFFFFF000;
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  1058f0:	55                   	push   %ebp
  1058f1:	89 e5                	mov    %esp,%ebp
  1058f3:	56                   	push   %esi
  1058f4:	83 ec 24             	sub    $0x24,%esp
  1058f7:	8b 45 14             	mov    0x14(%ebp),%eax
  1058fa:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1058fd:	8b 55 0c             	mov    0xc(%ebp),%edx
  105900:	8b 75 08             	mov    0x8(%ebp),%esi
  105903:	89 75 f8             	mov    %esi,-0x8(%ebp)
  105906:	89 55 f4             	mov    %edx,-0xc(%ebp)
  105909:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10590c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((uint32_t) vaddr & 0xFFF)
  10590f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105912:	25 ff 0f 00 00       	and    $0xfff,%eax
  105917:	3d 00 00 00 00       	cmp    $0x0,%eax
  10591c:	0f 84 05 00 00 00    	je     105927 <vmm_map_range+0x37>
		return;
  105922:	e9 5a 00 00 00       	jmp    105981 <vmm_map_range+0x91>
	if ((uint32_t) paddr & 0xFFF)
  105927:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10592a:	25 ff 0f 00 00       	and    $0xfff,%eax
  10592f:	3d 00 00 00 00       	cmp    $0x0,%eax
  105934:	0f 84 05 00 00 00    	je     10593f <vmm_map_range+0x4f>
		return;
  10593a:	e9 42 00 00 00       	jmp    105981 <vmm_map_range+0x91>

	for (uint32_t i = 0; i < length; i += 0x1000) {
  10593f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  105946:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105949:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10594c:	0f 83 2f 00 00 00    	jae    105981 <vmm_map_range+0x91>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
  105952:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105955:	03 45 e8             	add    -0x18(%ebp),%eax
  105958:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10595b:	03 4d e8             	add    -0x18(%ebp),%ecx
  10595e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105961:	89 04 24             	mov    %eax,(%esp)
  105964:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105968:	89 54 24 08          	mov    %edx,0x8(%esp)
  10596c:	e8 0f ff ff ff       	call   105880 <map_address_active>
	if ((uint32_t) vaddr & 0xFFF)
		return;
	if ((uint32_t) paddr & 0xFFF)
		return;

	for (uint32_t i = 0; i < length; i += 0x1000) {
  105971:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105974:	05 00 10 00 00       	add    $0x1000,%eax
  105979:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10597c:	e9 c5 ff ff ff       	jmp    105946 <vmm_map_range+0x56>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}
  105981:	83 c4 24             	add    $0x24,%esp
  105984:	5e                   	pop    %esi
  105985:	5d                   	pop    %ebp
  105986:	c3                   	ret    
  105987:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10598e:	00 00 

00105990 <vmm_alloc_ucont>:
	}

	return vaddr;
}

void* vmm_alloc_ucont(uint32_t cont) {
  105990:	55                   	push   %ebp
  105991:	89 e5                	mov    %esp,%ebp
  105993:	56                   	push   %esi
  105994:	83 ec 24             	sub    $0x24,%esp
  105997:	8b 45 08             	mov    0x8(%ebp),%eax
  10599a:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  10599f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  1059a4:	be 00 00 00 00       	mov    $0x0,%esi
  1059a9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  1059ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1059af:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  1059b6:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  1059bd:	ff 
  1059be:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1059c5:	00 
  1059c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  1059ca:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1059cd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1059d0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1059d3:	e8 08 00 00 00       	call   1059e0 <vmm_alloc_in_range>
  1059d8:	83 c4 24             	add    $0x24,%esp
  1059db:	5e                   	pop    %esi
  1059dc:	5d                   	pop    %ebp
  1059dd:	c3                   	ret    
  1059de:	66 90                	xchg   %ax,%ax

001059e0 <vmm_alloc_in_range>:
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr,
		uint32_t cont) {
  1059e0:	55                   	push   %ebp
  1059e1:	89 e5                	mov    %esp,%ebp
  1059e3:	56                   	push   %esi
  1059e4:	83 ec 34             	sub    $0x34,%esp
  1059e7:	8b 45 14             	mov    0x14(%ebp),%eax
  1059ea:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1059ed:	8b 55 0c             	mov    0xc(%ebp),%edx
  1059f0:	8b 75 08             	mov    0x8(%ebp),%esi
  1059f3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  1059f6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1059f9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1059fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* vaddr = 0;
  1059ff:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32_t i = 0;
  105a06:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32_t c = 0;
  105a0d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  105a14:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105a17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105a1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105a1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105a22:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  105a25:	0f 83 6f 00 00 00    	jae    105a9a <vmm_alloc_in_range+0xba>
		if ((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  105a2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105a2e:	c1 e8 0c             	shr    $0xc,%eax
  105a31:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  105a37:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105a3a:	25 01 02 00 00       	and    $0x201,%eax
  105a3f:	3d 00 02 00 00       	cmp    $0x200,%eax
  105a44:	0f 85 34 00 00 00    	jne    105a7e <vmm_alloc_in_range+0x9e>
				== PT_ALLOCATABLE) {
			if (c == 0)
  105a4a:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  105a51:	0f 85 06 00 00 00    	jne    105a5d <vmm_alloc_in_range+0x7d>
				vaddr = (void*) i;
  105a57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105a5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
			c++;
  105a5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105a60:	05 01 00 00 00       	add    $0x1,%eax
  105a65:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (c >= cont)
  105a68:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105a6b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  105a6e:	0f 82 05 00 00 00    	jb     105a79 <vmm_alloc_in_range+0x99>
				break;
  105a74:	e9 21 00 00 00       	jmp    105a9a <vmm_alloc_in_range+0xba>
		} else {
  105a79:	e9 07 00 00 00       	jmp    105a85 <vmm_alloc_in_range+0xa5>
			c = 0;
  105a7e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
	}
  105a85:	e9 00 00 00 00       	jmp    105a8a <vmm_alloc_in_range+0xaa>
		uint32_t cont) {
	void* vaddr = 0;
	uint32_t i = 0;
	uint32_t c = 0;

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  105a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105a8d:	05 00 10 00 00       	add    $0x1000,%eax
  105a92:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105a95:	e9 85 ff ff ff       	jmp    105a1f <vmm_alloc_in_range+0x3f>
		} else {
			c = 0;
		}
	}

	uint32_t off = 0;
  105a9a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	while (c--) {
  105aa1:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105aa4:	89 c1                	mov    %eax,%ecx
  105aa6:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  105aac:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  105aaf:	3d 00 00 00 00       	cmp    $0x0,%eax
  105ab4:	0f 84 59 00 00 00    	je     105b13 <vmm_alloc_in_range+0x133>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
  105aba:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105abd:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105ac0:	c1 e1 0c             	shl    $0xc,%ecx
  105ac3:	01 c8                	add    %ecx,%eax
  105ac5:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  105acc:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105acf:	0f 85 0b 00 00 00    	jne    105ae0 <vmm_alloc_in_range+0x100>
  105ad5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105ad8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  105adb:	e9 0d 00 00 00       	jmp    105aed <vmm_alloc_in_range+0x10d>
  105ae0:	b8 00 00 00 00       	mov    $0x0,%eax
  105ae5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  105ae8:	e9 00 00 00 00       	jmp    105aed <vmm_alloc_in_range+0x10d>
  105aed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105af0:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105af3:	89 0c 24             	mov    %ecx,(%esp)
  105af6:	89 44 24 04          	mov    %eax,0x4(%esp)
  105afa:	e8 71 00 00 00       	call   105b70 <vmm_alloc_addr>
		off++;
  105aff:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105b02:	81 c1 01 00 00 00    	add    $0x1,%ecx
  105b08:	89 4d dc             	mov    %ecx,-0x24(%ebp)
	}
  105b0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  105b0e:	e9 8e ff ff ff       	jmp    105aa1 <vmm_alloc_in_range+0xc1>

	return vaddr;
  105b13:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105b16:	83 c4 34             	add    $0x34,%esp
  105b19:	5e                   	pop    %esi
  105b1a:	5d                   	pop    %ebp
  105b1b:	c3                   	ret    
  105b1c:	0f 1f 40 00          	nopl   0x0(%eax)

00105b20 <vmm_alloc_cont>:

void* vmm_alloc_user(uint32_t* retpaddr) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
}

void* vmm_alloc_cont(uint32_t cont) {
  105b20:	55                   	push   %ebp
  105b21:	89 e5                	mov    %esp,%ebp
  105b23:	56                   	push   %esi
  105b24:	83 ec 24             	sub    $0x24,%esp
  105b27:	8b 45 08             	mov    0x8(%ebp),%eax
  105b2a:	b9 00 00 80 00       	mov    $0x800000,%ecx
  105b2f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  105b34:	be 00 00 00 00       	mov    $0x0,%esi
  105b39:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  105b3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105b3f:	c7 04 24 00 00 80 00 	movl   $0x800000,(%esp)
  105b46:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  105b4d:	20 
  105b4e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105b55:	00 
  105b56:	89 44 24 0c          	mov    %eax,0xc(%esp)
  105b5a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105b5d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105b60:	89 55 ec             	mov    %edx,-0x14(%ebp)
  105b63:	e8 78 fe ff ff       	call   1059e0 <vmm_alloc_in_range>
  105b68:	83 c4 24             	add    $0x24,%esp
  105b6b:	5e                   	pop    %esi
  105b6c:	5d                   	pop    %ebp
  105b6d:	c3                   	ret    
  105b6e:	66 90                	xchg   %ax,%ax

00105b70 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  105b70:	55                   	push   %ebp
  105b71:	89 e5                	mov    %esp,%ebp
  105b73:	56                   	push   %esi
  105b74:	83 ec 34             	sub    $0x34,%esp
  105b77:	8b 45 0c             	mov    0xc(%ebp),%eax
  105b7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105b7d:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  105b80:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (reqvaddr == 0) {
  105b83:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  105b8a:	0f 85 34 00 00 00    	jne    105bc4 <vmm_alloc_addr+0x54>
  105b90:	8d 05 c0 75 10 00    	lea    0x1075c0,%eax
  105b96:	b9 00 00 00 00       	mov    $0x0,%ecx
		kprintf(
  105b9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105b9e:	89 04 24             	mov    %eax,(%esp)
  105ba1:	89 54 24 04          	mov    %edx,0x4(%esp)
  105ba5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105bac:	00 
  105bad:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  105bb0:	e8 9b a9 ff ff       	call   100550 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
  105bb5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  105bbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105bbf:	e9 9b 00 00 00       	jmp    105c5f <vmm_alloc_addr+0xef>
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  105bc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105bc7:	c1 e8 0c             	shr    $0xc,%eax
  105bca:	8b 0d c4 61 10 00    	mov    0x1061c4,%ecx
  105bd0:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105bd3:	25 01 02 00 00       	and    $0x201,%eax
  105bd8:	3d 00 02 00 00       	cmp    $0x200,%eax
  105bdd:	0f 84 37 00 00 00    	je     105c1a <vmm_alloc_addr+0xaa>
  105be3:	8d 05 c0 75 10 00    	lea    0x1075c0,%eax
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
  105be9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105bec:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105bef:	c1 ea 0c             	shr    $0xc,%edx
  105bf2:	8b 35 c4 61 10 00    	mov    0x1061c4,%esi
  105bf8:	8b 14 96             	mov    (%esi,%edx,4),%edx
  105bfb:	89 04 24             	mov    %eax,(%esp)
  105bfe:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105c02:	89 54 24 08          	mov    %edx,0x8(%esp)
  105c06:	e8 45 a9 ff ff       	call   100550 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
		return 0;
  105c0b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  105c12:	89 45 e0             	mov    %eax,-0x20(%ebp)
  105c15:	e9 45 00 00 00       	jmp    105c5f <vmm_alloc_addr+0xef>
  105c1a:	b8 04 02 00 00       	mov    $0x204,%eax
	}

	uint32_t paddr = (uint32_t) pmm_alloc();
  105c1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  105c22:	e8 c9 c4 ff ff       	call   1020f0 <pmm_alloc>
  105c27:	89 45 ec             	mov    %eax,-0x14(%ebp)
	map_address_active((uint32_t) reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  105c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105c2d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105c30:	89 04 24             	mov    %eax,(%esp)
  105c33:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105c37:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  105c3e:	00 
  105c3f:	e8 3c fc ff ff       	call   105880 <map_address_active>

	if (retpaddr != 0)
  105c44:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105c4b:	0f 84 08 00 00 00    	je     105c59 <vmm_alloc_addr+0xe9>
		*retpaddr = paddr;
  105c51:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105c54:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105c57:	89 01                	mov    %eax,(%ecx)

	return reqvaddr;
  105c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105c5c:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  105c5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105c62:	83 c4 34             	add    $0x34,%esp
  105c65:	5e                   	pop    %esi
  105c66:	5d                   	pop    %ebp
  105c67:	c3                   	ret    
  105c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  105c6f:	00 

00105c70 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  105c70:	55                   	push   %ebp
  105c71:	89 e5                	mov    %esp,%ebp
  105c73:	50                   	push   %eax
  105c74:	8b 45 08             	mov    0x8(%ebp),%eax
  105c77:	89 45 fc             	mov    %eax,-0x4(%ebp)
	active_pagedir = pdpaddr;
  105c7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105c7d:	a3 58 94 10 00       	mov    %eax,0x109458
	asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  105c82:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105c85:	0f 22 d8             	mov    %eax,%cr3
}
  105c88:	83 c4 04             	add    $0x4,%esp
  105c8b:	5d                   	pop    %ebp
  105c8c:	c3                   	ret    
  105c8d:	0f 1f 00             	nopl   (%eax)

00105c90 <vmm_init>:

uint32_t vmm_init(void) {
  105c90:	55                   	push   %ebp
  105c91:	89 e5                	mov    %esp,%ebp
	//CREATE CONTEXT ************************************************************

	struct vmm_context* context = pmm_alloc();
  105c93:	53                   	push   %ebx
  105c94:	57                   	push   %edi
  105c95:	56                   	push   %esi
  105c96:	83 ec 3c             	sub    $0x3c,%esp
  105c99:	e8 52 c4 ff ff       	call   1020f0 <pmm_alloc>
  105c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t i, i2;

	context->pagedir = pmm_alloc();
  105ca1:	e8 4a c4 ff ff       	call   1020f0 <pmm_alloc>
  105ca6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105ca9:	89 01                	mov    %eax,(%ecx)

	for (i = 0; i < 1024; i++) {
  105cab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  105cb2:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  105cb9:	0f 83 d6 00 00 00    	jae    105d95 <vmm_init+0x105>
		context->pagedir[i] = ((uint32_t) pmm_alloc());
  105cbf:	e8 2c c4 ff ff       	call   1020f0 <pmm_alloc>
  105cc4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105cc7:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105cca:	8b 12                	mov    (%edx),%edx
  105ccc:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
		if (i < PMEM_TABLES) {
  105ccf:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  105cd6:	0f 83 15 00 00 00    	jae    105cf1 <vmm_init+0x61>
			kernel_pagetables[i] = context->pagedir[i];
  105cdc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105cdf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105ce2:	8b 09                	mov    (%ecx),%ecx
  105ce4:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105ce7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105cea:	89 04 8d 90 94 18 00 	mov    %eax,0x189490(,%ecx,4)
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  105cf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105cf4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105cf7:	8b 09                	mov    (%ecx),%ecx
  105cf9:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  105cfc:	81 ca 07 00 00 00    	or     $0x7,%edx
  105d02:	89 14 81             	mov    %edx,(%ecx,%eax,4)

		for (i2 = 0; i2 < 1024; i2++) {
  105d05:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  105d0c:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  105d13:	0f 83 67 00 00 00    	jae    105d80 <vmm_init+0xf0>
  105d19:	b8 04 00 00 00       	mov    $0x4,%eax
  105d1e:	b9 00 00 00 00       	mov    $0x0,%ecx
  105d23:	ba 00 02 00 00       	mov    $0x200,%edx
			uint32_t vaddr = (i << 22) + (i2 << 12);
  105d28:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105d2b:	c1 e6 16             	shl    $0x16,%esi
  105d2e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  105d31:	c1 e7 0c             	shl    $0xc,%edi
  105d34:	01 fe                	add    %edi,%esi
  105d36:	89 75 e4             	mov    %esi,-0x1c(%ebp)

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  105d39:	81 7d e4 00 00 80 00 	cmpl   $0x800000,-0x1c(%ebp)
  105d40:	0f 97 c3             	seta   %bl
  105d43:	84 db                	test   %bl,%bl
  105d45:	0f 44 d1             	cmove  %ecx,%edx
  105d48:	81 7d e4 00 10 40 20 	cmpl   $0x20401000,-0x1c(%ebp)
  105d4f:	0f 97 c3             	seta   %bl
  105d52:	84 db                	test   %bl,%bl
  105d54:	0f 44 c1             	cmove  %ecx,%eax
  105d57:	09 c2                	or     %eax,%edx
  105d59:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105d5c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105d5f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  105d62:	8b 36                	mov    (%esi),%esi
  105d64:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  105d67:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  105d6d:	89 14 81             	mov    %edx,(%ecx,%eax,4)
			kernel_pagetables[i] = context->pagedir[i];
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
  105d70:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105d73:	05 01 00 00 00       	add    $0x1,%eax
  105d78:	89 45 e8             	mov    %eax,-0x18(%ebp)
  105d7b:	e9 8c ff ff ff       	jmp    105d0c <vmm_init+0x7c>

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}
  105d80:	e9 00 00 00 00       	jmp    105d85 <vmm_init+0xf5>
	struct vmm_context* context = pmm_alloc();
	uint32_t i, i2;

	context->pagedir = pmm_alloc();

	for (i = 0; i < 1024; i++) {
  105d85:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105d88:	05 01 00 00 00       	add    $0x1,%eax
  105d8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105d90:	e9 1d ff ff ff       	jmp    105cb2 <vmm_init+0x22>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  105d95:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  105d9c:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  105da3:	0f 83 5a 00 00 00    	jae    105e03 <vmm_init+0x173>
  105da9:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  105dae:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105db1:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105db4:	8b 12                	mov    (%edx),%edx
  105db6:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105db9:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  105dbf:	89 4d e0             	mov    %ecx,-0x20(%ebp)
		map_address_context(context->pagedir,
  105dc2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105dc5:	8b 09                	mov    (%ecx),%ecx
  105dc7:	8b 15 c4 61 10 00    	mov    0x1061c4,%edx
  105dcd:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105dd0:	c1 e6 0c             	shl    $0xc,%esi
  105dd3:	01 f2                	add    %esi,%edx
  105dd5:	8b 75 e0             	mov    -0x20(%ebp),%esi
  105dd8:	89 0c 24             	mov    %ecx,(%esp)
  105ddb:	89 54 24 04          	mov    %edx,0x4(%esp)
  105ddf:	89 74 24 08          	mov    %esi,0x8(%esp)
  105de3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105dea:	00 
  105deb:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105dee:	e8 3d f7 ff ff       	call   105530 <map_address_context>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  105df3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105df6:	05 01 00 00 00       	add    $0x1,%eax
  105dfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105dfe:	e9 99 ff ff ff       	jmp    105d9c <vmm_init+0x10c>
  105e03:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
  105e08:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105e0b:	8b 09                	mov    (%ecx),%ecx
  105e0d:	8b 15 c8 61 10 00    	mov    0x1061c8,%edx
  105e13:	8b 75 f0             	mov    -0x10(%ebp),%esi
  105e16:	89 0c 24             	mov    %ecx,(%esp)
  105e19:	89 54 24 04          	mov    %edx,0x4(%esp)
  105e1d:	89 74 24 08          	mov    %esi,0x8(%esp)
  105e21:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105e28:	00 
  105e29:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  105e2c:	e8 ff f6 ff ff       	call   105530 <map_address_context>
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  105e31:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  105e38:	8d 05 00 a0 18 00    	lea    0x18a000,%eax
  105e3e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  105e41:	0f 83 3b 00 00 00    	jae    105e82 <vmm_init+0x1f2>
  105e47:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(context->pagedir, i, i, 0);
  105e4c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105e4f:	8b 09                	mov    (%ecx),%ecx
  105e51:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105e54:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105e57:	89 0c 24             	mov    %ecx,(%esp)
  105e5a:	89 54 24 04          	mov    %edx,0x4(%esp)
  105e5e:	89 74 24 08          	mov    %esi,0x8(%esp)
  105e62:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105e69:	00 
  105e6a:	89 45 d0             	mov    %eax,-0x30(%ebp)
  105e6d:	e8 be f6 ff ff       	call   105530 <map_address_context>
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  105e72:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105e75:	05 00 10 00 00       	add    $0x1000,%eax
  105e7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105e7d:	e9 b6 ff ff ff       	jmp    105e38 <vmm_init+0x1a8>
		map_address_context(context->pagedir, i, i, 0);
	}

	//END CREATE CONTEXT ********************************************************

	vmm_activate_pagedir((uint32_t) context->pagedir);
  105e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105e85:	8b 00                	mov    (%eax),%eax
  105e87:	89 04 24             	mov    %eax,(%esp)
  105e8a:	e8 e1 fd ff ff       	call   105c70 <vmm_activate_pagedir>

	uint32_t cr0;

	asm volatile("mov %%cr0, %0" : "=r" (cr0));
  105e8f:	0f 20 c0             	mov    %cr0,%eax
  105e92:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= (1 << 31);
  105e95:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105e98:	0d 00 00 00 80       	or     $0x80000000,%eax
  105e9d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	asm volatile("mov %0, %%cr0" : : "r" (cr0));
  105ea0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105ea3:	0f 22 c0             	mov    %eax,%cr0

	return (uint32_t) active_context->pagedir;
  105ea6:	a1 c8 61 10 00       	mov    0x1061c8,%eax
  105eab:	8b 00                	mov    (%eax),%eax
  105ead:	83 c4 3c             	add    $0x3c,%esp
  105eb0:	5e                   	pop    %esi
  105eb1:	5f                   	pop    %edi
  105eb2:	5b                   	pop    %ebx
  105eb3:	5d                   	pop    %ebp
  105eb4:	c3                   	ret    
  105eb5:	66 90                	xchg   %ax,%ax
  105eb7:	90                   	nop

00105eb8 <_start>:
  105eb8:	bc 5c 94 11 00       	mov    $0x11945c,%esp
  105ebd:	53                   	push   %ebx
  105ebe:	e8 4d a1 ff ff       	call   100010 <init>

00105ec3 <_stop>:
  105ec3:	fa                   	cli    
  105ec4:	f4                   	hlt    
  105ec5:	eb fc                	jmp    105ec3 <_stop>
