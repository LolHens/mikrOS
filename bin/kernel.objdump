
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaUSpaceDev 1.02"

void init(struct multiboot_info* mb_info) {
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	83 ec 28             	sub    $0x28,%esp
  100016:	8b 45 08             	mov    0x8(%ebp),%eax
  100019:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10001c:	e8 0f 02 00 00       	call   100230 <clrscr>
	pmm_init(mb_info);
  100021:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100024:	89 04 24             	mov    %eax,(%esp)
  100027:	e8 84 2c 00 00       	call   102cb0 <pmm_init>
  10002c:	8d 05 98 80 10 00    	lea    0x108098,%eax
  100032:	8d 0d bb 80 10 00    	lea    0x1080bb,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100038:	89 04 24             	mov    %eax,(%esp)
  10003b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10003f:	e8 6c 02 00 00       	call   1002b0 <kprintf>
  100044:	8d 0d cf 80 10 00    	lea    0x1080cf,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10004a:	89 0c 24             	mov    %ecx,(%esp)
  10004d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100050:	e8 5b 02 00 00       	call   1002b0 <kprintf>
  100055:	8d 0d 0e 81 10 00    	lea    0x10810e,%ecx

	kprintf("Initializing GDT...\n");
  10005b:	89 0c 24             	mov    %ecx,(%esp)
  10005e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100061:	e8 4a 02 00 00       	call   1002b0 <kprintf>

	init_gdt();
  100066:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100069:	e8 b2 0f 00 00       	call   101020 <init_gdt>
  10006e:	8d 05 23 81 10 00    	lea    0x108123,%eax

	kprintf("Initializing IDT...\n");
  100074:	89 04 24             	mov    %eax,(%esp)
  100077:	e8 34 02 00 00       	call   1002b0 <kprintf>
  10007c:	8d 0d 38 81 10 00    	lea    0x108138,%ecx

	init_idt();
  100082:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100085:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100088:	e8 b3 11 00 00       	call   101240 <init_idt>

	kprintf("Initializing Kernel...\n");
  10008d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100090:	89 04 24             	mov    %eax,(%esp)
  100093:	e8 18 02 00 00       	call   1002b0 <kprintf>

	pmm_print_stats();
  100098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10009b:	e8 20 2a 00 00       	call   102ac0 <pmm_print_stats>

	kernel_main(mb_info);
  1000a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000a3:	89 04 24             	mov    %eax,(%esp)
  1000a6:	e8 75 26 00 00       	call   102720 <kernel_main>

	return;
  1000ab:	83 c4 28             	add    $0x28,%esp
  1000ae:	5d                   	pop    %ebp
  1000af:	c3                   	ret    

001000b0 <in_cod>:
#include "catofdeath.h"

static uint32_t icod = 0;

uint32_t in_cod() {
  1000b0:	55                   	push   %ebp
  1000b1:	89 e5                	mov    %esp,%ebp
    return icod;
  1000b3:	a1 00 90 10 00       	mov    0x109000,%eax
  1000b8:	5d                   	pop    %ebp
  1000b9:	c3                   	ret    
  1000ba:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001000c0 <show_cod>:
}

void show_cod(struct cpu_state* cpu, char* fstr) {
  1000c0:	55                   	push   %ebp
  1000c1:	89 e5                	mov    %esp,%ebp
  1000c3:	56                   	push   %esi
  1000c4:	83 ec 24             	sub    $0x24,%esp
  1000c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1000cd:	ba 04 00 00 00       	mov    $0x4,%edx
  1000d2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1000d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    icod = 1;
  1000d8:	c7 05 00 90 10 00 01 	movl   $0x1,0x109000
  1000df:	00 00 00 
    kprintf ("          '''  \\   `-._.'`---^_))) \n");
    kprintf ("                `-._ )))       ``` \n");
    kprintf ("                     ```            \n");
#endif

    setclr(0x04);
  1000e2:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1000e9:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1000ec:	e8 9f 01 00 00       	call   100290 <setclr>
    kprintf(fstr);
  1000f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1000f4:	89 04 24             	mov    %eax,(%esp)
  1000f7:	e8 b4 01 00 00       	call   1002b0 <kprintf>
  1000fc:	8d 0d 50 81 10 00    	lea    0x108150,%ecx
    kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  100102:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100105:	8b 52 1c             	mov    0x1c(%edx),%edx
  100108:	8b 75 f8             	mov    -0x8(%ebp),%esi
  10010b:	8b 76 20             	mov    0x20(%esi),%esi
  10010e:	89 0c 24             	mov    %ecx,(%esp)
  100111:	89 54 24 04          	mov    %edx,0x4(%esp)
  100115:	89 74 24 08          	mov    %esi,0x8(%esp)
  100119:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10011c:	e8 8f 01 00 00       	call   1002b0 <kprintf>
    show_dump(cpu);
  100121:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100124:	89 0c 24             	mov    %ecx,(%esp)
  100127:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10012a:	e8 11 00 00 00       	call   100140 <show_dump>

    while (1) {
        asm volatile("cli; hlt");
  10012f:	fa                   	cli    
  100130:	f4                   	hlt    
    }
  100131:	e9 f9 ff ff ff       	jmp    10012f <show_cod+0x6f>
  100136:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10013d:	00 00 00 

00100140 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  100140:	55                   	push   %ebp
  100141:	89 e5                	mov    %esp,%ebp
  100143:	53                   	push   %ebx
  100144:	57                   	push   %edi
  100145:	56                   	push   %esi
  100146:	83 ec 2c             	sub    $0x2c,%esp
  100149:	8b 45 08             	mov    0x8(%ebp),%eax
  10014c:	8d 0d 75 81 10 00    	lea    0x108175,%ecx
  100152:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx,
  100155:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100158:	8b 00                	mov    (%eax),%eax
  10015a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10015d:	8b 52 04             	mov    0x4(%edx),%edx
  100160:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100163:	8b 76 08             	mov    0x8(%esi),%esi
  100166:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100169:	8b 7f 0c             	mov    0xc(%edi),%edi
  10016c:	89 0c 24             	mov    %ecx,(%esp)
  10016f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100173:	89 54 24 08          	mov    %edx,0x8(%esp)
  100177:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10017b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10017f:	e8 2c 01 00 00       	call   1002b0 <kprintf>
  100184:	8d 0d 96 81 10 00    	lea    0x108196,%ecx
            cpu->edx);
    kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp,
  10018a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10018d:	8b 52 10             	mov    0x10(%edx),%edx
  100190:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100193:	8b 76 14             	mov    0x14(%esi),%esi
  100196:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100199:	8b 7f 18             	mov    0x18(%edi),%edi
  10019c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10019f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  1001a2:	89 0c 24             	mov    %ecx,(%esp)
  1001a5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1001a9:	89 74 24 08          	mov    %esi,0x8(%esp)
  1001ad:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1001b1:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1001b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1001b8:	e8 f3 00 00 00       	call   1002b0 <kprintf>
  1001bd:	8d 0d b7 81 10 00    	lea    0x1081b7,%ecx
            cpu->eip);
    kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags,
  1001c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1001c6:	8b 52 28             	mov    0x28(%edx),%edx
  1001c9:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1001cc:	8b 76 2c             	mov    0x2c(%esi),%esi
  1001cf:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1001d2:	8b 7f 30             	mov    0x30(%edi),%edi
  1001d5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  1001d8:	8b 5b 34             	mov    0x34(%ebx),%ebx
  1001db:	89 0c 24             	mov    %ecx,(%esp)
  1001de:	89 54 24 04          	mov    %edx,0x4(%esp)
  1001e2:	89 74 24 08          	mov    %esi,0x8(%esp)
  1001e6:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1001ea:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1001ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1001f1:	e8 ba 00 00 00       	call   1002b0 <kprintf>
  1001f6:	8d 0d d9 81 10 00    	lea    0x1081d9,%ecx
            cpu->esp, cpu->ss);

    uint32_t cr2 = 0;
  1001fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    asm volatile("mov %%cr2, %0" : "=r" (cr2));
  100203:	0f 20 d2             	mov    %cr2,%edx
  100206:	89 55 ec             	mov    %edx,-0x14(%ebp)

    kprintf("CR2: %x \n", cr2);
  100209:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10020c:	89 0c 24             	mov    %ecx,(%esp)
  10020f:	89 54 24 04          	mov    %edx,0x4(%esp)
  100213:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100216:	e8 95 00 00 00       	call   1002b0 <kprintf>
}
  10021b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10021e:	83 c4 2c             	add    $0x2c,%esp
  100221:	5e                   	pop    %esi
  100222:	5f                   	pop    %edi
  100223:	5b                   	pop    %ebx
  100224:	5d                   	pop    %ebp
  100225:	c3                   	ret    
  100226:	66 90                	xchg   %ax,%ax
  100228:	66 90                	xchg   %ax,%ax
  10022a:	66 90                	xchg   %ax,%ax
  10022c:	66 90                	xchg   %ax,%ax
  10022e:	66 90                	xchg   %ax,%ax

00100230 <clrscr>:
        x /= base;
    } while (x);
    kputs(p);
}

void clrscr(void) {
  100230:	55                   	push   %ebp
  100231:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100233:	50                   	push   %eax
  100234:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10023b:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  100242:	0f 8d 1d 00 00 00    	jge    100265 <clrscr+0x35>
        video[i] = 0;
  100248:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10024b:	8b 0d 00 70 10 00    	mov    0x107000,%ecx
  100251:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100255:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100258:	05 01 00 00 00       	add    $0x1,%eax
  10025d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100260:	e9 d6 ff ff ff       	jmp    10023b <clrscr+0xb>
        video[i] = 0;
    }

    color = 0x07;
  100265:	c6 05 04 70 10 00 07 	movb   $0x7,0x107004

    x = y = 0;
  10026c:	c7 05 04 90 10 00 00 	movl   $0x0,0x109004
  100273:	00 00 00 
  100276:	c7 05 08 90 10 00 00 	movl   $0x0,0x109008
  10027d:	00 00 00 
}
  100280:	83 c4 04             	add    $0x4,%esp
  100283:	5d                   	pop    %ebp
  100284:	c3                   	ret    
  100285:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10028c:	00 00 00 00 

00100290 <setclr>:

void setclr(char clr) {
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	50                   	push   %eax
  100294:	8a 45 08             	mov    0x8(%ebp),%al
  100297:	88 45 ff             	mov    %al,-0x1(%ebp)
    color = clr;
  10029a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10029d:	a2 04 70 10 00       	mov    %al,0x107004
}
  1002a2:	83 c4 04             	add    $0x4,%esp
  1002a5:	5d                   	pop    %ebp
  1002a6:	c3                   	ret    
  1002a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1002ae:	00 00 

001002b0 <kprintf>:

int kprintf(const char* fmt, ...) {
  1002b0:	55                   	push   %ebp
  1002b1:	89 e5                	mov    %esp,%ebp
  1002b3:	83 ec 58             	sub    $0x58,%esp
  1002b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1002b9:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  1002bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1002bf:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  1002c2:	89 01                	mov    %eax,(%ecx)
    kprintf_res = 0;
  1002c4:	c7 05 0c 90 10 00 00 	movl   $0x0,0x10900c
  1002cb:	00 00 00 
    while (*fmt) {
  1002ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002d1:	80 38 00             	cmpb   $0x0,(%eax)
  1002d4:	0f 84 dd 01 00 00    	je     1004b7 <kprintf+0x207>
        if (*fmt == '%') {
  1002da:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002dd:	0f be 00             	movsbl (%eax),%eax
  1002e0:	3d 25 00 00 00       	cmp    $0x25,%eax
  1002e5:	0f 85 ae 01 00 00    	jne    100499 <kprintf+0x1e9>
            fmt++;
  1002eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002ee:	89 c1                	mov    %eax,%ecx
  1002f0:	41                   	inc    %ecx
  1002f1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
            switch (*fmt) {
  1002f4:	0f be 40 01          	movsbl 0x1(%eax),%eax
  1002f8:	89 c1                	mov    %eax,%ecx
  1002fa:	83 e9 24             	sub    $0x24,%ecx
  1002fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100300:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100303:	0f 8f 15 00 00 00    	jg     10031e <kprintf+0x6e>
  100309:	e9 00 00 00 00       	jmp    10030e <kprintf+0x5e>
  10030e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100311:	85 c0                	test   %eax,%eax
  100313:	0f 84 54 01 00 00    	je     10046d <kprintf+0x1bd>
  100319:	e9 54 01 00 00       	jmp    100472 <kprintf+0x1c2>
  10031e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100321:	83 e8 62             	sub    $0x62,%eax
  100324:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100327:	0f 8f 19 00 00 00    	jg     100346 <kprintf+0x96>
  10032d:	e9 00 00 00 00       	jmp    100332 <kprintf+0x82>
  100332:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100335:	83 e8 25             	sub    $0x25,%eax
  100338:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10033b:	0f 84 13 01 00 00    	je     100454 <kprintf+0x1a4>
  100341:	e9 2c 01 00 00       	jmp    100472 <kprintf+0x1c2>
  100346:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100349:	83 e8 6f             	sub    $0x6f,%eax
  10034c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10034f:	0f 8f 2d 00 00 00    	jg     100382 <kprintf+0xd2>
  100355:	e9 00 00 00 00       	jmp    10035a <kprintf+0xaa>
  10035a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10035d:	83 e8 63             	sub    $0x63,%eax
  100360:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100363:	0f 84 c5 00 00 00    	je     10042e <kprintf+0x17e>
  100369:	e9 00 00 00 00       	jmp    10036e <kprintf+0xbe>
  10036e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100371:	83 e8 64             	sub    $0x64,%eax
  100374:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100377:	0f 84 4b 00 00 00    	je     1003c8 <kprintf+0x118>
  10037d:	e9 f0 00 00 00       	jmp    100472 <kprintf+0x1c2>
  100382:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100385:	83 c0 90             	add    $0xffffff90,%eax
  100388:	89 c1                	mov    %eax,%ecx
  10038a:	83 e9 08             	sub    $0x8,%ecx
  10038d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100390:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100393:	0f 87 d9 00 00 00    	ja     100472 <kprintf+0x1c2>
  100399:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10039c:	8b 0c 85 00 80 10 00 	mov    0x108000(,%eax,4),%ecx
  1003a3:	ff e1                	jmp    *%ecx
            case 's':
                s = va_arg(ap, char*);
  1003a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1003a8:	89 c1                	mov    %eax,%ecx
  1003aa:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1003b0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1003b3:	8b 00                	mov    (%eax),%eax
  1003b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  1003b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003bb:	89 04 24             	mov    %eax,(%esp)
  1003be:	e8 0d 01 00 00       	call   1004d0 <kputs>
                break;
  1003c3:	e9 cc 00 00 00       	jmp    100494 <kprintf+0x1e4>
  1003c8:	b8 0a 00 00 00       	mov    $0xa,%eax
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  1003cd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1003d0:	89 ca                	mov    %ecx,%edx
  1003d2:	81 c2 04 00 00 00    	add    $0x4,%edx
  1003d8:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1003db:	8b 09                	mov    (%ecx),%ecx
  1003dd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 10);
  1003e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1003e3:	89 0c 24             	mov    %ecx,(%esp)
  1003e6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1003ed:	00 
  1003ee:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1003f1:	e8 1a 01 00 00       	call   100510 <kputn>
                break;
  1003f6:	e9 99 00 00 00       	jmp    100494 <kprintf+0x1e4>
  1003fb:	b8 10 00 00 00       	mov    $0x10,%eax
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  100400:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100403:	89 ca                	mov    %ecx,%edx
  100405:	81 c2 04 00 00 00    	add    $0x4,%edx
  10040b:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10040e:	8b 09                	mov    (%ecx),%ecx
  100410:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 16);
  100413:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100416:	89 0c 24             	mov    %ecx,(%esp)
  100419:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  100420:	00 
  100421:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100424:	e8 e7 00 00 00       	call   100510 <kputn>
                break;
  100429:	e9 66 00 00 00       	jmp    100494 <kprintf+0x1e4>
            case 'c':
                c = va_arg(ap, int);
  10042e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100431:	89 c1                	mov    %eax,%ecx
  100433:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100439:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10043c:	8b 00                	mov    (%eax),%eax
  10043e:	88 c2                	mov    %al,%dl
  100440:	88 55 ef             	mov    %dl,-0x11(%ebp)
                kputc(c);
  100443:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100447:	89 04 24             	mov    %eax,(%esp)
  10044a:	e8 61 01 00 00       	call   1005b0 <kputc>
                break;
  10044f:	e9 40 00 00 00       	jmp    100494 <kprintf+0x1e4>
  100454:	b8 25 00 00 00       	mov    $0x25,%eax
            case '%':
                kputc('%');
  100459:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100460:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100463:	e8 48 01 00 00       	call   1005b0 <kputc>
                break;
  100468:	e9 27 00 00 00       	jmp    100494 <kprintf+0x1e4>
            case '\0':
                goto out;
  10046d:	e9 4a 00 00 00       	jmp    1004bc <kprintf+0x20c>
  100472:	b8 25 00 00 00       	mov    $0x25,%eax
            default:
                kputc('%');
  100477:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10047e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100481:	e8 2a 01 00 00       	call   1005b0 <kputc>
                kputc(*fmt);
  100486:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100489:	0f be 00             	movsbl (%eax),%eax
  10048c:	89 04 24             	mov    %eax,(%esp)
  10048f:	e8 1c 01 00 00       	call   1005b0 <kputc>
                break;
            }
        } else {
  100494:	e9 0e 00 00 00       	jmp    1004a7 <kprintf+0x1f7>
            kputc(*fmt);
  100499:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10049c:	0f be 00             	movsbl (%eax),%eax
  10049f:	89 04 24             	mov    %eax,(%esp)
  1004a2:	e8 09 01 00 00       	call   1005b0 <kputc>
        }

        fmt++;
  1004a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004aa:	05 01 00 00 00       	add    $0x1,%eax
  1004af:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  1004b2:	e9 17 fe ff ff       	jmp    1002ce <kprintf+0x1e>
  1004b7:	e9 00 00 00 00       	jmp    1004bc <kprintf+0x20c>

    out:
    va_end(ap);

    return kprintf_res;
  1004bc:	a1 0c 90 10 00       	mov    0x10900c,%eax
  1004c1:	83 c4 58             	add    $0x58,%esp
  1004c4:	5d                   	pop    %ebp
  1004c5:	c3                   	ret    
  1004c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1004cd:	00 00 00 

001004d0 <kputs>:

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
  1004d3:	83 ec 08             	sub    $0x8,%esp
  1004d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1004d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  1004dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004df:	80 38 00             	cmpb   $0x0,(%eax)
  1004e2:	0f 84 1e 00 00 00    	je     100506 <kputs+0x36>
        kputc(*s++);
  1004e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004eb:	89 c1                	mov    %eax,%ecx
  1004ed:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1004f3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1004f6:	0f be 00             	movsbl (%eax),%eax
  1004f9:	89 04 24             	mov    %eax,(%esp)
  1004fc:	e8 af 00 00 00       	call   1005b0 <kputc>
    }
  100501:	e9 d6 ff ff ff       	jmp    1004dc <kputs+0xc>
}
  100506:	83 c4 08             	add    $0x8,%esp
  100509:	5d                   	pop    %ebp
  10050a:	c3                   	ret    
  10050b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100510 <kputn>:

static void kputn(unsigned long x, int base) {
  100510:	55                   	push   %ebp
  100511:	89 e5                	mov    %esp,%ebp
  100513:	56                   	push   %esi
  100514:	83 ec 64             	sub    $0x64,%esp
  100517:	8b 45 0c             	mov    0xc(%ebp),%eax
  10051a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10051d:	8d 15 e3 81 10 00    	lea    0x1081e3,%edx
  100523:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100526:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  100529:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  10052c:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  100533:	0f 8e 05 00 00 00    	jle    10053e <kputn+0x2e>
        return;
  100539:	e9 5d 00 00 00       	jmp    10059b <kputn+0x8b>
  10053e:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  100541:	05 40 00 00 00       	add    $0x40,%eax
  100546:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  100549:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10054c:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  10054f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100552:	31 d2                	xor    %edx,%edx
  100554:	f7 75 f4             	divl   -0xc(%ebp)
  100557:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10055a:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  10055d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100560:	89 c2                	mov    %eax,%edx
  100562:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  100568:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10056b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10056e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100571:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100574:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  100577:	89 d0                	mov    %edx,%eax
  100579:	31 d2                	xor    %edx,%edx
  10057b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10057e:	f7 f6                	div    %esi
  100580:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  100583:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10058a:	0f 85 bf ff ff ff    	jne    10054f <kputn+0x3f>
    kputs(p);
  100590:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100593:	89 04 24             	mov    %eax,(%esp)
  100596:	e8 35 ff ff ff       	call   1004d0 <kputs>
}
  10059b:	83 c4 64             	add    $0x64,%esp
  10059e:	5e                   	pop    %esi
  10059f:	5d                   	pop    %ebp
  1005a0:	c3                   	ret    
  1005a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1005a8:	0f 1f 84 00 00 00 00 
  1005af:	00 

001005b0 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  1005b0:	55                   	push   %ebp
  1005b1:	89 e5                	mov    %esp,%ebp
  1005b3:	83 ec 38             	sub    $0x38,%esp
  1005b6:	8a 45 08             	mov    0x8(%ebp),%al
  1005b9:	88 45 ff             	mov    %al,-0x1(%ebp)
    if(in_cod()) {
  1005bc:	e8 ef fa ff ff       	call   1000b0 <in_cod>
  1005c1:	3d 00 00 00 00       	cmp    $0x0,%eax
  1005c6:	0f 84 05 00 00 00    	je     1005d1 <kputc+0x21>
        goto doKPutc;
  1005cc:	e9 e3 00 00 00       	jmp    1006b4 <kputc+0x104>
    }

    if(get_current_task() != 0) {
  1005d1:	e8 9a 38 00 00       	call   103e70 <get_current_task>
  1005d6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1005db:	0f 84 b9 00 00 00    	je     10069a <kputc+0xea>
        if(get_current_task()->stdout != 0) {
  1005e1:	e8 8a 38 00 00       	call   103e70 <get_current_task>
  1005e6:	81 78 20 00 00 00 00 	cmpl   $0x0,0x20(%eax)
  1005ed:	0f 84 a2 00 00 00    	je     100695 <kputc+0xe5>
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  1005f3:	e8 78 38 00 00       	call   103e70 <get_current_task>
  1005f8:	8d 4d fe             	lea    -0x2(%ebp),%ecx
  1005fb:	ba 01 00 00 00       	mov    $0x1,%edx
  100600:	8b 40 20             	mov    0x20(%eax),%eax
  100603:	c6 45 fe 11          	movb   $0x11,-0x2(%ebp)
  100607:	89 04 24             	mov    %eax,(%esp)
  10060a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10060e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100615:	00 
  100616:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10061d:	00 
  10061e:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100621:	e8 da 4f 00 00       	call   105600 <vfs_write>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  100626:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100629:	e8 42 38 00 00       	call   103e70 <get_current_task>
  10062e:	8d 0d 04 70 10 00    	lea    0x107004,%ecx
  100634:	ba 01 00 00 00       	mov    $0x1,%edx
  100639:	8b 40 20             	mov    0x20(%eax),%eax
  10063c:	89 04 24             	mov    %eax,(%esp)
  10063f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100643:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10064a:	00 
  10064b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100652:	00 
  100653:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100656:	e8 a5 4f 00 00       	call   105600 <vfs_write>
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  10065b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10065e:	e8 0d 38 00 00       	call   103e70 <get_current_task>
  100663:	8d 4d ff             	lea    -0x1(%ebp),%ecx
  100666:	ba 01 00 00 00       	mov    $0x1,%edx
  10066b:	8b 40 20             	mov    0x20(%eax),%eax
  10066e:	89 04 24             	mov    %eax,(%esp)
  100671:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100675:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10067c:	00 
  10067d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100684:	00 
  100685:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  100688:	e8 73 4f 00 00       	call   105600 <vfs_write>

            return;
  10068d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100690:	e9 5e 01 00 00       	jmp    1007f3 <kputc+0x243>
        }
    }
  100695:	e9 00 00 00 00       	jmp    10069a <kputc+0xea>

    if(ramfs_vga_writers()) {
  10069a:	e8 a1 37 00 00       	call   103e40 <ramfs_vga_writers>
  10069f:	3d 00 00 00 00       	cmp    $0x0,%eax
  1006a4:	0f 84 05 00 00 00    	je     1006af <kputc+0xff>
        return;
  1006aa:	e9 44 01 00 00       	jmp    1007f3 <kputc+0x243>
    }
  1006af:	e9 00 00 00 00       	jmp    1006b4 <kputc+0x104>

    doKPutc:

    if ((c == '\n') || (x > 79)) {
  1006b4:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1006b8:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1006bd:	0f 84 10 00 00 00    	je     1006d3 <kputc+0x123>
  1006c3:	81 3d 08 90 10 00 4f 	cmpl   $0x4f,0x109008
  1006ca:	00 00 00 
  1006cd:	0f 8e 19 00 00 00    	jle    1006ec <kputc+0x13c>
        x = 0;
  1006d3:	c7 05 08 90 10 00 00 	movl   $0x0,0x109008
  1006da:	00 00 00 
        y++;
  1006dd:	a1 04 90 10 00       	mov    0x109004,%eax
  1006e2:	05 01 00 00 00       	add    $0x1,%eax
  1006e7:	a3 04 90 10 00       	mov    %eax,0x109004
    }

    if (c == '\n') {
  1006ec:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1006f0:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1006f5:	0f 85 05 00 00 00    	jne    100700 <kputc+0x150>
        return;
  1006fb:	e9 f3 00 00 00       	jmp    1007f3 <kputc+0x243>
    }

    if (y > 24) {
  100700:	81 3d 04 90 10 00 18 	cmpl   $0x18,0x109004
  100707:	00 00 00 
  10070a:	0f 8e 7e 00 00 00    	jle    10078e <kputc+0x1de>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100710:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100717:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  10071e:	0f 8d 2c 00 00 00    	jge    100750 <kputc+0x1a0>
            video[i] = video[i + 160];
  100724:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100727:	8b 0d 00 70 10 00    	mov    0x107000,%ecx
  10072d:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  100734:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100737:	8b 0d 00 70 10 00    	mov    0x107000,%ecx
  10073d:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  100740:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100743:	05 01 00 00 00       	add    $0x1,%eax
  100748:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10074b:	e9 c7 ff ff ff       	jmp    100717 <kputc+0x167>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100750:	e9 00 00 00 00       	jmp    100755 <kputc+0x1a5>
  100755:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  10075c:	0f 8d 1d 00 00 00    	jge    10077f <kputc+0x1cf>
            video[i] = 0;
  100762:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100765:	8b 0d 00 70 10 00    	mov    0x107000,%ecx
  10076b:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10076f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100772:	05 01 00 00 00       	add    $0x1,%eax
  100777:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10077a:	e9 d6 ff ff ff       	jmp    100755 <kputc+0x1a5>
            video[i] = 0;
        }
        y--;
  10077f:	a1 04 90 10 00       	mov    0x109004,%eax
  100784:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100789:	a3 04 90 10 00       	mov    %eax,0x109004
    }

    video[2 * (y * 80 + x)] = c;
  10078e:	8a 45 ff             	mov    -0x1(%ebp),%al
  100791:	69 0d 04 90 10 00 50 	imul   $0x50,0x109004,%ecx
  100798:	00 00 00 
  10079b:	03 0d 08 90 10 00    	add    0x109008,%ecx
  1007a1:	c1 e1 01             	shl    $0x1,%ecx
  1007a4:	8b 15 00 70 10 00    	mov    0x107000,%edx
  1007aa:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  1007ad:	a0 04 70 10 00       	mov    0x107004,%al
  1007b2:	69 0d 04 90 10 00 50 	imul   $0x50,0x109004,%ecx
  1007b9:	00 00 00 
  1007bc:	03 0d 08 90 10 00    	add    0x109008,%ecx
  1007c2:	c1 e1 01             	shl    $0x1,%ecx
  1007c5:	8b 15 00 70 10 00    	mov    0x107000,%edx
  1007cb:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  1007cf:	8b 0d 08 90 10 00    	mov    0x109008,%ecx
  1007d5:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1007db:	89 0d 08 90 10 00    	mov    %ecx,0x109008
    kprintf_res++;
  1007e1:	8b 0d 0c 90 10 00    	mov    0x10900c,%ecx
  1007e7:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1007ed:	89 0d 0c 90 10 00    	mov    %ecx,0x10900c
}
  1007f3:	83 c4 38             	add    $0x38,%esp
  1007f6:	5d                   	pop    %ebp
  1007f7:	c3                   	ret    
  1007f8:	66 90                	xchg   %ax,%ax
  1007fa:	66 90                	xchg   %ax,%ax
  1007fc:	66 90                	xchg   %ax,%ax
  1007fe:	66 90                	xchg   %ax,%ax

00100800 <irq_handler>:
        while ((inb(0x64) & 0x1) == 0) {
        }
    } while (inb(0x60) == 0xfe);
}

void irq_handler() {
  100800:	55                   	push   %ebp
  100801:	89 e5                	mov    %esp,%ebp
    uint8_t scancode;
    uint8_t keycode = 0;
  100803:	57                   	push   %edi
  100804:	56                   	push   %esi
  100805:	83 ec 40             	sub    $0x40,%esp
  100808:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
    int break_code = 0;
  10080c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    static int      e0_code = 0;
    static int      e1_code = 0;
    static uint16_t e1_prev = 0;

    if(!init_done) return;
  100813:	81 3d 10 90 10 00 00 	cmpl   $0x0,0x109010
  10081a:	00 00 00 
  10081d:	0f 85 05 00 00 00    	jne    100828 <irq_handler+0x28>
  100823:	e9 bf 02 00 00       	jmp    100ae7 <irq_handler+0x2e7>
  100828:	b8 60 00 00 00       	mov    $0x60,%eax

    scancode = inb(0x60);
  10082d:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100834:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100837:	e8 b4 02 00 00       	call   100af0 <inb>
  10083c:	88 45 f7             	mov    %al,-0x9(%ebp)

    // Um einen Breakcode handelt es sich, wenn das oberste Bit gesetzt ist und
    // es kein e0 oder e1 fuer einen Extended-scancode ist
    if ((scancode & 0x80) &&
  10083f:	0f b6 4d f7          	movzbl -0x9(%ebp),%ecx
  100843:	81 e1 80 00 00 00    	and    $0x80,%ecx
  100849:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10084f:	0f 84 53 00 00 00    	je     1008a8 <irq_handler+0xa8>
  100855:	81 3d 1c 90 10 00 00 	cmpl   $0x0,0x10901c
  10085c:	00 00 00 
  10085f:	0f 85 0f 00 00 00    	jne    100874 <irq_handler+0x74>
  100865:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100869:	3d e1 00 00 00       	cmp    $0xe1,%eax
  10086e:	0f 84 34 00 00 00    	je     1008a8 <irq_handler+0xa8>
  100874:	81 3d 18 90 10 00 00 	cmpl   $0x0,0x109018
  10087b:	00 00 00 
  10087e:	0f 85 0f 00 00 00    	jne    100893 <irq_handler+0x93>
  100884:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100888:	3d e0 00 00 00       	cmp    $0xe0,%eax
  10088d:	0f 84 15 00 00 00    	je     1008a8 <irq_handler+0xa8>
        (e1_code || (scancode != 0xE1)) &&
        (e0_code || (scancode != 0xE0)))
    {
        break_code = 1;
  100893:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
        scancode &= ~0x80;
  10089a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10089e:	25 7f ff ff ff       	and    $0xffffff7f,%eax
  1008a3:	88 c1                	mov    %al,%cl
  1008a5:	88 4d f7             	mov    %cl,-0x9(%ebp)
    }

    if (e0_code) {
  1008a8:	81 3d 18 90 10 00 00 	cmpl   $0x0,0x109018
  1008af:	00 00 00 
  1008b2:	0f 84 63 00 00 00    	je     10091b <irq_handler+0x11b>
        // Fake shift abfangen und ignorieren
        if ((scancode == 0x2A) || (scancode == 0x36)) {
  1008b8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1008bc:	3d 2a 00 00 00       	cmp    $0x2a,%eax
  1008c1:	0f 84 0f 00 00 00    	je     1008d6 <irq_handler+0xd6>
  1008c7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1008cb:	3d 36 00 00 00       	cmp    $0x36,%eax
  1008d0:	0f 85 0f 00 00 00    	jne    1008e5 <irq_handler+0xe5>
            e0_code = 0;
  1008d6:	c7 05 18 90 10 00 00 	movl   $0x0,0x109018
  1008dd:	00 00 00 
            return;
  1008e0:	e9 02 02 00 00       	jmp    100ae7 <irq_handler+0x2e7>
  1008e5:	b8 01 00 00 00       	mov    $0x1,%eax
        }

        keycode = translate_scancode(1, scancode);
  1008ea:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1008ed:	0f b6 d1             	movzbl %cl,%edx
  1008f0:	66 89 d6             	mov    %dx,%si
  1008f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1008fa:	0f b7 d6             	movzwl %si,%edx
  1008fd:	89 54 24 04          	mov    %edx,0x4(%esp)
  100901:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100904:	e8 07 02 00 00       	call   100b10 <translate_scancode>
  100909:	88 45 f6             	mov    %al,-0xa(%ebp)
        e0_code = 0;
  10090c:	c7 05 18 90 10 00 00 	movl   $0x0,0x109018
  100913:	00 00 00 
    } else if (e1_code == 2) {
  100916:	e9 11 01 00 00       	jmp    100a2c <irq_handler+0x22c>
  10091b:	81 3d 1c 90 10 00 02 	cmpl   $0x2,0x10901c
  100922:	00 00 00 
  100925:	0f 85 53 00 00 00    	jne    10097e <irq_handler+0x17e>
  10092b:	b8 02 00 00 00       	mov    $0x2,%eax
        // Fertiger e1-Scancode
        // Zweiten Scancode in hoeherwertiges Byte packen
        e1_prev |= ((uint16_t) scancode << 8);
  100930:	8a 4d f7             	mov    -0x9(%ebp),%cl
  100933:	0f b6 d1             	movzbl %cl,%edx
  100936:	66 89 d6             	mov    %dx,%si
  100939:	0f b7 d6             	movzwl %si,%edx
  10093c:	c1 e2 08             	shl    $0x8,%edx
  10093f:	0f b7 3d 20 90 10 00 	movzwl 0x109020,%edi
  100946:	09 d7                	or     %edx,%edi
  100948:	66 89 fe             	mov    %di,%si
  10094b:	66 89 35 20 90 10 00 	mov    %si,0x109020
        keycode = translate_scancode(2, e1_prev);
  100952:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100959:	0f b7 15 20 90 10 00 	movzwl 0x109020,%edx
  100960:	89 54 24 04          	mov    %edx,0x4(%esp)
  100964:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100967:	e8 a4 01 00 00       	call   100b10 <translate_scancode>
  10096c:	88 45 f6             	mov    %al,-0xa(%ebp)
        e1_code = 0;
  10096f:	c7 05 1c 90 10 00 00 	movl   $0x0,0x10901c
  100976:	00 00 00 
    } else if (e1_code == 1) {
  100979:	e9 a9 00 00 00       	jmp    100a27 <irq_handler+0x227>
  10097e:	81 3d 1c 90 10 00 01 	cmpl   $0x1,0x10901c
  100985:	00 00 00 
  100988:	0f 85 27 00 00 00    	jne    1009b5 <irq_handler+0x1b5>
        // Erstes Byte fuer e1-Scancode
        e1_prev = scancode;
  10098e:	8a 45 f7             	mov    -0x9(%ebp),%al
  100991:	0f b6 c8             	movzbl %al,%ecx
  100994:	66 89 ca             	mov    %cx,%dx
  100997:	66 89 15 20 90 10 00 	mov    %dx,0x109020
        e1_code++;
  10099e:	8b 0d 1c 90 10 00    	mov    0x10901c,%ecx
  1009a4:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1009aa:	89 0d 1c 90 10 00    	mov    %ecx,0x10901c
    } else if (scancode == 0xE0) {
  1009b0:	e9 6d 00 00 00       	jmp    100a22 <irq_handler+0x222>
  1009b5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1009b9:	3d e0 00 00 00       	cmp    $0xe0,%eax
  1009be:	0f 85 0f 00 00 00    	jne    1009d3 <irq_handler+0x1d3>
        // Anfang eines e0-Codes
        e0_code = 1;
  1009c4:	c7 05 18 90 10 00 01 	movl   $0x1,0x109018
  1009cb:	00 00 00 
    } else if (scancode == 0xE1) {
  1009ce:	e9 4a 00 00 00       	jmp    100a1d <irq_handler+0x21d>
  1009d3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  1009d7:	3d e1 00 00 00       	cmp    $0xe1,%eax
  1009dc:	0f 85 0f 00 00 00    	jne    1009f1 <irq_handler+0x1f1>
        // Anfang eines e1-Codes
        e1_code = 1;
  1009e2:	c7 05 1c 90 10 00 01 	movl   $0x1,0x10901c
  1009e9:	00 00 00 
    } else {
  1009ec:	e9 27 00 00 00       	jmp    100a18 <irq_handler+0x218>
  1009f1:	b8 00 00 00 00       	mov    $0x0,%eax
        // Normaler Scancode
        keycode = translate_scancode(0, scancode);
  1009f6:	8a 4d f7             	mov    -0x9(%ebp),%cl
  1009f9:	0f b6 d1             	movzbl %cl,%edx
  1009fc:	66 89 d6             	mov    %dx,%si
  1009ff:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100a06:	0f b7 d6             	movzwl %si,%edx
  100a09:	89 54 24 04          	mov    %edx,0x4(%esp)
  100a0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100a10:	e8 fb 00 00 00       	call   100b10 <translate_scancode>
  100a15:	88 45 f6             	mov    %al,-0xa(%ebp)
  100a18:	e9 00 00 00 00       	jmp    100a1d <irq_handler+0x21d>
  100a1d:	e9 00 00 00 00       	jmp    100a22 <irq_handler+0x222>
  100a22:	e9 00 00 00 00       	jmp    100a27 <irq_handler+0x227>
  100a27:	e9 00 00 00 00       	jmp    100a2c <irq_handler+0x22c>
    }

    if(break_code) {
  100a2c:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  100a33:	0f 84 1d 00 00 00    	je     100a56 <irq_handler+0x256>
        key_flags[keycode] &= ~KF_PRESSED;
  100a39:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a3d:	8b 0c 85 68 94 12 00 	mov    0x129468(,%eax,4),%ecx
  100a44:	81 e1 fe ff ff ff    	and    $0xfffffffe,%ecx
  100a4a:	89 0c 85 68 94 12 00 	mov    %ecx,0x129468(,%eax,4)
    }
  100a51:	e9 18 00 00 00       	jmp    100a6e <irq_handler+0x26e>
    else
    {
        key_flags[keycode] |= KF_PRESSED;
  100a56:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a5a:	8b 0c 85 68 94 12 00 	mov    0x129468(,%eax,4),%ecx
  100a61:	81 c9 01 00 00 00    	or     $0x1,%ecx
  100a67:	89 0c 85 68 94 12 00 	mov    %ecx,0x129468(,%eax,4)
    }

    char chr = getchar(keycode);
  100a6e:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
  100a72:	89 04 24             	mov    %eax,(%esp)
  100a75:	e8 76 01 00 00       	call   100bf0 <getchar>
  100a7a:	88 45 ef             	mov    %al,-0x11(%ebp)

    if(!break_code && chr) {
  100a7d:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  100a84:	0f 85 5d 00 00 00    	jne    100ae7 <irq_handler+0x2e7>
  100a8a:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100a8e:	3d 00 00 00 00       	cmp    $0x0,%eax
  100a93:	0f 84 4e 00 00 00    	je     100ae7 <irq_handler+0x2e7>
  100a99:	8d 45 ef             	lea    -0x11(%ebp),%eax
  100a9c:	b9 01 00 00 00       	mov    $0x1,%ecx
        if(vfs_write(charout, &chr, sizeof(char), 1)) {
  100aa1:	8b 15 14 90 10 00    	mov    0x109014,%edx
  100aa7:	89 14 24             	mov    %edx,(%esp)
  100aaa:	89 44 24 04          	mov    %eax,0x4(%esp)
  100aae:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  100ab5:	00 
  100ab6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100abd:	00 
  100abe:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  100ac1:	e8 3a 4b 00 00       	call   105600 <vfs_write>
  100ac6:	3d 00 00 00 00       	cmp    $0x0,%eax
  100acb:	0f 84 11 00 00 00    	je     100ae2 <irq_handler+0x2e2>
  100ad1:	8d 05 08 82 10 00    	lea    0x108208,%eax
            kprintf("[keyboard] BUFFER OVERFLOW! \n");
  100ad7:	89 04 24             	mov    %eax,(%esp)
  100ada:	e8 d1 f7 ff ff       	call   1002b0 <kprintf>
  100adf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        }
    }
  100ae2:	e9 00 00 00 00       	jmp    100ae7 <irq_handler+0x2e7>
}
  100ae7:	83 c4 40             	add    $0x40,%esp
  100aea:	5e                   	pop    %esi
  100aeb:	5f                   	pop    %edi
  100aec:	5d                   	pop    %ebp
  100aed:	c3                   	ret    
  100aee:	66 90                	xchg   %ax,%ax

00100af0 <inb>:
    uint16_t result;
    asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline uint8_t inb(uint16_t _port) {
  100af0:	55                   	push   %ebp
  100af1:	89 e5                	mov    %esp,%ebp
  100af3:	50                   	push   %eax
  100af4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100af8:	66 89 c1             	mov    %ax,%cx
  100afb:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
    uint8_t result;
    asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  100aff:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  100b03:	ec                   	in     (%dx),%al
  100b04:	88 45 fd             	mov    %al,-0x3(%ebp)
    return result;
  100b07:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  100b0b:	83 c4 04             	add    $0x4,%esp
  100b0e:	5d                   	pop    %ebp
  100b0f:	c3                   	ret    

00100b10 <translate_scancode>:
uint32_t key_flags[256];

struct res_handle* charout = 0;

static uint8_t translate_scancode(int set, uint16_t scancode)
{
  100b10:	55                   	push   %ebp
  100b11:	89 e5                	mov    %esp,%ebp
  100b13:	83 ec 28             	sub    $0x28,%esp
  100b16:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  100b1a:	66 89 c1             	mov    %ax,%cx
  100b1d:	8b 45 08             	mov    0x8(%ebp),%eax
  100b20:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100b23:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
    uint8_t keycode = 0;
  100b27:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

    switch (set) {
  100b2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100b2e:	89 c2                	mov    %eax,%edx
  100b30:	83 ea 02             	sub    $0x2,%edx
  100b33:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100b36:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100b39:	0f 84 4f 00 00 00    	je     100b8e <translate_scancode+0x7e>
  100b3f:	e9 00 00 00 00       	jmp    100b44 <translate_scancode+0x34>
  100b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b47:	83 e8 01             	sub    $0x1,%eax
  100b4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100b4d:	0f 84 28 00 00 00    	je     100b7b <translate_scancode+0x6b>
  100b53:	e9 00 00 00 00       	jmp    100b58 <translate_scancode+0x48>
  100b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b5b:	85 c0                	test   %eax,%eax
  100b5d:	0f 85 54 00 00 00    	jne    100bb7 <translate_scancode+0xa7>
  100b63:	e9 00 00 00 00       	jmp    100b68 <translate_scancode+0x58>
        // Normal scancodes
        case 0:
            keycode = sc_to_kc[0][scancode];
  100b68:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b6c:	8a 0c 05 08 71 10 00 	mov    0x107108(,%eax,1),%cl
  100b73:	88 4d f9             	mov    %cl,-0x7(%ebp)
            break;
  100b76:	e9 3c 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>

        // e0-Scancodes
        case 1:
            keycode = sc_to_kc[1][scancode];
  100b7b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b7f:	8a 0c 05 88 71 10 00 	mov    0x107188(,%eax,1),%cl
  100b86:	88 4d f9             	mov    %cl,-0x7(%ebp)
            break;
  100b89:	e9 29 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>

        // e1-Scancodes
        case 2:
            switch (scancode) {
  100b8e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100b92:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100b97:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100b9a:	0f 85 0e 00 00 00    	jne    100bae <translate_scancode+0x9e>
  100ba0:	e9 00 00 00 00       	jmp    100ba5 <translate_scancode+0x95>
                // Pause
                case 0x451D:
                    keycode = 119;
  100ba5:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
                    break;
  100ba9:	e9 04 00 00 00       	jmp    100bb2 <translate_scancode+0xa2>

                default:
                    keycode = 0x0;
  100bae:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
            };
            break;
  100bb2:	e9 00 00 00 00       	jmp    100bb7 <translate_scancode+0xa7>
    }

    if (keycode == 0) {
  100bb7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  100bbb:	3d 00 00 00 00       	cmp    $0x0,%eax
  100bc0:	0f 85 20 00 00 00    	jne    100be6 <translate_scancode+0xd6>
  100bc6:	8d 05 34 82 10 00    	lea    0x108234,%eax
        kprintf("kbc: Unknown Scancode: 0x%x (%d)\n", scancode, set);
  100bcc:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  100bd0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  100bd3:	89 04 24             	mov    %eax,(%esp)
  100bd6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100bda:	89 54 24 08          	mov    %edx,0x8(%esp)
  100bde:	e8 cd f6 ff ff       	call   1002b0 <kprintf>
  100be3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    return keycode;
  100be6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  100bea:	83 c4 28             	add    $0x28,%esp
  100bed:	5d                   	pop    %ebp
  100bee:	c3                   	ret    
  100bef:	90                   	nop

00100bf0 <getchar>:
}

static char getchar(uint8_t keycode) {
  100bf0:	55                   	push   %ebp
  100bf1:	89 e5                	mov    %esp,%ebp
  100bf3:	83 ec 08             	sub    $0x8,%esp
  100bf6:	8a 45 08             	mov    0x8(%ebp),%al
  100bf9:	88 45 ff             	mov    %al,-0x1(%ebp)
    uint32_t index = 0;
  100bfc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    if(key_flags[0x2A] & KF_PRESSED) index = 1; //LSHIFT
  100c03:	8b 0d 10 95 12 00    	mov    0x129510,%ecx
  100c09:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100c0f:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100c15:	0f 84 07 00 00 00    	je     100c22 <getchar+0x32>
  100c1b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
    if(key_flags[0x36] & KF_PRESSED) index = 1; //RSHIFT
  100c22:	a1 40 95 12 00       	mov    0x129540,%eax
  100c27:	25 01 00 00 00       	and    $0x1,%eax
  100c2c:	3d 00 00 00 00       	cmp    $0x0,%eax
  100c31:	0f 84 07 00 00 00    	je     100c3e <getchar+0x4e>
  100c37:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  100c3e:	8d 05 08 70 10 00    	lea    0x107008,%eax

    return kc_to_char[index][keycode];
  100c44:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  100c48:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100c4b:	c1 e2 07             	shl    $0x7,%edx
  100c4e:	01 d0                	add    %edx,%eax
  100c50:	0f be 04 08          	movsbl (%eax,%ecx,1),%eax
  100c54:	83 c4 08             	add    $0x8,%esp
  100c57:	5d                   	pop    %ebp
  100c58:	c3                   	ret    
  100c59:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00100c60 <driver_keyboard_init>:
        }
    }
}

void driver_keyboard_init(void)
{
  100c60:	55                   	push   %ebp
  100c61:	89 e5                	mov    %esp,%ebp
  100c63:	56                   	push   %esi
  100c64:	83 ec 54             	sub    $0x54,%esp
  100c67:	b8 21 00 00 00       	mov    $0x21,%eax
  100c6c:	8d 0d 00 08 10 00    	lea    0x100800,%ecx
    register_intr_handler(0x21, &irq_handler);
  100c72:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100c79:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100c7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100c80:	e8 eb 11 00 00       	call   101e70 <register_intr_handler>
  100c85:	b8 64 00 00 00       	mov    $0x64,%eax

    while (inb(0x64) & 0x1) {
  100c8a:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100c94:	e8 57 fe ff ff       	call   100af0 <inb>
  100c99:	0f b6 c8             	movzbl %al,%ecx
  100c9c:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100ca2:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100ca8:	0f 84 1c 00 00 00    	je     100cca <driver_keyboard_init+0x6a>
  100cae:	b8 60 00 00 00       	mov    $0x60,%eax
        inb(0x60);
  100cb3:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100cba:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100cbd:	e8 2e fe ff ff       	call   100af0 <inb>
    }
  100cc2:	88 45 eb             	mov    %al,-0x15(%ebp)
  100cc5:	e9 bb ff ff ff       	jmp    100c85 <driver_keyboard_init+0x25>
  100cca:	b8 ed 00 00 00       	mov    $0xed,%eax
  100ccf:	8d 0d 68 94 12 00    	lea    0x129468,%ecx
  100cd5:	ba 00 00 00 00       	mov    $0x0,%edx
  100cda:	be 00 04 00 00       	mov    $0x400,%esi

    memset(key_flags, 0, 256 * sizeof(uint32_t));
  100cdf:	89 0c 24             	mov    %ecx,(%esp)
  100ce2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ce9:	00 
  100cea:	c7 44 24 08 00 04 00 	movl   $0x400,0x8(%esp)
  100cf1:	00 
  100cf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100cf5:	89 75 e0             	mov    %esi,-0x20(%ebp)
  100cf8:	89 55 dc             	mov    %edx,-0x24(%ebp)
  100cfb:	e8 90 3e 00 00       	call   104b90 <memset>

    // Leds alle ausloeschen
    send_command(0xED);
  100d00:	c7 04 24 ed 00 00 00 	movl   $0xed,(%esp)
  100d07:	e8 c4 00 00 00       	call   100dd0 <send_command>
  100d0c:	b8 00 00 00 00       	mov    $0x0,%eax
    send_command(0);
  100d11:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d18:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100d1b:	e8 b0 00 00 00       	call   100dd0 <send_command>
  100d20:	b8 f3 00 00 00       	mov    $0xf3,%eax

    // Schnellste Wiederholrate
    send_command(0xF3);
  100d25:	c7 04 24 f3 00 00 00 	movl   $0xf3,(%esp)
  100d2c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100d2f:	e8 9c 00 00 00       	call   100dd0 <send_command>
  100d34:	b8 00 00 00 00       	mov    $0x0,%eax
    send_command(0);
  100d39:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100d40:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100d43:	e8 88 00 00 00       	call   100dd0 <send_command>
  100d48:	b8 f4 00 00 00       	mov    $0xf4,%eax

    send_command(0xF4);
  100d4d:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100d54:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100d57:	e8 74 00 00 00       	call   100dd0 <send_command>
  100d5c:	8d 05 26 82 10 00    	lea    0x108226,%eax
  100d62:	8d 4d f8             	lea    -0x8(%ebp),%ecx

    vfs_create_kfile("/dev/keyboard", ramfs_fifo_driver_struct(), &(uint32_t){512});
  100d65:	89 45 c8             	mov    %eax,-0x38(%ebp)
  100d68:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  100d6b:	e8 50 2b 00 00       	call   1038c0 <ramfs_fifo_driver_struct>
  100d70:	c7 45 f8 00 02 00 00 	movl   $0x200,-0x8(%ebp)
  100d77:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  100d7a:	89 0c 24             	mov    %ecx,(%esp)
  100d7d:	89 44 24 04          	mov    %eax,0x4(%esp)
  100d81:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  100d84:	89 44 24 08          	mov    %eax,0x8(%esp)
  100d88:	e8 13 45 00 00       	call   1052a0 <vfs_create_kfile>
  100d8d:	8d 0d 26 82 10 00    	lea    0x108226,%ecx
  100d93:	ba 02 00 00 00       	mov    $0x2,%edx
    charout = vfs_open("/dev/keyboard", FM_WRITE);
  100d98:	89 0c 24             	mov    %ecx,(%esp)
  100d9b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100da2:	00 
  100da3:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100da6:	89 55 bc             	mov    %edx,-0x44(%ebp)
  100da9:	e8 82 46 00 00       	call   105430 <vfs_open>
  100dae:	a3 14 90 10 00       	mov    %eax,0x109014

    init_done = 1;
  100db3:	c7 05 10 90 10 00 01 	movl   $0x1,0x109010
  100dba:	00 00 00 
}
  100dbd:	83 c4 54             	add    $0x54,%esp
  100dc0:	5e                   	pop    %esi
  100dc1:	5d                   	pop    %ebp
  100dc2:	c3                   	ret    
  100dc3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100dca:	84 00 00 00 00 00 

00100dd0 <send_command>:

    return kc_to_char[index][keycode];
}

static void send_command(uint8_t command)
{
  100dd0:	55                   	push   %ebp
  100dd1:	89 e5                	mov    %esp,%ebp
  100dd3:	83 ec 28             	sub    $0x28,%esp
  100dd6:	8a 45 08             	mov    0x8(%ebp),%al
  100dd9:	88 45 ff             	mov    %al,-0x1(%ebp)
    do {
        while (inb(0x64) & 0x2) {
  100ddc:	e9 00 00 00 00       	jmp    100de1 <send_command+0x11>
  100de1:	b8 64 00 00 00       	mov    $0x64,%eax
  100de6:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100ded:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100df0:	e8 fb fc ff ff       	call   100af0 <inb>
  100df5:	0f b6 c8             	movzbl %al,%ecx
  100df8:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100dfe:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100e04:	0f 84 05 00 00 00    	je     100e0f <send_command+0x3f>
        }
  100e0a:	e9 d2 ff ff ff       	jmp    100de1 <send_command+0x11>
  100e0f:	b8 60 00 00 00       	mov    $0x60,%eax

        outb(0x60, command);
  100e14:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100e1b:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  100e1f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100e23:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100e26:	e8 65 00 00 00       	call   100e90 <outb>
  100e2b:	b8 64 00 00 00       	mov    $0x64,%eax

        while ((inb(0x64) & 0x1) == 0) {
  100e30:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100e3a:	e8 b1 fc ff ff       	call   100af0 <inb>
  100e3f:	0f b6 c8             	movzbl %al,%ecx
  100e42:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100e48:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100e4e:	0f 85 05 00 00 00    	jne    100e59 <send_command+0x89>
        }
  100e54:	e9 d2 ff ff ff       	jmp    100e2b <send_command+0x5b>
    } while (inb(0x60) == 0xfe);
  100e59:	e9 00 00 00 00       	jmp    100e5e <send_command+0x8e>
  100e5e:	b8 60 00 00 00       	mov    $0x60,%eax
  100e63:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100e6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100e6d:	e8 7e fc ff ff       	call   100af0 <inb>
  100e72:	0f b6 c8             	movzbl %al,%ecx
  100e75:	81 f9 fe 00 00 00    	cmp    $0xfe,%ecx
  100e7b:	0f 84 5b ff ff ff    	je     100ddc <send_command+0xc>
}
  100e81:	83 c4 28             	add    $0x28,%esp
  100e84:	5d                   	pop    %ebp
  100e85:	c3                   	ret    
  100e86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  100e8d:	00 00 00 

00100e90 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  100e90:	55                   	push   %ebp
  100e91:	89 e5                	mov    %esp,%ebp
  100e93:	50                   	push   %eax
  100e94:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100e98:	66 89 c1             	mov    %ax,%cx
  100e9b:	8a 55 0c             	mov    0xc(%ebp),%dl
  100e9e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  100ea2:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  100ea5:	8a 45 fd             	mov    -0x3(%ebp),%al
  100ea8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  100eac:	ee                   	out    %al,(%dx)
}
  100ead:	83 c4 04             	add    $0x4,%esp
  100eb0:	5d                   	pop    %ebp
  100eb1:	c3                   	ret    
  100eb2:	66 90                	xchg   %ax,%ax
  100eb4:	66 90                	xchg   %ax,%ax
  100eb6:	66 90                	xchg   %ax,%ax
  100eb8:	66 90                	xchg   %ax,%ax
  100eba:	66 90                	xchg   %ax,%ax
  100ebc:	66 90                	xchg   %ax,%ax
  100ebe:	66 90                	xchg   %ax,%ax

00100ec0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];

void load_gdt() {
  100ec0:	55                   	push   %ebp
  100ec1:	89 e5                	mov    %esp,%ebp
	struct {
  100ec3:	83 ec 08             	sub    $0x8,%esp
  100ec6:	a1 24 80 10 00       	mov    0x108024,%eax
  100ecb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100ece:	66 8b 0d 28 80 10 00 	mov    0x108028,%cx
  100ed5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		uint16_t limit;
		void* pointer;
	}__attribute__((packed)) gdtp = { .limit = GDT_ENTRIES * 8 - 1, .pointer =
			gdt, };

	asm volatile("lgdt %0" : : "m" (gdtp));
  100ed9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  100edd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100ee1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  100ee4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  100ee7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  100eea:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  100eed:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  100ef0:	83 c4 08             	add    $0x8,%esp
  100ef3:	5d                   	pop    %ebp
  100ef4:	c3                   	ret    
  100ef5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  100efc:	00 00 00 00 

00100f00 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags) {
  100f00:	55                   	push   %ebp
  100f01:	89 e5                	mov    %esp,%ebp
  100f03:	56                   	push   %esi
  100f04:	83 ec 10             	sub    $0x10,%esp
  100f07:	8b 45 14             	mov    0x14(%ebp),%eax
  100f0a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100f0d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100f10:	8b 75 08             	mov    0x8(%ebp),%esi
  100f13:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100f16:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100f19:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100f1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gdt[i] = limit & 0xffffLL;
  100f1f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  100f23:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100f26:	89 04 cd 68 98 12 00 	mov    %eax,0x129868(,%ecx,8)
  100f2d:	c7 04 cd 6c 98 12 00 	movl   $0x0,0x12986c(,%ecx,8)
  100f34:	00 00 00 00 
	gdt[i] |= (base & 0xffffffLL) << 16;
  100f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100f3b:	25 ff ff ff 00       	and    $0xffffff,%eax
  100f40:	89 c1                	mov    %eax,%ecx
  100f42:	c1 e1 10             	shl    $0x10,%ecx
  100f45:	c1 e8 10             	shr    $0x10,%eax
  100f48:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100f4b:	8b 34 d5 6c 98 12 00 	mov    0x12986c(,%edx,8),%esi
  100f52:	09 f0                	or     %esi,%eax
  100f54:	8b 34 d5 68 98 12 00 	mov    0x129868(,%edx,8),%esi
  100f5b:	09 ce                	or     %ecx,%esi
  100f5d:	89 04 d5 6c 98 12 00 	mov    %eax,0x12986c(,%edx,8)
  100f64:	89 34 d5 68 98 12 00 	mov    %esi,0x129868(,%edx,8)
	gdt[i] |= (flags & 0xffLL) << 40;
  100f6b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  100f6f:	c1 e0 08             	shl    $0x8,%eax
  100f72:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100f75:	8b 14 cd 68 98 12 00 	mov    0x129868(,%ecx,8),%edx
  100f7c:	8b 34 cd 6c 98 12 00 	mov    0x12986c(,%ecx,8),%esi
  100f83:	09 c6                	or     %eax,%esi
  100f85:	89 14 cd 68 98 12 00 	mov    %edx,0x129868(,%ecx,8)
  100f8c:	89 34 cd 6c 98 12 00 	mov    %esi,0x12986c(,%ecx,8)
	gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100f93:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  100f97:	83 e0 0f             	and    $0xf,%eax
  100f9a:	c1 e0 10             	shl    $0x10,%eax
  100f9d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100fa0:	8b 14 cd 68 98 12 00 	mov    0x129868(,%ecx,8),%edx
  100fa7:	8b 34 cd 6c 98 12 00 	mov    0x12986c(,%ecx,8),%esi
  100fae:	09 c6                	or     %eax,%esi
  100fb0:	89 14 cd 68 98 12 00 	mov    %edx,0x129868(,%ecx,8)
  100fb7:	89 34 cd 6c 98 12 00 	mov    %esi,0x12986c(,%ecx,8)
	gdt[i] |= ((flags >> 8) & 0xffLL) << 52;
  100fbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100fc1:	c1 e0 0c             	shl    $0xc,%eax
  100fc4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  100fc9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100fcc:	8b 14 cd 68 98 12 00 	mov    0x129868(,%ecx,8),%edx
  100fd3:	8b 34 cd 6c 98 12 00 	mov    0x12986c(,%ecx,8),%esi
  100fda:	09 c6                	or     %eax,%esi
  100fdc:	89 14 cd 68 98 12 00 	mov    %edx,0x129868(,%ecx,8)
  100fe3:	89 34 cd 6c 98 12 00 	mov    %esi,0x12986c(,%ecx,8)
	gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100fea:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100fee:	c1 e0 18             	shl    $0x18,%eax
  100ff1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100ff4:	8b 14 cd 68 98 12 00 	mov    0x129868(,%ecx,8),%edx
  100ffb:	8b 34 cd 6c 98 12 00 	mov    0x12986c(,%ecx,8),%esi
  101002:	09 c6                	or     %eax,%esi
  101004:	89 14 cd 68 98 12 00 	mov    %edx,0x129868(,%ecx,8)
  10100b:	89 34 cd 6c 98 12 00 	mov    %esi,0x12986c(,%ecx,8)
}
  101012:	83 c4 10             	add    $0x10,%esp
  101015:	5e                   	pop    %esi
  101016:	5d                   	pop    %ebp
  101017:	c3                   	ret    
  101018:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10101f:	00 

00101020 <init_gdt>:

void init_gdt(void) {
  101020:	55                   	push   %ebp
  101021:	89 e5                	mov    %esp,%ebp
  101023:	56                   	push   %esi
  101024:	83 ec 54             	sub    $0x54,%esp
  101027:	b8 00 00 00 00       	mov    $0x0,%eax
	set_gdt_entry(0, 0, 0, 0);
  10102c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101033:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10103a:	00 
  10103b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101042:	00 
  101043:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10104a:	00 
  10104b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10104e:	e8 ad fe ff ff       	call   100f00 <set_gdt_entry>
  101053:	b8 01 00 00 00       	mov    $0x1,%eax
  101058:	b9 00 00 00 00       	mov    $0x0,%ecx
  10105d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  101062:	be 9a 0c 00 00       	mov    $0xc9a,%esi
	set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  101067:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10106e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101075:	00 
  101076:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  10107d:	00 
  10107e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  101085:	00 
  101086:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101089:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10108c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10108f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  101092:	e8 69 fe ff ff       	call   100f00 <set_gdt_entry>
  101097:	b8 02 00 00 00       	mov    $0x2,%eax
  10109c:	b9 00 00 00 00       	mov    $0x0,%ecx
  1010a1:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1010a6:	be 92 0c 00 00       	mov    $0xc92,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1010ab:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1010b2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1010b9:	00 
  1010ba:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  1010c1:	00 
  1010c2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  1010c9:	00 
  1010ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1010cd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  1010d0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  1010d3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  1010d6:	e8 25 fe ff ff       	call   100f00 <set_gdt_entry>
  1010db:	b8 03 00 00 00       	mov    $0x3,%eax
  1010e0:	b9 00 00 00 00       	mov    $0x0,%ecx
  1010e5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  1010ea:	be fa 0c 00 00       	mov    $0xcfa,%esi
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  1010ef:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1010f6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1010fd:	00 
  1010fe:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101105:	00 
  101106:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  10110d:	00 
  10110e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  101111:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  101114:	89 55 cc             	mov    %edx,-0x34(%ebp)
  101117:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10111a:	e8 e1 fd ff ff       	call   100f00 <set_gdt_entry>
  10111f:	b8 04 00 00 00       	mov    $0x4,%eax
  101124:	b9 00 00 00 00       	mov    $0x0,%ecx
  101129:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  10112e:	be f2 0c 00 00       	mov    $0xcf2,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
	set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  101133:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10113a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101141:	00 
  101142:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  101149:	00 
  10114a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  101151:	00 
  101152:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101155:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  101158:	89 55 bc             	mov    %edx,-0x44(%ebp)
  10115b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  10115e:	e8 9d fd ff ff       	call   100f00 <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	load_gdt();
  101163:	e8 58 fd ff ff       	call   100ec0 <load_gdt>
}
  101168:	83 c4 54             	add    $0x54,%esp
  10116b:	5e                   	pop    %esi
  10116c:	5d                   	pop    %ebp
  10116d:	c3                   	ret    
  10116e:	66 90                	xchg   %ax,%ax

00101170 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  101170:	55                   	push   %ebp
  101171:	89 e5                	mov    %esp,%ebp
  101173:	53                   	push   %ebx
  101174:	57                   	push   %edi
  101175:	56                   	push   %esi
  101176:	83 ec 10             	sub    $0x10,%esp
  101179:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  10117d:	66 89 c1             	mov    %ax,%cx
  101180:	8a 55 14             	mov    0x14(%ebp),%dl
  101183:	8b 45 0c             	mov    0xc(%ebp),%eax
  101186:	8b 75 08             	mov    0x8(%ebp),%esi
  101189:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10118c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10118f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  101193:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  101196:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101199:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  10119c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  1011a0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011a3:	89 04 f5 28 90 10 00 	mov    %eax,0x109028(,%esi,8)
  1011aa:	c7 04 f5 2c 90 10 00 	movl   $0x0,0x10902c(,%esi,8)
  1011b1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  1011b5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  1011b9:	c1 e0 10             	shl    $0x10,%eax
  1011bc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011bf:	8b 3c f5 2c 90 10 00 	mov    0x10902c(,%esi,8),%edi
  1011c6:	8b 1c f5 28 90 10 00 	mov    0x109028(,%esi,8),%ebx
  1011cd:	09 c3                	or     %eax,%ebx
  1011cf:	89 3c f5 2c 90 10 00 	mov    %edi,0x10902c(,%esi,8)
  1011d6:	89 1c f5 28 90 10 00 	mov    %ebx,0x109028(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  1011dd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  1011e1:	c1 e0 08             	shl    $0x8,%eax
  1011e4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1011e7:	8b 3c f5 28 90 10 00 	mov    0x109028(,%esi,8),%edi
  1011ee:	8b 1c f5 2c 90 10 00 	mov    0x10902c(,%esi,8),%ebx
  1011f5:	09 c3                	or     %eax,%ebx
  1011f7:	89 3c f5 28 90 10 00 	mov    %edi,0x109028(,%esi,8)
  1011fe:	89 1c f5 2c 90 10 00 	mov    %ebx,0x10902c(,%esi,8)
	idt[i] |= ((handler >> 16) & 0xffffLL) << 48;
  101205:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  101209:	c1 e0 10             	shl    $0x10,%eax
  10120c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10120f:	8b 3c f5 28 90 10 00 	mov    0x109028(,%esi,8),%edi
  101216:	8b 1c f5 2c 90 10 00 	mov    0x10902c(,%esi,8),%ebx
  10121d:	09 c3                	or     %eax,%ebx
  10121f:	89 3c f5 28 90 10 00 	mov    %edi,0x109028(,%esi,8)
  101226:	89 1c f5 2c 90 10 00 	mov    %ebx,0x10902c(,%esi,8)
}
  10122d:	83 c4 10             	add    $0x10,%esp
  101230:	5e                   	pop    %esi
  101231:	5f                   	pop    %edi
  101232:	5b                   	pop    %ebx
  101233:	5d                   	pop    %ebp
  101234:	c3                   	ret    
  101235:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10123c:	00 00 00 00 

00101240 <init_idt>:

void init_idt() {
  101240:	55                   	push   %ebp
  101241:	89 e5                	mov    %esp,%ebp
	struct {
  101243:	56                   	push   %esi
  101244:	81 ec 34 02 00 00    	sub    $0x234,%esp
  10124a:	a1 2a 80 10 00       	mov    0x10802a,%eax
  10124f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101252:	66 8b 0d 2e 80 10 00 	mov    0x10802e,%cx
  101259:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
		unsigned short int limit;
		void* pointer;
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;
  10125d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for (i = 0; i < IDT_ENTRIES; i++) {
  101264:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10126b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  101272:	0f 8d 1e 00 00 00    	jge    101296 <init_idt+0x56>
		handler_set[i] = 0;
  101278:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10127b:	c7 04 85 28 92 10 00 	movl   $0x0,0x109228(,%eax,4)
  101282:	00 00 00 00 
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;

	for (i = 0; i < IDT_ENTRIES; i++) {
  101286:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101289:	05 01 00 00 00       	add    $0x1,%eax
  10128e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101291:	e9 d5 ff ff ff       	jmp    10126b <init_idt+0x2b>
  101296:	b8 20 00 00 00       	mov    $0x20,%eax
  10129b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

	outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  1012a0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1012a7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  1012ae:	00 
  1012af:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1012b2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1012b5:	e8 86 0b 00 00       	call   101e40 <outb>
  1012ba:	b8 21 00 00 00       	mov    $0x21,%eax
  1012bf:	b9 20 00 00 00       	mov    $0x20,%ecx
	outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  1012c4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1012cb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  1012d2:	00 
  1012d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1012d6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1012d9:	e8 62 0b 00 00       	call   101e40 <outb>
  1012de:	b8 21 00 00 00       	mov    $0x21,%eax
  1012e3:	b9 04 00 00 00       	mov    $0x4,%ecx
	outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  1012e8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1012ef:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  1012f6:	00 
  1012f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1012fa:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1012fd:	e8 3e 0b 00 00       	call   101e40 <outb>
  101302:	b8 21 00 00 00       	mov    $0x21,%eax
  101307:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0x21, 0x01); // ICW 4
  10130c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101313:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10131a:	00 
  10131b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10131e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  101321:	e8 1a 0b 00 00       	call   101e40 <outb>
  101326:	b8 a0 00 00 00       	mov    $0xa0,%eax
  10132b:	b9 11 00 00 00       	mov    $0x11,%ecx

	outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  101330:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101337:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10133e:	00 
  10133f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101342:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101345:	e8 f6 0a 00 00       	call   101e40 <outb>
  10134a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  10134f:	b9 28 00 00 00       	mov    $0x28,%ecx
	outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  101354:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10135b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  101362:	00 
  101363:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101366:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101369:	e8 d2 0a 00 00       	call   101e40 <outb>
  10136e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101373:	b9 02 00 00 00       	mov    $0x2,%ecx
	outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  101378:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10137f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  101386:	00 
  101387:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10138a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10138d:	e8 ae 0a 00 00       	call   101e40 <outb>
  101392:	b8 a1 00 00 00       	mov    $0xa1,%eax
  101397:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0xa1, 0x01); // ICW 4
  10139c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1013a3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1013aa:	00 
  1013ab:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1013ae:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  1013b1:	e8 8a 0a 00 00       	call   101e40 <outb>
  1013b6:	b8 20 00 00 00       	mov    $0x20,%eax
  1013bb:	b9 00 00 00 00       	mov    $0x0,%ecx

	outb(0x20, 0x0);
  1013c0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1013c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1013ce:	00 
  1013cf:	89 45 a8             	mov    %eax,-0x58(%ebp)
  1013d2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  1013d5:	e8 66 0a 00 00       	call   101e40 <outb>
  1013da:	b8 a0 00 00 00       	mov    $0xa0,%eax
  1013df:	b9 00 00 00 00       	mov    $0x0,%ecx
	outb(0xa0, 0x0);
  1013e4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  1013eb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1013f2:	00 
  1013f3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1013f6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1013f9:	e8 42 0a 00 00       	call   101e40 <outb>
  1013fe:	b8 00 00 00 00       	mov    $0x0,%eax
  101403:	8d 0d 1c 20 10 00    	lea    0x10201c,%ecx
  101409:	ba 08 00 00 00       	mov    $0x8,%edx
  10140e:	be 8e 00 00 00       	mov    $0x8e,%esi

	idt_set_entry(0, intr_stub_0, 0x8,
  101413:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10141a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10141e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101425:	00 
  101426:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10142d:	00 
  10142e:	89 45 98             	mov    %eax,-0x68(%ebp)
  101431:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101434:	89 55 90             	mov    %edx,-0x70(%ebp)
  101437:	e8 34 fd ff ff       	call   101170 <idt_set_entry>
  10143c:	b8 01 00 00 00       	mov    $0x1,%eax
  101441:	8d 0d 25 20 10 00    	lea    0x102025,%ecx
  101447:	ba 08 00 00 00       	mov    $0x8,%edx
  10144c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(1, intr_stub_1, 0x8,
  101451:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101458:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10145c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101463:	00 
  101464:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10146b:	00 
  10146c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10146f:	89 75 88             	mov    %esi,-0x78(%ebp)
  101472:	89 55 84             	mov    %edx,-0x7c(%ebp)
  101475:	e8 f6 fc ff ff       	call   101170 <idt_set_entry>
  10147a:	b8 02 00 00 00       	mov    $0x2,%eax
  10147f:	8d 0d 2e 20 10 00    	lea    0x10202e,%ecx
  101485:	ba 08 00 00 00       	mov    $0x8,%edx
  10148a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(2, intr_stub_2, 0x8,
  10148f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101496:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10149a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014a1:	00 
  1014a2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014a9:	00 
  1014aa:	89 45 80             	mov    %eax,-0x80(%ebp)
  1014ad:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  1014b3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  1014b9:	e8 b2 fc ff ff       	call   101170 <idt_set_entry>
  1014be:	b8 03 00 00 00       	mov    $0x3,%eax
  1014c3:	8d 0d 37 20 10 00    	lea    0x102037,%ecx
  1014c9:	ba 08 00 00 00       	mov    $0x8,%edx
  1014ce:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(3, intr_stub_3, 0x8,
  1014d3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1014da:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014de:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014e5:	00 
  1014e6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014ed:	00 
  1014ee:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  1014f4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  1014fa:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101500:	e8 6b fc ff ff       	call   101170 <idt_set_entry>
  101505:	b8 04 00 00 00       	mov    $0x4,%eax
  10150a:	8d 0d 40 20 10 00    	lea    0x102040,%ecx
  101510:	ba 08 00 00 00       	mov    $0x8,%edx
  101515:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(4, intr_stub_4, 0x8,
  10151a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101521:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101525:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10152c:	00 
  10152d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101534:	00 
  101535:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10153b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101541:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101547:	e8 24 fc ff ff       	call   101170 <idt_set_entry>
  10154c:	b8 05 00 00 00       	mov    $0x5,%eax
  101551:	8d 0d 49 20 10 00    	lea    0x102049,%ecx
  101557:	ba 08 00 00 00       	mov    $0x8,%edx
  10155c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(5, intr_stub_5, 0x8,
  101561:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101568:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10156c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101573:	00 
  101574:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10157b:	00 
  10157c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101582:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101588:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10158e:	e8 dd fb ff ff       	call   101170 <idt_set_entry>
  101593:	b8 06 00 00 00       	mov    $0x6,%eax
  101598:	8d 0d 52 20 10 00    	lea    0x102052,%ecx
  10159e:	ba 08 00 00 00       	mov    $0x8,%edx
  1015a3:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(6, intr_stub_6, 0x8,
  1015a8:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  1015af:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015b3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015ba:	00 
  1015bb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015c2:	00 
  1015c3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1015c9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1015cf:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1015d5:	e8 96 fb ff ff       	call   101170 <idt_set_entry>
  1015da:	b8 07 00 00 00       	mov    $0x7,%eax
  1015df:	8d 0d 5b 20 10 00    	lea    0x10205b,%ecx
  1015e5:	ba 08 00 00 00       	mov    $0x8,%edx
  1015ea:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(7, intr_stub_7, 0x8,
  1015ef:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1015f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015fa:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101601:	00 
  101602:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101609:	00 
  10160a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101610:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101616:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10161c:	e8 4f fb ff ff       	call   101170 <idt_set_entry>
  101621:	b8 08 00 00 00       	mov    $0x8,%eax
  101626:	8d 0d 64 20 10 00    	lea    0x102064,%ecx
  10162c:	ba 8e 00 00 00       	mov    $0x8e,%edx
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(8, intr_stub_8, 0x8,
  101631:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101638:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10163c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101643:	00 
  101644:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10164b:	00 
  10164c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101652:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101658:	e8 13 fb ff ff       	call   101170 <idt_set_entry>
  10165d:	b8 09 00 00 00       	mov    $0x9,%eax
  101662:	8d 0d 6b 20 10 00    	lea    0x10206b,%ecx
  101668:	ba 08 00 00 00       	mov    $0x8,%edx
  10166d:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(9, intr_stub_9, 0x8,
  101672:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101679:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10167d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101684:	00 
  101685:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10168c:	00 
  10168d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101693:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101699:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10169f:	e8 cc fa ff ff       	call   101170 <idt_set_entry>
  1016a4:	b8 0a 00 00 00       	mov    $0xa,%eax
  1016a9:	8d 0d 74 20 10 00    	lea    0x102074,%ecx
  1016af:	ba 08 00 00 00       	mov    $0x8,%edx
  1016b4:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(10, intr_stub_10, 0x8,
  1016b9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1016c0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016c4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016cb:	00 
  1016cc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016d3:	00 
  1016d4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1016da:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1016e0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1016e6:	e8 85 fa ff ff       	call   101170 <idt_set_entry>
  1016eb:	b8 0b 00 00 00       	mov    $0xb,%eax
  1016f0:	8d 0d 7b 20 10 00    	lea    0x10207b,%ecx
  1016f6:	ba 08 00 00 00       	mov    $0x8,%edx
  1016fb:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(11, intr_stub_11, 0x8,
  101700:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101707:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10170b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101712:	00 
  101713:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10171a:	00 
  10171b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101721:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101727:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10172d:	e8 3e fa ff ff       	call   101170 <idt_set_entry>
  101732:	b8 0c 00 00 00       	mov    $0xc,%eax
  101737:	8d 0d 82 20 10 00    	lea    0x102082,%ecx
  10173d:	ba 08 00 00 00       	mov    $0x8,%edx
  101742:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(12, intr_stub_12, 0x8,
  101747:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10174e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101752:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101759:	00 
  10175a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101761:	00 
  101762:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101768:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10176e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101774:	e8 f7 f9 ff ff       	call   101170 <idt_set_entry>
  101779:	b8 0d 00 00 00       	mov    $0xd,%eax
  10177e:	8d 0d 89 20 10 00    	lea    0x102089,%ecx
  101784:	ba 08 00 00 00       	mov    $0x8,%edx
  101789:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(13, intr_stub_13, 0x8,
  10178e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101795:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101799:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017a0:	00 
  1017a1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017a8:	00 
  1017a9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  1017af:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  1017b5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  1017bb:	e8 b0 f9 ff ff       	call   101170 <idt_set_entry>
  1017c0:	b8 0e 00 00 00       	mov    $0xe,%eax
  1017c5:	8d 0d 90 20 10 00    	lea    0x102090,%ecx
  1017cb:	ba 08 00 00 00       	mov    $0x8,%edx
  1017d0:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(14, intr_stub_14, 0x8,
  1017d5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1017dc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017e0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017e7:	00 
  1017e8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017ef:	00 
  1017f0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1017f6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1017fc:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101802:	e8 69 f9 ff ff       	call   101170 <idt_set_entry>
  101807:	b8 0f 00 00 00       	mov    $0xf,%eax
  10180c:	8d 0d 94 20 10 00    	lea    0x102094,%ecx
  101812:	ba 08 00 00 00       	mov    $0x8,%edx
  101817:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(15, intr_stub_15, 0x8,
  10181c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101823:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101827:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10182e:	00 
  10182f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101836:	00 
  101837:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10183d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101843:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101849:	e8 22 f9 ff ff       	call   101170 <idt_set_entry>
  10184e:	b8 10 00 00 00       	mov    $0x10,%eax
  101853:	8d 0d 9a 20 10 00    	lea    0x10209a,%ecx
  101859:	ba 08 00 00 00       	mov    $0x8,%edx
  10185e:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(16, intr_stub_16, 0x8,
  101863:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10186a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10186e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101875:	00 
  101876:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10187d:	00 
  10187e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101884:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  10188a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101890:	e8 db f8 ff ff       	call   101170 <idt_set_entry>
  101895:	b8 11 00 00 00       	mov    $0x11,%eax
  10189a:	8d 0d a0 20 10 00    	lea    0x1020a0,%ecx
  1018a0:	ba 08 00 00 00       	mov    $0x8,%edx
  1018a5:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(17, intr_stub_17, 0x8,
  1018aa:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1018b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018b5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018bc:	00 
  1018bd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018c4:	00 
  1018c5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  1018cb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  1018d1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  1018d7:	e8 94 f8 ff ff       	call   101170 <idt_set_entry>
  1018dc:	b8 12 00 00 00       	mov    $0x12,%eax
  1018e1:	8d 0d a4 20 10 00    	lea    0x1020a4,%ecx
  1018e7:	ba 08 00 00 00       	mov    $0x8,%edx
  1018ec:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(18, intr_stub_18, 0x8,
  1018f1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1018f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018fc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101903:	00 
  101904:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10190b:	00 
  10190c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101912:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101918:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10191e:	e8 4d f8 ff ff       	call   101170 <idt_set_entry>
  101923:	b8 20 00 00 00       	mov    $0x20,%eax
  101928:	8d 0d aa 20 10 00    	lea    0x1020aa,%ecx
  10192e:	ba 08 00 00 00       	mov    $0x8,%edx
  101933:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(32, intr_stub_32, 0x8,
  101938:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10193f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101943:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10194a:	00 
  10194b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101952:	00 
  101953:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101959:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  10195f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101965:	e8 06 f8 ff ff       	call   101170 <idt_set_entry>
  10196a:	b8 21 00 00 00       	mov    $0x21,%eax
  10196f:	8d 0d b0 20 10 00    	lea    0x1020b0,%ecx
  101975:	ba 08 00 00 00       	mov    $0x8,%edx
  10197a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(33, intr_stub_33, 0x8,
  10197f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101986:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10198a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101991:	00 
  101992:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101999:	00 
  10199a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  1019a0:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  1019a6:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  1019ac:	e8 bf f7 ff ff       	call   101170 <idt_set_entry>
  1019b1:	b8 22 00 00 00       	mov    $0x22,%eax
  1019b6:	8d 0d b6 20 10 00    	lea    0x1020b6,%ecx
  1019bc:	ba 08 00 00 00       	mov    $0x8,%edx
  1019c1:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(34, intr_stub_34, 0x8,
  1019c6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1019cd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019d1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019d8:	00 
  1019d9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1019e0:	00 
  1019e1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  1019e7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  1019ed:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  1019f3:	e8 78 f7 ff ff       	call   101170 <idt_set_entry>
  1019f8:	b8 23 00 00 00       	mov    $0x23,%eax
  1019fd:	8d 0d bc 20 10 00    	lea    0x1020bc,%ecx
  101a03:	ba 08 00 00 00       	mov    $0x8,%edx
  101a08:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(35, intr_stub_35, 0x8,
  101a0d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101a14:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a18:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a1f:	00 
  101a20:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a27:	00 
  101a28:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  101a2e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101a34:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  101a3a:	e8 31 f7 ff ff       	call   101170 <idt_set_entry>
  101a3f:	b8 24 00 00 00       	mov    $0x24,%eax
  101a44:	8d 0d c2 20 10 00    	lea    0x1020c2,%ecx
  101a4a:	ba 08 00 00 00       	mov    $0x8,%edx
  101a4f:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(36, intr_stub_36, 0x8,
  101a54:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  101a5b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101a5f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101a66:	00 
  101a67:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101a6e:	00 
  101a6f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101a75:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  101a7b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101a81:	e8 ea f6 ff ff       	call   101170 <idt_set_entry>
  101a86:	b8 25 00 00 00       	mov    $0x25,%eax
  101a8b:	8d 0d c8 20 10 00    	lea    0x1020c8,%ecx
  101a91:	ba 08 00 00 00       	mov    $0x8,%edx
  101a96:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(37, intr_stub_37, 0x8,
  101a9b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101aa2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aa6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101aad:	00 
  101aae:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ab5:	00 
  101ab6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  101abc:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  101ac2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  101ac8:	e8 a3 f6 ff ff       	call   101170 <idt_set_entry>
  101acd:	b8 26 00 00 00       	mov    $0x26,%eax
  101ad2:	8d 0d ce 20 10 00    	lea    0x1020ce,%ecx
  101ad8:	ba 08 00 00 00       	mov    $0x8,%edx
  101add:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(38, intr_stub_38, 0x8,
  101ae2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  101ae9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101aed:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101af4:	00 
  101af5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101afc:	00 
  101afd:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101b03:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101b09:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  101b0f:	e8 5c f6 ff ff       	call   101170 <idt_set_entry>
  101b14:	b8 27 00 00 00       	mov    $0x27,%eax
  101b19:	8d 0d d4 20 10 00    	lea    0x1020d4,%ecx
  101b1f:	ba 08 00 00 00       	mov    $0x8,%edx
  101b24:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(39, intr_stub_39, 0x8,
  101b29:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101b30:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b34:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b3b:	00 
  101b3c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b43:	00 
  101b44:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  101b4a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101b50:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101b56:	e8 15 f6 ff ff       	call   101170 <idt_set_entry>
  101b5b:	b8 28 00 00 00       	mov    $0x28,%eax
  101b60:	8d 0d da 20 10 00    	lea    0x1020da,%ecx
  101b66:	ba 08 00 00 00       	mov    $0x8,%edx
  101b6b:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(40, intr_stub_40, 0x8,
  101b70:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101b77:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101b7b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101b82:	00 
  101b83:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101b8a:	00 
  101b8b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101b91:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101b97:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  101b9d:	e8 ce f5 ff ff       	call   101170 <idt_set_entry>
  101ba2:	b8 29 00 00 00       	mov    $0x29,%eax
  101ba7:	8d 0d e0 20 10 00    	lea    0x1020e0,%ecx
  101bad:	ba 08 00 00 00       	mov    $0x8,%edx
  101bb2:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(41, intr_stub_41, 0x8,
  101bb7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  101bbe:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101bc2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101bc9:	00 
  101bca:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101bd1:	00 
  101bd2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  101bd8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  101bde:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  101be4:	e8 87 f5 ff ff       	call   101170 <idt_set_entry>
  101be9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  101bee:	8d 0d e6 20 10 00    	lea    0x1020e6,%ecx
  101bf4:	ba 08 00 00 00       	mov    $0x8,%edx
  101bf9:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(42, intr_stub_42, 0x8,
  101bfe:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101c05:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c09:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c10:	00 
  101c11:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c18:	00 
  101c19:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  101c1f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101c25:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  101c2b:	e8 40 f5 ff ff       	call   101170 <idt_set_entry>
  101c30:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101c35:	8d 0d ec 20 10 00    	lea    0x1020ec,%ecx
  101c3b:	ba 08 00 00 00       	mov    $0x8,%edx
  101c40:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(43, intr_stub_43, 0x8,
  101c45:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  101c4c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c50:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c57:	00 
  101c58:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101c5f:	00 
  101c60:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101c66:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  101c6c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101c72:	e8 f9 f4 ff ff       	call   101170 <idt_set_entry>
  101c77:	b8 2c 00 00 00       	mov    $0x2c,%eax
  101c7c:	8d 0d f2 20 10 00    	lea    0x1020f2,%ecx
  101c82:	ba 08 00 00 00       	mov    $0x8,%edx
  101c87:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(44, intr_stub_44, 0x8,
  101c8c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101c93:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101c97:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101c9e:	00 
  101c9f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ca6:	00 
  101ca7:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  101cad:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  101cb3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  101cb9:	e8 b2 f4 ff ff       	call   101170 <idt_set_entry>
  101cbe:	b8 2d 00 00 00       	mov    $0x2d,%eax
  101cc3:	8d 0d f8 20 10 00    	lea    0x1020f8,%ecx
  101cc9:	ba 08 00 00 00       	mov    $0x8,%edx
  101cce:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(45, intr_stub_45, 0x8,
  101cd3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  101cda:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101cde:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101ce5:	00 
  101ce6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101ced:	00 
  101cee:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  101cf4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  101cfa:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101d00:	e8 6b f4 ff ff       	call   101170 <idt_set_entry>
  101d05:	b8 2e 00 00 00       	mov    $0x2e,%eax
  101d0a:	8d 0d fe 20 10 00    	lea    0x1020fe,%ecx
  101d10:	ba 08 00 00 00       	mov    $0x8,%edx
  101d15:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(46, intr_stub_46, 0x8,
  101d1a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101d21:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d25:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d2c:	00 
  101d2d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d34:	00 
  101d35:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  101d3b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101d41:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101d47:	e8 24 f4 ff ff       	call   101170 <idt_set_entry>
  101d4c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101d51:	8d 0d 04 21 10 00    	lea    0x102104,%ecx
  101d57:	ba 08 00 00 00       	mov    $0x8,%edx
  101d5c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(47, intr_stub_47, 0x8,
  101d61:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101d68:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d6c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101d73:	00 
  101d74:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101d7b:	00 
  101d7c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101d82:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101d88:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  101d8e:	e8 dd f3 ff ff       	call   101170 <idt_set_entry>
  101d93:	b8 30 00 00 00       	mov    $0x30,%eax
  101d98:	8d 0d 0a 21 10 00    	lea    0x10210a,%ecx
  101d9e:	ba 08 00 00 00       	mov    $0x8,%edx
  101da3:	be ee 00 00 00       	mov    $0xee,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(48, intr_stub_48, 0x8,
  101da8:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  101daf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101db3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101dba:	00 
  101dbb:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  101dc2:	00 
  101dc3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  101dc9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  101dcf:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  101dd5:	e8 96 f3 ff ff       	call   101170 <idt_set_entry>
  101dda:	b8 05 00 00 00       	mov    $0x5,%eax
  101ddf:	8d 0d 08 72 10 00    	lea    0x107208,%ecx
  101de5:	ba 80 00 00 00       	mov    $0x80,%edx
  101dea:	be e9 00 00 00       	mov    $0xe9,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss),
  101def:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101df6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101dfa:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101e01:	00 
  101e02:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101e09:	00 
  101e0a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101e10:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101e16:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  101e1c:	e8 df f0 ff ff       	call   100f00 <set_gdt_entry>
  101e21:	b8 28 00 00 00       	mov    $0x28,%eax
			GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101e26:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101e29:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  101e2d:	fb                   	sti    
}
  101e2e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101e34:	5e                   	pop    %esi
  101e35:	5d                   	pop    %ebp
  101e36:	c3                   	ret    
  101e37:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  101e3e:	00 00 

00101e40 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  101e40:	55                   	push   %ebp
  101e41:	89 e5                	mov    %esp,%ebp
  101e43:	50                   	push   %eax
  101e44:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101e48:	66 89 c1             	mov    %ax,%cx
  101e4b:	8a 55 0c             	mov    0xc(%ebp),%dl
  101e4e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101e52:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101e55:	8a 45 fd             	mov    -0x3(%ebp),%al
  101e58:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101e5c:	ee                   	out    %al,(%dx)
}
  101e5d:	83 c4 04             	add    $0x4,%esp
  101e60:	5d                   	pop    %ebp
  101e61:	c3                   	ret    
  101e62:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101e69:	1f 84 00 00 00 00 00 

00101e70 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)()) {
  101e70:	55                   	push   %ebp
  101e71:	89 e5                	mov    %esp,%ebp
  101e73:	83 ec 08             	sub    $0x8,%esp
  101e76:	8b 45 0c             	mov    0xc(%ebp),%eax
  101e79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101e7c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  101e7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101e82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e85:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101e88:	89 04 8d 28 93 10 00 	mov    %eax,0x109328(,%ecx,4)
	handler_set[i] = 1;
  101e8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101e92:	c7 04 85 28 92 10 00 	movl   $0x1,0x109228(,%eax,4)
  101e99:	01 00 00 00 
}
  101e9d:	83 c4 08             	add    $0x8,%esp
  101ea0:	5d                   	pop    %ebp
  101ea1:	c3                   	ret    
  101ea2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101ea9:	1f 84 00 00 00 00 00 

00101eb0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu) {
  101eb0:	55                   	push   %ebp
  101eb1:	89 e5                	mov    %esp,%ebp
  101eb3:	83 ec 28             	sub    $0x28,%esp
  101eb6:	8b 45 08             	mov    0x8(%ebp),%eax
  101eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct cpu_state* new_cpu = cpu;
  101ebc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ebf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if (cpu->intr <= 0x1f) {
  101ec2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ec5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  101ecc:	0f 87 3d 00 00 00    	ja     101f0f <handle_interrupt+0x5f>
		if (!isSchedulingEnabled()) {
  101ed2:	e8 89 1f 00 00       	call   103e60 <isSchedulingEnabled>
  101ed7:	3d 00 00 00 00       	cmp    $0x0,%eax
  101edc:	0f 85 1a 00 00 00    	jne    101efc <handle_interrupt+0x4c>
  101ee2:	8d 05 56 82 10 00    	lea    0x108256,%eax
			show_cod(cpu, "Kernel PANIC!");
  101ee8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101eeb:	89 0c 24             	mov    %ecx,(%esp)
  101eee:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ef2:	e8 c9 e1 ff ff       	call   1000c0 <show_cod>
		} else {
  101ef7:	e9 0e 00 00 00       	jmp    101f0a <handle_interrupt+0x5a>
			new_cpu = schedule_exception(cpu);
  101efc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101eff:	89 04 24             	mov    %eax,(%esp)
  101f02:	e8 c9 20 00 00       	call   103fd0 <schedule_exception>
  101f07:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
	} else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101f0a:	e9 03 01 00 00       	jmp    102012 <handle_interrupt+0x162>
  101f0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f12:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101f19:	0f 82 b1 00 00 00    	jb     101fd0 <handle_interrupt+0x120>
  101f1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f22:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  101f29:	0f 87 a1 00 00 00    	ja     101fd0 <handle_interrupt+0x120>
		if (cpu->intr >= 0x28) {
  101f2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f32:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  101f39:	0f 82 24 00 00 00    	jb     101f63 <handle_interrupt+0xb3>
  101f3f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101f44:	b9 20 00 00 00       	mov    $0x20,%ecx
			outb(0xa0, 0x20);
  101f49:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101f50:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101f57:	00 
  101f58:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101f5b:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101f5e:	e8 dd fe ff ff       	call   101e40 <outb>
		}

		if (cpu->intr == 0x20) {
  101f63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f66:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101f6d:	0f 85 13 00 00 00    	jne    101f86 <handle_interrupt+0xd6>
			new_cpu = schedule(cpu);
  101f73:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f76:	89 04 24             	mov    %eax,(%esp)
  101f79:	e8 d2 24 00 00       	call   104450 <schedule>
  101f7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  101f81:	e9 29 00 00 00       	jmp    101faf <handle_interrupt+0xff>
		else
		{
            if (handler_set[cpu->intr]) {
  101f86:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101f89:	8b 40 1c             	mov    0x1c(%eax),%eax
  101f8c:	81 3c 85 28 92 10 00 	cmpl   $0x0,0x109228(,%eax,4)
  101f93:	00 00 00 00 
  101f97:	0f 84 0d 00 00 00    	je     101faa <handle_interrupt+0xfa>
                handlers[cpu->intr]();
  101f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101fa0:	8b 40 1c             	mov    0x1c(%eax),%eax
  101fa3:	ff 14 85 28 93 10 00 	call   *0x109328(,%eax,4)
  101faa:	e9 00 00 00 00       	jmp    101faf <handle_interrupt+0xff>
  101faf:	b8 20 00 00 00       	mov    $0x20,%eax
            }
		}

        outb(0x20, 0x20);
  101fb4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101fbb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101fc2:	00 
  101fc3:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101fc6:	e8 75 fe ff ff       	call   101e40 <outb>
	} else if (cpu->intr == 0x30) {
  101fcb:	e9 3d 00 00 00       	jmp    10200d <handle_interrupt+0x15d>
  101fd0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101fd3:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  101fda:	0f 85 13 00 00 00    	jne    101ff3 <handle_interrupt+0x143>
		new_cpu = syscall(new_cpu);
  101fe0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fe3:	89 04 24             	mov    %eax,(%esp)
  101fe6:	e8 55 01 00 00       	call   102140 <syscall>
  101feb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	} else {
  101fee:	e9 15 00 00 00       	jmp    102008 <handle_interrupt+0x158>
  101ff3:	8d 05 64 82 10 00    	lea    0x108264,%eax
		show_cod(cpu, "Unknown Interrupt!");
  101ff9:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101ffc:	89 0c 24             	mov    %ecx,(%esp)
  101fff:	89 44 24 04          	mov    %eax,0x4(%esp)
  102003:	e8 b8 e0 ff ff       	call   1000c0 <show_cod>
  102008:	e9 00 00 00 00       	jmp    10200d <handle_interrupt+0x15d>
  10200d:	e9 00 00 00 00       	jmp    102012 <handle_interrupt+0x162>
	}

	return new_cpu;
  102012:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102015:	83 c4 28             	add    $0x28,%esp
  102018:	5d                   	pop    %ebp
  102019:	c3                   	ret    
  10201a:	66 90                	xchg   %ax,%ax

0010201c <intr_stub_0>:
  10201c:	6a 00                	push   $0x0
  10201e:	6a 00                	push   $0x0
  102020:	e9 eb 00 00 00       	jmp    102110 <intr_common_handler>

00102025 <intr_stub_1>:
  102025:	6a 00                	push   $0x0
  102027:	6a 01                	push   $0x1
  102029:	e9 e2 00 00 00       	jmp    102110 <intr_common_handler>

0010202e <intr_stub_2>:
  10202e:	6a 00                	push   $0x0
  102030:	6a 02                	push   $0x2
  102032:	e9 d9 00 00 00       	jmp    102110 <intr_common_handler>

00102037 <intr_stub_3>:
  102037:	6a 00                	push   $0x0
  102039:	6a 03                	push   $0x3
  10203b:	e9 d0 00 00 00       	jmp    102110 <intr_common_handler>

00102040 <intr_stub_4>:
  102040:	6a 00                	push   $0x0
  102042:	6a 04                	push   $0x4
  102044:	e9 c7 00 00 00       	jmp    102110 <intr_common_handler>

00102049 <intr_stub_5>:
  102049:	6a 00                	push   $0x0
  10204b:	6a 05                	push   $0x5
  10204d:	e9 be 00 00 00       	jmp    102110 <intr_common_handler>

00102052 <intr_stub_6>:
  102052:	6a 00                	push   $0x0
  102054:	6a 06                	push   $0x6
  102056:	e9 b5 00 00 00       	jmp    102110 <intr_common_handler>

0010205b <intr_stub_7>:
  10205b:	6a 00                	push   $0x0
  10205d:	6a 07                	push   $0x7
  10205f:	e9 ac 00 00 00       	jmp    102110 <intr_common_handler>

00102064 <intr_stub_8>:
  102064:	6a 08                	push   $0x8
  102066:	e9 a5 00 00 00       	jmp    102110 <intr_common_handler>

0010206b <intr_stub_9>:
  10206b:	6a 00                	push   $0x0
  10206d:	6a 09                	push   $0x9
  10206f:	e9 9c 00 00 00       	jmp    102110 <intr_common_handler>

00102074 <intr_stub_10>:
  102074:	6a 0a                	push   $0xa
  102076:	e9 95 00 00 00       	jmp    102110 <intr_common_handler>

0010207b <intr_stub_11>:
  10207b:	6a 0b                	push   $0xb
  10207d:	e9 8e 00 00 00       	jmp    102110 <intr_common_handler>

00102082 <intr_stub_12>:
  102082:	6a 0c                	push   $0xc
  102084:	e9 87 00 00 00       	jmp    102110 <intr_common_handler>

00102089 <intr_stub_13>:
  102089:	6a 0d                	push   $0xd
  10208b:	e9 80 00 00 00       	jmp    102110 <intr_common_handler>

00102090 <intr_stub_14>:
  102090:	6a 0e                	push   $0xe
  102092:	eb 7c                	jmp    102110 <intr_common_handler>

00102094 <intr_stub_15>:
  102094:	6a 00                	push   $0x0
  102096:	6a 0f                	push   $0xf
  102098:	eb 76                	jmp    102110 <intr_common_handler>

0010209a <intr_stub_16>:
  10209a:	6a 00                	push   $0x0
  10209c:	6a 10                	push   $0x10
  10209e:	eb 70                	jmp    102110 <intr_common_handler>

001020a0 <intr_stub_17>:
  1020a0:	6a 11                	push   $0x11
  1020a2:	eb 6c                	jmp    102110 <intr_common_handler>

001020a4 <intr_stub_18>:
  1020a4:	6a 00                	push   $0x0
  1020a6:	6a 12                	push   $0x12
  1020a8:	eb 66                	jmp    102110 <intr_common_handler>

001020aa <intr_stub_32>:
  1020aa:	6a 00                	push   $0x0
  1020ac:	6a 20                	push   $0x20
  1020ae:	eb 60                	jmp    102110 <intr_common_handler>

001020b0 <intr_stub_33>:
  1020b0:	6a 00                	push   $0x0
  1020b2:	6a 21                	push   $0x21
  1020b4:	eb 5a                	jmp    102110 <intr_common_handler>

001020b6 <intr_stub_34>:
  1020b6:	6a 00                	push   $0x0
  1020b8:	6a 22                	push   $0x22
  1020ba:	eb 54                	jmp    102110 <intr_common_handler>

001020bc <intr_stub_35>:
  1020bc:	6a 00                	push   $0x0
  1020be:	6a 23                	push   $0x23
  1020c0:	eb 4e                	jmp    102110 <intr_common_handler>

001020c2 <intr_stub_36>:
  1020c2:	6a 00                	push   $0x0
  1020c4:	6a 24                	push   $0x24
  1020c6:	eb 48                	jmp    102110 <intr_common_handler>

001020c8 <intr_stub_37>:
  1020c8:	6a 00                	push   $0x0
  1020ca:	6a 25                	push   $0x25
  1020cc:	eb 42                	jmp    102110 <intr_common_handler>

001020ce <intr_stub_38>:
  1020ce:	6a 00                	push   $0x0
  1020d0:	6a 26                	push   $0x26
  1020d2:	eb 3c                	jmp    102110 <intr_common_handler>

001020d4 <intr_stub_39>:
  1020d4:	6a 00                	push   $0x0
  1020d6:	6a 27                	push   $0x27
  1020d8:	eb 36                	jmp    102110 <intr_common_handler>

001020da <intr_stub_40>:
  1020da:	6a 00                	push   $0x0
  1020dc:	6a 28                	push   $0x28
  1020de:	eb 30                	jmp    102110 <intr_common_handler>

001020e0 <intr_stub_41>:
  1020e0:	6a 00                	push   $0x0
  1020e2:	6a 29                	push   $0x29
  1020e4:	eb 2a                	jmp    102110 <intr_common_handler>

001020e6 <intr_stub_42>:
  1020e6:	6a 00                	push   $0x0
  1020e8:	6a 2a                	push   $0x2a
  1020ea:	eb 24                	jmp    102110 <intr_common_handler>

001020ec <intr_stub_43>:
  1020ec:	6a 00                	push   $0x0
  1020ee:	6a 2b                	push   $0x2b
  1020f0:	eb 1e                	jmp    102110 <intr_common_handler>

001020f2 <intr_stub_44>:
  1020f2:	6a 00                	push   $0x0
  1020f4:	6a 2c                	push   $0x2c
  1020f6:	eb 18                	jmp    102110 <intr_common_handler>

001020f8 <intr_stub_45>:
  1020f8:	6a 00                	push   $0x0
  1020fa:	6a 2d                	push   $0x2d
  1020fc:	eb 12                	jmp    102110 <intr_common_handler>

001020fe <intr_stub_46>:
  1020fe:	6a 00                	push   $0x0
  102100:	6a 2e                	push   $0x2e
  102102:	eb 0c                	jmp    102110 <intr_common_handler>

00102104 <intr_stub_47>:
  102104:	6a 00                	push   $0x0
  102106:	6a 2f                	push   $0x2f
  102108:	eb 06                	jmp    102110 <intr_common_handler>

0010210a <intr_stub_48>:
  10210a:	6a 00                	push   $0x0
  10210c:	6a 30                	push   $0x30
  10210e:	eb 00                	jmp    102110 <intr_common_handler>

00102110 <intr_common_handler>:
  102110:	55                   	push   %ebp
  102111:	57                   	push   %edi
  102112:	56                   	push   %esi
  102113:	52                   	push   %edx
  102114:	51                   	push   %ecx
  102115:	53                   	push   %ebx
  102116:	50                   	push   %eax
  102117:	54                   	push   %esp
  102118:	66 b8 10 00          	mov    $0x10,%ax
  10211c:	66 8e d8             	mov    %ax,%ds
  10211f:	66 8e c0             	mov    %ax,%es
  102122:	e8 89 fd ff ff       	call   101eb0 <handle_interrupt>
  102127:	89 c4                	mov    %eax,%esp
  102129:	66 b8 23 00          	mov    $0x23,%ax
  10212d:	66 8e d8             	mov    %ax,%ds
  102130:	66 8e c0             	mov    %ax,%es
  102133:	58                   	pop    %eax
  102134:	5b                   	pop    %ebx
  102135:	59                   	pop    %ecx
  102136:	5a                   	pop    %edx
  102137:	5e                   	pop    %esi
  102138:	5f                   	pop    %edi
  102139:	5d                   	pop    %ebp
  10213a:	83 c4 08             	add    $0x8,%esp
  10213d:	cf                   	iret   
  10213e:	66 90                	xchg   %ax,%ax

00102140 <syscall>:
#include "ramfs/block.h"
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"
#include "drivers/keyboard.h"

struct cpu_state* syscall(struct cpu_state* cpu) {
  102140:	55                   	push   %ebp
  102141:	89 e5                	mov    %esp,%ebp
  102143:	56                   	push   %esi
  102144:	81 ec c4 00 00 00    	sub    $0xc4,%esp
  10214a:	8b 45 08             	mov    0x8(%ebp),%eax
  10214d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    save_cpu_state(cpu);
  102150:	89 e1                	mov    %esp,%ecx
  102152:	89 01                	mov    %eax,(%ecx)
  102154:	e8 b7 22 00 00       	call   104410 <save_cpu_state>

    cpu = get_current_task()->cpuState;
  102159:	e8 12 1d 00 00       	call   103e70 <get_current_task>
  10215e:	8b 40 04             	mov    0x4(%eax),%eax
  102161:	89 45 f4             	mov    %eax,-0xc(%ebp)

	switch (cpu->eax) {
  102164:	8b 00                	mov    (%eax),%eax
  102166:	89 c1                	mov    %eax,%ecx
  102168:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  10216e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  102171:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  102174:	0f 8f 26 00 00 00    	jg     1021a0 <syscall+0x60>
  10217a:	e9 00 00 00 00       	jmp    10217f <syscall+0x3f>
  10217f:	8b 45 b8             	mov    -0x48(%ebp),%eax
  102182:	48                   	dec    %eax
  102183:	89 c1                	mov    %eax,%ecx
  102185:	83 e9 14             	sub    $0x14,%ecx
  102188:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10218b:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  10218e:	0f 87 52 05 00 00    	ja     1026e6 <syscall+0x5a6>
  102194:	8b 45 b0             	mov    -0x50(%ebp),%eax
  102197:	8b 0c 85 44 80 10 00 	mov    0x108044(,%eax,4),%ecx
  10219e:	ff e1                	jmp    *%ecx
  1021a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1021a3:	05 37 ff ff ff       	add    $0xffffff37,%eax
  1021a8:	89 c1                	mov    %eax,%ecx
  1021aa:	83 e9 04             	sub    $0x4,%ecx
  1021ad:	89 45 a8             	mov    %eax,-0x58(%ebp)
  1021b0:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  1021b3:	0f 87 2d 05 00 00    	ja     1026e6 <syscall+0x5a6>
  1021b9:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1021bc:	8b 0c 85 30 80 10 00 	mov    0x108030(,%eax,4),%ecx
  1021c3:	ff e1                	jmp    *%ecx
	case 1: /* exit */
		return terminate_current(cpu);
  1021c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021c8:	89 04 24             	mov    %eax,(%esp)
  1021cb:	e8 40 1f 00 00       	call   104110 <terminate_current>
  1021d0:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1021d3:	e9 31 05 00 00       	jmp    102709 <syscall+0x5c9>

    case 3: /* exec */
    {
        cpu->eax = vfs_exec((char*) cpu->ebx, (char**) cpu->ecx);
  1021d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021db:	8b 40 04             	mov    0x4(%eax),%eax
  1021de:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1021e1:	8b 49 08             	mov    0x8(%ecx),%ecx
  1021e4:	89 04 24             	mov    %eax,(%esp)
  1021e7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1021eb:	e8 10 36 00 00       	call   105800 <vfs_exec>
  1021f0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1021f3:	89 01                	mov    %eax,(%ecx)
    }
        break;
  1021f5:	e9 09 05 00 00       	jmp    102703 <syscall+0x5c3>

    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  1021fa:	e8 71 1c 00 00       	call   103e70 <get_current_task>
  1021ff:	8b 40 18             	mov    0x18(%eax),%eax
  102202:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102205:	89 01                	mov    %eax,(%ecx)
    }
        break;
  102207:	e9 f7 04 00 00       	jmp    102703 <syscall+0x5c3>

    case 5: /* yield */
    {
        cpu = schedule(cpu);
  10220c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10220f:	89 04 24             	mov    %eax,(%esp)
  102212:	e8 39 22 00 00       	call   104450 <schedule>
  102217:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
        break;
  10221a:	e9 e4 04 00 00       	jmp    102703 <syscall+0x5c3>

	case 10: /* fopen */
	{
	    char* name = strclone((char*) cpu->ebx);
  10221f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102222:	8b 40 04             	mov    0x4(%eax),%eax
  102225:	89 04 24             	mov    %eax,(%esp)
  102228:	e8 63 2c 00 00       	call   104e90 <strclone>
  10222d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    uint32_t fmode = (uint32_t) cpu->ecx;
  102230:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102233:	8b 40 08             	mov    0x8(%eax),%eax
  102236:	89 45 ec             	mov    %eax,-0x14(%ebp)

	    struct res_handle* handle = vfs_open(name, fmode);
  102239:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10223c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10223f:	89 04 24             	mov    %eax,(%esp)
  102242:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102246:	e8 e5 31 00 00       	call   105430 <vfs_open>
  10224b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	    if(handle) {
  10224e:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  102255:	0f 84 1b 00 00 00    	je     102276 <syscall+0x136>
	        register_handle(handle);
  10225b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10225e:	89 04 24             	mov    %eax,(%esp)
  102261:	e8 1a 1c 00 00       	call   103e80 <register_handle>
	        cpu->eax = (uint32_t) handle;
  102266:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  102269:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10226c:	89 0a                	mov    %ecx,(%edx)
	    }
  10226e:	89 45 a0             	mov    %eax,-0x60(%ebp)
  102271:	e9 09 00 00 00       	jmp    10227f <syscall+0x13f>
	    else
	    {
	        cpu->eax = 0;
  102276:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102279:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    }

	    free(name);
  10227f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102282:	89 04 24             	mov    %eax,(%esp)
  102285:	e8 66 26 00 00       	call   1048f0 <free>
	}
	    break;
  10228a:	e9 74 04 00 00       	jmp    102703 <syscall+0x5c3>

	case 11: /* fclose */
	{
	    struct res_handle* handle = (void*) cpu->ebx;
  10228f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102292:	8b 40 04             	mov    0x4(%eax),%eax
  102295:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    if(!unregister_handle(handle)) {
  102298:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10229b:	89 04 24             	mov    %eax,(%esp)
  10229e:	e8 3d 1c 00 00       	call   103ee0 <unregister_handle>
  1022a3:	3d 00 00 00 00       	cmp    $0x0,%eax
  1022a8:	0f 85 1c 00 00 00    	jne    1022ca <syscall+0x18a>
	        vfs_close(handle);
  1022ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1022b1:	89 04 24             	mov    %eax,(%esp)
  1022b4:	e8 f7 31 00 00       	call   1054b0 <vfs_close>

	        cpu->eax = 0;
  1022b9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1022bc:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	    }
  1022c2:	89 45 9c             	mov    %eax,-0x64(%ebp)
  1022c5:	e9 09 00 00 00       	jmp    1022d3 <syscall+0x193>
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  1022ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022cd:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	    }
	}
	    break;
  1022d3:	e9 2b 04 00 00       	jmp    102703 <syscall+0x5c3>

	case 12: /* fwrite */
	{
	    struct res_handle* handle = (void*) cpu->ebx;
  1022d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022db:	8b 40 04             	mov    0x4(%eax),%eax
  1022de:	89 45 e0             	mov    %eax,-0x20(%ebp)
	    if(handle != 0) {
  1022e1:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  1022e8:	0f 84 39 00 00 00    	je     102327 <syscall+0x1e7>
  1022ee:	b8 01 00 00 00       	mov    $0x1,%eax
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  1022f3:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1022f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1022f9:	8b 52 08             	mov    0x8(%edx),%edx
  1022fc:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1022ff:	8b 76 0c             	mov    0xc(%esi),%esi
  102302:	89 0c 24             	mov    %ecx,(%esp)
  102305:	89 54 24 04          	mov    %edx,0x4(%esp)
  102309:	89 74 24 08          	mov    %esi,0x8(%esp)
  10230d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102314:	00 
  102315:	89 45 98             	mov    %eax,-0x68(%ebp)
  102318:	e8 e3 32 00 00       	call   105600 <vfs_write>
  10231d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102320:	89 01                	mov    %eax,(%ecx)
	    }
  102322:	e9 09 00 00 00       	jmp    102330 <syscall+0x1f0>
	    else
	    {
            cpu->eax = RW_ERR_VFS;
  102327:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10232a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	    }
	}
	    break;
  102330:	e9 ce 03 00 00       	jmp    102703 <syscall+0x5c3>

	case 13: /* fread */
	{
        struct res_handle* handle = (void*) cpu->ebx;
  102335:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102338:	8b 40 04             	mov    0x4(%eax),%eax
  10233b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if(handle != 0) {
  10233e:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  102345:	0f 84 39 00 00 00    	je     102384 <syscall+0x244>
  10234b:	b8 01 00 00 00       	mov    $0x1,%eax
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  102350:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  102353:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102356:	8b 52 08             	mov    0x8(%edx),%edx
  102359:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10235c:	8b 76 0c             	mov    0xc(%esi),%esi
  10235f:	89 0c 24             	mov    %ecx,(%esp)
  102362:	89 54 24 04          	mov    %edx,0x4(%esp)
  102366:	89 74 24 08          	mov    %esi,0x8(%esp)
  10236a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102371:	00 
  102372:	89 45 94             	mov    %eax,-0x6c(%ebp)
  102375:	e8 86 31 00 00       	call   105500 <vfs_read>
  10237a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10237d:	89 01                	mov    %eax,(%ecx)
        }
  10237f:	e9 09 00 00 00       	jmp    10238d <syscall+0x24d>
        else
        {
            cpu->eax = RW_ERR_VFS;
  102384:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102387:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        }
	}
	    break;
  10238d:	e9 71 03 00 00       	jmp    102703 <syscall+0x5c3>

	case 14: /* fmkfifo */
	{
        char* name = strclone((char*) cpu->ebx);
  102392:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102395:	8b 40 04             	mov    0x4(%eax),%eax
  102398:	89 04 24             	mov    %eax,(%esp)
  10239b:	e8 f0 2a 00 00       	call   104e90 <strclone>
  1023a0:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
  1023a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){4096}); //default to 4k Buffer-size
  1023a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1023a9:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  1023ac:	89 45 8c             	mov    %eax,-0x74(%ebp)
  1023af:	e8 0c 15 00 00       	call   1038c0 <ramfs_fifo_driver_struct>
  1023b4:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
  1023bb:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  1023be:	89 0c 24             	mov    %ecx,(%esp)
  1023c1:	89 44 24 04          	mov    %eax,0x4(%esp)
  1023c5:	8b 45 90             	mov    -0x70(%ebp),%eax
  1023c8:	89 44 24 08          	mov    %eax,0x8(%esp)
  1023cc:	e8 cf 2e 00 00       	call   1052a0 <vfs_create_kfile>
  1023d1:	b9 03 00 00 00       	mov    $0x3,%ecx

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
  1023d6:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1023d9:	89 14 24             	mov    %edx,(%esp)
  1023dc:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  1023e3:	00 
  1023e4:	89 45 88             	mov    %eax,-0x78(%ebp)
  1023e7:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
  1023ea:	e8 41 30 00 00       	call   105430 <vfs_open>
  1023ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if(handle) {
  1023f2:	81 7d d0 00 00 00 00 	cmpl   $0x0,-0x30(%ebp)
  1023f9:	0f 84 1b 00 00 00    	je     10241a <syscall+0x2da>
            register_handle(handle);
  1023ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102402:	89 04 24             	mov    %eax,(%esp)
  102405:	e8 76 1a 00 00       	call   103e80 <register_handle>
            cpu->eax = (uint32_t) handle;
  10240a:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10240d:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102410:	89 0a                	mov    %ecx,(%edx)
        }
  102412:	89 45 80             	mov    %eax,-0x80(%ebp)
  102415:	e9 09 00 00 00       	jmp    102423 <syscall+0x2e3>
        else
        {
            cpu->eax = 0;
  10241a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10241d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }

        free(name);
  102423:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102426:	89 04 24             	mov    %eax,(%esp)
  102429:	e8 c2 24 00 00       	call   1048f0 <free>
	}
	    break;
  10242e:	e9 d0 02 00 00       	jmp    102703 <syscall+0x5c3>

	case 20: /* getpmhandle */
	{
	    struct res_handle* handle = 0;
  102433:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)

	    switch(cpu->ebx) {
  10243a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10243d:	8b 40 04             	mov    0x4(%eax),%eax
  102440:	89 c1                	mov    %eax,%ecx
  102442:	83 e9 02             	sub    $0x2,%ecx
  102445:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  10244b:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
  102451:	0f 84 52 00 00 00    	je     1024a9 <syscall+0x369>
  102457:	e9 00 00 00 00       	jmp    10245c <syscall+0x31c>
  10245c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  102462:	83 e8 01             	sub    $0x1,%eax
  102465:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  10246b:	0f 84 28 00 00 00    	je     102499 <syscall+0x359>
  102471:	e9 00 00 00 00       	jmp    102476 <syscall+0x336>
  102476:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10247c:	85 c0                	test   %eax,%eax
  10247e:	0f 85 35 00 00 00    	jne    1024b9 <syscall+0x379>
  102484:	e9 00 00 00 00       	jmp    102489 <syscall+0x349>
	    case PMID_STDOUT:
	        handle = get_current_task()->stdout;
  102489:	e8 e2 19 00 00       	call   103e70 <get_current_task>
  10248e:	8b 40 20             	mov    0x20(%eax),%eax
  102491:	89 45 cc             	mov    %eax,-0x34(%ebp)
	        break;
  102494:	e9 2b 00 00 00       	jmp    1024c4 <syscall+0x384>
        case PMID_STDIN:
            handle = get_current_task()->stdin;
  102499:	e8 d2 19 00 00       	call   103e70 <get_current_task>
  10249e:	8b 40 28             	mov    0x28(%eax),%eax
  1024a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
            break;
  1024a4:	e9 1b 00 00 00       	jmp    1024c4 <syscall+0x384>
        case PMID_STDERR:
            handle = get_current_task()->stderr;
  1024a9:	e8 c2 19 00 00       	call   103e70 <get_current_task>
  1024ae:	8b 40 24             	mov    0x24(%eax),%eax
  1024b1:	89 45 cc             	mov    %eax,-0x34(%ebp)
            break;
  1024b4:	e9 0b 00 00 00       	jmp    1024c4 <syscall+0x384>
        default:
            handle = get_current_task()->stdout;
  1024b9:	e8 b2 19 00 00       	call   103e70 <get_current_task>
  1024be:	8b 40 20             	mov    0x20(%eax),%eax
  1024c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
            break;
	    }

	    cpu->eax = (uint32_t) handle;
  1024c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1024c7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1024ca:	89 01                	mov    %eax,(%ecx)
	}
	    break;
  1024cc:	e9 32 02 00 00       	jmp    102703 <syscall+0x5c3>

	case 21: /* fopenpmhandle */
	{
	    char* path = strclone((char*)cpu->ecx);
  1024d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024d4:	8b 40 08             	mov    0x8(%eax),%eax
  1024d7:	89 04 24             	mov    %eax,(%esp)
  1024da:	e8 b1 29 00 00       	call   104e90 <strclone>
  1024df:	89 45 c8             	mov    %eax,-0x38(%ebp)

	    struct res_handle* open;
	    uint32_t fm = FM_WRITE;
  1024e2:	c7 45 c0 02 00 00 00 	movl   $0x2,-0x40(%ebp)

	    if(cpu->ebx == PMID_STDIN) {
  1024e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024ec:	81 78 04 01 00 00 00 	cmpl   $0x1,0x4(%eax)
  1024f3:	0f 85 07 00 00 00    	jne    102500 <syscall+0x3c0>
	        fm = FM_READ;
  1024f9:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
	    }

	    open = vfs_open(path, fm);
  102500:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102503:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  102506:	89 04 24             	mov    %eax,(%esp)
  102509:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10250d:	e8 1e 2f 00 00       	call   105430 <vfs_open>
  102512:	89 45 c4             	mov    %eax,-0x3c(%ebp)

	    free(path);
  102515:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102518:	89 04 24             	mov    %eax,(%esp)
  10251b:	e8 d0 23 00 00       	call   1048f0 <free>

	    if(!open) {
  102520:	81 7d c4 00 00 00 00 	cmpl   $0x0,-0x3c(%ebp)
  102527:	0f 85 0e 00 00 00    	jne    10253b <syscall+0x3fb>
	        cpu->eax = (uint32_t) -1;
  10252d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102530:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	        break;
  102536:	e9 c8 01 00 00       	jmp    102703 <syscall+0x5c3>
	    }

	    struct res_handle* oldhandle = 0;
  10253b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)

        switch(cpu->ebx) {
  102542:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102545:	8b 40 04             	mov    0x4(%eax),%eax
  102548:	89 c1                	mov    %eax,%ecx
  10254a:	83 e9 02             	sub    $0x2,%ecx
  10254d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  102553:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  102559:	0f 84 80 00 00 00    	je     1025df <syscall+0x49f>
  10255f:	e9 00 00 00 00       	jmp    102564 <syscall+0x424>
  102564:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
  10256a:	83 e8 01             	sub    $0x1,%eax
  10256d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  102573:	0f 84 3f 00 00 00    	je     1025b8 <syscall+0x478>
  102579:	e9 00 00 00 00       	jmp    10257e <syscall+0x43e>
  10257e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
  102584:	85 c0                	test   %eax,%eax
  102586:	0f 85 7a 00 00 00    	jne    102606 <syscall+0x4c6>
  10258c:	e9 00 00 00 00       	jmp    102591 <syscall+0x451>
        case PMID_STDOUT:
            oldhandle = get_current_task()->stdout;
  102591:	e8 da 18 00 00       	call   103e70 <get_current_task>
  102596:	8b 40 20             	mov    0x20(%eax),%eax
  102599:	89 45 bc             	mov    %eax,-0x44(%ebp)
            get_current_task()->stdout = open;
  10259c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10259f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  1025a5:	e8 c6 18 00 00       	call   103e70 <get_current_task>
  1025aa:	8b 8d 64 ff ff ff    	mov    -0x9c(%ebp),%ecx
  1025b0:	89 48 20             	mov    %ecx,0x20(%eax)
            break;
  1025b3:	e9 70 00 00 00       	jmp    102628 <syscall+0x4e8>
        case PMID_STDIN:
            oldhandle = get_current_task()->stdin;
  1025b8:	e8 b3 18 00 00       	call   103e70 <get_current_task>
  1025bd:	8b 40 28             	mov    0x28(%eax),%eax
  1025c0:	89 45 bc             	mov    %eax,-0x44(%ebp)
            get_current_task()->stdin = open;
  1025c3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1025c6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  1025cc:	e8 9f 18 00 00       	call   103e70 <get_current_task>
  1025d1:	8b 8d 60 ff ff ff    	mov    -0xa0(%ebp),%ecx
  1025d7:	89 48 28             	mov    %ecx,0x28(%eax)
            break;
  1025da:	e9 49 00 00 00       	jmp    102628 <syscall+0x4e8>
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
  1025df:	e8 8c 18 00 00       	call   103e70 <get_current_task>
  1025e4:	8b 40 24             	mov    0x24(%eax),%eax
  1025e7:	89 45 bc             	mov    %eax,-0x44(%ebp)
            get_current_task()->stderr = open;
  1025ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1025ed:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  1025f3:	e8 78 18 00 00       	call   103e70 <get_current_task>
  1025f8:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
  1025fe:	89 48 24             	mov    %ecx,0x24(%eax)
            break;
  102601:	e9 22 00 00 00       	jmp    102628 <syscall+0x4e8>
        default:
            oldhandle = get_current_task()->stdout;
  102606:	e8 65 18 00 00       	call   103e70 <get_current_task>
  10260b:	8b 40 20             	mov    0x20(%eax),%eax
  10260e:	89 45 bc             	mov    %eax,-0x44(%ebp)
            get_current_task()->stdout = open;
  102611:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  102614:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  10261a:	e8 51 18 00 00       	call   103e70 <get_current_task>
  10261f:	8b 8d 58 ff ff ff    	mov    -0xa8(%ebp),%ecx
  102625:	89 48 20             	mov    %ecx,0x20(%eax)
            break;
        }

        if(oldhandle != 0) {
  102628:	81 7d bc 00 00 00 00 	cmpl   $0x0,-0x44(%ebp)
  10262f:	0f 84 11 00 00 00    	je     102646 <syscall+0x506>
            vfs_close(oldhandle);
  102635:	8b 45 bc             	mov    -0x44(%ebp),%eax
  102638:	89 04 24             	mov    %eax,(%esp)
  10263b:	e8 70 2e 00 00       	call   1054b0 <vfs_close>
  102640:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
        }

        cpu->eax = 0;
  102646:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102649:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	    break;
  10264f:	e9 af 00 00 00       	jmp    102703 <syscall+0x5c3>
  102654:	8d 05 77 82 10 00    	lea    0x108277,%eax

	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
  10265a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10265d:	8b 49 04             	mov    0x4(%ecx),%ecx
  102660:	89 04 24             	mov    %eax,(%esp)
  102663:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102667:	e8 44 dc ff ff       	call   1002b0 <kprintf>
  10266c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10266f:	89 01                	mov    %eax,(%ecx)
		break;
  102671:	e9 8d 00 00 00       	jmp    102703 <syscall+0x5c3>
  102676:	8d 05 7a 82 10 00    	lea    0x10827a,%eax

	case 202: /* kputs */
		cpu->eax = kprintf("%s", cpu->ebx);
  10267c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10267f:	8b 49 04             	mov    0x4(%ecx),%ecx
  102682:	89 04 24             	mov    %eax,(%esp)
  102685:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102689:	e8 22 dc ff ff       	call   1002b0 <kprintf>
  10268e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102691:	89 01                	mov    %eax,(%ecx)
		break;
  102693:	e9 6b 00 00 00       	jmp    102703 <syscall+0x5c3>

	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  102698:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10269b:	8b 40 04             	mov    0x4(%eax),%eax
  10269e:	89 04 24             	mov    %eax,(%esp)
  1026a1:	e8 7a 40 00 00       	call   106720 <vmm_alloc_ucont>
  1026a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1026a9:	89 01                	mov    %eax,(%ecx)
		break;
  1026ab:	e9 53 00 00 00       	jmp    102703 <syscall+0x5c3>

	case 204: /* vmm_free */
		cpu->eax = 0;
  1026b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  1026b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026bc:	81 78 04 00 10 40 01 	cmpl   $0x1401000,0x4(%eax)
  1026c3:	0f 82 0e 00 00 00    	jb     1026d7 <syscall+0x597>
			vmm_free((void*) cpu->ebx);
  1026c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026cc:	8b 40 04             	mov    0x4(%eax),%eax
  1026cf:	89 04 24             	mov    %eax,(%esp)
  1026d2:	e8 c9 3c 00 00       	call   1063a0 <vmm_free>
		}
		break;
  1026d7:	e9 27 00 00 00       	jmp    102703 <syscall+0x5c3>

	case 205: /* pmm_print_stats */
		pmm_print_stats();
  1026dc:	e8 df 03 00 00       	call   102ac0 <pmm_print_stats>
		break;
  1026e1:	e9 1d 00 00 00       	jmp    102703 <syscall+0x5c3>
  1026e6:	8d 05 7d 82 10 00    	lea    0x10827d,%eax

	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  1026ec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1026ef:	8b 09                	mov    (%ecx),%ecx
  1026f1:	89 04 24             	mov    %eax,(%esp)
  1026f4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1026f8:	e8 b3 db ff ff       	call   1002b0 <kprintf>
  1026fd:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		break;
	}

	return cpu;
  102703:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102706:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  102709:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10270c:	81 c4 c4 00 00 00    	add    $0xc4,%esp
  102712:	5e                   	pop    %esi
  102713:	5d                   	pop    %ebp
  102714:	c3                   	ret    
  102715:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10271c:	00 00 00 00 

00102720 <kernel_main>:

void kernel_main(struct multiboot_info* mb_info) {
  102720:	55                   	push   %ebp
  102721:	89 e5                	mov    %esp,%ebp
  102723:	57                   	push   %edi
  102724:	56                   	push   %esi
  102725:	83 ec 70             	sub    $0x70,%esp
  102728:	8b 45 08             	mov    0x8(%ebp),%eax
  10272b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  10272e:	e8 3d 43 00 00       	call   106a70 <vmm_init>
  102733:	8d 0d 93 82 10 00    	lea    0x108293,%ecx
  102739:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kprintf("Setting PIT interval...\n");
  10273c:	89 0c 24             	mov    %ecx,(%esp)
  10273f:	e8 6c db ff ff       	call   1002b0 <kprintf>
  102744:	b9 43 00 00 00       	mov    $0x43,%ecx
  102749:	ba 36 00 00 00       	mov    $0x36,%edx

	outb(0x43, 0x36);
  10274e:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
  102755:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
  10275c:	00 
  10275d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102760:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102763:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  102766:	e8 05 02 00 00       	call   102970 <outb>
  10276b:	b8 40 00 00 00       	mov    $0x40,%eax
  102770:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
	outw(0x40, 1000);
  102775:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  10277c:	c7 44 24 04 e8 03 00 	movl   $0x3e8,0x4(%esp)
  102783:	00 
  102784:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102787:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  10278a:	e8 11 02 00 00       	call   1029a0 <outw>
  10278f:	8d 05 ac 82 10 00    	lea    0x1082ac,%eax

    kprintf("Initializing vfs...\n");
  102795:	89 04 24             	mov    %eax,(%esp)
  102798:	e8 13 db ff ff       	call   1002b0 <kprintf>

    vfs_init_root();
  10279d:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1027a0:	e8 4b 34 00 00       	call   105bf0 <vfs_init_root>
    ramfs_fifo_init();
  1027a5:	e8 a6 0b 00 00       	call   103350 <ramfs_fifo_init>
    ramfs_block_init();
  1027aa:	e8 f1 06 00 00       	call   102ea0 <ramfs_block_init>

    driver_keyboard_init();
  1027af:	e8 ac e4 ff ff       	call   100c60 <driver_keyboard_init>
  1027b4:	b8 00 00 00 00       	mov    $0x0,%eax


    map_address_active((uint32_t) mb_info,
  1027b9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1027bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1027bf:	89 0c 24             	mov    %ecx,(%esp)
  1027c2:	89 54 24 04          	mov    %edx,0x4(%esp)
  1027c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1027cd:	00 
  1027ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1027d1:	e8 4a 3c 00 00       	call   106420 <map_address_active>
  1027d6:	b8 00 00 00 00       	mov    $0x0,%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
  1027db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1027de:	8b 49 18             	mov    0x18(%ecx),%ecx
  1027e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1027e4:	8b 52 18             	mov    0x18(%edx),%edx
  1027e7:	89 0c 24             	mov    %ecx,(%esp)
  1027ea:	89 54 24 04          	mov    %edx,0x4(%esp)
  1027ee:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1027f5:	00 
  1027f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1027f9:	e8 22 3c 00 00       	call   106420 <map_address_active>
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  1027fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102801:	8b 00                	mov    (%eax),%eax
  102803:	25 08 00 00 00       	and    $0x8,%eax
  102808:	3d 00 00 00 00       	cmp    $0x0,%eax
  10280d:	0f 84 aa 00 00 00    	je     1028bd <kernel_main+0x19d>
  102813:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  102818:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10281b:	8b 49 18             	mov    0x18(%ecx),%ecx
  10281e:	8b 09                	mov    (%ecx),%ecx
  102820:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102823:	8b 52 18             	mov    0x18(%edx),%edx
  102826:	8b 12                	mov    (%edx),%edx
  102828:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10282b:	8b 76 18             	mov    0x18(%esi),%esi
  10282e:	8b 76 04             	mov    0x4(%esi),%esi
  102831:	8b 7d f4             	mov    -0xc(%ebp),%edi
  102834:	8b 7f 18             	mov    0x18(%edi),%edi
  102837:	8b 3f                	mov    (%edi),%edi
  102839:	29 fe                	sub    %edi,%esi
  10283b:	89 0c 24             	mov    %ecx,(%esp)
  10283e:	89 54 24 04          	mov    %edx,0x4(%esp)
  102842:	89 74 24 08          	mov    %esi,0x8(%esp)
  102846:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10284d:	00 
  10284e:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102851:	e8 2a 3d 00 00       	call   106580 <vmm_map_range>
  102856:	8d 05 c1 82 10 00    	lea    0x1082c1,%eax
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
  10285c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10285f:	8b 49 18             	mov    0x18(%ecx),%ecx
  102862:	8b 49 04             	mov    0x4(%ecx),%ecx
  102865:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102868:	8b 52 18             	mov    0x18(%edx),%edx
  10286b:	8b 12                	mov    (%edx),%edx
  10286d:	29 d1                	sub    %edx,%ecx
  10286f:	89 04 24             	mov    %eax,(%esp)
  102872:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102876:	e8 35 da ff ff       	call   1002b0 <kprintf>
  10287b:	8d 0d 01 83 10 00    	lea    0x108301,%ecx
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);
  102881:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102884:	8b 52 18             	mov    0x18(%edx),%edx
  102887:	8b 12                	mov    (%edx),%edx
  102889:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10288c:	8b 76 18             	mov    0x18(%esi),%esi
  10288f:	8b 76 04             	mov    0x4(%esi),%esi
  102892:	89 0c 24             	mov    %ecx,(%esp)
  102895:	89 54 24 04          	mov    %edx,0x4(%esp)
  102899:	89 74 24 08          	mov    %esi,0x8(%esp)
  10289d:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1028a0:	e8 0b da ff ff       	call   1002b0 <kprintf>

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
  1028a5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1028a8:	8b 49 18             	mov    0x18(%ecx),%ecx
  1028ab:	8b 09                	mov    (%ecx),%ecx
  1028ad:	89 0c 24             	mov    %ecx,(%esp)
  1028b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1028b3:	e8 18 10 00 00       	call   1038d0 <tar_load_ramfs>
    } else {
  1028b8:	e9 11 00 00 00       	jmp    1028ce <kernel_main+0x1ae>
  1028bd:	8d 05 1b 83 10 00    	lea    0x10831b,%eax
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
  1028c3:	89 04 24             	mov    %eax,(%esp)
  1028c6:	e8 e5 d9 ff ff       	call   1002b0 <kprintf>
  1028cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1028ce:	8d 05 4d 83 10 00    	lea    0x10834d,%eax
    }

    kprintf("[kernel_res] Creating /dev/vga\n");
  1028d4:	89 04 24             	mov    %eax,(%esp)
  1028d7:	e8 d4 d9 ff ff       	call   1002b0 <kprintf>
  1028dc:	8d 0d 6d 83 10 00    	lea    0x10836d,%ecx
  1028e2:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);
  1028e7:	89 45 bc             	mov    %eax,-0x44(%ebp)
  1028ea:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  1028ed:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  1028f0:	e8 3b 15 00 00       	call   103e30 <ramfs_vga_driver_struct>
  1028f5:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  1028f8:	89 0c 24             	mov    %ecx,(%esp)
  1028fb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1028ff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102906:	00 
  102907:	e8 94 29 00 00       	call   1052a0 <vfs_create_kfile>
  10290c:	8d 0d 76 83 10 00    	lea    0x108376,%ecx

    if(vfs_exists("/ibin/init")) {
  102912:	89 0c 24             	mov    %ecx,(%esp)
  102915:	89 45 b0             	mov    %eax,-0x50(%ebp)
  102918:	e8 53 2e 00 00       	call   105770 <vfs_exists>
  10291d:	3d 00 00 00 00       	cmp    $0x0,%eax
  102922:	0f 84 37 00 00 00    	je     10295f <kernel_main+0x23f>
  102928:	8d 05 81 83 10 00    	lea    0x108381,%eax
        kprintf("[init] /ibin/init found. Executing...\n");
  10292e:	89 04 24             	mov    %eax,(%esp)
  102931:	e8 7a d9 ff ff       	call   1002b0 <kprintf>
  102936:	8d 0d 76 83 10 00    	lea    0x108376,%ecx
  10293c:	ba 00 00 00 00       	mov    $0x0,%edx

        vfs_exec("/ibin/init", 0);
  102941:	89 0c 24             	mov    %ecx,(%esp)
  102944:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10294b:	00 
  10294c:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10294f:	89 55 a8             	mov    %edx,-0x58(%ebp)
  102952:	e8 a9 2e 00 00       	call   105800 <vfs_exec>
        enableScheduling();
  102957:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10295a:	e8 f1 14 00 00       	call   103e50 <enableScheduling>
    }

	while(1);
  10295f:	e9 00 00 00 00       	jmp    102964 <kernel_main+0x244>
  102964:	e9 fb ff ff ff       	jmp    102964 <kernel_main+0x244>
  102969:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102970 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  102970:	55                   	push   %ebp
  102971:	89 e5                	mov    %esp,%ebp
  102973:	50                   	push   %eax
  102974:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  102978:	66 89 c1             	mov    %ax,%cx
  10297b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10297e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  102982:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  102985:	8a 45 fd             	mov    -0x3(%ebp),%al
  102988:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10298c:	ee                   	out    %al,(%dx)
}
  10298d:	83 c4 04             	add    $0x4,%esp
  102990:	5d                   	pop    %ebp
  102991:	c3                   	ret    
  102992:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102999:	1f 84 00 00 00 00 00 

001029a0 <outw>:
    uint32_t result;
    asm volatile ("inl %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline void outw(uint16_t _port, uint16_t _data) {
  1029a0:	55                   	push   %ebp
  1029a1:	89 e5                	mov    %esp,%ebp
  1029a3:	50                   	push   %eax
  1029a4:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1029a8:	66 89 c1             	mov    %ax,%cx
  1029ab:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1029af:	66 89 c2             	mov    %ax,%dx
  1029b2:	66 89 55 fe          	mov    %dx,-0x2(%ebp)
  1029b6:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
  1029ba:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
  1029be:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1029c2:	66 ef                	out    %ax,(%dx)
}
  1029c4:	83 c4 04             	add    $0x4,%esp
  1029c7:	5d                   	pop    %ebp
  1029c8:	c3                   	ret    
  1029c9:	66 90                	xchg   %ax,%ax
  1029cb:	66 90                	xchg   %ax,%ax
  1029cd:	66 90                	xchg   %ax,%ax
  1029cf:	90                   	nop

001029d0 <pmm_alloc>:
#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
  1029d0:	55                   	push   %ebp
  1029d1:	89 e5                	mov    %esp,%ebp
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  1029d3:	56                   	push   %esi
  1029d4:	83 ec 10             	sub    $0x10,%esp
  1029d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1029de:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  1029e5:	0f 8d b7 00 00 00    	jge    102aa2 <pmm_alloc+0xd2>
		if (allocatable[i]) {
  1029eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1029ee:	81 3c 85 98 98 12 00 	cmpl   $0x0,0x129898(,%eax,4)
  1029f5:	00 00 00 00 
  1029f9:	0f 84 8e 00 00 00    	je     102a8d <pmm_alloc+0xbd>
			int s;
			for (s = 0; s < 32; s++) {
  1029ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102a06:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  102a0d:	0f 8d 75 00 00 00    	jge    102a88 <pmm_alloc+0xb8>
  102a13:	b8 01 00 00 00       	mov    $0x1,%eax
				if (allocatable[i] & (1 << s)) {
  102a18:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102a1b:	8b 0c 8d 98 98 12 00 	mov    0x129898(,%ecx,4),%ecx
  102a22:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102a25:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102a28:	89 d1                	mov    %edx,%ecx
  102a2a:	d3 e0                	shl    %cl,%eax
  102a2c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102a2f:	21 c2                	and    %eax,%edx
  102a31:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  102a37:	0f 84 36 00 00 00    	je     102a73 <pmm_alloc+0xa3>
  102a3d:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  102a42:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102a45:	d3 e0                	shl    %cl,%eax
  102a47:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  102a4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102a4f:	8b 34 95 98 98 12 00 	mov    0x129898(,%edx,4),%esi
  102a56:	21 c6                	and    %eax,%esi
  102a58:	89 34 95 98 98 12 00 	mov    %esi,0x129898(,%edx,4)
					return (uint8_t*) ((i * 32 + s) * 4096);
  102a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a62:	c1 e0 05             	shl    $0x5,%eax
  102a65:	03 45 f0             	add    -0x10(%ebp),%eax
  102a68:	c1 e0 0c             	shl    $0xc,%eax
  102a6b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102a6e:	e9 36 00 00 00       	jmp    102aa9 <pmm_alloc+0xd9>
				}
			}
  102a73:	e9 00 00 00 00       	jmp    102a78 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
		if (allocatable[i]) {
			int s;
			for (s = 0; s < 32; s++) {
  102a78:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a7b:	05 01 00 00 00       	add    $0x1,%eax
  102a80:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102a83:	e9 7e ff ff ff       	jmp    102a06 <pmm_alloc+0x36>
				if (allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
  102a88:	e9 00 00 00 00       	jmp    102a8d <pmm_alloc+0xbd>
	}
  102a8d:	e9 00 00 00 00       	jmp    102a92 <pmm_alloc+0xc2>
uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a95:	05 01 00 00 00       	add    $0x1,%eax
  102a9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102a9d:	e9 3c ff ff ff       	jmp    1029de <pmm_alloc+0xe>
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
	}
	return NULL ;
  102aa2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  102aa9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102aac:	83 c4 10             	add    $0x10,%esp
  102aaf:	5e                   	pop    %esi
  102ab0:	5d                   	pop    %ebp
  102ab1:	c3                   	ret    
  102ab2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102ab9:	1f 84 00 00 00 00 00 

00102ac0 <pmm_print_stats>:

void pmm_print_stats() {
  102ac0:	55                   	push   %ebp
  102ac1:	89 e5                	mov    %esp,%ebp
  102ac3:	56                   	push   %esi
  102ac4:	83 ec 34             	sub    $0x34,%esp
  102ac7:	b8 00 00 10 00       	mov    $0x100000,%eax
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
  102acc:	c7 04 24 00 00 10 00 	movl   $0x100000,(%esp)
  102ad3:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102ad6:	e8 65 00 00 00       	call   102b40 <pmm_get_free_space>
  102adb:	b9 00 04 00 00       	mov    $0x400,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102ae0:	8b 15 28 94 10 00    	mov    0x109428,%edx
  102ae6:	c1 ea 14             	shr    $0x14,%edx
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
  102ae9:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  102af0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102af3:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102af6:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102af9:	e8 42 00 00 00       	call   102b40 <pmm_get_free_space>
  102afe:	8d 0d a8 83 10 00    	lea    0x1083a8,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102b04:	8b 15 28 94 10 00    	mov    0x109428,%edx
  102b0a:	c1 ea 0a             	shr    $0xa,%edx
  102b0d:	89 0c 24             	mov    %ecx,(%esp)
  102b10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102b13:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b17:	8b 75 ec             	mov    -0x14(%ebp),%esi
  102b1a:	89 74 24 08          	mov    %esi,0x8(%esp)
  102b1e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  102b22:	89 54 24 10          	mov    %edx,0x10(%esp)
  102b26:	e8 85 d7 ff ff       	call   1002b0 <kprintf>
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
}
  102b2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102b2e:	83 c4 34             	add    $0x34,%esp
  102b31:	5e                   	pop    %esi
  102b32:	5d                   	pop    %ebp
  102b33:	c3                   	ret    
  102b34:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102b3b:	00 00 00 00 00 

00102b40 <pmm_get_free_space>:

uint32_t pmm_get_free_space(uint32_t div) {
  102b40:	55                   	push   %ebp
  102b41:	89 e5                	mov    %esp,%ebp
  102b43:	83 ec 14             	sub    $0x14,%esp
  102b46:	8b 45 08             	mov    0x8(%ebp),%eax
  102b49:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t free = 0;
  102b4c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102b53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  102b5a:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102b61:	0f 83 73 00 00 00    	jae    102bda <pmm_get_free_space+0x9a>
		for (uint32_t s = 0; s < 32; s++) {
  102b67:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102b6e:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  102b75:	0f 83 4a 00 00 00    	jae    102bc5 <pmm_get_free_space+0x85>
  102b7b:	b8 01 00 00 00       	mov    $0x1,%eax
			if (allocatable[i] & (1 << s))
  102b80:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102b83:	8b 0c 8d 98 98 12 00 	mov    0x129898(,%ecx,4),%ecx
  102b8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102b8d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102b90:	89 d1                	mov    %edx,%ecx
  102b92:	d3 e0                	shl    %cl,%eax
  102b94:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102b97:	21 c2                	and    %eax,%edx
  102b99:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  102b9f:	0f 84 0b 00 00 00    	je     102bb0 <pmm_get_free_space+0x70>
				free += 0x1000;
  102ba5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102ba8:	05 00 10 00 00       	add    $0x1000,%eax
  102bad:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  102bb0:	e9 00 00 00 00       	jmp    102bb5 <pmm_get_free_space+0x75>

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
		for (uint32_t s = 0; s < 32; s++) {
  102bb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102bb8:	05 01 00 00 00       	add    $0x1,%eax
  102bbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102bc0:	e9 a9 ff ff ff       	jmp    102b6e <pmm_get_free_space+0x2e>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}
  102bc5:	e9 00 00 00 00       	jmp    102bca <pmm_get_free_space+0x8a>
}

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102bcd:	05 01 00 00 00       	add    $0x1,%eax
  102bd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102bd5:	e9 80 ff ff ff       	jmp    102b5a <pmm_get_free_space+0x1a>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}

	return free / div;
  102bda:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102bdd:	31 d2                	xor    %edx,%edx
  102bdf:	f7 75 fc             	divl   -0x4(%ebp)
  102be2:	83 c4 14             	add    $0x14,%esp
  102be5:	5d                   	pop    %ebp
  102be6:	c3                   	ret    
  102be7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  102bee:	00 00 

00102bf0 <pmm_free>:
}

void pmm_free(void* addr) {
  102bf0:	55                   	push   %ebp
  102bf1:	89 e5                	mov    %esp,%ebp
  102bf3:	56                   	push   %esi
  102bf4:	83 ec 14             	sub    $0x14,%esp
  102bf7:	8b 45 08             	mov    0x8(%ebp),%eax
  102bfa:	b9 01 00 00 00       	mov    $0x1,%ecx
  102bff:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102c02:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102c05:	c1 e8 0c             	shr    $0xc,%eax
  102c08:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  102c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c0e:	25 1f 00 00 00       	and    $0x1f,%eax
  102c13:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102c16:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c19:	c1 e8 05             	shr    $0x5,%eax
  102c1c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  102c1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c22:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102c25:	89 c1                	mov    %eax,%ecx
  102c27:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102c2a:	d3 e0                	shl    %cl,%eax
  102c2c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102c2f:	8b 34 95 98 98 12 00 	mov    0x129898(,%edx,4),%esi
  102c36:	09 c6                	or     %eax,%esi
  102c38:	89 34 95 98 98 12 00 	mov    %esi,0x129898(,%edx,4)
}
  102c3f:	83 c4 14             	add    $0x14,%esp
  102c42:	5e                   	pop    %esi
  102c43:	5d                   	pop    %ebp
  102c44:	c3                   	ret    
  102c45:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102c4c:	00 00 00 00 

00102c50 <pmm_mark_used>:

void pmm_mark_used(void* addr) {
  102c50:	55                   	push   %ebp
  102c51:	89 e5                	mov    %esp,%ebp
  102c53:	56                   	push   %esi
  102c54:	83 ec 14             	sub    $0x14,%esp
  102c57:	8b 45 08             	mov    0x8(%ebp),%eax
  102c5a:	b9 01 00 00 00       	mov    $0x1,%ecx
  102c5f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102c62:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102c65:	c1 e8 0c             	shr    $0xc,%eax
  102c68:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  102c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c6e:	25 1f 00 00 00       	and    $0x1f,%eax
  102c73:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102c76:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c79:	c1 e8 05             	shr    $0x5,%eax
  102c7c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  102c7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c82:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102c85:	89 c1                	mov    %eax,%ecx
  102c87:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102c8a:	d3 e0                	shl    %cl,%eax
  102c8c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  102c91:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102c94:	8b 34 95 98 98 12 00 	mov    0x129898(,%edx,4),%esi
  102c9b:	21 c6                	and    %eax,%esi
  102c9d:	89 34 95 98 98 12 00 	mov    %esi,0x129898(,%edx,4)
}
  102ca4:	83 c4 14             	add    $0x14,%esp
  102ca7:	5e                   	pop    %esi
  102ca8:	5d                   	pop    %ebp
  102ca9:	c3                   	ret    
  102caa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00102cb0 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  102cb0:	55                   	push   %ebp
  102cb1:	89 e5                	mov    %esp,%ebp
  102cb3:	53                   	push   %ebx
  102cb4:	57                   	push   %edi
  102cb5:	56                   	push   %esi
  102cb6:	83 ec 5c             	sub    $0x5c,%esp
  102cb9:	8b 45 08             	mov    0x8(%ebp),%eax
  102cbc:	8d 0d e5 83 10 00    	lea    0x1083e5,%ecx
  102cc2:	8d 15 98 98 12 00    	lea    0x129898,%edx
  102cc8:	89 d6                	mov    %edx,%esi
  102cca:	81 c6 00 00 02 00    	add    $0x20000,%esi
  102cd0:	89 d7                	mov    %edx,%edi
  102cd2:	bb 00 00 00 00       	mov    $0x0,%ebx
  102cd7:	89 45 d0             	mov    %eax,-0x30(%ebp)
  102cda:	b8 00 00 02 00       	mov    $0x20000,%eax
  102cdf:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102ce2:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102ce5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  102ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ceb:	8b 40 30             	mov    0x30(%eax),%eax
  102cee:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  102cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102cf4:	8b 40 30             	mov    0x30(%eax),%eax
  102cf7:	89 45 c8             	mov    %eax,-0x38(%ebp)
  102cfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102cfd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102d00:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102d03:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  102d06:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  102d09:	03 41 2c             	add    0x2c(%ecx),%eax
  102d0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			+ mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  102d0f:	89 3c 24             	mov    %edi,(%esp)
  102d12:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102d19:	00 
  102d1a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  102d21:	00 
  102d22:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  102d25:	89 55 b8             	mov    %edx,-0x48(%ebp)
  102d28:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  102d2b:	e8 60 1e 00 00       	call   104b90 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  102d30:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102d33:	89 04 24             	mov    %eax,(%esp)
  102d36:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102d39:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102d3d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  102d40:	89 54 24 08          	mov    %edx,0x8(%esp)
  102d44:	e8 67 d5 ff ff       	call   1002b0 <kprintf>
  102d49:	89 45 b0             	mov    %eax,-0x50(%ebp)

	while (mmap < mmap_end) {
  102d4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102d4f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  102d52:	0f 83 77 00 00 00    	jae    102dcf <pmm_init+0x11f>
		if (mmap->mm_type == 1) {
  102d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102d5b:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  102d62:	0f 85 57 00 00 00    	jne    102dbf <pmm_init+0x10f>
			uintptr_t addr = mmap->mm_base_addr;
  102d68:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102d6b:	8b 40 04             	mov    0x4(%eax),%eax
  102d6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uintptr_t end_addr = addr + mmap->mm_length;
  102d71:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102d74:	8b 49 0c             	mov    0xc(%ecx),%ecx
  102d77:	01 c8                	add    %ecx,%eax
  102d79:	89 45 e0             	mov    %eax,-0x20(%ebp)

			while (addr < end_addr) {
  102d7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102d7f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  102d82:	0f 83 32 00 00 00    	jae    102dba <pmm_init+0x10a>
				pmm_free((void*) addr);
  102d88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102d8b:	89 04 24             	mov    %eax,(%esp)
  102d8e:	e8 5d fe ff ff       	call   102bf0 <pmm_free>
				if (addr > upper_limit)
  102d93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102d96:	3b 05 28 94 10 00    	cmp    0x109428,%eax
  102d9c:	0f 86 08 00 00 00    	jbe    102daa <pmm_init+0xfa>
					upper_limit = addr;
  102da2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102da5:	a3 28 94 10 00       	mov    %eax,0x109428
				addr += 0x1000;
  102daa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102dad:	05 00 10 00 00       	add    $0x1000,%eax
  102db2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			}
  102db5:	e9 c2 ff ff ff       	jmp    102d7c <pmm_init+0xcc>
		}
  102dba:	e9 00 00 00 00       	jmp    102dbf <pmm_init+0x10f>
		mmap++;
  102dbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102dc2:	05 18 00 00 00       	add    $0x18,%eax
  102dc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  102dca:	e9 7d ff ff ff       	jmp    102d4c <pmm_init+0x9c>
  102dcf:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
  102dd5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102dd8:	8d 05 00 a0 18 00    	lea    0x18a000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  102dde:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  102de1:	0f 83 1b 00 00 00    	jae    102e02 <pmm_init+0x152>
		pmm_mark_used((void*) addr);
  102de7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102dea:	89 04 24             	mov    %eax,(%esp)
  102ded:	e8 5e fe ff ff       	call   102c50 <pmm_mark_used>
		addr += 0x1000;
  102df2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102df5:	05 00 10 00 00       	add    $0x1000,%eax
  102dfa:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  102dfd:	e9 d6 ff ff ff       	jmp    102dd8 <pmm_init+0x128>

	struct multiboot_module* modules = mb_info->mi_mods_addr;
  102e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e05:	8b 40 18             	mov    0x18(%eax),%eax
  102e08:	89 45 d8             	mov    %eax,-0x28(%ebp)

	pmm_mark_used(mb_info);
  102e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e0e:	89 04 24             	mov    %eax,(%esp)
  102e11:	e8 3a fe ff ff       	call   102c50 <pmm_mark_used>
	pmm_mark_used(modules);
  102e16:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102e19:	89 04 24             	mov    %eax,(%esp)
  102e1c:	e8 2f fe ff ff       	call   102c50 <pmm_mark_used>

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  102e21:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102e28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102e2b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102e2e:	3b 41 14             	cmp    0x14(%ecx),%eax
  102e31:	0f 83 59 00 00 00    	jae    102e90 <pmm_init+0x1e0>
		addr = (uintptr_t) modules[i].start;
  102e37:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102e3a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  102e3d:	c1 e0 04             	shl    $0x4,%eax
  102e40:	01 c1                	add    %eax,%ecx
  102e42:	8b 01                	mov    (%ecx),%eax
  102e44:	89 45 dc             	mov    %eax,-0x24(%ebp)
		while (addr < (uintptr_t) modules[i].end) {
  102e47:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102e4a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  102e4d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102e50:	c1 e1 04             	shl    $0x4,%ecx
  102e53:	01 ca                	add    %ecx,%edx
  102e55:	8b 4a 04             	mov    0x4(%edx),%ecx
  102e58:	39 c8                	cmp    %ecx,%eax
  102e5a:	0f 83 1b 00 00 00    	jae    102e7b <pmm_init+0x1cb>
			pmm_mark_used((void*) addr);
  102e60:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102e63:	89 04 24             	mov    %eax,(%esp)
  102e66:	e8 e5 fd ff ff       	call   102c50 <pmm_mark_used>
			addr += 0x1000;
  102e6b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102e6e:	05 00 10 00 00       	add    $0x1000,%eax
  102e73:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
  102e76:	e9 cc ff ff ff       	jmp    102e47 <pmm_init+0x197>
	}
  102e7b:	e9 00 00 00 00       	jmp    102e80 <pmm_init+0x1d0>

	pmm_mark_used(mb_info);
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  102e80:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102e83:	05 01 00 00 00       	add    $0x1,%eax
  102e88:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102e8b:	e9 98 ff ff ff       	jmp    102e28 <pmm_init+0x178>
		while (addr < (uintptr_t) modules[i].end) {
			pmm_mark_used((void*) addr);
			addr += 0x1000;
		}
	}
}
  102e90:	83 c4 5c             	add    $0x5c,%esp
  102e93:	5e                   	pop    %esi
  102e94:	5f                   	pop    %edi
  102e95:	5b                   	pop    %ebx
  102e96:	5d                   	pop    %ebp
  102e97:	c3                   	ret    
  102e98:	66 90                	xchg   %ax,%ax
  102e9a:	66 90                	xchg   %ax,%ax
  102e9c:	66 90                	xchg   %ax,%ax
  102e9e:	66 90                	xchg   %ax,%ax

00102ea0 <ramfs_block_init>:
#include "ramfs/block.h"

struct block_buffer* buffer[65536];

void ramfs_block_init() {
  102ea0:	55                   	push   %ebp
  102ea1:	89 e5                	mov    %esp,%ebp
  102ea3:	83 ec 18             	sub    $0x18,%esp
  102ea6:	8d 05 98 98 14 00    	lea    0x149898,%eax
  102eac:	b9 00 00 00 00       	mov    $0x0,%ecx
  102eb1:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  102eb6:	89 04 24             	mov    %eax,(%esp)
  102eb9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ec0:	00 
  102ec1:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  102ec8:	00 
  102ec9:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102ecc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102ecf:	e8 bc 1c 00 00       	call   104b90 <memset>
}
  102ed4:	83 c4 18             	add    $0x18,%esp
  102ed7:	5d                   	pop    %ebp
  102ed8:	c3                   	ret    
  102ed9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102ee0 <ramfs_block_read>:
    }

    return 0;
}

uint32_t ramfs_block_read(struct res_handle* handle, void* dest, uint32_t length) {
  102ee0:	55                   	push   %ebp
  102ee1:	89 e5                	mov    %esp,%ebp
  102ee3:	83 ec 28             	sub    $0x28,%esp
  102ee6:	8b 45 10             	mov    0x10(%ebp),%eax
  102ee9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102eec:	8b 55 08             	mov    0x8(%ebp),%edx
  102eef:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102ef2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102ef5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102ef8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102efb:	8b 40 04             	mov    0x4(%eax),%eax
  102efe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102f04:	8b 00                	mov    (%eax),%eax
  102f06:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  102f0d:	00 00 00 00 
  102f11:	0f 84 70 00 00 00    	je     102f87 <ramfs_block_read+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't read that much biatch
  102f17:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f1a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102f1d:	8b 09                	mov    (%ecx),%ecx
  102f1f:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  102f26:	8b 49 04             	mov    0x4(%ecx),%ecx
  102f29:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102f2c:	2b 4a 08             	sub    0x8(%edx),%ecx
  102f2f:	39 c8                	cmp    %ecx,%eax
  102f31:	0f 86 0c 00 00 00    	jbe    102f43 <ramfs_block_read+0x63>
  102f37:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  102f3e:	e9 4b 00 00 00       	jmp    102f8e <ramfs_block_read+0xae>

        memcpy(dest, buffer[kf->id]->buffer + handle->position, length);
  102f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102f46:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102f49:	8b 09                	mov    (%ecx),%ecx
  102f4b:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  102f52:	8b 09                	mov    (%ecx),%ecx
  102f54:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102f57:	03 4a 08             	add    0x8(%edx),%ecx
  102f5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102f5d:	89 04 24             	mov    %eax,(%esp)
  102f60:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102f64:	89 54 24 08          	mov    %edx,0x8(%esp)
  102f68:	e8 83 1c 00 00       	call   104bf0 <memcpy>
        handle->position += length;
  102f6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f70:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102f73:	8b 51 08             	mov    0x8(%ecx),%edx
  102f76:	01 c2                	add    %eax,%edx
  102f78:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  102f7b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102f82:	e9 07 00 00 00       	jmp    102f8e <ramfs_block_read+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  102f87:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  102f8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f91:	83 c4 28             	add    $0x28,%esp
  102f94:	5d                   	pop    %ebp
  102f95:	c3                   	ret    
  102f96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  102f9d:	00 00 00 

00102fa0 <ramfs_block_write>:

uint32_t ramfs_block_write(struct res_handle* handle, void* src, uint32_t length) {
  102fa0:	55                   	push   %ebp
  102fa1:	89 e5                	mov    %esp,%ebp
  102fa3:	83 ec 28             	sub    $0x28,%esp
  102fa6:	8b 45 10             	mov    0x10(%ebp),%eax
  102fa9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102fac:	8b 55 08             	mov    0x8(%ebp),%edx
  102faf:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102fb2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102fb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102fb8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102fbb:	8b 40 04             	mov    0x4(%eax),%eax
  102fbe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102fc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102fc4:	8b 00                	mov    (%eax),%eax
  102fc6:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  102fcd:	00 00 00 00 
  102fd1:	0f 84 70 00 00 00    	je     103047 <ramfs_block_write+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't write  that much biatch TODO realloc so file may grow
  102fd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102fda:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102fdd:	8b 09                	mov    (%ecx),%ecx
  102fdf:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  102fe6:	8b 49 04             	mov    0x4(%ecx),%ecx
  102fe9:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102fec:	2b 4a 08             	sub    0x8(%edx),%ecx
  102fef:	39 c8                	cmp    %ecx,%eax
  102ff1:	0f 86 0c 00 00 00    	jbe    103003 <ramfs_block_write+0x63>
  102ff7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  102ffe:	e9 4b 00 00 00       	jmp    10304e <ramfs_block_write+0xae>

        memcpy(buffer[kf->id]->buffer + handle->position, src, length);
  103003:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103006:	8b 00                	mov    (%eax),%eax
  103008:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  10300f:	8b 00                	mov    (%eax),%eax
  103011:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103014:	03 41 08             	add    0x8(%ecx),%eax
  103017:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10301a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10301d:	89 04 24             	mov    %eax,(%esp)
  103020:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103024:	89 54 24 08          	mov    %edx,0x8(%esp)
  103028:	e8 c3 1b 00 00       	call   104bf0 <memcpy>
        handle->position += length;
  10302d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103030:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103033:	8b 51 08             	mov    0x8(%ecx),%edx
  103036:	01 c2                	add    %eax,%edx
  103038:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10303b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103042:	e9 07 00 00 00       	jmp    10304e <ramfs_block_write+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103047:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10304e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103051:	83 c4 28             	add    $0x28,%esp
  103054:	5d                   	pop    %ebp
  103055:	c3                   	ret    
  103056:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10305d:	00 00 00 

00103060 <ramfs_block_open>:

struct res_handle* ramfs_block_open(struct res_kfile* kf, uint32_t filemode) {
  103060:	55                   	push   %ebp
  103061:	89 e5                	mov    %esp,%ebp
  103063:	83 ec 18             	sub    $0x18,%esp
  103066:	8b 45 0c             	mov    0xc(%ebp),%eax
  103069:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10306c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10306f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  103072:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103075:	8b 00                	mov    (%eax),%eax
  103077:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  10307e:	00 00 00 00 
  103082:	0f 84 9d 00 00 00    	je     103125 <ramfs_block_open+0xc5>
        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  103088:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10308b:	25 01 00 00 00       	and    $0x1,%eax
  103090:	3d 00 00 00 00       	cmp    $0x0,%eax
  103095:	0f 84 18 00 00 00    	je     1030b3 <ramfs_block_open+0x53>
  10309b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10309e:	8b 00                	mov    (%eax),%eax
  1030a0:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  1030a7:	8b 48 08             	mov    0x8(%eax),%ecx
  1030aa:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1030b0:	89 48 08             	mov    %ecx,0x8(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  1030b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1030b6:	25 02 00 00 00       	and    $0x2,%eax
  1030bb:	3d 00 00 00 00       	cmp    $0x0,%eax
  1030c0:	0f 84 18 00 00 00    	je     1030de <ramfs_block_open+0x7e>
  1030c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1030c9:	8b 00                	mov    (%eax),%eax
  1030cb:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  1030d2:	8b 48 0c             	mov    0xc(%eax),%ecx
  1030d5:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1030db:	89 48 0c             	mov    %ecx,0xc(%eax)
  1030de:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  1030e3:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1030ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1030ed:	e8 2e 14 00 00       	call   104520 <malloc>
  1030f2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  1030f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1030f8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1030fb:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  1030fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103101:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  103108:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10310b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  103111:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103114:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103117:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  10311a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10311d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103120:	e9 08 00 00 00       	jmp    10312d <ramfs_block_open+0xcd>
  103125:	b8 01 00 00 00       	mov    $0x1,%eax
    }

    return (void*)1;
  10312a:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10312d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103130:	83 c4 18             	add    $0x18,%esp
  103133:	5d                   	pop    %ebp
  103134:	c3                   	ret    
  103135:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10313c:	00 00 00 00 

00103140 <ramfs_block_close>:

uint32_t ramfs_block_close(struct res_handle* handle) {
  103140:	55                   	push   %ebp
  103141:	89 e5                	mov    %esp,%ebp
  103143:	83 ec 18             	sub    $0x18,%esp
  103146:	8b 45 08             	mov    0x8(%ebp),%eax
  103149:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10314c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10314f:	8b 40 04             	mov    0x4(%eax),%eax
  103152:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  103155:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103158:	8b 00                	mov    (%eax),%eax
  10315a:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  103161:	00 00 00 00 
  103165:	0f 84 61 00 00 00    	je     1031cc <ramfs_block_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  10316b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10316e:	8b 40 0c             	mov    0xc(%eax),%eax
  103171:	25 01 00 00 00       	and    $0x1,%eax
  103176:	3d 00 00 00 00       	cmp    $0x0,%eax
  10317b:	0f 84 18 00 00 00    	je     103199 <ramfs_block_close+0x59>
  103181:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103184:	8b 00                	mov    (%eax),%eax
  103186:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  10318d:	8b 48 08             	mov    0x8(%eax),%ecx
  103190:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103196:	89 48 08             	mov    %ecx,0x8(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  103199:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10319c:	8b 40 0c             	mov    0xc(%eax),%eax
  10319f:	25 02 00 00 00       	and    $0x2,%eax
  1031a4:	3d 00 00 00 00       	cmp    $0x0,%eax
  1031a9:	0f 84 18 00 00 00    	je     1031c7 <ramfs_block_close+0x87>
  1031af:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031b2:	8b 00                	mov    (%eax),%eax
  1031b4:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  1031bb:	8b 48 0c             	mov    0xc(%eax),%ecx
  1031be:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1031c4:	89 48 0c             	mov    %ecx,0xc(%eax)
    }
  1031c7:	e9 00 00 00 00       	jmp    1031cc <ramfs_block_close+0x8c>

    free(handle);
  1031cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1031cf:	89 04 24             	mov    %eax,(%esp)
  1031d2:	e8 19 17 00 00       	call   1048f0 <free>
  1031d7:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  1031dc:	83 c4 18             	add    $0x18,%esp
  1031df:	5d                   	pop    %ebp
  1031e0:	c3                   	ret    
  1031e1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1031e8:	0f 1f 84 00 00 00 00 
  1031ef:	00 

001031f0 <ramfs_block_available>:

struct kfs_driver* ramfs_block_driver_struct() {
    return &block_driver;
}

uint32_t ramfs_block_available(struct res_handle* handle) {
  1031f0:	55                   	push   %ebp
  1031f1:	89 e5                	mov    %esp,%ebp
  1031f3:	83 ec 0c             	sub    $0xc,%esp
  1031f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1031f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1031fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031ff:	8b 40 04             	mov    0x4(%eax),%eax
  103202:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  103205:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103208:	8b 00                	mov    (%eax),%eax
  10320a:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  103211:	00 00 00 00 
  103215:	0f 84 1d 00 00 00    	je     103238 <ramfs_block_available+0x48>
        return buffer[kf->id]->size - handle->position;
  10321b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10321e:	8b 00                	mov    (%eax),%eax
  103220:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  103227:	8b 40 04             	mov    0x4(%eax),%eax
  10322a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10322d:	2b 41 08             	sub    0x8(%ecx),%eax
  103230:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103233:	e9 07 00 00 00       	jmp    10323f <ramfs_block_available+0x4f>
    }

    return 0;
  103238:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10323f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103242:	83 c4 0c             	add    $0xc,%esp
  103245:	5d                   	pop    %ebp
  103246:	c3                   	ret    
  103247:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10324e:	00 00 

00103250 <ramfs_block_create>:

struct res_kfile* ramfs_block_create(uint32_t* args) {
  103250:	55                   	push   %ebp
  103251:	89 e5                	mov    %esp,%ebp
  103253:	83 ec 28             	sub    $0x28,%esp
  103256:	8b 45 08             	mov    0x8(%ebp),%eax
  103259:	b9 08 00 00 00       	mov    $0x8,%ecx
  10325e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  103261:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103268:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10326b:	e8 b0 12 00 00       	call   104520 <malloc>
  103270:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  103273:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10327a:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  103281:	0f 8d a7 00 00 00    	jge    10332e <ramfs_block_create+0xde>
        if(buffer[i] == 0) {
  103287:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10328a:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  103291:	00 00 00 00 
  103295:	0f 85 7e 00 00 00    	jne    103319 <ramfs_block_create+0xc9>
  10329b:	b8 10 00 00 00       	mov    $0x10,%eax
            buffer[i] = malloc(sizeof(struct block_buffer));
  1032a0:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1032a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1032aa:	e8 71 12 00 00       	call   104520 <malloc>
  1032af:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1032b2:	89 04 8d 98 98 14 00 	mov    %eax,0x149898(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  1032b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032bc:	8b 00                	mov    (%eax),%eax
  1032be:	89 04 24             	mov    %eax,(%esp)
  1032c1:	e8 5a 12 00 00       	call   104520 <malloc>
  1032c6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1032c9:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  1032d0:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  1032d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032d5:	8b 00                	mov    (%eax),%eax
  1032d7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1032da:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  1032e1:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->writers = 0;
  1032e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032e7:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  1032ee:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            buffer[i]->readers = 0;
  1032f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032f8:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  1032ff:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            kfret->id = i;
  103306:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103309:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10330c:	89 01                	mov    %eax,(%ecx)

            return kfret;
  10330e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103311:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103314:	e9 1c 00 00 00       	jmp    103335 <ramfs_block_create+0xe5>
        }
    }
  103319:	e9 00 00 00 00       	jmp    10331e <ramfs_block_create+0xce>
}

struct res_kfile* ramfs_block_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  10331e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103321:	05 01 00 00 00       	add    $0x1,%eax
  103326:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103329:	e9 4c ff ff ff       	jmp    10327a <ramfs_block_create+0x2a>

            return kfret;
        }
    }

    return 0;
  10332e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103335:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103338:	83 c4 28             	add    $0x28,%esp
  10333b:	5d                   	pop    %ebp
  10333c:	c3                   	ret    
  10333d:	0f 1f 00             	nopl   (%eax)

00103340 <ramfs_block_driver_struct>:
    .close     = ramfs_block_close,
    .available = ramfs_block_available,
    .drvname   = "RAMFILE"
};

struct kfs_driver* ramfs_block_driver_struct() {
  103340:	55                   	push   %ebp
  103341:	89 e5                	mov    %esp,%ebp
  103343:	8d 05 88 72 10 00    	lea    0x107288,%eax
    return &block_driver;
  103349:	5d                   	pop    %ebp
  10334a:	c3                   	ret    
  10334b:	66 90                	xchg   %ax,%ax
  10334d:	66 90                	xchg   %ax,%ax
  10334f:	90                   	nop

00103350 <ramfs_fifo_init>:
#include "ramfs/fifo.h"

struct fifo_buffer* buffer[65536];

void ramfs_fifo_init() {
  103350:	55                   	push   %ebp
  103351:	89 e5                	mov    %esp,%ebp
  103353:	83 ec 18             	sub    $0x18,%esp
  103356:	8d 05 98 98 14 00    	lea    0x149898,%eax
  10335c:	b9 00 00 00 00       	mov    $0x0,%ecx
  103361:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  103366:	89 04 24             	mov    %eax,(%esp)
  103369:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103370:	00 
  103371:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  103378:	00 
  103379:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10337c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10337f:	e8 0c 18 00 00       	call   104b90 <memset>
}
  103384:	83 c4 18             	add    $0x18,%esp
  103387:	5d                   	pop    %ebp
  103388:	c3                   	ret    
  103389:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00103390 <ramfs_fifo_read>:
    }

    return 0;
}

uint32_t ramfs_fifo_read(struct res_handle* handle, void* dest, uint32_t length) {
  103390:	55                   	push   %ebp
  103391:	89 e5                	mov    %esp,%ebp
  103393:	83 ec 28             	sub    $0x28,%esp
  103396:	8b 45 10             	mov    0x10(%ebp),%eax
  103399:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10339c:	8b 55 08             	mov    0x8(%ebp),%edx
  10339f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1033a2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1033a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1033a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1033ab:	8b 40 04             	mov    0x4(%eax),%eax
  1033ae:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  1033b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033b4:	8b 00                	mov    (%eax),%eax
  1033b6:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  1033bd:	00 00 00 00 
  1033c1:	0f 84 d0 00 00 00    	je     103497 <ramfs_fifo_read+0x107>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't read cause buffer too small
  1033c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033ca:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1033cd:	8b 09                	mov    (%ecx),%ecx
  1033cf:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  1033d6:	3b 41 04             	cmp    0x4(%ecx),%eax
  1033d9:	0f 86 0c 00 00 00    	jbe    1033eb <ramfs_fifo_read+0x5b>
  1033df:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  1033e6:	e9 b3 00 00 00       	jmp    10349e <ramfs_fifo_read+0x10e>
        if(length > buffer[kf->id]->pos)  return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has writers
  1033eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033ee:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1033f1:	8b 09                	mov    (%ecx),%ecx
  1033f3:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  1033fa:	3b 41 08             	cmp    0x8(%ecx),%eax
  1033fd:	0f 86 0c 00 00 00    	jbe    10340f <ramfs_fifo_read+0x7f>
  103403:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  10340a:	e9 8f 00 00 00       	jmp    10349e <ramfs_fifo_read+0x10e>

        memcpy(dest, buffer[kf->id]->buffer, length);
  10340f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103412:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103415:	8b 09                	mov    (%ecx),%ecx
  103417:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  10341e:	8b 09                	mov    (%ecx),%ecx
  103420:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103423:	89 04 24             	mov    %eax,(%esp)
  103426:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10342a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10342e:	e8 bd 17 00 00       	call   104bf0 <memcpy>
        memcpy(buffer[kf->id]->buffer, buffer[kf->id]->buffer + length, buffer[kf->id]->pos - length);
  103433:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103436:	8b 00                	mov    (%eax),%eax
  103438:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  10343f:	8b 00                	mov    (%eax),%eax
  103441:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103444:	8b 09                	mov    (%ecx),%ecx
  103446:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  10344d:	8b 09                	mov    (%ecx),%ecx
  10344f:	03 4d f0             	add    -0x10(%ebp),%ecx
  103452:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103455:	8b 12                	mov    (%edx),%edx
  103457:	8b 14 95 98 98 14 00 	mov    0x149898(,%edx,4),%edx
  10345e:	8b 52 08             	mov    0x8(%edx),%edx
  103461:	2b 55 f0             	sub    -0x10(%ebp),%edx
  103464:	89 04 24             	mov    %eax,(%esp)
  103467:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10346b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10346f:	e8 7c 17 00 00       	call   104bf0 <memcpy>
        buffer[kf->id]->pos -= length;
  103474:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103477:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10347a:	8b 09                	mov    (%ecx),%ecx
  10347c:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  103483:	8b 51 08             	mov    0x8(%ecx),%edx
  103486:	29 c2                	sub    %eax,%edx
  103488:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10348b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103492:	e9 07 00 00 00       	jmp    10349e <ramfs_fifo_read+0x10e>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  103497:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10349e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1034a1:	83 c4 28             	add    $0x28,%esp
  1034a4:	5d                   	pop    %ebp
  1034a5:	c3                   	ret    
  1034a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1034ad:	00 00 00 

001034b0 <ramfs_fifo_write>:

uint32_t ramfs_fifo_write(struct res_handle* handle, void* src, uint32_t length) {
  1034b0:	55                   	push   %ebp
  1034b1:	89 e5                	mov    %esp,%ebp
  1034b3:	83 ec 28             	sub    $0x28,%esp
  1034b6:	8b 45 10             	mov    0x10(%ebp),%eax
  1034b9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1034bc:	8b 55 08             	mov    0x8(%ebp),%edx
  1034bf:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1034c2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1034c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1034c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1034cb:	8b 40 04             	mov    0x4(%eax),%eax
  1034ce:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  1034d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1034d4:	8b 00                	mov    (%eax),%eax
  1034d6:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  1034dd:	00 00 00 00 
  1034e1:	0f 84 af 00 00 00    	je     103596 <ramfs_fifo_write+0xe6>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't write cause buffer too small
  1034e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1034ea:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1034ed:	8b 09                	mov    (%ecx),%ecx
  1034ef:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  1034f6:	3b 41 04             	cmp    0x4(%ecx),%eax
  1034f9:	0f 86 0c 00 00 00    	jbe    10350b <ramfs_fifo_write+0x5b>
  1034ff:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  103506:	e9 92 00 00 00       	jmp    10359d <ramfs_fifo_write+0xed>
        if(length > (buffer[kf->id]->size - buffer[kf->id]->pos)) return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has readers
  10350b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10350e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103511:	8b 09                	mov    (%ecx),%ecx
  103513:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  10351a:	8b 49 04             	mov    0x4(%ecx),%ecx
  10351d:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103520:	8b 12                	mov    (%edx),%edx
  103522:	8b 14 95 98 98 14 00 	mov    0x149898(,%edx,4),%edx
  103529:	2b 4a 08             	sub    0x8(%edx),%ecx
  10352c:	39 c8                	cmp    %ecx,%eax
  10352e:	0f 86 0c 00 00 00    	jbe    103540 <ramfs_fifo_write+0x90>
  103534:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  10353b:	e9 5d 00 00 00       	jmp    10359d <ramfs_fifo_write+0xed>

        memcpy(buffer[kf->id]->buffer + buffer[kf->id]->pos, src, length);
  103540:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103543:	8b 00                	mov    (%eax),%eax
  103545:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  10354c:	8b 00                	mov    (%eax),%eax
  10354e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103551:	8b 09                	mov    (%ecx),%ecx
  103553:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  10355a:	03 41 08             	add    0x8(%ecx),%eax
  10355d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103560:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103563:	89 04 24             	mov    %eax,(%esp)
  103566:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10356a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10356e:	e8 7d 16 00 00       	call   104bf0 <memcpy>
        buffer[kf->id]->pos += length;
  103573:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103576:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103579:	8b 09                	mov    (%ecx),%ecx
  10357b:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  103582:	8b 51 08             	mov    0x8(%ecx),%edx
  103585:	01 c2                	add    %eax,%edx
  103587:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10358a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103591:	e9 07 00 00 00       	jmp    10359d <ramfs_fifo_write+0xed>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103596:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10359d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1035a0:	83 c4 28             	add    $0x28,%esp
  1035a3:	5d                   	pop    %ebp
  1035a4:	c3                   	ret    
  1035a5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1035ac:	00 00 00 00 

001035b0 <ramfs_fifo_open>:

struct res_handle* ramfs_fifo_open(struct res_kfile* kf, uint32_t filemode) {
  1035b0:	55                   	push   %ebp
  1035b1:	89 e5                	mov    %esp,%ebp
  1035b3:	83 ec 18             	sub    $0x18,%esp
  1035b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1035b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1035bc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1035bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  1035c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1035c5:	8b 00                	mov    (%eax),%eax
  1035c7:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  1035ce:	00 00 00 00 
  1035d2:	0f 84 bc 00 00 00    	je     103694 <ramfs_fifo_open+0xe4>
        if(filemode & FM_EXEC) return 0;
  1035d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1035db:	25 04 00 00 00       	and    $0x4,%eax
  1035e0:	3d 00 00 00 00       	cmp    $0x0,%eax
  1035e5:	0f 84 0c 00 00 00    	je     1035f7 <ramfs_fifo_open+0x47>
  1035eb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1035f2:	e9 a4 00 00 00       	jmp    10369b <ramfs_fifo_open+0xeb>

        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  1035f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1035fa:	25 01 00 00 00       	and    $0x1,%eax
  1035ff:	3d 00 00 00 00       	cmp    $0x0,%eax
  103604:	0f 84 18 00 00 00    	je     103622 <ramfs_fifo_open+0x72>
  10360a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10360d:	8b 00                	mov    (%eax),%eax
  10360f:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  103616:	8b 48 0c             	mov    0xc(%eax),%ecx
  103619:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10361f:	89 48 0c             	mov    %ecx,0xc(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  103622:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103625:	25 02 00 00 00       	and    $0x2,%eax
  10362a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10362f:	0f 84 18 00 00 00    	je     10364d <ramfs_fifo_open+0x9d>
  103635:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103638:	8b 00                	mov    (%eax),%eax
  10363a:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  103641:	8b 48 10             	mov    0x10(%eax),%ecx
  103644:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10364a:	89 48 10             	mov    %ecx,0x10(%eax)
  10364d:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  103652:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  103659:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10365c:	e8 bf 0e 00 00       	call   104520 <malloc>
  103661:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  103664:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103667:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10366a:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  10366d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103670:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  103677:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10367a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  103680:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103683:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103686:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  103689:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10368c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10368f:	e9 07 00 00 00       	jmp    10369b <ramfs_fifo_open+0xeb>
    }

    return 0;
  103694:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10369b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10369e:	83 c4 18             	add    $0x18,%esp
  1036a1:	5d                   	pop    %ebp
  1036a2:	c3                   	ret    
  1036a3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1036aa:	84 00 00 00 00 00 

001036b0 <ramfs_fifo_close>:

uint32_t ramfs_fifo_close(struct res_handle* handle) {
  1036b0:	55                   	push   %ebp
  1036b1:	89 e5                	mov    %esp,%ebp
  1036b3:	83 ec 18             	sub    $0x18,%esp
  1036b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1036b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1036bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1036bf:	8b 40 04             	mov    0x4(%eax),%eax
  1036c2:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  1036c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1036c8:	8b 00                	mov    (%eax),%eax
  1036ca:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  1036d1:	00 00 00 00 
  1036d5:	0f 84 61 00 00 00    	je     10373c <ramfs_fifo_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  1036db:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1036de:	8b 40 0c             	mov    0xc(%eax),%eax
  1036e1:	25 01 00 00 00       	and    $0x1,%eax
  1036e6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1036eb:	0f 84 18 00 00 00    	je     103709 <ramfs_fifo_close+0x59>
  1036f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1036f4:	8b 00                	mov    (%eax),%eax
  1036f6:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  1036fd:	8b 48 0c             	mov    0xc(%eax),%ecx
  103700:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103706:	89 48 0c             	mov    %ecx,0xc(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  103709:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10370c:	8b 40 0c             	mov    0xc(%eax),%eax
  10370f:	25 02 00 00 00       	and    $0x2,%eax
  103714:	3d 00 00 00 00       	cmp    $0x0,%eax
  103719:	0f 84 18 00 00 00    	je     103737 <ramfs_fifo_close+0x87>
  10371f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103722:	8b 00                	mov    (%eax),%eax
  103724:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  10372b:	8b 48 10             	mov    0x10(%eax),%ecx
  10372e:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  103734:	89 48 10             	mov    %ecx,0x10(%eax)
    }
  103737:	e9 00 00 00 00       	jmp    10373c <ramfs_fifo_close+0x8c>

    free(handle);
  10373c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10373f:	89 04 24             	mov    %eax,(%esp)
  103742:	e8 a9 11 00 00       	call   1048f0 <free>
  103747:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  10374c:	83 c4 18             	add    $0x18,%esp
  10374f:	5d                   	pop    %ebp
  103750:	c3                   	ret    
  103751:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103758:	0f 1f 84 00 00 00 00 
  10375f:	00 

00103760 <ramfs_fifo_available>:

struct kfs_driver* ramfs_fifo_driver_struct() {
    return &fifo_driver;
}

uint32_t ramfs_fifo_available(struct res_handle* handle) {
  103760:	55                   	push   %ebp
  103761:	89 e5                	mov    %esp,%ebp
  103763:	83 ec 0c             	sub    $0xc,%esp
  103766:	8b 45 08             	mov    0x8(%ebp),%eax
  103769:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10376c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10376f:	8b 40 04             	mov    0x4(%eax),%eax
  103772:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  103775:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103778:	8b 00                	mov    (%eax),%eax
  10377a:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  103781:	00 00 00 00 
  103785:	0f 84 17 00 00 00    	je     1037a2 <ramfs_fifo_available+0x42>
        return buffer[kf->id]->pos;
  10378b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10378e:	8b 00                	mov    (%eax),%eax
  103790:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  103797:	8b 40 08             	mov    0x8(%eax),%eax
  10379a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10379d:	e9 07 00 00 00       	jmp    1037a9 <ramfs_fifo_available+0x49>
    }

    return 0;
  1037a2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1037a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1037ac:	83 c4 0c             	add    $0xc,%esp
  1037af:	5d                   	pop    %ebp
  1037b0:	c3                   	ret    
  1037b1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1037b8:	0f 1f 84 00 00 00 00 
  1037bf:	00 

001037c0 <ramfs_fifo_create>:

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
  1037c0:	55                   	push   %ebp
  1037c1:	89 e5                	mov    %esp,%ebp
  1037c3:	83 ec 28             	sub    $0x28,%esp
  1037c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1037c9:	b9 08 00 00 00       	mov    $0x8,%ecx
  1037ce:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  1037d1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1037d8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1037db:	e8 40 0d 00 00       	call   104520 <malloc>
  1037e0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  1037e3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1037ea:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  1037f1:	0f 8d b8 00 00 00    	jge    1038af <ramfs_fifo_create+0xef>
        if(buffer[i] == 0) {
  1037f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1037fa:	81 3c 85 98 98 14 00 	cmpl   $0x0,0x149898(,%eax,4)
  103801:	00 00 00 00 
  103805:	0f 85 8f 00 00 00    	jne    10389a <ramfs_fifo_create+0xda>
  10380b:	b8 14 00 00 00       	mov    $0x14,%eax
            buffer[i] = malloc(sizeof(struct fifo_buffer));
  103810:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
  103817:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10381a:	e8 01 0d 00 00       	call   104520 <malloc>
  10381f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103822:	89 04 8d 98 98 14 00 	mov    %eax,0x149898(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  103829:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10382c:	8b 00                	mov    (%eax),%eax
  10382e:	89 04 24             	mov    %eax,(%esp)
  103831:	e8 ea 0c 00 00       	call   104520 <malloc>
  103836:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103839:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  103840:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  103842:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103845:	8b 00                	mov    (%eax),%eax
  103847:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10384a:	8b 0c 8d 98 98 14 00 	mov    0x149898(,%ecx,4),%ecx
  103851:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->pos = 0;
  103854:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103857:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  10385e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            buffer[i]->writers = 0;
  103865:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103868:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  10386f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
            buffer[i]->readers = 0;
  103876:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103879:	8b 04 85 98 98 14 00 	mov    0x149898(,%eax,4),%eax
  103880:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            kfret->id = i;
  103887:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10388a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10388d:	89 01                	mov    %eax,(%ecx)

            return kfret;
  10388f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103892:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103895:	e9 1c 00 00 00       	jmp    1038b6 <ramfs_fifo_create+0xf6>
        }
    }
  10389a:	e9 00 00 00 00       	jmp    10389f <ramfs_fifo_create+0xdf>
}

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  10389f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1038a2:	05 01 00 00 00       	add    $0x1,%eax
  1038a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1038aa:	e9 3b ff ff ff       	jmp    1037ea <ramfs_fifo_create+0x2a>

            return kfret;
        }
    }

    return 0;
  1038af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1038b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1038b9:	83 c4 28             	add    $0x28,%esp
  1038bc:	5d                   	pop    %ebp
  1038bd:	c3                   	ret    
  1038be:	66 90                	xchg   %ax,%ax

001038c0 <ramfs_fifo_driver_struct>:
    .close     = ramfs_fifo_close,
    .available = ramfs_fifo_available,
    .drvname   = "FIFO"
};

struct kfs_driver* ramfs_fifo_driver_struct() {
  1038c0:	55                   	push   %ebp
  1038c1:	89 e5                	mov    %esp,%ebp
  1038c3:	8d 05 a4 72 10 00    	lea    0x1072a4,%eax
    return &fifo_driver;
  1038c9:	5d                   	pop    %ebp
  1038ca:	c3                   	ret    
  1038cb:	90                   	nop
  1038cc:	66 90                	xchg   %ax,%ax
  1038ce:	66 90                	xchg   %ax,%ax

001038d0 <tar_load_ramfs>:

    return size;

}

void tar_load_ramfs(void* tarball) {
  1038d0:	55                   	push   %ebp
  1038d1:	89 e5                	mov    %esp,%ebp
  1038d3:	56                   	push   %esi
  1038d4:	83 ec 64             	sub    $0x64,%esp
  1038d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1038da:	8d 0d 08 84 10 00    	lea    0x108408,%ecx
  1038e0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    void* address = tarball;
  1038e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1038e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);
  1038e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1038ec:	89 0c 24             	mov    %ecx,(%esp)
  1038ef:	89 44 24 04          	mov    %eax,0x4(%esp)
  1038f3:	e8 b8 c9 ff ff       	call   1002b0 <kprintf>

    for (i = 0; ; i++)
  1038f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1038ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
    {

        struct tar_header *header = (struct tar_header*)address;
  103902:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103905:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (header->name[0] == '\0')
  103908:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10390b:	0f be 00             	movsbl (%eax),%eax
  10390e:	3d 00 00 00 00       	cmp    $0x0,%eax
  103913:	0f 85 05 00 00 00    	jne    10391e <tar_load_ramfs+0x4e>
            break;
  103919:	e9 67 01 00 00       	jmp    103a85 <tar_load_ramfs+0x1b5>

        uint32_t size = tar_parse_number(header->size);
  10391e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103921:	05 7c 00 00 00       	add    $0x7c,%eax
  103926:	89 04 24             	mov    %eax,(%esp)
  103929:	e8 72 01 00 00       	call   103aa0 <tar_parse_number>
  10392e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        address += 512;
  103931:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103934:	05 00 02 00 00       	add    $0x200,%eax
  103939:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(size != 0) {
  10393c:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  103943:	0f 84 cb 00 00 00    	je     103a14 <tar_load_ramfs+0x144>
  103949:	8d 05 34 84 10 00    	lea    0x108434,%eax
            kprintf("[initrfs] Extracting %s (%d bytes)\n", header->name, size);
  10394f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103952:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103955:	89 04 24             	mov    %eax,(%esp)
  103958:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10395c:	89 54 24 08          	mov    %edx,0x8(%esp)
  103960:	e8 4b c9 ff ff       	call   1002b0 <kprintf>
  103965:	8d 4d e8             	lea    -0x18(%ebp),%ecx

            vfs_create_kfile(header->name, ramfs_block_driver_struct(), &size);
  103968:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10396b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10396e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  103971:	89 55 d0             	mov    %edx,-0x30(%ebp)
  103974:	e8 c7 f9 ff ff       	call   103340 <ramfs_block_driver_struct>
  103979:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10397c:	89 0c 24             	mov    %ecx,(%esp)
  10397f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103983:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  103986:	89 44 24 08          	mov    %eax,0x8(%esp)
  10398a:	e8 11 19 00 00       	call   1052a0 <vfs_create_kfile>
  10398f:	b9 02 00 00 00       	mov    $0x2,%ecx
            struct res_handle* h = vfs_open(header->name, FM_WRITE);
  103994:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103997:	89 14 24             	mov    %edx,(%esp)
  10399a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1039a1:	00 
  1039a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1039a5:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  1039a8:	e8 83 1a 00 00       	call   105430 <vfs_open>
  1039ad:	b9 01 00 00 00       	mov    $0x1,%ecx
  1039b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            uint32_t err = vfs_write(h, address, size, 1);
  1039b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1039b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1039bb:	8b 75 e8             	mov    -0x18(%ebp),%esi
  1039be:	89 04 24             	mov    %eax,(%esp)
  1039c1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1039c5:	89 74 24 08          	mov    %esi,0x8(%esp)
  1039c9:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1039d0:	00 
  1039d1:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  1039d4:	e8 27 1c 00 00       	call   105600 <vfs_write>
  1039d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(err) {
  1039dc:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  1039e3:	0f 84 18 00 00 00    	je     103a01 <tar_load_ramfs+0x131>
  1039e9:	8d 05 58 84 10 00    	lea    0x108458,%eax
                kprintf("[initrfs] VFS ERROR: %d\n", err);
  1039ef:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1039f2:	89 04 24             	mov    %eax,(%esp)
  1039f5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1039f9:	e8 b2 c8 ff ff       	call   1002b0 <kprintf>
  1039fe:	89 45 c0             	mov    %eax,-0x40(%ebp)
            }

            vfs_close(h);
  103a01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103a04:	89 04 24             	mov    %eax,(%esp)
  103a07:	e8 a4 1a 00 00       	call   1054b0 <vfs_close>
        }
  103a0c:	89 45 bc             	mov    %eax,-0x44(%ebp)
  103a0f:	e9 2d 00 00 00       	jmp    103a41 <tar_load_ramfs+0x171>
  103a14:	8d 05 71 84 10 00    	lea    0x108471,%eax
        else
        {
            kprintf("[initrfs] Creating dir %s (%d bytes)\n", header->name, size);
  103a1a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103a1d:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103a20:	89 04 24             	mov    %eax,(%esp)
  103a23:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103a27:	89 54 24 08          	mov    %edx,0x8(%esp)
  103a2b:	e8 80 c8 ff ff       	call   1002b0 <kprintf>
            vfs_create_dir(header->name);
  103a30:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103a33:	89 0c 24             	mov    %ecx,(%esp)
  103a36:	89 45 b8             	mov    %eax,-0x48(%ebp)
  103a39:	e8 d2 16 00 00       	call   105110 <vfs_create_dir>
  103a3e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        }

        address += (size / 512) * 512;
  103a41:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103a44:	c1 e8 09             	shr    $0x9,%eax
  103a47:	c1 e0 09             	shl    $0x9,%eax
  103a4a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103a4d:	01 c1                	add    %eax,%ecx
  103a4f:	89 4d f4             	mov    %ecx,-0xc(%ebp)

        if (size % 512)
  103a52:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103a55:	25 ff 01 00 00       	and    $0x1ff,%eax
  103a5a:	3d 00 00 00 00       	cmp    $0x0,%eax
  103a5f:	0f 84 0b 00 00 00    	je     103a70 <tar_load_ramfs+0x1a0>
            address += 512;
  103a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a68:	05 00 02 00 00       	add    $0x200,%eax
  103a6d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    }
  103a70:	e9 00 00 00 00       	jmp    103a75 <tar_load_ramfs+0x1a5>

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);

    for (i = 0; ; i++)
  103a75:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a78:	05 01 00 00 00       	add    $0x1,%eax
  103a7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103a80:	e9 7d fe ff ff       	jmp    103902 <tar_load_ramfs+0x32>
  103a85:	8d 05 97 84 10 00    	lea    0x108497,%eax
        if (size % 512)
            address += 512;

    }

    kprintf("[initrfs] Finished unpacking tarball\n");
  103a8b:	89 04 24             	mov    %eax,(%esp)
  103a8e:	e8 1d c8 ff ff       	call   1002b0 <kprintf>
}
  103a93:	89 45 b0             	mov    %eax,-0x50(%ebp)
  103a96:	83 c4 64             	add    $0x64,%esp
  103a99:	5e                   	pop    %esi
  103a9a:	5d                   	pop    %ebp
  103a9b:	c3                   	ret    
  103a9c:	0f 1f 40 00          	nopl   0x0(%eax)

00103aa0 <tar_parse_number>:
#include "ramfs/tar.h"
#include "ramfs/block.h"
#include "vfs.h"

static uint32_t tar_parse_number(const char *in)
{
  103aa0:	55                   	push   %ebp
  103aa1:	89 e5                	mov    %esp,%ebp
  103aa3:	83 ec 10             	sub    $0x10,%esp
  103aa6:	8b 45 08             	mov    0x8(%ebp),%eax
  103aa9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    unsigned int size = 0;
  103aac:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    unsigned int j;
    unsigned int count = 1;
  103ab3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

    for (j = 11; j > 0; j--, count *= 8)
  103aba:	c7 45 f4 0b 00 00 00 	movl   $0xb,-0xc(%ebp)
  103ac1:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103ac8:	0f 86 39 00 00 00    	jbe    103b07 <tar_parse_number+0x67>
        size += ((in[j - 1] - '0') * count);
  103ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ad1:	2d 01 00 00 00       	sub    $0x1,%eax
  103ad6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103ad9:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  103add:	2d 30 00 00 00       	sub    $0x30,%eax
  103ae2:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  103ae6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103ae9:	01 c1                	add    %eax,%ecx
  103aeb:	89 4d f8             	mov    %ecx,-0x8(%ebp)

    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;

    for (j = 11; j > 0; j--, count *= 8)
  103aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103af1:	05 ff ff ff ff       	add    $0xffffffff,%eax
  103af6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103af9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103afc:	c1 e0 03             	shl    $0x3,%eax
  103aff:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103b02:	e9 ba ff ff ff       	jmp    103ac1 <tar_parse_number+0x21>
        size += ((in[j - 1] - '0') * count);

    return size;
  103b07:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103b0a:	83 c4 10             	add    $0x10,%esp
  103b0d:	5d                   	pop    %ebp
  103b0e:	c3                   	ret    
  103b0f:	90                   	nop

00103b10 <ramfs_vga_read>:

struct res_kfile* ramfs_vga_create(uint32_t* args) {
    return malloc(sizeof(struct res_kfile));
}

uint32_t ramfs_vga_read(struct res_handle* handle, void* dest, uint32_t length) {
  103b10:	55                   	push   %ebp
  103b11:	89 e5                	mov    %esp,%ebp
  103b13:	56                   	push   %esi
  103b14:	83 ec 0c             	sub    $0xc,%esp
  103b17:	8b 45 10             	mov    0x10(%ebp),%eax
  103b1a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103b1d:	8b 55 08             	mov    0x8(%ebp),%edx
  103b20:	be 03 00 00 00       	mov    $0x3,%esi
  103b25:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103b28:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103b2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  103b2e:	89 f0                	mov    %esi,%eax
  103b30:	83 c4 0c             	add    $0xc,%esp
  103b33:	5e                   	pop    %esi
  103b34:	5d                   	pop    %ebp
  103b35:	c3                   	ret    
  103b36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  103b3d:	00 00 00 

00103b40 <ramfs_vga_write>:
}

uint32_t ramfs_vga_write(struct res_handle* handle, void* src, uint32_t length) {
  103b40:	55                   	push   %ebp
  103b41:	89 e5                	mov    %esp,%ebp
  103b43:	83 ec 1c             	sub    $0x1c,%esp
  103b46:	8b 45 10             	mov    0x10(%ebp),%eax
  103b49:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103b4c:	8b 55 08             	mov    0x8(%ebp),%edx
  103b4f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103b52:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103b55:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(length != sizeof(struct vga_command)) return RW_ERR_DRIVER;
  103b58:	81 7d f0 06 00 00 00 	cmpl   $0x6,-0x10(%ebp)
  103b5f:	0f 84 0c 00 00 00    	je     103b71 <ramfs_vga_write+0x31>
  103b65:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  103b6c:	e9 1f 01 00 00       	jmp    103c90 <ramfs_vga_write+0x150>

    struct vga_command* vgac = src;
  103b71:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b74:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(vgac->command == CMD_SET) {
  103b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103b7a:	0f b7 00             	movzwl (%eax),%eax
  103b7d:	3d 00 00 00 00       	cmp    $0x0,%eax
  103b82:	0f 85 2f 00 00 00    	jne    103bb7 <ramfs_vga_write+0x77>
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
  103b88:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103b8b:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  103b8f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
  103b94:	0f 8d 18 00 00 00    	jge    103bb2 <ramfs_vga_write+0x72>
  103b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103b9d:	66 8b 48 04          	mov    0x4(%eax),%cx
  103ba1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103ba4:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  103ba8:	8b 15 c0 72 10 00    	mov    0x1072c0,%edx
  103bae:	66 89 0c 42          	mov    %cx,(%edx,%eax,2)
    }
  103bb2:	e9 00 00 00 00       	jmp    103bb7 <ramfs_vga_write+0x77>

    if(vgac->command == CMD_CLEAR) {
  103bb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103bba:	0f b7 00             	movzwl (%eax),%eax
  103bbd:	3d 01 00 00 00       	cmp    $0x1,%eax
  103bc2:	0f 85 38 00 00 00    	jne    103c00 <ramfs_vga_write+0xc0>
        for(int i = 0; i < (80 * 25); i++) {
  103bc8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  103bcf:	81 7d e8 d0 07 00 00 	cmpl   $0x7d0,-0x18(%ebp)
  103bd6:	0f 8d 1f 00 00 00    	jge    103bfb <ramfs_vga_write+0xbb>
            vga_buffer[i] = 0;
  103bdc:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103bdf:	8b 0d c0 72 10 00    	mov    0x1072c0,%ecx
  103be5:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
    if(vgac->command == CMD_SET) {
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
    }

    if(vgac->command == CMD_CLEAR) {
        for(int i = 0; i < (80 * 25); i++) {
  103beb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103bee:	05 01 00 00 00       	add    $0x1,%eax
  103bf3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103bf6:	e9 d4 ff ff ff       	jmp    103bcf <ramfs_vga_write+0x8f>
            vga_buffer[i] = 0;
        }
    }
  103bfb:	e9 00 00 00 00       	jmp    103c00 <ramfs_vga_write+0xc0>

    if(vgac->command == CMD_SCROLL) {
  103c00:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103c03:	0f b7 00             	movzwl (%eax),%eax
  103c06:	3d 02 00 00 00       	cmp    $0x2,%eax
  103c0b:	0f 85 78 00 00 00    	jne    103c89 <ramfs_vga_write+0x149>
        int i;
        for (i = 0; i < 24 * 80; i++) {
  103c11:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  103c18:	81 7d e4 80 07 00 00 	cmpl   $0x780,-0x1c(%ebp)
  103c1f:	0f 8d 2e 00 00 00    	jge    103c53 <ramfs_vga_write+0x113>
            vga_buffer[i] = vga_buffer[i + 80];
  103c25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103c28:	8b 0d c0 72 10 00    	mov    0x1072c0,%ecx
  103c2e:	66 8b 94 41 a0 00 00 	mov    0xa0(%ecx,%eax,2),%dx
  103c35:	00 
  103c36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103c39:	8b 0d c0 72 10 00    	mov    0x1072c0,%ecx
  103c3f:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)
        }
    }

    if(vgac->command == CMD_SCROLL) {
        int i;
        for (i = 0; i < 24 * 80; i++) {
  103c43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103c46:	05 01 00 00 00       	add    $0x1,%eax
  103c4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103c4e:	e9 c5 ff ff ff       	jmp    103c18 <ramfs_vga_write+0xd8>
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  103c53:	e9 00 00 00 00       	jmp    103c58 <ramfs_vga_write+0x118>
  103c58:	81 7d e4 d0 07 00 00 	cmpl   $0x7d0,-0x1c(%ebp)
  103c5f:	0f 8d 1f 00 00 00    	jge    103c84 <ramfs_vga_write+0x144>
            vga_buffer[i] = 0;
  103c65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103c68:	8b 0d c0 72 10 00    	mov    0x1072c0,%ecx
  103c6e:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
        int i;
        for (i = 0; i < 24 * 80; i++) {
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  103c74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103c77:	05 01 00 00 00       	add    $0x1,%eax
  103c7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103c7f:	e9 d4 ff ff ff       	jmp    103c58 <ramfs_vga_write+0x118>
            vga_buffer[i] = 0;
        }
    }
  103c84:	e9 00 00 00 00       	jmp    103c89 <ramfs_vga_write+0x149>

    return RW_OK; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103c89:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103c90:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103c93:	83 c4 1c             	add    $0x1c,%esp
  103c96:	5d                   	pop    %ebp
  103c97:	c3                   	ret    
  103c98:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  103c9f:	00 

00103ca0 <ramfs_vga_open>:

struct res_handle* ramfs_vga_open(struct res_kfile* kf, uint32_t filemode) {
  103ca0:	55                   	push   %ebp
  103ca1:	89 e5                	mov    %esp,%ebp
  103ca3:	83 ec 18             	sub    $0x18,%esp
  103ca6:	8b 45 0c             	mov    0xc(%ebp),%eax
  103ca9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103cac:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103caf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(filemode & FM_EXEC) return 0;
  103cb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cb5:	25 04 00 00 00       	and    $0x4,%eax
  103cba:	3d 00 00 00 00       	cmp    $0x0,%eax
  103cbf:	0f 84 0c 00 00 00    	je     103cd1 <ramfs_vga_open+0x31>
  103cc5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103ccc:	e9 b2 00 00 00       	jmp    103d83 <ramfs_vga_open+0xe3>
    if(filemode & FM_READ) return 0;
  103cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cd4:	25 01 00 00 00       	and    $0x1,%eax
  103cd9:	3d 00 00 00 00       	cmp    $0x0,%eax
  103cde:	0f 84 0c 00 00 00    	je     103cf0 <ramfs_vga_open+0x50>
  103ce4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103ceb:	e9 93 00 00 00       	jmp    103d83 <ramfs_vga_open+0xe3>

    if((filemode & FM_WRITE) && vga_writers != 0) return 0;
  103cf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cf3:	25 02 00 00 00       	and    $0x2,%eax
  103cf8:	3d 00 00 00 00       	cmp    $0x0,%eax
  103cfd:	0f 84 1c 00 00 00    	je     103d1f <ramfs_vga_open+0x7f>
  103d03:	81 3d 2c 94 10 00 00 	cmpl   $0x0,0x10942c
  103d0a:	00 00 00 
  103d0d:	0f 84 0c 00 00 00    	je     103d1f <ramfs_vga_open+0x7f>
  103d13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103d1a:	e9 64 00 00 00       	jmp    103d83 <ramfs_vga_open+0xe3>
    if((filemode & FM_WRITE)) vga_writers++;
  103d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103d22:	25 02 00 00 00       	and    $0x2,%eax
  103d27:	3d 00 00 00 00       	cmp    $0x0,%eax
  103d2c:	0f 84 0f 00 00 00    	je     103d41 <ramfs_vga_open+0xa1>
  103d32:	a1 2c 94 10 00       	mov    0x10942c,%eax
  103d37:	05 01 00 00 00       	add    $0x1,%eax
  103d3c:	a3 2c 94 10 00       	mov    %eax,0x10942c
  103d41:	b8 10 00 00 00       	mov    $0x10,%eax

    struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  103d46:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  103d4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103d50:	e8 cb 07 00 00       	call   104520 <malloc>
  103d55:	89 45 f0             	mov    %eax,-0x10(%ebp)

    rethandle->filemode = filemode;
  103d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103d5b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103d5e:	89 41 0c             	mov    %eax,0xc(%ecx)
    rethandle->position = 0;
  103d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103d64:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    rethandle->res_type = RES_KERNDRV;
  103d6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103d6e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    rethandle->res_ptr  = kf;
  103d74:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d77:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103d7a:	89 41 04             	mov    %eax,0x4(%ecx)

    return rethandle;
  103d7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103d80:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  103d83:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d86:	83 c4 18             	add    $0x18,%esp
  103d89:	5d                   	pop    %ebp
  103d8a:	c3                   	ret    
  103d8b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103d90 <ramfs_vga_close>:

uint32_t ramfs_vga_close(struct res_handle* handle) {
  103d90:	55                   	push   %ebp
  103d91:	89 e5                	mov    %esp,%ebp
  103d93:	83 ec 08             	sub    $0x8,%esp
  103d96:	8b 45 08             	mov    0x8(%ebp),%eax
  103d99:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(handle->filemode & FM_WRITE) vga_writers--;
  103d9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d9f:	8b 40 0c             	mov    0xc(%eax),%eax
  103da2:	25 02 00 00 00       	and    $0x2,%eax
  103da7:	3d 00 00 00 00       	cmp    $0x0,%eax
  103dac:	0f 84 0f 00 00 00    	je     103dc1 <ramfs_vga_close+0x31>
  103db2:	a1 2c 94 10 00       	mov    0x10942c,%eax
  103db7:	05 ff ff ff ff       	add    $0xffffffff,%eax
  103dbc:	a3 2c 94 10 00       	mov    %eax,0x10942c

    free(handle);
  103dc1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103dc4:	89 04 24             	mov    %eax,(%esp)
  103dc7:	e8 24 0b 00 00       	call   1048f0 <free>
  103dcc:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  103dd1:	83 c4 08             	add    $0x8,%esp
  103dd4:	5d                   	pop    %ebp
  103dd5:	c3                   	ret    
  103dd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  103ddd:	00 00 00 

00103de0 <ramfs_vga_available>:

uint32_t ramfs_vga_writers() {
    return vga_writers;
}

uint32_t ramfs_vga_available(struct res_handle* handle) {
  103de0:	55                   	push   %ebp
  103de1:	89 e5                	mov    %esp,%ebp
  103de3:	50                   	push   %eax
  103de4:	8b 45 08             	mov    0x8(%ebp),%eax
  103de7:	b9 06 00 00 00       	mov    $0x6,%ecx
  103dec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sizeof(struct vga_command);
  103def:	89 c8                	mov    %ecx,%eax
  103df1:	83 c4 04             	add    $0x4,%esp
  103df4:	5d                   	pop    %ebp
  103df5:	c3                   	ret    
  103df6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  103dfd:	00 00 00 

00103e00 <ramfs_vga_create>:
}

struct res_kfile* ramfs_vga_create(uint32_t* args) {
  103e00:	55                   	push   %ebp
  103e01:	89 e5                	mov    %esp,%ebp
  103e03:	83 ec 18             	sub    $0x18,%esp
  103e06:	8b 45 08             	mov    0x8(%ebp),%eax
  103e09:	b9 08 00 00 00       	mov    $0x8,%ecx
  103e0e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return malloc(sizeof(struct res_kfile));
  103e11:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103e18:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103e1b:	e8 00 07 00 00       	call   104520 <malloc>
  103e20:	83 c4 18             	add    $0x18,%esp
  103e23:	5d                   	pop    %ebp
  103e24:	c3                   	ret    
  103e25:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  103e2c:	00 00 00 00 

00103e30 <ramfs_vga_driver_struct>:
    .close     = ramfs_vga_close,
    .available = ramfs_vga_available,
    .drvname   = "VGA_CONTROL"
};

struct kfs_driver* ramfs_vga_driver_struct() {
  103e30:	55                   	push   %ebp
  103e31:	89 e5                	mov    %esp,%ebp
  103e33:	8d 05 c4 72 10 00    	lea    0x1072c4,%eax
    return &vga_driver;
  103e39:	5d                   	pop    %ebp
  103e3a:	c3                   	ret    
  103e3b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103e40 <ramfs_vga_writers>:
}

uint32_t ramfs_vga_writers() {
  103e40:	55                   	push   %ebp
  103e41:	89 e5                	mov    %esp,%ebp
    return vga_writers;
  103e43:	a1 2c 94 10 00       	mov    0x10942c,%eax
  103e48:	5d                   	pop    %ebp
  103e49:	c3                   	ret    
  103e4a:	66 90                	xchg   %ax,%ax
  103e4c:	66 90                	xchg   %ax,%ax
  103e4e:	66 90                	xchg   %ax,%ax

00103e50 <enableScheduling>:
struct task* first_task = 0;
struct task* current_task = 0;

int nextPID = 1;

void enableScheduling(void) {
  103e50:	55                   	push   %ebp
  103e51:	89 e5                	mov    %esp,%ebp
    schedulingEnabled = 1;
  103e53:	c7 05 30 94 10 00 01 	movl   $0x1,0x109430
  103e5a:	00 00 00 
}
  103e5d:	5d                   	pop    %ebp
  103e5e:	c3                   	ret    
  103e5f:	90                   	nop

00103e60 <isSchedulingEnabled>:

uint32_t isSchedulingEnabled(void) {
  103e60:	55                   	push   %ebp
  103e61:	89 e5                	mov    %esp,%ebp
    return schedulingEnabled;
  103e63:	a1 30 94 10 00       	mov    0x109430,%eax
  103e68:	5d                   	pop    %ebp
  103e69:	c3                   	ret    
  103e6a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103e70 <get_current_task>:
}

struct task* get_current_task(void) {
  103e70:	55                   	push   %ebp
  103e71:	89 e5                	mov    %esp,%ebp
    return current_task;
  103e73:	a1 38 94 10 00       	mov    0x109438,%eax
  103e78:	5d                   	pop    %ebp
  103e79:	c3                   	ret    
  103e7a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103e80 <register_handle>:
}

uint32_t register_handle(struct res_handle* h) {
  103e80:	55                   	push   %ebp
  103e81:	89 e5                	mov    %esp,%ebp
  103e83:	83 ec 18             	sub    $0x18,%esp
  103e86:	8b 45 08             	mov    0x8(%ebp),%eax
  103e89:	b9 08 00 00 00       	mov    $0x8,%ecx
  103e8e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct hl_node* old = current_task->handle_list;
  103e91:	a1 38 94 10 00       	mov    0x109438,%eax
  103e96:	8b 40 2c             	mov    0x2c(%eax),%eax
  103e99:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task->handle_list = malloc(sizeof(struct hl_node));
  103e9c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103ea3:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103ea6:	e8 75 06 00 00       	call   104520 <malloc>
  103eab:	b9 00 00 00 00       	mov    $0x0,%ecx
  103eb0:	8b 15 38 94 10 00    	mov    0x109438,%edx
  103eb6:	89 42 2c             	mov    %eax,0x2c(%edx)
    current_task->handle_list->next = old;
  103eb9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ebc:	8b 15 38 94 10 00    	mov    0x109438,%edx
  103ec2:	8b 52 2c             	mov    0x2c(%edx),%edx
  103ec5:	89 42 04             	mov    %eax,0x4(%edx)
    current_task->handle_list->handle = h;
  103ec8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103ecb:	8b 15 38 94 10 00    	mov    0x109438,%edx
  103ed1:	8b 52 2c             	mov    0x2c(%edx),%edx
  103ed4:	89 02                	mov    %eax,(%edx)

    return 0;
  103ed6:	89 c8                	mov    %ecx,%eax
  103ed8:	83 c4 18             	add    $0x18,%esp
  103edb:	5d                   	pop    %ebp
  103edc:	c3                   	ret    
  103edd:	0f 1f 00             	nopl   (%eax)

00103ee0 <unregister_handle>:
}

uint32_t unregister_handle(struct res_handle* h) {
  103ee0:	55                   	push   %ebp
  103ee1:	89 e5                	mov    %esp,%ebp
  103ee3:	83 ec 18             	sub    $0x18,%esp
  103ee6:	8b 45 08             	mov    0x8(%ebp),%eax
  103ee9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct hl_node* cur = current_task->handle_list;
  103eec:	a1 38 94 10 00       	mov    0x109438,%eax
  103ef1:	8b 40 2c             	mov    0x2c(%eax),%eax
  103ef4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(h == 0) return 2;
  103ef7:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103efe:	0f 85 0c 00 00 00    	jne    103f10 <unregister_handle+0x30>
  103f04:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
  103f0b:	e9 b4 00 00 00       	jmp    103fc4 <unregister_handle+0xe4>
    if(cur == 0) return 1;
  103f10:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103f17:	0f 85 0c 00 00 00    	jne    103f29 <unregister_handle+0x49>
  103f1d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  103f24:	e9 9b 00 00 00       	jmp    103fc4 <unregister_handle+0xe4>

    if(cur->handle == h) {
  103f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f2c:	8b 00                	mov    (%eax),%eax
  103f2e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103f31:	0f 85 26 00 00 00    	jne    103f5d <unregister_handle+0x7d>
        current_task->handle_list = cur->next;
  103f37:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f3a:	8b 40 04             	mov    0x4(%eax),%eax
  103f3d:	8b 0d 38 94 10 00    	mov    0x109438,%ecx
  103f43:	89 41 2c             	mov    %eax,0x2c(%ecx)
        free(cur);
  103f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f49:	89 04 24             	mov    %eax,(%esp)
  103f4c:	e8 9f 09 00 00       	call   1048f0 <free>

        return 0;
  103f51:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103f58:	e9 67 00 00 00       	jmp    103fc4 <unregister_handle+0xe4>
    }

    while(cur != 0) {
  103f5d:	e9 00 00 00 00       	jmp    103f62 <unregister_handle+0x82>
  103f62:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103f69:	0f 84 4e 00 00 00    	je     103fbd <unregister_handle+0xdd>
        if(cur->next->handle == h) {
  103f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f72:	8b 40 04             	mov    0x4(%eax),%eax
  103f75:	8b 00                	mov    (%eax),%eax
  103f77:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103f7a:	0f 85 2f 00 00 00    	jne    103faf <unregister_handle+0xcf>
            void* next = cur->next;
  103f80:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f83:	8b 40 04             	mov    0x4(%eax),%eax
  103f86:	89 45 f0             	mov    %eax,-0x10(%ebp)
            cur->next =  cur->next->next;
  103f89:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f8c:	8b 40 04             	mov    0x4(%eax),%eax
  103f8f:	8b 40 04             	mov    0x4(%eax),%eax
  103f92:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103f95:	89 41 04             	mov    %eax,0x4(%ecx)

            free(next);
  103f98:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103f9b:	89 04 24             	mov    %eax,(%esp)
  103f9e:	e8 4d 09 00 00       	call   1048f0 <free>

            return 0;
  103fa3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103faa:	e9 15 00 00 00       	jmp    103fc4 <unregister_handle+0xe4>
        }

        cur = cur->next;
  103faf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103fb2:	8b 40 04             	mov    0x4(%eax),%eax
  103fb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  103fb8:	e9 a5 ff ff ff       	jmp    103f62 <unregister_handle+0x82>

    return 3;
  103fbd:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  103fc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103fc7:	83 c4 18             	add    $0x18,%esp
  103fca:	5d                   	pop    %ebp
  103fcb:	c3                   	ret    
  103fcc:	0f 1f 40 00          	nopl   0x0(%eax)

00103fd0 <schedule_exception>:

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  103fd0:	55                   	push   %ebp
  103fd1:	89 e5                	mov    %esp,%ebp
  103fd3:	57                   	push   %edi
  103fd4:	56                   	push   %esi
  103fd5:	83 ec 40             	sub    $0x40,%esp
  103fd8:	8b 45 08             	mov    0x8(%ebp),%eax
  103fdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (current_task == first_task && current_task->next == 0) {
  103fde:	a1 38 94 10 00       	mov    0x109438,%eax
  103fe3:	3b 05 34 94 10 00    	cmp    0x109434,%eax
  103fe9:	0f 85 85 00 00 00    	jne    104074 <schedule_exception+0xa4>
  103fef:	a1 38 94 10 00       	mov    0x109438,%eax
  103ff4:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  103ffb:	0f 85 73 00 00 00    	jne    104074 <schedule_exception+0xa4>
  104001:	b8 04 00 00 00       	mov    $0x4,%eax
        //Only one process is running, which just crashed. Stop system.
        setclr(0x04);
  104006:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10400d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104010:	e8 7b c2 ff ff       	call   100290 <setclr>
  104015:	8d 05 c9 84 10 00    	lea    0x1084c9,%eax
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s) due to exception %x:%x \n", current_task->PID, current_task->path, cpu->intr, cpu->error);
  10401b:	8b 0d 38 94 10 00    	mov    0x109438,%ecx
  104021:	8b 09                	mov    (%ecx),%ecx
  104023:	8b 15 38 94 10 00    	mov    0x109438,%edx
  104029:	8b 52 1c             	mov    0x1c(%edx),%edx
  10402c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10402f:	8b 76 1c             	mov    0x1c(%esi),%esi
  104032:	8b 7d f0             	mov    -0x10(%ebp),%edi
  104035:	8b 7f 20             	mov    0x20(%edi),%edi
  104038:	89 04 24             	mov    %eax,(%esp)
  10403b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10403f:	89 54 24 08          	mov    %edx,0x8(%esp)
  104043:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104047:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10404b:	e8 60 c2 ff ff       	call   1002b0 <kprintf>
  104050:	8d 0d 08 85 10 00    	lea    0x108508,%ecx
        show_cod(cpu, "Last task crashed. Terminating kernel...");
  104056:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104059:	89 14 24             	mov    %edx,(%esp)
  10405c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104060:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104063:	e8 58 c0 ff ff       	call   1000c0 <show_cod>

        //will never occur cause COD terminates execution
        return 0;
  104068:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10406f:	e9 90 00 00 00       	jmp    104104 <schedule_exception+0x134>
  104074:	b8 04 00 00 00       	mov    $0x4,%eax
    } else {
        //Potential security leaks available in following code.
        setclr(0x04);
  104079:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  104080:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  104083:	e8 08 c2 ff ff       	call   100290 <setclr>
  104088:	8d 05 c9 84 10 00    	lea    0x1084c9,%eax
        kprintf("\n~~~ Terminated task (PID=%d PATH=%s) due to exception %x:%x \n", current_task->PID, current_task->path, cpu->intr, cpu->error);
  10408e:	8b 0d 38 94 10 00    	mov    0x109438,%ecx
  104094:	8b 09                	mov    (%ecx),%ecx
  104096:	8b 15 38 94 10 00    	mov    0x109438,%edx
  10409c:	8b 52 1c             	mov    0x1c(%edx),%edx
  10409f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1040a2:	8b 76 1c             	mov    0x1c(%esi),%esi
  1040a5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1040a8:	8b 7f 20             	mov    0x20(%edi),%edi
  1040ab:	89 04 24             	mov    %eax,(%esp)
  1040ae:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1040b2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1040b6:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1040ba:	89 7c 24 10          	mov    %edi,0x10(%esp)
  1040be:	e8 ed c1 ff ff       	call   1002b0 <kprintf>
  1040c3:	8d 0d 24 82 10 00    	lea    0x108224,%ecx
        kprintf("\n");
  1040c9:	89 0c 24             	mov    %ecx,(%esp)
  1040cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1040cf:	e8 dc c1 ff ff       	call   1002b0 <kprintf>
        show_dump(cpu);
  1040d4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1040d7:	89 0c 24             	mov    %ecx,(%esp)
  1040da:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1040dd:	e8 5e c0 ff ff       	call   100140 <show_dump>
  1040e2:	b8 07 00 00 00       	mov    $0x7,%eax
        setclr(0x07);
  1040e7:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1040ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1040f1:	e8 9a c1 ff ff       	call   100290 <setclr>

        return terminate_current(cpu);
  1040f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1040f9:	89 04 24             	mov    %eax,(%esp)
  1040fc:	e8 0f 00 00 00       	call   104110 <terminate_current>
  104101:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
}
  104104:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104107:	83 c4 40             	add    $0x40,%esp
  10410a:	5e                   	pop    %esi
  10410b:	5f                   	pop    %edi
  10410c:	5d                   	pop    %ebp
  10410d:	c3                   	ret    
  10410e:	66 90                	xchg   %ax,%ax

00104110 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  104110:	55                   	push   %ebp
  104111:	89 e5                	mov    %esp,%ebp
  104113:	83 ec 18             	sub    $0x18,%esp
  104116:	8b 45 08             	mov    0x8(%ebp),%eax
  104119:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct task* next = current_task->next;
  10411c:	a1 38 94 10 00       	mov    0x109438,%eax
  104121:	8b 40 08             	mov    0x8(%eax),%eax
  104124:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* prev = current_task->prev;
  104127:	a1 38 94 10 00       	mov    0x109438,%eax
  10412c:	8b 40 0c             	mov    0xc(%eax),%eax
  10412f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct task* old = current_task;
  104132:	a1 38 94 10 00       	mov    0x109438,%eax
  104137:	89 45 f0             	mov    %eax,-0x10(%ebp)

    vmm_free_current_pagetables();
  10413a:	e8 a1 20 00 00       	call   1061e0 <vmm_free_current_pagetables>

    if (current_task == first_task) {
  10413f:	a1 38 94 10 00       	mov    0x109438,%eax
  104144:	3b 05 34 94 10 00    	cmp    0x109434,%eax
  10414a:	0f 85 0d 00 00 00    	jne    10415d <terminate_current+0x4d>
        first_task = current_task->next;
  104150:	a1 38 94 10 00       	mov    0x109438,%eax
  104155:	8b 40 08             	mov    0x8(%eax),%eax
  104158:	a3 34 94 10 00       	mov    %eax,0x109434
    }

    if (next != 0) {
  10415d:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104164:	0f 84 09 00 00 00    	je     104173 <terminate_current+0x63>
        next->prev = prev;
  10416a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10416d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104170:	89 41 0c             	mov    %eax,0xc(%ecx)
    }

    if (prev != 0) {
  104173:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10417a:	0f 84 09 00 00 00    	je     104189 <terminate_current+0x79>
        prev->next = next;
  104180:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104183:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104186:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if (next == 0)
  104189:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104190:	0f 85 08 00 00 00    	jne    10419e <terminate_current+0x8e>
        next = first_task;
  104196:	a1 34 94 10 00       	mov    0x109434,%eax
  10419b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task = next;
  10419e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1041a1:	a3 38 94 10 00       	mov    %eax,0x109438

    free(old->cpuState);
  1041a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1041a9:	8b 40 04             	mov    0x4(%eax),%eax
  1041ac:	89 04 24             	mov    %eax,(%esp)
  1041af:	e8 3c 07 00 00       	call   1048f0 <free>
    free(old);
  1041b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1041b7:	89 04 24             	mov    %eax,(%esp)
  1041ba:	e8 31 07 00 00       	call   1048f0 <free>

    if(current_task == 0) {
  1041bf:	81 3d 38 94 10 00 00 	cmpl   $0x0,0x109438
  1041c6:	00 00 00 
  1041c9:	0f 85 15 00 00 00    	jne    1041e4 <terminate_current+0xd4>
  1041cf:	8d 05 31 85 10 00    	lea    0x108531,%eax
        show_cod(cpu, "Last task terminated.");
  1041d5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1041d8:	89 0c 24             	mov    %ecx,(%esp)
  1041db:	89 44 24 04          	mov    %eax,0x4(%esp)
  1041df:	e8 dc be ff ff       	call   1000c0 <show_cod>
    }

    vmm_activate_pagedir(current_task->phys_pdir);
  1041e4:	a1 38 94 10 00       	mov    0x109438,%eax
  1041e9:	8b 40 14             	mov    0x14(%eax),%eax
  1041ec:	89 04 24             	mov    %eax,(%esp)
  1041ef:	e8 5c 28 00 00       	call   106a50 <vmm_activate_pagedir>
    return current_task->cpuState;
  1041f4:	a1 38 94 10 00       	mov    0x109438,%eax
  1041f9:	8b 40 04             	mov    0x4(%eax),%eax
  1041fc:	83 c4 18             	add    $0x18,%esp
  1041ff:	5d                   	pop    %ebp
  104200:	c3                   	ret    
  104201:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104208:	0f 1f 84 00 00 00 00 
  10420f:	00 

00104210 <fork_task_state>:
}

void fork_task_state(struct task* new_task) {
  104210:	55                   	push   %ebp
  104211:	89 e5                	mov    %esp,%ebp
  104213:	50                   	push   %eax
  104214:	8b 45 08             	mov    0x8(%ebp),%eax
  104217:	89 45 fc             	mov    %eax,-0x4(%ebp)
    new_task->stdout = current_task->stdout;
  10421a:	a1 38 94 10 00       	mov    0x109438,%eax
  10421f:	8b 40 20             	mov    0x20(%eax),%eax
  104222:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104225:	89 41 20             	mov    %eax,0x20(%ecx)
    new_task->stdin  = current_task->stdin;
  104228:	a1 38 94 10 00       	mov    0x109438,%eax
  10422d:	8b 40 28             	mov    0x28(%eax),%eax
  104230:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104233:	89 41 28             	mov    %eax,0x28(%ecx)
    new_task->stderr = current_task->stderr;
  104236:	a1 38 94 10 00       	mov    0x109438,%eax
  10423b:	8b 40 24             	mov    0x24(%eax),%eax
  10423e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104241:	89 41 24             	mov    %eax,0x24(%ecx)
}
  104244:	83 c4 04             	add    $0x4,%esp
  104247:	5d                   	pop    %ebp
  104248:	c3                   	ret    
  104249:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00104250 <init_task>:

struct task* init_task(uint32_t task_pagedir, void* entry) {
  104250:	55                   	push   %ebp
  104251:	89 e5                	mov    %esp,%ebp
  104253:	56                   	push   %esi
  104254:	83 ec 74             	sub    $0x74,%esp
  104257:	8b 45 0c             	mov    0xc(%ebp),%eax
  10425a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10425d:	ba 30 00 00 00       	mov    $0x30,%edx
  104262:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104265:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct task* ntask = malloc(sizeof(struct task));
  104268:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  10426f:	89 55 ac             	mov    %edx,-0x54(%ebp)
  104272:	e8 a9 02 00 00       	call   104520 <malloc>
  104277:	b9 38 00 00 00       	mov    $0x38,%ecx
  10427c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ntask->cpuState = malloc(sizeof(struct cpu_state));
  10427f:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  104286:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  104289:	e8 92 02 00 00       	call   104520 <malloc>
  10428e:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  104293:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104296:	89 42 04             	mov    %eax,0x4(%edx)

    ntask->phys_pdir = task_pagedir;
  104299:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10429c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10429f:	89 42 14             	mov    %eax,0x14(%edx)
    ntask->user_stack_bottom = (void*) 0xFFFFE000;
  1042a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042a5:	89 48 10             	mov    %ecx,0x10(%eax)
    ntask->PID = nextPID++;
  1042a8:	a1 e0 72 10 00       	mov    0x1072e0,%eax
  1042ad:	89 c1                	mov    %eax,%ecx
  1042af:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1042b5:	89 0d e0 72 10 00    	mov    %ecx,0x1072e0
  1042bb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1042be:	89 01                	mov    %eax,(%ecx)

    ntask->stdin  = 0;
  1042c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042c3:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    ntask->stdout = 0;
  1042ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042cd:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
    ntask->stderr = 0;
  1042d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042d7:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    ntask->next = (void*) 0;
  1042de:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042e1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    ntask->prev = (void*) 0;
  1042e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    if (first_task == 0) {
  1042f2:	81 3d 34 94 10 00 00 	cmpl   $0x0,0x109434
  1042f9:	00 00 00 
  1042fc:	0f 85 0d 00 00 00    	jne    10430f <init_task+0xbf>
        first_task = ntask;
  104302:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104305:	a3 34 94 10 00       	mov    %eax,0x109434
    } else {
  10430a:	e9 1f 00 00 00       	jmp    10432e <init_task+0xde>
        ntask->next = first_task;
  10430f:	a1 34 94 10 00       	mov    0x109434,%eax
  104314:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104317:	89 41 08             	mov    %eax,0x8(%ecx)
        first_task->prev = ntask;
  10431a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10431d:	8b 0d 34 94 10 00    	mov    0x109434,%ecx
  104323:	89 41 0c             	mov    %eax,0xc(%ecx)
        first_task = ntask;
  104326:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104329:	a3 34 94 10 00       	mov    %eax,0x109434
    }

    uint32_t rest_pdir = vmm_get_current_pagedir();
  10432e:	e8 4d 1b 00 00       	call   105e80 <vmm_get_current_pagedir>
  104333:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vmm_activate_pagedir(task_pagedir);
  104336:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104339:	89 04 24             	mov    %eax,(%esp)
  10433c:	e8 0f 27 00 00       	call   106a50 <vmm_activate_pagedir>
  104341:	b8 00 00 00 00       	mov    $0x0,%eax

    vmm_alloc_addr(ntask->user_stack_bottom, 0);
  104346:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104349:	8b 49 10             	mov    0x10(%ecx),%ecx
  10434c:	89 0c 24             	mov    %ecx,(%esp)
  10434f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104356:	00 
  104357:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10435a:	e8 f1 25 00 00       	call   106950 <vmm_alloc_addr>
  10435f:	b9 38 00 00 00       	mov    $0x38,%ecx
  104364:	8d 55 b0             	lea    -0x50(%ebp),%edx

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  104367:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
  10436e:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
  104375:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10437c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  104383:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  10438a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  104391:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  104398:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  10439f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  1043a6:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1043a9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  1043ac:	c7 45 d8 1b 00 00 00 	movl   $0x1b,-0x28(%ebp)
  1043b3:	c7 45 dc 00 02 00 00 	movl   $0x200,-0x24(%ebp)
  1043ba:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1043bd:	8b 76 10             	mov    0x10(%esi),%esi
  1043c0:	81 c6 00 10 00 00    	add    $0x1000,%esi
  1043c6:	89 75 e0             	mov    %esi,-0x20(%ebp)
  1043c9:	c7 45 e4 23 00 00 00 	movl   $0x23,-0x1c(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(ntask->cpuState, &nstate, sizeof(struct cpu_state));
  1043d0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1043d3:	8b 76 04             	mov    0x4(%esi),%esi
  1043d6:	89 34 24             	mov    %esi,(%esp)
  1043d9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1043dd:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1043e4:	00 
  1043e5:	89 45 a0             	mov    %eax,-0x60(%ebp)
  1043e8:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1043eb:	e8 00 08 00 00       	call   104bf0 <memcpy>

    vmm_activate_pagedir(rest_pdir);
  1043f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1043f3:	89 04 24             	mov    %eax,(%esp)
  1043f6:	e8 55 26 00 00       	call   106a50 <vmm_activate_pagedir>

    return ntask;
  1043fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043fe:	83 c4 74             	add    $0x74,%esp
  104401:	5e                   	pop    %esi
  104402:	5d                   	pop    %ebp
  104403:	c3                   	ret    
  104404:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10440b:	00 00 00 00 00 

00104410 <save_cpu_state>:
}

void save_cpu_state(struct cpu_state* cpu) {
  104410:	55                   	push   %ebp
  104411:	89 e5                	mov    %esp,%ebp
  104413:	83 ec 18             	sub    $0x18,%esp
  104416:	8b 45 08             	mov    0x8(%ebp),%eax
  104419:	b9 38 00 00 00       	mov    $0x38,%ecx
  10441e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memcpy(current_task->cpuState, cpu, sizeof(struct cpu_state));
  104421:	a1 38 94 10 00       	mov    0x109438,%eax
  104426:	8b 40 04             	mov    0x4(%eax),%eax
  104429:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10442c:	89 04 24             	mov    %eax,(%esp)
  10442f:	89 54 24 04          	mov    %edx,0x4(%esp)
  104433:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  10443a:	00 
  10443b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10443e:	e8 ad 07 00 00       	call   104bf0 <memcpy>
}
  104443:	83 c4 18             	add    $0x18,%esp
  104446:	5d                   	pop    %ebp
  104447:	c3                   	ret    
  104448:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10444f:	00 

00104450 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu) {
  104450:	55                   	push   %ebp
  104451:	89 e5                	mov    %esp,%ebp
  104453:	83 ec 18             	sub    $0x18,%esp
  104456:	8b 45 08             	mov    0x8(%ebp),%eax
  104459:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (first_task != 0 && schedulingEnabled) {
  10445c:	81 3d 34 94 10 00 00 	cmpl   $0x0,0x109434
  104463:	00 00 00 
  104466:	0f 84 9d 00 00 00    	je     104509 <schedule+0xb9>
  10446c:	81 3d 30 94 10 00 00 	cmpl   $0x0,0x109430
  104473:	00 00 00 
  104476:	0f 84 8d 00 00 00    	je     104509 <schedule+0xb9>
        if (current_task == 0) {
  10447c:	81 3d 38 94 10 00 00 	cmpl   $0x0,0x109438
  104483:	00 00 00 
  104486:	0f 85 2a 00 00 00    	jne    1044b6 <schedule+0x66>
            current_task = first_task;
  10448c:	a1 34 94 10 00       	mov    0x109434,%eax
  104491:	a3 38 94 10 00       	mov    %eax,0x109438
            vmm_activate_pagedir(current_task->phys_pdir);
  104496:	a1 38 94 10 00       	mov    0x109438,%eax
  10449b:	8b 40 14             	mov    0x14(%eax),%eax
  10449e:	89 04 24             	mov    %eax,(%esp)
  1044a1:	e8 aa 25 00 00       	call   106a50 <vmm_activate_pagedir>
            return current_task->cpuState;
  1044a6:	a1 38 94 10 00       	mov    0x109438,%eax
  1044ab:	8b 40 04             	mov    0x4(%eax),%eax
  1044ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1044b1:	e9 59 00 00 00       	jmp    10450f <schedule+0xbf>
        }

        struct task* next = current_task->next;
  1044b6:	a1 38 94 10 00       	mov    0x109438,%eax
  1044bb:	8b 40 08             	mov    0x8(%eax),%eax
  1044be:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (next == 0)
  1044c1:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1044c8:	0f 85 08 00 00 00    	jne    1044d6 <schedule+0x86>
            next = first_task;
  1044ce:	a1 34 94 10 00       	mov    0x109434,%eax
  1044d3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        save_cpu_state(cpu);
  1044d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1044d9:	89 04 24             	mov    %eax,(%esp)
  1044dc:	e8 2f ff ff ff       	call   104410 <save_cpu_state>

        current_task = next;
  1044e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1044e4:	a3 38 94 10 00       	mov    %eax,0x109438
        vmm_activate_pagedir(current_task->phys_pdir);
  1044e9:	a1 38 94 10 00       	mov    0x109438,%eax
  1044ee:	8b 40 14             	mov    0x14(%eax),%eax
  1044f1:	89 04 24             	mov    %eax,(%esp)
  1044f4:	e8 57 25 00 00       	call   106a50 <vmm_activate_pagedir>
        return current_task->cpuState;
  1044f9:	a1 38 94 10 00       	mov    0x109438,%eax
  1044fe:	8b 40 04             	mov    0x4(%eax),%eax
  104501:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104504:	e9 06 00 00 00       	jmp    10450f <schedule+0xbf>
    }
    return cpu;
  104509:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10450c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10450f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104512:	83 c4 18             	add    $0x18,%esp
  104515:	5d                   	pop    %ebp
  104516:	c3                   	ret    
  104517:	66 90                	xchg   %ax,%ax
  104519:	66 90                	xchg   %ax,%ax
  10451b:	66 90                	xchg   %ax,%ax
  10451d:	66 90                	xchg   %ax,%ax
  10451f:	90                   	nop

00104520 <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
  104520:	55                   	push   %ebp
  104521:	89 e5                	mov    %esp,%ebp
  104523:	83 ec 38             	sub    $0x38,%esp
  104526:	8b 45 08             	mov    0x8(%ebp),%eax
  104529:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(size == 0) return 0;
  10452c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104533:	0f 85 0c 00 00 00    	jne    104545 <malloc+0x25>
  104539:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104540:	e9 95 01 00 00       	jmp    1046da <malloc+0x1ba>

    struct memory_node* last = 0;
  104545:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = first_free;
  10454c:	a1 44 94 10 00       	mov    0x109444,%eax
  104551:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  104554:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10455b:	0f 84 27 00 00 00    	je     104588 <malloc+0x68>
        if (cur->size >= size) {
  104561:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104564:	8b 00                	mov    (%eax),%eax
  104566:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  104569:	0f 82 05 00 00 00    	jb     104574 <malloc+0x54>
            break;
  10456f:	e9 14 00 00 00       	jmp    104588 <malloc+0x68>
        }
        last = cur;
  104574:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104577:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  10457a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10457d:	8b 40 08             	mov    0x8(%eax),%eax
  104580:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  104583:	e9 cc ff ff ff       	jmp    104554 <malloc+0x34>

    if (cur == 0) {
  104588:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10458f:	0f 85 bc 00 00 00    	jne    104651 <malloc+0x131>
        uint32_t pgs = size / PAGESIZE;
  104595:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104598:	c1 e8 0c             	shr    $0xc,%eax
  10459b:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if ((size % PAGESIZE) != 0)
  10459e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1045a1:	25 ff 0f 00 00       	and    $0xfff,%eax
  1045a6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1045ab:	0f 84 0b 00 00 00    	je     1045bc <malloc+0x9c>
            pgs++;
  1045b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1045b4:	05 01 00 00 00       	add    $0x1,%eax
  1045b9:	89 45 ec             	mov    %eax,-0x14(%ebp)

        void* addr = vmm_alloc_cont(pgs);
  1045bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1045bf:	89 04 24             	mov    %eax,(%esp)
  1045c2:	e8 39 23 00 00       	call   106900 <vmm_alloc_cont>
  1045c7:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
  1045ca:	e8 81 04 00 00       	call   104a50 <pop_unused_node>
  1045cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
  1045d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1045d5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1045d8:	89 41 04             	mov    %eax,0x4(%ecx)
        fill->size = (uint32_t) size;
  1045db:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1045de:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1045e1:	89 01                	mov    %eax,(%ecx)

        if (pgs * PAGESIZE > size) {
  1045e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1045e6:	c1 e0 0c             	shl    $0xc,%eax
  1045e9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1045ec:	0f 86 3c 00 00 00    	jbe    10462e <malloc+0x10e>
            struct memory_node* free = pop_unused_node();
  1045f2:	e8 59 04 00 00       	call   104a50 <pop_unused_node>
  1045f7:	8d 0d 44 94 10 00    	lea    0x109444,%ecx
  1045fd:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
  104600:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104603:	8b 40 04             	mov    0x4(%eax),%eax
  104606:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  104609:	03 02                	add    (%edx),%eax
  10460b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10460e:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = pgs * PAGESIZE - size;
  104611:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104614:	c1 e0 0c             	shl    $0xc,%eax
  104617:	2b 45 f8             	sub    -0x8(%ebp),%eax
  10461a:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10461d:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  10461f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104622:	89 0c 24             	mov    %ecx,(%esp)
  104625:	89 44 24 04          	mov    %eax,0x4(%esp)
  104629:	e8 c2 00 00 00       	call   1046f0 <append_to_list>
  10462e:	8d 05 40 94 10 00    	lea    0x109440,%eax
        }

        append_to_list(&first_used, fill);
  104634:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104637:	89 04 24             	mov    %eax,(%esp)
  10463a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10463e:	e8 ad 00 00 00       	call   1046f0 <append_to_list>

        return (void*) fill->address;
  104643:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104646:	8b 40 04             	mov    0x4(%eax),%eax
  104649:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10464c:	e9 89 00 00 00       	jmp    1046da <malloc+0x1ba>
  104651:	8d 05 44 94 10 00    	lea    0x109444,%eax
    } else {
        uint32_t freesize = cur->size - size;
  104657:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10465a:	8b 09                	mov    (%ecx),%ecx
  10465c:	2b 4d f8             	sub    -0x8(%ebp),%ecx
  10465f:	89 4d dc             	mov    %ecx,-0x24(%ebp)

        cur->size = size;
  104662:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104665:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104668:	89 0a                	mov    %ecx,(%edx)

        remove_from_list(&first_free, cur);
  10466a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10466d:	89 04 24             	mov    %eax,(%esp)
  104670:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104674:	e8 a7 00 00 00       	call   104720 <remove_from_list>
  104679:	8d 05 40 94 10 00    	lea    0x109440,%eax
        append_to_list(&first_used, cur);
  10467f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104682:	89 04 24             	mov    %eax,(%esp)
  104685:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104689:	e8 62 00 00 00       	call   1046f0 <append_to_list>

        if (freesize > 0) {
  10468e:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  104695:	0f 86 36 00 00 00    	jbe    1046d1 <malloc+0x1b1>
            struct memory_node* free = pop_unused_node();
  10469b:	e8 b0 03 00 00       	call   104a50 <pop_unused_node>
  1046a0:	8d 0d 44 94 10 00    	lea    0x109444,%ecx
  1046a6:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
  1046a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046ac:	8b 40 04             	mov    0x4(%eax),%eax
  1046af:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1046b2:	03 02                	add    (%edx),%eax
  1046b4:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1046b7:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = freesize;
  1046ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1046bd:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1046c0:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  1046c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1046c5:	89 0c 24             	mov    %ecx,(%esp)
  1046c8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1046cc:	e8 1f 00 00 00       	call   1046f0 <append_to_list>
        }

        return (void*) cur->address;
  1046d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1046d4:	8b 40 04             	mov    0x4(%eax),%eax
  1046d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  1046da:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1046dd:	83 c4 38             	add    $0x38,%esp
  1046e0:	5d                   	pop    %ebp
  1046e1:	c3                   	ret    
  1046e2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1046e9:	1f 84 00 00 00 00 00 

001046f0 <append_to_list>:
        cur = cur->next;
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
  1046f0:	55                   	push   %ebp
  1046f1:	89 e5                	mov    %esp,%ebp
  1046f3:	83 ec 08             	sub    $0x8,%esp
  1046f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1046f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1046fc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1046ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
    element->next = *root;
  104702:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104705:	8b 00                	mov    (%eax),%eax
  104707:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10470a:	89 41 08             	mov    %eax,0x8(%ecx)
    *root = element;
  10470d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104710:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104713:	89 01                	mov    %eax,(%ecx)
}
  104715:	83 c4 08             	add    $0x8,%esp
  104718:	5d                   	pop    %ebp
  104719:	c3                   	ret    
  10471a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104720 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
  104720:	55                   	push   %ebp
  104721:	89 e5                	mov    %esp,%ebp
  104723:	83 ec 10             	sub    $0x10,%esp
  104726:	8b 45 0c             	mov    0xc(%ebp),%eax
  104729:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10472c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10472f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct memory_node* last = 0;
  104732:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = *root;
  104739:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10473c:	8b 00                	mov    (%eax),%eax
  10473e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  104741:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104748:	0f 84 4e 00 00 00    	je     10479c <remove_from_list+0x7c>
        if (cur == element) {
  10474e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104751:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  104754:	0f 85 2e 00 00 00    	jne    104788 <remove_from_list+0x68>
            if (last == 0) {
  10475a:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104761:	0f 85 10 00 00 00    	jne    104777 <remove_from_list+0x57>
                *root = cur->next;
  104767:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10476a:	8b 40 08             	mov    0x8(%eax),%eax
  10476d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104770:	89 01                	mov    %eax,(%ecx)
                return;
  104772:	e9 25 00 00 00       	jmp    10479c <remove_from_list+0x7c>
            } else {
                last->next = cur->next;
  104777:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10477a:	8b 40 08             	mov    0x8(%eax),%eax
  10477d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104780:	89 41 08             	mov    %eax,0x8(%ecx)
                return;
  104783:	e9 14 00 00 00       	jmp    10479c <remove_from_list+0x7c>
            }
        }
        last = cur;
  104788:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10478b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  10478e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104791:	8b 40 08             	mov    0x8(%eax),%eax
  104794:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  104797:	e9 a5 ff ff ff       	jmp    104741 <remove_from_list+0x21>
}
  10479c:	83 c4 10             	add    $0x10,%esp
  10479f:	5d                   	pop    %ebp
  1047a0:	c3                   	ret    
  1047a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1047a8:	0f 1f 84 00 00 00 00 
  1047af:	00 

001047b0 <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
  1047b0:	55                   	push   %ebp
  1047b1:	89 e5                	mov    %esp,%ebp
  1047b3:	83 ec 28             	sub    $0x28,%esp
  1047b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1047b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1047bc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1047bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t gsize = num * size;
  1047c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1047c5:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  1047c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
  1047cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1047cf:	89 04 24             	mov    %eax,(%esp)
  1047d2:	e8 49 fd ff ff       	call   104520 <malloc>
  1047d7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
  1047da:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1047e1:	0f 84 22 00 00 00    	je     104809 <calloc+0x59>
  1047e7:	b8 00 00 00 00       	mov    $0x0,%eax
        memset(p, 0, gsize);
  1047ec:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1047ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1047f2:	89 0c 24             	mov    %ecx,(%esp)
  1047f5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1047fc:	00 
  1047fd:	89 54 24 08          	mov    %edx,0x8(%esp)
  104801:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104804:	e8 87 03 00 00       	call   104b90 <memset>
    }

    return p;
  104809:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10480c:	83 c4 28             	add    $0x28,%esp
  10480f:	5d                   	pop    %ebp
  104810:	c3                   	ret    
  104811:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104818:	0f 1f 84 00 00 00 00 
  10481f:	00 

00104820 <realloc>:
}

void* realloc(void* ptr, size_t size) {
  104820:	55                   	push   %ebp
  104821:	89 e5                	mov    %esp,%ebp
  104823:	83 ec 28             	sub    $0x28,%esp
  104826:	8b 45 0c             	mov    0xc(%ebp),%eax
  104829:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10482c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10482f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct memory_node* last = 0;
  104832:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
  104839:	a1 40 94 10 00       	mov    0x109440,%eax
  10483e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (cur != 0) {
  104841:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  104848:	0f 84 8e 00 00 00    	je     1048dc <realloc+0xbc>
        if (cur->address == (uint32_t) ptr) {
  10484e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104851:	8b 40 04             	mov    0x4(%eax),%eax
  104854:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104857:	39 c8                	cmp    %ecx,%eax
  104859:	0f 85 69 00 00 00    	jne    1048c8 <realloc+0xa8>
            if (size == 0) {
  10485f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104866:	0f 85 17 00 00 00    	jne    104883 <realloc+0x63>
                free(ptr);
  10486c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10486f:	89 04 24             	mov    %eax,(%esp)
  104872:	e8 79 00 00 00       	call   1048f0 <free>
                return 0;
  104877:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10487e:	e9 60 00 00 00       	jmp    1048e3 <realloc+0xc3>
            } else {
                void* new = malloc(size);
  104883:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104886:	89 04 24             	mov    %eax,(%esp)
  104889:	e8 92 fc ff ff       	call   104520 <malloc>
  10488e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
  104891:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104894:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104897:	8b 49 04             	mov    0x4(%ecx),%ecx
  10489a:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10489d:	8b 12                	mov    (%edx),%edx
  10489f:	89 04 24             	mov    %eax,(%esp)
  1048a2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1048a6:	89 54 24 08          	mov    %edx,0x8(%esp)
  1048aa:	e8 41 03 00 00       	call   104bf0 <memcpy>
                free((void*) cur->address);
  1048af:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1048b2:	8b 40 04             	mov    0x4(%eax),%eax
  1048b5:	89 04 24             	mov    %eax,(%esp)
  1048b8:	e8 33 00 00 00       	call   1048f0 <free>

                return new;
  1048bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1048c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1048c3:	e9 1b 00 00 00       	jmp    1048e3 <realloc+0xc3>
            }
        }
        last = cur;
  1048c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1048cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
  1048ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1048d1:	8b 40 08             	mov    0x8(%eax),%eax
  1048d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
  1048d7:	e9 65 ff ff ff       	jmp    104841 <realloc+0x21>
    return 0;
  1048dc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1048e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1048e6:	83 c4 28             	add    $0x28,%esp
  1048e9:	5d                   	pop    %ebp
  1048ea:	c3                   	ret    
  1048eb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001048f0 <free>:

void free(void* ptr) {
  1048f0:	55                   	push   %ebp
  1048f1:	89 e5                	mov    %esp,%ebp
  1048f3:	83 ec 18             	sub    $0x18,%esp
  1048f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1048f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* last = 0;
  1048fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
  104903:	a1 40 94 10 00       	mov    0x109440,%eax
  104908:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  10490b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104912:	0f 84 35 00 00 00    	je     10494d <free+0x5d>
        if (cur->address == (uint32_t) ptr) {
  104918:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10491b:	8b 40 04             	mov    0x4(%eax),%eax
  10491e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104921:	39 c8                	cmp    %ecx,%eax
  104923:	0f 85 10 00 00 00    	jne    104939 <free+0x49>
            merge_into_frees(cur);
  104929:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10492c:	89 04 24             	mov    %eax,(%esp)
  10492f:	e8 2c 00 00 00       	call   104960 <merge_into_frees>
            break;
  104934:	e9 14 00 00 00       	jmp    10494d <free+0x5d>
        }
        last = cur;
  104939:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10493c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
  10493f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104942:	8b 40 08             	mov    0x8(%eax),%eax
  104945:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  104948:	e9 be ff ff ff       	jmp    10490b <free+0x1b>
}
  10494d:	83 c4 18             	add    $0x18,%esp
  104950:	5d                   	pop    %ebp
  104951:	c3                   	ret    
  104952:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104959:	1f 84 00 00 00 00 00 

00104960 <merge_into_frees>:
    }

    return ret;
}

static void merge_into_frees(struct memory_node* tf) {
  104960:	55                   	push   %ebp
  104961:	89 e5                	mov    %esp,%ebp
  104963:	56                   	push   %esi
  104964:	83 ec 14             	sub    $0x14,%esp
  104967:	8b 45 08             	mov    0x8(%ebp),%eax
  10496a:	8d 0d 40 94 10 00    	lea    0x109440,%ecx
  104970:	89 45 f8             	mov    %eax,-0x8(%ebp)
    remove_from_list(&first_used, tf);
  104973:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104976:	89 0c 24             	mov    %ecx,(%esp)
  104979:	89 44 24 04          	mov    %eax,0x4(%esp)
  10497d:	e8 9e fd ff ff       	call   104720 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
  104982:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    cur = first_free;
  104989:	a1 44 94 10 00       	mov    0x109444,%eax
  10498e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  104991:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104998:	0f 84 92 00 00 00    	je     104a30 <merge_into_frees+0xd0>
        if (cur->address + cur->size == tf->address) {
  10499e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1049a1:	8b 40 04             	mov    0x4(%eax),%eax
  1049a4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1049a7:	03 01                	add    (%ecx),%eax
  1049a9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1049ac:	3b 41 04             	cmp    0x4(%ecx),%eax
  1049af:	0f 85 26 00 00 00    	jne    1049db <merge_into_frees+0x7b>
  1049b5:	8d 05 44 94 10 00    	lea    0x109444,%eax
            tf->address = cur->address;
  1049bb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1049be:	8b 49 04             	mov    0x4(%ecx),%ecx
  1049c1:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1049c4:	89 4a 04             	mov    %ecx,0x4(%edx)
            remove_from_list(&first_free, cur);
  1049c7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1049ca:	89 04 24             	mov    %eax,(%esp)
  1049cd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1049d1:	e8 4a fd ff ff       	call   104720 <remove_from_list>
            goto editedList;
  1049d6:	e9 a7 ff ff ff       	jmp    104982 <merge_into_frees+0x22>
        }

        if (cur->address == tf->address + tf->size) {
  1049db:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1049de:	8b 40 04             	mov    0x4(%eax),%eax
  1049e1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1049e4:	8b 49 04             	mov    0x4(%ecx),%ecx
  1049e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1049ea:	03 0a                	add    (%edx),%ecx
  1049ec:	39 c8                	cmp    %ecx,%eax
  1049ee:	0f 85 28 00 00 00    	jne    104a1c <merge_into_frees+0xbc>
  1049f4:	8d 05 44 94 10 00    	lea    0x109444,%eax
            tf->size += cur->size;
  1049fa:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1049fd:	8b 09                	mov    (%ecx),%ecx
  1049ff:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104a02:	8b 32                	mov    (%edx),%esi
  104a04:	01 ce                	add    %ecx,%esi
  104a06:	89 32                	mov    %esi,(%edx)
            remove_from_list(&first_free, cur);
  104a08:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104a0b:	89 04 24             	mov    %eax,(%esp)
  104a0e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104a12:	e8 09 fd ff ff       	call   104720 <remove_from_list>
            goto editedList;
  104a17:	e9 66 ff ff ff       	jmp    104982 <merge_into_frees+0x22>
        }

        last = cur;
  104a1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104a1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  104a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104a25:	8b 40 08             	mov    0x8(%eax),%eax
  104a28:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  104a2b:	e9 61 ff ff ff       	jmp    104991 <merge_into_frees+0x31>
  104a30:	8d 05 44 94 10 00    	lea    0x109444,%eax

    append_to_list(&first_free, tf);
  104a36:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104a39:	89 04 24             	mov    %eax,(%esp)
  104a3c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104a40:	e8 ab fc ff ff       	call   1046f0 <append_to_list>
}
  104a45:	83 c4 14             	add    $0x14,%esp
  104a48:	5e                   	pop    %esi
  104a49:	5d                   	pop    %ebp
  104a4a:	c3                   	ret    
  104a4b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104a50 <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
  104a50:	55                   	push   %ebp
  104a51:	89 e5                	mov    %esp,%ebp
  104a53:	83 ec 08             	sub    $0x8,%esp
  104a56:	8d 05 3c 94 10 00    	lea    0x10943c,%eax
    struct memory_node* ret = pop_from_list(&first_unused);
  104a5c:	89 04 24             	mov    %eax,(%esp)
  104a5f:	e8 3c 00 00 00       	call   104aa0 <pop_from_list>
  104a64:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (ret == 0) {
  104a67:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  104a6e:	0f 85 1b 00 00 00    	jne    104a8f <pop_unused_node+0x3f>
        allocate_unused_nodes();
  104a74:	e8 77 00 00 00       	call   104af0 <allocate_unused_nodes>
  104a79:	8d 05 3c 94 10 00    	lea    0x10943c,%eax
        ret = pop_from_list(&first_unused);
  104a7f:	89 04 24             	mov    %eax,(%esp)
  104a82:	e8 19 00 00 00       	call   104aa0 <pop_from_list>
  104a87:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  104a8a:	e9 d8 ff ff ff       	jmp    104a67 <pop_unused_node+0x17>

    return ret;
  104a8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104a92:	83 c4 08             	add    $0x8,%esp
  104a95:	5d                   	pop    %ebp
  104a96:	c3                   	ret    
  104a97:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  104a9e:	00 00 

00104aa0 <pop_from_list>:
        struct memory_node* element) {
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
  104aa0:	55                   	push   %ebp
  104aa1:	89 e5                	mov    %esp,%ebp
  104aa3:	83 ec 18             	sub    $0x18,%esp
  104aa6:	8b 45 08             	mov    0x8(%ebp),%eax
  104aa9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (*root == 0)
  104aac:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104aaf:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  104ab5:	0f 85 0c 00 00 00    	jne    104ac7 <pop_from_list+0x27>
        return 0;
  104abb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104ac2:	e9 20 00 00 00       	jmp    104ae7 <pop_from_list+0x47>
    struct memory_node* pop = *root;
  104ac7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104aca:	8b 00                	mov    (%eax),%eax
  104acc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    remove_from_list(root, pop);
  104acf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ad2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104ad5:	89 04 24             	mov    %eax,(%esp)
  104ad8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104adc:	e8 3f fc ff ff       	call   104720 <remove_from_list>
    return pop;
  104ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104ae4:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104ae7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104aea:	83 c4 18             	add    $0x18,%esp
  104aed:	5d                   	pop    %ebp
  104aee:	c3                   	ret    
  104aef:	90                   	nop

00104af0 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  104af0:	55                   	push   %ebp
  104af1:	89 e5                	mov    %esp,%ebp
  104af3:	83 ec 28             	sub    $0x28,%esp
  104af6:	b8 01 00 00 00       	mov    $0x1,%eax
    struct memory_node* new_nodes = vmm_alloc_cont(1);
  104afb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104b02:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104b05:	e8 f6 1d 00 00       	call   106900 <vmm_alloc_cont>
  104b0a:	b9 00 00 00 00       	mov    $0x0,%ecx
  104b0f:	ba 00 10 00 00       	mov    $0x1000,%edx
  104b14:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memset(new_nodes, 0, PAGESIZE);
  104b17:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104b1a:	89 04 24             	mov    %eax,(%esp)
  104b1d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104b24:	00 
  104b25:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  104b2c:	00 
  104b2d:	89 55 f0             	mov    %edx,-0x10(%ebp)
  104b30:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104b33:	e8 58 00 00 00       	call   104b90 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  104b38:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  104b3f:	81 7d f8 55 01 00 00 	cmpl   $0x155,-0x8(%ebp)
  104b46:	0f 83 30 00 00 00    	jae    104b7c <allocate_unused_nodes+0x8c>
  104b4c:	8d 05 3c 94 10 00    	lea    0x10943c,%eax
        append_to_list(&first_unused, &(new_nodes[i]));
  104b52:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104b55:	8b 55 fc             	mov    -0x4(%ebp),%edx
  104b58:	69 c9 0c 00 00 00    	imul   $0xc,%ecx,%ecx
  104b5e:	01 ca                	add    %ecx,%edx
  104b60:	89 04 24             	mov    %eax,(%esp)
  104b63:	89 54 24 04          	mov    %edx,0x4(%esp)
  104b67:	e8 84 fb ff ff       	call   1046f0 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  104b6c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104b6f:	05 01 00 00 00       	add    $0x1,%eax
  104b74:	89 45 f8             	mov    %eax,-0x8(%ebp)
  104b77:	e9 c3 ff ff ff       	jmp    104b3f <allocate_unused_nodes+0x4f>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
  104b7c:	83 c4 28             	add    $0x28,%esp
  104b7f:	5d                   	pop    %ebp
  104b80:	c3                   	ret    
  104b81:	66 90                	xchg   %ax,%ax
  104b83:	66 90                	xchg   %ax,%ax
  104b85:	66 90                	xchg   %ax,%ax
  104b87:	66 90                	xchg   %ax,%ax
  104b89:	66 90                	xchg   %ax,%ax
  104b8b:	66 90                	xchg   %ax,%ax
  104b8d:	66 90                	xchg   %ax,%ax
  104b8f:	90                   	nop

00104b90 <memset>:
#include "vmm.h"
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
  104b90:	55                   	push   %ebp
  104b91:	89 e5                	mov    %esp,%ebp
  104b93:	83 ec 10             	sub    $0x10,%esp
  104b96:	8b 45 10             	mov    0x10(%ebp),%eax
  104b99:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104b9c:	8b 55 08             	mov    0x8(%ebp),%edx
  104b9f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104ba2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104ba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  104ba8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104bab:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  104bae:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104bb1:	89 c1                	mov    %eax,%ecx
  104bb3:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  104bb9:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104bbc:	3d 00 00 00 00       	cmp    $0x0,%eax
  104bc1:	0f 84 1a 00 00 00    	je     104be1 <memset+0x51>
        *p++ = c;
  104bc7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104bca:	88 c1                	mov    %al,%cl
  104bcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104bcf:	89 c2                	mov    %eax,%edx
  104bd1:	81 c2 01 00 00 00    	add    $0x1,%edx
  104bd7:	89 55 f0             	mov    %edx,-0x10(%ebp)
  104bda:	88 08                	mov    %cl,(%eax)
    }
  104bdc:	e9 cd ff ff ff       	jmp    104bae <memset+0x1e>

    return buf;
  104be1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104be4:	83 c4 10             	add    $0x10,%esp
  104be7:	5d                   	pop    %ebp
  104be8:	c3                   	ret    
  104be9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00104bf0 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n) {
  104bf0:	55                   	push   %ebp
  104bf1:	89 e5                	mov    %esp,%ebp
  104bf3:	83 ec 14             	sub    $0x14,%esp
  104bf6:	8b 45 10             	mov    0x10(%ebp),%eax
  104bf9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104bfc:	8b 55 08             	mov    0x8(%ebp),%edx
  104bff:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104c02:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104c05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  104c08:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104c0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  104c0e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104c11:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  104c14:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104c17:	89 c1                	mov    %eax,%ecx
  104c19:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  104c1f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104c22:	3d 00 00 00 00       	cmp    $0x0,%eax
  104c27:	0f 84 25 00 00 00    	je     104c52 <memcpy+0x62>
        *(d++) = *(s++);
  104c2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104c30:	89 c1                	mov    %eax,%ecx
  104c32:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104c38:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104c3b:	8a 10                	mov    (%eax),%dl
  104c3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c40:	89 c1                	mov    %eax,%ecx
  104c42:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104c48:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  104c4b:	88 10                	mov    %dl,(%eax)
    }
  104c4d:	e9 c2 ff ff ff       	jmp    104c14 <memcpy+0x24>

    return dest;
  104c52:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104c55:	83 c4 14             	add    $0x14,%esp
  104c58:	5d                   	pop    %ebp
  104c59:	c3                   	ret    
  104c5a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104c60 <memcmp>:
}

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
  104c60:	55                   	push   %ebp
  104c61:	89 e5                	mov    %esp,%ebp
  104c63:	83 ec 1c             	sub    $0x1c,%esp
  104c66:	8b 45 10             	mov    0x10(%ebp),%eax
  104c69:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104c6c:	8b 55 08             	mov    0x8(%ebp),%edx
  104c6f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  104c72:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104c75:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (ptr1 == 0)
  104c78:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104c7f:	0f 85 0c 00 00 00    	jne    104c91 <memcmp+0x31>
        return -1;
  104c85:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  104c8c:	e9 a7 00 00 00       	jmp    104d38 <memcmp+0xd8>
    if (ptr2 == 0)
  104c91:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104c98:	0f 85 0c 00 00 00    	jne    104caa <memcmp+0x4a>
        return 1;
  104c9e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  104ca5:	e9 8e 00 00 00       	jmp    104d38 <memcmp+0xd8>
    if (num == 0)
  104caa:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104cb1:	0f 85 0c 00 00 00    	jne    104cc3 <memcmp+0x63>
        return 0;
  104cb7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104cbe:	e9 75 00 00 00       	jmp    104d38 <memcmp+0xd8>

    const uint8_t* pa = ptr1;
  104cc3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104cc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const uint8_t* pb = ptr2;
  104cc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104ccc:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (uint32_t i = 0; i < num; i++) {
  104ccf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  104cd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104cd9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  104cdc:	0f 83 4f 00 00 00    	jae    104d31 <memcmp+0xd1>
        if (pa[i] != pb[i]) {
  104ce2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104ce5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104ce8:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  104cec:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104cef:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104cf2:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  104cf6:	39 c8                	cmp    %ecx,%eax
  104cf8:	0f 84 1e 00 00 00    	je     104d1c <memcmp+0xbc>
            return pa[i] - pb[i];
  104cfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104d01:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104d04:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  104d08:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104d0b:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104d0e:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  104d12:	29 c8                	sub    %ecx,%eax
  104d14:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104d17:	e9 1c 00 00 00       	jmp    104d38 <memcmp+0xd8>
        }
    }
  104d1c:	e9 00 00 00 00       	jmp    104d21 <memcmp+0xc1>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
  104d21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104d24:	05 01 00 00 00       	add    $0x1,%eax
  104d29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  104d2c:	e9 a5 ff ff ff       	jmp    104cd6 <memcmp+0x76>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
  104d31:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104d38:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104d3b:	83 c4 1c             	add    $0x1c,%esp
  104d3e:	5d                   	pop    %ebp
  104d3f:	c3                   	ret    

00104d40 <strcmp>:

int strcmp(const char* str1, const char* str2) {
  104d40:	55                   	push   %ebp
  104d41:	89 e5                	mov    %esp,%ebp
  104d43:	56                   	push   %esi
  104d44:	83 ec 24             	sub    $0x24,%esp
  104d47:	8b 45 0c             	mov    0xc(%ebp),%eax
  104d4a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104d4d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104d50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l1 = strlen(str1);
  104d53:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104d56:	89 e1                	mov    %esp,%ecx
  104d58:	89 01                	mov    %eax,(%ecx)
  104d5a:	e8 61 00 00 00       	call   104dc0 <strlen>
  104d5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int l2 = strlen(str2);
  104d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d65:	89 e1                	mov    %esp,%ecx
  104d67:	89 01                	mov    %eax,(%ecx)
  104d69:	e8 52 00 00 00       	call   104dc0 <strlen>
  104d6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    l1 = l1 < l2 ? l1 : l2;
  104d71:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104d74:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104d77:	0f 8d 0b 00 00 00    	jge    104d88 <strcmp+0x48>
  104d7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104d83:	e9 06 00 00 00       	jmp    104d8e <strcmp+0x4e>
  104d88:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104d8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104d8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104d91:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return memcmp(str1, str2, l1 * sizeof(char));
  104d94:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104d97:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104d9a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104d9d:	c1 e2 00             	shl    $0x0,%edx
  104da0:	89 e6                	mov    %esp,%esi
  104da2:	89 56 08             	mov    %edx,0x8(%esi)
  104da5:	89 4e 04             	mov    %ecx,0x4(%esi)
  104da8:	89 06                	mov    %eax,(%esi)
  104daa:	e8 b1 fe ff ff       	call   104c60 <memcmp>
  104daf:	83 c4 24             	add    $0x24,%esp
  104db2:	5e                   	pop    %esi
  104db3:	5d                   	pop    %ebp
  104db4:	c3                   	ret    
  104db5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  104dbc:	00 00 00 00 

00104dc0 <strlen>:
}

unsigned int strlen(const char* str) {
  104dc0:	55                   	push   %ebp
  104dc1:	89 e5                	mov    %esp,%ebp
  104dc3:	83 ec 0c             	sub    $0xc,%esp
  104dc6:	8b 45 08             	mov    0x8(%ebp),%eax
  104dc9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (str == 0)
  104dcc:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104dd3:	0f 85 0c 00 00 00    	jne    104de5 <strlen+0x25>
        return 0;
  104dd9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104de0:	e9 37 00 00 00       	jmp    104e1c <strlen+0x5c>
    int i;
    for (i = 0; str[i] != '\0'; i++)
  104de5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104def:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104df2:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  104df6:	3d 00 00 00 00       	cmp    $0x0,%eax
  104dfb:	0f 84 15 00 00 00    	je     104e16 <strlen+0x56>
  104e01:	e9 00 00 00 00       	jmp    104e06 <strlen+0x46>
  104e06:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e09:	05 01 00 00 00       	add    $0x1,%eax
  104e0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104e11:	e9 d6 ff ff ff       	jmp    104dec <strlen+0x2c>
        ;
    return i;
  104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e19:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104e1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104e1f:	83 c4 0c             	add    $0xc,%esp
  104e22:	5d                   	pop    %ebp
  104e23:	c3                   	ret    
  104e24:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104e2b:	00 00 00 00 00 

00104e30 <strcpy>:

char* strcpy(char* dest, const char* src) {
  104e30:	55                   	push   %ebp
  104e31:	89 e5                	mov    %esp,%ebp
  104e33:	56                   	push   %esi
  104e34:	83 ec 24             	sub    $0x24,%esp
  104e37:	8b 45 0c             	mov    0xc(%ebp),%eax
  104e3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104e3d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
  104e43:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104e46:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104e49:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104e4c:	89 e6                	mov    %esp,%esi
  104e4e:	89 16                	mov    %edx,(%esi)
  104e50:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104e53:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104e56:	e8 65 ff ff ff       	call   104dc0 <strlen>
  104e5b:	c1 e0 00             	shl    $0x0,%eax
  104e5e:	05 01 00 00 00       	add    $0x1,%eax
  104e63:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104e66:	89 0c 24             	mov    %ecx,(%esp)
  104e69:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104e6c:	89 54 24 04          	mov    %edx,0x4(%esp)
  104e70:	89 44 24 08          	mov    %eax,0x8(%esp)
  104e74:	e8 77 fd ff ff       	call   104bf0 <memcpy>
    return dest;
  104e79:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104e7c:	83 c4 24             	add    $0x24,%esp
  104e7f:	5e                   	pop    %esi
  104e80:	5d                   	pop    %ebp
  104e81:	c3                   	ret    
  104e82:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104e89:	1f 84 00 00 00 00 00 

00104e90 <strclone>:
}

char* strclone(char* str) {
  104e90:	55                   	push   %ebp
  104e91:	89 e5                	mov    %esp,%ebp
  104e93:	83 ec 18             	sub    $0x18,%esp
  104e96:	8b 45 08             	mov    0x8(%ebp),%eax
  104e99:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
  104e9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104e9f:	89 e1                	mov    %esp,%ecx
  104ea1:	89 01                	mov    %eax,(%ecx)
  104ea3:	e8 18 ff ff ff       	call   104dc0 <strlen>
  104ea8:	c1 e0 00             	shl    $0x0,%eax
  104eab:	05 01 00 00 00       	add    $0x1,%eax
  104eb0:	89 04 24             	mov    %eax,(%esp)
  104eb3:	e8 68 f6 ff ff       	call   104520 <malloc>
  104eb8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    strcpy(ret, str);
  104ebb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ebe:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104ec1:	89 e2                	mov    %esp,%edx
  104ec3:	89 4a 04             	mov    %ecx,0x4(%edx)
  104ec6:	89 02                	mov    %eax,(%edx)
  104ec8:	e8 63 ff ff ff       	call   104e30 <strcpy>

    return ret;
  104ecd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104ed0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104ed3:	89 c8                	mov    %ecx,%eax
  104ed5:	83 c4 18             	add    $0x18,%esp
  104ed8:	5d                   	pop    %ebp
  104ed9:	c3                   	ret    
  104eda:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104ee0 <strtok>:
}

char* sp = NULL; /* the start position of the string */

char* strtok(char* str, const char* delimiters) {
  104ee0:	55                   	push   %ebp
  104ee1:	89 e5                	mov    %esp,%ebp
  104ee3:	83 ec 18             	sub    $0x18,%esp
  104ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
  104ee9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104eec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(str != 0) { //TODO no way to free the cloned string :|
  104ef2:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104ef9:	0f 84 22 00 00 00    	je     104f21 <strtok+0x41>
        return strtoknc(strclone(str), delimiters);
  104eff:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f02:	89 04 24             	mov    %eax,(%esp)
  104f05:	e8 86 ff ff ff       	call   104e90 <strclone>
  104f0a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104f0d:	89 04 24             	mov    %eax,(%esp)
  104f10:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104f14:	e8 37 00 00 00       	call   104f50 <strtoknc>
  104f19:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104f1c:	e9 1e 00 00 00       	jmp    104f3f <strtok+0x5f>
  104f21:	b8 00 00 00 00       	mov    $0x0,%eax
    }
    return strtoknc(0, delimiters);
  104f26:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104f29:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104f30:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104f34:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104f37:	e8 14 00 00 00       	call   104f50 <strtoknc>
  104f3c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104f3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104f42:	83 c4 18             	add    $0x18,%esp
  104f45:	5d                   	pop    %ebp
  104f46:	c3                   	ret    
  104f47:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  104f4e:	00 00 

00104f50 <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
  104f50:	55                   	push   %ebp
  104f51:	89 e5                	mov    %esp,%ebp
  104f53:	83 ec 28             	sub    $0x28,%esp
  104f56:	8b 45 0c             	mov    0xc(%ebp),%eax
  104f59:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104f5c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104f5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i = 0;
  104f62:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int len = strlen(delimiters);
  104f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104f6c:	89 e1                	mov    %esp,%ecx
  104f6e:	89 01                	mov    %eax,(%ecx)
  104f70:	e8 4b fe ff ff       	call   104dc0 <strlen>
  104f75:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* check in the delimiters */
    if (len == 0)
  104f78:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  104f7f:	0f 85 0c 00 00 00    	jne    104f91 <strtoknc+0x41>
        return 0;
  104f85:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104f8c:	e9 70 01 00 00       	jmp    105101 <strtoknc+0x1b1>

    /* if the original string has nothing left */
    if (!str && !sp)
  104f91:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104f98:	0f 85 1c 00 00 00    	jne    104fba <strtoknc+0x6a>
  104f9e:	81 3d 48 94 10 00 00 	cmpl   $0x0,0x109448
  104fa5:	00 00 00 
  104fa8:	0f 85 0c 00 00 00    	jne    104fba <strtoknc+0x6a>
        return 0;
  104fae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104fb5:	e9 47 01 00 00       	jmp    105101 <strtoknc+0x1b1>

    /* initialize the sp during the first call */
    if (str)
  104fba:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104fc1:	0f 84 08 00 00 00    	je     104fcf <strtoknc+0x7f>
        sp = str;
  104fc7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104fca:	a3 48 94 10 00       	mov    %eax,0x109448

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
  104fcf:	a1 48 94 10 00       	mov    0x109448,%eax
  104fd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
  104fd7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  104fde:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104fe1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104fe4:	0f 8d 3d 00 00 00    	jge    105027 <strtoknc+0xd7>
            if (*p_start == delimiters[i]) {
  104fea:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104fed:	0f be 00             	movsbl (%eax),%eax
  104ff0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104ff3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104ff6:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  104ffa:	39 c8                	cmp    %ecx,%eax
  104ffc:	0f 85 10 00 00 00    	jne    105012 <strtoknc+0xc2>
                p_start++;
  105002:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105005:	05 01 00 00 00       	add    $0x1,%eax
  10500a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                break;
  10500d:	e9 15 00 00 00       	jmp    105027 <strtoknc+0xd7>
            }
        }
  105012:	e9 00 00 00 00       	jmp    105017 <strtoknc+0xc7>
        sp = str;

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
  105017:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10501a:	05 01 00 00 00       	add    $0x1,%eax
  10501f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105022:	e9 b7 ff ff ff       	jmp    104fde <strtoknc+0x8e>
                p_start++;
                break;
            }
        }

        if (i == len) {
  105027:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10502a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10502d:	0f 85 0d 00 00 00    	jne    105040 <strtoknc+0xf0>
            sp = p_start;
  105033:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105036:	a3 48 94 10 00       	mov    %eax,0x109448
            break;
  10503b:	e9 05 00 00 00       	jmp    105045 <strtoknc+0xf5>
        }
    }
  105040:	e9 92 ff ff ff       	jmp    104fd7 <strtoknc+0x87>

    /* return NULL if nothing left */
    if (*sp == '\0') {
  105045:	a1 48 94 10 00       	mov    0x109448,%eax
  10504a:	0f be 00             	movsbl (%eax),%eax
  10504d:	3d 00 00 00 00       	cmp    $0x0,%eax
  105052:	0f 85 17 00 00 00    	jne    10506f <strtoknc+0x11f>
        sp = NULL;
  105058:	c7 05 48 94 10 00 00 	movl   $0x0,0x109448
  10505f:	00 00 00 
        return sp;
  105062:	a1 48 94 10 00       	mov    0x109448,%eax
  105067:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10506a:	e9 92 00 00 00       	jmp    105101 <strtoknc+0x1b1>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  10506f:	e9 00 00 00 00       	jmp    105074 <strtoknc+0x124>
  105074:	a1 48 94 10 00       	mov    0x109448,%eax
  105079:	0f be 00             	movsbl (%eax),%eax
  10507c:	3d 00 00 00 00       	cmp    $0x0,%eax
  105081:	0f 84 74 00 00 00    	je     1050fb <strtoknc+0x1ab>
        for (i = 0; i < len; i++) {
  105087:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10508e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105091:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  105094:	0f 8d 3c 00 00 00    	jge    1050d6 <strtoknc+0x186>
            if (*sp == delimiters[i]) {
  10509a:	a1 48 94 10 00       	mov    0x109448,%eax
  10509f:	0f be 00             	movsbl (%eax),%eax
  1050a2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1050a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1050a8:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  1050ac:	39 c8                	cmp    %ecx,%eax
  1050ae:	0f 85 0d 00 00 00    	jne    1050c1 <strtoknc+0x171>
                *sp = '\0';
  1050b4:	a1 48 94 10 00       	mov    0x109448,%eax
  1050b9:	c6 00 00             	movb   $0x0,(%eax)
                break;
  1050bc:	e9 15 00 00 00       	jmp    1050d6 <strtoknc+0x186>
            }
        }
  1050c1:	e9 00 00 00 00       	jmp    1050c6 <strtoknc+0x176>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
  1050c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050c9:	05 01 00 00 00       	add    $0x1,%eax
  1050ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1050d1:	e9 b8 ff ff ff       	jmp    10508e <strtoknc+0x13e>
                *sp = '\0';
                break;
            }
        }

        sp++;
  1050d6:	a1 48 94 10 00       	mov    0x109448,%eax
  1050db:	05 01 00 00 00       	add    $0x1,%eax
  1050e0:	a3 48 94 10 00       	mov    %eax,0x109448
        if (i < len)
  1050e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050e8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1050eb:	0f 8d 05 00 00 00    	jge    1050f6 <strtoknc+0x1a6>
            break;
  1050f1:	e9 05 00 00 00       	jmp    1050fb <strtoknc+0x1ab>
    }
  1050f6:	e9 79 ff ff ff       	jmp    105074 <strtoknc+0x124>

    return p_start;
  1050fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1050fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  105101:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105104:	83 c4 28             	add    $0x28,%esp
  105107:	5d                   	pop    %ebp
  105108:	c3                   	ret    
  105109:	66 90                	xchg   %ax,%ax
  10510b:	66 90                	xchg   %ax,%ax
  10510d:	66 90                	xchg   %ax,%ax
  10510f:	90                   	nop

00105110 <vfs_create_dir>:
    }

    return child;
}

uint32_t vfs_create_dir(char* path) {
  105110:	55                   	push   %ebp
  105111:	89 e5                	mov    %esp,%ebp
  105113:	83 ec 08             	sub    $0x8,%esp
  105116:	8b 45 08             	mov    0x8(%ebp),%eax
  105119:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return vfs_create_path(path);
  10511c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10511f:	89 04 24             	mov    %eax,(%esp)
  105122:	e8 09 00 00 00       	call   105130 <vfs_create_path>
  105127:	83 c4 08             	add    $0x8,%esp
  10512a:	5d                   	pop    %ebp
  10512b:	c3                   	ret    
  10512c:	0f 1f 40 00          	nopl   0x0(%eax)

00105130 <vfs_create_path>:
    }

    return 1;
}

static int vfs_create_path(char* path) {
  105130:	55                   	push   %ebp
  105131:	89 e5                	mov    %esp,%ebp
  105133:	83 ec 38             	sub    $0x38,%esp
  105136:	8b 45 08             	mov    0x8(%ebp),%eax
  105139:	8d 0d 61 85 10 00    	lea    0x108561,%ecx
  10513f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = root;
  105142:	a1 4c 94 10 00       	mov    0x10944c,%eax
  105147:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  10514a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    int created = 0;
  105151:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    sub = strtok(path, "/");
  105158:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10515b:	89 04 24             	mov    %eax,(%esp)
  10515e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105162:	e8 79 fd ff ff       	call   104ee0 <strtok>
  105167:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  10516a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10516d:	0f be 00             	movsbl (%eax),%eax
  105170:	3d 00 00 00 00       	cmp    $0x0,%eax
  105175:	0f 85 21 00 00 00    	jne    10519c <vfs_create_path+0x6c>
  10517b:	b8 00 00 00 00       	mov    $0x0,%eax
  105180:	8d 0d 61 85 10 00    	lea    0x108561,%ecx
  105186:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10518d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105191:	89 45 e8             	mov    %eax,-0x18(%ebp)
  105194:	e8 47 fd ff ff       	call   104ee0 <strtok>
  105199:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  10519c:	e9 00 00 00 00       	jmp    1051a1 <vfs_create_path+0x71>
  1051a1:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1051a8:	0f 84 e8 00 00 00    	je     105296 <vfs_create_path+0x166>
    {
        child = vfs_find_node(parent, sub);
  1051ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1051b1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1051b4:	89 04 24             	mov    %eax,(%esp)
  1051b7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1051bb:	e8 a0 0b 00 00       	call   105d60 <vfs_find_node>
  1051c0:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if(child == 0) {
  1051c3:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1051ca:	0f 85 9a 00 00 00    	jne    10526a <vfs_create_path+0x13a>
  1051d0:	b8 10 01 00 00       	mov    $0x110,%eax
            child = malloc(sizeof(struct res_node));
  1051d5:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  1051dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1051df:	e8 3c f3 ff ff       	call   104520 <malloc>
  1051e4:	89 45 f0             	mov    %eax,-0x10(%ebp)

            strcpy(child->name, sub);
  1051e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1051ea:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1051ed:	89 e2                	mov    %esp,%edx
  1051ef:	89 4a 04             	mov    %ecx,0x4(%edx)
  1051f2:	89 02                	mov    %eax,(%edx)
  1051f4:	e8 37 fc ff ff       	call   104e30 <strcpy>
            child->res_type = RES_SUBDIR;
  1051f9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1051fc:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  105203:	00 00 00 
            child->res_ptr = 0;
  105206:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105209:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  105210:	00 00 00 

            created++;
  105213:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105216:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10521c:	89 4d ec             	mov    %ecx,-0x14(%ebp)

            if(vfs_insert_node(parent, child)) {
  10521f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105222:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105225:	89 0c 24             	mov    %ecx,(%esp)
  105228:	89 54 24 04          	mov    %edx,0x4(%esp)
  10522c:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10522f:	e8 bc 0b 00 00       	call   105df0 <vfs_insert_node>
  105234:	3d 00 00 00 00       	cmp    $0x0,%eax
  105239:	0f 84 26 00 00 00    	je     105265 <vfs_create_path+0x135>
  10523f:	b8 38 00 00 00       	mov    $0x38,%eax
                show_cod(malloc(sizeof(struct cpu_state)), "Tried to insert VFS node in non RES_SUBDIR parent");
  105244:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  10524b:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10524e:	e8 cd f2 ff ff       	call   104520 <malloc>
  105253:	8d 0d 63 85 10 00    	lea    0x108563,%ecx
  105259:	89 04 24             	mov    %eax,(%esp)
  10525c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105260:	e8 5b ae ff ff       	call   1000c0 <show_cod>
            }
        }
  105265:	e9 00 00 00 00       	jmp    10526a <vfs_create_path+0x13a>
  10526a:	b8 00 00 00 00       	mov    $0x0,%eax
  10526f:	8d 0d 61 85 10 00    	lea    0x108561,%ecx

        parent = child;
  105275:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105278:	89 55 f4             	mov    %edx,-0xc(%ebp)

        sub = strtok(0, "/");
  10527b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105282:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105286:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105289:	e8 52 fc ff ff       	call   104ee0 <strtok>
  10528e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  105291:	e9 0b ff ff ff       	jmp    1051a1 <vfs_create_path+0x71>

    return created;
  105296:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105299:	83 c4 38             	add    $0x38,%esp
  10529c:	5d                   	pop    %ebp
  10529d:	c3                   	ret    
  10529e:	66 90                	xchg   %ax,%ax

001052a0 <vfs_create_kfile>:

uint32_t vfs_create_dir(char* path) {
    return vfs_create_path(path);
}

uint32_t vfs_create_kfile(char* path, struct kfs_driver* driver, uint32_t* params) {
  1052a0:	55                   	push   %ebp
  1052a1:	89 e5                	mov    %esp,%ebp
  1052a3:	83 ec 28             	sub    $0x28,%esp
  1052a6:	8b 45 10             	mov    0x10(%ebp),%eax
  1052a9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1052ac:	8b 55 08             	mov    0x8(%ebp),%edx
  1052af:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1052b2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1052b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* pathc = malloc(strlen(path) + 1);
  1052b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1052bb:	89 e1                	mov    %esp,%ecx
  1052bd:	89 01                	mov    %eax,(%ecx)
  1052bf:	e8 fc fa ff ff       	call   104dc0 <strlen>
  1052c4:	05 01 00 00 00       	add    $0x1,%eax
  1052c9:	89 04 24             	mov    %eax,(%esp)
  1052cc:	e8 4f f2 ff ff       	call   104520 <malloc>
  1052d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    strcpy(pathc, path);
  1052d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1052d7:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1052da:	89 e2                	mov    %esp,%edx
  1052dc:	89 4a 04             	mov    %ecx,0x4(%edx)
  1052df:	89 02                	mov    %eax,(%edx)
  1052e1:	e8 4a fb ff ff       	call   104e30 <strcpy>

    uint32_t ret = vfs_create_path(pathc);
  1052e6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1052e9:	89 0c 24             	mov    %ecx,(%esp)
  1052ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1052ef:	e8 3c fe ff ff       	call   105130 <vfs_create_path>
  1052f4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    static struct res_node* node;
    node = vfs_get_node(path);
  1052f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1052fa:	89 04 24             	mov    %eax,(%esp)
  1052fd:	e8 4e 00 00 00       	call   105350 <vfs_get_node>
  105302:	a3 58 94 10 00       	mov    %eax,0x109458

    node->res_type = RES_KERNDRV;
  105307:	a1 58 94 10 00       	mov    0x109458,%eax
  10530c:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  105313:	00 00 00 
    node->res_ptr = driver->create(params);
  105316:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105319:	8b 40 14             	mov    0x14(%eax),%eax
  10531c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10531f:	89 0c 24             	mov    %ecx,(%esp)
  105322:	ff d0                	call   *%eax
  105324:	8b 0d 58 94 10 00    	mov    0x109458,%ecx
  10532a:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)
    ((struct res_kfile*) node->res_ptr)->driver = driver;
  105330:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105333:	8b 0d 58 94 10 00    	mov    0x109458,%ecx
  105339:	8b 89 04 01 00 00    	mov    0x104(%ecx),%ecx
  10533f:	89 41 04             	mov    %eax,0x4(%ecx)

    return ret;
  105342:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105345:	83 c4 28             	add    $0x28,%esp
  105348:	5d                   	pop    %ebp
  105349:	c3                   	ret    
  10534a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105350 <vfs_get_node>:
    }

    return created;
}

static struct res_node* vfs_get_node(char* path) {
  105350:	55                   	push   %ebp
  105351:	89 e5                	mov    %esp,%ebp
  105353:	83 ec 28             	sub    $0x28,%esp
  105356:	8b 45 08             	mov    0x8(%ebp),%eax
  105359:	8d 0d 61 85 10 00    	lea    0x108561,%ecx
  10535f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char* sub;
    struct res_node* parent = root;
  105362:	a1 4c 94 10 00       	mov    0x10944c,%eax
  105367:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_node* child = 0;
  10536a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    sub = strtok(path, "/");
  105371:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105374:	89 04 24             	mov    %eax,(%esp)
  105377:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10537b:	e8 60 fb ff ff       	call   104ee0 <strtok>
  105380:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  105383:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105386:	0f be 00             	movsbl (%eax),%eax
  105389:	3d 00 00 00 00       	cmp    $0x0,%eax
  10538e:	0f 85 21 00 00 00    	jne    1053b5 <vfs_get_node+0x65>
  105394:	b8 00 00 00 00       	mov    $0x0,%eax
  105399:	8d 0d 61 85 10 00    	lea    0x108561,%ecx
  10539f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1053a6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1053aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1053ad:	e8 2e fb ff ff       	call   104ee0 <strtok>
  1053b2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (sub != NULL)
  1053b5:	e9 00 00 00 00       	jmp    1053ba <vfs_get_node+0x6a>
  1053ba:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1053c1:	0f 84 5a 00 00 00    	je     105421 <vfs_get_node+0xd1>
    {
        if(parent == 0) return 0;
  1053c7:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1053ce:	0f 85 0c 00 00 00    	jne    1053e0 <vfs_get_node+0x90>
  1053d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1053db:	e9 47 00 00 00       	jmp    105427 <vfs_get_node+0xd7>
        child = vfs_find_node(parent, sub);
  1053e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1053e3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1053e6:	89 04 24             	mov    %eax,(%esp)
  1053e9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1053ed:	e8 6e 09 00 00       	call   105d60 <vfs_find_node>
  1053f2:	b9 00 00 00 00       	mov    $0x0,%ecx
  1053f7:	8d 15 61 85 10 00    	lea    0x108561,%edx
  1053fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        parent = child;
  105400:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105403:	89 45 f0             	mov    %eax,-0x10(%ebp)
        sub = strtok(0, "/");
  105406:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10540d:	89 54 24 04          	mov    %edx,0x4(%esp)
  105411:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  105414:	e8 c7 fa ff ff       	call   104ee0 <strtok>
  105419:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  10541c:	e9 99 ff ff ff       	jmp    1053ba <vfs_get_node+0x6a>

    return child;
  105421:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105424:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  105427:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10542a:	83 c4 28             	add    $0x28,%esp
  10542d:	5d                   	pop    %ebp
  10542e:	c3                   	ret    
  10542f:	90                   	nop

00105430 <vfs_open>:
    ((struct res_kfile*) node->res_ptr)->driver = driver;

    return ret;
}

struct res_handle* vfs_open(char* path, uint32_t filemode) {
  105430:	55                   	push   %ebp
  105431:	89 e5                	mov    %esp,%ebp
  105433:	83 ec 28             	sub    $0x28,%esp
  105436:	8b 45 0c             	mov    0xc(%ebp),%eax
  105439:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10543c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10543f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static struct res_node* node;

    node = vfs_get_node(path);
  105442:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105445:	89 04 24             	mov    %eax,(%esp)
  105448:	e8 03 ff ff ff       	call   105350 <vfs_get_node>
  10544d:	a3 5c 94 10 00       	mov    %eax,0x10945c

    if(node->res_type == RES_KERNDRV) {
  105452:	a1 5c 94 10 00       	mov    0x10945c,%eax
  105457:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  10545e:	00 00 00 
  105461:	0f 85 34 00 00 00    	jne    10549b <vfs_open+0x6b>
        struct res_kfile* kf = (struct res_kfile*)node->res_ptr;
  105467:	a1 5c 94 10 00       	mov    0x10945c,%eax
  10546c:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105472:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct res_handle* handle = kf->driver->open(kf, filemode);
  105475:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105478:	8b 40 04             	mov    0x4(%eax),%eax
  10547b:	8b 40 08             	mov    0x8(%eax),%eax
  10547e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105481:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105484:	89 0c 24             	mov    %ecx,(%esp)
  105487:	89 54 24 04          	mov    %edx,0x4(%esp)
  10548b:	ff d0                	call   *%eax
  10548d:	89 45 ec             	mov    %eax,-0x14(%ebp)

        return handle;
  105490:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105493:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105496:	e9 07 00 00 00       	jmp    1054a2 <vfs_open+0x72>
    }

    return 0;
  10549b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1054a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1054a5:	83 c4 28             	add    $0x28,%esp
  1054a8:	5d                   	pop    %ebp
  1054a9:	c3                   	ret    
  1054aa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001054b0 <vfs_close>:

uint32_t vfs_close(struct res_handle* handle) {
  1054b0:	55                   	push   %ebp
  1054b1:	89 e5                	mov    %esp,%ebp
  1054b3:	83 ec 18             	sub    $0x18,%esp
  1054b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1054b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle->res_type == RES_KERNDRV) {
  1054bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1054bf:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  1054c5:	0f 85 22 00 00 00    	jne    1054ed <vfs_close+0x3d>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  1054cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1054ce:	8b 40 04             	mov    0x4(%eax),%eax
  1054d1:	89 45 f4             	mov    %eax,-0xc(%ebp)

       return kf->driver->close(handle);
  1054d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1054d7:	8b 40 04             	mov    0x4(%eax),%eax
  1054da:	8b 40 0c             	mov    0xc(%eax),%eax
  1054dd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1054e0:	89 0c 24             	mov    %ecx,(%esp)
  1054e3:	ff d0                	call   *%eax
  1054e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1054e8:	e9 07 00 00 00       	jmp    1054f4 <vfs_close+0x44>
    }

    return 0;
  1054ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1054f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1054f7:	83 c4 18             	add    $0x18,%esp
  1054fa:	5d                   	pop    %ebp
  1054fb:	c3                   	ret    
  1054fc:	0f 1f 40 00          	nopl   0x0(%eax)

00105500 <vfs_read>:

uint32_t vfs_read(struct res_handle* handle, void* dest, uint32_t size, uint32_t count) {
  105500:	55                   	push   %ebp
  105501:	89 e5                	mov    %esp,%ebp
  105503:	56                   	push   %esi
  105504:	83 ec 34             	sub    $0x34,%esp
  105507:	8b 45 14             	mov    0x14(%ebp),%eax
  10550a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10550d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105510:	8b 75 08             	mov    0x8(%ebp),%esi
  105513:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105516:	89 55 f0             	mov    %edx,-0x10(%ebp)
  105519:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10551c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  10551f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  105526:	0f 85 0c 00 00 00    	jne    105538 <vfs_read+0x38>
  10552c:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  105533:	e9 b6 00 00 00       	jmp    1055ee <vfs_read+0xee>

    if(!(handle->filemode & FM_READ)) return RW_NOFM_READ;
  105538:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10553b:	8b 40 0c             	mov    0xc(%eax),%eax
  10553e:	25 01 00 00 00       	and    $0x1,%eax
  105543:	3d 00 00 00 00       	cmp    $0x0,%eax
  105548:	0f 85 0c 00 00 00    	jne    10555a <vfs_read+0x5a>
  10554e:	c7 45 f8 04 00 00 00 	movl   $0x4,-0x8(%ebp)
  105555:	e9 94 00 00 00       	jmp    1055ee <vfs_read+0xee>

    if(handle->res_type == RES_KERNDRV) {
  10555a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10555d:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105563:	0f 85 7e 00 00 00    	jne    1055e7 <vfs_read+0xe7>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105569:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10556c:	8b 40 04             	mov    0x4(%eax),%eax
  10556f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rread(handle, dest, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  105572:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105575:	8b 40 04             	mov    0x4(%eax),%eax
  105578:	8b 00                	mov    (%eax),%eax
  10557a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10557d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105580:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105583:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  105587:	89 0c 24             	mov    %ecx,(%esp)
  10558a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10558e:	89 74 24 08          	mov    %esi,0x8(%esp)
  105592:	ff d0                	call   *%eax
  105594:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  105597:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  10559e:	0f 85 1e 00 00 00    	jne    1055c2 <vfs_read+0xc2>
           handle->position += size * count;
  1055a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1055a7:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  1055ab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1055ae:	8b 51 08             	mov    0x8(%ecx),%edx
  1055b1:	01 c2                	add    %eax,%edx
  1055b3:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  1055b6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1055bd:	e9 2c 00 00 00       	jmp    1055ee <vfs_read+0xee>
       }

       if(res == RW_BLOCK) {
  1055c2:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  1055c9:	0f 85 0c 00 00 00    	jne    1055db <vfs_read+0xdb>
           return RW_BLOCK;
  1055cf:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  1055d6:	e9 13 00 00 00       	jmp    1055ee <vfs_read+0xee>
       }

       return RW_ERR_DRIVER;
  1055db:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  1055e2:	e9 07 00 00 00       	jmp    1055ee <vfs_read+0xee>
    }

    return RW_ERR_VFS;
  1055e7:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  1055ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1055f1:	83 c4 34             	add    $0x34,%esp
  1055f4:	5e                   	pop    %esi
  1055f5:	5d                   	pop    %ebp
  1055f6:	c3                   	ret    
  1055f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1055fe:	00 00 

00105600 <vfs_write>:

uint32_t vfs_write(struct res_handle* handle, void* src,  uint32_t size, uint32_t count) {
  105600:	55                   	push   %ebp
  105601:	89 e5                	mov    %esp,%ebp
  105603:	56                   	push   %esi
  105604:	83 ec 34             	sub    $0x34,%esp
  105607:	8b 45 14             	mov    0x14(%ebp),%eax
  10560a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10560d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105610:	8b 75 08             	mov    0x8(%ebp),%esi
  105613:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105616:	89 55 f0             	mov    %edx,-0x10(%ebp)
  105619:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10561c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  10561f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  105626:	0f 85 0c 00 00 00    	jne    105638 <vfs_write+0x38>
  10562c:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  105633:	e9 b7 00 00 00       	jmp    1056ef <vfs_write+0xef>

    if(!(handle->filemode & FM_WRITE)) return RW_NOFM_WRITE;
  105638:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10563b:	8b 40 0c             	mov    0xc(%eax),%eax
  10563e:	25 02 00 00 00       	and    $0x2,%eax
  105643:	3d 00 00 00 00       	cmp    $0x0,%eax
  105648:	0f 85 0c 00 00 00    	jne    10565a <vfs_write+0x5a>
  10564e:	c7 45 f8 05 00 00 00 	movl   $0x5,-0x8(%ebp)
  105655:	e9 95 00 00 00       	jmp    1056ef <vfs_write+0xef>

    if(handle->res_type == RES_KERNDRV) {
  10565a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10565d:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105663:	0f 85 7f 00 00 00    	jne    1056e8 <vfs_write+0xe8>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105669:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10566c:	8b 40 04             	mov    0x4(%eax),%eax
  10566f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rwrite(handle, src, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  105672:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105675:	8b 40 04             	mov    0x4(%eax),%eax
  105678:	8b 40 04             	mov    0x4(%eax),%eax
  10567b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10567e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105681:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105684:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  105688:	89 0c 24             	mov    %ecx,(%esp)
  10568b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10568f:	89 74 24 08          	mov    %esi,0x8(%esp)
  105693:	ff d0                	call   *%eax
  105695:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  105698:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  10569f:	0f 85 1e 00 00 00    	jne    1056c3 <vfs_write+0xc3>
           handle->position += size * count;
  1056a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1056a8:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  1056ac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1056af:	8b 51 08             	mov    0x8(%ecx),%edx
  1056b2:	01 c2                	add    %eax,%edx
  1056b4:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  1056b7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1056be:	e9 2c 00 00 00       	jmp    1056ef <vfs_write+0xef>
       }

       if(res == RW_BLOCK) {
  1056c3:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  1056ca:	0f 85 0c 00 00 00    	jne    1056dc <vfs_write+0xdc>
           return RW_BLOCK;
  1056d0:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  1056d7:	e9 13 00 00 00       	jmp    1056ef <vfs_write+0xef>
       }

       return RW_ERR_DRIVER;
  1056dc:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  1056e3:	e9 07 00 00 00       	jmp    1056ef <vfs_write+0xef>
    }

    return RW_ERR_VFS;
  1056e8:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  1056ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1056f2:	83 c4 34             	add    $0x34,%esp
  1056f5:	5e                   	pop    %esi
  1056f6:	5d                   	pop    %ebp
  1056f7:	c3                   	ret    
  1056f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  1056ff:	00 

00105700 <vfs_available>:

uint32_t vfs_available(struct res_handle* handle) {
  105700:	55                   	push   %ebp
  105701:	89 e5                	mov    %esp,%ebp
  105703:	83 ec 18             	sub    $0x18,%esp
  105706:	8b 45 08             	mov    0x8(%ebp),%eax
  105709:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle == 0) return 0;
  10570c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  105713:	0f 85 0c 00 00 00    	jne    105725 <vfs_available+0x25>
  105719:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105720:	e9 38 00 00 00       	jmp    10575d <vfs_available+0x5d>

    if(handle->res_type == RES_KERNDRV) {
  105725:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105728:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  10572e:	0f 85 22 00 00 00    	jne    105756 <vfs_available+0x56>
        struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105734:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105737:	8b 40 04             	mov    0x4(%eax),%eax
  10573a:	89 45 f4             	mov    %eax,-0xc(%ebp)

        return kf->driver->available(handle);
  10573d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105740:	8b 40 04             	mov    0x4(%eax),%eax
  105743:	8b 40 10             	mov    0x10(%eax),%eax
  105746:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105749:	89 0c 24             	mov    %ecx,(%esp)
  10574c:	ff d0                	call   *%eax
  10574e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105751:	e9 07 00 00 00       	jmp    10575d <vfs_available+0x5d>
    }

    return 0;
  105756:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10575d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105760:	83 c4 18             	add    $0x18,%esp
  105763:	5d                   	pop    %ebp
  105764:	c3                   	ret    
  105765:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10576c:	00 00 00 00 

00105770 <vfs_exists>:

uint32_t vfs_exists(char* path) {
  105770:	55                   	push   %ebp
  105771:	89 e5                	mov    %esp,%ebp
  105773:	83 ec 18             	sub    $0x18,%esp
  105776:	8b 45 08             	mov    0x8(%ebp),%eax
  105779:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(vfs_get_node(path) != 0) return 1;
  10577c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10577f:	89 04 24             	mov    %eax,(%esp)
  105782:	e8 c9 fb ff ff       	call   105350 <vfs_get_node>
  105787:	3d 00 00 00 00       	cmp    $0x0,%eax
  10578c:	0f 84 0c 00 00 00    	je     10579e <vfs_exists+0x2e>
  105792:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  105799:	e9 07 00 00 00       	jmp    1057a5 <vfs_exists+0x35>
    return 0;
  10579e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1057a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1057a8:	83 c4 18             	add    $0x18,%esp
  1057ab:	5d                   	pop    %ebp
  1057ac:	c3                   	ret    
  1057ad:	0f 1f 00             	nopl   (%eax)

001057b0 <vfs_seek>:

void vfs_seek(struct res_handle* handle, uint32_t offset, uint32_t origin) {
  1057b0:	55                   	push   %ebp
  1057b1:	89 e5                	mov    %esp,%ebp
  1057b3:	83 ec 0c             	sub    $0xc,%esp
  1057b6:	8b 45 10             	mov    0x10(%ebp),%eax
  1057b9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1057bc:	8b 55 08             	mov    0x8(%ebp),%edx
  1057bf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1057c2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1057c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(origin == SEEK_SET) {
  1057c8:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1057cf:	0f 85 09 00 00 00    	jne    1057de <vfs_seek+0x2e>
        handle->position = offset;
  1057d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1057d8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1057db:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if(origin == SEEK_CUR) {
  1057de:	81 7d f4 01 00 00 00 	cmpl   $0x1,-0xc(%ebp)
  1057e5:	0f 85 0e 00 00 00    	jne    1057f9 <vfs_seek+0x49>
        handle->position += offset;
  1057eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1057ee:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1057f1:	8b 51 08             	mov    0x8(%ecx),%edx
  1057f4:	01 c2                	add    %eax,%edx
  1057f6:	89 51 08             	mov    %edx,0x8(%ecx)
    }
}
  1057f9:	83 c4 0c             	add    $0xc,%esp
  1057fc:	5d                   	pop    %ebp
  1057fd:	c3                   	ret    
  1057fe:	66 90                	xchg   %ax,%ax

00105800 <vfs_exec>:

uint32_t vfs_exec(char* ip, char* args[]) {
  105800:	55                   	push   %ebp
  105801:	89 e5                	mov    %esp,%ebp
  105803:	56                   	push   %esi
  105804:	81 ec 94 00 00 00    	sub    $0x94,%esp
  10580a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10580d:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105810:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  105813:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char* path = strclone(ip);
  105816:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105819:	89 04 24             	mov    %eax,(%esp)
  10581c:	e8 6f f6 ff ff       	call   104e90 <strclone>
  105821:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(!vfs_exists(path)) {
  105824:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105827:	89 04 24             	mov    %eax,(%esp)
  10582a:	e8 41 ff ff ff       	call   105770 <vfs_exists>
  10582f:	3d 00 00 00 00       	cmp    $0x0,%eax
  105834:	0f 85 0c 00 00 00    	jne    105846 <vfs_exec+0x46>
        return EXEC_FILE_NOT_FOUND;
  10583a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  105841:	e9 9a 03 00 00       	jmp    105be0 <vfs_exec+0x3e0>
    }

    uint32_t elf_mod_pdir;

    elf_mod_pdir = vmm_create_pagedir();
  105846:	e8 45 06 00 00       	call   105e90 <vmm_create_pagedir>
  10584b:	89 45 e8             	mov    %eax,-0x18(%ebp)

    //Copy args into kernel memory
    uint32_t argc = 0;
  10584e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    if(args != 0) {
  105855:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10585c:	0f 84 2d 00 00 00    	je     10588f <vfs_exec+0x8f>
        while(args[argc] != 0) {
  105862:	e9 00 00 00 00       	jmp    105867 <vfs_exec+0x67>
  105867:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10586a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10586d:	81 3c 81 00 00 00 00 	cmpl   $0x0,(%ecx,%eax,4)
  105874:	0f 84 10 00 00 00    	je     10588a <vfs_exec+0x8a>
            argc++;
  10587a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10587d:	05 01 00 00 00       	add    $0x1,%eax
  105882:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
  105885:	e9 dd ff ff ff       	jmp    105867 <vfs_exec+0x67>
    }
  10588a:	e9 00 00 00 00       	jmp    10588f <vfs_exec+0x8f>

    char** kargs = malloc((sizeof(char*)) * (argc + 1));
  10588f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105892:	05 01 00 00 00       	add    $0x1,%eax
  105897:	c1 e0 02             	shl    $0x2,%eax
  10589a:	89 04 24             	mov    %eax,(%esp)
  10589d:	e8 7e ec ff ff       	call   104520 <malloc>
  1058a2:	89 45 e0             	mov    %eax,-0x20(%ebp)

    for(uint32_t i = 0; i < argc; i++) {
  1058a5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  1058ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1058af:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  1058b2:	0f 83 59 00 00 00    	jae    105911 <vfs_exec+0x111>
        kargs[i] = malloc(strlen(args[i]) + 1);
  1058b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1058bb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1058be:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1058c1:	89 e1                	mov    %esp,%ecx
  1058c3:	89 01                	mov    %eax,(%ecx)
  1058c5:	e8 f6 f4 ff ff       	call   104dc0 <strlen>
  1058ca:	05 01 00 00 00       	add    $0x1,%eax
  1058cf:	89 04 24             	mov    %eax,(%esp)
  1058d2:	e8 49 ec ff ff       	call   104520 <malloc>
  1058d7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1058da:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1058dd:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        strcpy(kargs[i], args[i]);
  1058e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1058e3:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1058e6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1058e9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1058ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1058ef:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1058f2:	89 e2                	mov    %esp,%edx
  1058f4:	89 4a 04             	mov    %ecx,0x4(%edx)
  1058f7:	89 02                	mov    %eax,(%edx)
  1058f9:	e8 32 f5 ff ff       	call   104e30 <strcpy>
  1058fe:	89 45 9c             	mov    %eax,-0x64(%ebp)
        }
    }

    char** kargs = malloc((sizeof(char*)) * (argc + 1));

    for(uint32_t i = 0; i < argc; i++) {
  105901:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105904:	05 01 00 00 00       	add    $0x1,%eax
  105909:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10590c:	e9 9b ff ff ff       	jmp    1058ac <vfs_exec+0xac>
  105911:	b8 05 00 00 00       	mov    $0x5,%eax
        kargs[i] = malloc(strlen(args[i]) + 1);
        strcpy(kargs[i], args[i]);
    }

    kargs[argc] = 0;
  105916:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105919:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10591c:	c7 04 8a 00 00 00 00 	movl   $0x0,(%edx,%ecx,4)

    //Execute file
    struct res_handle* handle = vfs_open(path, FM_EXEC | FM_READ);
  105923:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105926:	89 0c 24             	mov    %ecx,(%esp)
  105929:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  105930:	00 
  105931:	89 45 98             	mov    %eax,-0x68(%ebp)
  105934:	e8 f7 fa ff ff       	call   105430 <vfs_open>
  105939:	89 45 d8             	mov    %eax,-0x28(%ebp)

    if(!handle) {
  10593c:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  105943:	0f 85 0c 00 00 00    	jne    105955 <vfs_exec+0x155>
        return EXEC_PERM_DENIED;
  105949:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  105950:	e9 8b 02 00 00       	jmp    105be0 <vfs_exec+0x3e0>
    }

    uint32_t size = vfs_available(handle);
  105955:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105958:	89 04 24             	mov    %eax,(%esp)
  10595b:	e8 a0 fd ff ff       	call   105700 <vfs_available>
  105960:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if(size == 0) {
  105963:	81 7d d4 00 00 00 00 	cmpl   $0x0,-0x2c(%ebp)
  10596a:	0f 85 0c 00 00 00    	jne    10597c <vfs_exec+0x17c>
        return EXEC_CORRUPT_ELF;
  105970:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  105977:	e9 64 02 00 00       	jmp    105be0 <vfs_exec+0x3e0>
    }

    void* modsrc = malloc(size);
  10597c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10597f:	89 04 24             	mov    %eax,(%esp)
  105982:	e8 99 eb ff ff       	call   104520 <malloc>
  105987:	b9 01 00 00 00       	mov    $0x1,%ecx
  10598c:	89 45 d0             	mov    %eax,-0x30(%ebp)

    uint32_t res = vfs_read(handle, modsrc, size, 1);
  10598f:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105992:	8b 55 d0             	mov    -0x30(%ebp),%edx
  105995:	8b 75 d4             	mov    -0x2c(%ebp),%esi
  105998:	89 04 24             	mov    %eax,(%esp)
  10599b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10599f:	89 74 24 08          	mov    %esi,0x8(%esp)
  1059a3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1059aa:	00 
  1059ab:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  1059ae:	e8 4d fb ff ff       	call   105500 <vfs_read>
  1059b3:	89 45 cc             	mov    %eax,-0x34(%ebp)

    if(res != RW_OK) {
  1059b6:	81 7d cc 00 00 00 00 	cmpl   $0x0,-0x34(%ebp)
  1059bd:	0f 84 17 00 00 00    	je     1059da <vfs_exec+0x1da>
        free(modsrc);
  1059c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1059c6:	89 04 24             	mov    %eax,(%esp)
  1059c9:	e8 22 ef ff ff       	call   1048f0 <free>
        return EXEC_FILESYSTEM;
  1059ce:	c7 45 f8 04 00 00 00 	movl   $0x4,-0x8(%ebp)
  1059d5:	e9 06 02 00 00       	jmp    105be0 <vfs_exec+0x3e0>
    }

    uint32_t old_pdir = vmm_get_current_pagedir();
  1059da:	e8 a1 04 00 00       	call   105e80 <vmm_get_current_pagedir>
  1059df:	89 45 c8             	mov    %eax,-0x38(%ebp)

    //**********************************************************************************************************
    vmm_activate_pagedir(elf_mod_pdir);
  1059e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1059e5:	89 04 24             	mov    %eax,(%esp)
  1059e8:	e8 63 10 00 00       	call   106a50 <vmm_activate_pagedir>

    struct elf_header* header = modsrc;
  1059ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1059f0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    struct elf_program_header* ph;

    /* Ist es ueberhaupt eine ELF-Datei? */
    if (header->magic != ELF_MAGIC) {
  1059f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1059f6:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  1059fc:	0f 84 17 00 00 00    	je     105a19 <vfs_exec+0x219>
        free(modsrc);
  105a02:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105a05:	89 04 24             	mov    %eax,(%esp)
  105a08:	e8 e3 ee ff ff       	call   1048f0 <free>
        return EXEC_CORRUPT_ELF;
  105a0d:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  105a14:	e9 c7 01 00 00       	jmp    105be0 <vfs_exec+0x3e0>
    }

    void* elf_mod_entry = (void*) (header->entry);
  105a19:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  105a1c:	8b 40 18             	mov    0x18(%eax),%eax
  105a1f:	89 45 bc             	mov    %eax,-0x44(%ebp)

    ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  105a22:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  105a25:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  105a28:	03 41 1c             	add    0x1c(%ecx),%eax
  105a2b:	89 45 c0             	mov    %eax,-0x40(%ebp)

    for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  105a2e:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  105a35:	8b 45 b8             	mov    -0x48(%ebp),%eax
  105a38:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  105a3b:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  105a3f:	39 c8                	cmp    %ecx,%eax
  105a41:	0f 83 b5 00 00 00    	jae    105afc <vfs_exec+0x2fc>
        void* dest = (void*) ph->virt_addr;
  105a47:	8b 45 c0             	mov    -0x40(%ebp),%eax
  105a4a:	8b 40 08             	mov    0x8(%eax),%eax
  105a4d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        void* src = ((char*) header) + ph->offset;
  105a50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  105a53:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  105a56:	03 41 04             	add    0x4(%ecx),%eax
  105a59:	89 45 b0             	mov    %eax,-0x50(%ebp)

        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
  105a5c:	8b 45 c0             	mov    -0x40(%ebp),%eax
  105a5f:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105a65:	0f 84 05 00 00 00    	je     105a70 <vfs_exec+0x270>
            continue;
  105a6b:	e9 71 00 00 00       	jmp    105ae1 <vfs_exec+0x2e1>
        }

        for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  105a70:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  105a77:	8b 45 ac             	mov    -0x54(%ebp),%eax
  105a7a:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  105a7d:	3b 41 14             	cmp    0x14(%ecx),%eax
  105a80:	0f 83 3f 00 00 00    	jae    105ac5 <vfs_exec+0x2c5>
            vmm_free(dest + offset);
  105a86:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  105a89:	03 45 ac             	add    -0x54(%ebp),%eax
  105a8c:	89 04 24             	mov    %eax,(%esp)
  105a8f:	e8 0c 09 00 00       	call   1063a0 <vmm_free>
  105a94:	b8 00 00 00 00       	mov    $0x0,%eax
            vmm_alloc_addr(dest + offset, 0);
  105a99:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  105a9c:	03 4d ac             	add    -0x54(%ebp),%ecx
  105a9f:	89 0c 24             	mov    %ecx,(%esp)
  105aa2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  105aa9:	00 
  105aaa:	89 45 90             	mov    %eax,-0x70(%ebp)
  105aad:	e8 9e 0e 00 00       	call   106950 <vmm_alloc_addr>
  105ab2:	89 45 8c             	mov    %eax,-0x74(%ebp)
        /* Nur Program Header vom Typ LOAD laden */
        if (ph->type != 1) {
            continue;
        }

        for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  105ab5:	8b 45 ac             	mov    -0x54(%ebp),%eax
  105ab8:	05 00 10 00 00       	add    $0x1000,%eax
  105abd:	89 45 ac             	mov    %eax,-0x54(%ebp)
  105ac0:	e9 b2 ff ff ff       	jmp    105a77 <vfs_exec+0x277>
            vmm_free(dest + offset);
            vmm_alloc_addr(dest + offset, 0);
        }

        memcpy(dest, src, ph->file_size);
  105ac5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  105ac8:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  105acb:	8b 55 c0             	mov    -0x40(%ebp),%edx
  105ace:	8b 52 10             	mov    0x10(%edx),%edx
  105ad1:	89 04 24             	mov    %eax,(%esp)
  105ad4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105ad8:	89 54 24 08          	mov    %edx,0x8(%esp)
  105adc:	e8 0f f1 ff ff       	call   104bf0 <memcpy>

    void* elf_mod_entry = (void*) (header->entry);

    ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);

    for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  105ae1:	8b 45 b8             	mov    -0x48(%ebp),%eax
  105ae4:	05 01 00 00 00       	add    $0x1,%eax
  105ae9:	89 45 b8             	mov    %eax,-0x48(%ebp)
  105aec:	8b 45 c0             	mov    -0x40(%ebp),%eax
  105aef:	05 20 00 00 00       	add    $0x20,%eax
  105af4:	89 45 c0             	mov    %eax,-0x40(%ebp)
  105af7:	e9 39 ff ff ff       	jmp    105a35 <vfs_exec+0x235>
  105afc:	b8 01 00 00 00       	mov    $0x1,%eax

        memcpy(dest, src, ph->file_size);
    }

    //Copy args into new task
    char** usargs = vmm_alloc_ucont(1);
  105b01:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  105b08:	89 45 88             	mov    %eax,-0x78(%ebp)
  105b0b:	e8 10 0c 00 00       	call   106720 <vmm_alloc_ucont>
  105b10:	89 45 a8             	mov    %eax,-0x58(%ebp)

    for(uint32_t i = 0; i < argc; i++) {
  105b13:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
  105b1a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  105b1d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  105b20:	0f 83 4e 00 00 00    	jae    105b74 <vfs_exec+0x374>
  105b26:	b8 01 00 00 00       	mov    $0x1,%eax
        usargs[i] = vmm_alloc_ucont(1); //FIXME will fail on strings > 4095 chars or more than 1023 arguments
  105b2b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  105b32:	89 45 84             	mov    %eax,-0x7c(%ebp)
  105b35:	e8 e6 0b 00 00       	call   106720 <vmm_alloc_ucont>
  105b3a:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  105b3d:	8b 55 a8             	mov    -0x58(%ebp),%edx
  105b40:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
        strcpy(usargs[i], kargs[i]);
  105b43:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  105b46:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  105b49:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105b4c:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  105b4f:	8b 55 e0             	mov    -0x20(%ebp),%edx
  105b52:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105b55:	89 e2                	mov    %esp,%edx
  105b57:	89 4a 04             	mov    %ecx,0x4(%edx)
  105b5a:	89 02                	mov    %eax,(%edx)
  105b5c:	e8 cf f2 ff ff       	call   104e30 <strcpy>
  105b61:	89 45 80             	mov    %eax,-0x80(%ebp)
    }

    //Copy args into new task
    char** usargs = vmm_alloc_ucont(1);

    for(uint32_t i = 0; i < argc; i++) {
  105b64:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  105b67:	05 01 00 00 00       	add    $0x1,%eax
  105b6c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  105b6f:	e9 a6 ff ff ff       	jmp    105b1a <vfs_exec+0x31a>
        usargs[i] = vmm_alloc_ucont(1); //FIXME will fail on strings > 4095 chars or more than 1023 arguments
        strcpy(usargs[i], kargs[i]);
    }

    usargs[argc] = 0;
  105b74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105b77:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  105b7a:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)

    struct task* task = init_task(elf_mod_pdir, elf_mod_entry);
  105b81:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105b84:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  105b87:	89 04 24             	mov    %eax,(%esp)
  105b8a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105b8e:	e8 bd e6 ff ff       	call   104250 <init_task>
  105b93:	89 45 a0             	mov    %eax,-0x60(%ebp)
    if(get_current_task() != 0) {
  105b96:	e8 d5 e2 ff ff       	call   103e70 <get_current_task>
  105b9b:	3d 00 00 00 00       	cmp    $0x0,%eax
  105ba0:	0f 84 0b 00 00 00    	je     105bb1 <vfs_exec+0x3b1>
        fork_task_state(task);
  105ba6:	8b 45 a0             	mov    -0x60(%ebp),%eax
  105ba9:	89 04 24             	mov    %eax,(%esp)
  105bac:	e8 5f e6 ff ff       	call   104210 <fork_task_state>
    }

    //TODO change stdio if requested and free kargs

    task->args = usargs;
  105bb1:	8b 45 a8             	mov    -0x58(%ebp),%eax
  105bb4:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  105bb7:	89 41 18             	mov    %eax,0x18(%ecx)
    task->path = path;
  105bba:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105bbd:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  105bc0:	89 41 1c             	mov    %eax,0x1c(%ecx)

    vmm_activate_pagedir(old_pdir);
  105bc3:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105bc6:	89 04 24             	mov    %eax,(%esp)
  105bc9:	e8 82 0e 00 00       	call   106a50 <vmm_activate_pagedir>

    free(modsrc);
  105bce:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105bd1:	89 04 24             	mov    %eax,(%esp)
  105bd4:	e8 17 ed ff ff       	call   1048f0 <free>

    return EXEC_OK;
  105bd9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  105be0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105be3:	81 c4 94 00 00 00    	add    $0x94,%esp
  105be9:	5e                   	pop    %esi
  105bea:	5d                   	pop    %ebp
  105beb:	c3                   	ret    
  105bec:	0f 1f 40 00          	nopl   0x0(%eax)

00105bf0 <vfs_init_root>:

void vfs_init_root() {
  105bf0:	55                   	push   %ebp
  105bf1:	89 e5                	mov    %esp,%ebp
    if(root == 0) {
  105bf3:	83 ec 18             	sub    $0x18,%esp
  105bf6:	81 3d 4c 94 10 00 00 	cmpl   $0x0,0x10944c
  105bfd:	00 00 00 
  105c00:	0f 85 6f 00 00 00    	jne    105c75 <vfs_init_root+0x85>
  105c06:	b8 10 01 00 00       	mov    $0x110,%eax
        root = malloc(sizeof(struct res_node));
  105c0b:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  105c12:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105c15:	e8 06 e9 ff ff       	call   104520 <malloc>
  105c1a:	a3 4c 94 10 00       	mov    %eax,0x10944c
        root->next = 0;
  105c1f:	a1 4c 94 10 00       	mov    0x10944c,%eax
  105c24:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  105c2b:	00 00 00 
        root->parent = 0;
  105c2e:	a1 4c 94 10 00       	mov    0x10944c,%eax
  105c33:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  105c3a:	00 00 00 
        strcpy(root->name, "$");
  105c3d:	a1 4c 94 10 00       	mov    0x10944c,%eax
  105c42:	89 e1                	mov    %esp,%ecx
  105c44:	89 01                	mov    %eax,(%ecx)
  105c46:	c7 41 04 47 85 10 00 	movl   $0x108547,0x4(%ecx)
  105c4d:	e8 de f1 ff ff       	call   104e30 <strcpy>
        root->res_ptr = 0;
  105c52:	8b 0d 4c 94 10 00    	mov    0x10944c,%ecx
  105c58:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  105c5f:	00 00 00 
        root->res_type = RES_SUBDIR;
  105c62:	8b 0d 4c 94 10 00    	mov    0x10944c,%ecx
  105c68:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  105c6f:	00 00 00 
  105c72:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
}
  105c75:	83 c4 18             	add    $0x18,%esp
  105c78:	5d                   	pop    %ebp
  105c79:	c3                   	ret    
  105c7a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105c80 <vfs_debug_ls>:

void vfs_debug_ls(char* path) {
  105c80:	55                   	push   %ebp
  105c81:	89 e5                	mov    %esp,%ebp
  105c83:	56                   	push   %esi
  105c84:	83 ec 24             	sub    $0x24,%esp
  105c87:	8b 45 08             	mov    0x8(%ebp),%eax
  105c8a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    static struct res_node* node;
    node = vfs_get_node(path);
  105c8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105c90:	89 04 24             	mov    %eax,(%esp)
  105c93:	e8 b8 f6 ff ff       	call   105350 <vfs_get_node>
  105c98:	a3 60 94 10 00       	mov    %eax,0x109460
    node = node->res_ptr;
  105c9d:	a1 60 94 10 00       	mov    0x109460,%eax
  105ca2:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105ca8:	a3 60 94 10 00       	mov    %eax,0x109460

    while(node != 0) {
  105cad:	81 3d 60 94 10 00 00 	cmpl   $0x0,0x109460
  105cb4:	00 00 00 
  105cb7:	0f 84 90 00 00 00    	je     105d4d <vfs_debug_ls+0xcd>
  105cbd:	8d 05 49 85 10 00    	lea    0x108549,%eax
        char* type = "N/A";
  105cc3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(node->res_type == RES_SUBDIR) {
  105cc6:	a1 60 94 10 00       	mov    0x109460,%eax
  105ccb:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  105cd2:	00 00 00 
  105cd5:	0f 85 09 00 00 00    	jne    105ce4 <vfs_debug_ls+0x64>
  105cdb:	8d 05 4d 85 10 00    	lea    0x10854d,%eax
            type = "DIR";
  105ce1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        if(node->res_type == RES_KERNDRV) {
  105ce4:	a1 60 94 10 00       	mov    0x109460,%eax
  105ce9:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  105cf0:	00 00 00 
  105cf3:	0f 85 14 00 00 00    	jne    105d0d <vfs_debug_ls+0x8d>
            type = ((struct res_kfile*)node->res_ptr)->driver->drvname;
  105cf9:	a1 60 94 10 00       	mov    0x109460,%eax
  105cfe:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105d04:	8b 40 04             	mov    0x4(%eax),%eax
  105d07:	8b 40 18             	mov    0x18(%eax),%eax
  105d0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105d0d:	8d 05 51 85 10 00    	lea    0x108551,%eax
        }

        kprintf("LS %s: %s [%s]\n", path, node->name, type);
  105d13:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105d16:	8b 15 60 94 10 00    	mov    0x109460,%edx
  105d1c:	8b 75 f4             	mov    -0xc(%ebp),%esi
  105d1f:	89 04 24             	mov    %eax,(%esp)
  105d22:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105d26:	89 54 24 08          	mov    %edx,0x8(%esp)
  105d2a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  105d2e:	e8 7d a5 ff ff       	call   1002b0 <kprintf>

        node = node->next;
  105d33:	8b 0d 60 94 10 00    	mov    0x109460,%ecx
  105d39:	8b 89 08 01 00 00    	mov    0x108(%ecx),%ecx
  105d3f:	89 0d 60 94 10 00    	mov    %ecx,0x109460
    }
  105d45:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105d48:	e9 60 ff ff ff       	jmp    105cad <vfs_debug_ls+0x2d>
}
  105d4d:	83 c4 24             	add    $0x24,%esp
  105d50:	5e                   	pop    %esi
  105d51:	5d                   	pop    %ebp
  105d52:	c3                   	ret    
  105d53:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105d5a:	84 00 00 00 00 00 

00105d60 <vfs_find_node>:

struct res_node* root = 0;
struct res_node* current = 0;
struct res_node* temp = 0;

static struct res_node* vfs_find_node(struct res_node* parent, char* name) {
  105d60:	55                   	push   %ebp
  105d61:	89 e5                	mov    %esp,%ebp
  105d63:	83 ec 18             	sub    $0x18,%esp
  105d66:	8b 45 0c             	mov    0xc(%ebp),%eax
  105d69:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105d6c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105d6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_type == RES_SUBDIR) {
  105d72:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105d75:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  105d7c:	00 00 00 
  105d7f:	0f 85 57 00 00 00    	jne    105ddc <vfs_find_node+0x7c>
        struct res_node* ptr = parent->res_ptr;
  105d85:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105d88:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105d8e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        while(ptr != 0) {
  105d91:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105d98:	0f 84 39 00 00 00    	je     105dd7 <vfs_find_node+0x77>
            if(strcmp(name, ptr->name) == 0) {
  105d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105da1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105da4:	89 e2                	mov    %esp,%edx
  105da6:	89 4a 04             	mov    %ecx,0x4(%edx)
  105da9:	89 02                	mov    %eax,(%edx)
  105dab:	e8 90 ef ff ff       	call   104d40 <strcmp>
  105db0:	3d 00 00 00 00       	cmp    $0x0,%eax
  105db5:	0f 85 0b 00 00 00    	jne    105dc6 <vfs_find_node+0x66>
                return ptr;
  105dbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105dbe:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105dc1:	e9 1d 00 00 00       	jmp    105de3 <vfs_find_node+0x83>
            }

            ptr = ptr->next;
  105dc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105dc9:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  105dcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
  105dd2:	e9 ba ff ff ff       	jmp    105d91 <vfs_find_node+0x31>
    }
  105dd7:	e9 00 00 00 00       	jmp    105ddc <vfs_find_node+0x7c>

    return 0;
  105ddc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105de3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105de6:	83 c4 18             	add    $0x18,%esp
  105de9:	5d                   	pop    %ebp
  105dea:	c3                   	ret    
  105deb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00105df0 <vfs_insert_node>:

static int vfs_insert_node(struct res_node* parent, struct res_node* child) {
  105df0:	55                   	push   %ebp
  105df1:	89 e5                	mov    %esp,%ebp
  105df3:	83 ec 0c             	sub    $0xc,%esp
  105df6:	8b 45 0c             	mov    0xc(%ebp),%eax
  105df9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105dfc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105dff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_ptr == 0) {
  105e02:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e05:	81 b8 04 01 00 00 00 	cmpl   $0x0,0x104(%eax)
  105e0c:	00 00 00 
  105e0f:	0f 85 0d 00 00 00    	jne    105e22 <vfs_insert_node+0x32>
        parent->res_type = RES_SUBDIR;
  105e15:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e18:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  105e1f:	00 00 00 
    }

    if(parent->res_type == RES_SUBDIR) {
  105e22:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e25:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  105e2c:	00 00 00 
  105e2f:	0f 85 36 00 00 00    	jne    105e6b <vfs_insert_node+0x7b>
        child->next = parent->res_ptr;
  105e35:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e38:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105e3e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105e41:	89 81 08 01 00 00    	mov    %eax,0x108(%ecx)
        child->parent = parent;
  105e47:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e4a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105e4d:	89 81 0c 01 00 00    	mov    %eax,0x10c(%ecx)
        parent->res_ptr = child;
  105e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105e56:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105e59:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)

        return 0;
  105e5f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105e66:	e9 07 00 00 00       	jmp    105e72 <vfs_insert_node+0x82>
    }

    return 1;
  105e6b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
}
  105e72:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105e75:	83 c4 0c             	add    $0xc,%esp
  105e78:	5d                   	pop    %ebp
  105e79:	c3                   	ret    
  105e7a:	66 90                	xchg   %ax,%ax
  105e7c:	66 90                	xchg   %ax,%ax
  105e7e:	66 90                	xchg   %ax,%ax

00105e80 <vmm_get_current_pagedir>:
	}

	vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  105e80:	55                   	push   %ebp
  105e81:	89 e5                	mov    %esp,%ebp
	return active_pagedir;
  105e83:	a1 64 94 10 00       	mov    0x109464,%eax
  105e88:	5d                   	pop    %ebp
  105e89:	c3                   	ret    
  105e8a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105e90 <vmm_create_pagedir>:
}

uint32_t vmm_create_pagedir() {
  105e90:	55                   	push   %ebp
  105e91:	89 e5                	mov    %esp,%ebp
  105e93:	83 ec 18             	sub    $0x18,%esp
  105e96:	8d 45 fc             	lea    -0x4(%ebp),%eax
	uint32_t phys_pagedir;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  105e99:	89 04 24             	mov    %eax,(%esp)
  105e9c:	e8 1f 00 00 00       	call   105ec0 <vmm_create_vpdraw>
  105ea1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	vmm_free_pdptr(pdptr);
  105ea4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105ea7:	89 04 24             	mov    %eax,(%esp)
  105eaa:	e8 d1 02 00 00       	call   106180 <vmm_free_pdptr>

	return phys_pagedir;
  105eaf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105eb2:	83 c4 18             	add    $0x18,%esp
  105eb5:	5d                   	pop    %ebp
  105eb6:	c3                   	ret    
  105eb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  105ebe:	00 00 

00105ec0 <vmm_create_vpdraw>:
uint32_t* active_pagetables = (uint32_t*) (ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*) (ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  105ec0:	55                   	push   %ebp
  105ec1:	89 e5                	mov    %esp,%ebp
  105ec3:	53                   	push   %ebx
  105ec4:	57                   	push   %edi
  105ec5:	56                   	push   %esi
  105ec6:	83 ec 4c             	sub    $0x4c,%esp
  105ec9:	8b 45 08             	mov    0x8(%ebp),%eax
  105ecc:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  105ecf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t phys_context = 0;
  105ed2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct vmm_context* context = vmm_alloc(&phys_context);
  105ed9:	89 0c 24             	mov    %ecx,(%esp)
  105edc:	e8 6f 04 00 00       	call   106350 <vmm_alloc>
  105ee1:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  105ee4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uint32_t phys_pagedir = 0;
  105ee7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	context->pagedir = vmm_alloc(&phys_pagedir);
  105eee:	89 0c 24             	mov    %ecx,(%esp)
  105ef1:	e8 5a 04 00 00       	call   106350 <vmm_alloc>
  105ef6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  105ef9:	89 01                	mov    %eax,(%ecx)
	if (pagedir != 0)
  105efb:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105f02:	0f 84 08 00 00 00    	je     105f10 <vmm_create_vpdraw+0x50>
		*pagedir = phys_pagedir;
  105f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105f0b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105f0e:	89 01                	mov    %eax,(%ecx)
  105f10:	b8 00 00 00 00       	mov    $0x0,%eax

	uint32_t* pagedir_ptr = vmm_alloc(0);
  105f15:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105f1c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  105f1f:	e8 2c 04 00 00       	call   106350 <vmm_alloc>
  105f24:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  105f27:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  105f2e:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  105f35:	0f 83 25 01 00 00    	jae    106060 <vmm_create_vpdraw+0x1a0>
  105f3b:	8d 45 dc             	lea    -0x24(%ebp),%eax
		pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  105f3e:	89 04 24             	mov    %eax,(%esp)
  105f41:	e8 0a 04 00 00       	call   106350 <vmm_alloc>
  105f46:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105f49:	8b 55 e0             	mov    -0x20(%ebp),%edx
  105f4c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i < PMEM_TABLES) {
  105f4f:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  105f56:	0f 83 4d 00 00 00    	jae    105fa9 <vmm_create_vpdraw+0xe9>
			vmm_free((void*) (pagedir_ptr[i]));
  105f5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105f5f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105f62:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105f65:	89 04 24             	mov    %eax,(%esp)
  105f68:	e8 33 04 00 00       	call   1063a0 <vmm_free>
  105f6d:	b8 00 00 00 00       	mov    $0x0,%eax
			map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  105f72:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105f75:	8b 55 e0             	mov    -0x20(%ebp),%edx
  105f78:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105f7b:	8b 55 d8             	mov    -0x28(%ebp),%edx
  105f7e:	8b 14 95 98 98 18 00 	mov    0x189898(,%edx,4),%edx
  105f85:	89 0c 24             	mov    %ecx,(%esp)
  105f88:	89 54 24 04          	mov    %edx,0x4(%esp)
  105f8c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105f93:	00 
  105f94:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  105f97:	e8 84 04 00 00       	call   106420 <map_address_active>
			paddr = kernel_pagetables[i];
  105f9c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105f9f:	8b 04 85 98 98 18 00 	mov    0x189898(,%eax,4),%eax
  105fa6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  105fa9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105fac:	0d 01 00 00 00       	or     $0x1,%eax
  105fb1:	0d 02 00 00 00       	or     $0x2,%eax
  105fb6:	0d 04 00 00 00       	or     $0x4,%eax
  105fbb:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105fbe:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105fc1:	8b 12                	mov    (%edx),%edx
  105fc3:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
  105fc6:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  105fcd:	0f 82 78 00 00 00    	jb     10604b <vmm_create_vpdraw+0x18b>
			for (i2 = 0; i2 < 1024; i2++) {
  105fd3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  105fda:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  105fe1:	0f 83 5f 00 00 00    	jae    106046 <vmm_create_vpdraw+0x186>
  105fe7:	b8 04 00 00 00       	mov    $0x4,%eax
  105fec:	b9 00 00 00 00       	mov    $0x0,%ecx
  105ff1:	ba 00 02 00 00       	mov    $0x200,%edx
				uint32_t vaddr = (i << 22) + (i2 << 12);
  105ff6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  105ff9:	c1 e6 16             	shl    $0x16,%esi
  105ffc:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  105fff:	c1 e7 0c             	shl    $0xc,%edi
  106002:	01 fe                	add    %edi,%esi
  106004:	89 75 d0             	mov    %esi,-0x30(%ebp)

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  106007:	81 7d d0 00 10 40 01 	cmpl   $0x1401000,-0x30(%ebp)
  10600e:	0f 97 c3             	seta   %bl
  106011:	84 db                	test   %bl,%bl
  106013:	0f 44 d1             	cmove  %ecx,%edx
  106016:	81 7d d0 00 10 40 01 	cmpl   $0x1401000,-0x30(%ebp)
  10601d:	0f 97 c3             	seta   %bl
  106020:	84 db                	test   %bl,%bl
  106022:	0f 44 c1             	cmove  %ecx,%eax
  106025:	09 c2                	or     %eax,%edx
  106027:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10602a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10602d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  106030:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  106033:	89 14 81             	mov    %edx,(%ecx,%eax,4)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
  106036:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  106039:	05 01 00 00 00       	add    $0x1,%eax
  10603e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  106041:	e9 94 ff ff ff       	jmp    105fda <vmm_create_vpdraw+0x11a>

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
						(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
  106046:	e9 00 00 00 00       	jmp    10604b <vmm_create_vpdraw+0x18b>
	}
  10604b:	e9 00 00 00 00       	jmp    106050 <vmm_create_vpdraw+0x190>
		*pagedir = phys_pagedir;

	uint32_t* pagedir_ptr = vmm_alloc(0);
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  106050:	8b 45 d8             	mov    -0x28(%ebp),%eax
  106053:	05 01 00 00 00       	add    $0x1,%eax
  106058:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10605b:	e9 ce fe ff ff       	jmp    105f2e <vmm_create_vpdraw+0x6e>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  106060:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  106067:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  10606e:	0f 83 58 00 00 00    	jae    1060cc <vmm_create_vpdraw+0x20c>
  106074:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
  106079:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10607c:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10607f:	8b 12                	mov    (%edx),%edx
  106081:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106084:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10608a:	89 4d dc             	mov    %ecx,-0x24(%ebp)
		map_address_context(pagedir_ptr,
  10608d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106090:	8b 15 e4 72 10 00    	mov    0x1072e4,%edx
  106096:	8b 75 d8             	mov    -0x28(%ebp),%esi
  106099:	c1 e6 0c             	shl    $0xc,%esi
  10609c:	01 f2                	add    %esi,%edx
  10609e:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1060a1:	89 0c 24             	mov    %ecx,(%esp)
  1060a4:	89 54 24 04          	mov    %edx,0x4(%esp)
  1060a8:	89 74 24 08          	mov    %esi,0x8(%esp)
  1060ac:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1060b3:	00 
  1060b4:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1060b7:	e8 64 05 00 00       	call   106620 <map_address_context>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  1060bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1060bf:	05 01 00 00 00       	add    $0x1,%eax
  1060c4:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1060c7:	e9 9b ff ff ff       	jmp    106067 <vmm_create_vpdraw+0x1a7>
  1060cc:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
  1060d1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1060d4:	8b 15 e8 72 10 00    	mov    0x1072e8,%edx
  1060da:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1060dd:	89 0c 24             	mov    %ecx,(%esp)
  1060e0:	89 54 24 04          	mov    %edx,0x4(%esp)
  1060e4:	89 74 24 08          	mov    %esi,0x8(%esp)
  1060e8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1060ef:	00 
  1060f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
  1060f3:	e8 28 05 00 00       	call   106620 <map_address_context>
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1060f8:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  1060ff:	8d 05 00 a0 18 00    	lea    0x18a000,%eax
  106105:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  106108:	0f 83 39 00 00 00    	jae    106147 <vmm_create_vpdraw+0x287>
  10610e:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(pagedir_ptr, i, i, 0);
  106113:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106116:	8b 55 d8             	mov    -0x28(%ebp),%edx
  106119:	8b 75 d8             	mov    -0x28(%ebp),%esi
  10611c:	89 0c 24             	mov    %ecx,(%esp)
  10611f:	89 54 24 04          	mov    %edx,0x4(%esp)
  106123:	89 74 24 08          	mov    %esi,0x8(%esp)
  106127:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10612e:	00 
  10612f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  106132:	e8 e9 04 00 00       	call   106620 <map_address_context>
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  106137:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10613a:	05 00 10 00 00       	add    $0x1000,%eax
  10613f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  106142:	e9 b8 ff ff ff       	jmp    1060ff <vmm_create_vpdraw+0x23f>
		map_address_context(pagedir_ptr, i, i, 0);
	}

	uint32_t* pd_ptr = context->pagedir;
  106147:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10614a:	8b 00                	mov    (%eax),%eax
  10614c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	context->pagedir = (uint32_t*) phys_pagedir;
  10614f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106152:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  106155:	89 01                	mov    %eax,(%ecx)

	vmm_unmap(pd_ptr);
  106157:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10615a:	89 04 24             	mov    %eax,(%esp)
  10615d:	e8 4e 05 00 00       	call   1066b0 <vmm_unmap>
	vmm_unmap(context);
  106162:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106165:	89 04 24             	mov    %eax,(%esp)
  106168:	e8 43 05 00 00       	call   1066b0 <vmm_unmap>

	return pagedir_ptr;
  10616d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  106170:	83 c4 4c             	add    $0x4c,%esp
  106173:	5e                   	pop    %esi
  106174:	5f                   	pop    %edi
  106175:	5b                   	pop    %ebx
  106176:	5d                   	pop    %ebp
  106177:	c3                   	ret    
  106178:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10617f:	00 

00106180 <vmm_free_pdptr>:
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  106180:	55                   	push   %ebp
  106181:	89 e5                	mov    %esp,%ebp
  106183:	83 ec 18             	sub    $0x18,%esp
  106186:	8b 45 08             	mov    0x8(%ebp),%eax
  106189:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (uint32_t i = 0; i < 1024; i++) {
  10618c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  106193:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  10619a:	0f 83 21 00 00 00    	jae    1061c1 <vmm_free_pdptr+0x41>
		vmm_unmap((void*) pagedir_ptr[i]);
  1061a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1061a3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1061a6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1061a9:	89 04 24             	mov    %eax,(%esp)
  1061ac:	e8 ff 04 00 00       	call   1066b0 <vmm_unmap>

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
	for (uint32_t i = 0; i < 1024; i++) {
  1061b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1061b4:	05 01 00 00 00       	add    $0x1,%eax
  1061b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1061bc:	e9 d2 ff ff ff       	jmp    106193 <vmm_free_pdptr+0x13>
		vmm_unmap((void*) pagedir_ptr[i]);
	}

	vmm_unmap(pagedir_ptr);
  1061c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1061c4:	89 04 24             	mov    %eax,(%esp)
  1061c7:	e8 e4 04 00 00       	call   1066b0 <vmm_unmap>
}
  1061cc:	83 c4 18             	add    $0x18,%esp
  1061cf:	5d                   	pop    %ebp
  1061d0:	c3                   	ret    
  1061d1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1061d8:	0f 1f 84 00 00 00 00 
  1061df:	00 

001061e0 <vmm_free_current_pagetables>:
	vmm_free_pdptr(pdptr);

	return phys_pagedir;
}

void vmm_free_current_pagetables() {
  1061e0:	55                   	push   %ebp
  1061e1:	89 e5                	mov    %esp,%ebp
  1061e3:	56                   	push   %esi
  1061e4:	83 ec 34             	sub    $0x34,%esp
  1061e7:	b8 00 00 00 00       	mov    $0x0,%eax
    uint32_t* ppd = vmm_alloc(0);
  1061ec:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1061f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1061f6:	e8 55 01 00 00       	call   106350 <vmm_alloc>
  1061fb:	b9 00 00 00 00       	mov    $0x0,%ecx
  106200:	89 45 f8             	mov    %eax,-0x8(%ebp)
    uint32_t* ppt = vmm_alloc(0);
  106203:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10620a:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  10620d:	e8 3e 01 00 00       	call   106350 <vmm_alloc>
  106212:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vmm_free(ppd);
  106215:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106218:	89 04 24             	mov    %eax,(%esp)
  10621b:	e8 80 01 00 00       	call   1063a0 <vmm_free>
    vmm_free(ppt);
  106220:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106223:	89 04 24             	mov    %eax,(%esp)
  106226:	e8 75 01 00 00       	call   1063a0 <vmm_free>

    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);
  10622b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10622e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  106231:	e8 3a dc ff ff       	call   103e70 <get_current_task>
  106236:	b9 00 00 00 00       	mov    $0x0,%ecx
  10623b:	8b 40 14             	mov    0x14(%eax),%eax
  10623e:	8b 55 e0             	mov    -0x20(%ebp),%edx
  106241:	89 14 24             	mov    %edx,(%esp)
  106244:	89 44 24 04          	mov    %eax,0x4(%esp)
  106248:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10624f:	00 
  106250:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  106253:	e8 c8 01 00 00       	call   106420 <map_address_active>

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
  106258:	c7 45 f0 80 00 00 00 	movl   $0x80,-0x10(%ebp)
  10625f:	81 7d f0 00 04 00 00 	cmpl   $0x400,-0x10(%ebp)
  106266:	0f 83 ca 00 00 00    	jae    106336 <vmm_free_current_pagetables+0x156>
  10626c:	b8 00 00 00 00       	mov    $0x0,%eax
        map_address_active((uint32_t)ppt, ppd[i] & 0xFFFFF000, 0);
  106271:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106274:	8b 55 f0             	mov    -0x10(%ebp),%edx
  106277:	8b 75 f8             	mov    -0x8(%ebp),%esi
  10627a:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10627d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  106283:	89 0c 24             	mov    %ecx,(%esp)
  106286:	89 54 24 04          	mov    %edx,0x4(%esp)
  10628a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106291:	00 
  106292:	89 45 d8             	mov    %eax,-0x28(%ebp)
  106295:	e8 86 01 00 00       	call   106420 <map_address_active>

        for(uint32_t n = 0; n < 1024; n++) {
  10629a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1062a1:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  1062a8:	0f 83 44 00 00 00    	jae    1062f2 <vmm_free_current_pagetables+0x112>
            if(ppt[n] & PT_PRESENT) {
  1062ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1062b1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1062b4:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1062b7:	25 01 00 00 00       	and    $0x1,%eax
  1062bc:	3d 00 00 00 00       	cmp    $0x0,%eax
  1062c1:	0f 84 16 00 00 00    	je     1062dd <vmm_free_current_pagetables+0xfd>

                //kprintf("[exit] should free %x:%d->%x:%d->%x\n", vmm_resolve(ppd), i, ppd[i], n, ppt[n]);

                pmm_free((void*)(ppt[n] & 0xFFFF000));
  1062c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1062ca:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1062cd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1062d0:	25 00 f0 ff 0f       	and    $0xffff000,%eax
  1062d5:	89 04 24             	mov    %eax,(%esp)
  1062d8:	e8 13 c9 ff ff       	call   102bf0 <pmm_free>
            }
        }
  1062dd:	e9 00 00 00 00       	jmp    1062e2 <vmm_free_current_pagetables+0x102>
    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
        map_address_active((uint32_t)ppt, ppd[i] & 0xFFFFF000, 0);

        for(uint32_t n = 0; n < 1024; n++) {
  1062e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1062e5:	05 01 00 00 00       	add    $0x1,%eax
  1062ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1062ed:	e9 af ff ff ff       	jmp    1062a1 <vmm_free_current_pagetables+0xc1>

                pmm_free((void*)(ppt[n] & 0xFFFF000));
            }
        }

        if(ppd[i] & PD_PRESENT) {
  1062f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1062f5:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1062f8:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1062fb:	25 01 00 00 00       	and    $0x1,%eax
  106300:	3d 00 00 00 00       	cmp    $0x0,%eax
  106305:	0f 84 16 00 00 00    	je     106321 <vmm_free_current_pagetables+0x141>
            pmm_free((void*)(ppd[i] & (~0xFFF)));
  10630b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10630e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106311:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106314:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106319:	89 04 24             	mov    %eax,(%esp)
  10631c:	e8 cf c8 ff ff       	call   102bf0 <pmm_free>
        }
    }
  106321:	e9 00 00 00 00       	jmp    106326 <vmm_free_current_pagetables+0x146>
    vmm_free(ppd);
    vmm_free(ppt);

    map_address_active((uint32_t)ppd, get_current_task()->phys_pdir, 0);

    for(uint32_t i = PMEM_TABLES; i < 1024; i++) {
  106326:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106329:	05 01 00 00 00       	add    $0x1,%eax
  10632e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  106331:	e9 29 ff ff ff       	jmp    10625f <vmm_free_current_pagetables+0x7f>

        if(ppd[i] & PD_PRESENT) {
            pmm_free((void*)(ppd[i] & (~0xFFF)));
        }
    }
    pmm_free((void*)(get_current_task()->phys_pdir));
  106336:	e8 35 db ff ff       	call   103e70 <get_current_task>
  10633b:	8b 40 14             	mov    0x14(%eax),%eax
  10633e:	89 04 24             	mov    %eax,(%esp)
  106341:	e8 aa c8 ff ff       	call   102bf0 <pmm_free>
}
  106346:	83 c4 34             	add    $0x34,%esp
  106349:	5e                   	pop    %esi
  10634a:	5d                   	pop    %ebp
  10634b:	c3                   	ret    
  10634c:	0f 1f 40 00          	nopl   0x0(%eax)

00106350 <vmm_alloc>:

void* vmm_alloc_cont(uint32_t cont) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
}

void* vmm_alloc(uint32_t* retpaddr) {
  106350:	55                   	push   %ebp
  106351:	89 e5                	mov    %esp,%ebp
  106353:	56                   	push   %esi
  106354:	83 ec 24             	sub    $0x24,%esp
  106357:	8b 45 08             	mov    0x8(%ebp),%eax
  10635a:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  10635f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  106364:	be 01 00 00 00       	mov    $0x1,%esi
  106369:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  10636c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10636f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  106376:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  10637d:	20 
  10637e:	89 44 24 08          	mov    %eax,0x8(%esp)
  106382:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  106389:	00 
  10638a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10638d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106390:	89 55 ec             	mov    %edx,-0x14(%ebp)
  106393:	e8 d8 03 00 00       	call   106770 <vmm_alloc_in_range>
  106398:	83 c4 24             	add    $0x24,%esp
  10639b:	5e                   	pop    %esi
  10639c:	5d                   	pop    %ebp
  10639d:	c3                   	ret    
  10639e:	66 90                	xchg   %ax,%ax

001063a0 <vmm_free>:
	                                 (flags & 0xFFF) |
	                                 (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  1063a0:	55                   	push   %ebp
  1063a1:	89 e5                	mov    %esp,%ebp
  1063a3:	83 ec 18             	sub    $0x18,%esp
  1063a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1063a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  1063ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1063af:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  1063b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1063b5:	c1 e8 0c             	shr    $0xc,%eax
  1063b8:	8b 0d e4 72 10 00    	mov    0x1072e4,%ecx
  1063be:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1063c1:	25 01 02 00 00       	and    $0x201,%eax
  1063c6:	3d 01 02 00 00       	cmp    $0x201,%eax
  1063cb:	0f 85 4a 00 00 00    	jne    10641b <vmm_free+0x7b>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));
  1063d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1063d4:	c1 e8 0c             	shr    $0xc,%eax
  1063d7:	8b 0d e4 72 10 00    	mov    0x1072e4,%ecx
  1063dd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1063e0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1063e5:	89 04 24             	mov    %eax,(%esp)
  1063e8:	e8 03 c8 ff ff       	call   102bf0 <pmm_free>

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  1063ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1063f0:	c1 e8 0c             	shr    $0xc,%eax
  1063f3:	8b 0d e4 72 10 00    	mov    0x1072e4,%ecx
  1063f9:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1063fc:	25 04 00 00 00       	and    $0x4,%eax
  106401:	0d 00 02 00 00       	or     $0x200,%eax
  106406:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106409:	c1 e9 0c             	shr    $0xc,%ecx
  10640c:	8b 15 e4 72 10 00    	mov    0x1072e4,%edx
  106412:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  106415:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106418:	0f 01 38             	invlpg (%eax)
	}
}
  10641b:	83 c4 18             	add    $0x18,%esp
  10641e:	5d                   	pop    %ebp
  10641f:	c3                   	ret    

00106420 <map_address_active>:
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  106420:	55                   	push   %ebp
  106421:	89 e5                	mov    %esp,%ebp
  106423:	83 ec 0c             	sub    $0xc,%esp
  106426:	8b 45 10             	mov    0x10(%ebp),%eax
  106429:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10642c:	8b 55 08             	mov    0x8(%ebp),%edx
  10642f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  106432:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  106435:	89 45 f4             	mov    %eax,-0xc(%ebp)
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT | PT_WRITE |
  106438:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10643b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106440:	0d 01 00 00 00       	or     $0x1,%eax
  106445:	0d 02 00 00 00       	or     $0x2,%eax
  10644a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10644d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  106453:	09 c8                	or     %ecx,%eax
  106455:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106458:	c1 e9 0c             	shr    $0xc,%ecx
  10645b:	8b 15 e4 72 10 00    	mov    0x1072e4,%edx
  106461:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106464:	81 e1 04 02 00 00    	and    $0x204,%ecx
  10646a:	09 c8                	or     %ecx,%eax
  10646c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10646f:	c1 e9 0c             	shr    $0xc,%ecx
  106472:	8b 15 e4 72 10 00    	mov    0x1072e4,%edx
  106478:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
	                                 (flags & 0xFFF) |
	                                 (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  10647b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10647e:	0f 01 38             	invlpg (%eax)
}
  106481:	83 c4 0c             	add    $0xc,%esp
  106484:	5d                   	pop    %ebp
  106485:	c3                   	ret    
  106486:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10648d:	00 00 00 

00106490 <vmm_resolve>:
        }
    }
    pmm_free((void*)(get_current_task()->phys_pdir));
}

uint32_t vmm_resolve(void* vaddr) {
  106490:	55                   	push   %ebp
  106491:	89 e5                	mov    %esp,%ebp
  106493:	50                   	push   %eax
  106494:	8b 45 08             	mov    0x8(%ebp),%eax
  106497:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return active_pagetables[(uint32_t) vaddr >> 12] & 0xFFFFF000;
  10649a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10649d:	c1 e8 0c             	shr    $0xc,%eax
  1064a0:	8b 0d e4 72 10 00    	mov    0x1072e4,%ecx
  1064a6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1064a9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1064ae:	83 c4 04             	add    $0x4,%esp
  1064b1:	5d                   	pop    %ebp
  1064b2:	c3                   	ret    
  1064b3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1064ba:	84 00 00 00 00 00 

001064c0 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  1064c0:	55                   	push   %ebp
  1064c1:	89 e5                	mov    %esp,%ebp
  1064c3:	83 ec 38             	sub    $0x38,%esp
  1064c6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1064c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1064cc:	ba 00 00 00 00       	mov    $0x0,%edx
  1064d1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1064d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uint32_t pd_entry = (uint32_t) vaddr >> 22;
  1064d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1064da:	c1 e8 16             	shr    $0x16,%eax
  1064dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = ((uint32_t) vaddr >> 12) % 1024;
  1064e0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1064e3:	c1 e8 0c             	shr    $0xc,%eax
  1064e6:	25 ff 03 00 00       	and    $0x3ff,%eax
  1064eb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32_t* vpd = vmm_alloc(0);
  1064ee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1064f5:	89 55 e0             	mov    %edx,-0x20(%ebp)
  1064f8:	e8 53 fe ff ff       	call   106350 <vmm_alloc>
  1064fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vmm_free(vpd);
  106500:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106503:	89 04 24             	mov    %eax,(%esp)
  106506:	e8 95 fe ff ff       	call   1063a0 <vmm_free>
  10650b:	b8 00 00 00 00       	mov    $0x0,%eax

	map_address_active((uint32_t) vpd, pdir, 0);
  106510:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106513:	8b 55 fc             	mov    -0x4(%ebp),%edx
  106516:	89 0c 24             	mov    %ecx,(%esp)
  106519:	89 54 24 04          	mov    %edx,0x4(%esp)
  10651d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106524:	00 
  106525:	89 45 dc             	mov    %eax,-0x24(%ebp)
  106528:	e8 f3 fe ff ff       	call   106420 <map_address_active>
  10652d:	b8 00 00 00 00       	mov    $0x0,%eax
	uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  106532:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  106535:	8b 55 ec             	mov    -0x14(%ebp),%edx
  106538:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  10653b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  106541:	89 4d e8             	mov    %ecx,-0x18(%ebp)

	map_address_active((uint32_t) vpd, table, 0);
  106544:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106547:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10654a:	89 0c 24             	mov    %ecx,(%esp)
  10654d:	89 54 24 04          	mov    %edx,0x4(%esp)
  106551:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106558:	00 
  106559:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10655c:	e8 bf fe ff ff       	call   106420 <map_address_active>
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  106561:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106564:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106567:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10656a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10656f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	return addr & 0xFFFFF000;
  106572:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106575:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10657a:	83 c4 38             	add    $0x38,%esp
  10657d:	5d                   	pop    %ebp
  10657e:	c3                   	ret    
  10657f:	90                   	nop

00106580 <vmm_map_range>:
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  106580:	55                   	push   %ebp
  106581:	89 e5                	mov    %esp,%ebp
  106583:	56                   	push   %esi
  106584:	83 ec 24             	sub    $0x24,%esp
  106587:	8b 45 14             	mov    0x14(%ebp),%eax
  10658a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10658d:	8b 55 0c             	mov    0xc(%ebp),%edx
  106590:	8b 75 08             	mov    0x8(%ebp),%esi
  106593:	89 75 f8             	mov    %esi,-0x8(%ebp)
  106596:	89 55 f4             	mov    %edx,-0xc(%ebp)
  106599:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10659c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((uint32_t) vaddr & 0xFFF)
  10659f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1065a2:	25 ff 0f 00 00       	and    $0xfff,%eax
  1065a7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1065ac:	0f 84 05 00 00 00    	je     1065b7 <vmm_map_range+0x37>
		return;
  1065b2:	e9 5a 00 00 00       	jmp    106611 <vmm_map_range+0x91>
	if ((uint32_t) paddr & 0xFFF)
  1065b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1065ba:	25 ff 0f 00 00       	and    $0xfff,%eax
  1065bf:	3d 00 00 00 00       	cmp    $0x0,%eax
  1065c4:	0f 84 05 00 00 00    	je     1065cf <vmm_map_range+0x4f>
		return;
  1065ca:	e9 42 00 00 00       	jmp    106611 <vmm_map_range+0x91>

	for (uint32_t i = 0; i < length; i += 0x1000) {
  1065cf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1065d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1065d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  1065dc:	0f 83 2f 00 00 00    	jae    106611 <vmm_map_range+0x91>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
  1065e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1065e5:	03 45 e8             	add    -0x18(%ebp),%eax
  1065e8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1065eb:	03 4d e8             	add    -0x18(%ebp),%ecx
  1065ee:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1065f1:	89 04 24             	mov    %eax,(%esp)
  1065f4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1065f8:	89 54 24 08          	mov    %edx,0x8(%esp)
  1065fc:	e8 1f fe ff ff       	call   106420 <map_address_active>
	if ((uint32_t) vaddr & 0xFFF)
		return;
	if ((uint32_t) paddr & 0xFFF)
		return;

	for (uint32_t i = 0; i < length; i += 0x1000) {
  106601:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106604:	05 00 10 00 00       	add    $0x1000,%eax
  106609:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10660c:	e9 c5 ff ff ff       	jmp    1065d6 <vmm_map_range+0x56>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}
  106611:	83 c4 24             	add    $0x24,%esp
  106614:	5e                   	pop    %esi
  106615:	5d                   	pop    %ebp
  106616:	c3                   	ret    
  106617:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10661e:	00 00 

00106620 <map_address_context>:

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
  106620:	55                   	push   %ebp
  106621:	89 e5                	mov    %esp,%ebp
  106623:	56                   	push   %esi
  106624:	83 ec 18             	sub    $0x18,%esp
  106627:	8b 45 14             	mov    0x14(%ebp),%eax
  10662a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10662d:	8b 55 0c             	mov    0xc(%ebp),%edx
  106630:	8b 75 08             	mov    0x8(%ebp),%esi
  106633:	89 75 f8             	mov    %esi,-0x8(%ebp)
  106636:	89 55 f4             	mov    %edx,-0xc(%ebp)
  106639:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10663c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32_t pd_entry = vaddr >> 22;
  10663f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106642:	c1 e8 16             	shr    $0x16,%eax
  106645:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32_t pt_entry = (vaddr >> 12) % 1024;
  106648:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10664b:	c1 e8 0c             	shr    $0xc,%eax
  10664e:	25 ff 03 00 00       	and    $0x3ff,%eax
  106653:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  106656:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106659:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10665e:	0d 01 00 00 00       	or     $0x1,%eax
  106663:	0d 02 00 00 00       	or     $0x2,%eax
  106668:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10666b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  106671:	09 c8                	or     %ecx,%eax
  106673:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  106676:	8b 55 e8             	mov    -0x18(%ebp),%edx
  106679:	8b 75 f8             	mov    -0x8(%ebp),%esi
  10667c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10667f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  106685:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106688:	81 e1 04 02 00 00    	and    $0x204,%ecx
  10668e:	09 c8                	or     %ecx,%eax
  106690:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  106693:	8b 55 e8             	mov    -0x18(%ebp),%edx
  106696:	8b 75 f8             	mov    -0x8(%ebp),%esi
  106699:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10669c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  1066a2:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}
  1066a5:	83 c4 18             	add    $0x18,%esp
  1066a8:	5e                   	pop    %esi
  1066a9:	5d                   	pop    %ebp
  1066aa:	c3                   	ret    
  1066ab:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001066b0 <vmm_unmap>:
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  1066b0:	55                   	push   %ebp
  1066b1:	89 e5                	mov    %esp,%ebp
  1066b3:	83 ec 08             	sub    $0x8,%esp
  1066b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1066b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  1066bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1066bf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  1066c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1066c5:	c1 e8 0c             	shr    $0xc,%eax
  1066c8:	8b 0d e4 72 10 00    	mov    0x1072e4,%ecx
  1066ce:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1066d1:	25 01 02 00 00       	and    $0x201,%eax
  1066d6:	3d 01 02 00 00       	cmp    $0x201,%eax
  1066db:	0f 85 2e 00 00 00    	jne    10670f <vmm_unmap+0x5f>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  1066e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1066e4:	c1 e8 0c             	shr    $0xc,%eax
  1066e7:	8b 0d e4 72 10 00    	mov    0x1072e4,%ecx
  1066ed:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1066f0:	25 04 00 00 00       	and    $0x4,%eax
  1066f5:	0d 00 02 00 00       	or     $0x200,%eax
  1066fa:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1066fd:	c1 e9 0c             	shr    $0xc,%ecx
  106700:	8b 15 e4 72 10 00    	mov    0x1072e4,%edx
  106706:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  106709:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10670c:	0f 01 38             	invlpg (%eax)
	}
}
  10670f:	83 c4 08             	add    $0x8,%esp
  106712:	5d                   	pop    %ebp
  106713:	c3                   	ret    
  106714:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10671b:	00 00 00 00 00 

00106720 <vmm_alloc_ucont>:
	}

	return vaddr;
}

void* vmm_alloc_ucont(uint32_t cont) {
  106720:	55                   	push   %ebp
  106721:	89 e5                	mov    %esp,%ebp
  106723:	56                   	push   %esi
  106724:	83 ec 24             	sub    $0x24,%esp
  106727:	8b 45 08             	mov    0x8(%ebp),%eax
  10672a:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  10672f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  106734:	be 00 00 00 00       	mov    $0x0,%esi
  106739:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  10673c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10673f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  106746:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  10674d:	ff 
  10674e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106755:	00 
  106756:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10675a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10675d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106760:	89 55 ec             	mov    %edx,-0x14(%ebp)
  106763:	e8 08 00 00 00       	call   106770 <vmm_alloc_in_range>
  106768:	83 c4 24             	add    $0x24,%esp
  10676b:	5e                   	pop    %esi
  10676c:	5d                   	pop    %ebp
  10676d:	c3                   	ret    
  10676e:	66 90                	xchg   %ax,%ax

00106770 <vmm_alloc_in_range>:
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr,
		uint32_t cont) {
  106770:	55                   	push   %ebp
  106771:	89 e5                	mov    %esp,%ebp
  106773:	56                   	push   %esi
  106774:	83 ec 34             	sub    $0x34,%esp
  106777:	8b 45 14             	mov    0x14(%ebp),%eax
  10677a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10677d:	8b 55 0c             	mov    0xc(%ebp),%edx
  106780:	8b 75 08             	mov    0x8(%ebp),%esi
  106783:	89 75 f8             	mov    %esi,-0x8(%ebp)
  106786:	89 55 f4             	mov    %edx,-0xc(%ebp)
  106789:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10678c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* vaddr = 0;
  10678f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32_t i = 0;
  106796:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32_t c = 0;
  10679d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  1067a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1067a7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1067ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1067af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1067b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  1067b5:	0f 83 6f 00 00 00    	jae    10682a <vmm_alloc_in_range+0xba>
		if ((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  1067bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1067be:	c1 e8 0c             	shr    $0xc,%eax
  1067c1:	8b 0d e4 72 10 00    	mov    0x1072e4,%ecx
  1067c7:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1067ca:	25 01 02 00 00       	and    $0x201,%eax
  1067cf:	3d 00 02 00 00       	cmp    $0x200,%eax
  1067d4:	0f 85 34 00 00 00    	jne    10680e <vmm_alloc_in_range+0x9e>
				== PT_ALLOCATABLE) {
			if (c == 0)
  1067da:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  1067e1:	0f 85 06 00 00 00    	jne    1067ed <vmm_alloc_in_range+0x7d>
				vaddr = (void*) i;
  1067e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1067ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
			c++;
  1067ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1067f0:	05 01 00 00 00       	add    $0x1,%eax
  1067f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (c >= cont)
  1067f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1067fb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1067fe:	0f 82 05 00 00 00    	jb     106809 <vmm_alloc_in_range+0x99>
				break;
  106804:	e9 21 00 00 00       	jmp    10682a <vmm_alloc_in_range+0xba>
		} else {
  106809:	e9 07 00 00 00       	jmp    106815 <vmm_alloc_in_range+0xa5>
			c = 0;
  10680e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
	}
  106815:	e9 00 00 00 00       	jmp    10681a <vmm_alloc_in_range+0xaa>
		uint32_t cont) {
	void* vaddr = 0;
	uint32_t i = 0;
	uint32_t c = 0;

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  10681a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10681d:	05 00 10 00 00       	add    $0x1000,%eax
  106822:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  106825:	e9 85 ff ff ff       	jmp    1067af <vmm_alloc_in_range+0x3f>
		} else {
			c = 0;
		}
	}

	uint32_t off = 0;
  10682a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	while (c--) {
  106831:	8b 45 e0             	mov    -0x20(%ebp),%eax
  106834:	89 c1                	mov    %eax,%ecx
  106836:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10683c:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10683f:	3d 00 00 00 00       	cmp    $0x0,%eax
  106844:	0f 84 59 00 00 00    	je     1068a3 <vmm_alloc_in_range+0x133>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
  10684a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10684d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  106850:	c1 e1 0c             	shl    $0xc,%ecx
  106853:	01 c8                	add    %ecx,%eax
  106855:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  10685c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10685f:	0f 85 0b 00 00 00    	jne    106870 <vmm_alloc_in_range+0x100>
  106865:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106868:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10686b:	e9 0d 00 00 00       	jmp    10687d <vmm_alloc_in_range+0x10d>
  106870:	b8 00 00 00 00       	mov    $0x0,%eax
  106875:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  106878:	e9 00 00 00 00       	jmp    10687d <vmm_alloc_in_range+0x10d>
  10687d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  106880:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106883:	89 0c 24             	mov    %ecx,(%esp)
  106886:	89 44 24 04          	mov    %eax,0x4(%esp)
  10688a:	e8 c1 00 00 00       	call   106950 <vmm_alloc_addr>
		off++;
  10688f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  106892:	81 c1 01 00 00 00    	add    $0x1,%ecx
  106898:	89 4d dc             	mov    %ecx,-0x24(%ebp)
	}
  10689b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10689e:	e9 8e ff ff ff       	jmp    106831 <vmm_alloc_in_range+0xc1>

	return vaddr;
  1068a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1068a6:	83 c4 34             	add    $0x34,%esp
  1068a9:	5e                   	pop    %esi
  1068aa:	5d                   	pop    %ebp
  1068ab:	c3                   	ret    
  1068ac:	0f 1f 40 00          	nopl   0x0(%eax)

001068b0 <vmm_alloc_user>:

void* vmm_alloc_ucont(uint32_t cont) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  1068b0:	55                   	push   %ebp
  1068b1:	89 e5                	mov    %esp,%ebp
  1068b3:	56                   	push   %esi
  1068b4:	83 ec 24             	sub    $0x24,%esp
  1068b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1068ba:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  1068bf:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  1068c4:	be 01 00 00 00       	mov    $0x1,%esi
  1068c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  1068cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1068cf:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  1068d6:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  1068dd:	ff 
  1068de:	89 44 24 08          	mov    %eax,0x8(%esp)
  1068e2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1068e9:	00 
  1068ea:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1068ed:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1068f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1068f3:	e8 78 fe ff ff       	call   106770 <vmm_alloc_in_range>
  1068f8:	83 c4 24             	add    $0x24,%esp
  1068fb:	5e                   	pop    %esi
  1068fc:	5d                   	pop    %ebp
  1068fd:	c3                   	ret    
  1068fe:	66 90                	xchg   %ax,%ax

00106900 <vmm_alloc_cont>:
}

void* vmm_alloc_cont(uint32_t cont) {
  106900:	55                   	push   %ebp
  106901:	89 e5                	mov    %esp,%ebp
  106903:	56                   	push   %esi
  106904:	83 ec 24             	sub    $0x24,%esp
  106907:	8b 45 08             	mov    0x8(%ebp),%eax
  10690a:	b9 00 10 40 01       	mov    $0x1401000,%ecx
  10690f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  106914:	be 00 00 00 00       	mov    $0x0,%esi
  106919:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  10691c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10691f:	c7 04 24 00 10 40 01 	movl   $0x1401000,(%esp)
  106926:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  10692d:	20 
  10692e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106935:	00 
  106936:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10693a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10693d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106940:	89 55 ec             	mov    %edx,-0x14(%ebp)
  106943:	e8 28 fe ff ff       	call   106770 <vmm_alloc_in_range>
  106948:	83 c4 24             	add    $0x24,%esp
  10694b:	5e                   	pop    %esi
  10694c:	5d                   	pop    %ebp
  10694d:	c3                   	ret    
  10694e:	66 90                	xchg   %ax,%ax

00106950 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  106950:	55                   	push   %ebp
  106951:	89 e5                	mov    %esp,%ebp
  106953:	56                   	push   %esi
  106954:	83 ec 34             	sub    $0x34,%esp
  106957:	8b 45 0c             	mov    0xc(%ebp),%eax
  10695a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10695d:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  106960:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (reqvaddr == 0) {
  106963:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10696a:	0f 85 34 00 00 00    	jne    1069a4 <vmm_alloc_addr+0x54>
  106970:	8d 05 95 85 10 00    	lea    0x108595,%eax
  106976:	b9 00 00 00 00       	mov    $0x0,%ecx
		kprintf(
  10697b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10697e:	89 04 24             	mov    %eax,(%esp)
  106981:	89 54 24 04          	mov    %edx,0x4(%esp)
  106985:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10698c:	00 
  10698d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  106990:	e8 1b 99 ff ff       	call   1002b0 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
  106995:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10699c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10699f:	e9 9b 00 00 00       	jmp    106a3f <vmm_alloc_addr+0xef>
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  1069a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1069a7:	c1 e8 0c             	shr    $0xc,%eax
  1069aa:	8b 0d e4 72 10 00    	mov    0x1072e4,%ecx
  1069b0:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1069b3:	25 01 02 00 00       	and    $0x201,%eax
  1069b8:	3d 00 02 00 00       	cmp    $0x200,%eax
  1069bd:	0f 84 37 00 00 00    	je     1069fa <vmm_alloc_addr+0xaa>
  1069c3:	8d 05 95 85 10 00    	lea    0x108595,%eax
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
  1069c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1069cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1069cf:	c1 ea 0c             	shr    $0xc,%edx
  1069d2:	8b 35 e4 72 10 00    	mov    0x1072e4,%esi
  1069d8:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1069db:	89 04 24             	mov    %eax,(%esp)
  1069de:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1069e2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1069e6:	e8 c5 98 ff ff       	call   1002b0 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
		return 0;
  1069eb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1069f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1069f5:	e9 45 00 00 00       	jmp    106a3f <vmm_alloc_addr+0xef>
  1069fa:	b8 04 02 00 00       	mov    $0x204,%eax
	}

	uint32_t paddr = (uint32_t) pmm_alloc();
  1069ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
  106a02:	e8 c9 bf ff ff       	call   1029d0 <pmm_alloc>
  106a07:	89 45 ec             	mov    %eax,-0x14(%ebp)
	map_address_active((uint32_t) reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  106a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106a0d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106a10:	89 04 24             	mov    %eax,(%esp)
  106a13:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106a17:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  106a1e:	00 
  106a1f:	e8 fc f9 ff ff       	call   106420 <map_address_active>

	if (retpaddr != 0)
  106a24:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  106a2b:	0f 84 08 00 00 00    	je     106a39 <vmm_alloc_addr+0xe9>
		*retpaddr = paddr;
  106a31:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106a34:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106a37:	89 01                	mov    %eax,(%ecx)

	return reqvaddr;
  106a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106a3c:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  106a3f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106a42:	83 c4 34             	add    $0x34,%esp
  106a45:	5e                   	pop    %esi
  106a46:	5d                   	pop    %ebp
  106a47:	c3                   	ret    
  106a48:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  106a4f:	00 

00106a50 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  106a50:	55                   	push   %ebp
  106a51:	89 e5                	mov    %esp,%ebp
  106a53:	50                   	push   %eax
  106a54:	8b 45 08             	mov    0x8(%ebp),%eax
  106a57:	89 45 fc             	mov    %eax,-0x4(%ebp)
	active_pagedir = pdpaddr;
  106a5a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106a5d:	a3 64 94 10 00       	mov    %eax,0x109464
	asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  106a62:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106a65:	0f 22 d8             	mov    %eax,%cr3
}
  106a68:	83 c4 04             	add    $0x4,%esp
  106a6b:	5d                   	pop    %ebp
  106a6c:	c3                   	ret    
  106a6d:	0f 1f 00             	nopl   (%eax)

00106a70 <vmm_init>:

uint32_t vmm_init(void) {
  106a70:	55                   	push   %ebp
  106a71:	89 e5                	mov    %esp,%ebp
	//CREATE CONTEXT ************************************************************

	struct vmm_context* context = pmm_alloc();
  106a73:	53                   	push   %ebx
  106a74:	57                   	push   %edi
  106a75:	56                   	push   %esi
  106a76:	83 ec 3c             	sub    $0x3c,%esp
  106a79:	e8 52 bf ff ff       	call   1029d0 <pmm_alloc>
  106a7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t i, i2;

	context->pagedir = pmm_alloc();
  106a81:	e8 4a bf ff ff       	call   1029d0 <pmm_alloc>
  106a86:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106a89:	89 01                	mov    %eax,(%ecx)

	for (i = 0; i < 1024; i++) {
  106a8b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  106a92:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  106a99:	0f 83 d6 00 00 00    	jae    106b75 <vmm_init+0x105>
		context->pagedir[i] = ((uint32_t) pmm_alloc());
  106a9f:	e8 2c bf ff ff       	call   1029d0 <pmm_alloc>
  106aa4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106aa7:	8b 55 f0             	mov    -0x10(%ebp),%edx
  106aaa:	8b 12                	mov    (%edx),%edx
  106aac:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
		if (i < PMEM_TABLES) {
  106aaf:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  106ab6:	0f 83 15 00 00 00    	jae    106ad1 <vmm_init+0x61>
			kernel_pagetables[i] = context->pagedir[i];
  106abc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106abf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106ac2:	8b 09                	mov    (%ecx),%ecx
  106ac4:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106ac7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106aca:	89 04 8d 98 98 18 00 	mov    %eax,0x189898(,%ecx,4)
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  106ad1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106ad4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106ad7:	8b 09                	mov    (%ecx),%ecx
  106ad9:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  106adc:	81 ca 07 00 00 00    	or     $0x7,%edx
  106ae2:	89 14 81             	mov    %edx,(%ecx,%eax,4)

		for (i2 = 0; i2 < 1024; i2++) {
  106ae5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  106aec:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  106af3:	0f 83 67 00 00 00    	jae    106b60 <vmm_init+0xf0>
  106af9:	b8 04 00 00 00       	mov    $0x4,%eax
  106afe:	b9 00 00 00 00       	mov    $0x0,%ecx
  106b03:	ba 00 02 00 00       	mov    $0x200,%edx
			uint32_t vaddr = (i << 22) + (i2 << 12);
  106b08:	8b 75 ec             	mov    -0x14(%ebp),%esi
  106b0b:	c1 e6 16             	shl    $0x16,%esi
  106b0e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  106b11:	c1 e7 0c             	shl    $0xc,%edi
  106b14:	01 fe                	add    %edi,%esi
  106b16:	89 75 e4             	mov    %esi,-0x1c(%ebp)

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  106b19:	81 7d e4 00 10 40 01 	cmpl   $0x1401000,-0x1c(%ebp)
  106b20:	0f 97 c3             	seta   %bl
  106b23:	84 db                	test   %bl,%bl
  106b25:	0f 44 d1             	cmove  %ecx,%edx
  106b28:	81 7d e4 00 10 40 01 	cmpl   $0x1401000,-0x1c(%ebp)
  106b2f:	0f 97 c3             	seta   %bl
  106b32:	84 db                	test   %bl,%bl
  106b34:	0f 44 c1             	cmove  %ecx,%eax
  106b37:	09 c2                	or     %eax,%edx
  106b39:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106b3c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106b3f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  106b42:	8b 36                	mov    (%esi),%esi
  106b44:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  106b47:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  106b4d:	89 14 81             	mov    %edx,(%ecx,%eax,4)
			kernel_pagetables[i] = context->pagedir[i];
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
  106b50:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106b53:	05 01 00 00 00       	add    $0x1,%eax
  106b58:	89 45 e8             	mov    %eax,-0x18(%ebp)
  106b5b:	e9 8c ff ff ff       	jmp    106aec <vmm_init+0x7c>

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}
  106b60:	e9 00 00 00 00       	jmp    106b65 <vmm_init+0xf5>
	struct vmm_context* context = pmm_alloc();
	uint32_t i, i2;

	context->pagedir = pmm_alloc();

	for (i = 0; i < 1024; i++) {
  106b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106b68:	05 01 00 00 00       	add    $0x1,%eax
  106b6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106b70:	e9 1d ff ff ff       	jmp    106a92 <vmm_init+0x22>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  106b75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  106b7c:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  106b83:	0f 83 5a 00 00 00    	jae    106be3 <vmm_init+0x173>
  106b89:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  106b8e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106b91:	8b 55 f0             	mov    -0x10(%ebp),%edx
  106b94:	8b 12                	mov    (%edx),%edx
  106b96:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106b99:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  106b9f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
		map_address_context(context->pagedir,
  106ba2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106ba5:	8b 09                	mov    (%ecx),%ecx
  106ba7:	8b 15 e4 72 10 00    	mov    0x1072e4,%edx
  106bad:	8b 75 ec             	mov    -0x14(%ebp),%esi
  106bb0:	c1 e6 0c             	shl    $0xc,%esi
  106bb3:	01 f2                	add    %esi,%edx
  106bb5:	8b 75 e0             	mov    -0x20(%ebp),%esi
  106bb8:	89 0c 24             	mov    %ecx,(%esp)
  106bbb:	89 54 24 04          	mov    %edx,0x4(%esp)
  106bbf:	89 74 24 08          	mov    %esi,0x8(%esp)
  106bc3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  106bca:	00 
  106bcb:	89 45 d8             	mov    %eax,-0x28(%ebp)
  106bce:	e8 4d fa ff ff       	call   106620 <map_address_context>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  106bd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106bd6:	05 01 00 00 00       	add    $0x1,%eax
  106bdb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106bde:	e9 99 ff ff ff       	jmp    106b7c <vmm_init+0x10c>
  106be3:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
  106be8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106beb:	8b 09                	mov    (%ecx),%ecx
  106bed:	8b 15 e8 72 10 00    	mov    0x1072e8,%edx
  106bf3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  106bf6:	89 0c 24             	mov    %ecx,(%esp)
  106bf9:	89 54 24 04          	mov    %edx,0x4(%esp)
  106bfd:	89 74 24 08          	mov    %esi,0x8(%esp)
  106c01:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  106c08:	00 
  106c09:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  106c0c:	e8 0f fa ff ff       	call   106620 <map_address_context>
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  106c11:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  106c18:	8d 05 00 a0 18 00    	lea    0x18a000,%eax
  106c1e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  106c21:	0f 83 3b 00 00 00    	jae    106c62 <vmm_init+0x1f2>
  106c27:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(context->pagedir, i, i, 0);
  106c2c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106c2f:	8b 09                	mov    (%ecx),%ecx
  106c31:	8b 55 ec             	mov    -0x14(%ebp),%edx
  106c34:	8b 75 ec             	mov    -0x14(%ebp),%esi
  106c37:	89 0c 24             	mov    %ecx,(%esp)
  106c3a:	89 54 24 04          	mov    %edx,0x4(%esp)
  106c3e:	89 74 24 08          	mov    %esi,0x8(%esp)
  106c42:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  106c49:	00 
  106c4a:	89 45 d0             	mov    %eax,-0x30(%ebp)
  106c4d:	e8 ce f9 ff ff       	call   106620 <map_address_context>
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  106c52:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106c55:	05 00 10 00 00       	add    $0x1000,%eax
  106c5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106c5d:	e9 b6 ff ff ff       	jmp    106c18 <vmm_init+0x1a8>
		map_address_context(context->pagedir, i, i, 0);
	}

	//END CREATE CONTEXT ********************************************************

	vmm_activate_pagedir((uint32_t) context->pagedir);
  106c62:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106c65:	8b 00                	mov    (%eax),%eax
  106c67:	89 04 24             	mov    %eax,(%esp)
  106c6a:	e8 e1 fd ff ff       	call   106a50 <vmm_activate_pagedir>

	uint32_t cr0;

	asm volatile("mov %%cr0, %0" : "=r" (cr0));
  106c6f:	0f 20 c0             	mov    %cr0,%eax
  106c72:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= (1 << 31);
  106c75:	8b 45 dc             	mov    -0x24(%ebp),%eax
  106c78:	0d 00 00 00 80       	or     $0x80000000,%eax
  106c7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	asm volatile("mov %0, %%cr0" : : "r" (cr0));
  106c80:	8b 45 dc             	mov    -0x24(%ebp),%eax
  106c83:	0f 22 c0             	mov    %eax,%cr0

	return (uint32_t) active_context->pagedir;
  106c86:	a1 e8 72 10 00       	mov    0x1072e8,%eax
  106c8b:	8b 00                	mov    (%eax),%eax
  106c8d:	83 c4 3c             	add    $0x3c,%esp
  106c90:	5e                   	pop    %esi
  106c91:	5f                   	pop    %edi
  106c92:	5b                   	pop    %ebx
  106c93:	5d                   	pop    %ebp
  106c94:	c3                   	ret    
  106c95:	66 90                	xchg   %ax,%ax
  106c97:	90                   	nop

00106c98 <_start>:
  106c98:	bc 68 94 11 00       	mov    $0x119468,%esp
  106c9d:	53                   	push   %ebx
  106c9e:	e8 6d 93 ff ff       	call   100010 <init>

00106ca3 <_stop>:
  106ca3:	fa                   	cli    
  106ca4:	f4                   	hlt    
  106ca5:	eb fc                	jmp    106ca3 <_stop>
