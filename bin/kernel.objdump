
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaKernelDev 1.01"

void init(struct multiboot_info* mb_info) {
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	83 ec 28             	sub    $0x28,%esp
  100016:	8b 45 08             	mov    0x8(%ebp),%eax
  100019:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10001c:	e8 af 04 00 00       	call   1004d0 <clrscr>
	pmm_init(mb_info);
  100021:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100024:	89 04 24             	mov    %eax,(%esp)
  100027:	e8 84 21 00 00       	call   1021b0 <pmm_init>
  10002c:	8d 05 44 60 10 00    	lea    0x106044,%eax
  100032:	8d 0d 67 60 10 00    	lea    0x106067,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100038:	89 04 24             	mov    %eax,(%esp)
  10003b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10003f:	e8 0c 05 00 00       	call   100550 <kprintf>
  100044:	8d 0d 7b 60 10 00    	lea    0x10607b,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10004a:	89 0c 24             	mov    %ecx,(%esp)
  10004d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100050:	e8 fb 04 00 00       	call   100550 <kprintf>
  100055:	8d 0d ba 60 10 00    	lea    0x1060ba,%ecx

	kprintf("Initializing GDT...\n");
  10005b:	89 0c 24             	mov    %ecx,(%esp)
  10005e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100061:	e8 ea 04 00 00       	call   100550 <kprintf>

	init_gdt();
  100066:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100069:	e8 a2 0a 00 00       	call   100b10 <init_gdt>
  10006e:	8d 05 cf 60 10 00    	lea    0x1060cf,%eax

	kprintf("Initializing IDT...\n");
  100074:	89 04 24             	mov    %eax,(%esp)
  100077:	e8 d4 04 00 00       	call   100550 <kprintf>
  10007c:	8d 0d e4 60 10 00    	lea    0x1060e4,%ecx

	init_idt();
  100082:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100085:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100088:	e8 a3 0c 00 00       	call   100d30 <init_idt>

	kprintf("Initializing in-kernel-Drivers...\n");
  10008d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100090:	89 04 24             	mov    %eax,(%esp)
  100093:	e8 b8 04 00 00       	call   100550 <kprintf>

	init_drivers();
  100098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10009b:	e8 30 00 00 00       	call   1000d0 <init_drivers>
  1000a0:	8d 05 07 61 10 00    	lea    0x106107,%eax

	kprintf("Initializing Kernel...\n");
  1000a6:	89 04 24             	mov    %eax,(%esp)
  1000a9:	e8 a2 04 00 00       	call   100550 <kprintf>

	pmm_print_stats();
  1000ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000b1:	e8 0a 1f 00 00       	call   101fc0 <pmm_print_stats>

	kernel_main(mb_info);
  1000b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000b9:	89 04 24             	mov    %eax,(%esp)
  1000bc:	e8 ff 1c 00 00       	call   101dc0 <kernel_main>

	return;
  1000c1:	83 c4 28             	add    $0x28,%esp
  1000c4:	5d                   	pop    %ebp
  1000c5:	c3                   	ret    
  1000c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1000cd:	00 00 00 

001000d0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000d0:	55                   	push   %ebp
  1000d1:	89 e5                	mov    %esp,%ebp
    init_keyboard_drv();
  1000d3:	83 ec 08             	sub    $0x8,%esp
  1000d6:	e8 05 02 00 00       	call   1002e0 <init_keyboard_drv>
}
  1000db:	83 c4 08             	add    $0x8,%esp
  1000de:	5d                   	pop    %ebp
  1000df:	c3                   	ret    

001000e0 <translate_scancode>:

static uint8_t buffer[4096];
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
  1000e3:	83 ec 28             	sub    $0x28,%esp
  1000e6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000ea:	66 89 c1             	mov    %ax,%cx
  1000ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1000f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1000f3:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  1000f7:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  1000fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000fe:	89 c2                	mov    %eax,%edx
  100100:	83 ea 02             	sub    $0x2,%edx
  100103:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100106:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100109:	0f 84 4f 00 00 00    	je     10015e <translate_scancode+0x7e>
  10010f:	e9 00 00 00 00       	jmp    100114 <translate_scancode+0x34>
  100114:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100117:	83 e8 01             	sub    $0x1,%eax
  10011a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10011d:	0f 84 28 00 00 00    	je     10014b <translate_scancode+0x6b>
  100123:	e9 00 00 00 00       	jmp    100128 <translate_scancode+0x48>
  100128:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10012b:	85 c0                	test   %eax,%eax
  10012d:	0f 85 54 00 00 00    	jne    100187 <translate_scancode+0xa7>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100138:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10013c:	8a 0c 05 00 50 10 00 	mov    0x105000(,%eax,1),%cl
  100143:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100146:	e9 3c 00 00 00       	jmp    100187 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10014b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014f:	8a 0c 05 80 50 10 00 	mov    0x105080(,%eax,1),%cl
  100156:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100159:	e9 29 00 00 00       	jmp    100187 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10015e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100162:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100167:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10016a:	0f 85 0e 00 00 00    	jne    10017e <translate_scancode+0x9e>
  100170:	e9 00 00 00 00       	jmp    100175 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100175:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100179:	e9 04 00 00 00       	jmp    100182 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10017e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100182:	e9 00 00 00 00       	jmp    100187 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100187:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10018b:	3d 00 00 00 00       	cmp    $0x0,%eax
  100190:	0f 85 20 00 00 00    	jne    1001b6 <translate_scancode+0xd6>
  100196:	8d 05 1f 61 10 00    	lea    0x10611f,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  10019c:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001a0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001a3:	89 04 24             	mov    %eax,(%esp)
  1001a6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001aa:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001ae:	e8 9d 03 00 00       	call   100550 <kprintf>
  1001b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001b6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ba:	83 c4 28             	add    $0x28,%esp
  1001bd:	5d                   	pop    %ebp
  1001be:	c3                   	ret    
  1001bf:	90                   	nop

001001c0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001c0:	55                   	push   %ebp
  1001c1:	89 e5                	mov    %esp,%ebp
  return;
  1001c3:	5d                   	pop    %ebp
  1001c4:	c3                   	ret    
  1001c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1001cc:	00 00 00 00 

001001d0 <getc>:
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}

char getc() {
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  1001d3:	83 ec 08             	sub    $0x8,%esp
  1001d6:	a0 0a 70 10 00       	mov    0x10700a,%al
  1001db:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1001de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001e8:	3b 05 0c 80 10 00    	cmp    0x10800c,%eax
  1001ee:	0f 8d 24 00 00 00    	jge    100218 <getc+0x48>
		buffer[i] = buffer[i+1];	
  1001f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001f7:	8a 0c 05 0b 70 10 00 	mov    0x10700b(,%eax,1),%cl
  1001fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100201:	88 0c 05 0a 70 10 00 	mov    %cl,0x10700a(,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100208:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10020b:	05 01 00 00 00       	add    $0x1,%eax
  100210:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100213:	e9 cd ff ff ff       	jmp    1001e5 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100218:	a1 0c 80 10 00       	mov    0x10800c,%eax
  10021d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100222:	a3 0c 80 10 00       	mov    %eax,0x10800c

	return ret;
  100227:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10022b:	83 c4 08             	add    $0x8,%esp
  10022e:	5d                   	pop    %ebp
  10022f:	c3                   	ret    

00100230 <send_command>:
}

void send_command(uint8_t command) {
  100230:	55                   	push   %ebp
  100231:	89 e5                	mov    %esp,%ebp
  100233:	83 ec 18             	sub    $0x18,%esp
  100236:	8a 45 08             	mov    0x8(%ebp),%al
  100239:	88 45 ff             	mov    %al,-0x1(%ebp)
  10023c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100241:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100248:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10024b:	e8 40 00 00 00       	call   100290 <inb>
  100250:	0f b6 c8             	movzbl %al,%ecx
  100253:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100259:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10025f:	0f 84 05 00 00 00    	je     10026a <send_command+0x3a>
  100265:	e9 d2 ff ff ff       	jmp    10023c <send_command+0xc>
  10026a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10026f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100276:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10027a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10027e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100281:	e8 2a 00 00 00       	call   1002b0 <outb>
}
  100286:	83 c4 18             	add    $0x18,%esp
  100289:	5d                   	pop    %ebp
  10028a:	c3                   	ret    
  10028b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100290 <inb>:
    uint16_t result;
    asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline uint8_t inb(uint16_t _port) {
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	50                   	push   %eax
  100294:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100298:	66 89 c1             	mov    %ax,%cx
  10029b:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
    uint8_t result;
    asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  10029f:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002a3:	ec                   	in     (%dx),%al
  1002a4:	88 45 fd             	mov    %al,-0x3(%ebp)
    return result;
  1002a7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  1002ab:	83 c4 04             	add    $0x4,%esp
  1002ae:	5d                   	pop    %ebp
  1002af:	c3                   	ret    

001002b0 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  1002b0:	55                   	push   %ebp
  1002b1:	89 e5                	mov    %esp,%ebp
  1002b3:	50                   	push   %eax
  1002b4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002b8:	66 89 c1             	mov    %ax,%cx
  1002bb:	8a 55 0c             	mov    0xc(%ebp),%dl
  1002be:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  1002c2:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1002c5:	8a 45 fd             	mov    -0x3(%ebp),%al
  1002c8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002cc:	ee                   	out    %al,(%dx)
}
  1002cd:	83 c4 04             	add    $0x4,%esp
  1002d0:	5d                   	pop    %ebp
  1002d1:	c3                   	ret    
  1002d2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1002d9:	1f 84 00 00 00 00 00 

001002e0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1002e0:	55                   	push   %ebp
  1002e1:	89 e5                	mov    %esp,%ebp
  1002e3:	83 ec 28             	sub    $0x28,%esp
  1002e6:	b8 21 00 00 00       	mov    $0x21,%eax
  1002eb:	8d 0d c0 01 10 00    	lea    0x1001c0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  1002f1:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1002f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1002fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1002ff:	e8 5c 16 00 00       	call   101960 <register_intr_handler>
  100304:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100309:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100310:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100313:	e8 78 ff ff ff       	call   100290 <inb>
  100318:	0f b6 c8             	movzbl %al,%ecx
  10031b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100321:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100327:	0f 84 1c 00 00 00    	je     100349 <init_keyboard_drv+0x69>
  10032d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100332:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100339:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10033c:	e8 4f ff ff ff       	call   100290 <inb>
	}
  100341:	88 45 f3             	mov    %al,-0xd(%ebp)
  100344:	e9 bb ff ff ff       	jmp    100304 <init_keyboard_drv+0x24>
  100349:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10034e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100355:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100358:	e8 d3 fe ff ff       	call   100230 <send_command>

	init_done = 1;
  10035d:	c7 05 10 80 10 00 01 	movl   $0x1,0x108010
  100364:	00 00 00 
}
  100367:	83 c4 28             	add    $0x28,%esp
  10036a:	5d                   	pop    %ebp
  10036b:	c3                   	ret    
  10036c:	66 90                	xchg   %ax,%ax
  10036e:	66 90                	xchg   %ax,%ax

00100370 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu, char* fstr) {
  100370:	55                   	push   %ebp
  100371:	89 e5                	mov    %esp,%ebp
  100373:	56                   	push   %esi
  100374:	83 ec 24             	sub    $0x24,%esp
  100377:	8b 45 0c             	mov    0xc(%ebp),%eax
  10037a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10037d:	ba 04 00 00 00       	mov    $0x4,%edx
  100382:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100385:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kprintf ("          '''  \\   `-._.'`---^_))) \n");
    kprintf ("                `-._ )))       ``` \n");
    kprintf ("                     ```            \n");
#endif

    setclr(0x04);
  100388:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10038f:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100392:	e8 99 01 00 00       	call   100530 <setclr>
    kprintf(fstr);
  100397:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10039a:	89 04 24             	mov    %eax,(%esp)
  10039d:	e8 ae 01 00 00       	call   100550 <kprintf>
  1003a2:	8d 0d 45 61 10 00    	lea    0x106145,%ecx
    kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  1003a8:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1003ab:	8b 52 1c             	mov    0x1c(%edx),%edx
  1003ae:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1003b1:	8b 76 20             	mov    0x20(%esi),%esi
  1003b4:	89 0c 24             	mov    %ecx,(%esp)
  1003b7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1003bb:	89 74 24 08          	mov    %esi,0x8(%esp)
  1003bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1003c2:	e8 89 01 00 00       	call   100550 <kprintf>
    show_dump(cpu);
  1003c7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1003ca:	89 0c 24             	mov    %ecx,(%esp)
  1003cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1003d0:	e8 0b 00 00 00       	call   1003e0 <show_dump>

    while (1) {
        asm volatile("cli; hlt");
  1003d5:	fa                   	cli    
  1003d6:	f4                   	hlt    
    }
  1003d7:	e9 f9 ff ff ff       	jmp    1003d5 <show_cod+0x65>
  1003dc:	0f 1f 40 00          	nopl   0x0(%eax)

001003e0 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  1003e0:	55                   	push   %ebp
  1003e1:	89 e5                	mov    %esp,%ebp
  1003e3:	53                   	push   %ebx
  1003e4:	57                   	push   %edi
  1003e5:	56                   	push   %esi
  1003e6:	83 ec 2c             	sub    $0x2c,%esp
  1003e9:	8b 45 08             	mov    0x8(%ebp),%eax
  1003ec:	8d 0d 6a 61 10 00    	lea    0x10616a,%ecx
  1003f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx,
  1003f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1003f8:	8b 00                	mov    (%eax),%eax
  1003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1003fd:	8b 52 04             	mov    0x4(%edx),%edx
  100400:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100403:	8b 76 08             	mov    0x8(%esi),%esi
  100406:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100409:	8b 7f 0c             	mov    0xc(%edi),%edi
  10040c:	89 0c 24             	mov    %ecx,(%esp)
  10040f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100413:	89 54 24 08          	mov    %edx,0x8(%esp)
  100417:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10041b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10041f:	e8 2c 01 00 00       	call   100550 <kprintf>
  100424:	8d 0d 8b 61 10 00    	lea    0x10618b,%ecx
            cpu->edx);
    kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp,
  10042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10042d:	8b 52 10             	mov    0x10(%edx),%edx
  100430:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100433:	8b 76 14             	mov    0x14(%esi),%esi
  100436:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100439:	8b 7f 18             	mov    0x18(%edi),%edi
  10043c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10043f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  100442:	89 0c 24             	mov    %ecx,(%esp)
  100445:	89 54 24 04          	mov    %edx,0x4(%esp)
  100449:	89 74 24 08          	mov    %esi,0x8(%esp)
  10044d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  100451:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  100455:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100458:	e8 f3 00 00 00       	call   100550 <kprintf>
  10045d:	8d 0d ac 61 10 00    	lea    0x1061ac,%ecx
            cpu->eip);
    kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags,
  100463:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100466:	8b 52 28             	mov    0x28(%edx),%edx
  100469:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10046c:	8b 76 2c             	mov    0x2c(%esi),%esi
  10046f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100472:	8b 7f 30             	mov    0x30(%edi),%edi
  100475:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  100478:	8b 5b 34             	mov    0x34(%ebx),%ebx
  10047b:	89 0c 24             	mov    %ecx,(%esp)
  10047e:	89 54 24 04          	mov    %edx,0x4(%esp)
  100482:	89 74 24 08          	mov    %esi,0x8(%esp)
  100486:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10048a:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  10048e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100491:	e8 ba 00 00 00       	call   100550 <kprintf>
  100496:	8d 0d ce 61 10 00    	lea    0x1061ce,%ecx
            cpu->esp, cpu->ss);

    uint32_t cr2 = 0;
  10049c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    asm volatile("mov %%cr2, %0" : "=r" (cr2));
  1004a3:	0f 20 d2             	mov    %cr2,%edx
  1004a6:	89 55 ec             	mov    %edx,-0x14(%ebp)

    kprintf("CR2: %x \n", cr2);
  1004a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1004ac:	89 0c 24             	mov    %ecx,(%esp)
  1004af:	89 54 24 04          	mov    %edx,0x4(%esp)
  1004b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1004b6:	e8 95 00 00 00       	call   100550 <kprintf>
}
  1004bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1004be:	83 c4 2c             	add    $0x2c,%esp
  1004c1:	5e                   	pop    %esi
  1004c2:	5f                   	pop    %edi
  1004c3:	5b                   	pop    %ebx
  1004c4:	5d                   	pop    %ebp
  1004c5:	c3                   	ret    
  1004c6:	66 90                	xchg   %ax,%ax
  1004c8:	66 90                	xchg   %ax,%ax
  1004ca:	66 90                	xchg   %ax,%ax
  1004cc:	66 90                	xchg   %ax,%ax
  1004ce:	66 90                	xchg   %ax,%ax

001004d0 <clrscr>:
        x /= base;
    } while (x);
    kputs(p);
}

void clrscr(void) {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1004d3:	50                   	push   %eax
  1004d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1004db:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  1004e2:	0f 8d 1d 00 00 00    	jge    100505 <clrscr+0x35>
        video[i] = 0;
  1004e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004eb:	8b 0d 00 51 10 00    	mov    0x105100,%ecx
  1004f1:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1004f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004f8:	05 01 00 00 00       	add    $0x1,%eax
  1004fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100500:	e9 d6 ff ff ff       	jmp    1004db <clrscr+0xb>
        video[i] = 0;
    }

    color = 0x07;
  100505:	c6 05 04 51 10 00 07 	movb   $0x7,0x105104

    x = y = 0;
  10050c:	c7 05 14 80 10 00 00 	movl   $0x0,0x108014
  100513:	00 00 00 
  100516:	c7 05 18 80 10 00 00 	movl   $0x0,0x108018
  10051d:	00 00 00 
}
  100520:	83 c4 04             	add    $0x4,%esp
  100523:	5d                   	pop    %ebp
  100524:	c3                   	ret    
  100525:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10052c:	00 00 00 00 

00100530 <setclr>:

void setclr(char clr) {
  100530:	55                   	push   %ebp
  100531:	89 e5                	mov    %esp,%ebp
  100533:	50                   	push   %eax
  100534:	8a 45 08             	mov    0x8(%ebp),%al
  100537:	88 45 ff             	mov    %al,-0x1(%ebp)
    color = clr;
  10053a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10053d:	a2 04 51 10 00       	mov    %al,0x105104
}
  100542:	83 c4 04             	add    $0x4,%esp
  100545:	5d                   	pop    %ebp
  100546:	c3                   	ret    
  100547:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10054e:	00 00 

00100550 <kprintf>:

int kprintf(const char* fmt, ...) {
  100550:	55                   	push   %ebp
  100551:	89 e5                	mov    %esp,%ebp
  100553:	83 ec 58             	sub    $0x58,%esp
  100556:	8b 45 08             	mov    0x8(%ebp),%eax
  100559:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  10055c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10055f:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  100562:	89 01                	mov    %eax,(%ecx)
    kprintf_res = 0;
  100564:	c7 05 1c 80 10 00 00 	movl   $0x0,0x10801c
  10056b:	00 00 00 
    while (*fmt) {
  10056e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100571:	80 38 00             	cmpb   $0x0,(%eax)
  100574:	0f 84 dd 01 00 00    	je     100757 <kprintf+0x207>
        if (*fmt == '%') {
  10057a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10057d:	0f be 00             	movsbl (%eax),%eax
  100580:	3d 25 00 00 00       	cmp    $0x25,%eax
  100585:	0f 85 ae 01 00 00    	jne    100739 <kprintf+0x1e9>
            fmt++;
  10058b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10058e:	89 c1                	mov    %eax,%ecx
  100590:	41                   	inc    %ecx
  100591:	89 4d fc             	mov    %ecx,-0x4(%ebp)
            switch (*fmt) {
  100594:	0f be 40 01          	movsbl 0x1(%eax),%eax
  100598:	89 c1                	mov    %eax,%ecx
  10059a:	83 e9 24             	sub    $0x24,%ecx
  10059d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1005a0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1005a3:	0f 8f 15 00 00 00    	jg     1005be <kprintf+0x6e>
  1005a9:	e9 00 00 00 00       	jmp    1005ae <kprintf+0x5e>
  1005ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005b1:	85 c0                	test   %eax,%eax
  1005b3:	0f 84 54 01 00 00    	je     10070d <kprintf+0x1bd>
  1005b9:	e9 54 01 00 00       	jmp    100712 <kprintf+0x1c2>
  1005be:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005c1:	83 e8 62             	sub    $0x62,%eax
  1005c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1005c7:	0f 8f 19 00 00 00    	jg     1005e6 <kprintf+0x96>
  1005cd:	e9 00 00 00 00       	jmp    1005d2 <kprintf+0x82>
  1005d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005d5:	83 e8 25             	sub    $0x25,%eax
  1005d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1005db:	0f 84 13 01 00 00    	je     1006f4 <kprintf+0x1a4>
  1005e1:	e9 2c 01 00 00       	jmp    100712 <kprintf+0x1c2>
  1005e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005e9:	83 e8 6f             	sub    $0x6f,%eax
  1005ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1005ef:	0f 8f 2d 00 00 00    	jg     100622 <kprintf+0xd2>
  1005f5:	e9 00 00 00 00       	jmp    1005fa <kprintf+0xaa>
  1005fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005fd:	83 e8 63             	sub    $0x63,%eax
  100600:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100603:	0f 84 c5 00 00 00    	je     1006ce <kprintf+0x17e>
  100609:	e9 00 00 00 00       	jmp    10060e <kprintf+0xbe>
  10060e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100611:	83 e8 64             	sub    $0x64,%eax
  100614:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100617:	0f 84 4b 00 00 00    	je     100668 <kprintf+0x118>
  10061d:	e9 f0 00 00 00       	jmp    100712 <kprintf+0x1c2>
  100622:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100625:	83 c0 90             	add    $0xffffff90,%eax
  100628:	89 c1                	mov    %eax,%ecx
  10062a:	83 e9 08             	sub    $0x8,%ecx
  10062d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100630:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100633:	0f 87 d9 00 00 00    	ja     100712 <kprintf+0x1c2>
  100639:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10063c:	8b 0c 85 00 60 10 00 	mov    0x106000(,%eax,4),%ecx
  100643:	ff e1                	jmp    *%ecx
            case 's':
                s = va_arg(ap, char*);
  100645:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100648:	89 c1                	mov    %eax,%ecx
  10064a:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100650:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100653:	8b 00                	mov    (%eax),%eax
  100655:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  100658:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10065b:	89 04 24             	mov    %eax,(%esp)
  10065e:	e8 0d 01 00 00       	call   100770 <kputs>
                break;
  100663:	e9 cc 00 00 00       	jmp    100734 <kprintf+0x1e4>
  100668:	b8 0a 00 00 00       	mov    $0xa,%eax
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  10066d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100670:	89 ca                	mov    %ecx,%edx
  100672:	81 c2 04 00 00 00    	add    $0x4,%edx
  100678:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10067b:	8b 09                	mov    (%ecx),%ecx
  10067d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 10);
  100680:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100683:	89 0c 24             	mov    %ecx,(%esp)
  100686:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10068d:	00 
  10068e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100691:	e8 1a 01 00 00       	call   1007b0 <kputn>
                break;
  100696:	e9 99 00 00 00       	jmp    100734 <kprintf+0x1e4>
  10069b:	b8 10 00 00 00       	mov    $0x10,%eax
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  1006a0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1006a3:	89 ca                	mov    %ecx,%edx
  1006a5:	81 c2 04 00 00 00    	add    $0x4,%edx
  1006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1006ae:	8b 09                	mov    (%ecx),%ecx
  1006b0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 16);
  1006b3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1006b6:	89 0c 24             	mov    %ecx,(%esp)
  1006b9:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1006c0:	00 
  1006c1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1006c4:	e8 e7 00 00 00       	call   1007b0 <kputn>
                break;
  1006c9:	e9 66 00 00 00       	jmp    100734 <kprintf+0x1e4>
            case 'c':
                c = va_arg(ap, int);
  1006ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1006d1:	89 c1                	mov    %eax,%ecx
  1006d3:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1006d9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1006dc:	8b 00                	mov    (%eax),%eax
  1006de:	88 c2                	mov    %al,%dl
  1006e0:	88 55 ef             	mov    %dl,-0x11(%ebp)
                kputc(c);
  1006e3:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  1006e7:	89 04 24             	mov    %eax,(%esp)
  1006ea:	e8 61 01 00 00       	call   100850 <kputc>
                break;
  1006ef:	e9 40 00 00 00       	jmp    100734 <kprintf+0x1e4>
  1006f4:	b8 25 00 00 00       	mov    $0x25,%eax
            case '%':
                kputc('%');
  1006f9:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100700:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100703:	e8 48 01 00 00       	call   100850 <kputc>
                break;
  100708:	e9 27 00 00 00       	jmp    100734 <kprintf+0x1e4>
            case '\0':
                goto out;
  10070d:	e9 4a 00 00 00       	jmp    10075c <kprintf+0x20c>
  100712:	b8 25 00 00 00       	mov    $0x25,%eax
            default:
                kputc('%');
  100717:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10071e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100721:	e8 2a 01 00 00       	call   100850 <kputc>
                kputc(*fmt);
  100726:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100729:	0f be 00             	movsbl (%eax),%eax
  10072c:	89 04 24             	mov    %eax,(%esp)
  10072f:	e8 1c 01 00 00       	call   100850 <kputc>
                break;
            }
        } else {
  100734:	e9 0e 00 00 00       	jmp    100747 <kprintf+0x1f7>
            kputc(*fmt);
  100739:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10073c:	0f be 00             	movsbl (%eax),%eax
  10073f:	89 04 24             	mov    %eax,(%esp)
  100742:	e8 09 01 00 00       	call   100850 <kputc>
        }

        fmt++;
  100747:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10074a:	05 01 00 00 00       	add    $0x1,%eax
  10074f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  100752:	e9 17 fe ff ff       	jmp    10056e <kprintf+0x1e>
  100757:	e9 00 00 00 00       	jmp    10075c <kprintf+0x20c>

    out:
    va_end(ap);

    return kprintf_res;
  10075c:	a1 1c 80 10 00       	mov    0x10801c,%eax
  100761:	83 c4 58             	add    $0x58,%esp
  100764:	5d                   	pop    %ebp
  100765:	c3                   	ret    
  100766:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10076d:	00 00 00 

00100770 <kputs>:

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  100770:	55                   	push   %ebp
  100771:	89 e5                	mov    %esp,%ebp
  100773:	83 ec 08             	sub    $0x8,%esp
  100776:	8b 45 08             	mov    0x8(%ebp),%eax
  100779:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  10077c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10077f:	80 38 00             	cmpb   $0x0,(%eax)
  100782:	0f 84 1e 00 00 00    	je     1007a6 <kputs+0x36>
        kputc(*s++);
  100788:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10078b:	89 c1                	mov    %eax,%ecx
  10078d:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100793:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100796:	0f be 00             	movsbl (%eax),%eax
  100799:	89 04 24             	mov    %eax,(%esp)
  10079c:	e8 af 00 00 00       	call   100850 <kputc>
    }
  1007a1:	e9 d6 ff ff ff       	jmp    10077c <kputs+0xc>
}
  1007a6:	83 c4 08             	add    $0x8,%esp
  1007a9:	5d                   	pop    %ebp
  1007aa:	c3                   	ret    
  1007ab:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001007b0 <kputn>:

static void kputn(unsigned long x, int base) {
  1007b0:	55                   	push   %ebp
  1007b1:	89 e5                	mov    %esp,%ebp
  1007b3:	56                   	push   %esi
  1007b4:	83 ec 64             	sub    $0x64,%esp
  1007b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1007ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1007bd:	8d 15 d8 61 10 00    	lea    0x1061d8,%edx
  1007c3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1007c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1007c9:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  1007cc:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  1007d3:	0f 8e 05 00 00 00    	jle    1007de <kputn+0x2e>
        return;
  1007d9:	e9 5d 00 00 00       	jmp    10083b <kputn+0x8b>
  1007de:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  1007e1:	05 40 00 00 00       	add    $0x40,%eax
  1007e6:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  1007e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1007ec:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  1007ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1007f2:	31 d2                	xor    %edx,%edx
  1007f4:	f7 75 f4             	divl   -0xc(%ebp)
  1007f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
  1007fa:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  1007fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100800:	89 c2                	mov    %eax,%edx
  100802:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  100808:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10080b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10080e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100811:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100814:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  100817:	89 d0                	mov    %edx,%eax
  100819:	31 d2                	xor    %edx,%edx
  10081b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10081e:	f7 f6                	div    %esi
  100820:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  100823:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10082a:	0f 85 bf ff ff ff    	jne    1007ef <kputn+0x3f>
    kputs(p);
  100830:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100833:	89 04 24             	mov    %eax,(%esp)
  100836:	e8 35 ff ff ff       	call   100770 <kputs>
}
  10083b:	83 c4 64             	add    $0x64,%esp
  10083e:	5e                   	pop    %esi
  10083f:	5d                   	pop    %ebp
  100840:	c3                   	ret    
  100841:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100848:	0f 1f 84 00 00 00 00 
  10084f:	00 

00100850 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  100850:	55                   	push   %ebp
  100851:	89 e5                	mov    %esp,%ebp
  100853:	83 ec 08             	sub    $0x8,%esp
  100856:	8a 45 08             	mov    0x8(%ebp),%al
  100859:	88 45 ff             	mov    %al,-0x1(%ebp)
    if ((c == '\n') || (x > 79)) {
  10085c:	0f be 4d ff          	movsbl -0x1(%ebp),%ecx
  100860:	81 f9 0a 00 00 00    	cmp    $0xa,%ecx
  100866:	0f 84 10 00 00 00    	je     10087c <kputc+0x2c>
  10086c:	81 3d 18 80 10 00 4f 	cmpl   $0x4f,0x108018
  100873:	00 00 00 
  100876:	0f 8e 19 00 00 00    	jle    100895 <kputc+0x45>
        x = 0;
  10087c:	c7 05 18 80 10 00 00 	movl   $0x0,0x108018
  100883:	00 00 00 
        y++;
  100886:	a1 14 80 10 00       	mov    0x108014,%eax
  10088b:	05 01 00 00 00       	add    $0x1,%eax
  100890:	a3 14 80 10 00       	mov    %eax,0x108014
    }

    if (c == '\n') {
  100895:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  100899:	3d 0a 00 00 00       	cmp    $0xa,%eax
  10089e:	0f 85 05 00 00 00    	jne    1008a9 <kputc+0x59>
        return;
  1008a4:	e9 f3 00 00 00       	jmp    10099c <kputc+0x14c>
    }

    if (y > 24) {
  1008a9:	81 3d 14 80 10 00 18 	cmpl   $0x18,0x108014
  1008b0:	00 00 00 
  1008b3:	0f 8e 7e 00 00 00    	jle    100937 <kputc+0xe7>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1008b9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1008c0:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  1008c7:	0f 8d 2c 00 00 00    	jge    1008f9 <kputc+0xa9>
            video[i] = video[i + 160];
  1008cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1008d0:	8b 0d 00 51 10 00    	mov    0x105100,%ecx
  1008d6:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  1008dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1008e0:	8b 0d 00 51 10 00    	mov    0x105100,%ecx
  1008e6:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1008e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1008ec:	05 01 00 00 00       	add    $0x1,%eax
  1008f1:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1008f4:	e9 c7 ff ff ff       	jmp    1008c0 <kputc+0x70>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  1008f9:	e9 00 00 00 00       	jmp    1008fe <kputc+0xae>
  1008fe:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  100905:	0f 8d 1d 00 00 00    	jge    100928 <kputc+0xd8>
            video[i] = 0;
  10090b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10090e:	8b 0d 00 51 10 00    	mov    0x105100,%ecx
  100914:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100918:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10091b:	05 01 00 00 00       	add    $0x1,%eax
  100920:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100923:	e9 d6 ff ff ff       	jmp    1008fe <kputc+0xae>
            video[i] = 0;
        }
        y--;
  100928:	a1 14 80 10 00       	mov    0x108014,%eax
  10092d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100932:	a3 14 80 10 00       	mov    %eax,0x108014
    }

    video[2 * (y * 80 + x)] = c;
  100937:	8a 45 ff             	mov    -0x1(%ebp),%al
  10093a:	69 0d 14 80 10 00 50 	imul   $0x50,0x108014,%ecx
  100941:	00 00 00 
  100944:	03 0d 18 80 10 00    	add    0x108018,%ecx
  10094a:	c1 e1 01             	shl    $0x1,%ecx
  10094d:	8b 15 00 51 10 00    	mov    0x105100,%edx
  100953:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  100956:	a0 04 51 10 00       	mov    0x105104,%al
  10095b:	69 0d 14 80 10 00 50 	imul   $0x50,0x108014,%ecx
  100962:	00 00 00 
  100965:	03 0d 18 80 10 00    	add    0x108018,%ecx
  10096b:	c1 e1 01             	shl    $0x1,%ecx
  10096e:	8b 15 00 51 10 00    	mov    0x105100,%edx
  100974:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  100978:	8b 0d 18 80 10 00    	mov    0x108018,%ecx
  10097e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100984:	89 0d 18 80 10 00    	mov    %ecx,0x108018
    kprintf_res++;
  10098a:	8b 0d 1c 80 10 00    	mov    0x10801c,%ecx
  100990:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100996:	89 0d 1c 80 10 00    	mov    %ecx,0x10801c
}
  10099c:	83 c4 08             	add    $0x8,%esp
  10099f:	5d                   	pop    %ebp
  1009a0:	c3                   	ret    
  1009a1:	66 90                	xchg   %ax,%ax
  1009a3:	66 90                	xchg   %ax,%ax
  1009a5:	66 90                	xchg   %ax,%ax
  1009a7:	66 90                	xchg   %ax,%ax
  1009a9:	66 90                	xchg   %ax,%ax
  1009ab:	66 90                	xchg   %ax,%ax
  1009ad:	66 90                	xchg   %ax,%ax
  1009af:	90                   	nop

001009b0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];

void load_gdt() {
  1009b0:	55                   	push   %ebp
  1009b1:	89 e5                	mov    %esp,%ebp
	struct {
  1009b3:	83 ec 08             	sub    $0x8,%esp
  1009b6:	a1 24 60 10 00       	mov    0x106024,%eax
  1009bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1009be:	66 8b 0d 28 60 10 00 	mov    0x106028,%cx
  1009c5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		uint16_t limit;
		void* pointer;
	}__attribute__((packed)) gdtp = { .limit = GDT_ENTRIES * 8 - 1, .pointer =
			gdt, };

	asm volatile("lgdt %0" : : "m" (gdtp));
  1009c9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  1009cd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  1009d1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  1009d4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  1009d7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  1009da:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  1009dd:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  1009e0:	83 c4 08             	add    $0x8,%esp
  1009e3:	5d                   	pop    %ebp
  1009e4:	c3                   	ret    
  1009e5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1009ec:	00 00 00 00 

001009f0 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags) {
  1009f0:	55                   	push   %ebp
  1009f1:	89 e5                	mov    %esp,%ebp
  1009f3:	56                   	push   %esi
  1009f4:	83 ec 10             	sub    $0x10,%esp
  1009f7:	8b 45 14             	mov    0x14(%ebp),%eax
  1009fa:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1009fd:	8b 55 0c             	mov    0xc(%ebp),%edx
  100a00:	8b 75 08             	mov    0x8(%ebp),%esi
  100a03:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100a06:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100a09:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100a0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gdt[i] = limit & 0xffffLL;
  100a0f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  100a13:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100a16:	89 04 cd 50 c4 10 00 	mov    %eax,0x10c450(,%ecx,8)
  100a1d:	c7 04 cd 54 c4 10 00 	movl   $0x0,0x10c454(,%ecx,8)
  100a24:	00 00 00 00 
	gdt[i] |= (base & 0xffffffLL) << 16;
  100a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100a2b:	25 ff ff ff 00       	and    $0xffffff,%eax
  100a30:	89 c1                	mov    %eax,%ecx
  100a32:	c1 e1 10             	shl    $0x10,%ecx
  100a35:	c1 e8 10             	shr    $0x10,%eax
  100a38:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100a3b:	8b 34 d5 54 c4 10 00 	mov    0x10c454(,%edx,8),%esi
  100a42:	09 f0                	or     %esi,%eax
  100a44:	8b 34 d5 50 c4 10 00 	mov    0x10c450(,%edx,8),%esi
  100a4b:	09 ce                	or     %ecx,%esi
  100a4d:	89 04 d5 54 c4 10 00 	mov    %eax,0x10c454(,%edx,8)
  100a54:	89 34 d5 50 c4 10 00 	mov    %esi,0x10c450(,%edx,8)
	gdt[i] |= (flags & 0xffLL) << 40;
  100a5b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  100a5f:	c1 e0 08             	shl    $0x8,%eax
  100a62:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100a65:	8b 14 cd 50 c4 10 00 	mov    0x10c450(,%ecx,8),%edx
  100a6c:	8b 34 cd 54 c4 10 00 	mov    0x10c454(,%ecx,8),%esi
  100a73:	09 c6                	or     %eax,%esi
  100a75:	89 14 cd 50 c4 10 00 	mov    %edx,0x10c450(,%ecx,8)
  100a7c:	89 34 cd 54 c4 10 00 	mov    %esi,0x10c454(,%ecx,8)
	gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100a83:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  100a87:	83 e0 0f             	and    $0xf,%eax
  100a8a:	c1 e0 10             	shl    $0x10,%eax
  100a8d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100a90:	8b 14 cd 50 c4 10 00 	mov    0x10c450(,%ecx,8),%edx
  100a97:	8b 34 cd 54 c4 10 00 	mov    0x10c454(,%ecx,8),%esi
  100a9e:	09 c6                	or     %eax,%esi
  100aa0:	89 14 cd 50 c4 10 00 	mov    %edx,0x10c450(,%ecx,8)
  100aa7:	89 34 cd 54 c4 10 00 	mov    %esi,0x10c454(,%ecx,8)
	gdt[i] |= ((flags >> 8) & 0xffLL) << 52;
  100aae:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ab1:	c1 e0 0c             	shl    $0xc,%eax
  100ab4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  100ab9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100abc:	8b 14 cd 50 c4 10 00 	mov    0x10c450(,%ecx,8),%edx
  100ac3:	8b 34 cd 54 c4 10 00 	mov    0x10c454(,%ecx,8),%esi
  100aca:	09 c6                	or     %eax,%esi
  100acc:	89 14 cd 50 c4 10 00 	mov    %edx,0x10c450(,%ecx,8)
  100ad3:	89 34 cd 54 c4 10 00 	mov    %esi,0x10c454(,%ecx,8)
	gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100ada:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100ade:	c1 e0 18             	shl    $0x18,%eax
  100ae1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100ae4:	8b 14 cd 50 c4 10 00 	mov    0x10c450(,%ecx,8),%edx
  100aeb:	8b 34 cd 54 c4 10 00 	mov    0x10c454(,%ecx,8),%esi
  100af2:	09 c6                	or     %eax,%esi
  100af4:	89 14 cd 50 c4 10 00 	mov    %edx,0x10c450(,%ecx,8)
  100afb:	89 34 cd 54 c4 10 00 	mov    %esi,0x10c454(,%ecx,8)
}
  100b02:	83 c4 10             	add    $0x10,%esp
  100b05:	5e                   	pop    %esi
  100b06:	5d                   	pop    %ebp
  100b07:	c3                   	ret    
  100b08:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100b0f:	00 

00100b10 <init_gdt>:

void init_gdt(void) {
  100b10:	55                   	push   %ebp
  100b11:	89 e5                	mov    %esp,%ebp
  100b13:	56                   	push   %esi
  100b14:	83 ec 54             	sub    $0x54,%esp
  100b17:	b8 00 00 00 00       	mov    $0x0,%eax
	set_gdt_entry(0, 0, 0, 0);
  100b1c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100b23:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100b2a:	00 
  100b2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100b32:	00 
  100b33:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100b3a:	00 
  100b3b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100b3e:	e8 ad fe ff ff       	call   1009f0 <set_gdt_entry>
  100b43:	b8 01 00 00 00       	mov    $0x1,%eax
  100b48:	b9 00 00 00 00       	mov    $0x0,%ecx
  100b4d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100b52:	be 9a 0c 00 00       	mov    $0xc9a,%esi
	set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100b57:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100b5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100b65:	00 
  100b66:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100b6d:	00 
  100b6e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100b75:	00 
  100b76:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100b79:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100b7c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100b7f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  100b82:	e8 69 fe ff ff       	call   1009f0 <set_gdt_entry>
  100b87:	b8 02 00 00 00       	mov    $0x2,%eax
  100b8c:	b9 00 00 00 00       	mov    $0x0,%ecx
  100b91:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100b96:	be 92 0c 00 00       	mov    $0xc92,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100b9b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100ba2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ba9:	00 
  100baa:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100bb1:	00 
  100bb2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  100bb9:	00 
  100bba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100bbd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  100bc0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  100bc3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  100bc6:	e8 25 fe ff ff       	call   1009f0 <set_gdt_entry>
  100bcb:	b8 03 00 00 00       	mov    $0x3,%eax
  100bd0:	b9 00 00 00 00       	mov    $0x0,%ecx
  100bd5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100bda:	be fa 0c 00 00       	mov    $0xcfa,%esi
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100bdf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100be6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100bed:	00 
  100bee:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100bf5:	00 
  100bf6:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  100bfd:	00 
  100bfe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100c01:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  100c04:	89 55 cc             	mov    %edx,-0x34(%ebp)
  100c07:	89 75 c8             	mov    %esi,-0x38(%ebp)
  100c0a:	e8 e1 fd ff ff       	call   1009f0 <set_gdt_entry>
  100c0f:	b8 04 00 00 00       	mov    $0x4,%eax
  100c14:	b9 00 00 00 00       	mov    $0x0,%ecx
  100c19:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100c1e:	be f2 0c 00 00       	mov    $0xcf2,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
	set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100c23:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  100c2a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100c31:	00 
  100c32:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100c39:	00 
  100c3a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  100c41:	00 
  100c42:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100c45:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  100c48:	89 55 bc             	mov    %edx,-0x44(%ebp)
  100c4b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  100c4e:	e8 9d fd ff ff       	call   1009f0 <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	load_gdt();
  100c53:	e8 58 fd ff ff       	call   1009b0 <load_gdt>
}
  100c58:	83 c4 54             	add    $0x54,%esp
  100c5b:	5e                   	pop    %esi
  100c5c:	5d                   	pop    %ebp
  100c5d:	c3                   	ret    
  100c5e:	66 90                	xchg   %ax,%ax

00100c60 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  100c60:	55                   	push   %ebp
  100c61:	89 e5                	mov    %esp,%ebp
  100c63:	53                   	push   %ebx
  100c64:	57                   	push   %edi
  100c65:	56                   	push   %esi
  100c66:	83 ec 10             	sub    $0x10,%esp
  100c69:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  100c6d:	66 89 c1             	mov    %ax,%cx
  100c70:	8a 55 14             	mov    0x14(%ebp),%dl
  100c73:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c76:	8b 75 08             	mov    0x8(%ebp),%esi
  100c79:	89 75 f0             	mov    %esi,-0x10(%ebp)
  100c7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100c7f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  100c83:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  100c86:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100c89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  100c8c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100c90:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100c93:	89 04 f5 20 80 10 00 	mov    %eax,0x108020(,%esi,8)
  100c9a:	c7 04 f5 24 80 10 00 	movl   $0x0,0x108024(,%esi,8)
  100ca1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  100ca5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  100ca9:	c1 e0 10             	shl    $0x10,%eax
  100cac:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100caf:	8b 3c f5 24 80 10 00 	mov    0x108024(,%esi,8),%edi
  100cb6:	8b 1c f5 20 80 10 00 	mov    0x108020(,%esi,8),%ebx
  100cbd:	09 c3                	or     %eax,%ebx
  100cbf:	89 3c f5 24 80 10 00 	mov    %edi,0x108024(,%esi,8)
  100cc6:	89 1c f5 20 80 10 00 	mov    %ebx,0x108020(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  100ccd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  100cd1:	c1 e0 08             	shl    $0x8,%eax
  100cd4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100cd7:	8b 3c f5 20 80 10 00 	mov    0x108020(,%esi,8),%edi
  100cde:	8b 1c f5 24 80 10 00 	mov    0x108024(,%esi,8),%ebx
  100ce5:	09 c3                	or     %eax,%ebx
  100ce7:	89 3c f5 20 80 10 00 	mov    %edi,0x108020(,%esi,8)
  100cee:	89 1c f5 24 80 10 00 	mov    %ebx,0x108024(,%esi,8)
	idt[i] |= ((handler >> 16) & 0xffffLL) << 48;
  100cf5:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  100cf9:	c1 e0 10             	shl    $0x10,%eax
  100cfc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100cff:	8b 3c f5 20 80 10 00 	mov    0x108020(,%esi,8),%edi
  100d06:	8b 1c f5 24 80 10 00 	mov    0x108024(,%esi,8),%ebx
  100d0d:	09 c3                	or     %eax,%ebx
  100d0f:	89 3c f5 20 80 10 00 	mov    %edi,0x108020(,%esi,8)
  100d16:	89 1c f5 24 80 10 00 	mov    %ebx,0x108024(,%esi,8)
}
  100d1d:	83 c4 10             	add    $0x10,%esp
  100d20:	5e                   	pop    %esi
  100d21:	5f                   	pop    %edi
  100d22:	5b                   	pop    %ebx
  100d23:	5d                   	pop    %ebp
  100d24:	c3                   	ret    
  100d25:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  100d2c:	00 00 00 00 

00100d30 <init_idt>:

void init_idt() {
  100d30:	55                   	push   %ebp
  100d31:	89 e5                	mov    %esp,%ebp
	struct {
  100d33:	56                   	push   %esi
  100d34:	81 ec 34 02 00 00    	sub    $0x234,%esp
  100d3a:	a1 2a 60 10 00       	mov    0x10602a,%eax
  100d3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100d42:	66 8b 0d 2e 60 10 00 	mov    0x10602e,%cx
  100d49:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
		unsigned short int limit;
		void* pointer;
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;
  100d4d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for (i = 0; i < IDT_ENTRIES; i++) {
  100d54:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100d5b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  100d62:	0f 8d 1e 00 00 00    	jge    100d86 <init_idt+0x56>
		handler_set[i] = 0;
  100d68:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d6b:	c7 04 85 20 82 10 00 	movl   $0x0,0x108220(,%eax,4)
  100d72:	00 00 00 00 
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;

	for (i = 0; i < IDT_ENTRIES; i++) {
  100d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d79:	05 01 00 00 00       	add    $0x1,%eax
  100d7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100d81:	e9 d5 ff ff ff       	jmp    100d5b <init_idt+0x2b>
  100d86:	b8 20 00 00 00       	mov    $0x20,%eax
  100d8b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

	outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  100d90:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100d97:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100d9e:	00 
  100d9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100da2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100da5:	e8 86 0b 00 00       	call   101930 <outb>
  100daa:	b8 21 00 00 00       	mov    $0x21,%eax
  100daf:	b9 20 00 00 00       	mov    $0x20,%ecx
	outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  100db4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100dbb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  100dc2:	00 
  100dc3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100dc6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  100dc9:	e8 62 0b 00 00       	call   101930 <outb>
  100dce:	b8 21 00 00 00       	mov    $0x21,%eax
  100dd3:	b9 04 00 00 00       	mov    $0x4,%ecx
	outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  100dd8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100ddf:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  100de6:	00 
  100de7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100dea:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  100ded:	e8 3e 0b 00 00       	call   101930 <outb>
  100df2:	b8 21 00 00 00       	mov    $0x21,%eax
  100df7:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0x21, 0x01); // ICW 4
  100dfc:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100e03:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100e0a:	00 
  100e0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100e0e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  100e11:	e8 1a 0b 00 00       	call   101930 <outb>
  100e16:	b8 a0 00 00 00       	mov    $0xa0,%eax
  100e1b:	b9 11 00 00 00       	mov    $0x11,%ecx

	outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  100e20:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100e27:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100e2e:	00 
  100e2f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  100e32:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  100e35:	e8 f6 0a 00 00       	call   101930 <outb>
  100e3a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e3f:	b9 28 00 00 00       	mov    $0x28,%ecx
	outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  100e44:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100e4b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  100e52:	00 
  100e53:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100e56:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  100e59:	e8 d2 0a 00 00       	call   101930 <outb>
  100e5e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e63:	b9 02 00 00 00       	mov    $0x2,%ecx
	outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  100e68:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100e6f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100e76:	00 
  100e77:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100e7a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  100e7d:	e8 ae 0a 00 00       	call   101930 <outb>
  100e82:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e87:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0xa1, 0x01); // ICW 4
  100e8c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100e93:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100e9a:	00 
  100e9b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  100e9e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100ea1:	e8 8a 0a 00 00       	call   101930 <outb>
  100ea6:	b8 20 00 00 00       	mov    $0x20,%eax
  100eab:	b9 00 00 00 00       	mov    $0x0,%ecx

	outb(0x20, 0x0);
  100eb0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100eb7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ebe:	00 
  100ebf:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100ec2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  100ec5:	e8 66 0a 00 00       	call   101930 <outb>
  100eca:	b8 a0 00 00 00       	mov    $0xa0,%eax
  100ecf:	b9 00 00 00 00       	mov    $0x0,%ecx
	outb(0xa0, 0x0);
  100ed4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100edb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ee2:	00 
  100ee3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  100ee6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  100ee9:	e8 42 0a 00 00       	call   101930 <outb>
  100eee:	b8 00 00 00 00       	mov    $0x0,%eax
  100ef3:	8d 0d 04 1b 10 00    	lea    0x101b04,%ecx
  100ef9:	ba 08 00 00 00       	mov    $0x8,%edx
  100efe:	be 8e 00 00 00       	mov    $0x8e,%esi

	idt_set_entry(0, intr_stub_0, 0x8,
  100f03:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100f0a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f0e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100f15:	00 
  100f16:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100f1d:	00 
  100f1e:	89 45 98             	mov    %eax,-0x68(%ebp)
  100f21:	89 75 94             	mov    %esi,-0x6c(%ebp)
  100f24:	89 55 90             	mov    %edx,-0x70(%ebp)
  100f27:	e8 34 fd ff ff       	call   100c60 <idt_set_entry>
  100f2c:	b8 01 00 00 00       	mov    $0x1,%eax
  100f31:	8d 0d 0d 1b 10 00    	lea    0x101b0d,%ecx
  100f37:	ba 08 00 00 00       	mov    $0x8,%edx
  100f3c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(1, intr_stub_1, 0x8,
  100f41:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100f48:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f4c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100f53:	00 
  100f54:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100f5b:	00 
  100f5c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  100f5f:	89 75 88             	mov    %esi,-0x78(%ebp)
  100f62:	89 55 84             	mov    %edx,-0x7c(%ebp)
  100f65:	e8 f6 fc ff ff       	call   100c60 <idt_set_entry>
  100f6a:	b8 02 00 00 00       	mov    $0x2,%eax
  100f6f:	8d 0d 16 1b 10 00    	lea    0x101b16,%ecx
  100f75:	ba 08 00 00 00       	mov    $0x8,%edx
  100f7a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(2, intr_stub_2, 0x8,
  100f7f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100f86:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f8a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100f91:	00 
  100f92:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100f99:	00 
  100f9a:	89 45 80             	mov    %eax,-0x80(%ebp)
  100f9d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  100fa3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  100fa9:	e8 b2 fc ff ff       	call   100c60 <idt_set_entry>
  100fae:	b8 03 00 00 00       	mov    $0x3,%eax
  100fb3:	8d 0d 1f 1b 10 00    	lea    0x101b1f,%ecx
  100fb9:	ba 08 00 00 00       	mov    $0x8,%edx
  100fbe:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(3, intr_stub_3, 0x8,
  100fc3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100fca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100fce:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100fd5:	00 
  100fd6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100fdd:	00 
  100fde:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  100fe4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  100fea:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  100ff0:	e8 6b fc ff ff       	call   100c60 <idt_set_entry>
  100ff5:	b8 04 00 00 00       	mov    $0x4,%eax
  100ffa:	8d 0d 28 1b 10 00    	lea    0x101b28,%ecx
  101000:	ba 08 00 00 00       	mov    $0x8,%edx
  101005:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(4, intr_stub_4, 0x8,
  10100a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101011:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101015:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10101c:	00 
  10101d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101024:	00 
  101025:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10102b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101031:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101037:	e8 24 fc ff ff       	call   100c60 <idt_set_entry>
  10103c:	b8 05 00 00 00       	mov    $0x5,%eax
  101041:	8d 0d 31 1b 10 00    	lea    0x101b31,%ecx
  101047:	ba 08 00 00 00       	mov    $0x8,%edx
  10104c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(5, intr_stub_5, 0x8,
  101051:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101058:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10105c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101063:	00 
  101064:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10106b:	00 
  10106c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101072:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101078:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10107e:	e8 dd fb ff ff       	call   100c60 <idt_set_entry>
  101083:	b8 06 00 00 00       	mov    $0x6,%eax
  101088:	8d 0d 3a 1b 10 00    	lea    0x101b3a,%ecx
  10108e:	ba 08 00 00 00       	mov    $0x8,%edx
  101093:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(6, intr_stub_6, 0x8,
  101098:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10109f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010a3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010aa:	00 
  1010ab:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1010b2:	00 
  1010b3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1010b9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1010bf:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1010c5:	e8 96 fb ff ff       	call   100c60 <idt_set_entry>
  1010ca:	b8 07 00 00 00       	mov    $0x7,%eax
  1010cf:	8d 0d 43 1b 10 00    	lea    0x101b43,%ecx
  1010d5:	ba 08 00 00 00       	mov    $0x8,%edx
  1010da:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(7, intr_stub_7, 0x8,
  1010df:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1010e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010ea:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010f1:	00 
  1010f2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1010f9:	00 
  1010fa:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101100:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101106:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10110c:	e8 4f fb ff ff       	call   100c60 <idt_set_entry>
  101111:	b8 08 00 00 00       	mov    $0x8,%eax
  101116:	8d 0d 4c 1b 10 00    	lea    0x101b4c,%ecx
  10111c:	ba 8e 00 00 00       	mov    $0x8e,%edx
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(8, intr_stub_8, 0x8,
  101121:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101128:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10112c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101133:	00 
  101134:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10113b:	00 
  10113c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101142:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101148:	e8 13 fb ff ff       	call   100c60 <idt_set_entry>
  10114d:	b8 09 00 00 00       	mov    $0x9,%eax
  101152:	8d 0d 53 1b 10 00    	lea    0x101b53,%ecx
  101158:	ba 08 00 00 00       	mov    $0x8,%edx
  10115d:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(9, intr_stub_9, 0x8,
  101162:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101169:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10116d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101174:	00 
  101175:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10117c:	00 
  10117d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101183:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101189:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10118f:	e8 cc fa ff ff       	call   100c60 <idt_set_entry>
  101194:	b8 0a 00 00 00       	mov    $0xa,%eax
  101199:	8d 0d 5c 1b 10 00    	lea    0x101b5c,%ecx
  10119f:	ba 08 00 00 00       	mov    $0x8,%edx
  1011a4:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(10, intr_stub_10, 0x8,
  1011a9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1011b0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011b4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1011bb:	00 
  1011bc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1011c3:	00 
  1011c4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1011ca:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1011d0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1011d6:	e8 85 fa ff ff       	call   100c60 <idt_set_entry>
  1011db:	b8 0b 00 00 00       	mov    $0xb,%eax
  1011e0:	8d 0d 63 1b 10 00    	lea    0x101b63,%ecx
  1011e6:	ba 08 00 00 00       	mov    $0x8,%edx
  1011eb:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(11, intr_stub_11, 0x8,
  1011f0:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  1011f7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011fb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101202:	00 
  101203:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10120a:	00 
  10120b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101211:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101217:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10121d:	e8 3e fa ff ff       	call   100c60 <idt_set_entry>
  101222:	b8 0c 00 00 00       	mov    $0xc,%eax
  101227:	8d 0d 6a 1b 10 00    	lea    0x101b6a,%ecx
  10122d:	ba 08 00 00 00       	mov    $0x8,%edx
  101232:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(12, intr_stub_12, 0x8,
  101237:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10123e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101242:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101249:	00 
  10124a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101251:	00 
  101252:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101258:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10125e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101264:	e8 f7 f9 ff ff       	call   100c60 <idt_set_entry>
  101269:	b8 0d 00 00 00       	mov    $0xd,%eax
  10126e:	8d 0d 71 1b 10 00    	lea    0x101b71,%ecx
  101274:	ba 08 00 00 00       	mov    $0x8,%edx
  101279:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(13, intr_stub_13, 0x8,
  10127e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101285:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101289:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101290:	00 
  101291:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101298:	00 
  101299:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10129f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  1012a5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  1012ab:	e8 b0 f9 ff ff       	call   100c60 <idt_set_entry>
  1012b0:	b8 0e 00 00 00       	mov    $0xe,%eax
  1012b5:	8d 0d 78 1b 10 00    	lea    0x101b78,%ecx
  1012bb:	ba 08 00 00 00       	mov    $0x8,%edx
  1012c0:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(14, intr_stub_14, 0x8,
  1012c5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1012cc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1012d0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1012d7:	00 
  1012d8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1012df:	00 
  1012e0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1012e6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1012ec:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  1012f2:	e8 69 f9 ff ff       	call   100c60 <idt_set_entry>
  1012f7:	b8 0f 00 00 00       	mov    $0xf,%eax
  1012fc:	8d 0d 7c 1b 10 00    	lea    0x101b7c,%ecx
  101302:	ba 08 00 00 00       	mov    $0x8,%edx
  101307:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(15, intr_stub_15, 0x8,
  10130c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101313:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101317:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10131e:	00 
  10131f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101326:	00 
  101327:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10132d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101333:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101339:	e8 22 f9 ff ff       	call   100c60 <idt_set_entry>
  10133e:	b8 10 00 00 00       	mov    $0x10,%eax
  101343:	8d 0d 82 1b 10 00    	lea    0x101b82,%ecx
  101349:	ba 08 00 00 00       	mov    $0x8,%edx
  10134e:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(16, intr_stub_16, 0x8,
  101353:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10135a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10135e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101365:	00 
  101366:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10136d:	00 
  10136e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101374:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  10137a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101380:	e8 db f8 ff ff       	call   100c60 <idt_set_entry>
  101385:	b8 11 00 00 00       	mov    $0x11,%eax
  10138a:	8d 0d 88 1b 10 00    	lea    0x101b88,%ecx
  101390:	ba 08 00 00 00       	mov    $0x8,%edx
  101395:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(17, intr_stub_17, 0x8,
  10139a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1013a1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1013a5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013ac:	00 
  1013ad:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013b4:	00 
  1013b5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  1013bb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  1013c1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  1013c7:	e8 94 f8 ff ff       	call   100c60 <idt_set_entry>
  1013cc:	b8 12 00 00 00       	mov    $0x12,%eax
  1013d1:	8d 0d 8c 1b 10 00    	lea    0x101b8c,%ecx
  1013d7:	ba 08 00 00 00       	mov    $0x8,%edx
  1013dc:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(18, intr_stub_18, 0x8,
  1013e1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1013e8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1013ec:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013f3:	00 
  1013f4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013fb:	00 
  1013fc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101402:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101408:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10140e:	e8 4d f8 ff ff       	call   100c60 <idt_set_entry>
  101413:	b8 20 00 00 00       	mov    $0x20,%eax
  101418:	8d 0d 92 1b 10 00    	lea    0x101b92,%ecx
  10141e:	ba 08 00 00 00       	mov    $0x8,%edx
  101423:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(32, intr_stub_32, 0x8,
  101428:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10142f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101433:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10143a:	00 
  10143b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101442:	00 
  101443:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101449:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  10144f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101455:	e8 06 f8 ff ff       	call   100c60 <idt_set_entry>
  10145a:	b8 21 00 00 00       	mov    $0x21,%eax
  10145f:	8d 0d 98 1b 10 00    	lea    0x101b98,%ecx
  101465:	ba 08 00 00 00       	mov    $0x8,%edx
  10146a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(33, intr_stub_33, 0x8,
  10146f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101476:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10147a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101481:	00 
  101482:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101489:	00 
  10148a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  101490:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  101496:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  10149c:	e8 bf f7 ff ff       	call   100c60 <idt_set_entry>
  1014a1:	b8 22 00 00 00       	mov    $0x22,%eax
  1014a6:	8d 0d 9e 1b 10 00    	lea    0x101b9e,%ecx
  1014ac:	ba 08 00 00 00       	mov    $0x8,%edx
  1014b1:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(34, intr_stub_34, 0x8,
  1014b6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1014bd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014c1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014c8:	00 
  1014c9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014d0:	00 
  1014d1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  1014d7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  1014dd:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  1014e3:	e8 78 f7 ff ff       	call   100c60 <idt_set_entry>
  1014e8:	b8 23 00 00 00       	mov    $0x23,%eax
  1014ed:	8d 0d a4 1b 10 00    	lea    0x101ba4,%ecx
  1014f3:	ba 08 00 00 00       	mov    $0x8,%edx
  1014f8:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(35, intr_stub_35, 0x8,
  1014fd:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101504:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101508:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10150f:	00 
  101510:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101517:	00 
  101518:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  10151e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101524:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  10152a:	e8 31 f7 ff ff       	call   100c60 <idt_set_entry>
  10152f:	b8 24 00 00 00       	mov    $0x24,%eax
  101534:	8d 0d aa 1b 10 00    	lea    0x101baa,%ecx
  10153a:	ba 08 00 00 00       	mov    $0x8,%edx
  10153f:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(36, intr_stub_36, 0x8,
  101544:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  10154b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10154f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101556:	00 
  101557:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10155e:	00 
  10155f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101565:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  10156b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101571:	e8 ea f6 ff ff       	call   100c60 <idt_set_entry>
  101576:	b8 25 00 00 00       	mov    $0x25,%eax
  10157b:	8d 0d b0 1b 10 00    	lea    0x101bb0,%ecx
  101581:	ba 08 00 00 00       	mov    $0x8,%edx
  101586:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(37, intr_stub_37, 0x8,
  10158b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101592:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101596:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10159d:	00 
  10159e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015a5:	00 
  1015a6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  1015ac:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  1015b2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  1015b8:	e8 a3 f6 ff ff       	call   100c60 <idt_set_entry>
  1015bd:	b8 26 00 00 00       	mov    $0x26,%eax
  1015c2:	8d 0d b6 1b 10 00    	lea    0x101bb6,%ecx
  1015c8:	ba 08 00 00 00       	mov    $0x8,%edx
  1015cd:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(38, intr_stub_38, 0x8,
  1015d2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  1015d9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015dd:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015e4:	00 
  1015e5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015ec:	00 
  1015ed:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  1015f3:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  1015f9:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  1015ff:	e8 5c f6 ff ff       	call   100c60 <idt_set_entry>
  101604:	b8 27 00 00 00       	mov    $0x27,%eax
  101609:	8d 0d bc 1b 10 00    	lea    0x101bbc,%ecx
  10160f:	ba 08 00 00 00       	mov    $0x8,%edx
  101614:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(39, intr_stub_39, 0x8,
  101619:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101620:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101624:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10162b:	00 
  10162c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101633:	00 
  101634:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  10163a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101640:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101646:	e8 15 f6 ff ff       	call   100c60 <idt_set_entry>
  10164b:	b8 28 00 00 00       	mov    $0x28,%eax
  101650:	8d 0d c2 1b 10 00    	lea    0x101bc2,%ecx
  101656:	ba 08 00 00 00       	mov    $0x8,%edx
  10165b:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(40, intr_stub_40, 0x8,
  101660:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101667:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10166b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101672:	00 
  101673:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10167a:	00 
  10167b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101681:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101687:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  10168d:	e8 ce f5 ff ff       	call   100c60 <idt_set_entry>
  101692:	b8 29 00 00 00       	mov    $0x29,%eax
  101697:	8d 0d c8 1b 10 00    	lea    0x101bc8,%ecx
  10169d:	ba 08 00 00 00       	mov    $0x8,%edx
  1016a2:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(41, intr_stub_41, 0x8,
  1016a7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  1016ae:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016b2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016b9:	00 
  1016ba:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016c1:	00 
  1016c2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  1016c8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  1016ce:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  1016d4:	e8 87 f5 ff ff       	call   100c60 <idt_set_entry>
  1016d9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  1016de:	8d 0d ce 1b 10 00    	lea    0x101bce,%ecx
  1016e4:	ba 08 00 00 00       	mov    $0x8,%edx
  1016e9:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(42, intr_stub_42, 0x8,
  1016ee:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  1016f5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016f9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101700:	00 
  101701:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101708:	00 
  101709:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  10170f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101715:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  10171b:	e8 40 f5 ff ff       	call   100c60 <idt_set_entry>
  101720:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101725:	8d 0d d4 1b 10 00    	lea    0x101bd4,%ecx
  10172b:	ba 08 00 00 00       	mov    $0x8,%edx
  101730:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(43, intr_stub_43, 0x8,
  101735:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  10173c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101740:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101747:	00 
  101748:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10174f:	00 
  101750:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101756:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  10175c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101762:	e8 f9 f4 ff ff       	call   100c60 <idt_set_entry>
  101767:	b8 2c 00 00 00       	mov    $0x2c,%eax
  10176c:	8d 0d da 1b 10 00    	lea    0x101bda,%ecx
  101772:	ba 08 00 00 00       	mov    $0x8,%edx
  101777:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(44, intr_stub_44, 0x8,
  10177c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101783:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101787:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10178e:	00 
  10178f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101796:	00 
  101797:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  10179d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  1017a3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  1017a9:	e8 b2 f4 ff ff       	call   100c60 <idt_set_entry>
  1017ae:	b8 2d 00 00 00       	mov    $0x2d,%eax
  1017b3:	8d 0d e0 1b 10 00    	lea    0x101be0,%ecx
  1017b9:	ba 08 00 00 00       	mov    $0x8,%edx
  1017be:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(45, intr_stub_45, 0x8,
  1017c3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  1017ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017ce:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017d5:	00 
  1017d6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017dd:	00 
  1017de:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  1017e4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  1017ea:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  1017f0:	e8 6b f4 ff ff       	call   100c60 <idt_set_entry>
  1017f5:	b8 2e 00 00 00       	mov    $0x2e,%eax
  1017fa:	8d 0d e6 1b 10 00    	lea    0x101be6,%ecx
  101800:	ba 08 00 00 00       	mov    $0x8,%edx
  101805:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(46, intr_stub_46, 0x8,
  10180a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101811:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101815:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10181c:	00 
  10181d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101824:	00 
  101825:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  10182b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101831:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101837:	e8 24 f4 ff ff       	call   100c60 <idt_set_entry>
  10183c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101841:	8d 0d ec 1b 10 00    	lea    0x101bec,%ecx
  101847:	ba 08 00 00 00       	mov    $0x8,%edx
  10184c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(47, intr_stub_47, 0x8,
  101851:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101858:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10185c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101863:	00 
  101864:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10186b:	00 
  10186c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101872:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101878:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  10187e:	e8 dd f3 ff ff       	call   100c60 <idt_set_entry>
  101883:	b8 30 00 00 00       	mov    $0x30,%eax
  101888:	8d 0d f2 1b 10 00    	lea    0x101bf2,%ecx
  10188e:	ba 08 00 00 00       	mov    $0x8,%edx
  101893:	be ee 00 00 00       	mov    $0xee,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(48, intr_stub_48, 0x8,
  101898:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  10189f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018a3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018aa:	00 
  1018ab:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  1018b2:	00 
  1018b3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  1018b9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  1018bf:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  1018c5:	e8 96 f3 ff ff       	call   100c60 <idt_set_entry>
  1018ca:	b8 05 00 00 00       	mov    $0x5,%eax
  1018cf:	8d 0d 08 51 10 00    	lea    0x105108,%ecx
  1018d5:	ba 80 00 00 00       	mov    $0x80,%edx
  1018da:	be e9 00 00 00       	mov    $0xe9,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss),
  1018df:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1018e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018ea:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  1018f1:	00 
  1018f2:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  1018f9:	00 
  1018fa:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101900:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101906:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  10190c:	e8 df f0 ff ff       	call   1009f0 <set_gdt_entry>
  101911:	b8 28 00 00 00       	mov    $0x28,%eax
			GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101916:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101919:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  10191d:	fb                   	sti    
}
  10191e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101924:	5e                   	pop    %esi
  101925:	5d                   	pop    %ebp
  101926:	c3                   	ret    
  101927:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10192e:	00 00 

00101930 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  101930:	55                   	push   %ebp
  101931:	89 e5                	mov    %esp,%ebp
  101933:	50                   	push   %eax
  101934:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101938:	66 89 c1             	mov    %ax,%cx
  10193b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10193e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101942:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101945:	8a 45 fd             	mov    -0x3(%ebp),%al
  101948:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10194c:	ee                   	out    %al,(%dx)
}
  10194d:	83 c4 04             	add    $0x4,%esp
  101950:	5d                   	pop    %ebp
  101951:	c3                   	ret    
  101952:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101959:	1f 84 00 00 00 00 00 

00101960 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)()) {
  101960:	55                   	push   %ebp
  101961:	89 e5                	mov    %esp,%ebp
  101963:	83 ec 08             	sub    $0x8,%esp
  101966:	8b 45 0c             	mov    0xc(%ebp),%eax
  101969:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10196c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10196f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101972:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101975:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101978:	89 04 8d 20 83 10 00 	mov    %eax,0x108320(,%ecx,4)
	handler_set[i] = 1;
  10197f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101982:	c7 04 85 20 82 10 00 	movl   $0x1,0x108220(,%eax,4)
  101989:	01 00 00 00 
}
  10198d:	83 c4 08             	add    $0x8,%esp
  101990:	5d                   	pop    %ebp
  101991:	c3                   	ret    
  101992:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101999:	1f 84 00 00 00 00 00 

001019a0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu) {
  1019a0:	55                   	push   %ebp
  1019a1:	89 e5                	mov    %esp,%ebp
  1019a3:	83 ec 28             	sub    $0x28,%esp
  1019a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1019a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct cpu_state* new_cpu = cpu;
  1019ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019af:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if (cpu->intr <= 0x1f) {
  1019b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019b5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  1019bc:	0f 87 3d 00 00 00    	ja     1019ff <handle_interrupt+0x5f>
		if (!scheduling_enabled()) {
  1019c2:	e8 e9 09 00 00       	call   1023b0 <scheduling_enabled>
  1019c7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1019cc:	0f 85 1a 00 00 00    	jne    1019ec <handle_interrupt+0x4c>
  1019d2:	8d 05 fd 61 10 00    	lea    0x1061fd,%eax
			show_cod(cpu, "Kernel PANIC!");
  1019d8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1019db:	89 0c 24             	mov    %ecx,(%esp)
  1019de:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019e2:	e8 89 e9 ff ff       	call   100370 <show_cod>
		} else {
  1019e7:	e9 0e 00 00 00       	jmp    1019fa <handle_interrupt+0x5a>
			schedule_exception(cpu);
  1019ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019ef:	89 04 24             	mov    %eax,(%esp)
  1019f2:	e8 c9 09 00 00       	call   1023c0 <schedule_exception>
  1019f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}
	} else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  1019fa:	e9 fc 00 00 00       	jmp    101afb <handle_interrupt+0x15b>
  1019ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a02:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101a09:	0f 82 a7 00 00 00    	jb     101ab6 <handle_interrupt+0x116>
  101a0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a12:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  101a19:	0f 87 97 00 00 00    	ja     101ab6 <handle_interrupt+0x116>
		if (cpu->intr >= 0x28) {
  101a1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a22:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  101a29:	0f 82 24 00 00 00    	jb     101a53 <handle_interrupt+0xb3>
  101a2f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101a34:	b9 20 00 00 00       	mov    $0x20,%ecx
			outb(0xa0, 0x20);
  101a39:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101a40:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101a47:	00 
  101a48:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101a4b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  101a4e:	e8 dd fe ff ff       	call   101930 <outb>
		}
		if (cpu->intr == 0x20) {
  101a53:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a56:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101a5d:	0f 85 0e 00 00 00    	jne    101a71 <handle_interrupt+0xd1>
			new_cpu = schedule(cpu);
  101a63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a66:	89 04 24             	mov    %eax,(%esp)
  101a69:	e8 82 0d 00 00       	call   1027f0 <schedule>
  101a6e:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101a71:	b8 20 00 00 00       	mov    $0x20,%eax
		}
		outb(0x20, 0x20);
  101a76:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101a7d:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101a84:	00 
  101a85:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101a88:	e8 a3 fe ff ff       	call   101930 <outb>
		if (handler_set[cpu->intr]) {
  101a8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a90:	8b 40 1c             	mov    0x1c(%eax),%eax
  101a93:	81 3c 85 20 82 10 00 	cmpl   $0x0,0x108220(,%eax,4)
  101a9a:	00 00 00 00 
  101a9e:	0f 84 0d 00 00 00    	je     101ab1 <handle_interrupt+0x111>
			handlers[cpu->intr]();
  101aa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101aa7:	8b 40 1c             	mov    0x1c(%eax),%eax
  101aaa:	ff 14 85 20 83 10 00 	call   *0x108320(,%eax,4)
		}
	} else if (cpu->intr == 0x30) {
  101ab1:	e9 40 00 00 00       	jmp    101af6 <handle_interrupt+0x156>
  101ab6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ab9:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  101ac0:	0f 85 13 00 00 00    	jne    101ad9 <handle_interrupt+0x139>
		new_cpu = syscall(new_cpu);
  101ac6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ac9:	89 04 24             	mov    %eax,(%esp)
  101acc:	e8 5f 01 00 00       	call   101c30 <syscall>
  101ad1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	} else {
  101ad4:	e9 18 00 00 00       	jmp    101af1 <handle_interrupt+0x151>
  101ad9:	8d 05 0b 62 10 00    	lea    0x10620b,%eax
		kprintf("Unbekannter Interrupt\n");
  101adf:	89 04 24             	mov    %eax,(%esp)
  101ae2:	e8 69 ea ff ff       	call   100550 <kprintf>
  101ae7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		while (1) {
			// Prozessor anhalten
			asm volatile("cli; hlt");
  101aea:	fa                   	cli    
  101aeb:	f4                   	hlt    
		}
  101aec:	e9 f9 ff ff ff       	jmp    101aea <handle_interrupt+0x14a>
  101af1:	e9 00 00 00 00       	jmp    101af6 <handle_interrupt+0x156>
  101af6:	e9 00 00 00 00       	jmp    101afb <handle_interrupt+0x15b>
	}

	return new_cpu;
  101afb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101afe:	83 c4 28             	add    $0x28,%esp
  101b01:	5d                   	pop    %ebp
  101b02:	c3                   	ret    
  101b03:	90                   	nop

00101b04 <intr_stub_0>:
  101b04:	6a 00                	push   $0x0
  101b06:	6a 00                	push   $0x0
  101b08:	e9 eb 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b0d <intr_stub_1>:
  101b0d:	6a 00                	push   $0x0
  101b0f:	6a 01                	push   $0x1
  101b11:	e9 e2 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b16 <intr_stub_2>:
  101b16:	6a 00                	push   $0x0
  101b18:	6a 02                	push   $0x2
  101b1a:	e9 d9 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b1f <intr_stub_3>:
  101b1f:	6a 00                	push   $0x0
  101b21:	6a 03                	push   $0x3
  101b23:	e9 d0 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b28 <intr_stub_4>:
  101b28:	6a 00                	push   $0x0
  101b2a:	6a 04                	push   $0x4
  101b2c:	e9 c7 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b31 <intr_stub_5>:
  101b31:	6a 00                	push   $0x0
  101b33:	6a 05                	push   $0x5
  101b35:	e9 be 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b3a <intr_stub_6>:
  101b3a:	6a 00                	push   $0x0
  101b3c:	6a 06                	push   $0x6
  101b3e:	e9 b5 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b43 <intr_stub_7>:
  101b43:	6a 00                	push   $0x0
  101b45:	6a 07                	push   $0x7
  101b47:	e9 ac 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b4c <intr_stub_8>:
  101b4c:	6a 08                	push   $0x8
  101b4e:	e9 a5 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b53 <intr_stub_9>:
  101b53:	6a 00                	push   $0x0
  101b55:	6a 09                	push   $0x9
  101b57:	e9 9c 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b5c <intr_stub_10>:
  101b5c:	6a 0a                	push   $0xa
  101b5e:	e9 95 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b63 <intr_stub_11>:
  101b63:	6a 0b                	push   $0xb
  101b65:	e9 8e 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b6a <intr_stub_12>:
  101b6a:	6a 0c                	push   $0xc
  101b6c:	e9 87 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b71 <intr_stub_13>:
  101b71:	6a 0d                	push   $0xd
  101b73:	e9 80 00 00 00       	jmp    101bf8 <intr_common_handler>

00101b78 <intr_stub_14>:
  101b78:	6a 0e                	push   $0xe
  101b7a:	eb 7c                	jmp    101bf8 <intr_common_handler>

00101b7c <intr_stub_15>:
  101b7c:	6a 00                	push   $0x0
  101b7e:	6a 0f                	push   $0xf
  101b80:	eb 76                	jmp    101bf8 <intr_common_handler>

00101b82 <intr_stub_16>:
  101b82:	6a 00                	push   $0x0
  101b84:	6a 10                	push   $0x10
  101b86:	eb 70                	jmp    101bf8 <intr_common_handler>

00101b88 <intr_stub_17>:
  101b88:	6a 11                	push   $0x11
  101b8a:	eb 6c                	jmp    101bf8 <intr_common_handler>

00101b8c <intr_stub_18>:
  101b8c:	6a 00                	push   $0x0
  101b8e:	6a 12                	push   $0x12
  101b90:	eb 66                	jmp    101bf8 <intr_common_handler>

00101b92 <intr_stub_32>:
  101b92:	6a 00                	push   $0x0
  101b94:	6a 20                	push   $0x20
  101b96:	eb 60                	jmp    101bf8 <intr_common_handler>

00101b98 <intr_stub_33>:
  101b98:	6a 00                	push   $0x0
  101b9a:	6a 21                	push   $0x21
  101b9c:	eb 5a                	jmp    101bf8 <intr_common_handler>

00101b9e <intr_stub_34>:
  101b9e:	6a 00                	push   $0x0
  101ba0:	6a 22                	push   $0x22
  101ba2:	eb 54                	jmp    101bf8 <intr_common_handler>

00101ba4 <intr_stub_35>:
  101ba4:	6a 00                	push   $0x0
  101ba6:	6a 23                	push   $0x23
  101ba8:	eb 4e                	jmp    101bf8 <intr_common_handler>

00101baa <intr_stub_36>:
  101baa:	6a 00                	push   $0x0
  101bac:	6a 24                	push   $0x24
  101bae:	eb 48                	jmp    101bf8 <intr_common_handler>

00101bb0 <intr_stub_37>:
  101bb0:	6a 00                	push   $0x0
  101bb2:	6a 25                	push   $0x25
  101bb4:	eb 42                	jmp    101bf8 <intr_common_handler>

00101bb6 <intr_stub_38>:
  101bb6:	6a 00                	push   $0x0
  101bb8:	6a 26                	push   $0x26
  101bba:	eb 3c                	jmp    101bf8 <intr_common_handler>

00101bbc <intr_stub_39>:
  101bbc:	6a 00                	push   $0x0
  101bbe:	6a 27                	push   $0x27
  101bc0:	eb 36                	jmp    101bf8 <intr_common_handler>

00101bc2 <intr_stub_40>:
  101bc2:	6a 00                	push   $0x0
  101bc4:	6a 28                	push   $0x28
  101bc6:	eb 30                	jmp    101bf8 <intr_common_handler>

00101bc8 <intr_stub_41>:
  101bc8:	6a 00                	push   $0x0
  101bca:	6a 29                	push   $0x29
  101bcc:	eb 2a                	jmp    101bf8 <intr_common_handler>

00101bce <intr_stub_42>:
  101bce:	6a 00                	push   $0x0
  101bd0:	6a 2a                	push   $0x2a
  101bd2:	eb 24                	jmp    101bf8 <intr_common_handler>

00101bd4 <intr_stub_43>:
  101bd4:	6a 00                	push   $0x0
  101bd6:	6a 2b                	push   $0x2b
  101bd8:	eb 1e                	jmp    101bf8 <intr_common_handler>

00101bda <intr_stub_44>:
  101bda:	6a 00                	push   $0x0
  101bdc:	6a 2c                	push   $0x2c
  101bde:	eb 18                	jmp    101bf8 <intr_common_handler>

00101be0 <intr_stub_45>:
  101be0:	6a 00                	push   $0x0
  101be2:	6a 2d                	push   $0x2d
  101be4:	eb 12                	jmp    101bf8 <intr_common_handler>

00101be6 <intr_stub_46>:
  101be6:	6a 00                	push   $0x0
  101be8:	6a 2e                	push   $0x2e
  101bea:	eb 0c                	jmp    101bf8 <intr_common_handler>

00101bec <intr_stub_47>:
  101bec:	6a 00                	push   $0x0
  101bee:	6a 2f                	push   $0x2f
  101bf0:	eb 06                	jmp    101bf8 <intr_common_handler>

00101bf2 <intr_stub_48>:
  101bf2:	6a 00                	push   $0x0
  101bf4:	6a 30                	push   $0x30
  101bf6:	eb 00                	jmp    101bf8 <intr_common_handler>

00101bf8 <intr_common_handler>:
  101bf8:	55                   	push   %ebp
  101bf9:	57                   	push   %edi
  101bfa:	56                   	push   %esi
  101bfb:	52                   	push   %edx
  101bfc:	51                   	push   %ecx
  101bfd:	53                   	push   %ebx
  101bfe:	50                   	push   %eax
  101bff:	54                   	push   %esp
  101c00:	66 b8 10 00          	mov    $0x10,%ax
  101c04:	66 8e d8             	mov    %ax,%ds
  101c07:	66 8e c0             	mov    %ax,%es
  101c0a:	e8 91 fd ff ff       	call   1019a0 <handle_interrupt>
  101c0f:	89 c4                	mov    %eax,%esp
  101c11:	66 b8 23 00          	mov    $0x23,%ax
  101c15:	66 8e d8             	mov    %ax,%ds
  101c18:	66 8e c0             	mov    %ax,%es
  101c1b:	58                   	pop    %eax
  101c1c:	5b                   	pop    %ebx
  101c1d:	59                   	pop    %ecx
  101c1e:	5a                   	pop    %edx
  101c1f:	5e                   	pop    %esi
  101c20:	5f                   	pop    %edi
  101c21:	5d                   	pop    %ebp
  101c22:	83 c4 08             	add    $0x8,%esp
  101c25:	cf                   	iret   
  101c26:	66 90                	xchg   %ax,%ax
  101c28:	66 90                	xchg   %ax,%ax
  101c2a:	66 90                	xchg   %ax,%ax
  101c2c:	66 90                	xchg   %ax,%ax
  101c2e:	66 90                	xchg   %ax,%ax

00101c30 <syscall>:
#include "kernel.h"
#include "vfs.h"

struct cpu_state* syscall(struct cpu_state* cpu) {
  101c30:	55                   	push   %ebp
  101c31:	89 e5                	mov    %esp,%ebp
  101c33:	83 ec 38             	sub    $0x38,%esp
  101c36:	8b 45 08             	mov    0x8(%ebp),%eax
  101c39:	89 45 fc             	mov    %eax,-0x4(%ebp)
	switch (cpu->eax) {
  101c3c:	8b 00                	mov    (%eax),%eax
  101c3e:	89 c1                	mov    %eax,%ecx
  101c40:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  101c46:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101c49:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  101c4c:	0f 8f 2d 00 00 00    	jg     101c7f <syscall+0x4f>
  101c52:	e9 00 00 00 00       	jmp    101c57 <syscall+0x27>
  101c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101c5a:	83 e8 01             	sub    $0x1,%eax
  101c5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101c60:	0f 84 3e 00 00 00    	je     101ca4 <syscall+0x74>
  101c66:	e9 00 00 00 00       	jmp    101c6b <syscall+0x3b>
  101c6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101c6e:	83 e8 02             	sub    $0x2,%eax
  101c71:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  101c74:	0f 84 3d 00 00 00    	je     101cb7 <syscall+0x87>
  101c7a:	e9 15 01 00 00       	jmp    101d94 <syscall+0x164>
  101c7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101c82:	05 37 ff ff ff       	add    $0xffffff37,%eax
  101c87:	89 c1                	mov    %eax,%ecx
  101c89:	83 e9 04             	sub    $0x4,%ecx
  101c8c:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101c8f:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  101c92:	0f 87 fc 00 00 00    	ja     101d94 <syscall+0x164>
  101c98:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101c9b:	8b 0c 85 30 60 10 00 	mov    0x106030(,%eax,4),%ecx
  101ca2:	ff e1                	jmp    *%ecx
	case 1: /* exit */
		cpu = terminate_current(cpu);
  101ca4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ca7:	89 04 24             	mov    %eax,(%esp)
  101caa:	e8 41 08 00 00       	call   1024f0 <terminate_current>
  101caf:	89 45 fc             	mov    %eax,-0x4(%ebp)
		break;
  101cb2:	e9 f7 00 00 00       	jmp    101dae <syscall+0x17e>

	case 2: /* fork */
	{
		save_cpu_state(cpu);
  101cb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101cba:	89 04 24             	mov    %eax,(%esp)
  101cbd:	e8 ee 0a 00 00       	call   1027b0 <save_cpu_state>

		uint32_t forkpdir = vmm_fork_current();
  101cc2:	e8 c9 1a 00 00       	call   103790 <vmm_fork_current>
  101cc7:	b9 00 00 00 00       	mov    $0x0,%ecx
  101ccc:	89 45 f8             	mov    %eax,-0x8(%ebp)

		struct task* ntask = init_task(forkpdir, 0);
  101ccf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101cd2:	89 04 24             	mov    %eax,(%esp)
  101cd5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101cdc:	00 
  101cdd:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  101ce0:	e8 1b 09 00 00       	call   102600 <init_task>
  101ce5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		fork_task_state(ntask);
  101ce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ceb:	89 04 24             	mov    %eax,(%esp)
  101cee:	e8 ad 08 00 00       	call   1025a0 <fork_task_state>

		cpu->eax = ntask->PID;
  101cf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101cf6:	8b 00                	mov    (%eax),%eax
  101cf8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101cfb:	89 01                	mov    %eax,(%ecx)
	}
		break;
  101cfd:	e9 ac 00 00 00       	jmp    101dae <syscall+0x17e>
  101d02:	8d 05 22 62 10 00    	lea    0x106222,%eax

	case 201: /* putc */
		cpu->eax = kprintf("%c", cpu->ebx);
  101d08:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101d0b:	8b 49 04             	mov    0x4(%ecx),%ecx
  101d0e:	89 04 24             	mov    %eax,(%esp)
  101d11:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d15:	e8 36 e8 ff ff       	call   100550 <kprintf>
  101d1a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101d1d:	89 01                	mov    %eax,(%ecx)
		break;
  101d1f:	e9 8a 00 00 00       	jmp    101dae <syscall+0x17e>
  101d24:	8d 05 92 63 10 00    	lea    0x106392,%eax
	case 202: /* puts */
		cpu->eax = kprintf("%s", cpu->ebx);
  101d2a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101d2d:	8b 49 04             	mov    0x4(%ecx),%ecx
  101d30:	89 04 24             	mov    %eax,(%esp)
  101d33:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d37:	e8 14 e8 ff ff       	call   100550 <kprintf>
  101d3c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101d3f:	89 01                	mov    %eax,(%ecx)
		break;
  101d41:	e9 68 00 00 00       	jmp    101dae <syscall+0x17e>
	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  101d46:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101d49:	8b 40 04             	mov    0x4(%eax),%eax
  101d4c:	89 04 24             	mov    %eax,(%esp)
  101d4f:	e8 8c 22 00 00       	call   103fe0 <vmm_alloc_ucont>
  101d54:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101d57:	89 01                	mov    %eax,(%ecx)
		break;
  101d59:	e9 50 00 00 00       	jmp    101dae <syscall+0x17e>
	case 204: /* vmm_free */
		cpu->eax = 0;
  101d5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101d61:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  101d67:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101d6a:	81 78 04 00 10 40 20 	cmpl   $0x20401000,0x4(%eax)
  101d71:	0f 82 0e 00 00 00    	jb     101d85 <syscall+0x155>
			vmm_free((void*) cpu->ebx);
  101d77:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101d7a:	8b 40 04             	mov    0x4(%eax),%eax
  101d7d:	89 04 24             	mov    %eax,(%esp)
  101d80:	e8 cb 20 00 00       	call   103e50 <vmm_free>
		}
		break;
  101d85:	e9 24 00 00 00       	jmp    101dae <syscall+0x17e>
	case 205: /* pmm_print_stats */
		pmm_print_stats();
  101d8a:	e8 31 02 00 00       	call   101fc0 <pmm_print_stats>
		break;
  101d8f:	e9 1a 00 00 00       	jmp    101dae <syscall+0x17e>
  101d94:	8d 05 25 62 10 00    	lea    0x106225,%eax
	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  101d9a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101d9d:	8b 09                	mov    (%ecx),%ecx
  101d9f:	89 04 24             	mov    %eax,(%esp)
  101da2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101da6:	e8 a5 e7 ff ff       	call   100550 <kprintf>
  101dab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		break;
	}

	return cpu;
  101dae:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101db1:	83 c4 38             	add    $0x38,%esp
  101db4:	5d                   	pop    %ebp
  101db5:	c3                   	ret    
  101db6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  101dbd:	00 00 00 

00101dc0 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {
  101dc0:	55                   	push   %ebp
  101dc1:	89 e5                	mov    %esp,%ebp
  101dc3:	83 ec 48             	sub    $0x48,%esp
  101dc6:	8b 45 08             	mov    0x8(%ebp),%eax
  101dc9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  101dcc:	e8 0f 25 00 00       	call   1042e0 <vmm_init>
  101dd1:	8d 0d 3b 62 10 00    	lea    0x10623b,%ecx
  101dd7:	89 45 f8             	mov    %eax,-0x8(%ebp)

    kprintf("Initializing vfs...\n");
  101dda:	89 0c 24             	mov    %ecx,(%esp)
  101ddd:	e8 6e e7 ff ff       	call   100550 <kprintf>

    vfs_init_root();
  101de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101de5:	e8 e6 15 00 00       	call   1033d0 <vfs_init_root>
  101dea:	8d 05 50 62 10 00    	lea    0x106250,%eax
  101df0:	b9 00 00 00 00       	mov    $0x0,%ecx

	vfs_create_path("/process/0", 0);
  101df5:	89 04 24             	mov    %eax,(%esp)
  101df8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101dff:	00 
  101e00:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101e03:	e8 b8 17 00 00       	call   1035c0 <vfs_create_path>
  101e08:	8d 0d 5b 62 10 00    	lea    0x10625b,%ecx
  101e0e:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_path("/process/1", 0);
  101e13:	89 0c 24             	mov    %ecx,(%esp)
  101e16:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101e1d:	00 
  101e1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101e21:	89 55 e8             	mov    %edx,-0x18(%ebp)
  101e24:	e8 97 17 00 00       	call   1035c0 <vfs_create_path>
  101e29:	8d 0d 66 62 10 00    	lea    0x106266,%ecx
  101e2f:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_path("/process/2", 0);
  101e34:	89 0c 24             	mov    %ecx,(%esp)
  101e37:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101e3e:	00 
  101e3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  101e42:	89 55 e0             	mov    %edx,-0x20(%ebp)
  101e45:	e8 76 17 00 00       	call   1035c0 <vfs_create_path>
  101e4a:	8d 0d 71 62 10 00    	lea    0x106271,%ecx
  101e50:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_path("/process/3", 0);
  101e55:	89 0c 24             	mov    %ecx,(%esp)
  101e58:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101e5f:	00 
  101e60:	89 45 dc             	mov    %eax,-0x24(%ebp)
  101e63:	89 55 d8             	mov    %edx,-0x28(%ebp)
  101e66:	e8 55 17 00 00       	call   1035c0 <vfs_create_path>
  101e6b:	8d 0d 7c 62 10 00    	lea    0x10627c,%ecx
  101e71:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_path("/process/4", 0);
  101e76:	89 0c 24             	mov    %ecx,(%esp)
  101e79:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101e80:	00 
  101e81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  101e84:	89 55 d0             	mov    %edx,-0x30(%ebp)
  101e87:	e8 34 17 00 00       	call   1035c0 <vfs_create_path>
  101e8c:	8d 0d 87 62 10 00    	lea    0x106287,%ecx
  101e92:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_path("/process/5", 0);
  101e97:	89 0c 24             	mov    %ecx,(%esp)
  101e9a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101ea1:	00 
  101ea2:	89 45 cc             	mov    %eax,-0x34(%ebp)
  101ea5:	89 55 c8             	mov    %edx,-0x38(%ebp)
  101ea8:	e8 13 17 00 00       	call   1035c0 <vfs_create_path>
  101ead:	8d 0d 92 62 10 00    	lea    0x106292,%ecx

    vfs_debug_ls("/process");
  101eb3:	89 0c 24             	mov    %ecx,(%esp)
  101eb6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101eb9:	e8 a2 15 00 00       	call   103460 <vfs_debug_ls>

	while(1);
  101ebe:	e9 fb ff ff ff       	jmp    101ebe <kernel_main+0xfe>
  101ec3:	66 90                	xchg   %ax,%ax
  101ec5:	66 90                	xchg   %ax,%ax
  101ec7:	66 90                	xchg   %ax,%ax
  101ec9:	66 90                	xchg   %ax,%ax
  101ecb:	66 90                	xchg   %ax,%ax
  101ecd:	66 90                	xchg   %ax,%ax
  101ecf:	90                   	nop

00101ed0 <pmm_alloc>:
#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
  101ed0:	55                   	push   %ebp
  101ed1:	89 e5                	mov    %esp,%ebp
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  101ed3:	56                   	push   %esi
  101ed4:	83 ec 10             	sub    $0x10,%esp
  101ed7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101ede:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  101ee5:	0f 8d b7 00 00 00    	jge    101fa2 <pmm_alloc+0xd2>
		if (allocatable[i]) {
  101eeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101eee:	81 3c 85 80 c4 10 00 	cmpl   $0x0,0x10c480(,%eax,4)
  101ef5:	00 00 00 00 
  101ef9:	0f 84 8e 00 00 00    	je     101f8d <pmm_alloc+0xbd>
			int s;
			for (s = 0; s < 32; s++) {
  101eff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101f06:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  101f0d:	0f 8d 75 00 00 00    	jge    101f88 <pmm_alloc+0xb8>
  101f13:	b8 01 00 00 00       	mov    $0x1,%eax
				if (allocatable[i] & (1 << s)) {
  101f18:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  101f1b:	8b 0c 8d 80 c4 10 00 	mov    0x10c480(,%ecx,4),%ecx
  101f22:	8b 55 f0             	mov    -0x10(%ebp),%edx
  101f25:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  101f28:	89 d1                	mov    %edx,%ecx
  101f2a:	d3 e0                	shl    %cl,%eax
  101f2c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  101f2f:	21 c2                	and    %eax,%edx
  101f31:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  101f37:	0f 84 36 00 00 00    	je     101f73 <pmm_alloc+0xa3>
  101f3d:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  101f42:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  101f45:	d3 e0                	shl    %cl,%eax
  101f47:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  101f4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101f4f:	8b 34 95 80 c4 10 00 	mov    0x10c480(,%edx,4),%esi
  101f56:	21 c6                	and    %eax,%esi
  101f58:	89 34 95 80 c4 10 00 	mov    %esi,0x10c480(,%edx,4)
					return (uint8_t*) ((i * 32 + s) * 4096);
  101f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f62:	c1 e0 05             	shl    $0x5,%eax
  101f65:	03 45 f0             	add    -0x10(%ebp),%eax
  101f68:	c1 e0 0c             	shl    $0xc,%eax
  101f6b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101f6e:	e9 36 00 00 00       	jmp    101fa9 <pmm_alloc+0xd9>
				}
			}
  101f73:	e9 00 00 00 00       	jmp    101f78 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
		if (allocatable[i]) {
			int s;
			for (s = 0; s < 32; s++) {
  101f78:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101f7b:	05 01 00 00 00       	add    $0x1,%eax
  101f80:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101f83:	e9 7e ff ff ff       	jmp    101f06 <pmm_alloc+0x36>
				if (allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
  101f88:	e9 00 00 00 00       	jmp    101f8d <pmm_alloc+0xbd>
	}
  101f8d:	e9 00 00 00 00       	jmp    101f92 <pmm_alloc+0xc2>
uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  101f92:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f95:	05 01 00 00 00       	add    $0x1,%eax
  101f9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101f9d:	e9 3c ff ff ff       	jmp    101ede <pmm_alloc+0xe>
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
	}
	return NULL ;
  101fa2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  101fa9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fac:	83 c4 10             	add    $0x10,%esp
  101faf:	5e                   	pop    %esi
  101fb0:	5d                   	pop    %ebp
  101fb1:	c3                   	ret    
  101fb2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101fb9:	1f 84 00 00 00 00 00 

00101fc0 <pmm_print_stats>:

void pmm_print_stats() {
  101fc0:	55                   	push   %ebp
  101fc1:	89 e5                	mov    %esp,%ebp
  101fc3:	56                   	push   %esi
  101fc4:	83 ec 34             	sub    $0x34,%esp
  101fc7:	b8 00 00 10 00       	mov    $0x100000,%eax
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
  101fcc:	c7 04 24 00 00 10 00 	movl   $0x100000,(%esp)
  101fd3:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101fd6:	e8 65 00 00 00       	call   102040 <pmm_get_free_space>
  101fdb:	b9 00 04 00 00       	mov    $0x400,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  101fe0:	8b 15 20 84 10 00    	mov    0x108420,%edx
  101fe6:	c1 ea 14             	shr    $0x14,%edx
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
  101fe9:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  101ff0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101ff3:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101ff6:	89 55 ec             	mov    %edx,-0x14(%ebp)
  101ff9:	e8 42 00 00 00       	call   102040 <pmm_get_free_space>
  101ffe:	8d 0d 9b 62 10 00    	lea    0x10629b,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102004:	8b 15 20 84 10 00    	mov    0x108420,%edx
  10200a:	c1 ea 0a             	shr    $0xa,%edx
  10200d:	89 0c 24             	mov    %ecx,(%esp)
  102010:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102013:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102017:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10201a:	89 74 24 08          	mov    %esi,0x8(%esp)
  10201e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  102022:	89 54 24 10          	mov    %edx,0x10(%esp)
  102026:	e8 25 e5 ff ff       	call   100550 <kprintf>
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
}
  10202b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10202e:	83 c4 34             	add    $0x34,%esp
  102031:	5e                   	pop    %esi
  102032:	5d                   	pop    %ebp
  102033:	c3                   	ret    
  102034:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10203b:	00 00 00 00 00 

00102040 <pmm_get_free_space>:

uint32_t pmm_get_free_space(uint32_t div) {
  102040:	55                   	push   %ebp
  102041:	89 e5                	mov    %esp,%ebp
  102043:	83 ec 14             	sub    $0x14,%esp
  102046:	8b 45 08             	mov    0x8(%ebp),%eax
  102049:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t free = 0;
  10204c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102053:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10205a:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102061:	0f 83 73 00 00 00    	jae    1020da <pmm_get_free_space+0x9a>
		for (uint32_t s = 0; s < 32; s++) {
  102067:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10206e:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  102075:	0f 83 4a 00 00 00    	jae    1020c5 <pmm_get_free_space+0x85>
  10207b:	b8 01 00 00 00       	mov    $0x1,%eax
			if (allocatable[i] & (1 << s))
  102080:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102083:	8b 0c 8d 80 c4 10 00 	mov    0x10c480(,%ecx,4),%ecx
  10208a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10208d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102090:	89 d1                	mov    %edx,%ecx
  102092:	d3 e0                	shl    %cl,%eax
  102094:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102097:	21 c2                	and    %eax,%edx
  102099:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  10209f:	0f 84 0b 00 00 00    	je     1020b0 <pmm_get_free_space+0x70>
				free += 0x1000;
  1020a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1020a8:	05 00 10 00 00       	add    $0x1000,%eax
  1020ad:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  1020b0:	e9 00 00 00 00       	jmp    1020b5 <pmm_get_free_space+0x75>

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
		for (uint32_t s = 0; s < 32; s++) {
  1020b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1020b8:	05 01 00 00 00       	add    $0x1,%eax
  1020bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1020c0:	e9 a9 ff ff ff       	jmp    10206e <pmm_get_free_space+0x2e>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}
  1020c5:	e9 00 00 00 00       	jmp    1020ca <pmm_get_free_space+0x8a>
}

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  1020ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1020cd:	05 01 00 00 00       	add    $0x1,%eax
  1020d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1020d5:	e9 80 ff ff ff       	jmp    10205a <pmm_get_free_space+0x1a>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}

	return free / div;
  1020da:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1020dd:	31 d2                	xor    %edx,%edx
  1020df:	f7 75 fc             	divl   -0x4(%ebp)
  1020e2:	83 c4 14             	add    $0x14,%esp
  1020e5:	5d                   	pop    %ebp
  1020e6:	c3                   	ret    
  1020e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1020ee:	00 00 

001020f0 <pmm_free>:
}

void pmm_free(void* addr) {
  1020f0:	55                   	push   %ebp
  1020f1:	89 e5                	mov    %esp,%ebp
  1020f3:	56                   	push   %esi
  1020f4:	83 ec 14             	sub    $0x14,%esp
  1020f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1020fa:	b9 01 00 00 00       	mov    $0x1,%ecx
  1020ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102102:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102105:	c1 e8 0c             	shr    $0xc,%eax
  102108:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10210b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10210e:	25 1f 00 00 00       	and    $0x1f,%eax
  102113:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102116:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102119:	c1 e8 05             	shr    $0x5,%eax
  10211c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  10211f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102122:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102125:	89 c1                	mov    %eax,%ecx
  102127:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10212a:	d3 e0                	shl    %cl,%eax
  10212c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10212f:	8b 34 95 80 c4 10 00 	mov    0x10c480(,%edx,4),%esi
  102136:	09 c6                	or     %eax,%esi
  102138:	89 34 95 80 c4 10 00 	mov    %esi,0x10c480(,%edx,4)
}
  10213f:	83 c4 14             	add    $0x14,%esp
  102142:	5e                   	pop    %esi
  102143:	5d                   	pop    %ebp
  102144:	c3                   	ret    
  102145:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10214c:	00 00 00 00 

00102150 <pmm_mark_used>:

void pmm_mark_used(void* addr) {
  102150:	55                   	push   %ebp
  102151:	89 e5                	mov    %esp,%ebp
  102153:	56                   	push   %esi
  102154:	83 ec 14             	sub    $0x14,%esp
  102157:	8b 45 08             	mov    0x8(%ebp),%eax
  10215a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10215f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102162:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102165:	c1 e8 0c             	shr    $0xc,%eax
  102168:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10216b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10216e:	25 1f 00 00 00       	and    $0x1f,%eax
  102173:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102176:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102179:	c1 e8 05             	shr    $0x5,%eax
  10217c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  10217f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102182:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102185:	89 c1                	mov    %eax,%ecx
  102187:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10218a:	d3 e0                	shl    %cl,%eax
  10218c:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  102191:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102194:	8b 34 95 80 c4 10 00 	mov    0x10c480(,%edx,4),%esi
  10219b:	21 c6                	and    %eax,%esi
  10219d:	89 34 95 80 c4 10 00 	mov    %esi,0x10c480(,%edx,4)
}
  1021a4:	83 c4 14             	add    $0x14,%esp
  1021a7:	5e                   	pop    %esi
  1021a8:	5d                   	pop    %ebp
  1021a9:	c3                   	ret    
  1021aa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001021b0 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  1021b0:	55                   	push   %ebp
  1021b1:	89 e5                	mov    %esp,%ebp
  1021b3:	53                   	push   %ebx
  1021b4:	57                   	push   %edi
  1021b5:	56                   	push   %esi
  1021b6:	83 ec 5c             	sub    $0x5c,%esp
  1021b9:	8b 45 08             	mov    0x8(%ebp),%eax
  1021bc:	8d 0d d8 62 10 00    	lea    0x1062d8,%ecx
  1021c2:	8d 15 80 c4 10 00    	lea    0x10c480,%edx
  1021c8:	89 d6                	mov    %edx,%esi
  1021ca:	81 c6 00 00 02 00    	add    $0x20000,%esi
  1021d0:	89 d7                	mov    %edx,%edi
  1021d2:	bb 00 00 00 00       	mov    $0x0,%ebx
  1021d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1021da:	b8 00 00 02 00       	mov    $0x20000,%eax
  1021df:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1021e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1021e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  1021e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1021eb:	8b 40 30             	mov    0x30(%eax),%eax
  1021ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  1021f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1021f4:	8b 40 30             	mov    0x30(%eax),%eax
  1021f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1021fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1021fd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102200:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102203:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  102206:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  102209:	03 41 2c             	add    0x2c(%ecx),%eax
  10220c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			+ mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  10220f:	89 3c 24             	mov    %edi,(%esp)
  102212:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102219:	00 
  10221a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  102221:	00 
  102222:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  102225:	89 55 b8             	mov    %edx,-0x48(%ebp)
  102228:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  10222b:	e8 e0 0c 00 00       	call   102f10 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  102230:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102233:	89 04 24             	mov    %eax,(%esp)
  102236:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102239:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10223d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  102240:	89 54 24 08          	mov    %edx,0x8(%esp)
  102244:	e8 07 e3 ff ff       	call   100550 <kprintf>
  102249:	89 45 b0             	mov    %eax,-0x50(%ebp)

	while (mmap < mmap_end) {
  10224c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10224f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  102252:	0f 83 77 00 00 00    	jae    1022cf <pmm_init+0x11f>
		if (mmap->mm_type == 1) {
  102258:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10225b:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  102262:	0f 85 57 00 00 00    	jne    1022bf <pmm_init+0x10f>
			uintptr_t addr = mmap->mm_base_addr;
  102268:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10226b:	8b 40 04             	mov    0x4(%eax),%eax
  10226e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uintptr_t end_addr = addr + mmap->mm_length;
  102271:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102274:	8b 49 0c             	mov    0xc(%ecx),%ecx
  102277:	01 c8                	add    %ecx,%eax
  102279:	89 45 e0             	mov    %eax,-0x20(%ebp)

			while (addr < end_addr) {
  10227c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10227f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  102282:	0f 83 32 00 00 00    	jae    1022ba <pmm_init+0x10a>
				pmm_free((void*) addr);
  102288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10228b:	89 04 24             	mov    %eax,(%esp)
  10228e:	e8 5d fe ff ff       	call   1020f0 <pmm_free>
				if (addr > upper_limit)
  102293:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102296:	3b 05 20 84 10 00    	cmp    0x108420,%eax
  10229c:	0f 86 08 00 00 00    	jbe    1022aa <pmm_init+0xfa>
					upper_limit = addr;
  1022a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1022a5:	a3 20 84 10 00       	mov    %eax,0x108420
				addr += 0x1000;
  1022aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1022ad:	05 00 10 00 00       	add    $0x1000,%eax
  1022b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			}
  1022b5:	e9 c2 ff ff ff       	jmp    10227c <pmm_init+0xcc>
		}
  1022ba:	e9 00 00 00 00       	jmp    1022bf <pmm_init+0x10f>
		mmap++;
  1022bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1022c2:	05 18 00 00 00       	add    $0x18,%eax
  1022c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  1022ca:	e9 7d ff ff ff       	jmp    10224c <pmm_init+0x9c>
  1022cf:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
  1022d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1022d8:	8d 05 00 d0 12 00    	lea    0x12d000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  1022de:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  1022e1:	0f 83 1b 00 00 00    	jae    102302 <pmm_init+0x152>
		pmm_mark_used((void*) addr);
  1022e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1022ea:	89 04 24             	mov    %eax,(%esp)
  1022ed:	e8 5e fe ff ff       	call   102150 <pmm_mark_used>
		addr += 0x1000;
  1022f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1022f5:	05 00 10 00 00       	add    $0x1000,%eax
  1022fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  1022fd:	e9 d6 ff ff ff       	jmp    1022d8 <pmm_init+0x128>

	struct multiboot_module* modules = mb_info->mi_mods_addr;
  102302:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102305:	8b 40 18             	mov    0x18(%eax),%eax
  102308:	89 45 d8             	mov    %eax,-0x28(%ebp)

	pmm_mark_used(mb_info);
  10230b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10230e:	89 04 24             	mov    %eax,(%esp)
  102311:	e8 3a fe ff ff       	call   102150 <pmm_mark_used>
	pmm_mark_used(modules);
  102316:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102319:	89 04 24             	mov    %eax,(%esp)
  10231c:	e8 2f fe ff ff       	call   102150 <pmm_mark_used>

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  102321:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102328:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10232b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10232e:	3b 41 14             	cmp    0x14(%ecx),%eax
  102331:	0f 83 59 00 00 00    	jae    102390 <pmm_init+0x1e0>
		addr = (uintptr_t) modules[i].start;
  102337:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10233a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10233d:	c1 e0 04             	shl    $0x4,%eax
  102340:	01 c1                	add    %eax,%ecx
  102342:	8b 01                	mov    (%ecx),%eax
  102344:	89 45 dc             	mov    %eax,-0x24(%ebp)
		while (addr < (uintptr_t) modules[i].end) {
  102347:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10234a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10234d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102350:	c1 e1 04             	shl    $0x4,%ecx
  102353:	01 ca                	add    %ecx,%edx
  102355:	8b 4a 04             	mov    0x4(%edx),%ecx
  102358:	39 c8                	cmp    %ecx,%eax
  10235a:	0f 83 1b 00 00 00    	jae    10237b <pmm_init+0x1cb>
			pmm_mark_used((void*) addr);
  102360:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102363:	89 04 24             	mov    %eax,(%esp)
  102366:	e8 e5 fd ff ff       	call   102150 <pmm_mark_used>
			addr += 0x1000;
  10236b:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10236e:	05 00 10 00 00       	add    $0x1000,%eax
  102373:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
  102376:	e9 cc ff ff ff       	jmp    102347 <pmm_init+0x197>
	}
  10237b:	e9 00 00 00 00       	jmp    102380 <pmm_init+0x1d0>

	pmm_mark_used(mb_info);
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  102380:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102383:	05 01 00 00 00       	add    $0x1,%eax
  102388:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10238b:	e9 98 ff ff ff       	jmp    102328 <pmm_init+0x178>
		while (addr < (uintptr_t) modules[i].end) {
			pmm_mark_used((void*) addr);
			addr += 0x1000;
		}
	}
}
  102390:	83 c4 5c             	add    $0x5c,%esp
  102393:	5e                   	pop    %esi
  102394:	5f                   	pop    %edi
  102395:	5b                   	pop    %ebx
  102396:	5d                   	pop    %ebp
  102397:	c3                   	ret    
  102398:	66 90                	xchg   %ax,%ax
  10239a:	66 90                	xchg   %ax,%ax
  10239c:	66 90                	xchg   %ax,%ax
  10239e:	66 90                	xchg   %ax,%ax

001023a0 <enable_scheduling>:
struct task* first_task = 0;
struct task* current_task = 0;

int nextPID = 1;

void enable_scheduling(void) {
  1023a0:	55                   	push   %ebp
  1023a1:	89 e5                	mov    %esp,%ebp
    sched_enabled = 1;
  1023a3:	c7 05 24 84 10 00 01 	movl   $0x1,0x108424
  1023aa:	00 00 00 
}
  1023ad:	5d                   	pop    %ebp
  1023ae:	c3                   	ret    
  1023af:	90                   	nop

001023b0 <scheduling_enabled>:

uint32_t scheduling_enabled(void) {
  1023b0:	55                   	push   %ebp
  1023b1:	89 e5                	mov    %esp,%ebp
    return sched_enabled;
  1023b3:	a1 24 84 10 00       	mov    0x108424,%eax
  1023b8:	5d                   	pop    %ebp
  1023b9:	c3                   	ret    
  1023ba:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001023c0 <schedule_exception>:
}

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  1023c0:	55                   	push   %ebp
  1023c1:	89 e5                	mov    %esp,%ebp
  1023c3:	56                   	push   %esi
  1023c4:	83 ec 34             	sub    $0x34,%esp
  1023c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1023ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (current_task == first_task && current_task->next == 0) {
  1023cd:	a1 2c 84 10 00       	mov    0x10842c,%eax
  1023d2:	3b 05 28 84 10 00    	cmp    0x108428,%eax
  1023d8:	0f 85 71 00 00 00    	jne    10244f <schedule_exception+0x8f>
  1023de:	a1 2c 84 10 00       	mov    0x10842c,%eax
  1023e3:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  1023ea:	0f 85 5f 00 00 00    	jne    10244f <schedule_exception+0x8f>
  1023f0:	b8 04 00 00 00       	mov    $0x4,%eax
        //Only one process is running, which just crashed. Stop system.
        setclr(0x04);
  1023f5:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1023fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1023ff:	e8 2c e1 ff ff       	call   100530 <setclr>
  102404:	8d 05 ee 62 10 00    	lea    0x1062ee,%eax
        kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n",
  10240a:	8b 0d 2c 84 10 00    	mov    0x10842c,%ecx
  102410:	8b 09                	mov    (%ecx),%ecx
  102412:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102415:	8b 52 1c             	mov    0x1c(%edx),%edx
  102418:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10241b:	8b 76 20             	mov    0x20(%esi),%esi
  10241e:	89 04 24             	mov    %eax,(%esp)
  102421:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102425:	89 54 24 08          	mov    %edx,0x8(%esp)
  102429:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10242d:	e8 1e e1 ff ff       	call   100550 <kprintf>
  102432:	8d 0d 22 63 10 00    	lea    0x106322,%ecx
                current_task->PID, cpu->intr, cpu->error);
        show_cod(cpu, "Last task crashed. Terminating kernel...");
  102438:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10243b:	89 14 24             	mov    %edx,(%esp)
  10243e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102442:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102445:	e8 26 df ff ff       	call   100370 <show_cod>
    } else {
  10244a:	e9 88 00 00 00       	jmp    1024d7 <schedule_exception+0x117>
  10244f:	b8 04 00 00 00       	mov    $0x4,%eax
        //Potential security leaks available in following code.
        setclr(0x04);
  102454:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10245b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10245e:	e8 cd e0 ff ff       	call   100530 <setclr>
  102463:	8d 05 ee 62 10 00    	lea    0x1062ee,%eax
        kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n",
  102469:	8b 0d 2c 84 10 00    	mov    0x10842c,%ecx
  10246f:	8b 09                	mov    (%ecx),%ecx
  102471:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102474:	8b 52 1c             	mov    0x1c(%edx),%edx
  102477:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10247a:	8b 76 20             	mov    0x20(%esi),%esi
  10247d:	89 04 24             	mov    %eax,(%esp)
  102480:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102484:	89 54 24 08          	mov    %edx,0x8(%esp)
  102488:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10248c:	e8 bf e0 ff ff       	call   100550 <kprintf>
  102491:	8d 0d de 63 10 00    	lea    0x1063de,%ecx
                current_task->PID, cpu->intr, cpu->error);
        kprintf("\n");
  102497:	89 0c 24             	mov    %ecx,(%esp)
  10249a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10249d:	e8 ae e0 ff ff       	call   100550 <kprintf>
        show_dump(cpu);
  1024a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1024a5:	89 0c 24             	mov    %ecx,(%esp)
  1024a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1024ab:	e8 30 df ff ff       	call   1003e0 <show_dump>
  1024b0:	b8 07 00 00 00       	mov    $0x7,%eax
        setclr(0x07);
  1024b5:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1024bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1024bf:	e8 6c e0 ff ff       	call   100530 <setclr>

        return terminate_current(cpu);
  1024c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024c7:	89 04 24             	mov    %eax,(%esp)
  1024ca:	e8 21 00 00 00       	call   1024f0 <terminate_current>
  1024cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1024d2:	e9 06 00 00 00       	jmp    1024dd <schedule_exception+0x11d>
    }
    return cpu;
  1024d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024da:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  1024dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1024e0:	83 c4 34             	add    $0x34,%esp
  1024e3:	5e                   	pop    %esi
  1024e4:	5d                   	pop    %ebp
  1024e5:	c3                   	ret    
  1024e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1024ed:	00 00 00 

001024f0 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  1024f0:	55                   	push   %ebp
  1024f1:	89 e5                	mov    %esp,%ebp
  1024f3:	83 ec 18             	sub    $0x18,%esp
  1024f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1024f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct task* next = current_task->next;
  1024fc:	a1 2c 84 10 00       	mov    0x10842c,%eax
  102501:	8b 40 08             	mov    0x8(%eax),%eax
  102504:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* prev = current_task->prev;
  102507:	a1 2c 84 10 00       	mov    0x10842c,%eax
  10250c:	8b 40 0c             	mov    0xc(%eax),%eax
  10250f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //TODO: free resources here

    if (current_task == first_task) {
  102512:	a1 2c 84 10 00       	mov    0x10842c,%eax
  102517:	3b 05 28 84 10 00    	cmp    0x108428,%eax
  10251d:	0f 85 0d 00 00 00    	jne    102530 <terminate_current+0x40>
        first_task = current_task->next;
  102523:	a1 2c 84 10 00       	mov    0x10842c,%eax
  102528:	8b 40 08             	mov    0x8(%eax),%eax
  10252b:	a3 28 84 10 00       	mov    %eax,0x108428
    }

    if (next != 0) {
  102530:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  102537:	0f 84 09 00 00 00    	je     102546 <terminate_current+0x56>
        next->prev = prev;
  10253d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102540:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102543:	89 41 0c             	mov    %eax,0xc(%ecx)
    }

    if (prev != 0) {
  102546:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10254d:	0f 84 09 00 00 00    	je     10255c <terminate_current+0x6c>
        prev->next = next;
  102553:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102556:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102559:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    //TODO: handle if all tasks are closed

    if (next == 0)
  10255c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  102563:	0f 85 08 00 00 00    	jne    102571 <terminate_current+0x81>
        next = first_task;
  102569:	a1 28 84 10 00       	mov    0x108428,%eax
  10256e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task = next;
  102571:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102574:	a3 2c 84 10 00       	mov    %eax,0x10842c
    vmm_activate_pagedir(current_task->phys_pdir);
  102579:	a1 2c 84 10 00       	mov    0x10842c,%eax
  10257e:	8b 40 14             	mov    0x14(%eax),%eax
  102581:	89 04 24             	mov    %eax,(%esp)
  102584:	e8 37 1d 00 00       	call   1042c0 <vmm_activate_pagedir>
    return current_task->cpu_state;
  102589:	a1 2c 84 10 00       	mov    0x10842c,%eax
  10258e:	8b 40 04             	mov    0x4(%eax),%eax
  102591:	83 c4 18             	add    $0x18,%esp
  102594:	5d                   	pop    %ebp
  102595:	c3                   	ret    
  102596:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10259d:	00 00 00 

001025a0 <fork_task_state>:
}

void fork_task_state(struct task* new_task) {
  1025a0:	55                   	push   %ebp
  1025a1:	89 e5                	mov    %esp,%ebp
  1025a3:	83 ec 18             	sub    $0x18,%esp
  1025a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1025a9:	b9 38 00 00 00       	mov    $0x38,%ecx
  1025ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
    new_task->user_stack_bottom = current_task->user_stack_bottom;
  1025b1:	a1 2c 84 10 00       	mov    0x10842c,%eax
  1025b6:	8b 40 10             	mov    0x10(%eax),%eax
  1025b9:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1025bc:	89 42 10             	mov    %eax,0x10(%edx)

    memcpy(new_task->cpu_state, current_task->cpu_state,
  1025bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025c2:	8b 40 04             	mov    0x4(%eax),%eax
  1025c5:	8b 15 2c 84 10 00    	mov    0x10842c,%edx
  1025cb:	8b 52 04             	mov    0x4(%edx),%edx
  1025ce:	89 04 24             	mov    %eax,(%esp)
  1025d1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1025d5:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1025dc:	00 
  1025dd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1025e0:	e8 8b 09 00 00       	call   102f70 <memcpy>
            sizeof(struct cpu_state));

    new_task->cpu_state->eax = 0;
  1025e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1025e8:	8b 40 04             	mov    0x4(%eax),%eax
  1025eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
  1025f1:	83 c4 18             	add    $0x18,%esp
  1025f4:	5d                   	pop    %ebp
  1025f5:	c3                   	ret    
  1025f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1025fd:	00 00 00 

00102600 <init_task>:

struct task* init_task(uint32_t task_pagedir, void* entry) {
  102600:	55                   	push   %ebp
  102601:	89 e5                	mov    %esp,%ebp
  102603:	83 ec 68             	sub    $0x68,%esp
  102606:	8b 45 0c             	mov    0xc(%ebp),%eax
  102609:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10260c:	ba 18 00 00 00       	mov    $0x18,%edx
  102611:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  102614:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* ntask = malloc(sizeof(struct task));
  102617:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
  10261e:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  102621:	e8 9a 02 00 00       	call   1028c0 <malloc>
  102626:	b9 38 00 00 00       	mov    $0x38,%ecx
  10262b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ntask->cpu_state = malloc(sizeof(struct cpu_state));
  10262e:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  102635:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  102638:	e8 83 02 00 00       	call   1028c0 <malloc>
  10263d:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  102642:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102645:	89 42 04             	mov    %eax,0x4(%edx)

    ntask->phys_pdir = task_pagedir;
  102648:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10264b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10264e:	89 42 14             	mov    %eax,0x14(%edx)
    ntask->user_stack_bottom = (void*) 0xFFFFE000;
  102651:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102654:	89 48 10             	mov    %ecx,0x10(%eax)
    ntask->PID = nextPID++;
  102657:	a1 88 51 10 00       	mov    0x105188,%eax
  10265c:	89 c1                	mov    %eax,%ecx
  10265e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102664:	89 0d 88 51 10 00    	mov    %ecx,0x105188
  10266a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10266d:	89 01                	mov    %eax,(%ecx)

    ntask->next = (void*) 0;
  10266f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102672:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    ntask->prev = (void*) 0;
  102679:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10267c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    if (first_task == 0) {
  102683:	81 3d 28 84 10 00 00 	cmpl   $0x0,0x108428
  10268a:	00 00 00 
  10268d:	0f 85 0d 00 00 00    	jne    1026a0 <init_task+0xa0>
        first_task = ntask;
  102693:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102696:	a3 28 84 10 00       	mov    %eax,0x108428
    } else {
  10269b:	e9 1f 00 00 00       	jmp    1026bf <init_task+0xbf>
        ntask->next = first_task;
  1026a0:	a1 28 84 10 00       	mov    0x108428,%eax
  1026a5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1026a8:	89 41 08             	mov    %eax,0x8(%ecx)
        first_task->prev = ntask;
  1026ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026ae:	8b 0d 28 84 10 00    	mov    0x108428,%ecx
  1026b4:	89 41 0c             	mov    %eax,0xc(%ecx)
        first_task = ntask;
  1026b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1026ba:	a3 28 84 10 00       	mov    %eax,0x108428
    }

    uint32_t rest_pdir = vmm_get_current_pagedir();
  1026bf:	e8 bc 10 00 00       	call   103780 <vmm_get_current_pagedir>
  1026c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    vmm_activate_pagedir(task_pagedir);
  1026c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1026ca:	89 04 24             	mov    %eax,(%esp)
  1026cd:	e8 ee 1b 00 00       	call   1042c0 <vmm_activate_pagedir>

    if (entry != 0) { //entry == 0 means that this will be forked
  1026d2:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1026d9:	0f 84 21 00 00 00    	je     102700 <init_task+0x100>
  1026df:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_alloc_addr(ntask->user_stack_bottom, 0);
  1026e4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1026e7:	8b 49 10             	mov    0x10(%ecx),%ecx
  1026ea:	89 0c 24             	mov    %ecx,(%esp)
  1026ed:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1026f4:	00 
  1026f5:	89 45 ac             	mov    %eax,-0x54(%ebp)
  1026f8:	e8 c3 1a 00 00       	call   1041c0 <vmm_alloc_addr>
  1026fd:	89 45 a8             	mov    %eax,-0x58(%ebp)
  102700:	b8 38 00 00 00       	mov    $0x38,%eax
  102705:	8d 4d b8             	lea    -0x48(%ebp),%ecx
    }

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  102708:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10270f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  102716:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  10271d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  102724:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  10272b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  102732:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  102739:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102740:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  102747:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10274a:	89 55 dc             	mov    %edx,-0x24(%ebp)
  10274d:	c7 45 e0 1b 00 00 00 	movl   $0x1b,-0x20(%ebp)
  102754:	c7 45 e4 00 02 00 00 	movl   $0x200,-0x1c(%ebp)
  10275b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10275e:	8b 52 10             	mov    0x10(%edx),%edx
  102761:	81 c2 00 10 00 00    	add    $0x1000,%edx
  102767:	89 55 e8             	mov    %edx,-0x18(%ebp)
  10276a:	c7 45 ec 23 00 00 00 	movl   $0x23,-0x14(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(ntask->cpu_state, &nstate, sizeof(struct cpu_state));
  102771:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102774:	8b 52 04             	mov    0x4(%edx),%edx
  102777:	89 14 24             	mov    %edx,(%esp)
  10277a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10277e:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  102785:	00 
  102786:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  102789:	e8 e2 07 00 00       	call   102f70 <memcpy>

    vmm_activate_pagedir(rest_pdir);
  10278e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102791:	89 04 24             	mov    %eax,(%esp)
  102794:	e8 27 1b 00 00       	call   1042c0 <vmm_activate_pagedir>

    return ntask;
  102799:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10279c:	83 c4 68             	add    $0x68,%esp
  10279f:	5d                   	pop    %ebp
  1027a0:	c3                   	ret    
  1027a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1027a8:	0f 1f 84 00 00 00 00 
  1027af:	00 

001027b0 <save_cpu_state>:
}

void save_cpu_state(struct cpu_state* cpu) {
  1027b0:	55                   	push   %ebp
  1027b1:	89 e5                	mov    %esp,%ebp
  1027b3:	83 ec 18             	sub    $0x18,%esp
  1027b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1027b9:	b9 38 00 00 00       	mov    $0x38,%ecx
  1027be:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memcpy(current_task->cpu_state, cpu, sizeof(struct cpu_state));
  1027c1:	a1 2c 84 10 00       	mov    0x10842c,%eax
  1027c6:	8b 40 04             	mov    0x4(%eax),%eax
  1027c9:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1027cc:	89 04 24             	mov    %eax,(%esp)
  1027cf:	89 54 24 04          	mov    %edx,0x4(%esp)
  1027d3:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  1027da:	00 
  1027db:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1027de:	e8 8d 07 00 00       	call   102f70 <memcpy>
}
  1027e3:	83 c4 18             	add    $0x18,%esp
  1027e6:	5d                   	pop    %ebp
  1027e7:	c3                   	ret    
  1027e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  1027ef:	00 

001027f0 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu) {
  1027f0:	55                   	push   %ebp
  1027f1:	89 e5                	mov    %esp,%ebp
  1027f3:	83 ec 18             	sub    $0x18,%esp
  1027f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1027f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (first_task != 0 && sched_enabled) {
  1027fc:	81 3d 28 84 10 00 00 	cmpl   $0x0,0x108428
  102803:	00 00 00 
  102806:	0f 84 9d 00 00 00    	je     1028a9 <schedule+0xb9>
  10280c:	81 3d 24 84 10 00 00 	cmpl   $0x0,0x108424
  102813:	00 00 00 
  102816:	0f 84 8d 00 00 00    	je     1028a9 <schedule+0xb9>
        if (current_task == 0) {
  10281c:	81 3d 2c 84 10 00 00 	cmpl   $0x0,0x10842c
  102823:	00 00 00 
  102826:	0f 85 2a 00 00 00    	jne    102856 <schedule+0x66>
            current_task = first_task;
  10282c:	a1 28 84 10 00       	mov    0x108428,%eax
  102831:	a3 2c 84 10 00       	mov    %eax,0x10842c
            vmm_activate_pagedir(current_task->phys_pdir);
  102836:	a1 2c 84 10 00       	mov    0x10842c,%eax
  10283b:	8b 40 14             	mov    0x14(%eax),%eax
  10283e:	89 04 24             	mov    %eax,(%esp)
  102841:	e8 7a 1a 00 00       	call   1042c0 <vmm_activate_pagedir>
            return current_task->cpu_state;
  102846:	a1 2c 84 10 00       	mov    0x10842c,%eax
  10284b:	8b 40 04             	mov    0x4(%eax),%eax
  10284e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102851:	e9 59 00 00 00       	jmp    1028af <schedule+0xbf>
        }

        struct task* next = current_task->next;
  102856:	a1 2c 84 10 00       	mov    0x10842c,%eax
  10285b:	8b 40 08             	mov    0x8(%eax),%eax
  10285e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (next == 0)
  102861:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  102868:	0f 85 08 00 00 00    	jne    102876 <schedule+0x86>
            next = first_task;
  10286e:	a1 28 84 10 00       	mov    0x108428,%eax
  102873:	89 45 f4             	mov    %eax,-0xc(%ebp)

        save_cpu_state(cpu);
  102876:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102879:	89 04 24             	mov    %eax,(%esp)
  10287c:	e8 2f ff ff ff       	call   1027b0 <save_cpu_state>

        current_task = next;
  102881:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102884:	a3 2c 84 10 00       	mov    %eax,0x10842c
        vmm_activate_pagedir(current_task->phys_pdir);
  102889:	a1 2c 84 10 00       	mov    0x10842c,%eax
  10288e:	8b 40 14             	mov    0x14(%eax),%eax
  102891:	89 04 24             	mov    %eax,(%esp)
  102894:	e8 27 1a 00 00       	call   1042c0 <vmm_activate_pagedir>
        return current_task->cpu_state;
  102899:	a1 2c 84 10 00       	mov    0x10842c,%eax
  10289e:	8b 40 04             	mov    0x4(%eax),%eax
  1028a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1028a4:	e9 06 00 00 00       	jmp    1028af <schedule+0xbf>
    }
    return cpu;
  1028a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1028af:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1028b2:	83 c4 18             	add    $0x18,%esp
  1028b5:	5d                   	pop    %ebp
  1028b6:	c3                   	ret    
  1028b7:	66 90                	xchg   %ax,%ax
  1028b9:	66 90                	xchg   %ax,%ax
  1028bb:	66 90                	xchg   %ax,%ax
  1028bd:	66 90                	xchg   %ax,%ax
  1028bf:	90                   	nop

001028c0 <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
  1028c0:	55                   	push   %ebp
  1028c1:	89 e5                	mov    %esp,%ebp
  1028c3:	83 ec 38             	sub    $0x38,%esp
  1028c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1028c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct memory_node* last = 0;
  1028cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = first_free;
  1028d3:	a1 38 84 10 00       	mov    0x108438,%eax
  1028d8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  1028db:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1028e2:	0f 84 27 00 00 00    	je     10290f <malloc+0x4f>
        if (cur->size >= size) {
  1028e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028eb:	8b 00                	mov    (%eax),%eax
  1028ed:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1028f0:	0f 82 05 00 00 00    	jb     1028fb <malloc+0x3b>
            break;
  1028f6:	e9 14 00 00 00       	jmp    10290f <malloc+0x4f>
        }
        last = cur;
  1028fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1028fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  102901:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102904:	8b 40 08             	mov    0x8(%eax),%eax
  102907:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  10290a:	e9 cc ff ff ff       	jmp    1028db <malloc+0x1b>

    if (cur == 0) {
  10290f:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  102916:	0f 85 be 00 00 00    	jne    1029da <malloc+0x11a>
        uint32_t pgs = size / PAGESIZE;
  10291c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10291f:	c1 e8 0c             	shr    $0xc,%eax
  102922:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if ((size % PAGESIZE) != 0)
  102925:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102928:	25 ff 0f 00 00       	and    $0xfff,%eax
  10292d:	3d 00 00 00 00       	cmp    $0x0,%eax
  102932:	0f 84 0b 00 00 00    	je     102943 <malloc+0x83>
            pgs++;
  102938:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10293b:	05 01 00 00 00       	add    $0x1,%eax
  102940:	89 45 ec             	mov    %eax,-0x14(%ebp)

        void* addr = vmm_alloc_cont(pgs);
  102943:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102946:	89 04 24             	mov    %eax,(%esp)
  102949:	e8 22 18 00 00       	call   104170 <vmm_alloc_cont>
  10294e:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
  102951:	e8 7a 04 00 00       	call   102dd0 <pop_unused_node>
  102956:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
  102959:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10295c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10295f:	89 41 04             	mov    %eax,0x4(%ecx)
        fill->size = (uint32_t) size;
  102962:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102965:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  102968:	89 01                	mov    %eax,(%ecx)

        if (pgs * PAGESIZE > size) {
  10296a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10296d:	c1 e0 0c             	shl    $0xc,%eax
  102970:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  102973:	0f 86 3e 00 00 00    	jbe    1029b7 <malloc+0xf7>
            struct memory_node* free = pop_unused_node();
  102979:	e8 52 04 00 00       	call   102dd0 <pop_unused_node>
  10297e:	8d 0d 38 84 10 00    	lea    0x108438,%ecx
  102984:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
  102987:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10298a:	8b 40 04             	mov    0x4(%eax),%eax
  10298d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  102990:	03 02                	add    (%edx),%eax
  102992:	8b 55 e0             	mov    -0x20(%ebp),%edx
  102995:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = size - pgs * PAGESIZE;
  102998:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10299b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10299e:	c1 e2 0c             	shl    $0xc,%edx
  1029a1:	29 d0                	sub    %edx,%eax
  1029a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1029a6:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  1029a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1029ab:	89 0c 24             	mov    %ecx,(%esp)
  1029ae:	89 44 24 04          	mov    %eax,0x4(%esp)
  1029b2:	e8 b9 00 00 00       	call   102a70 <append_to_list>
  1029b7:	8d 05 34 84 10 00    	lea    0x108434,%eax
        }

        append_to_list(&first_used, fill);
  1029bd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1029c0:	89 04 24             	mov    %eax,(%esp)
  1029c3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1029c7:	e8 a4 00 00 00       	call   102a70 <append_to_list>

        return (void*) fill->address;
  1029cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1029cf:	8b 40 04             	mov    0x4(%eax),%eax
  1029d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1029d5:	e9 8c 00 00 00       	jmp    102a66 <malloc+0x1a6>
    } else {
        uint32_t freesize = size - cur->size;
  1029da:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1029dd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1029e0:	8b 09                	mov    (%ecx),%ecx
  1029e2:	29 c8                	sub    %ecx,%eax
  1029e4:	89 45 dc             	mov    %eax,-0x24(%ebp)

        cur->size = size;
  1029e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1029ea:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1029ed:	89 01                	mov    %eax,(%ecx)

        remove_from_list(&first_free, cur);
  1029ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1029f2:	89 e1                	mov    %esp,%ecx
  1029f4:	89 41 04             	mov    %eax,0x4(%ecx)
  1029f7:	c7 01 38 84 10 00    	movl   $0x108438,(%ecx)
  1029fd:	e8 9e 00 00 00       	call   102aa0 <remove_from_list>
        append_to_list(&first_used, cur);
  102a02:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a05:	89 e1                	mov    %esp,%ecx
  102a07:	89 41 04             	mov    %eax,0x4(%ecx)
  102a0a:	c7 01 34 84 10 00    	movl   $0x108434,(%ecx)
  102a10:	e8 5b 00 00 00       	call   102a70 <append_to_list>

        if (free > 0) {
  102a15:	b8 30 2b 10 00       	mov    $0x102b30,%eax
  102a1a:	85 c0                	test   %eax,%eax
  102a1c:	0f 84 3b 00 00 00    	je     102a5d <malloc+0x19d>
  102a22:	e9 00 00 00 00       	jmp    102a27 <malloc+0x167>
            struct memory_node* free = pop_unused_node();
  102a27:	e8 a4 03 00 00       	call   102dd0 <pop_unused_node>
  102a2c:	8d 0d 38 84 10 00    	lea    0x108438,%ecx
  102a32:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
  102a35:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a38:	8b 40 04             	mov    0x4(%eax),%eax
  102a3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102a3e:	03 02                	add    (%edx),%eax
  102a40:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102a43:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = freesize;
  102a46:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102a49:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102a4c:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  102a4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102a51:	89 0c 24             	mov    %ecx,(%esp)
  102a54:	89 44 24 04          	mov    %eax,0x4(%esp)
  102a58:	e8 13 00 00 00       	call   102a70 <append_to_list>
        }

        return (void*) cur->address;
  102a5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a60:	8b 40 04             	mov    0x4(%eax),%eax
  102a63:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  102a66:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a69:	83 c4 38             	add    $0x38,%esp
  102a6c:	5d                   	pop    %ebp
  102a6d:	c3                   	ret    
  102a6e:	66 90                	xchg   %ax,%ax

00102a70 <append_to_list>:
        cur = cur->next;
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
  102a70:	55                   	push   %ebp
  102a71:	89 e5                	mov    %esp,%ebp
  102a73:	83 ec 08             	sub    $0x8,%esp
  102a76:	8b 45 0c             	mov    0xc(%ebp),%eax
  102a79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102a7c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  102a7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    element->next = *root;
  102a82:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a85:	8b 00                	mov    (%eax),%eax
  102a87:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102a8a:	89 41 08             	mov    %eax,0x8(%ecx)
    *root = element;
  102a8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102a90:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102a93:	89 01                	mov    %eax,(%ecx)
}
  102a95:	83 c4 08             	add    $0x8,%esp
  102a98:	5d                   	pop    %ebp
  102a99:	c3                   	ret    
  102a9a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00102aa0 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
  102aa0:	55                   	push   %ebp
  102aa1:	89 e5                	mov    %esp,%ebp
  102aa3:	83 ec 10             	sub    $0x10,%esp
  102aa6:	8b 45 0c             	mov    0xc(%ebp),%eax
  102aa9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102aac:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  102aaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct memory_node* last = 0;
  102ab2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = *root;
  102ab9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102abc:	8b 00                	mov    (%eax),%eax
  102abe:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  102ac1:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  102ac8:	0f 84 4e 00 00 00    	je     102b1c <remove_from_list+0x7c>
        if (cur == element) {
  102ace:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ad1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  102ad4:	0f 85 2e 00 00 00    	jne    102b08 <remove_from_list+0x68>
            if (last == 0) {
  102ada:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  102ae1:	0f 85 10 00 00 00    	jne    102af7 <remove_from_list+0x57>
                *root = cur->next;
  102ae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102aea:	8b 40 08             	mov    0x8(%eax),%eax
  102aed:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102af0:	89 01                	mov    %eax,(%ecx)
                return;
  102af2:	e9 25 00 00 00       	jmp    102b1c <remove_from_list+0x7c>
            } else {
                last->next = cur->next;
  102af7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102afa:	8b 40 08             	mov    0x8(%eax),%eax
  102afd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102b00:	89 41 08             	mov    %eax,0x8(%ecx)
                return;
  102b03:	e9 14 00 00 00       	jmp    102b1c <remove_from_list+0x7c>
            }
        }
        last = cur;
  102b08:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  102b0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b11:	8b 40 08             	mov    0x8(%eax),%eax
  102b14:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  102b17:	e9 a5 ff ff ff       	jmp    102ac1 <remove_from_list+0x21>
}
  102b1c:	83 c4 10             	add    $0x10,%esp
  102b1f:	5d                   	pop    %ebp
  102b20:	c3                   	ret    
  102b21:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102b28:	0f 1f 84 00 00 00 00 
  102b2f:	00 

00102b30 <free>:
        cur = cur->next;
    }
    return 0;
}

void free(void* ptr) {
  102b30:	55                   	push   %ebp
  102b31:	89 e5                	mov    %esp,%ebp
  102b33:	83 ec 18             	sub    $0x18,%esp
  102b36:	8b 45 08             	mov    0x8(%ebp),%eax
  102b39:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* last = 0;
  102b3c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
  102b43:	a1 34 84 10 00       	mov    0x108434,%eax
  102b48:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  102b4b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  102b52:	0f 84 35 00 00 00    	je     102b8d <free+0x5d>
        if (cur->address == (uint32_t) ptr) {
  102b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b5b:	8b 40 04             	mov    0x4(%eax),%eax
  102b5e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102b61:	39 c8                	cmp    %ecx,%eax
  102b63:	0f 85 10 00 00 00    	jne    102b79 <free+0x49>
            merge_into_frees(cur);
  102b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b6c:	89 04 24             	mov    %eax,(%esp)
  102b6f:	e8 6c 01 00 00       	call   102ce0 <merge_into_frees>
            break;
  102b74:	e9 14 00 00 00       	jmp    102b8d <free+0x5d>
        }
        last = cur;
  102b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b7c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
  102b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b82:	8b 40 08             	mov    0x8(%eax),%eax
  102b85:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  102b88:	e9 be ff ff ff       	jmp    102b4b <free+0x1b>
}
  102b8d:	83 c4 18             	add    $0x18,%esp
  102b90:	5d                   	pop    %ebp
  102b91:	c3                   	ret    
  102b92:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102b99:	1f 84 00 00 00 00 00 

00102ba0 <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
  102ba0:	55                   	push   %ebp
  102ba1:	89 e5                	mov    %esp,%ebp
  102ba3:	83 ec 28             	sub    $0x28,%esp
  102ba6:	8b 45 0c             	mov    0xc(%ebp),%eax
  102ba9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102bac:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  102baf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t gsize = num * size;
  102bb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102bb5:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  102bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
  102bbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102bbf:	89 04 24             	mov    %eax,(%esp)
  102bc2:	e8 f9 fc ff ff       	call   1028c0 <malloc>
  102bc7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
  102bca:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  102bd1:	0f 84 22 00 00 00    	je     102bf9 <calloc+0x59>
  102bd7:	b8 00 00 00 00       	mov    $0x0,%eax
        memset(p, 0, gsize);
  102bdc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102bdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102be2:	89 0c 24             	mov    %ecx,(%esp)
  102be5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102bec:	00 
  102bed:	89 54 24 08          	mov    %edx,0x8(%esp)
  102bf1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102bf4:	e8 17 03 00 00       	call   102f10 <memset>
    }

    return p;
  102bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102bfc:	83 c4 28             	add    $0x28,%esp
  102bff:	5d                   	pop    %ebp
  102c00:	c3                   	ret    
  102c01:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102c08:	0f 1f 84 00 00 00 00 
  102c0f:	00 

00102c10 <realloc>:
}

void* realloc(void* ptr, size_t size) {
  102c10:	55                   	push   %ebp
  102c11:	89 e5                	mov    %esp,%ebp
  102c13:	83 ec 28             	sub    $0x28,%esp
  102c16:	8b 45 0c             	mov    0xc(%ebp),%eax
  102c19:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102c1c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102c1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct memory_node* last = 0;
  102c22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
  102c29:	a1 34 84 10 00       	mov    0x108434,%eax
  102c2e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (cur != 0) {
  102c31:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  102c38:	0f 84 8e 00 00 00    	je     102ccc <realloc+0xbc>
        if (cur->address == (uint32_t) ptr) {
  102c3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c41:	8b 40 04             	mov    0x4(%eax),%eax
  102c44:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102c47:	39 c8                	cmp    %ecx,%eax
  102c49:	0f 85 69 00 00 00    	jne    102cb8 <realloc+0xa8>
            if (size == 0) {
  102c4f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  102c56:	0f 85 17 00 00 00    	jne    102c73 <realloc+0x63>
                free(ptr);
  102c5c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102c5f:	89 04 24             	mov    %eax,(%esp)
  102c62:	e8 c9 fe ff ff       	call   102b30 <free>
                return 0;
  102c67:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102c6e:	e9 60 00 00 00       	jmp    102cd3 <realloc+0xc3>
            } else {
                void* new = malloc(size);
  102c73:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c76:	89 04 24             	mov    %eax,(%esp)
  102c79:	e8 42 fc ff ff       	call   1028c0 <malloc>
  102c7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
  102c81:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102c84:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102c87:	8b 49 04             	mov    0x4(%ecx),%ecx
  102c8a:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102c8d:	8b 12                	mov    (%edx),%edx
  102c8f:	89 04 24             	mov    %eax,(%esp)
  102c92:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c96:	89 54 24 08          	mov    %edx,0x8(%esp)
  102c9a:	e8 d1 02 00 00       	call   102f70 <memcpy>
                free((void*) cur->address);
  102c9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102ca2:	8b 40 04             	mov    0x4(%eax),%eax
  102ca5:	89 04 24             	mov    %eax,(%esp)
  102ca8:	e8 83 fe ff ff       	call   102b30 <free>

                return new;
  102cad:	8b 45 e8             	mov    -0x18(%ebp),%eax
  102cb0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102cb3:	e9 1b 00 00 00       	jmp    102cd3 <realloc+0xc3>
            }
        }
        last = cur;
  102cb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102cbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
  102cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102cc1:	8b 40 08             	mov    0x8(%eax),%eax
  102cc4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
  102cc7:	e9 65 ff ff ff       	jmp    102c31 <realloc+0x21>
    return 0;
  102ccc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102cd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102cd6:	83 c4 28             	add    $0x28,%esp
  102cd9:	5d                   	pop    %ebp
  102cda:	c3                   	ret    
  102cdb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102ce0 <merge_into_frees>:
    }

    return ret;
}

static void merge_into_frees(struct memory_node* tf) {
  102ce0:	55                   	push   %ebp
  102ce1:	89 e5                	mov    %esp,%ebp
  102ce3:	56                   	push   %esi
  102ce4:	83 ec 14             	sub    $0x14,%esp
  102ce7:	8b 45 08             	mov    0x8(%ebp),%eax
  102cea:	8d 0d 34 84 10 00    	lea    0x108434,%ecx
  102cf0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    remove_from_list(&first_used, tf);
  102cf3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102cf6:	89 0c 24             	mov    %ecx,(%esp)
  102cf9:	89 44 24 04          	mov    %eax,0x4(%esp)
  102cfd:	e8 9e fd ff ff       	call   102aa0 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
  102d02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    cur = first_free;
  102d09:	a1 38 84 10 00       	mov    0x108438,%eax
  102d0e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  102d11:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  102d18:	0f 84 92 00 00 00    	je     102db0 <merge_into_frees+0xd0>
        if (cur->address + cur->size == tf->address) {
  102d1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102d21:	8b 40 04             	mov    0x4(%eax),%eax
  102d24:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102d27:	03 01                	add    (%ecx),%eax
  102d29:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102d2c:	3b 41 04             	cmp    0x4(%ecx),%eax
  102d2f:	0f 85 26 00 00 00    	jne    102d5b <merge_into_frees+0x7b>
  102d35:	8d 05 38 84 10 00    	lea    0x108438,%eax
            tf->address = cur->address;
  102d3b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102d3e:	8b 49 04             	mov    0x4(%ecx),%ecx
  102d41:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102d44:	89 4a 04             	mov    %ecx,0x4(%edx)
            remove_from_list(&first_free, cur);
  102d47:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102d4a:	89 04 24             	mov    %eax,(%esp)
  102d4d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102d51:	e8 4a fd ff ff       	call   102aa0 <remove_from_list>
            goto editedList;
  102d56:	e9 a7 ff ff ff       	jmp    102d02 <merge_into_frees+0x22>
        }

        if (cur->address == tf->address + tf->size) {
  102d5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102d5e:	8b 40 04             	mov    0x4(%eax),%eax
  102d61:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102d64:	8b 49 04             	mov    0x4(%ecx),%ecx
  102d67:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102d6a:	03 0a                	add    (%edx),%ecx
  102d6c:	39 c8                	cmp    %ecx,%eax
  102d6e:	0f 85 28 00 00 00    	jne    102d9c <merge_into_frees+0xbc>
  102d74:	8d 05 38 84 10 00    	lea    0x108438,%eax
            tf->size += cur->size;
  102d7a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102d7d:	8b 09                	mov    (%ecx),%ecx
  102d7f:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102d82:	8b 32                	mov    (%edx),%esi
  102d84:	01 ce                	add    %ecx,%esi
  102d86:	89 32                	mov    %esi,(%edx)
            remove_from_list(&first_free, cur);
  102d88:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102d8b:	89 04 24             	mov    %eax,(%esp)
  102d8e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102d92:	e8 09 fd ff ff       	call   102aa0 <remove_from_list>
            goto editedList;
  102d97:	e9 66 ff ff ff       	jmp    102d02 <merge_into_frees+0x22>
        }

        last = cur;
  102d9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  102da2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102da5:	8b 40 08             	mov    0x8(%eax),%eax
  102da8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  102dab:	e9 61 ff ff ff       	jmp    102d11 <merge_into_frees+0x31>
  102db0:	8d 05 38 84 10 00    	lea    0x108438,%eax

    append_to_list(&first_free, tf);
  102db6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102db9:	89 04 24             	mov    %eax,(%esp)
  102dbc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102dc0:	e8 ab fc ff ff       	call   102a70 <append_to_list>
}
  102dc5:	83 c4 14             	add    $0x14,%esp
  102dc8:	5e                   	pop    %esi
  102dc9:	5d                   	pop    %ebp
  102dca:	c3                   	ret    
  102dcb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102dd0 <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
  102dd0:	55                   	push   %ebp
  102dd1:	89 e5                	mov    %esp,%ebp
  102dd3:	83 ec 08             	sub    $0x8,%esp
  102dd6:	8d 05 30 84 10 00    	lea    0x108430,%eax
    struct memory_node* ret = pop_from_list(&first_unused);
  102ddc:	89 04 24             	mov    %eax,(%esp)
  102ddf:	e8 3c 00 00 00       	call   102e20 <pop_from_list>
  102de4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (ret == 0) {
  102de7:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  102dee:	0f 85 1b 00 00 00    	jne    102e0f <pop_unused_node+0x3f>
        allocate_unused_nodes();
  102df4:	e8 77 00 00 00       	call   102e70 <allocate_unused_nodes>
  102df9:	8d 05 30 84 10 00    	lea    0x108430,%eax
        ret = pop_from_list(&first_unused);
  102dff:	89 04 24             	mov    %eax,(%esp)
  102e02:	e8 19 00 00 00       	call   102e20 <pop_from_list>
  102e07:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  102e0a:	e9 d8 ff ff ff       	jmp    102de7 <pop_unused_node+0x17>

    return ret;
  102e0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102e12:	83 c4 08             	add    $0x8,%esp
  102e15:	5d                   	pop    %ebp
  102e16:	c3                   	ret    
  102e17:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  102e1e:	00 00 

00102e20 <pop_from_list>:
        struct memory_node* element) {
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
  102e20:	55                   	push   %ebp
  102e21:	89 e5                	mov    %esp,%ebp
  102e23:	83 ec 18             	sub    $0x18,%esp
  102e26:	8b 45 08             	mov    0x8(%ebp),%eax
  102e29:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (*root == 0)
  102e2c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e2f:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  102e35:	0f 85 0c 00 00 00    	jne    102e47 <pop_from_list+0x27>
        return 0;
  102e3b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102e42:	e9 20 00 00 00       	jmp    102e67 <pop_from_list+0x47>
    struct memory_node* pop = *root;
  102e47:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e4a:	8b 00                	mov    (%eax),%eax
  102e4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    remove_from_list(root, pop);
  102e4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e52:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102e55:	89 04 24             	mov    %eax,(%esp)
  102e58:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102e5c:	e8 3f fc ff ff       	call   102aa0 <remove_from_list>
    return pop;
  102e61:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e64:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  102e67:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102e6a:	83 c4 18             	add    $0x18,%esp
  102e6d:	5d                   	pop    %ebp
  102e6e:	c3                   	ret    
  102e6f:	90                   	nop

00102e70 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  102e70:	55                   	push   %ebp
  102e71:	89 e5                	mov    %esp,%ebp
  102e73:	83 ec 28             	sub    $0x28,%esp
  102e76:	b8 01 00 00 00       	mov    $0x1,%eax
    struct memory_node* new_nodes = vmm_alloc_cont(1);
  102e7b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  102e82:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102e85:	e8 e6 12 00 00       	call   104170 <vmm_alloc_cont>
  102e8a:	b9 00 00 00 00       	mov    $0x0,%ecx
  102e8f:	ba 00 10 00 00       	mov    $0x1000,%edx
  102e94:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memset(new_nodes, 0, PAGESIZE);
  102e97:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102e9a:	89 04 24             	mov    %eax,(%esp)
  102e9d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ea4:	00 
  102ea5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  102eac:	00 
  102ead:	89 55 f0             	mov    %edx,-0x10(%ebp)
  102eb0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102eb3:	e8 58 00 00 00       	call   102f10 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  102eb8:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  102ebf:	81 7d f8 55 01 00 00 	cmpl   $0x155,-0x8(%ebp)
  102ec6:	0f 83 30 00 00 00    	jae    102efc <allocate_unused_nodes+0x8c>
  102ecc:	8d 05 30 84 10 00    	lea    0x108430,%eax
        append_to_list(&first_unused, &(new_nodes[i]));
  102ed2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102ed5:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102ed8:	69 c9 0c 00 00 00    	imul   $0xc,%ecx,%ecx
  102ede:	01 ca                	add    %ecx,%edx
  102ee0:	89 04 24             	mov    %eax,(%esp)
  102ee3:	89 54 24 04          	mov    %edx,0x4(%esp)
  102ee7:	e8 84 fb ff ff       	call   102a70 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  102eec:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102eef:	05 01 00 00 00       	add    $0x1,%eax
  102ef4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102ef7:	e9 c3 ff ff ff       	jmp    102ebf <allocate_unused_nodes+0x4f>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
  102efc:	83 c4 28             	add    $0x28,%esp
  102eff:	5d                   	pop    %ebp
  102f00:	c3                   	ret    
  102f01:	66 90                	xchg   %ax,%ax
  102f03:	66 90                	xchg   %ax,%ax
  102f05:	66 90                	xchg   %ax,%ax
  102f07:	66 90                	xchg   %ax,%ax
  102f09:	66 90                	xchg   %ax,%ax
  102f0b:	66 90                	xchg   %ax,%ax
  102f0d:	66 90                	xchg   %ax,%ax
  102f0f:	90                   	nop

00102f10 <memset>:
#include "vmm.h"
#include "string.h"

void* memset(void* buf, int c, size_t n) {
  102f10:	55                   	push   %ebp
  102f11:	89 e5                	mov    %esp,%ebp
  102f13:	83 ec 10             	sub    $0x10,%esp
  102f16:	8b 45 10             	mov    0x10(%ebp),%eax
  102f19:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102f1c:	8b 55 08             	mov    0x8(%ebp),%edx
  102f1f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102f22:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102f25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  102f28:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f2b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  102f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102f31:	89 c1                	mov    %eax,%ecx
  102f33:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102f39:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102f3c:	3d 00 00 00 00       	cmp    $0x0,%eax
  102f41:	0f 84 1a 00 00 00    	je     102f61 <memset+0x51>
        *p++ = c;
  102f47:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f4a:	88 c1                	mov    %al,%cl
  102f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f4f:	89 c2                	mov    %eax,%edx
  102f51:	81 c2 01 00 00 00    	add    $0x1,%edx
  102f57:	89 55 f0             	mov    %edx,-0x10(%ebp)
  102f5a:	88 08                	mov    %cl,(%eax)
    }
  102f5c:	e9 cd ff ff ff       	jmp    102f2e <memset+0x1e>

    return buf;
  102f61:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f64:	83 c4 10             	add    $0x10,%esp
  102f67:	5d                   	pop    %ebp
  102f68:	c3                   	ret    
  102f69:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102f70 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n) {
  102f70:	55                   	push   %ebp
  102f71:	89 e5                	mov    %esp,%ebp
  102f73:	83 ec 14             	sub    $0x14,%esp
  102f76:	8b 45 10             	mov    0x10(%ebp),%eax
  102f79:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102f7c:	8b 55 08             	mov    0x8(%ebp),%edx
  102f7f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102f82:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102f85:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  102f88:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  102f8e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f91:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  102f94:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102f97:	89 c1                	mov    %eax,%ecx
  102f99:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102f9f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102fa2:	3d 00 00 00 00       	cmp    $0x0,%eax
  102fa7:	0f 84 25 00 00 00    	je     102fd2 <memcpy+0x62>
        *(d++) = *(s++);
  102fad:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102fb0:	89 c1                	mov    %eax,%ecx
  102fb2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102fb8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102fbb:	8a 10                	mov    (%eax),%dl
  102fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102fc0:	89 c1                	mov    %eax,%ecx
  102fc2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102fc8:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102fcb:	88 10                	mov    %dl,(%eax)
    }
  102fcd:	e9 c2 ff ff ff       	jmp    102f94 <memcpy+0x24>

    return dest;
  102fd2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102fd5:	83 c4 14             	add    $0x14,%esp
  102fd8:	5d                   	pop    %ebp
  102fd9:	c3                   	ret    
  102fda:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00102fe0 <memcmp>:
}

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
  102fe0:	55                   	push   %ebp
  102fe1:	89 e5                	mov    %esp,%ebp
  102fe3:	83 ec 1c             	sub    $0x1c,%esp
  102fe6:	8b 45 10             	mov    0x10(%ebp),%eax
  102fe9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102fec:	8b 55 08             	mov    0x8(%ebp),%edx
  102fef:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102ff2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102ff5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (ptr1 == 0)
  102ff8:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  102fff:	0f 85 0c 00 00 00    	jne    103011 <memcmp+0x31>
        return -1;
  103005:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  10300c:	e9 a7 00 00 00       	jmp    1030b8 <memcmp+0xd8>
    if (ptr2 == 0)
  103011:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103018:	0f 85 0c 00 00 00    	jne    10302a <memcmp+0x4a>
        return 1;
  10301e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  103025:	e9 8e 00 00 00       	jmp    1030b8 <memcmp+0xd8>
    if (num == 0)
  10302a:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103031:	0f 85 0c 00 00 00    	jne    103043 <memcmp+0x63>
        return 0;
  103037:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10303e:	e9 75 00 00 00       	jmp    1030b8 <memcmp+0xd8>

    const uint8_t* pa = ptr1;
  103043:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103046:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const uint8_t* pb = ptr2;
  103049:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10304c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (uint32_t i = 0; i < num; i++) {
  10304f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  103056:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103059:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10305c:	0f 83 4f 00 00 00    	jae    1030b1 <memcmp+0xd1>
        if (pa[i] != pb[i]) {
  103062:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103065:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103068:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  10306c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10306f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103072:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  103076:	39 c8                	cmp    %ecx,%eax
  103078:	0f 84 1e 00 00 00    	je     10309c <memcmp+0xbc>
            return pa[i] - pb[i];
  10307e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103081:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103084:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  103088:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10308b:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10308e:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  103092:	29 c8                	sub    %ecx,%eax
  103094:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103097:	e9 1c 00 00 00       	jmp    1030b8 <memcmp+0xd8>
        }
    }
  10309c:	e9 00 00 00 00       	jmp    1030a1 <memcmp+0xc1>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
  1030a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1030a4:	05 01 00 00 00       	add    $0x1,%eax
  1030a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1030ac:	e9 a5 ff ff ff       	jmp    103056 <memcmp+0x76>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
  1030b1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1030b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1030bb:	83 c4 1c             	add    $0x1c,%esp
  1030be:	5d                   	pop    %ebp
  1030bf:	c3                   	ret    

001030c0 <strcmp>:

int strcmp(const char* str1, const char* str2) {
  1030c0:	55                   	push   %ebp
  1030c1:	89 e5                	mov    %esp,%ebp
  1030c3:	56                   	push   %esi
  1030c4:	83 ec 24             	sub    $0x24,%esp
  1030c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1030ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1030cd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1030d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l1 = strlen(str1);
  1030d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1030d6:	89 e1                	mov    %esp,%ecx
  1030d8:	89 01                	mov    %eax,(%ecx)
  1030da:	e8 61 00 00 00       	call   103140 <strlen>
  1030df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int l2 = strlen(str2);
  1030e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1030e5:	89 e1                	mov    %esp,%ecx
  1030e7:	89 01                	mov    %eax,(%ecx)
  1030e9:	e8 52 00 00 00       	call   103140 <strlen>
  1030ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    l1 = l1 < l2 ? l1 : l2;
  1030f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1030f7:	0f 8d 0b 00 00 00    	jge    103108 <strcmp+0x48>
  1030fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103100:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103103:	e9 06 00 00 00       	jmp    10310e <strcmp+0x4e>
  103108:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10310b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10310e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103111:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return memcmp(str1, str2, l1);
  103114:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103117:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10311a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10311d:	89 e6                	mov    %esp,%esi
  10311f:	89 56 08             	mov    %edx,0x8(%esi)
  103122:	89 4e 04             	mov    %ecx,0x4(%esi)
  103125:	89 06                	mov    %eax,(%esi)
  103127:	e8 b4 fe ff ff       	call   102fe0 <memcmp>
  10312c:	83 c4 24             	add    $0x24,%esp
  10312f:	5e                   	pop    %esi
  103130:	5d                   	pop    %ebp
  103131:	c3                   	ret    
  103132:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103139:	1f 84 00 00 00 00 00 

00103140 <strlen>:
}

unsigned int strlen(const char* str) {
  103140:	55                   	push   %ebp
  103141:	89 e5                	mov    %esp,%ebp
  103143:	83 ec 0c             	sub    $0xc,%esp
  103146:	8b 45 08             	mov    0x8(%ebp),%eax
  103149:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (str == 0)
  10314c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103153:	0f 85 0c 00 00 00    	jne    103165 <strlen+0x25>
        return 0;
  103159:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103160:	e9 37 00 00 00       	jmp    10319c <strlen+0x5c>
    int i;
    for (i = 0; str[i] != '\0'; i++)
  103165:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10316c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10316f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103172:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  103176:	3d 00 00 00 00       	cmp    $0x0,%eax
  10317b:	0f 84 15 00 00 00    	je     103196 <strlen+0x56>
  103181:	e9 00 00 00 00       	jmp    103186 <strlen+0x46>
  103186:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103189:	05 01 00 00 00       	add    $0x1,%eax
  10318e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103191:	e9 d6 ff ff ff       	jmp    10316c <strlen+0x2c>
        ;
    return i;
  103196:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103199:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10319c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10319f:	83 c4 0c             	add    $0xc,%esp
  1031a2:	5d                   	pop    %ebp
  1031a3:	c3                   	ret    
  1031a4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1031ab:	00 00 00 00 00 

001031b0 <strcpy>:

char* strcpy(char* dest, const char* src) {
  1031b0:	55                   	push   %ebp
  1031b1:	89 e5                	mov    %esp,%ebp
  1031b3:	56                   	push   %esi
  1031b4:	83 ec 24             	sub    $0x24,%esp
  1031b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1031ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1031bd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1031c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memcpy(dest, src, strlen(src) * sizeof(char));
  1031c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031c6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1031c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1031cc:	89 e6                	mov    %esp,%esi
  1031ce:	89 16                	mov    %edx,(%esi)
  1031d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1031d3:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1031d6:	e8 65 ff ff ff       	call   103140 <strlen>
  1031db:	c1 e0 00             	shl    $0x0,%eax
  1031de:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1031e1:	89 0c 24             	mov    %ecx,(%esp)
  1031e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1031e7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1031eb:	89 44 24 08          	mov    %eax,0x8(%esp)
  1031ef:	e8 7c fd ff ff       	call   102f70 <memcpy>
    return dest;
  1031f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031f7:	83 c4 24             	add    $0x24,%esp
  1031fa:	5e                   	pop    %esi
  1031fb:	5d                   	pop    %ebp
  1031fc:	c3                   	ret    
  1031fd:	0f 1f 00             	nopl   (%eax)

00103200 <strtok>:
}

char* sp = NULL; /* the start position of the string */

char* strtok(char* str, const char* delimiters) {
  103200:	55                   	push   %ebp
  103201:	89 e5                	mov    %esp,%ebp
  103203:	83 ec 28             	sub    $0x28,%esp
  103206:	8b 45 0c             	mov    0xc(%ebp),%eax
  103209:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10320c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10320f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i = 0;
  103212:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int len = strlen(delimiters);
  103219:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10321c:	89 e1                	mov    %esp,%ecx
  10321e:	89 01                	mov    %eax,(%ecx)
  103220:	e8 1b ff ff ff       	call   103140 <strlen>
  103225:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* check in the delimiters */
    if (len == 0)
  103228:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  10322f:	0f 85 0c 00 00 00    	jne    103241 <strtok+0x41>
        return 0;
  103235:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10323c:	e9 80 01 00 00       	jmp    1033c1 <strtok+0x1c1>

    /* if the original string has nothing left */
    if (!str && !sp)
  103241:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103248:	0f 85 1c 00 00 00    	jne    10326a <strtok+0x6a>
  10324e:	81 3d 3c 84 10 00 00 	cmpl   $0x0,0x10843c
  103255:	00 00 00 
  103258:	0f 85 0c 00 00 00    	jne    10326a <strtok+0x6a>
        return 0;
  10325e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103265:	e9 57 01 00 00       	jmp    1033c1 <strtok+0x1c1>

    /* initialize the sp during the first call */
    if (str && !sp)
  10326a:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103271:	0f 84 18 00 00 00    	je     10328f <strtok+0x8f>
  103277:	81 3d 3c 84 10 00 00 	cmpl   $0x0,0x10843c
  10327e:	00 00 00 
  103281:	0f 85 08 00 00 00    	jne    10328f <strtok+0x8f>
        sp = str;
  103287:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10328a:	a3 3c 84 10 00       	mov    %eax,0x10843c

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
  10328f:	a1 3c 84 10 00       	mov    0x10843c,%eax
  103294:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
  103297:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10329e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1032a4:	0f 8d 3d 00 00 00    	jge    1032e7 <strtok+0xe7>
            if (*p_start == delimiters[i]) {
  1032aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1032ad:	0f be 00             	movsbl (%eax),%eax
  1032b0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1032b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1032b6:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  1032ba:	39 c8                	cmp    %ecx,%eax
  1032bc:	0f 85 10 00 00 00    	jne    1032d2 <strtok+0xd2>
                p_start++;
  1032c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1032c5:	05 01 00 00 00       	add    $0x1,%eax
  1032ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
                break;
  1032cd:	e9 15 00 00 00       	jmp    1032e7 <strtok+0xe7>
            }
        }
  1032d2:	e9 00 00 00 00       	jmp    1032d7 <strtok+0xd7>
        sp = str;

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
  1032d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032da:	05 01 00 00 00       	add    $0x1,%eax
  1032df:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1032e2:	e9 b7 ff ff ff       	jmp    10329e <strtok+0x9e>
                p_start++;
                break;
            }
        }

        if (i == len) {
  1032e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032ea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1032ed:	0f 85 0d 00 00 00    	jne    103300 <strtok+0x100>
            sp = p_start;
  1032f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1032f6:	a3 3c 84 10 00       	mov    %eax,0x10843c
            break;
  1032fb:	e9 05 00 00 00       	jmp    103305 <strtok+0x105>
        }
    }
  103300:	e9 92 ff ff ff       	jmp    103297 <strtok+0x97>

    /* return NULL if nothing left */
    if (*sp == '\0') {
  103305:	a1 3c 84 10 00       	mov    0x10843c,%eax
  10330a:	0f be 00             	movsbl (%eax),%eax
  10330d:	3d 00 00 00 00       	cmp    $0x0,%eax
  103312:	0f 85 17 00 00 00    	jne    10332f <strtok+0x12f>
        sp = NULL;
  103318:	c7 05 3c 84 10 00 00 	movl   $0x0,0x10843c
  10331f:	00 00 00 
        return sp;
  103322:	a1 3c 84 10 00       	mov    0x10843c,%eax
  103327:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10332a:	e9 92 00 00 00       	jmp    1033c1 <strtok+0x1c1>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  10332f:	e9 00 00 00 00       	jmp    103334 <strtok+0x134>
  103334:	a1 3c 84 10 00       	mov    0x10843c,%eax
  103339:	0f be 00             	movsbl (%eax),%eax
  10333c:	3d 00 00 00 00       	cmp    $0x0,%eax
  103341:	0f 84 74 00 00 00    	je     1033bb <strtok+0x1bb>
        for (i = 0; i < len; i++) {
  103347:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10334e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103351:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  103354:	0f 8d 3c 00 00 00    	jge    103396 <strtok+0x196>
            if (*sp == delimiters[i]) {
  10335a:	a1 3c 84 10 00       	mov    0x10843c,%eax
  10335f:	0f be 00             	movsbl (%eax),%eax
  103362:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103365:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103368:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  10336c:	39 c8                	cmp    %ecx,%eax
  10336e:	0f 85 0d 00 00 00    	jne    103381 <strtok+0x181>
                *sp = '\0';
  103374:	a1 3c 84 10 00       	mov    0x10843c,%eax
  103379:	c6 00 00             	movb   $0x0,(%eax)
                break;
  10337c:	e9 15 00 00 00       	jmp    103396 <strtok+0x196>
            }
        }
  103381:	e9 00 00 00 00       	jmp    103386 <strtok+0x186>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
  103386:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103389:	05 01 00 00 00       	add    $0x1,%eax
  10338e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103391:	e9 b8 ff ff ff       	jmp    10334e <strtok+0x14e>
                *sp = '\0';
                break;
            }
        }

        sp++;
  103396:	a1 3c 84 10 00       	mov    0x10843c,%eax
  10339b:	05 01 00 00 00       	add    $0x1,%eax
  1033a0:	a3 3c 84 10 00       	mov    %eax,0x10843c
        if (i < len)
  1033a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1033ab:	0f 8d 05 00 00 00    	jge    1033b6 <strtok+0x1b6>
            break;
  1033b1:	e9 05 00 00 00       	jmp    1033bb <strtok+0x1bb>
    }
  1033b6:	e9 79 ff ff ff       	jmp    103334 <strtok+0x134>

    return p_start;
  1033bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1033be:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1033c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1033c4:	83 c4 28             	add    $0x28,%esp
  1033c7:	5d                   	pop    %ebp
  1033c8:	c3                   	ret    
  1033c9:	66 90                	xchg   %ax,%ax
  1033cb:	66 90                	xchg   %ax,%ax
  1033cd:	66 90                	xchg   %ax,%ax
  1033cf:	90                   	nop

001033d0 <vfs_init_root>:
        child->parent = parent;
        parent->res_ptr = child;
    }
}

void vfs_init_root() {
  1033d0:	55                   	push   %ebp
  1033d1:	89 e5                	mov    %esp,%ebp
    if(root == 0) {
  1033d3:	83 ec 18             	sub    $0x18,%esp
  1033d6:	81 3d 40 84 10 00 00 	cmpl   $0x0,0x108440
  1033dd:	00 00 00 
  1033e0:	0f 85 6f 00 00 00    	jne    103455 <vfs_init_root+0x85>
  1033e6:	b8 10 01 00 00       	mov    $0x110,%eax
        root = malloc(sizeof(struct rs_node));
  1033eb:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  1033f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1033f5:	e8 c6 f4 ff ff       	call   1028c0 <malloc>
  1033fa:	a3 40 84 10 00       	mov    %eax,0x108440
        root->next = 0;
  1033ff:	a1 40 84 10 00       	mov    0x108440,%eax
  103404:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  10340b:	00 00 00 
        root->parent = 0;
  10340e:	a1 40 84 10 00       	mov    0x108440,%eax
  103413:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  10341a:	00 00 00 
        strcpy(root->name, "$");
  10341d:	a1 40 84 10 00       	mov    0x108440,%eax
  103422:	89 e1                	mov    %esp,%ecx
  103424:	89 01                	mov    %eax,(%ecx)
  103426:	c7 41 04 4b 63 10 00 	movl   $0x10634b,0x4(%ecx)
  10342d:	e8 7e fd ff ff       	call   1031b0 <strcpy>
        root->res_ptr = 0;
  103432:	8b 0d 40 84 10 00    	mov    0x108440,%ecx
  103438:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  10343f:	00 00 00 
        root->res_type = RES_NLIST;
  103442:	8b 0d 40 84 10 00    	mov    0x108440,%ecx
  103448:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  10344f:	00 00 00 
  103452:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
}
  103455:	83 c4 18             	add    $0x18,%esp
  103458:	5d                   	pop    %ebp
  103459:	c3                   	ret    
  10345a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103460 <vfs_debug_ls>:

void vfs_debug_ls(char* path) {
  103460:	55                   	push   %ebp
  103461:	89 e5                	mov    %esp,%ebp
  103463:	83 ec 28             	sub    $0x28,%esp
  103466:	8b 45 08             	mov    0x8(%ebp),%eax
  103469:	8d 0d 4d 63 10 00    	lea    0x10634d,%ecx
  10346f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct rs_node* parent = root;
  103472:	a1 40 84 10 00       	mov    0x108440,%eax
  103477:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct rs_node* child = 0;
  10347a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    sub = strtok(path, "/");
  103481:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103484:	89 04 24             	mov    %eax,(%esp)
  103487:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10348b:	e8 70 fd ff ff       	call   103200 <strtok>
  103490:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sub != NULL)
  103493:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10349a:	0f 84 41 00 00 00    	je     1034e1 <vfs_debug_ls+0x81>
    {
        child = vfs_find_node(parent, sub);
  1034a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034a3:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1034a6:	89 04 24             	mov    %eax,(%esp)
  1034a9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1034ad:	e8 7e 00 00 00       	call   103530 <vfs_find_node>
  1034b2:	b9 00 00 00 00       	mov    $0x0,%ecx
  1034b7:	8d 15 4d 63 10 00    	lea    0x10634d,%edx
  1034bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        parent = child;
  1034c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1034c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        sub = strtok(0, "/");
  1034c6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1034cd:	89 54 24 04          	mov    %edx,0x4(%esp)
  1034d1:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1034d4:	e8 27 fd ff ff       	call   103200 <strtok>
  1034d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  1034dc:	e9 b2 ff ff ff       	jmp    103493 <vfs_debug_ls+0x33>

    child = child->res_ptr;
  1034e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1034e4:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1034ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while(child != 0) {
  1034ed:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1034f4:	0f 84 30 00 00 00    	je     10352a <vfs_debug_ls+0xca>
  1034fa:	8d 05 4f 63 10 00    	lea    0x10634f,%eax
        kprintf("LS %s: %s\n", path, child->name);
  103500:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103503:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103506:	89 04 24             	mov    %eax,(%esp)
  103509:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10350d:	89 54 24 08          	mov    %edx,0x8(%esp)
  103511:	e8 3a d0 ff ff       	call   100550 <kprintf>

        child = child->next;
  103516:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103519:	8b 89 08 01 00 00    	mov    0x108(%ecx),%ecx
  10351f:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    }
  103522:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103525:	e9 c3 ff ff ff       	jmp    1034ed <vfs_debug_ls+0x8d>
}
  10352a:	83 c4 28             	add    $0x28,%esp
  10352d:	5d                   	pop    %ebp
  10352e:	c3                   	ret    
  10352f:	90                   	nop

00103530 <vfs_find_node>:

struct rs_node* root = 0;
struct rs_node* current = 0;
struct rs_node* temp = 0;

static struct rs_node* vfs_find_node(struct rs_node* parent, char* name) {
  103530:	55                   	push   %ebp
  103531:	89 e5                	mov    %esp,%ebp
  103533:	83 ec 18             	sub    $0x18,%esp
  103536:	8b 45 0c             	mov    0xc(%ebp),%eax
  103539:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10353c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10353f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_type == RES_NLIST) {
  103542:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103545:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  10354c:	00 00 00 
  10354f:	0f 85 57 00 00 00    	jne    1035ac <vfs_find_node+0x7c>
        struct rs_node* ptr = parent->res_ptr;
  103555:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103558:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  10355e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        while(ptr != 0) {
  103561:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103568:	0f 84 39 00 00 00    	je     1035a7 <vfs_find_node+0x77>
            if(strcmp(name, ptr->name) == 0) {
  10356e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103571:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103574:	89 e2                	mov    %esp,%edx
  103576:	89 4a 04             	mov    %ecx,0x4(%edx)
  103579:	89 02                	mov    %eax,(%edx)
  10357b:	e8 40 fb ff ff       	call   1030c0 <strcmp>
  103580:	3d 00 00 00 00       	cmp    $0x0,%eax
  103585:	0f 85 0b 00 00 00    	jne    103596 <vfs_find_node+0x66>
                return ptr;
  10358b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10358e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103591:	e9 1d 00 00 00       	jmp    1035b3 <vfs_find_node+0x83>
            }

            ptr = ptr->next;
  103596:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103599:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  10359f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
  1035a2:	e9 ba ff ff ff       	jmp    103561 <vfs_find_node+0x31>
    }
  1035a7:	e9 00 00 00 00       	jmp    1035ac <vfs_find_node+0x7c>

    return 0;
  1035ac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1035b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1035b6:	83 c4 18             	add    $0x18,%esp
  1035b9:	5d                   	pop    %ebp
  1035ba:	c3                   	ret    
  1035bb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001035c0 <vfs_create_path>:

        child = child->next;
    }
}

int vfs_create_path(char* path, uint32_t flags) {
  1035c0:	55                   	push   %ebp
  1035c1:	89 e5                	mov    %esp,%ebp
  1035c3:	57                   	push   %edi
  1035c4:	56                   	push   %esi
  1035c5:	83 ec 50             	sub    $0x50,%esp
  1035c8:	8b 45 0c             	mov    0xc(%ebp),%eax
  1035cb:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1035ce:	8d 15 4d 63 10 00    	lea    0x10634d,%edx
  1035d4:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1035d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char* sub;
    struct rs_node* parent = root;
  1035da:	a1 40 84 10 00       	mov    0x108440,%eax
  1035df:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct rs_node* child = 0;
  1035e2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    int created = 0;
  1035e9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

    sub = strtok(path, "/");
  1035f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1035f3:	89 04 24             	mov    %eax,(%esp)
  1035f6:	89 54 24 04          	mov    %edx,0x4(%esp)
  1035fa:	e8 01 fc ff ff       	call   103200 <strtok>
  1035ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (sub != NULL)
  103602:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  103609:	0f 84 00 01 00 00    	je     10370f <vfs_create_path+0x14f>
  10360f:	8d 05 5a 63 10 00    	lea    0x10635a,%eax
    {
        kprintf("vfscp at %s child=%x, parent=%x, root=%x\n", sub, child, parent, root);
  103615:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103618:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10361b:	8b 75 e8             	mov    -0x18(%ebp),%esi
  10361e:	8b 3d 40 84 10 00    	mov    0x108440,%edi
  103624:	89 04 24             	mov    %eax,(%esp)
  103627:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10362b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10362f:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103633:	89 7c 24 10          	mov    %edi,0x10(%esp)
  103637:	e8 14 cf ff ff       	call   100550 <kprintf>
        child = vfs_find_node(parent, sub);
  10363c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10363f:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103642:	89 0c 24             	mov    %ecx,(%esp)
  103645:	89 54 24 04          	mov    %edx,0x4(%esp)
  103649:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10364c:	e8 df fe ff ff       	call   103530 <vfs_find_node>
  103651:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if(child == 0) {
  103654:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  10365b:	0f 85 82 00 00 00    	jne    1036e3 <vfs_create_path+0x123>
  103661:	b8 10 01 00 00       	mov    $0x110,%eax
            child = malloc(sizeof(struct rs_node));
  103666:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  10366d:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103670:	e8 4b f2 ff ff       	call   1028c0 <malloc>
  103675:	8d 0d 84 63 10 00    	lea    0x106384,%ecx
  10367b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            strcpy(child->name, sub);
  10367e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103681:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103684:	89 e6                	mov    %esp,%esi
  103686:	89 56 04             	mov    %edx,0x4(%esi)
  103689:	89 06                	mov    %eax,(%esi)
  10368b:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10368e:	e8 1d fb ff ff       	call   1031b0 <strcpy>
            child->res_type = RES_NLIST;
  103693:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103696:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  10369d:	00 00 00 
            child->res_ptr = 0;
  1036a0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1036a3:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  1036aa:	00 00 00 

            created++;
  1036ad:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1036b0:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1036b6:	89 4d e0             	mov    %ecx,-0x20(%ebp)

            kprintf("vfscp created %s", sub);
  1036b9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1036bc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  1036bf:	89 14 24             	mov    %edx,(%esp)
  1036c2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1036c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1036c9:	e8 82 ce ff ff       	call   100550 <kprintf>

            vfs_insert_node(parent, child);
  1036ce:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1036d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1036d4:	89 0c 24             	mov    %ecx,(%esp)
  1036d7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1036db:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1036de:	e8 3d 00 00 00       	call   103720 <vfs_insert_node>
  1036e3:	b8 00 00 00 00       	mov    $0x0,%eax
  1036e8:	8d 0d 4d 63 10 00    	lea    0x10634d,%ecx
        }

        parent = child;
  1036ee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1036f1:	89 55 e8             	mov    %edx,-0x18(%ebp)

        sub = strtok(0, "/");
  1036f4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1036fb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1036ff:	89 45 c8             	mov    %eax,-0x38(%ebp)
  103702:	e8 f9 fa ff ff       	call   103200 <strtok>
  103707:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
  10370a:	e9 f3 fe ff ff       	jmp    103602 <vfs_create_path+0x42>

    return created;
  10370f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103712:	83 c4 50             	add    $0x50,%esp
  103715:	5e                   	pop    %esi
  103716:	5f                   	pop    %edi
  103717:	5d                   	pop    %ebp
  103718:	c3                   	ret    
  103719:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00103720 <vfs_insert_node>:
    }

    return 0;
}

static void vfs_insert_node(struct rs_node* parent, struct rs_node* child) {
  103720:	55                   	push   %ebp
  103721:	89 e5                	mov    %esp,%ebp
  103723:	83 ec 08             	sub    $0x8,%esp
  103726:	8b 45 0c             	mov    0xc(%ebp),%eax
  103729:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10372c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10372f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(parent->res_type == RES_NLIST) {
  103732:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103735:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  10373c:	00 00 00 
  10373f:	0f 85 2a 00 00 00    	jne    10376f <vfs_insert_node+0x4f>
        child->next = parent->res_ptr;
  103745:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103748:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  10374e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103751:	89 81 08 01 00 00    	mov    %eax,0x108(%ecx)
        child->parent = parent;
  103757:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10375a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10375d:	89 81 0c 01 00 00    	mov    %eax,0x10c(%ecx)
        parent->res_ptr = child;
  103763:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103766:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103769:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)
    }
}
  10376f:	83 c4 08             	add    $0x8,%esp
  103772:	5d                   	pop    %ebp
  103773:	c3                   	ret    
  103774:	66 90                	xchg   %ax,%ax
  103776:	66 90                	xchg   %ax,%ax
  103778:	66 90                	xchg   %ax,%ax
  10377a:	66 90                	xchg   %ax,%ax
  10377c:	66 90                	xchg   %ax,%ax
  10377e:	66 90                	xchg   %ax,%ax

00103780 <vmm_get_current_pagedir>:
	}

	vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  103780:	55                   	push   %ebp
  103781:	89 e5                	mov    %esp,%ebp
	return active_pagedir;
  103783:	a1 4c 84 10 00       	mov    0x10844c,%eax
  103788:	5d                   	pop    %ebp
  103789:	c3                   	ret    
  10378a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103790 <vmm_fork_current>:
}

uint32_t vmm_fork_current(void) {
  103790:	55                   	push   %ebp
  103791:	89 e5                	mov    %esp,%ebp
  103793:	56                   	push   %esi
  103794:	83 ec 34             	sub    $0x34,%esp
  103797:	8d 45 f8             	lea    -0x8(%ebp),%eax
	uint32_t phys_pagedir, paddr, i;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  10379a:	89 04 24             	mov    %eax,(%esp)
  10379d:	e8 ce 00 00 00       	call   103870 <vmm_create_vpdraw>
  1037a2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for (i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  1037a5:	c7 45 f0 00 10 40 20 	movl   $0x20401000,-0x10(%ebp)
  1037ac:	81 7d f0 00 f0 ff ff 	cmpl   $0xfffff000,-0x10(%ebp)
  1037b3:	0f 83 98 00 00 00    	jae    103851 <vmm_fork_current+0xc1>
		if (active_pagetables[i >> 12] & PT_PRESENT) {
  1037b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1037bc:	c1 e8 0c             	shr    $0xc,%eax
  1037bf:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  1037c5:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1037c8:	25 01 00 00 00       	and    $0x1,%eax
  1037cd:	3d 00 00 00 00       	cmp    $0x0,%eax
  1037d2:	0f 84 64 00 00 00    	je     10383c <vmm_fork_current+0xac>
  1037d8:	8d 45 f4             	lea    -0xc(%ebp),%eax
			void* newp = vmm_alloc_user(&paddr);
  1037db:	89 04 24             	mov    %eax,(%esp)
  1037de:	e8 4d 03 00 00       	call   103b30 <vmm_alloc_user>
  1037e3:	b9 00 00 00 00       	mov    $0x0,%ecx
  1037e8:	ba 00 10 00 00       	mov    $0x1000,%edx
  1037ed:	89 45 e8             	mov    %eax,-0x18(%ebp)

			memcpy(newp, (void*) i, 0x1000);
  1037f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1037f3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1037f6:	89 04 24             	mov    %eax,(%esp)
  1037f9:	89 74 24 04          	mov    %esi,0x4(%esp)
  1037fd:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  103804:	00 
  103805:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  103808:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10380b:	e8 60 f7 ff ff       	call   102f70 <memcpy>
			map_address_context(pdptr, i, paddr, 0);
  103810:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103813:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103816:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103819:	89 04 24             	mov    %eax,(%esp)
  10381c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103820:	89 54 24 08          	mov    %edx,0x8(%esp)
  103824:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10382b:	00 
  10382c:	e8 4f 03 00 00       	call   103b80 <map_address_context>

			vmm_unmap(newp);
  103831:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103834:	89 04 24             	mov    %eax,(%esp)
  103837:	e8 d4 03 00 00       	call   103c10 <vmm_unmap>
		}

	}
  10383c:	e9 00 00 00 00       	jmp    103841 <vmm_fork_current+0xb1>

uint32_t vmm_fork_current(void) {
	uint32_t phys_pagedir, paddr, i;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);

	for (i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  103841:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103844:	05 00 10 00 00       	add    $0x1000,%eax
  103849:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10384c:	e9 5b ff ff ff       	jmp    1037ac <vmm_fork_current+0x1c>
			vmm_unmap(newp);
		}

	}

	vmm_free_pdptr(pdptr);
  103851:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103854:	89 04 24             	mov    %eax,(%esp)
  103857:	e8 24 04 00 00       	call   103c80 <vmm_free_pdptr>

	return phys_pagedir;
  10385c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10385f:	83 c4 34             	add    $0x34,%esp
  103862:	5e                   	pop    %esi
  103863:	5d                   	pop    %ebp
  103864:	c3                   	ret    
  103865:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10386c:	00 00 00 00 

00103870 <vmm_create_vpdraw>:
uint32_t* active_pagetables = (uint32_t*) (ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*) (ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  103870:	55                   	push   %ebp
  103871:	89 e5                	mov    %esp,%ebp
  103873:	53                   	push   %ebx
  103874:	57                   	push   %edi
  103875:	56                   	push   %esi
  103876:	83 ec 4c             	sub    $0x4c,%esp
  103879:	8b 45 08             	mov    0x8(%ebp),%eax
  10387c:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  10387f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t phys_context = 0;
  103882:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct vmm_context* context = vmm_alloc(&phys_context);
  103889:	89 0c 24             	mov    %ecx,(%esp)
  10388c:	e8 6f 05 00 00       	call   103e00 <vmm_alloc>
  103891:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  103894:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uint32_t phys_pagedir = 0;
  103897:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	context->pagedir = vmm_alloc(&phys_pagedir);
  10389e:	89 0c 24             	mov    %ecx,(%esp)
  1038a1:	e8 5a 05 00 00       	call   103e00 <vmm_alloc>
  1038a6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1038a9:	89 01                	mov    %eax,(%ecx)
	if (pagedir != 0)
  1038ab:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1038b2:	0f 84 08 00 00 00    	je     1038c0 <vmm_create_vpdraw+0x50>
		*pagedir = phys_pagedir;
  1038b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1038bb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1038be:	89 01                	mov    %eax,(%ecx)
  1038c0:	b8 00 00 00 00       	mov    $0x0,%eax

	uint32_t* pagedir_ptr = vmm_alloc(0);
  1038c5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1038cc:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1038cf:	e8 2c 05 00 00       	call   103e00 <vmm_alloc>
  1038d4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  1038d7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  1038de:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  1038e5:	0f 83 25 01 00 00    	jae    103a10 <vmm_create_vpdraw+0x1a0>
  1038eb:	8d 45 dc             	lea    -0x24(%ebp),%eax
		pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  1038ee:	89 04 24             	mov    %eax,(%esp)
  1038f1:	e8 0a 05 00 00       	call   103e00 <vmm_alloc>
  1038f6:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1038f9:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1038fc:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i < PMEM_TABLES) {
  1038ff:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  103906:	0f 83 4d 00 00 00    	jae    103959 <vmm_create_vpdraw+0xe9>
			vmm_free((void*) (pagedir_ptr[i]));
  10390c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10390f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103912:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103915:	89 04 24             	mov    %eax,(%esp)
  103918:	e8 33 05 00 00       	call   103e50 <vmm_free>
  10391d:	b8 00 00 00 00       	mov    $0x0,%eax
			map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  103922:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  103925:	8b 55 e0             	mov    -0x20(%ebp),%edx
  103928:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  10392b:	8b 55 d8             	mov    -0x28(%ebp),%edx
  10392e:	8b 14 95 80 c4 12 00 	mov    0x12c480(,%edx,4),%edx
  103935:	89 0c 24             	mov    %ecx,(%esp)
  103938:	89 54 24 04          	mov    %edx,0x4(%esp)
  10393c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  103943:	00 
  103944:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  103947:	e8 84 05 00 00       	call   103ed0 <map_address_active>
			paddr = kernel_pagetables[i];
  10394c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10394f:	8b 04 85 80 c4 12 00 	mov    0x12c480(,%eax,4),%eax
  103956:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  103959:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10395c:	0d 01 00 00 00       	or     $0x1,%eax
  103961:	0d 02 00 00 00       	or     $0x2,%eax
  103966:	0d 04 00 00 00       	or     $0x4,%eax
  10396b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10396e:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103971:	8b 12                	mov    (%edx),%edx
  103973:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
  103976:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  10397d:	0f 82 78 00 00 00    	jb     1039fb <vmm_create_vpdraw+0x18b>
			for (i2 = 0; i2 < 1024; i2++) {
  103983:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  10398a:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  103991:	0f 83 5f 00 00 00    	jae    1039f6 <vmm_create_vpdraw+0x186>
  103997:	b8 04 00 00 00       	mov    $0x4,%eax
  10399c:	b9 00 00 00 00       	mov    $0x0,%ecx
  1039a1:	ba 00 02 00 00       	mov    $0x200,%edx
				uint32_t vaddr = (i << 22) + (i2 << 12);
  1039a6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1039a9:	c1 e6 16             	shl    $0x16,%esi
  1039ac:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  1039af:	c1 e7 0c             	shl    $0xc,%edi
  1039b2:	01 fe                	add    %edi,%esi
  1039b4:	89 75 d0             	mov    %esi,-0x30(%ebp)

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  1039b7:	81 7d d0 00 00 80 00 	cmpl   $0x800000,-0x30(%ebp)
  1039be:	0f 97 c3             	seta   %bl
  1039c1:	84 db                	test   %bl,%bl
  1039c3:	0f 44 d1             	cmove  %ecx,%edx
  1039c6:	81 7d d0 00 10 40 20 	cmpl   $0x20401000,-0x30(%ebp)
  1039cd:	0f 97 c3             	seta   %bl
  1039d0:	84 db                	test   %bl,%bl
  1039d2:	0f 44 c1             	cmove  %ecx,%eax
  1039d5:	09 c2                	or     %eax,%edx
  1039d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1039da:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1039dd:	8b 75 e0             	mov    -0x20(%ebp),%esi
  1039e0:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  1039e3:	89 14 81             	mov    %edx,(%ecx,%eax,4)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
  1039e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1039e9:	05 01 00 00 00       	add    $0x1,%eax
  1039ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1039f1:	e9 94 ff ff ff       	jmp    10398a <vmm_create_vpdraw+0x11a>

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
						(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
  1039f6:	e9 00 00 00 00       	jmp    1039fb <vmm_create_vpdraw+0x18b>
	}
  1039fb:	e9 00 00 00 00       	jmp    103a00 <vmm_create_vpdraw+0x190>
		*pagedir = phys_pagedir;

	uint32_t* pagedir_ptr = vmm_alloc(0);
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  103a00:	8b 45 d8             	mov    -0x28(%ebp),%eax
  103a03:	05 01 00 00 00       	add    $0x1,%eax
  103a08:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103a0b:	e9 ce fe ff ff       	jmp    1038de <vmm_create_vpdraw+0x6e>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  103a10:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  103a17:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  103a1e:	0f 83 58 00 00 00    	jae    103a7c <vmm_create_vpdraw+0x20c>
  103a24:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
  103a29:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  103a2c:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103a2f:	8b 12                	mov    (%edx),%edx
  103a31:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  103a34:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  103a3a:	89 4d dc             	mov    %ecx,-0x24(%ebp)
		map_address_context(pagedir_ptr,
  103a3d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103a40:	8b 15 8c 51 10 00    	mov    0x10518c,%edx
  103a46:	8b 75 d8             	mov    -0x28(%ebp),%esi
  103a49:	c1 e6 0c             	shl    $0xc,%esi
  103a4c:	01 f2                	add    %esi,%edx
  103a4e:	8b 75 dc             	mov    -0x24(%ebp),%esi
  103a51:	89 0c 24             	mov    %ecx,(%esp)
  103a54:	89 54 24 04          	mov    %edx,0x4(%esp)
  103a58:	89 74 24 08          	mov    %esi,0x8(%esp)
  103a5c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  103a63:	00 
  103a64:	89 45 c0             	mov    %eax,-0x40(%ebp)
  103a67:	e8 14 01 00 00       	call   103b80 <map_address_context>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  103a6c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  103a6f:	05 01 00 00 00       	add    $0x1,%eax
  103a74:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103a77:	e9 9b ff ff ff       	jmp    103a17 <vmm_create_vpdraw+0x1a7>
  103a7c:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
  103a81:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103a84:	8b 15 90 51 10 00    	mov    0x105190,%edx
  103a8a:	8b 75 ec             	mov    -0x14(%ebp),%esi
  103a8d:	89 0c 24             	mov    %ecx,(%esp)
  103a90:	89 54 24 04          	mov    %edx,0x4(%esp)
  103a94:	89 74 24 08          	mov    %esi,0x8(%esp)
  103a98:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  103a9f:	00 
  103aa0:	89 45 bc             	mov    %eax,-0x44(%ebp)
  103aa3:	e8 d8 00 00 00       	call   103b80 <map_address_context>
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  103aa8:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  103aaf:	8d 05 00 d0 12 00    	lea    0x12d000,%eax
  103ab5:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  103ab8:	0f 83 39 00 00 00    	jae    103af7 <vmm_create_vpdraw+0x287>
  103abe:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(pagedir_ptr, i, i, 0);
  103ac3:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103ac6:	8b 55 d8             	mov    -0x28(%ebp),%edx
  103ac9:	8b 75 d8             	mov    -0x28(%ebp),%esi
  103acc:	89 0c 24             	mov    %ecx,(%esp)
  103acf:	89 54 24 04          	mov    %edx,0x4(%esp)
  103ad3:	89 74 24 08          	mov    %esi,0x8(%esp)
  103ad7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  103ade:	00 
  103adf:	89 45 b8             	mov    %eax,-0x48(%ebp)
  103ae2:	e8 99 00 00 00       	call   103b80 <map_address_context>
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  103ae7:	8b 45 d8             	mov    -0x28(%ebp),%eax
  103aea:	05 00 10 00 00       	add    $0x1000,%eax
  103aef:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103af2:	e9 b8 ff ff ff       	jmp    103aaf <vmm_create_vpdraw+0x23f>
		map_address_context(pagedir_ptr, i, i, 0);
	}

	uint32_t* pd_ptr = context->pagedir;
  103af7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103afa:	8b 00                	mov    (%eax),%eax
  103afc:	89 45 cc             	mov    %eax,-0x34(%ebp)
	context->pagedir = (uint32_t*) phys_pagedir;
  103aff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103b02:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  103b05:	89 01                	mov    %eax,(%ecx)

	vmm_unmap(pd_ptr);
  103b07:	8b 45 cc             	mov    -0x34(%ebp),%eax
  103b0a:	89 04 24             	mov    %eax,(%esp)
  103b0d:	e8 fe 00 00 00       	call   103c10 <vmm_unmap>
	vmm_unmap(context);
  103b12:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103b15:	89 04 24             	mov    %eax,(%esp)
  103b18:	e8 f3 00 00 00       	call   103c10 <vmm_unmap>

	return pagedir_ptr;
  103b1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103b20:	83 c4 4c             	add    $0x4c,%esp
  103b23:	5e                   	pop    %esi
  103b24:	5f                   	pop    %edi
  103b25:	5b                   	pop    %ebx
  103b26:	5d                   	pop    %ebp
  103b27:	c3                   	ret    
  103b28:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  103b2f:	00 

00103b30 <vmm_alloc_user>:

void* vmm_alloc_ucont(uint32_t cont) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  103b30:	55                   	push   %ebp
  103b31:	89 e5                	mov    %esp,%ebp
  103b33:	56                   	push   %esi
  103b34:	83 ec 24             	sub    $0x24,%esp
  103b37:	8b 45 08             	mov    0x8(%ebp),%eax
  103b3a:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  103b3f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  103b44:	be 01 00 00 00       	mov    $0x1,%esi
  103b49:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  103b4c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103b4f:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  103b56:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  103b5d:	ff 
  103b5e:	89 44 24 08          	mov    %eax,0x8(%esp)
  103b62:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103b69:	00 
  103b6a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  103b6d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  103b70:	89 55 ec             	mov    %edx,-0x14(%ebp)
  103b73:	e8 b8 04 00 00       	call   104030 <vmm_alloc_in_range>
  103b78:	83 c4 24             	add    $0x24,%esp
  103b7b:	5e                   	pop    %esi
  103b7c:	5d                   	pop    %ebp
  103b7d:	c3                   	ret    
  103b7e:	66 90                	xchg   %ax,%ax

00103b80 <map_address_context>:
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
  103b80:	55                   	push   %ebp
  103b81:	89 e5                	mov    %esp,%ebp
  103b83:	56                   	push   %esi
  103b84:	83 ec 18             	sub    $0x18,%esp
  103b87:	8b 45 14             	mov    0x14(%ebp),%eax
  103b8a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  103b8d:	8b 55 0c             	mov    0xc(%ebp),%edx
  103b90:	8b 75 08             	mov    0x8(%ebp),%esi
  103b93:	89 75 f8             	mov    %esi,-0x8(%ebp)
  103b96:	89 55 f4             	mov    %edx,-0xc(%ebp)
  103b99:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  103b9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32_t pd_entry = vaddr >> 22;
  103b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ba2:	c1 e8 16             	shr    $0x16,%eax
  103ba5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32_t pt_entry = (vaddr >> 12) % 1024;
  103ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103bab:	c1 e8 0c             	shr    $0xc,%eax
  103bae:	25 ff 03 00 00       	and    $0x3ff,%eax
  103bb3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  103bb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103bb9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103bbe:	0d 01 00 00 00       	or     $0x1,%eax
  103bc3:	0d 02 00 00 00       	or     $0x2,%eax
  103bc8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103bcb:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  103bd1:	09 c8                	or     %ecx,%eax
  103bd3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103bd6:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103bd9:	8b 75 f8             	mov    -0x8(%ebp),%esi
  103bdc:	8b 14 96             	mov    (%esi,%edx,4),%edx
  103bdf:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  103be5:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  103be8:	81 e1 04 02 00 00    	and    $0x204,%ecx
  103bee:	09 c8                	or     %ecx,%eax
  103bf0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103bf3:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103bf6:	8b 75 f8             	mov    -0x8(%ebp),%esi
  103bf9:	8b 14 96             	mov    (%esi,%edx,4),%edx
  103bfc:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  103c02:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}
  103c05:	83 c4 18             	add    $0x18,%esp
  103c08:	5e                   	pop    %esi
  103c09:	5d                   	pop    %ebp
  103c0a:	c3                   	ret    
  103c0b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103c10 <vmm_unmap>:
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  103c10:	55                   	push   %ebp
  103c11:	89 e5                	mov    %esp,%ebp
  103c13:	83 ec 08             	sub    $0x8,%esp
  103c16:	8b 45 08             	mov    0x8(%ebp),%eax
  103c19:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  103c1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103c1f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  103c22:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103c25:	c1 e8 0c             	shr    $0xc,%eax
  103c28:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  103c2e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103c31:	25 01 02 00 00       	and    $0x201,%eax
  103c36:	3d 01 02 00 00       	cmp    $0x201,%eax
  103c3b:	0f 85 2e 00 00 00    	jne    103c6f <vmm_unmap+0x5f>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  103c41:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103c44:	c1 e8 0c             	shr    $0xc,%eax
  103c47:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  103c4d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103c50:	25 04 00 00 00       	and    $0x4,%eax
  103c55:	0d 00 02 00 00       	or     $0x200,%eax
  103c5a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103c5d:	c1 e9 0c             	shr    $0xc,%ecx
  103c60:	8b 15 8c 51 10 00    	mov    0x10518c,%edx
  103c66:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  103c69:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103c6c:	0f 01 38             	invlpg (%eax)
	}
}
  103c6f:	83 c4 08             	add    $0x8,%esp
  103c72:	5d                   	pop    %ebp
  103c73:	c3                   	ret    
  103c74:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103c7b:	00 00 00 00 00 

00103c80 <vmm_free_pdptr>:
	vmm_unmap(context);

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  103c80:	55                   	push   %ebp
  103c81:	89 e5                	mov    %esp,%ebp
  103c83:	83 ec 18             	sub    $0x18,%esp
  103c86:	8b 45 08             	mov    0x8(%ebp),%eax
  103c89:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (uint32_t i = 0; i < 1024; i++) {
  103c8c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  103c93:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  103c9a:	0f 83 21 00 00 00    	jae    103cc1 <vmm_free_pdptr+0x41>
		vmm_unmap((void*) pagedir_ptr[i]);
  103ca0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ca3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103ca6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103ca9:	89 04 24             	mov    %eax,(%esp)
  103cac:	e8 5f ff ff ff       	call   103c10 <vmm_unmap>

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
	for (uint32_t i = 0; i < 1024; i++) {
  103cb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103cb4:	05 01 00 00 00       	add    $0x1,%eax
  103cb9:	89 45 f8             	mov    %eax,-0x8(%ebp)
  103cbc:	e9 d2 ff ff ff       	jmp    103c93 <vmm_free_pdptr+0x13>
		vmm_unmap((void*) pagedir_ptr[i]);
	}

	vmm_unmap(pagedir_ptr);
  103cc1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103cc4:	89 04 24             	mov    %eax,(%esp)
  103cc7:	e8 44 ff ff ff       	call   103c10 <vmm_unmap>
}
  103ccc:	83 c4 18             	add    $0x18,%esp
  103ccf:	5d                   	pop    %ebp
  103cd0:	c3                   	ret    
  103cd1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103cd8:	0f 1f 84 00 00 00 00 
  103cdf:	00 

00103ce0 <vmm_create_pagedir>:
	vmm_free_pdptr(pdptr);

	return phys_pagedir;
}

uint32_t vmm_create_pagedir() {
  103ce0:	55                   	push   %ebp
  103ce1:	89 e5                	mov    %esp,%ebp
  103ce3:	83 ec 18             	sub    $0x18,%esp
  103ce6:	8d 45 fc             	lea    -0x4(%ebp),%eax
	uint32_t phys_pagedir;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  103ce9:	89 04 24             	mov    %eax,(%esp)
  103cec:	e8 7f fb ff ff       	call   103870 <vmm_create_vpdraw>
  103cf1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	vmm_free_pdptr(pdptr);
  103cf4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103cf7:	89 04 24             	mov    %eax,(%esp)
  103cfa:	e8 81 ff ff ff       	call   103c80 <vmm_free_pdptr>

	return phys_pagedir;
  103cff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d02:	83 c4 18             	add    $0x18,%esp
  103d05:	5d                   	pop    %ebp
  103d06:	c3                   	ret    
  103d07:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  103d0e:	00 00 

00103d10 <vmm_resolve>:
}

uint32_t vmm_resolve(void* vaddr) {
  103d10:	55                   	push   %ebp
  103d11:	89 e5                	mov    %esp,%ebp
  103d13:	50                   	push   %eax
  103d14:	8b 45 08             	mov    0x8(%ebp),%eax
  103d17:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return active_pagetables[(uint32_t) vaddr >> 12] & 0xFFFFF000;
  103d1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d1d:	c1 e8 0c             	shr    $0xc,%eax
  103d20:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  103d26:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103d29:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103d2e:	83 c4 04             	add    $0x4,%esp
  103d31:	5d                   	pop    %ebp
  103d32:	c3                   	ret    
  103d33:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103d3a:	84 00 00 00 00 00 

00103d40 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  103d40:	55                   	push   %ebp
  103d41:	89 e5                	mov    %esp,%ebp
  103d43:	83 ec 38             	sub    $0x38,%esp
  103d46:	8b 45 0c             	mov    0xc(%ebp),%eax
  103d49:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103d4c:	ba 00 00 00 00       	mov    $0x0,%edx
  103d51:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103d54:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uint32_t pd_entry = (uint32_t) vaddr >> 22;
  103d57:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d5a:	c1 e8 16             	shr    $0x16,%eax
  103d5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = ((uint32_t) vaddr >> 12) % 1024;
  103d60:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d63:	c1 e8 0c             	shr    $0xc,%eax
  103d66:	25 ff 03 00 00       	and    $0x3ff,%eax
  103d6b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32_t* vpd = vmm_alloc(0);
  103d6e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  103d75:	89 55 e0             	mov    %edx,-0x20(%ebp)
  103d78:	e8 83 00 00 00       	call   103e00 <vmm_alloc>
  103d7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vmm_free(vpd);
  103d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103d83:	89 04 24             	mov    %eax,(%esp)
  103d86:	e8 c5 00 00 00       	call   103e50 <vmm_free>
  103d8b:	b8 00 00 00 00       	mov    $0x0,%eax

	map_address_active((uint32_t) vpd, pdir, 0);
  103d90:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103d93:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103d96:	89 0c 24             	mov    %ecx,(%esp)
  103d99:	89 54 24 04          	mov    %edx,0x4(%esp)
  103d9d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  103da4:	00 
  103da5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  103da8:	e8 23 01 00 00       	call   103ed0 <map_address_active>
  103dad:	b8 00 00 00 00       	mov    $0x0,%eax
	uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  103db2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103db5:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103db8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  103dbb:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  103dc1:	89 4d e8             	mov    %ecx,-0x18(%ebp)

	map_address_active((uint32_t) vpd, table, 0);
  103dc4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103dc7:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103dca:	89 0c 24             	mov    %ecx,(%esp)
  103dcd:	89 54 24 04          	mov    %edx,0x4(%esp)
  103dd1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  103dd8:	00 
  103dd9:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103ddc:	e8 ef 00 00 00       	call   103ed0 <map_address_active>
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  103de1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103de4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103de7:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103dea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103def:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	return addr & 0xFFFFF000;
  103df2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103df5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103dfa:	83 c4 38             	add    $0x38,%esp
  103dfd:	5d                   	pop    %ebp
  103dfe:	c3                   	ret    
  103dff:	90                   	nop

00103e00 <vmm_alloc>:

void* vmm_alloc_cont(uint32_t cont) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
}

void* vmm_alloc(uint32_t* retpaddr) {
  103e00:	55                   	push   %ebp
  103e01:	89 e5                	mov    %esp,%ebp
  103e03:	56                   	push   %esi
  103e04:	83 ec 24             	sub    $0x24,%esp
  103e07:	8b 45 08             	mov    0x8(%ebp),%eax
  103e0a:	b9 00 00 80 00       	mov    $0x800000,%ecx
  103e0f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  103e14:	be 01 00 00 00       	mov    $0x1,%esi
  103e19:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  103e1c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103e1f:	c7 04 24 00 00 80 00 	movl   $0x800000,(%esp)
  103e26:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  103e2d:	20 
  103e2e:	89 44 24 08          	mov    %eax,0x8(%esp)
  103e32:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103e39:	00 
  103e3a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  103e3d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  103e40:	89 55 ec             	mov    %edx,-0x14(%ebp)
  103e43:	e8 e8 01 00 00       	call   104030 <vmm_alloc_in_range>
  103e48:	83 c4 24             	add    $0x24,%esp
  103e4b:	5e                   	pop    %esi
  103e4c:	5d                   	pop    %ebp
  103e4d:	c3                   	ret    
  103e4e:	66 90                	xchg   %ax,%ax

00103e50 <vmm_free>:
			| PT_WRITE | (flags & 0xFFF)
			| (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  103e50:	55                   	push   %ebp
  103e51:	89 e5                	mov    %esp,%ebp
  103e53:	83 ec 18             	sub    $0x18,%esp
  103e56:	8b 45 08             	mov    0x8(%ebp),%eax
  103e59:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  103e5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103e5f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  103e62:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103e65:	c1 e8 0c             	shr    $0xc,%eax
  103e68:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  103e6e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103e71:	25 01 02 00 00       	and    $0x201,%eax
  103e76:	3d 01 02 00 00       	cmp    $0x201,%eax
  103e7b:	0f 85 4a 00 00 00    	jne    103ecb <vmm_free+0x7b>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));
  103e81:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103e84:	c1 e8 0c             	shr    $0xc,%eax
  103e87:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  103e8d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103e90:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103e95:	89 04 24             	mov    %eax,(%esp)
  103e98:	e8 53 e2 ff ff       	call   1020f0 <pmm_free>

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  103e9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ea0:	c1 e8 0c             	shr    $0xc,%eax
  103ea3:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  103ea9:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  103eac:	25 04 00 00 00       	and    $0x4,%eax
  103eb1:	0d 00 02 00 00       	or     $0x200,%eax
  103eb6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103eb9:	c1 e9 0c             	shr    $0xc,%ecx
  103ebc:	8b 15 8c 51 10 00    	mov    0x10518c,%edx
  103ec2:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  103ec5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ec8:	0f 01 38             	invlpg (%eax)
	}
}
  103ecb:	83 c4 18             	add    $0x18,%esp
  103ece:	5d                   	pop    %ebp
  103ecf:	c3                   	ret    

00103ed0 <map_address_active>:
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  103ed0:	55                   	push   %ebp
  103ed1:	89 e5                	mov    %esp,%ebp
  103ed3:	83 ec 0c             	sub    $0xc,%esp
  103ed6:	8b 45 10             	mov    0x10(%ebp),%eax
  103ed9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  103edc:	8b 55 08             	mov    0x8(%ebp),%edx
  103edf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  103ee2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103ee5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT
  103ee8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103eeb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103ef0:	0d 01 00 00 00       	or     $0x1,%eax
  103ef5:	0d 02 00 00 00       	or     $0x2,%eax
  103efa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103efd:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  103f03:	09 c8                	or     %ecx,%eax
  103f05:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103f08:	c1 e9 0c             	shr    $0xc,%ecx
  103f0b:	8b 15 8c 51 10 00    	mov    0x10518c,%edx
  103f11:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  103f14:	81 e1 04 02 00 00    	and    $0x204,%ecx
  103f1a:	09 c8                	or     %ecx,%eax
  103f1c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103f1f:	c1 e9 0c             	shr    $0xc,%ecx
  103f22:	8b 15 8c 51 10 00    	mov    0x10518c,%edx
  103f28:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			| PT_WRITE | (flags & 0xFFF)
			| (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  103f2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103f2e:	0f 01 38             	invlpg (%eax)
}
  103f31:	83 c4 0c             	add    $0xc,%esp
  103f34:	5d                   	pop    %ebp
  103f35:	c3                   	ret    
  103f36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  103f3d:	00 00 00 

00103f40 <vmm_map_range>:
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;

	return addr & 0xFFFFF000;
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  103f40:	55                   	push   %ebp
  103f41:	89 e5                	mov    %esp,%ebp
  103f43:	56                   	push   %esi
  103f44:	83 ec 24             	sub    $0x24,%esp
  103f47:	8b 45 14             	mov    0x14(%ebp),%eax
  103f4a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  103f4d:	8b 55 0c             	mov    0xc(%ebp),%edx
  103f50:	8b 75 08             	mov    0x8(%ebp),%esi
  103f53:	89 75 f8             	mov    %esi,-0x8(%ebp)
  103f56:	89 55 f4             	mov    %edx,-0xc(%ebp)
  103f59:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  103f5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((uint32_t) vaddr & 0xFFF)
  103f5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103f62:	25 ff 0f 00 00       	and    $0xfff,%eax
  103f67:	3d 00 00 00 00       	cmp    $0x0,%eax
  103f6c:	0f 84 05 00 00 00    	je     103f77 <vmm_map_range+0x37>
		return;
  103f72:	e9 5a 00 00 00       	jmp    103fd1 <vmm_map_range+0x91>
	if ((uint32_t) paddr & 0xFFF)
  103f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f7a:	25 ff 0f 00 00       	and    $0xfff,%eax
  103f7f:	3d 00 00 00 00       	cmp    $0x0,%eax
  103f84:	0f 84 05 00 00 00    	je     103f8f <vmm_map_range+0x4f>
		return;
  103f8a:	e9 42 00 00 00       	jmp    103fd1 <vmm_map_range+0x91>

	for (uint32_t i = 0; i < length; i += 0x1000) {
  103f8f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  103f96:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103f99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  103f9c:	0f 83 2f 00 00 00    	jae    103fd1 <vmm_map_range+0x91>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
  103fa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103fa5:	03 45 e8             	add    -0x18(%ebp),%eax
  103fa8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103fab:	03 4d e8             	add    -0x18(%ebp),%ecx
  103fae:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103fb1:	89 04 24             	mov    %eax,(%esp)
  103fb4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103fb8:	89 54 24 08          	mov    %edx,0x8(%esp)
  103fbc:	e8 0f ff ff ff       	call   103ed0 <map_address_active>
	if ((uint32_t) vaddr & 0xFFF)
		return;
	if ((uint32_t) paddr & 0xFFF)
		return;

	for (uint32_t i = 0; i < length; i += 0x1000) {
  103fc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103fc4:	05 00 10 00 00       	add    $0x1000,%eax
  103fc9:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103fcc:	e9 c5 ff ff ff       	jmp    103f96 <vmm_map_range+0x56>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}
  103fd1:	83 c4 24             	add    $0x24,%esp
  103fd4:	5e                   	pop    %esi
  103fd5:	5d                   	pop    %ebp
  103fd6:	c3                   	ret    
  103fd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  103fde:	00 00 

00103fe0 <vmm_alloc_ucont>:
	}

	return vaddr;
}

void* vmm_alloc_ucont(uint32_t cont) {
  103fe0:	55                   	push   %ebp
  103fe1:	89 e5                	mov    %esp,%ebp
  103fe3:	56                   	push   %esi
  103fe4:	83 ec 24             	sub    $0x24,%esp
  103fe7:	8b 45 08             	mov    0x8(%ebp),%eax
  103fea:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  103fef:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  103ff4:	be 00 00 00 00       	mov    $0x0,%esi
  103ff9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  103ffc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103fff:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  104006:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  10400d:	ff 
  10400e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  104015:	00 
  104016:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10401a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10401d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  104020:	89 55 ec             	mov    %edx,-0x14(%ebp)
  104023:	e8 08 00 00 00       	call   104030 <vmm_alloc_in_range>
  104028:	83 c4 24             	add    $0x24,%esp
  10402b:	5e                   	pop    %esi
  10402c:	5d                   	pop    %ebp
  10402d:	c3                   	ret    
  10402e:	66 90                	xchg   %ax,%ax

00104030 <vmm_alloc_in_range>:
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr,
		uint32_t cont) {
  104030:	55                   	push   %ebp
  104031:	89 e5                	mov    %esp,%ebp
  104033:	56                   	push   %esi
  104034:	83 ec 34             	sub    $0x34,%esp
  104037:	8b 45 14             	mov    0x14(%ebp),%eax
  10403a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10403d:	8b 55 0c             	mov    0xc(%ebp),%edx
  104040:	8b 75 08             	mov    0x8(%ebp),%esi
  104043:	89 75 f8             	mov    %esi,-0x8(%ebp)
  104046:	89 55 f4             	mov    %edx,-0xc(%ebp)
  104049:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10404c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* vaddr = 0;
  10404f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32_t i = 0;
  104056:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32_t c = 0;
  10405d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  104064:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104067:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  10406c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10406f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104072:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  104075:	0f 83 6f 00 00 00    	jae    1040ea <vmm_alloc_in_range+0xba>
		if ((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  10407b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10407e:	c1 e8 0c             	shr    $0xc,%eax
  104081:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  104087:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10408a:	25 01 02 00 00       	and    $0x201,%eax
  10408f:	3d 00 02 00 00       	cmp    $0x200,%eax
  104094:	0f 85 34 00 00 00    	jne    1040ce <vmm_alloc_in_range+0x9e>
				== PT_ALLOCATABLE) {
			if (c == 0)
  10409a:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  1040a1:	0f 85 06 00 00 00    	jne    1040ad <vmm_alloc_in_range+0x7d>
				vaddr = (void*) i;
  1040a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1040aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
			c++;
  1040ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1040b0:	05 01 00 00 00       	add    $0x1,%eax
  1040b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (c >= cont)
  1040b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1040bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1040be:	0f 82 05 00 00 00    	jb     1040c9 <vmm_alloc_in_range+0x99>
				break;
  1040c4:	e9 21 00 00 00       	jmp    1040ea <vmm_alloc_in_range+0xba>
		} else {
  1040c9:	e9 07 00 00 00       	jmp    1040d5 <vmm_alloc_in_range+0xa5>
			c = 0;
  1040ce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
	}
  1040d5:	e9 00 00 00 00       	jmp    1040da <vmm_alloc_in_range+0xaa>
		uint32_t cont) {
	void* vaddr = 0;
	uint32_t i = 0;
	uint32_t c = 0;

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  1040da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1040dd:	05 00 10 00 00       	add    $0x1000,%eax
  1040e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1040e5:	e9 85 ff ff ff       	jmp    10406f <vmm_alloc_in_range+0x3f>
		} else {
			c = 0;
		}
	}

	uint32_t off = 0;
  1040ea:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	while (c--) {
  1040f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1040f4:	89 c1                	mov    %eax,%ecx
  1040f6:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1040fc:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  1040ff:	3d 00 00 00 00       	cmp    $0x0,%eax
  104104:	0f 84 59 00 00 00    	je     104163 <vmm_alloc_in_range+0x133>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
  10410a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10410d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  104110:	c1 e1 0c             	shl    $0xc,%ecx
  104113:	01 c8                	add    %ecx,%eax
  104115:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  10411c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10411f:	0f 85 0b 00 00 00    	jne    104130 <vmm_alloc_in_range+0x100>
  104125:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104128:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10412b:	e9 0d 00 00 00       	jmp    10413d <vmm_alloc_in_range+0x10d>
  104130:	b8 00 00 00 00       	mov    $0x0,%eax
  104135:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  104138:	e9 00 00 00 00       	jmp    10413d <vmm_alloc_in_range+0x10d>
  10413d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104140:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104143:	89 0c 24             	mov    %ecx,(%esp)
  104146:	89 44 24 04          	mov    %eax,0x4(%esp)
  10414a:	e8 71 00 00 00       	call   1041c0 <vmm_alloc_addr>
		off++;
  10414f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  104152:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104158:	89 4d dc             	mov    %ecx,-0x24(%ebp)
	}
  10415b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10415e:	e9 8e ff ff ff       	jmp    1040f1 <vmm_alloc_in_range+0xc1>

	return vaddr;
  104163:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104166:	83 c4 34             	add    $0x34,%esp
  104169:	5e                   	pop    %esi
  10416a:	5d                   	pop    %ebp
  10416b:	c3                   	ret    
  10416c:	0f 1f 40 00          	nopl   0x0(%eax)

00104170 <vmm_alloc_cont>:

void* vmm_alloc_user(uint32_t* retpaddr) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
}

void* vmm_alloc_cont(uint32_t cont) {
  104170:	55                   	push   %ebp
  104171:	89 e5                	mov    %esp,%ebp
  104173:	56                   	push   %esi
  104174:	83 ec 24             	sub    $0x24,%esp
  104177:	8b 45 08             	mov    0x8(%ebp),%eax
  10417a:	b9 00 00 80 00       	mov    $0x800000,%ecx
  10417f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  104184:	be 00 00 00 00       	mov    $0x0,%esi
  104189:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  10418c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10418f:	c7 04 24 00 00 80 00 	movl   $0x800000,(%esp)
  104196:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  10419d:	20 
  10419e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1041a5:	00 
  1041a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  1041aa:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1041ad:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1041b0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1041b3:	e8 78 fe ff ff       	call   104030 <vmm_alloc_in_range>
  1041b8:	83 c4 24             	add    $0x24,%esp
  1041bb:	5e                   	pop    %esi
  1041bc:	5d                   	pop    %ebp
  1041bd:	c3                   	ret    
  1041be:	66 90                	xchg   %ax,%ax

001041c0 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  1041c0:	55                   	push   %ebp
  1041c1:	89 e5                	mov    %esp,%ebp
  1041c3:	56                   	push   %esi
  1041c4:	83 ec 34             	sub    $0x34,%esp
  1041c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1041ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1041cd:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1041d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (reqvaddr == 0) {
  1041d3:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1041da:	0f 85 34 00 00 00    	jne    104214 <vmm_alloc_addr+0x54>
  1041e0:	8d 05 95 63 10 00    	lea    0x106395,%eax
  1041e6:	b9 00 00 00 00       	mov    $0x0,%ecx
		kprintf(
  1041eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1041ee:	89 04 24             	mov    %eax,(%esp)
  1041f1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1041f5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1041fc:	00 
  1041fd:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  104200:	e8 4b c3 ff ff       	call   100550 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
  104205:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10420c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10420f:	e9 9b 00 00 00       	jmp    1042af <vmm_alloc_addr+0xef>
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  104214:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104217:	c1 e8 0c             	shr    $0xc,%eax
  10421a:	8b 0d 8c 51 10 00    	mov    0x10518c,%ecx
  104220:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  104223:	25 01 02 00 00       	and    $0x201,%eax
  104228:	3d 00 02 00 00       	cmp    $0x200,%eax
  10422d:	0f 84 37 00 00 00    	je     10426a <vmm_alloc_addr+0xaa>
  104233:	8d 05 95 63 10 00    	lea    0x106395,%eax
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
  104239:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10423c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10423f:	c1 ea 0c             	shr    $0xc,%edx
  104242:	8b 35 8c 51 10 00    	mov    0x10518c,%esi
  104248:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10424b:	89 04 24             	mov    %eax,(%esp)
  10424e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104252:	89 54 24 08          	mov    %edx,0x8(%esp)
  104256:	e8 f5 c2 ff ff       	call   100550 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
		return 0;
  10425b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  104262:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104265:	e9 45 00 00 00       	jmp    1042af <vmm_alloc_addr+0xef>
  10426a:	b8 04 02 00 00       	mov    $0x204,%eax
	}

	uint32_t paddr = (uint32_t) pmm_alloc();
  10426f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  104272:	e8 59 dc ff ff       	call   101ed0 <pmm_alloc>
  104277:	89 45 ec             	mov    %eax,-0x14(%ebp)
	map_address_active((uint32_t) reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  10427a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10427d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104280:	89 04 24             	mov    %eax,(%esp)
  104283:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104287:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  10428e:	00 
  10428f:	e8 3c fc ff ff       	call   103ed0 <map_address_active>

	if (retpaddr != 0)
  104294:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10429b:	0f 84 08 00 00 00    	je     1042a9 <vmm_alloc_addr+0xe9>
		*retpaddr = paddr;
  1042a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1042a4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1042a7:	89 01                	mov    %eax,(%ecx)

	return reqvaddr;
  1042a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1042ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  1042af:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1042b2:	83 c4 34             	add    $0x34,%esp
  1042b5:	5e                   	pop    %esi
  1042b6:	5d                   	pop    %ebp
  1042b7:	c3                   	ret    
  1042b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  1042bf:	00 

001042c0 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  1042c0:	55                   	push   %ebp
  1042c1:	89 e5                	mov    %esp,%ebp
  1042c3:	50                   	push   %eax
  1042c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1042c7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	active_pagedir = pdpaddr;
  1042ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1042cd:	a3 4c 84 10 00       	mov    %eax,0x10844c
	asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  1042d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1042d5:	0f 22 d8             	mov    %eax,%cr3
}
  1042d8:	83 c4 04             	add    $0x4,%esp
  1042db:	5d                   	pop    %ebp
  1042dc:	c3                   	ret    
  1042dd:	0f 1f 00             	nopl   (%eax)

001042e0 <vmm_init>:

uint32_t vmm_init(void) {
  1042e0:	55                   	push   %ebp
  1042e1:	89 e5                	mov    %esp,%ebp
	//CREATE CONTEXT ************************************************************

	struct vmm_context* context = pmm_alloc();
  1042e3:	53                   	push   %ebx
  1042e4:	57                   	push   %edi
  1042e5:	56                   	push   %esi
  1042e6:	83 ec 3c             	sub    $0x3c,%esp
  1042e9:	e8 e2 db ff ff       	call   101ed0 <pmm_alloc>
  1042ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t i, i2;

	context->pagedir = pmm_alloc();
  1042f1:	e8 da db ff ff       	call   101ed0 <pmm_alloc>
  1042f6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1042f9:	89 01                	mov    %eax,(%ecx)

	for (i = 0; i < 1024; i++) {
  1042fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  104302:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  104309:	0f 83 d6 00 00 00    	jae    1043e5 <vmm_init+0x105>
		context->pagedir[i] = ((uint32_t) pmm_alloc());
  10430f:	e8 bc db ff ff       	call   101ed0 <pmm_alloc>
  104314:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104317:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10431a:	8b 12                	mov    (%edx),%edx
  10431c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
		if (i < PMEM_TABLES) {
  10431f:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  104326:	0f 83 15 00 00 00    	jae    104341 <vmm_init+0x61>
			kernel_pagetables[i] = context->pagedir[i];
  10432c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10432f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104332:	8b 09                	mov    (%ecx),%ecx
  104334:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  104337:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10433a:	89 04 8d 80 c4 12 00 	mov    %eax,0x12c480(,%ecx,4)
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  104341:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104344:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104347:	8b 09                	mov    (%ecx),%ecx
  104349:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  10434c:	81 ca 07 00 00 00    	or     $0x7,%edx
  104352:	89 14 81             	mov    %edx,(%ecx,%eax,4)

		for (i2 = 0; i2 < 1024; i2++) {
  104355:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10435c:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  104363:	0f 83 67 00 00 00    	jae    1043d0 <vmm_init+0xf0>
  104369:	b8 04 00 00 00       	mov    $0x4,%eax
  10436e:	b9 00 00 00 00       	mov    $0x0,%ecx
  104373:	ba 00 02 00 00       	mov    $0x200,%edx
			uint32_t vaddr = (i << 22) + (i2 << 12);
  104378:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10437b:	c1 e6 16             	shl    $0x16,%esi
  10437e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  104381:	c1 e7 0c             	shl    $0xc,%edi
  104384:	01 fe                	add    %edi,%esi
  104386:	89 75 e4             	mov    %esi,-0x1c(%ebp)

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  104389:	81 7d e4 00 00 80 00 	cmpl   $0x800000,-0x1c(%ebp)
  104390:	0f 97 c3             	seta   %bl
  104393:	84 db                	test   %bl,%bl
  104395:	0f 44 d1             	cmove  %ecx,%edx
  104398:	81 7d e4 00 10 40 20 	cmpl   $0x20401000,-0x1c(%ebp)
  10439f:	0f 97 c3             	seta   %bl
  1043a2:	84 db                	test   %bl,%bl
  1043a4:	0f 44 c1             	cmove  %ecx,%eax
  1043a7:	09 c2                	or     %eax,%edx
  1043a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1043ac:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1043af:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1043b2:	8b 36                	mov    (%esi),%esi
  1043b4:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  1043b7:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  1043bd:	89 14 81             	mov    %edx,(%ecx,%eax,4)
			kernel_pagetables[i] = context->pagedir[i];
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
  1043c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1043c3:	05 01 00 00 00       	add    $0x1,%eax
  1043c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1043cb:	e9 8c ff ff ff       	jmp    10435c <vmm_init+0x7c>

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}
  1043d0:	e9 00 00 00 00       	jmp    1043d5 <vmm_init+0xf5>
	struct vmm_context* context = pmm_alloc();
	uint32_t i, i2;

	context->pagedir = pmm_alloc();

	for (i = 0; i < 1024; i++) {
  1043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1043d8:	05 01 00 00 00       	add    $0x1,%eax
  1043dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1043e0:	e9 1d ff ff ff       	jmp    104302 <vmm_init+0x22>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  1043e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1043ec:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  1043f3:	0f 83 5a 00 00 00    	jae    104453 <vmm_init+0x173>
  1043f9:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  1043fe:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104401:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104404:	8b 12                	mov    (%edx),%edx
  104406:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  104409:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10440f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
		map_address_context(context->pagedir,
  104412:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104415:	8b 09                	mov    (%ecx),%ecx
  104417:	8b 15 8c 51 10 00    	mov    0x10518c,%edx
  10441d:	8b 75 ec             	mov    -0x14(%ebp),%esi
  104420:	c1 e6 0c             	shl    $0xc,%esi
  104423:	01 f2                	add    %esi,%edx
  104425:	8b 75 e0             	mov    -0x20(%ebp),%esi
  104428:	89 0c 24             	mov    %ecx,(%esp)
  10442b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10442f:	89 74 24 08          	mov    %esi,0x8(%esp)
  104433:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10443a:	00 
  10443b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10443e:	e8 3d f7 ff ff       	call   103b80 <map_address_context>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  104443:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104446:	05 01 00 00 00       	add    $0x1,%eax
  10444b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10444e:	e9 99 ff ff ff       	jmp    1043ec <vmm_init+0x10c>
  104453:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
  104458:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10445b:	8b 09                	mov    (%ecx),%ecx
  10445d:	8b 15 90 51 10 00    	mov    0x105190,%edx
  104463:	8b 75 f0             	mov    -0x10(%ebp),%esi
  104466:	89 0c 24             	mov    %ecx,(%esp)
  104469:	89 54 24 04          	mov    %edx,0x4(%esp)
  10446d:	89 74 24 08          	mov    %esi,0x8(%esp)
  104471:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  104478:	00 
  104479:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10447c:	e8 ff f6 ff ff       	call   103b80 <map_address_context>
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  104481:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  104488:	8d 05 00 d0 12 00    	lea    0x12d000,%eax
  10448e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  104491:	0f 83 3b 00 00 00    	jae    1044d2 <vmm_init+0x1f2>
  104497:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(context->pagedir, i, i, 0);
  10449c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10449f:	8b 09                	mov    (%ecx),%ecx
  1044a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1044a4:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1044a7:	89 0c 24             	mov    %ecx,(%esp)
  1044aa:	89 54 24 04          	mov    %edx,0x4(%esp)
  1044ae:	89 74 24 08          	mov    %esi,0x8(%esp)
  1044b2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1044b9:	00 
  1044ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1044bd:	e8 be f6 ff ff       	call   103b80 <map_address_context>
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1044c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1044c5:	05 00 10 00 00       	add    $0x1000,%eax
  1044ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1044cd:	e9 b6 ff ff ff       	jmp    104488 <vmm_init+0x1a8>
		map_address_context(context->pagedir, i, i, 0);
	}

	//END CREATE CONTEXT ********************************************************

	vmm_activate_pagedir((uint32_t) context->pagedir);
  1044d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044d5:	8b 00                	mov    (%eax),%eax
  1044d7:	89 04 24             	mov    %eax,(%esp)
  1044da:	e8 e1 fd ff ff       	call   1042c0 <vmm_activate_pagedir>

	uint32_t cr0;

	asm volatile("mov %%cr0, %0" : "=r" (cr0));
  1044df:	0f 20 c0             	mov    %cr0,%eax
  1044e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= (1 << 31);
  1044e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1044e8:	0d 00 00 00 80       	or     $0x80000000,%eax
  1044ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
	asm volatile("mov %0, %%cr0" : : "r" (cr0));
  1044f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1044f3:	0f 22 c0             	mov    %eax,%cr0

	return (uint32_t) active_context->pagedir;
  1044f6:	a1 90 51 10 00       	mov    0x105190,%eax
  1044fb:	8b 00                	mov    (%eax),%eax
  1044fd:	83 c4 3c             	add    $0x3c,%esp
  104500:	5e                   	pop    %esi
  104501:	5f                   	pop    %edi
  104502:	5b                   	pop    %ebx
  104503:	5d                   	pop    %ebp
  104504:	c3                   	ret    
  104505:	66 90                	xchg   %ax,%ax
  104507:	90                   	nop

00104508 <_start>:
  104508:	bc 50 a4 10 00       	mov    $0x10a450,%esp
  10450d:	53                   	push   %ebx
  10450e:	e8 fd ba ff ff       	call   100010 <init>

00104513 <_stop>:
  104513:	fa                   	cli    
  104514:	f4                   	hlt    
  104515:	eb fc                	jmp    104513 <_stop>
