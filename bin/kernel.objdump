
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaKernelDev 1.01"

void init(struct multiboot_info* mb_info) {
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	83 ec 28             	sub    $0x28,%esp
  100016:	8b 45 08             	mov    0x8(%ebp),%eax
  100019:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10001c:	e8 cf 04 00 00       	call   1004f0 <clrscr>
	pmm_init(mb_info);
  100021:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100024:	89 04 24             	mov    %eax,(%esp)
  100027:	e8 f4 27 00 00       	call   102820 <pmm_init>
  10002c:	8d 05 98 80 10 00    	lea    0x108098,%eax
  100032:	8d 0d bb 80 10 00    	lea    0x1080bb,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100038:	89 04 24             	mov    %eax,(%esp)
  10003b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10003f:	e8 2c 05 00 00       	call   100570 <kprintf>
  100044:	8d 0d cf 80 10 00    	lea    0x1080cf,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10004a:	89 0c 24             	mov    %ecx,(%esp)
  10004d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100050:	e8 1b 05 00 00       	call   100570 <kprintf>
  100055:	8d 0d 0e 81 10 00    	lea    0x10810e,%ecx

	kprintf("Initializing GDT...\n");
  10005b:	89 0c 24             	mov    %ecx,(%esp)
  10005e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100061:	e8 0a 05 00 00       	call   100570 <kprintf>

	init_gdt();
  100066:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100069:	e8 a2 0b 00 00       	call   100c10 <init_gdt>
  10006e:	8d 05 23 81 10 00    	lea    0x108123,%eax

	kprintf("Initializing IDT...\n");
  100074:	89 04 24             	mov    %eax,(%esp)
  100077:	e8 f4 04 00 00       	call   100570 <kprintf>
  10007c:	8d 0d 38 81 10 00    	lea    0x108138,%ecx

	init_idt();
  100082:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100085:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100088:	e8 a3 0d 00 00       	call   100e30 <init_idt>

	kprintf("Initializing in-kernel-Drivers...\n");
  10008d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100090:	89 04 24             	mov    %eax,(%esp)
  100093:	e8 d8 04 00 00       	call   100570 <kprintf>

	init_drivers();
  100098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10009b:	e8 30 00 00 00       	call   1000d0 <init_drivers>
  1000a0:	8d 05 5b 81 10 00    	lea    0x10815b,%eax

	kprintf("Initializing Kernel...\n");
  1000a6:	89 04 24             	mov    %eax,(%esp)
  1000a9:	e8 c2 04 00 00       	call   100570 <kprintf>

	pmm_print_stats();
  1000ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000b1:	e8 7a 25 00 00       	call   102630 <pmm_print_stats>

	kernel_main(mb_info);
  1000b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000b9:	89 04 24             	mov    %eax,(%esp)
  1000bc:	e8 8f 22 00 00       	call   102350 <kernel_main>

	return;
  1000c1:	83 c4 28             	add    $0x28,%esp
  1000c4:	5d                   	pop    %ebp
  1000c5:	c3                   	ret    
  1000c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1000cd:	00 00 00 

001000d0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000d0:	55                   	push   %ebp
  1000d1:	89 e5                	mov    %esp,%ebp
    init_keyboard_drv();
  1000d3:	83 ec 08             	sub    $0x8,%esp
  1000d6:	e8 05 02 00 00       	call   1002e0 <init_keyboard_drv>
}
  1000db:	83 c4 08             	add    $0x8,%esp
  1000de:	5d                   	pop    %ebp
  1000df:	c3                   	ret    

001000e0 <translate_scancode>:

static uint8_t buffer[4096];
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
  1000e3:	83 ec 28             	sub    $0x28,%esp
  1000e6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000ea:	66 89 c1             	mov    %ax,%cx
  1000ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1000f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1000f3:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  1000f7:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  1000fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000fe:	89 c2                	mov    %eax,%edx
  100100:	83 ea 02             	sub    $0x2,%edx
  100103:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100106:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100109:	0f 84 4f 00 00 00    	je     10015e <translate_scancode+0x7e>
  10010f:	e9 00 00 00 00       	jmp    100114 <translate_scancode+0x34>
  100114:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100117:	83 e8 01             	sub    $0x1,%eax
  10011a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10011d:	0f 84 28 00 00 00    	je     10014b <translate_scancode+0x6b>
  100123:	e9 00 00 00 00       	jmp    100128 <translate_scancode+0x48>
  100128:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10012b:	85 c0                	test   %eax,%eax
  10012d:	0f 85 54 00 00 00    	jne    100187 <translate_scancode+0xa7>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100138:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10013c:	8a 0c 05 00 70 10 00 	mov    0x107000(,%eax,1),%cl
  100143:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100146:	e9 3c 00 00 00       	jmp    100187 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10014b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014f:	8a 0c 05 80 70 10 00 	mov    0x107080(,%eax,1),%cl
  100156:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100159:	e9 29 00 00 00       	jmp    100187 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10015e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100162:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100167:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10016a:	0f 85 0e 00 00 00    	jne    10017e <translate_scancode+0x9e>
  100170:	e9 00 00 00 00       	jmp    100175 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100175:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100179:	e9 04 00 00 00       	jmp    100182 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10017e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100182:	e9 00 00 00 00       	jmp    100187 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100187:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10018b:	3d 00 00 00 00       	cmp    $0x0,%eax
  100190:	0f 85 20 00 00 00    	jne    1001b6 <translate_scancode+0xd6>
  100196:	8d 05 73 81 10 00    	lea    0x108173,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  10019c:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001a0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001a3:	89 04 24             	mov    %eax,(%esp)
  1001a6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001aa:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001ae:	e8 bd 03 00 00       	call   100570 <kprintf>
  1001b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001b6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ba:	83 c4 28             	add    $0x28,%esp
  1001bd:	5d                   	pop    %ebp
  1001be:	c3                   	ret    
  1001bf:	90                   	nop

001001c0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001c0:	55                   	push   %ebp
  1001c1:	89 e5                	mov    %esp,%ebp
  return;
  1001c3:	5d                   	pop    %ebp
  1001c4:	c3                   	ret    
  1001c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1001cc:	00 00 00 00 

001001d0 <getc>:
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}

char getc() {
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  1001d3:	83 ec 08             	sub    $0x8,%esp
  1001d6:	a0 0a 90 10 00       	mov    0x10900a,%al
  1001db:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1001de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001e8:	3b 05 0c a0 10 00    	cmp    0x10a00c,%eax
  1001ee:	0f 8d 24 00 00 00    	jge    100218 <getc+0x48>
		buffer[i] = buffer[i+1];	
  1001f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001f7:	8a 0c 05 0b 90 10 00 	mov    0x10900b(,%eax,1),%cl
  1001fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100201:	88 0c 05 0a 90 10 00 	mov    %cl,0x10900a(,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100208:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10020b:	05 01 00 00 00       	add    $0x1,%eax
  100210:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100213:	e9 cd ff ff ff       	jmp    1001e5 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100218:	a1 0c a0 10 00       	mov    0x10a00c,%eax
  10021d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100222:	a3 0c a0 10 00       	mov    %eax,0x10a00c

	return ret;
  100227:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10022b:	83 c4 08             	add    $0x8,%esp
  10022e:	5d                   	pop    %ebp
  10022f:	c3                   	ret    

00100230 <send_command>:
}

void send_command(uint8_t command) {
  100230:	55                   	push   %ebp
  100231:	89 e5                	mov    %esp,%ebp
  100233:	83 ec 18             	sub    $0x18,%esp
  100236:	8a 45 08             	mov    0x8(%ebp),%al
  100239:	88 45 ff             	mov    %al,-0x1(%ebp)
  10023c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100241:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100248:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10024b:	e8 40 00 00 00       	call   100290 <inb>
  100250:	0f b6 c8             	movzbl %al,%ecx
  100253:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100259:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10025f:	0f 84 05 00 00 00    	je     10026a <send_command+0x3a>
  100265:	e9 d2 ff ff ff       	jmp    10023c <send_command+0xc>
  10026a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10026f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100276:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10027a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10027e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100281:	e8 2a 00 00 00       	call   1002b0 <outb>
}
  100286:	83 c4 18             	add    $0x18,%esp
  100289:	5d                   	pop    %ebp
  10028a:	c3                   	ret    
  10028b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100290 <inb>:
    uint16_t result;
    asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline uint8_t inb(uint16_t _port) {
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	50                   	push   %eax
  100294:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100298:	66 89 c1             	mov    %ax,%cx
  10029b:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
    uint8_t result;
    asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  10029f:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002a3:	ec                   	in     (%dx),%al
  1002a4:	88 45 fd             	mov    %al,-0x3(%ebp)
    return result;
  1002a7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  1002ab:	83 c4 04             	add    $0x4,%esp
  1002ae:	5d                   	pop    %ebp
  1002af:	c3                   	ret    

001002b0 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  1002b0:	55                   	push   %ebp
  1002b1:	89 e5                	mov    %esp,%ebp
  1002b3:	50                   	push   %eax
  1002b4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002b8:	66 89 c1             	mov    %ax,%cx
  1002bb:	8a 55 0c             	mov    0xc(%ebp),%dl
  1002be:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  1002c2:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1002c5:	8a 45 fd             	mov    -0x3(%ebp),%al
  1002c8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002cc:	ee                   	out    %al,(%dx)
}
  1002cd:	83 c4 04             	add    $0x4,%esp
  1002d0:	5d                   	pop    %ebp
  1002d1:	c3                   	ret    
  1002d2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1002d9:	1f 84 00 00 00 00 00 

001002e0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1002e0:	55                   	push   %ebp
  1002e1:	89 e5                	mov    %esp,%ebp
  1002e3:	83 ec 28             	sub    $0x28,%esp
  1002e6:	b8 21 00 00 00       	mov    $0x21,%eax
  1002eb:	8d 0d c0 01 10 00    	lea    0x1001c0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  1002f1:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1002f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1002fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1002ff:	e8 5c 17 00 00       	call   101a60 <register_intr_handler>
  100304:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100309:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100310:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100313:	e8 78 ff ff ff       	call   100290 <inb>
  100318:	0f b6 c8             	movzbl %al,%ecx
  10031b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100321:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100327:	0f 84 1c 00 00 00    	je     100349 <init_keyboard_drv+0x69>
  10032d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100332:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100339:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10033c:	e8 4f ff ff ff       	call   100290 <inb>
	}
  100341:	88 45 f3             	mov    %al,-0xd(%ebp)
  100344:	e9 bb ff ff ff       	jmp    100304 <init_keyboard_drv+0x24>
  100349:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10034e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100355:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100358:	e8 d3 fe ff ff       	call   100230 <send_command>

	init_done = 1;
  10035d:	c7 05 10 a0 10 00 01 	movl   $0x1,0x10a010
  100364:	00 00 00 
}
  100367:	83 c4 28             	add    $0x28,%esp
  10036a:	5d                   	pop    %ebp
  10036b:	c3                   	ret    
  10036c:	66 90                	xchg   %ax,%ax
  10036e:	66 90                	xchg   %ax,%ax

00100370 <in_cod>:
#include "catofdeath.h"

static uint32_t icod = 0;

uint32_t in_cod() {
  100370:	55                   	push   %ebp
  100371:	89 e5                	mov    %esp,%ebp
    return icod;
  100373:	a1 14 a0 10 00       	mov    0x10a014,%eax
  100378:	5d                   	pop    %ebp
  100379:	c3                   	ret    
  10037a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100380 <show_cod>:
}

void show_cod(struct cpu_state* cpu, char* fstr) {
  100380:	55                   	push   %ebp
  100381:	89 e5                	mov    %esp,%ebp
  100383:	56                   	push   %esi
  100384:	83 ec 24             	sub    $0x24,%esp
  100387:	8b 45 0c             	mov    0xc(%ebp),%eax
  10038a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10038d:	ba 04 00 00 00       	mov    $0x4,%edx
  100392:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100395:	89 45 f4             	mov    %eax,-0xc(%ebp)
    icod = 1;
  100398:	c7 05 14 a0 10 00 01 	movl   $0x1,0x10a014
  10039f:	00 00 00 
    kprintf ("          '''  \\   `-._.'`---^_))) \n");
    kprintf ("                `-._ )))       ``` \n");
    kprintf ("                     ```            \n");
#endif

    setclr(0x04);
  1003a2:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1003a9:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1003ac:	e8 9f 01 00 00       	call   100550 <setclr>
    kprintf(fstr);
  1003b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003b4:	89 04 24             	mov    %eax,(%esp)
  1003b7:	e8 b4 01 00 00       	call   100570 <kprintf>
  1003bc:	8d 0d 99 81 10 00    	lea    0x108199,%ecx
    kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  1003c2:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1003c5:	8b 52 1c             	mov    0x1c(%edx),%edx
  1003c8:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1003cb:	8b 76 20             	mov    0x20(%esi),%esi
  1003ce:	89 0c 24             	mov    %ecx,(%esp)
  1003d1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1003d5:	89 74 24 08          	mov    %esi,0x8(%esp)
  1003d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1003dc:	e8 8f 01 00 00       	call   100570 <kprintf>
    show_dump(cpu);
  1003e1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1003e4:	89 0c 24             	mov    %ecx,(%esp)
  1003e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1003ea:	e8 11 00 00 00       	call   100400 <show_dump>

    while (1) {
        asm volatile("cli; hlt");
  1003ef:	fa                   	cli    
  1003f0:	f4                   	hlt    
    }
  1003f1:	e9 f9 ff ff ff       	jmp    1003ef <show_cod+0x6f>
  1003f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1003fd:	00 00 00 

00100400 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  100400:	55                   	push   %ebp
  100401:	89 e5                	mov    %esp,%ebp
  100403:	53                   	push   %ebx
  100404:	57                   	push   %edi
  100405:	56                   	push   %esi
  100406:	83 ec 2c             	sub    $0x2c,%esp
  100409:	8b 45 08             	mov    0x8(%ebp),%eax
  10040c:	8d 0d be 81 10 00    	lea    0x1081be,%ecx
  100412:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx,
  100415:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100418:	8b 00                	mov    (%eax),%eax
  10041a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10041d:	8b 52 04             	mov    0x4(%edx),%edx
  100420:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100423:	8b 76 08             	mov    0x8(%esi),%esi
  100426:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100429:	8b 7f 0c             	mov    0xc(%edi),%edi
  10042c:	89 0c 24             	mov    %ecx,(%esp)
  10042f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100433:	89 54 24 08          	mov    %edx,0x8(%esp)
  100437:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10043b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10043f:	e8 2c 01 00 00       	call   100570 <kprintf>
  100444:	8d 0d df 81 10 00    	lea    0x1081df,%ecx
            cpu->edx);
    kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp,
  10044a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10044d:	8b 52 10             	mov    0x10(%edx),%edx
  100450:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100453:	8b 76 14             	mov    0x14(%esi),%esi
  100456:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100459:	8b 7f 18             	mov    0x18(%edi),%edi
  10045c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10045f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  100462:	89 0c 24             	mov    %ecx,(%esp)
  100465:	89 54 24 04          	mov    %edx,0x4(%esp)
  100469:	89 74 24 08          	mov    %esi,0x8(%esp)
  10046d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  100471:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  100475:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100478:	e8 f3 00 00 00       	call   100570 <kprintf>
  10047d:	8d 0d 00 82 10 00    	lea    0x108200,%ecx
            cpu->eip);
    kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags,
  100483:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100486:	8b 52 28             	mov    0x28(%edx),%edx
  100489:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10048c:	8b 76 2c             	mov    0x2c(%esi),%esi
  10048f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100492:	8b 7f 30             	mov    0x30(%edi),%edi
  100495:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  100498:	8b 5b 34             	mov    0x34(%ebx),%ebx
  10049b:	89 0c 24             	mov    %ecx,(%esp)
  10049e:	89 54 24 04          	mov    %edx,0x4(%esp)
  1004a2:	89 74 24 08          	mov    %esi,0x8(%esp)
  1004a6:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1004aa:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  1004ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1004b1:	e8 ba 00 00 00       	call   100570 <kprintf>
  1004b6:	8d 0d 22 82 10 00    	lea    0x108222,%ecx
            cpu->esp, cpu->ss);

    uint32_t cr2 = 0;
  1004bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    asm volatile("mov %%cr2, %0" : "=r" (cr2));
  1004c3:	0f 20 d2             	mov    %cr2,%edx
  1004c6:	89 55 ec             	mov    %edx,-0x14(%ebp)

    kprintf("CR2: %x \n", cr2);
  1004c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1004cc:	89 0c 24             	mov    %ecx,(%esp)
  1004cf:	89 54 24 04          	mov    %edx,0x4(%esp)
  1004d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1004d6:	e8 95 00 00 00       	call   100570 <kprintf>
}
  1004db:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1004de:	83 c4 2c             	add    $0x2c,%esp
  1004e1:	5e                   	pop    %esi
  1004e2:	5f                   	pop    %edi
  1004e3:	5b                   	pop    %ebx
  1004e4:	5d                   	pop    %ebp
  1004e5:	c3                   	ret    
  1004e6:	66 90                	xchg   %ax,%ax
  1004e8:	66 90                	xchg   %ax,%ax
  1004ea:	66 90                	xchg   %ax,%ax
  1004ec:	66 90                	xchg   %ax,%ax
  1004ee:	66 90                	xchg   %ax,%ax

001004f0 <clrscr>:
        x /= base;
    } while (x);
    kputs(p);
}

void clrscr(void) {
  1004f0:	55                   	push   %ebp
  1004f1:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1004f3:	50                   	push   %eax
  1004f4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1004fb:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  100502:	0f 8d 1d 00 00 00    	jge    100525 <clrscr+0x35>
        video[i] = 0;
  100508:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10050b:	8b 0d 00 71 10 00    	mov    0x107100,%ecx
  100511:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  100515:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100518:	05 01 00 00 00       	add    $0x1,%eax
  10051d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100520:	e9 d6 ff ff ff       	jmp    1004fb <clrscr+0xb>
        video[i] = 0;
    }

    color = 0x07;
  100525:	c6 05 04 71 10 00 07 	movb   $0x7,0x107104

    x = y = 0;
  10052c:	c7 05 18 a0 10 00 00 	movl   $0x0,0x10a018
  100533:	00 00 00 
  100536:	c7 05 1c a0 10 00 00 	movl   $0x0,0x10a01c
  10053d:	00 00 00 
}
  100540:	83 c4 04             	add    $0x4,%esp
  100543:	5d                   	pop    %ebp
  100544:	c3                   	ret    
  100545:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10054c:	00 00 00 00 

00100550 <setclr>:

void setclr(char clr) {
  100550:	55                   	push   %ebp
  100551:	89 e5                	mov    %esp,%ebp
  100553:	50                   	push   %eax
  100554:	8a 45 08             	mov    0x8(%ebp),%al
  100557:	88 45 ff             	mov    %al,-0x1(%ebp)
    color = clr;
  10055a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10055d:	a2 04 71 10 00       	mov    %al,0x107104
}
  100562:	83 c4 04             	add    $0x4,%esp
  100565:	5d                   	pop    %ebp
  100566:	c3                   	ret    
  100567:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10056e:	00 00 

00100570 <kprintf>:

int kprintf(const char* fmt, ...) {
  100570:	55                   	push   %ebp
  100571:	89 e5                	mov    %esp,%ebp
  100573:	83 ec 58             	sub    $0x58,%esp
  100576:	8b 45 08             	mov    0x8(%ebp),%eax
  100579:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  10057c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10057f:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  100582:	89 01                	mov    %eax,(%ecx)
    kprintf_res = 0;
  100584:	c7 05 20 a0 10 00 00 	movl   $0x0,0x10a020
  10058b:	00 00 00 
    while (*fmt) {
  10058e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100591:	80 38 00             	cmpb   $0x0,(%eax)
  100594:	0f 84 dd 01 00 00    	je     100777 <kprintf+0x207>
        if (*fmt == '%') {
  10059a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10059d:	0f be 00             	movsbl (%eax),%eax
  1005a0:	3d 25 00 00 00       	cmp    $0x25,%eax
  1005a5:	0f 85 ae 01 00 00    	jne    100759 <kprintf+0x1e9>
            fmt++;
  1005ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1005ae:	89 c1                	mov    %eax,%ecx
  1005b0:	41                   	inc    %ecx
  1005b1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
            switch (*fmt) {
  1005b4:	0f be 40 01          	movsbl 0x1(%eax),%eax
  1005b8:	89 c1                	mov    %eax,%ecx
  1005ba:	83 e9 24             	sub    $0x24,%ecx
  1005bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1005c0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1005c3:	0f 8f 15 00 00 00    	jg     1005de <kprintf+0x6e>
  1005c9:	e9 00 00 00 00       	jmp    1005ce <kprintf+0x5e>
  1005ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005d1:	85 c0                	test   %eax,%eax
  1005d3:	0f 84 54 01 00 00    	je     10072d <kprintf+0x1bd>
  1005d9:	e9 54 01 00 00       	jmp    100732 <kprintf+0x1c2>
  1005de:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005e1:	83 e8 62             	sub    $0x62,%eax
  1005e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1005e7:	0f 8f 19 00 00 00    	jg     100606 <kprintf+0x96>
  1005ed:	e9 00 00 00 00       	jmp    1005f2 <kprintf+0x82>
  1005f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005f5:	83 e8 25             	sub    $0x25,%eax
  1005f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1005fb:	0f 84 13 01 00 00    	je     100714 <kprintf+0x1a4>
  100601:	e9 2c 01 00 00       	jmp    100732 <kprintf+0x1c2>
  100606:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100609:	83 e8 6f             	sub    $0x6f,%eax
  10060c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10060f:	0f 8f 2d 00 00 00    	jg     100642 <kprintf+0xd2>
  100615:	e9 00 00 00 00       	jmp    10061a <kprintf+0xaa>
  10061a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10061d:	83 e8 63             	sub    $0x63,%eax
  100620:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100623:	0f 84 c5 00 00 00    	je     1006ee <kprintf+0x17e>
  100629:	e9 00 00 00 00       	jmp    10062e <kprintf+0xbe>
  10062e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100631:	83 e8 64             	sub    $0x64,%eax
  100634:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100637:	0f 84 4b 00 00 00    	je     100688 <kprintf+0x118>
  10063d:	e9 f0 00 00 00       	jmp    100732 <kprintf+0x1c2>
  100642:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100645:	83 c0 90             	add    $0xffffff90,%eax
  100648:	89 c1                	mov    %eax,%ecx
  10064a:	83 e9 08             	sub    $0x8,%ecx
  10064d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100650:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100653:	0f 87 d9 00 00 00    	ja     100732 <kprintf+0x1c2>
  100659:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10065c:	8b 0c 85 00 80 10 00 	mov    0x108000(,%eax,4),%ecx
  100663:	ff e1                	jmp    *%ecx
            case 's':
                s = va_arg(ap, char*);
  100665:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100668:	89 c1                	mov    %eax,%ecx
  10066a:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100670:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100673:	8b 00                	mov    (%eax),%eax
  100675:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  100678:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10067b:	89 04 24             	mov    %eax,(%esp)
  10067e:	e8 0d 01 00 00       	call   100790 <kputs>
                break;
  100683:	e9 cc 00 00 00       	jmp    100754 <kprintf+0x1e4>
  100688:	b8 0a 00 00 00       	mov    $0xa,%eax
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  10068d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100690:	89 ca                	mov    %ecx,%edx
  100692:	81 c2 04 00 00 00    	add    $0x4,%edx
  100698:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10069b:	8b 09                	mov    (%ecx),%ecx
  10069d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 10);
  1006a0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1006a3:	89 0c 24             	mov    %ecx,(%esp)
  1006a6:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1006ad:	00 
  1006ae:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1006b1:	e8 1a 01 00 00       	call   1007d0 <kputn>
                break;
  1006b6:	e9 99 00 00 00       	jmp    100754 <kprintf+0x1e4>
  1006bb:	b8 10 00 00 00       	mov    $0x10,%eax
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  1006c0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1006c3:	89 ca                	mov    %ecx,%edx
  1006c5:	81 c2 04 00 00 00    	add    $0x4,%edx
  1006cb:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1006ce:	8b 09                	mov    (%ecx),%ecx
  1006d0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 16);
  1006d3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1006d6:	89 0c 24             	mov    %ecx,(%esp)
  1006d9:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1006e0:	00 
  1006e1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1006e4:	e8 e7 00 00 00       	call   1007d0 <kputn>
                break;
  1006e9:	e9 66 00 00 00       	jmp    100754 <kprintf+0x1e4>
            case 'c':
                c = va_arg(ap, int);
  1006ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1006f1:	89 c1                	mov    %eax,%ecx
  1006f3:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1006f9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1006fc:	8b 00                	mov    (%eax),%eax
  1006fe:	88 c2                	mov    %al,%dl
  100700:	88 55 ef             	mov    %dl,-0x11(%ebp)
                kputc(c);
  100703:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  100707:	89 04 24             	mov    %eax,(%esp)
  10070a:	e8 61 01 00 00       	call   100870 <kputc>
                break;
  10070f:	e9 40 00 00 00       	jmp    100754 <kprintf+0x1e4>
  100714:	b8 25 00 00 00       	mov    $0x25,%eax
            case '%':
                kputc('%');
  100719:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100720:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100723:	e8 48 01 00 00       	call   100870 <kputc>
                break;
  100728:	e9 27 00 00 00       	jmp    100754 <kprintf+0x1e4>
            case '\0':
                goto out;
  10072d:	e9 4a 00 00 00       	jmp    10077c <kprintf+0x20c>
  100732:	b8 25 00 00 00       	mov    $0x25,%eax
            default:
                kputc('%');
  100737:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10073e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100741:	e8 2a 01 00 00       	call   100870 <kputc>
                kputc(*fmt);
  100746:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100749:	0f be 00             	movsbl (%eax),%eax
  10074c:	89 04 24             	mov    %eax,(%esp)
  10074f:	e8 1c 01 00 00       	call   100870 <kputc>
                break;
            }
        } else {
  100754:	e9 0e 00 00 00       	jmp    100767 <kprintf+0x1f7>
            kputc(*fmt);
  100759:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10075c:	0f be 00             	movsbl (%eax),%eax
  10075f:	89 04 24             	mov    %eax,(%esp)
  100762:	e8 09 01 00 00       	call   100870 <kputc>
        }

        fmt++;
  100767:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10076a:	05 01 00 00 00       	add    $0x1,%eax
  10076f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  100772:	e9 17 fe ff ff       	jmp    10058e <kprintf+0x1e>
  100777:	e9 00 00 00 00       	jmp    10077c <kprintf+0x20c>

    out:
    va_end(ap);

    return kprintf_res;
  10077c:	a1 20 a0 10 00       	mov    0x10a020,%eax
  100781:	83 c4 58             	add    $0x58,%esp
  100784:	5d                   	pop    %ebp
  100785:	c3                   	ret    
  100786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10078d:	00 00 00 

00100790 <kputs>:

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  100790:	55                   	push   %ebp
  100791:	89 e5                	mov    %esp,%ebp
  100793:	83 ec 08             	sub    $0x8,%esp
  100796:	8b 45 08             	mov    0x8(%ebp),%eax
  100799:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  10079c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10079f:	80 38 00             	cmpb   $0x0,(%eax)
  1007a2:	0f 84 1e 00 00 00    	je     1007c6 <kputs+0x36>
        kputc(*s++);
  1007a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1007ab:	89 c1                	mov    %eax,%ecx
  1007ad:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1007b3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1007b6:	0f be 00             	movsbl (%eax),%eax
  1007b9:	89 04 24             	mov    %eax,(%esp)
  1007bc:	e8 af 00 00 00       	call   100870 <kputc>
    }
  1007c1:	e9 d6 ff ff ff       	jmp    10079c <kputs+0xc>
}
  1007c6:	83 c4 08             	add    $0x8,%esp
  1007c9:	5d                   	pop    %ebp
  1007ca:	c3                   	ret    
  1007cb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001007d0 <kputn>:

static void kputn(unsigned long x, int base) {
  1007d0:	55                   	push   %ebp
  1007d1:	89 e5                	mov    %esp,%ebp
  1007d3:	56                   	push   %esi
  1007d4:	83 ec 64             	sub    $0x64,%esp
  1007d7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1007da:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1007dd:	8d 15 2c 82 10 00    	lea    0x10822c,%edx
  1007e3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1007e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1007e9:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  1007ec:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  1007f3:	0f 8e 05 00 00 00    	jle    1007fe <kputn+0x2e>
        return;
  1007f9:	e9 5d 00 00 00       	jmp    10085b <kputn+0x8b>
  1007fe:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  100801:	05 40 00 00 00       	add    $0x40,%eax
  100806:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  100809:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10080c:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  10080f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100812:	31 d2                	xor    %edx,%edx
  100814:	f7 75 f4             	divl   -0xc(%ebp)
  100817:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10081a:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  10081d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100820:	89 c2                	mov    %eax,%edx
  100822:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  100828:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10082b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10082e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100831:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100834:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  100837:	89 d0                	mov    %edx,%eax
  100839:	31 d2                	xor    %edx,%edx
  10083b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10083e:	f7 f6                	div    %esi
  100840:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  100843:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10084a:	0f 85 bf ff ff ff    	jne    10080f <kputn+0x3f>
    kputs(p);
  100850:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100853:	89 04 24             	mov    %eax,(%esp)
  100856:	e8 35 ff ff ff       	call   100790 <kputs>
}
  10085b:	83 c4 64             	add    $0x64,%esp
  10085e:	5e                   	pop    %esi
  10085f:	5d                   	pop    %ebp
  100860:	c3                   	ret    
  100861:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100868:	0f 1f 84 00 00 00 00 
  10086f:	00 

00100870 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  100870:	55                   	push   %ebp
  100871:	89 e5                	mov    %esp,%ebp
  100873:	83 ec 38             	sub    $0x38,%esp
  100876:	8a 45 08             	mov    0x8(%ebp),%al
  100879:	88 45 ff             	mov    %al,-0x1(%ebp)
    if(in_cod()) {
  10087c:	e8 ef fa ff ff       	call   100370 <in_cod>
  100881:	3d 00 00 00 00       	cmp    $0x0,%eax
  100886:	0f 84 05 00 00 00    	je     100891 <kputc+0x21>
        goto doKPutc;
  10088c:	e9 ce 00 00 00       	jmp    10095f <kputc+0xef>
    }

    if(get_current_task() != 0) {
  100891:	e8 7a 31 00 00       	call   103a10 <get_current_task>
  100896:	3d 00 00 00 00       	cmp    $0x0,%eax
  10089b:	0f 84 b9 00 00 00    	je     10095a <kputc+0xea>
        if(get_current_task()->stdout != 0) {
  1008a1:	e8 6a 31 00 00       	call   103a10 <get_current_task>
  1008a6:	81 78 1c 00 00 00 00 	cmpl   $0x0,0x1c(%eax)
  1008ad:	0f 84 a2 00 00 00    	je     100955 <kputc+0xe5>
            vfs_write(get_current_task()->stdout, &(char){0x11}, sizeof(char), 1);
  1008b3:	e8 58 31 00 00       	call   103a10 <get_current_task>
  1008b8:	8d 4d fe             	lea    -0x2(%ebp),%ecx
  1008bb:	ba 01 00 00 00       	mov    $0x1,%edx
  1008c0:	8b 40 1c             	mov    0x1c(%eax),%eax
  1008c3:	c6 45 fe 11          	movb   $0x11,-0x2(%ebp)
  1008c7:	89 04 24             	mov    %eax,(%esp)
  1008ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1008ce:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  1008d5:	00 
  1008d6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1008dd:	00 
  1008de:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1008e1:	e8 7a 48 00 00       	call   105160 <vfs_write>
            vfs_write(get_current_task()->stdout, &color, sizeof(char), 1);
  1008e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1008e9:	e8 22 31 00 00       	call   103a10 <get_current_task>
  1008ee:	8d 0d 04 71 10 00    	lea    0x107104,%ecx
  1008f4:	ba 01 00 00 00       	mov    $0x1,%edx
  1008f9:	8b 40 1c             	mov    0x1c(%eax),%eax
  1008fc:	89 04 24             	mov    %eax,(%esp)
  1008ff:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100903:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10090a:	00 
  10090b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100912:	00 
  100913:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100916:	e8 45 48 00 00       	call   105160 <vfs_write>
            vfs_write(get_current_task()->stdout, &c, sizeof(char), 1);
  10091b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10091e:	e8 ed 30 00 00       	call   103a10 <get_current_task>
  100923:	8d 4d ff             	lea    -0x1(%ebp),%ecx
  100926:	ba 01 00 00 00       	mov    $0x1,%edx
  10092b:	8b 40 1c             	mov    0x1c(%eax),%eax
  10092e:	89 04 24             	mov    %eax,(%esp)
  100931:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100935:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10093c:	00 
  10093d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  100944:	00 
  100945:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  100948:	e8 13 48 00 00       	call   105160 <vfs_write>

            return;
  10094d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100950:	e9 49 01 00 00       	jmp    100a9e <kputc+0x22e>
        }
    }
  100955:	e9 00 00 00 00       	jmp    10095a <kputc+0xea>
  10095a:	e9 00 00 00 00       	jmp    10095f <kputc+0xef>
        return;
    }*/

    doKPutc:

    if ((c == '\n') || (x > 79)) {
  10095f:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  100963:	3d 0a 00 00 00       	cmp    $0xa,%eax
  100968:	0f 84 10 00 00 00    	je     10097e <kputc+0x10e>
  10096e:	81 3d 1c a0 10 00 4f 	cmpl   $0x4f,0x10a01c
  100975:	00 00 00 
  100978:	0f 8e 19 00 00 00    	jle    100997 <kputc+0x127>
        x = 0;
  10097e:	c7 05 1c a0 10 00 00 	movl   $0x0,0x10a01c
  100985:	00 00 00 
        y++;
  100988:	a1 18 a0 10 00       	mov    0x10a018,%eax
  10098d:	05 01 00 00 00       	add    $0x1,%eax
  100992:	a3 18 a0 10 00       	mov    %eax,0x10a018
    }

    if (c == '\n') {
  100997:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10099b:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1009a0:	0f 85 05 00 00 00    	jne    1009ab <kputc+0x13b>
        return;
  1009a6:	e9 f3 00 00 00       	jmp    100a9e <kputc+0x22e>
    }

    if (y > 24) {
  1009ab:	81 3d 18 a0 10 00 18 	cmpl   $0x18,0x10a018
  1009b2:	00 00 00 
  1009b5:	0f 8e 7e 00 00 00    	jle    100a39 <kputc+0x1c9>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1009bb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1009c2:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  1009c9:	0f 8d 2c 00 00 00    	jge    1009fb <kputc+0x18b>
            video[i] = video[i + 160];
  1009cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1009d2:	8b 0d 00 71 10 00    	mov    0x107100,%ecx
  1009d8:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  1009df:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1009e2:	8b 0d 00 71 10 00    	mov    0x107100,%ecx
  1009e8:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1009eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1009ee:	05 01 00 00 00       	add    $0x1,%eax
  1009f3:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1009f6:	e9 c7 ff ff ff       	jmp    1009c2 <kputc+0x152>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  1009fb:	e9 00 00 00 00       	jmp    100a00 <kputc+0x190>
  100a00:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  100a07:	0f 8d 1d 00 00 00    	jge    100a2a <kputc+0x1ba>
            video[i] = 0;
  100a0d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100a10:	8b 0d 00 71 10 00    	mov    0x107100,%ecx
  100a16:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  100a1a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100a1d:	05 01 00 00 00       	add    $0x1,%eax
  100a22:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100a25:	e9 d6 ff ff ff       	jmp    100a00 <kputc+0x190>
            video[i] = 0;
        }
        y--;
  100a2a:	a1 18 a0 10 00       	mov    0x10a018,%eax
  100a2f:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100a34:	a3 18 a0 10 00       	mov    %eax,0x10a018
    }

    video[2 * (y * 80 + x)] = c;
  100a39:	8a 45 ff             	mov    -0x1(%ebp),%al
  100a3c:	69 0d 18 a0 10 00 50 	imul   $0x50,0x10a018,%ecx
  100a43:	00 00 00 
  100a46:	03 0d 1c a0 10 00    	add    0x10a01c,%ecx
  100a4c:	c1 e1 01             	shl    $0x1,%ecx
  100a4f:	8b 15 00 71 10 00    	mov    0x107100,%edx
  100a55:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  100a58:	a0 04 71 10 00       	mov    0x107104,%al
  100a5d:	69 0d 18 a0 10 00 50 	imul   $0x50,0x10a018,%ecx
  100a64:	00 00 00 
  100a67:	03 0d 1c a0 10 00    	add    0x10a01c,%ecx
  100a6d:	c1 e1 01             	shl    $0x1,%ecx
  100a70:	8b 15 00 71 10 00    	mov    0x107100,%edx
  100a76:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  100a7a:	8b 0d 1c a0 10 00    	mov    0x10a01c,%ecx
  100a80:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100a86:	89 0d 1c a0 10 00    	mov    %ecx,0x10a01c
    kprintf_res++;
  100a8c:	8b 0d 20 a0 10 00    	mov    0x10a020,%ecx
  100a92:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100a98:	89 0d 20 a0 10 00    	mov    %ecx,0x10a020
}
  100a9e:	83 c4 38             	add    $0x38,%esp
  100aa1:	5d                   	pop    %ebp
  100aa2:	c3                   	ret    
  100aa3:	66 90                	xchg   %ax,%ax
  100aa5:	66 90                	xchg   %ax,%ax
  100aa7:	66 90                	xchg   %ax,%ax
  100aa9:	66 90                	xchg   %ax,%ax
  100aab:	66 90                	xchg   %ax,%ax
  100aad:	66 90                	xchg   %ax,%ax
  100aaf:	90                   	nop

00100ab0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];

void load_gdt() {
  100ab0:	55                   	push   %ebp
  100ab1:	89 e5                	mov    %esp,%ebp
	struct {
  100ab3:	83 ec 08             	sub    $0x8,%esp
  100ab6:	a1 24 80 10 00       	mov    0x108024,%eax
  100abb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100abe:	66 8b 0d 28 80 10 00 	mov    0x108028,%cx
  100ac5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		uint16_t limit;
		void* pointer;
	}__attribute__((packed)) gdtp = { .limit = GDT_ENTRIES * 8 - 1, .pointer =
			gdt, };

	asm volatile("lgdt %0" : : "m" (gdtp));
  100ac9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  100acd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  100ad1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  100ad4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  100ad7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  100ada:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  100add:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  100ae0:	83 c4 08             	add    $0x8,%esp
  100ae3:	5d                   	pop    %ebp
  100ae4:	c3                   	ret    
  100ae5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  100aec:	00 00 00 00 

00100af0 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags) {
  100af0:	55                   	push   %ebp
  100af1:	89 e5                	mov    %esp,%ebp
  100af3:	56                   	push   %esi
  100af4:	83 ec 10             	sub    $0x10,%esp
  100af7:	8b 45 14             	mov    0x14(%ebp),%eax
  100afa:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100afd:	8b 55 0c             	mov    0xc(%ebp),%edx
  100b00:	8b 75 08             	mov    0x8(%ebp),%esi
  100b03:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100b06:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100b09:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100b0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gdt[i] = limit & 0xffffLL;
  100b0f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  100b13:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100b16:	89 04 cd 68 a4 12 00 	mov    %eax,0x12a468(,%ecx,8)
  100b1d:	c7 04 cd 6c a4 12 00 	movl   $0x0,0x12a46c(,%ecx,8)
  100b24:	00 00 00 00 
	gdt[i] |= (base & 0xffffffLL) << 16;
  100b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b2b:	25 ff ff ff 00       	and    $0xffffff,%eax
  100b30:	89 c1                	mov    %eax,%ecx
  100b32:	c1 e1 10             	shl    $0x10,%ecx
  100b35:	c1 e8 10             	shr    $0x10,%eax
  100b38:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100b3b:	8b 34 d5 6c a4 12 00 	mov    0x12a46c(,%edx,8),%esi
  100b42:	09 f0                	or     %esi,%eax
  100b44:	8b 34 d5 68 a4 12 00 	mov    0x12a468(,%edx,8),%esi
  100b4b:	09 ce                	or     %ecx,%esi
  100b4d:	89 04 d5 6c a4 12 00 	mov    %eax,0x12a46c(,%edx,8)
  100b54:	89 34 d5 68 a4 12 00 	mov    %esi,0x12a468(,%edx,8)
	gdt[i] |= (flags & 0xffLL) << 40;
  100b5b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  100b5f:	c1 e0 08             	shl    $0x8,%eax
  100b62:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100b65:	8b 14 cd 68 a4 12 00 	mov    0x12a468(,%ecx,8),%edx
  100b6c:	8b 34 cd 6c a4 12 00 	mov    0x12a46c(,%ecx,8),%esi
  100b73:	09 c6                	or     %eax,%esi
  100b75:	89 14 cd 68 a4 12 00 	mov    %edx,0x12a468(,%ecx,8)
  100b7c:	89 34 cd 6c a4 12 00 	mov    %esi,0x12a46c(,%ecx,8)
	gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100b83:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  100b87:	83 e0 0f             	and    $0xf,%eax
  100b8a:	c1 e0 10             	shl    $0x10,%eax
  100b8d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100b90:	8b 14 cd 68 a4 12 00 	mov    0x12a468(,%ecx,8),%edx
  100b97:	8b 34 cd 6c a4 12 00 	mov    0x12a46c(,%ecx,8),%esi
  100b9e:	09 c6                	or     %eax,%esi
  100ba0:	89 14 cd 68 a4 12 00 	mov    %edx,0x12a468(,%ecx,8)
  100ba7:	89 34 cd 6c a4 12 00 	mov    %esi,0x12a46c(,%ecx,8)
	gdt[i] |= ((flags >> 8) & 0xffLL) << 52;
  100bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100bb1:	c1 e0 0c             	shl    $0xc,%eax
  100bb4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  100bb9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100bbc:	8b 14 cd 68 a4 12 00 	mov    0x12a468(,%ecx,8),%edx
  100bc3:	8b 34 cd 6c a4 12 00 	mov    0x12a46c(,%ecx,8),%esi
  100bca:	09 c6                	or     %eax,%esi
  100bcc:	89 14 cd 68 a4 12 00 	mov    %edx,0x12a468(,%ecx,8)
  100bd3:	89 34 cd 6c a4 12 00 	mov    %esi,0x12a46c(,%ecx,8)
	gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100bda:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100bde:	c1 e0 18             	shl    $0x18,%eax
  100be1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100be4:	8b 14 cd 68 a4 12 00 	mov    0x12a468(,%ecx,8),%edx
  100beb:	8b 34 cd 6c a4 12 00 	mov    0x12a46c(,%ecx,8),%esi
  100bf2:	09 c6                	or     %eax,%esi
  100bf4:	89 14 cd 68 a4 12 00 	mov    %edx,0x12a468(,%ecx,8)
  100bfb:	89 34 cd 6c a4 12 00 	mov    %esi,0x12a46c(,%ecx,8)
}
  100c02:	83 c4 10             	add    $0x10,%esp
  100c05:	5e                   	pop    %esi
  100c06:	5d                   	pop    %ebp
  100c07:	c3                   	ret    
  100c08:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100c0f:	00 

00100c10 <init_gdt>:

void init_gdt(void) {
  100c10:	55                   	push   %ebp
  100c11:	89 e5                	mov    %esp,%ebp
  100c13:	56                   	push   %esi
  100c14:	83 ec 54             	sub    $0x54,%esp
  100c17:	b8 00 00 00 00       	mov    $0x0,%eax
	set_gdt_entry(0, 0, 0, 0);
  100c1c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100c23:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100c2a:	00 
  100c2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100c32:	00 
  100c33:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100c3a:	00 
  100c3b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100c3e:	e8 ad fe ff ff       	call   100af0 <set_gdt_entry>
  100c43:	b8 01 00 00 00       	mov    $0x1,%eax
  100c48:	b9 00 00 00 00       	mov    $0x0,%ecx
  100c4d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100c52:	be 9a 0c 00 00       	mov    $0xc9a,%esi
	set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100c57:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100c5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100c65:	00 
  100c66:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100c6d:	00 
  100c6e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100c75:	00 
  100c76:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100c79:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100c7c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100c7f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  100c82:	e8 69 fe ff ff       	call   100af0 <set_gdt_entry>
  100c87:	b8 02 00 00 00       	mov    $0x2,%eax
  100c8c:	b9 00 00 00 00       	mov    $0x0,%ecx
  100c91:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100c96:	be 92 0c 00 00       	mov    $0xc92,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100c9b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100ca2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ca9:	00 
  100caa:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100cb1:	00 
  100cb2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  100cb9:	00 
  100cba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100cbd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  100cc0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  100cc3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  100cc6:	e8 25 fe ff ff       	call   100af0 <set_gdt_entry>
  100ccb:	b8 03 00 00 00       	mov    $0x3,%eax
  100cd0:	b9 00 00 00 00       	mov    $0x0,%ecx
  100cd5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100cda:	be fa 0c 00 00       	mov    $0xcfa,%esi
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100cdf:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100ce6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ced:	00 
  100cee:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100cf5:	00 
  100cf6:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  100cfd:	00 
  100cfe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100d01:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  100d04:	89 55 cc             	mov    %edx,-0x34(%ebp)
  100d07:	89 75 c8             	mov    %esi,-0x38(%ebp)
  100d0a:	e8 e1 fd ff ff       	call   100af0 <set_gdt_entry>
  100d0f:	b8 04 00 00 00       	mov    $0x4,%eax
  100d14:	b9 00 00 00 00       	mov    $0x0,%ecx
  100d19:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100d1e:	be f2 0c 00 00       	mov    $0xcf2,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
	set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100d23:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  100d2a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100d31:	00 
  100d32:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100d39:	00 
  100d3a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  100d41:	00 
  100d42:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100d45:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  100d48:	89 55 bc             	mov    %edx,-0x44(%ebp)
  100d4b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  100d4e:	e8 9d fd ff ff       	call   100af0 <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	load_gdt();
  100d53:	e8 58 fd ff ff       	call   100ab0 <load_gdt>
}
  100d58:	83 c4 54             	add    $0x54,%esp
  100d5b:	5e                   	pop    %esi
  100d5c:	5d                   	pop    %ebp
  100d5d:	c3                   	ret    
  100d5e:	66 90                	xchg   %ax,%ax

00100d60 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  100d60:	55                   	push   %ebp
  100d61:	89 e5                	mov    %esp,%ebp
  100d63:	53                   	push   %ebx
  100d64:	57                   	push   %edi
  100d65:	56                   	push   %esi
  100d66:	83 ec 10             	sub    $0x10,%esp
  100d69:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  100d6d:	66 89 c1             	mov    %ax,%cx
  100d70:	8a 55 14             	mov    0x14(%ebp),%dl
  100d73:	8b 45 0c             	mov    0xc(%ebp),%eax
  100d76:	8b 75 08             	mov    0x8(%ebp),%esi
  100d79:	89 75 f0             	mov    %esi,-0x10(%ebp)
  100d7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100d7f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  100d83:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  100d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  100d8c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100d90:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100d93:	89 04 f5 28 a0 10 00 	mov    %eax,0x10a028(,%esi,8)
  100d9a:	c7 04 f5 2c a0 10 00 	movl   $0x0,0x10a02c(,%esi,8)
  100da1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  100da5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  100da9:	c1 e0 10             	shl    $0x10,%eax
  100dac:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100daf:	8b 3c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%edi
  100db6:	8b 1c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%ebx
  100dbd:	09 c3                	or     %eax,%ebx
  100dbf:	89 3c f5 2c a0 10 00 	mov    %edi,0x10a02c(,%esi,8)
  100dc6:	89 1c f5 28 a0 10 00 	mov    %ebx,0x10a028(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  100dcd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  100dd1:	c1 e0 08             	shl    $0x8,%eax
  100dd4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100dd7:	8b 3c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%edi
  100dde:	8b 1c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%ebx
  100de5:	09 c3                	or     %eax,%ebx
  100de7:	89 3c f5 28 a0 10 00 	mov    %edi,0x10a028(,%esi,8)
  100dee:	89 1c f5 2c a0 10 00 	mov    %ebx,0x10a02c(,%esi,8)
	idt[i] |= ((handler >> 16) & 0xffffLL) << 48;
  100df5:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  100df9:	c1 e0 10             	shl    $0x10,%eax
  100dfc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100dff:	8b 3c f5 28 a0 10 00 	mov    0x10a028(,%esi,8),%edi
  100e06:	8b 1c f5 2c a0 10 00 	mov    0x10a02c(,%esi,8),%ebx
  100e0d:	09 c3                	or     %eax,%ebx
  100e0f:	89 3c f5 28 a0 10 00 	mov    %edi,0x10a028(,%esi,8)
  100e16:	89 1c f5 2c a0 10 00 	mov    %ebx,0x10a02c(,%esi,8)
}
  100e1d:	83 c4 10             	add    $0x10,%esp
  100e20:	5e                   	pop    %esi
  100e21:	5f                   	pop    %edi
  100e22:	5b                   	pop    %ebx
  100e23:	5d                   	pop    %ebp
  100e24:	c3                   	ret    
  100e25:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  100e2c:	00 00 00 00 

00100e30 <init_idt>:

void init_idt() {
  100e30:	55                   	push   %ebp
  100e31:	89 e5                	mov    %esp,%ebp
	struct {
  100e33:	56                   	push   %esi
  100e34:	81 ec 34 02 00 00    	sub    $0x234,%esp
  100e3a:	a1 2a 80 10 00       	mov    0x10802a,%eax
  100e3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100e42:	66 8b 0d 2e 80 10 00 	mov    0x10802e,%cx
  100e49:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
		unsigned short int limit;
		void* pointer;
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;
  100e4d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for (i = 0; i < IDT_ENTRIES; i++) {
  100e54:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100e5b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  100e62:	0f 8d 1e 00 00 00    	jge    100e86 <init_idt+0x56>
		handler_set[i] = 0;
  100e68:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e6b:	c7 04 85 28 a2 10 00 	movl   $0x0,0x10a228(,%eax,4)
  100e72:	00 00 00 00 
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;

	for (i = 0; i < IDT_ENTRIES; i++) {
  100e76:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e79:	05 01 00 00 00       	add    $0x1,%eax
  100e7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100e81:	e9 d5 ff ff ff       	jmp    100e5b <init_idt+0x2b>
  100e86:	b8 20 00 00 00       	mov    $0x20,%eax
  100e8b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

	outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  100e90:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100e97:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100e9e:	00 
  100e9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100ea2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100ea5:	e8 86 0b 00 00       	call   101a30 <outb>
  100eaa:	b8 21 00 00 00       	mov    $0x21,%eax
  100eaf:	b9 20 00 00 00       	mov    $0x20,%ecx
	outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  100eb4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100ebb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  100ec2:	00 
  100ec3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100ec6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  100ec9:	e8 62 0b 00 00       	call   101a30 <outb>
  100ece:	b8 21 00 00 00       	mov    $0x21,%eax
  100ed3:	b9 04 00 00 00       	mov    $0x4,%ecx
	outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  100ed8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100edf:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  100ee6:	00 
  100ee7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100eea:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  100eed:	e8 3e 0b 00 00       	call   101a30 <outb>
  100ef2:	b8 21 00 00 00       	mov    $0x21,%eax
  100ef7:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0x21, 0x01); // ICW 4
  100efc:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100f03:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100f0a:	00 
  100f0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100f0e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  100f11:	e8 1a 0b 00 00       	call   101a30 <outb>
  100f16:	b8 a0 00 00 00       	mov    $0xa0,%eax
  100f1b:	b9 11 00 00 00       	mov    $0x11,%ecx

	outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  100f20:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100f27:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100f2e:	00 
  100f2f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  100f32:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  100f35:	e8 f6 0a 00 00       	call   101a30 <outb>
  100f3a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100f3f:	b9 28 00 00 00       	mov    $0x28,%ecx
	outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  100f44:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100f4b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  100f52:	00 
  100f53:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100f56:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  100f59:	e8 d2 0a 00 00       	call   101a30 <outb>
  100f5e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100f63:	b9 02 00 00 00       	mov    $0x2,%ecx
	outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  100f68:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100f6f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100f76:	00 
  100f77:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100f7a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  100f7d:	e8 ae 0a 00 00       	call   101a30 <outb>
  100f82:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100f87:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0xa1, 0x01); // ICW 4
  100f8c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100f93:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100f9a:	00 
  100f9b:	89 45 b0             	mov    %eax,-0x50(%ebp)
  100f9e:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100fa1:	e8 8a 0a 00 00       	call   101a30 <outb>
  100fa6:	b8 20 00 00 00       	mov    $0x20,%eax
  100fab:	b9 00 00 00 00       	mov    $0x0,%ecx

	outb(0x20, 0x0);
  100fb0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100fb7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100fbe:	00 
  100fbf:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100fc2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  100fc5:	e8 66 0a 00 00       	call   101a30 <outb>
  100fca:	b8 a0 00 00 00       	mov    $0xa0,%eax
  100fcf:	b9 00 00 00 00       	mov    $0x0,%ecx
	outb(0xa0, 0x0);
  100fd4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100fdb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100fe2:	00 
  100fe3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  100fe6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  100fe9:	e8 42 0a 00 00       	call   101a30 <outb>
  100fee:	b8 00 00 00 00       	mov    $0x0,%eax
  100ff3:	8d 0d 04 1c 10 00    	lea    0x101c04,%ecx
  100ff9:	ba 08 00 00 00       	mov    $0x8,%edx
  100ffe:	be 8e 00 00 00       	mov    $0x8e,%esi

	idt_set_entry(0, intr_stub_0, 0x8,
  101003:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10100a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10100e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101015:	00 
  101016:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10101d:	00 
  10101e:	89 45 98             	mov    %eax,-0x68(%ebp)
  101021:	89 75 94             	mov    %esi,-0x6c(%ebp)
  101024:	89 55 90             	mov    %edx,-0x70(%ebp)
  101027:	e8 34 fd ff ff       	call   100d60 <idt_set_entry>
  10102c:	b8 01 00 00 00       	mov    $0x1,%eax
  101031:	8d 0d 0d 1c 10 00    	lea    0x101c0d,%ecx
  101037:	ba 08 00 00 00       	mov    $0x8,%edx
  10103c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(1, intr_stub_1, 0x8,
  101041:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101048:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10104c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101053:	00 
  101054:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10105b:	00 
  10105c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10105f:	89 75 88             	mov    %esi,-0x78(%ebp)
  101062:	89 55 84             	mov    %edx,-0x7c(%ebp)
  101065:	e8 f6 fc ff ff       	call   100d60 <idt_set_entry>
  10106a:	b8 02 00 00 00       	mov    $0x2,%eax
  10106f:	8d 0d 16 1c 10 00    	lea    0x101c16,%ecx
  101075:	ba 08 00 00 00       	mov    $0x8,%edx
  10107a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(2, intr_stub_2, 0x8,
  10107f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  101086:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10108a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101091:	00 
  101092:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101099:	00 
  10109a:	89 45 80             	mov    %eax,-0x80(%ebp)
  10109d:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  1010a3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  1010a9:	e8 b2 fc ff ff       	call   100d60 <idt_set_entry>
  1010ae:	b8 03 00 00 00       	mov    $0x3,%eax
  1010b3:	8d 0d 1f 1c 10 00    	lea    0x101c1f,%ecx
  1010b9:	ba 08 00 00 00       	mov    $0x8,%edx
  1010be:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(3, intr_stub_3, 0x8,
  1010c3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  1010ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010ce:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010d5:	00 
  1010d6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1010dd:	00 
  1010de:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  1010e4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  1010ea:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  1010f0:	e8 6b fc ff ff       	call   100d60 <idt_set_entry>
  1010f5:	b8 04 00 00 00       	mov    $0x4,%eax
  1010fa:	8d 0d 28 1c 10 00    	lea    0x101c28,%ecx
  101100:	ba 08 00 00 00       	mov    $0x8,%edx
  101105:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(4, intr_stub_4, 0x8,
  10110a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101111:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101115:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10111c:	00 
  10111d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101124:	00 
  101125:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10112b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101131:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101137:	e8 24 fc ff ff       	call   100d60 <idt_set_entry>
  10113c:	b8 05 00 00 00       	mov    $0x5,%eax
  101141:	8d 0d 31 1c 10 00    	lea    0x101c31,%ecx
  101147:	ba 08 00 00 00       	mov    $0x8,%edx
  10114c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(5, intr_stub_5, 0x8,
  101151:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101158:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10115c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101163:	00 
  101164:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10116b:	00 
  10116c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101172:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101178:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10117e:	e8 dd fb ff ff       	call   100d60 <idt_set_entry>
  101183:	b8 06 00 00 00       	mov    $0x6,%eax
  101188:	8d 0d 3a 1c 10 00    	lea    0x101c3a,%ecx
  10118e:	ba 08 00 00 00       	mov    $0x8,%edx
  101193:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(6, intr_stub_6, 0x8,
  101198:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  10119f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011a3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1011aa:	00 
  1011ab:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1011b2:	00 
  1011b3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1011b9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1011bf:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1011c5:	e8 96 fb ff ff       	call   100d60 <idt_set_entry>
  1011ca:	b8 07 00 00 00       	mov    $0x7,%eax
  1011cf:	8d 0d 43 1c 10 00    	lea    0x101c43,%ecx
  1011d5:	ba 08 00 00 00       	mov    $0x8,%edx
  1011da:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(7, intr_stub_7, 0x8,
  1011df:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1011e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011ea:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1011f1:	00 
  1011f2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1011f9:	00 
  1011fa:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101200:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101206:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10120c:	e8 4f fb ff ff       	call   100d60 <idt_set_entry>
  101211:	b8 08 00 00 00       	mov    $0x8,%eax
  101216:	8d 0d 4c 1c 10 00    	lea    0x101c4c,%ecx
  10121c:	ba 8e 00 00 00       	mov    $0x8e,%edx
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(8, intr_stub_8, 0x8,
  101221:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101228:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10122c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101233:	00 
  101234:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10123b:	00 
  10123c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101242:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101248:	e8 13 fb ff ff       	call   100d60 <idt_set_entry>
  10124d:	b8 09 00 00 00       	mov    $0x9,%eax
  101252:	8d 0d 53 1c 10 00    	lea    0x101c53,%ecx
  101258:	ba 08 00 00 00       	mov    $0x8,%edx
  10125d:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(9, intr_stub_9, 0x8,
  101262:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101269:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10126d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101274:	00 
  101275:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10127c:	00 
  10127d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101283:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101289:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10128f:	e8 cc fa ff ff       	call   100d60 <idt_set_entry>
  101294:	b8 0a 00 00 00       	mov    $0xa,%eax
  101299:	8d 0d 5c 1c 10 00    	lea    0x101c5c,%ecx
  10129f:	ba 08 00 00 00       	mov    $0x8,%edx
  1012a4:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(10, intr_stub_10, 0x8,
  1012a9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1012b0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1012b4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1012bb:	00 
  1012bc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1012c3:	00 
  1012c4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1012ca:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1012d0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1012d6:	e8 85 fa ff ff       	call   100d60 <idt_set_entry>
  1012db:	b8 0b 00 00 00       	mov    $0xb,%eax
  1012e0:	8d 0d 63 1c 10 00    	lea    0x101c63,%ecx
  1012e6:	ba 08 00 00 00       	mov    $0x8,%edx
  1012eb:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(11, intr_stub_11, 0x8,
  1012f0:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  1012f7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1012fb:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101302:	00 
  101303:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10130a:	00 
  10130b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101311:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101317:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10131d:	e8 3e fa ff ff       	call   100d60 <idt_set_entry>
  101322:	b8 0c 00 00 00       	mov    $0xc,%eax
  101327:	8d 0d 6a 1c 10 00    	lea    0x101c6a,%ecx
  10132d:	ba 08 00 00 00       	mov    $0x8,%edx
  101332:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(12, intr_stub_12, 0x8,
  101337:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10133e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101342:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101349:	00 
  10134a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101351:	00 
  101352:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101358:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10135e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101364:	e8 f7 f9 ff ff       	call   100d60 <idt_set_entry>
  101369:	b8 0d 00 00 00       	mov    $0xd,%eax
  10136e:	8d 0d 71 1c 10 00    	lea    0x101c71,%ecx
  101374:	ba 08 00 00 00       	mov    $0x8,%edx
  101379:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(13, intr_stub_13, 0x8,
  10137e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101385:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101389:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101390:	00 
  101391:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101398:	00 
  101399:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10139f:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  1013a5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  1013ab:	e8 b0 f9 ff ff       	call   100d60 <idt_set_entry>
  1013b0:	b8 0e 00 00 00       	mov    $0xe,%eax
  1013b5:	8d 0d 78 1c 10 00    	lea    0x101c78,%ecx
  1013bb:	ba 08 00 00 00       	mov    $0x8,%edx
  1013c0:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(14, intr_stub_14, 0x8,
  1013c5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1013cc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1013d0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013d7:	00 
  1013d8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013df:	00 
  1013e0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1013e6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1013ec:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  1013f2:	e8 69 f9 ff ff       	call   100d60 <idt_set_entry>
  1013f7:	b8 0f 00 00 00       	mov    $0xf,%eax
  1013fc:	8d 0d 7c 1c 10 00    	lea    0x101c7c,%ecx
  101402:	ba 08 00 00 00       	mov    $0x8,%edx
  101407:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(15, intr_stub_15, 0x8,
  10140c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101413:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101417:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10141e:	00 
  10141f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101426:	00 
  101427:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10142d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101433:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101439:	e8 22 f9 ff ff       	call   100d60 <idt_set_entry>
  10143e:	b8 10 00 00 00       	mov    $0x10,%eax
  101443:	8d 0d 82 1c 10 00    	lea    0x101c82,%ecx
  101449:	ba 08 00 00 00       	mov    $0x8,%edx
  10144e:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(16, intr_stub_16, 0x8,
  101453:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10145a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10145e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101465:	00 
  101466:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10146d:	00 
  10146e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101474:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  10147a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101480:	e8 db f8 ff ff       	call   100d60 <idt_set_entry>
  101485:	b8 11 00 00 00       	mov    $0x11,%eax
  10148a:	8d 0d 88 1c 10 00    	lea    0x101c88,%ecx
  101490:	ba 08 00 00 00       	mov    $0x8,%edx
  101495:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(17, intr_stub_17, 0x8,
  10149a:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1014a1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014a5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014ac:	00 
  1014ad:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014b4:	00 
  1014b5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  1014bb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  1014c1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  1014c7:	e8 94 f8 ff ff       	call   100d60 <idt_set_entry>
  1014cc:	b8 12 00 00 00       	mov    $0x12,%eax
  1014d1:	8d 0d 8c 1c 10 00    	lea    0x101c8c,%ecx
  1014d7:	ba 08 00 00 00       	mov    $0x8,%edx
  1014dc:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(18, intr_stub_18, 0x8,
  1014e1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1014e8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014ec:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014f3:	00 
  1014f4:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014fb:	00 
  1014fc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101502:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101508:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10150e:	e8 4d f8 ff ff       	call   100d60 <idt_set_entry>
  101513:	b8 20 00 00 00       	mov    $0x20,%eax
  101518:	8d 0d 92 1c 10 00    	lea    0x101c92,%ecx
  10151e:	ba 08 00 00 00       	mov    $0x8,%edx
  101523:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(32, intr_stub_32, 0x8,
  101528:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10152f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101533:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10153a:	00 
  10153b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101542:	00 
  101543:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101549:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  10154f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101555:	e8 06 f8 ff ff       	call   100d60 <idt_set_entry>
  10155a:	b8 21 00 00 00       	mov    $0x21,%eax
  10155f:	8d 0d 98 1c 10 00    	lea    0x101c98,%ecx
  101565:	ba 08 00 00 00       	mov    $0x8,%edx
  10156a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(33, intr_stub_33, 0x8,
  10156f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101576:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10157a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101581:	00 
  101582:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101589:	00 
  10158a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  101590:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  101596:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  10159c:	e8 bf f7 ff ff       	call   100d60 <idt_set_entry>
  1015a1:	b8 22 00 00 00       	mov    $0x22,%eax
  1015a6:	8d 0d 9e 1c 10 00    	lea    0x101c9e,%ecx
  1015ac:	ba 08 00 00 00       	mov    $0x8,%edx
  1015b1:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(34, intr_stub_34, 0x8,
  1015b6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1015bd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015c1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015c8:	00 
  1015c9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015d0:	00 
  1015d1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  1015d7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  1015dd:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  1015e3:	e8 78 f7 ff ff       	call   100d60 <idt_set_entry>
  1015e8:	b8 23 00 00 00       	mov    $0x23,%eax
  1015ed:	8d 0d a4 1c 10 00    	lea    0x101ca4,%ecx
  1015f3:	ba 08 00 00 00       	mov    $0x8,%edx
  1015f8:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(35, intr_stub_35, 0x8,
  1015fd:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101604:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101608:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10160f:	00 
  101610:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101617:	00 
  101618:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  10161e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101624:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  10162a:	e8 31 f7 ff ff       	call   100d60 <idt_set_entry>
  10162f:	b8 24 00 00 00       	mov    $0x24,%eax
  101634:	8d 0d aa 1c 10 00    	lea    0x101caa,%ecx
  10163a:	ba 08 00 00 00       	mov    $0x8,%edx
  10163f:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(36, intr_stub_36, 0x8,
  101644:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  10164b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10164f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101656:	00 
  101657:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10165e:	00 
  10165f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101665:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  10166b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101671:	e8 ea f6 ff ff       	call   100d60 <idt_set_entry>
  101676:	b8 25 00 00 00       	mov    $0x25,%eax
  10167b:	8d 0d b0 1c 10 00    	lea    0x101cb0,%ecx
  101681:	ba 08 00 00 00       	mov    $0x8,%edx
  101686:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(37, intr_stub_37, 0x8,
  10168b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  101692:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101696:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10169d:	00 
  10169e:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016a5:	00 
  1016a6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  1016ac:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  1016b2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  1016b8:	e8 a3 f6 ff ff       	call   100d60 <idt_set_entry>
  1016bd:	b8 26 00 00 00       	mov    $0x26,%eax
  1016c2:	8d 0d b6 1c 10 00    	lea    0x101cb6,%ecx
  1016c8:	ba 08 00 00 00       	mov    $0x8,%edx
  1016cd:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(38, intr_stub_38, 0x8,
  1016d2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  1016d9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016dd:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016e4:	00 
  1016e5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016ec:	00 
  1016ed:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  1016f3:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  1016f9:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  1016ff:	e8 5c f6 ff ff       	call   100d60 <idt_set_entry>
  101704:	b8 27 00 00 00       	mov    $0x27,%eax
  101709:	8d 0d bc 1c 10 00    	lea    0x101cbc,%ecx
  10170f:	ba 08 00 00 00       	mov    $0x8,%edx
  101714:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(39, intr_stub_39, 0x8,
  101719:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101720:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101724:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10172b:	00 
  10172c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101733:	00 
  101734:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  10173a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101740:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101746:	e8 15 f6 ff ff       	call   100d60 <idt_set_entry>
  10174b:	b8 28 00 00 00       	mov    $0x28,%eax
  101750:	8d 0d c2 1c 10 00    	lea    0x101cc2,%ecx
  101756:	ba 08 00 00 00       	mov    $0x8,%edx
  10175b:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(40, intr_stub_40, 0x8,
  101760:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101767:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10176b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101772:	00 
  101773:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10177a:	00 
  10177b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101781:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101787:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  10178d:	e8 ce f5 ff ff       	call   100d60 <idt_set_entry>
  101792:	b8 29 00 00 00       	mov    $0x29,%eax
  101797:	8d 0d c8 1c 10 00    	lea    0x101cc8,%ecx
  10179d:	ba 08 00 00 00       	mov    $0x8,%edx
  1017a2:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(41, intr_stub_41, 0x8,
  1017a7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  1017ae:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017b2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017b9:	00 
  1017ba:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017c1:	00 
  1017c2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  1017c8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  1017ce:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  1017d4:	e8 87 f5 ff ff       	call   100d60 <idt_set_entry>
  1017d9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  1017de:	8d 0d ce 1c 10 00    	lea    0x101cce,%ecx
  1017e4:	ba 08 00 00 00       	mov    $0x8,%edx
  1017e9:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(42, intr_stub_42, 0x8,
  1017ee:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  1017f5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017f9:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101800:	00 
  101801:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101808:	00 
  101809:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  10180f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101815:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  10181b:	e8 40 f5 ff ff       	call   100d60 <idt_set_entry>
  101820:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101825:	8d 0d d4 1c 10 00    	lea    0x101cd4,%ecx
  10182b:	ba 08 00 00 00       	mov    $0x8,%edx
  101830:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(43, intr_stub_43, 0x8,
  101835:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  10183c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101840:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101847:	00 
  101848:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10184f:	00 
  101850:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101856:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  10185c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101862:	e8 f9 f4 ff ff       	call   100d60 <idt_set_entry>
  101867:	b8 2c 00 00 00       	mov    $0x2c,%eax
  10186c:	8d 0d da 1c 10 00    	lea    0x101cda,%ecx
  101872:	ba 08 00 00 00       	mov    $0x8,%edx
  101877:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(44, intr_stub_44, 0x8,
  10187c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101883:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101887:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10188e:	00 
  10188f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101896:	00 
  101897:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  10189d:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  1018a3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  1018a9:	e8 b2 f4 ff ff       	call   100d60 <idt_set_entry>
  1018ae:	b8 2d 00 00 00       	mov    $0x2d,%eax
  1018b3:	8d 0d e0 1c 10 00    	lea    0x101ce0,%ecx
  1018b9:	ba 08 00 00 00       	mov    $0x8,%edx
  1018be:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(45, intr_stub_45, 0x8,
  1018c3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  1018ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018ce:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018d5:	00 
  1018d6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1018dd:	00 
  1018de:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  1018e4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  1018ea:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  1018f0:	e8 6b f4 ff ff       	call   100d60 <idt_set_entry>
  1018f5:	b8 2e 00 00 00       	mov    $0x2e,%eax
  1018fa:	8d 0d e6 1c 10 00    	lea    0x101ce6,%ecx
  101900:	ba 08 00 00 00       	mov    $0x8,%edx
  101905:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(46, intr_stub_46, 0x8,
  10190a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101911:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101915:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10191c:	00 
  10191d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101924:	00 
  101925:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  10192b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101931:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101937:	e8 24 f4 ff ff       	call   100d60 <idt_set_entry>
  10193c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101941:	8d 0d ec 1c 10 00    	lea    0x101cec,%ecx
  101947:	ba 08 00 00 00       	mov    $0x8,%edx
  10194c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(47, intr_stub_47, 0x8,
  101951:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101958:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10195c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101963:	00 
  101964:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10196b:	00 
  10196c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101972:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101978:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  10197e:	e8 dd f3 ff ff       	call   100d60 <idt_set_entry>
  101983:	b8 30 00 00 00       	mov    $0x30,%eax
  101988:	8d 0d f2 1c 10 00    	lea    0x101cf2,%ecx
  10198e:	ba 08 00 00 00       	mov    $0x8,%edx
  101993:	be ee 00 00 00       	mov    $0xee,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(48, intr_stub_48, 0x8,
  101998:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  10199f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019a3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1019aa:	00 
  1019ab:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  1019b2:	00 
  1019b3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  1019b9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  1019bf:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  1019c5:	e8 96 f3 ff ff       	call   100d60 <idt_set_entry>
  1019ca:	b8 05 00 00 00       	mov    $0x5,%eax
  1019cf:	8d 0d 08 71 10 00    	lea    0x107108,%ecx
  1019d5:	ba 80 00 00 00       	mov    $0x80,%edx
  1019da:	be e9 00 00 00       	mov    $0xe9,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss),
  1019df:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1019e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1019ea:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  1019f1:	00 
  1019f2:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  1019f9:	00 
  1019fa:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101a00:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101a06:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  101a0c:	e8 df f0 ff ff       	call   100af0 <set_gdt_entry>
  101a11:	b8 28 00 00 00       	mov    $0x28,%eax
			GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101a16:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101a19:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  101a1d:	fb                   	sti    
}
  101a1e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101a24:	5e                   	pop    %esi
  101a25:	5d                   	pop    %ebp
  101a26:	c3                   	ret    
  101a27:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  101a2e:	00 00 

00101a30 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  101a30:	55                   	push   %ebp
  101a31:	89 e5                	mov    %esp,%ebp
  101a33:	50                   	push   %eax
  101a34:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101a38:	66 89 c1             	mov    %ax,%cx
  101a3b:	8a 55 0c             	mov    0xc(%ebp),%dl
  101a3e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101a42:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101a45:	8a 45 fd             	mov    -0x3(%ebp),%al
  101a48:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101a4c:	ee                   	out    %al,(%dx)
}
  101a4d:	83 c4 04             	add    $0x4,%esp
  101a50:	5d                   	pop    %ebp
  101a51:	c3                   	ret    
  101a52:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101a59:	1f 84 00 00 00 00 00 

00101a60 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)()) {
  101a60:	55                   	push   %ebp
  101a61:	89 e5                	mov    %esp,%ebp
  101a63:	83 ec 08             	sub    $0x8,%esp
  101a66:	8b 45 0c             	mov    0xc(%ebp),%eax
  101a69:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101a6c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  101a6f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101a72:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101a75:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101a78:	89 04 8d 28 a3 10 00 	mov    %eax,0x10a328(,%ecx,4)
	handler_set[i] = 1;
  101a7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a82:	c7 04 85 28 a2 10 00 	movl   $0x1,0x10a228(,%eax,4)
  101a89:	01 00 00 00 
}
  101a8d:	83 c4 08             	add    $0x8,%esp
  101a90:	5d                   	pop    %ebp
  101a91:	c3                   	ret    
  101a92:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101a99:	1f 84 00 00 00 00 00 

00101aa0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu) {
  101aa0:	55                   	push   %ebp
  101aa1:	89 e5                	mov    %esp,%ebp
  101aa3:	83 ec 28             	sub    $0x28,%esp
  101aa6:	8b 45 08             	mov    0x8(%ebp),%eax
  101aa9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct cpu_state* new_cpu = cpu;
  101aac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101aaf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if (cpu->intr <= 0x1f) {
  101ab2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ab5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  101abc:	0f 87 3d 00 00 00    	ja     101aff <handle_interrupt+0x5f>
		if (!isSchedulingEnabled()) {
  101ac2:	e8 39 1f 00 00       	call   103a00 <isSchedulingEnabled>
  101ac7:	3d 00 00 00 00       	cmp    $0x0,%eax
  101acc:	0f 85 1a 00 00 00    	jne    101aec <handle_interrupt+0x4c>
  101ad2:	8d 05 51 82 10 00    	lea    0x108251,%eax
			show_cod(cpu, "Kernel PANIC!");
  101ad8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101adb:	89 0c 24             	mov    %ecx,(%esp)
  101ade:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ae2:	e8 99 e8 ff ff       	call   100380 <show_cod>
		} else {
  101ae7:	e9 0e 00 00 00       	jmp    101afa <handle_interrupt+0x5a>
			new_cpu = schedule_exception(cpu);
  101aec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101aef:	89 04 24             	mov    %eax,(%esp)
  101af2:	e8 79 20 00 00       	call   103b70 <schedule_exception>
  101af7:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
	} else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101afa:	e9 fc 00 00 00       	jmp    101bfb <handle_interrupt+0x15b>
  101aff:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101b02:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101b09:	0f 82 a7 00 00 00    	jb     101bb6 <handle_interrupt+0x116>
  101b0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101b12:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  101b19:	0f 87 97 00 00 00    	ja     101bb6 <handle_interrupt+0x116>
		if (cpu->intr >= 0x28) {
  101b1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101b22:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  101b29:	0f 82 24 00 00 00    	jb     101b53 <handle_interrupt+0xb3>
  101b2f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101b34:	b9 20 00 00 00       	mov    $0x20,%ecx
			outb(0xa0, 0x20);
  101b39:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101b40:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101b47:	00 
  101b48:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101b4b:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  101b4e:	e8 dd fe ff ff       	call   101a30 <outb>
		}

		if (cpu->intr == 0x20) {
  101b53:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101b56:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101b5d:	0f 85 2a 00 00 00    	jne    101b8d <handle_interrupt+0xed>
			new_cpu = schedule(cpu);
  101b63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101b66:	89 04 24             	mov    %eax,(%esp)
  101b69:	e8 72 24 00 00       	call   103fe0 <schedule>
  101b6e:	b9 20 00 00 00       	mov    $0x20,%ecx
  101b73:	89 45 f8             	mov    %eax,-0x8(%ebp)

	        outb(0x20, 0x20);
  101b76:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101b7d:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101b84:	00 
  101b85:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  101b88:	e8 a3 fe ff ff       	call   101a30 <outb>
		}

		if (handler_set[cpu->intr]) {
  101b8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101b90:	8b 40 1c             	mov    0x1c(%eax),%eax
  101b93:	81 3c 85 28 a2 10 00 	cmpl   $0x0,0x10a228(,%eax,4)
  101b9a:	00 00 00 00 
  101b9e:	0f 84 0d 00 00 00    	je     101bb1 <handle_interrupt+0x111>
			handlers[cpu->intr]();
  101ba4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ba7:	8b 40 1c             	mov    0x1c(%eax),%eax
  101baa:	ff 14 85 28 a3 10 00 	call   *0x10a328(,%eax,4)
		}
	} else if (cpu->intr == 0x30) {
  101bb1:	e9 40 00 00 00       	jmp    101bf6 <handle_interrupt+0x156>
  101bb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101bb9:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  101bc0:	0f 85 13 00 00 00    	jne    101bd9 <handle_interrupt+0x139>
		new_cpu = syscall(new_cpu);
  101bc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101bc9:	89 04 24             	mov    %eax,(%esp)
  101bcc:	e8 5f 01 00 00       	call   101d30 <syscall>
  101bd1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	} else {
  101bd4:	e9 18 00 00 00       	jmp    101bf1 <handle_interrupt+0x151>
  101bd9:	8d 05 5f 82 10 00    	lea    0x10825f,%eax
		kprintf("Unbekannter Interrupt\n");
  101bdf:	89 04 24             	mov    %eax,(%esp)
  101be2:	e8 89 e9 ff ff       	call   100570 <kprintf>
  101be7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		while (1) {
			// Prozessor anhalten
			asm volatile("cli; hlt");
  101bea:	fa                   	cli    
  101beb:	f4                   	hlt    
		}
  101bec:	e9 f9 ff ff ff       	jmp    101bea <handle_interrupt+0x14a>
  101bf1:	e9 00 00 00 00       	jmp    101bf6 <handle_interrupt+0x156>
  101bf6:	e9 00 00 00 00       	jmp    101bfb <handle_interrupt+0x15b>
	}

	return new_cpu;
  101bfb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101bfe:	83 c4 28             	add    $0x28,%esp
  101c01:	5d                   	pop    %ebp
  101c02:	c3                   	ret    
  101c03:	90                   	nop

00101c04 <intr_stub_0>:
  101c04:	6a 00                	push   $0x0
  101c06:	6a 00                	push   $0x0
  101c08:	e9 eb 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c0d <intr_stub_1>:
  101c0d:	6a 00                	push   $0x0
  101c0f:	6a 01                	push   $0x1
  101c11:	e9 e2 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c16 <intr_stub_2>:
  101c16:	6a 00                	push   $0x0
  101c18:	6a 02                	push   $0x2
  101c1a:	e9 d9 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c1f <intr_stub_3>:
  101c1f:	6a 00                	push   $0x0
  101c21:	6a 03                	push   $0x3
  101c23:	e9 d0 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c28 <intr_stub_4>:
  101c28:	6a 00                	push   $0x0
  101c2a:	6a 04                	push   $0x4
  101c2c:	e9 c7 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c31 <intr_stub_5>:
  101c31:	6a 00                	push   $0x0
  101c33:	6a 05                	push   $0x5
  101c35:	e9 be 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c3a <intr_stub_6>:
  101c3a:	6a 00                	push   $0x0
  101c3c:	6a 06                	push   $0x6
  101c3e:	e9 b5 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c43 <intr_stub_7>:
  101c43:	6a 00                	push   $0x0
  101c45:	6a 07                	push   $0x7
  101c47:	e9 ac 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c4c <intr_stub_8>:
  101c4c:	6a 08                	push   $0x8
  101c4e:	e9 a5 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c53 <intr_stub_9>:
  101c53:	6a 00                	push   $0x0
  101c55:	6a 09                	push   $0x9
  101c57:	e9 9c 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c5c <intr_stub_10>:
  101c5c:	6a 0a                	push   $0xa
  101c5e:	e9 95 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c63 <intr_stub_11>:
  101c63:	6a 0b                	push   $0xb
  101c65:	e9 8e 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c6a <intr_stub_12>:
  101c6a:	6a 0c                	push   $0xc
  101c6c:	e9 87 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c71 <intr_stub_13>:
  101c71:	6a 0d                	push   $0xd
  101c73:	e9 80 00 00 00       	jmp    101cf8 <intr_common_handler>

00101c78 <intr_stub_14>:
  101c78:	6a 0e                	push   $0xe
  101c7a:	eb 7c                	jmp    101cf8 <intr_common_handler>

00101c7c <intr_stub_15>:
  101c7c:	6a 00                	push   $0x0
  101c7e:	6a 0f                	push   $0xf
  101c80:	eb 76                	jmp    101cf8 <intr_common_handler>

00101c82 <intr_stub_16>:
  101c82:	6a 00                	push   $0x0
  101c84:	6a 10                	push   $0x10
  101c86:	eb 70                	jmp    101cf8 <intr_common_handler>

00101c88 <intr_stub_17>:
  101c88:	6a 11                	push   $0x11
  101c8a:	eb 6c                	jmp    101cf8 <intr_common_handler>

00101c8c <intr_stub_18>:
  101c8c:	6a 00                	push   $0x0
  101c8e:	6a 12                	push   $0x12
  101c90:	eb 66                	jmp    101cf8 <intr_common_handler>

00101c92 <intr_stub_32>:
  101c92:	6a 00                	push   $0x0
  101c94:	6a 20                	push   $0x20
  101c96:	eb 60                	jmp    101cf8 <intr_common_handler>

00101c98 <intr_stub_33>:
  101c98:	6a 00                	push   $0x0
  101c9a:	6a 21                	push   $0x21
  101c9c:	eb 5a                	jmp    101cf8 <intr_common_handler>

00101c9e <intr_stub_34>:
  101c9e:	6a 00                	push   $0x0
  101ca0:	6a 22                	push   $0x22
  101ca2:	eb 54                	jmp    101cf8 <intr_common_handler>

00101ca4 <intr_stub_35>:
  101ca4:	6a 00                	push   $0x0
  101ca6:	6a 23                	push   $0x23
  101ca8:	eb 4e                	jmp    101cf8 <intr_common_handler>

00101caa <intr_stub_36>:
  101caa:	6a 00                	push   $0x0
  101cac:	6a 24                	push   $0x24
  101cae:	eb 48                	jmp    101cf8 <intr_common_handler>

00101cb0 <intr_stub_37>:
  101cb0:	6a 00                	push   $0x0
  101cb2:	6a 25                	push   $0x25
  101cb4:	eb 42                	jmp    101cf8 <intr_common_handler>

00101cb6 <intr_stub_38>:
  101cb6:	6a 00                	push   $0x0
  101cb8:	6a 26                	push   $0x26
  101cba:	eb 3c                	jmp    101cf8 <intr_common_handler>

00101cbc <intr_stub_39>:
  101cbc:	6a 00                	push   $0x0
  101cbe:	6a 27                	push   $0x27
  101cc0:	eb 36                	jmp    101cf8 <intr_common_handler>

00101cc2 <intr_stub_40>:
  101cc2:	6a 00                	push   $0x0
  101cc4:	6a 28                	push   $0x28
  101cc6:	eb 30                	jmp    101cf8 <intr_common_handler>

00101cc8 <intr_stub_41>:
  101cc8:	6a 00                	push   $0x0
  101cca:	6a 29                	push   $0x29
  101ccc:	eb 2a                	jmp    101cf8 <intr_common_handler>

00101cce <intr_stub_42>:
  101cce:	6a 00                	push   $0x0
  101cd0:	6a 2a                	push   $0x2a
  101cd2:	eb 24                	jmp    101cf8 <intr_common_handler>

00101cd4 <intr_stub_43>:
  101cd4:	6a 00                	push   $0x0
  101cd6:	6a 2b                	push   $0x2b
  101cd8:	eb 1e                	jmp    101cf8 <intr_common_handler>

00101cda <intr_stub_44>:
  101cda:	6a 00                	push   $0x0
  101cdc:	6a 2c                	push   $0x2c
  101cde:	eb 18                	jmp    101cf8 <intr_common_handler>

00101ce0 <intr_stub_45>:
  101ce0:	6a 00                	push   $0x0
  101ce2:	6a 2d                	push   $0x2d
  101ce4:	eb 12                	jmp    101cf8 <intr_common_handler>

00101ce6 <intr_stub_46>:
  101ce6:	6a 00                	push   $0x0
  101ce8:	6a 2e                	push   $0x2e
  101cea:	eb 0c                	jmp    101cf8 <intr_common_handler>

00101cec <intr_stub_47>:
  101cec:	6a 00                	push   $0x0
  101cee:	6a 2f                	push   $0x2f
  101cf0:	eb 06                	jmp    101cf8 <intr_common_handler>

00101cf2 <intr_stub_48>:
  101cf2:	6a 00                	push   $0x0
  101cf4:	6a 30                	push   $0x30
  101cf6:	eb 00                	jmp    101cf8 <intr_common_handler>

00101cf8 <intr_common_handler>:
  101cf8:	55                   	push   %ebp
  101cf9:	57                   	push   %edi
  101cfa:	56                   	push   %esi
  101cfb:	52                   	push   %edx
  101cfc:	51                   	push   %ecx
  101cfd:	53                   	push   %ebx
  101cfe:	50                   	push   %eax
  101cff:	54                   	push   %esp
  101d00:	66 b8 10 00          	mov    $0x10,%ax
  101d04:	66 8e d8             	mov    %ax,%ds
  101d07:	66 8e c0             	mov    %ax,%es
  101d0a:	e8 91 fd ff ff       	call   101aa0 <handle_interrupt>
  101d0f:	89 c4                	mov    %eax,%esp
  101d11:	66 b8 23 00          	mov    $0x23,%ax
  101d15:	66 8e d8             	mov    %ax,%ds
  101d18:	66 8e c0             	mov    %ax,%es
  101d1b:	58                   	pop    %eax
  101d1c:	5b                   	pop    %ebx
  101d1d:	59                   	pop    %ecx
  101d1e:	5a                   	pop    %edx
  101d1f:	5e                   	pop    %esi
  101d20:	5f                   	pop    %edi
  101d21:	5d                   	pop    %ebp
  101d22:	83 c4 08             	add    $0x8,%esp
  101d25:	cf                   	iret   
  101d26:	66 90                	xchg   %ax,%ax
  101d28:	66 90                	xchg   %ax,%ax
  101d2a:	66 90                	xchg   %ax,%ax
  101d2c:	66 90                	xchg   %ax,%ax
  101d2e:	66 90                	xchg   %ax,%ax

00101d30 <syscall>:
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"

struct cpu_state* syscall(struct cpu_state* cpu) {
  101d30:	55                   	push   %ebp
  101d31:	89 e5                	mov    %esp,%ebp
  101d33:	56                   	push   %esi
  101d34:	81 ec d4 00 00 00    	sub    $0xd4,%esp
  101d3a:	8b 45 08             	mov    0x8(%ebp),%eax
  101d3d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    save_cpu_state(cpu);
  101d40:	89 e1                	mov    %esp,%ecx
  101d42:	89 01                	mov    %eax,(%ecx)
  101d44:	e8 57 22 00 00       	call   103fa0 <save_cpu_state>

    cpu = get_current_task()->cpuState;
  101d49:	e8 c2 1c 00 00       	call   103a10 <get_current_task>
  101d4e:	8b 40 04             	mov    0x4(%eax),%eax
  101d51:	89 45 f8             	mov    %eax,-0x8(%ebp)

	switch (cpu->eax) {
  101d54:	8b 00                	mov    (%eax),%eax
  101d56:	89 c1                	mov    %eax,%ecx
  101d58:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  101d5e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  101d61:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  101d64:	0f 8f 26 00 00 00    	jg     101d90 <syscall+0x60>
  101d6a:	e9 00 00 00 00       	jmp    101d6f <syscall+0x3f>
  101d6f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  101d72:	48                   	dec    %eax
  101d73:	89 c1                	mov    %eax,%ecx
  101d75:	83 e9 14             	sub    $0x14,%ecx
  101d78:	89 45 ac             	mov    %eax,-0x54(%ebp)
  101d7b:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  101d7e:	0f 87 9e 05 00 00    	ja     102322 <syscall+0x5f2>
  101d84:	8b 45 ac             	mov    -0x54(%ebp),%eax
  101d87:	8b 0c 85 44 80 10 00 	mov    0x108044(,%eax,4),%ecx
  101d8e:	ff e1                	jmp    *%ecx
  101d90:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  101d93:	05 37 ff ff ff       	add    $0xffffff37,%eax
  101d98:	89 c1                	mov    %eax,%ecx
  101d9a:	83 e9 04             	sub    $0x4,%ecx
  101d9d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  101da0:	89 4d a0             	mov    %ecx,-0x60(%ebp)
  101da3:	0f 87 79 05 00 00    	ja     102322 <syscall+0x5f2>
  101da9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  101dac:	8b 0c 85 30 80 10 00 	mov    0x108030(,%eax,4),%ecx
  101db3:	ff e1                	jmp    *%ecx
	case 1: /* exit */
		cpu = terminate_current(cpu);
  101db5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101db8:	89 04 24             	mov    %eax,(%esp)
  101dbb:	e8 e0 1e 00 00       	call   103ca0 <terminate_current>
  101dc0:	89 45 f8             	mov    %eax,-0x8(%ebp)
		break;
  101dc3:	e9 77 05 00 00       	jmp    10233f <syscall+0x60f>

	case 2: /* fork */
	{

		uint32_t forkpdir = vmm_fork_current();
  101dc8:	e8 53 3b 00 00       	call   105920 <vmm_fork_current>
  101dcd:	b9 00 00 00 00       	mov    $0x0,%ecx
  101dd2:	89 45 f4             	mov    %eax,-0xc(%ebp)

		struct task* ntask = init_task(forkpdir, 0);
  101dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101dd8:	89 04 24             	mov    %eax,(%esp)
  101ddb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101de2:	00 
  101de3:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  101de6:	e8 f5 1f 00 00       	call   103de0 <init_task>
  101deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		fork_task_state(ntask);
  101dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101df1:	89 04 24             	mov    %eax,(%esp)
  101df4:	e8 67 1f 00 00       	call   103d60 <fork_task_state>

		cpu->eax = ntask->PID;
  101df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101dfc:	8b 00                	mov    (%eax),%eax
  101dfe:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101e01:	89 01                	mov    %eax,(%ecx)
	}
        break;
  101e03:	e9 37 05 00 00       	jmp    10233f <syscall+0x60f>

    case 3: /* exec */
    {
        vfs_exec((char*) cpu->ebx, (char**) cpu->ecx, get_current_task());
  101e08:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e0b:	8b 40 04             	mov    0x4(%eax),%eax
  101e0e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101e11:	8b 49 08             	mov    0x8(%ecx),%ecx
  101e14:	89 45 98             	mov    %eax,-0x68(%ebp)
  101e17:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  101e1a:	e8 f1 1b 00 00       	call   103a10 <get_current_task>
  101e1f:	8b 4d 98             	mov    -0x68(%ebp),%ecx
  101e22:	89 0c 24             	mov    %ecx,(%esp)
  101e25:	8b 55 94             	mov    -0x6c(%ebp),%edx
  101e28:	89 54 24 04          	mov    %edx,0x4(%esp)
  101e2c:	89 44 24 08          	mov    %eax,0x8(%esp)
  101e30:	e8 0b 35 00 00       	call   105340 <vfs_exec>
    }
        break;
  101e35:	e9 05 05 00 00       	jmp    10233f <syscall+0x60f>

    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  101e3a:	e8 d1 1b 00 00       	call   103a10 <get_current_task>
  101e3f:	8b 40 18             	mov    0x18(%eax),%eax
  101e42:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101e45:	89 01                	mov    %eax,(%ecx)
    }
        break;
  101e47:	e9 f3 04 00 00       	jmp    10233f <syscall+0x60f>

	case 10: /* fopen */
	{
	    char* name = strclone((char*) cpu->ebx);
  101e4c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e4f:	8b 40 04             	mov    0x4(%eax),%eax
  101e52:	89 04 24             	mov    %eax,(%esp)
  101e55:	e8 c6 2b 00 00       	call   104a20 <strclone>
  101e5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	    uint32_t fmode = (uint32_t) cpu->ecx;
  101e5d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e60:	8b 40 08             	mov    0x8(%eax),%eax
  101e63:	89 45 e8             	mov    %eax,-0x18(%ebp)

	    struct res_handle* handle = vfs_open(name, fmode);
  101e66:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101e69:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  101e6c:	89 04 24             	mov    %eax,(%esp)
  101e6f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101e73:	e8 38 31 00 00       	call   104fb0 <vfs_open>
  101e78:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    if(handle) {
  101e7b:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  101e82:	0f 84 1b 00 00 00    	je     101ea3 <syscall+0x173>
	        register_handle(handle);
  101e88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101e8b:	89 04 24             	mov    %eax,(%esp)
  101e8e:	e8 8d 1b 00 00       	call   103a20 <register_handle>
	        cpu->eax = (uint32_t) handle;
  101e93:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  101e96:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101e99:	89 0a                	mov    %ecx,(%edx)
	    }
  101e9b:	89 45 90             	mov    %eax,-0x70(%ebp)
  101e9e:	e9 09 00 00 00       	jmp    101eac <syscall+0x17c>
	    else
	    {
	        cpu->eax = 0;
  101ea3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ea6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    }

	    free(name);
  101eac:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101eaf:	89 04 24             	mov    %eax,(%esp)
  101eb2:	e8 c9 25 00 00       	call   104480 <free>
	}
	    break;
  101eb7:	e9 83 04 00 00       	jmp    10233f <syscall+0x60f>

	case 11: /* fclose */
	{
	    struct res_handle* handle = (void*) cpu->ebx;
  101ebc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ebf:	8b 40 04             	mov    0x4(%eax),%eax
  101ec2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	    if(!unregister_handle(handle)) {
  101ec5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101ec8:	89 04 24             	mov    %eax,(%esp)
  101ecb:	e8 b0 1b 00 00       	call   103a80 <unregister_handle>
  101ed0:	3d 00 00 00 00       	cmp    $0x0,%eax
  101ed5:	0f 85 1c 00 00 00    	jne    101ef7 <syscall+0x1c7>
	        vfs_close(handle);
  101edb:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101ede:	89 04 24             	mov    %eax,(%esp)
  101ee1:	e8 4a 31 00 00       	call   105030 <vfs_close>

	        cpu->eax = 0;
  101ee6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101ee9:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	    }
  101eef:	89 45 8c             	mov    %eax,-0x74(%ebp)
  101ef2:	e9 09 00 00 00       	jmp    101f00 <syscall+0x1d0>
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  101ef7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101efa:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	    }
	}
	    break;
  101f00:	e9 3a 04 00 00       	jmp    10233f <syscall+0x60f>

	case 12: /* fwrite */
	{
	    struct res_handle* handle = (void*) cpu->ebx;
  101f05:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101f08:	8b 40 04             	mov    0x4(%eax),%eax
  101f0b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	    if(handle != 0) {
  101f0e:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  101f15:	0f 84 39 00 00 00    	je     101f54 <syscall+0x224>
  101f1b:	b8 01 00 00 00       	mov    $0x1,%eax
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  101f20:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  101f23:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101f26:	8b 52 08             	mov    0x8(%edx),%edx
  101f29:	8b 75 f8             	mov    -0x8(%ebp),%esi
  101f2c:	8b 76 0c             	mov    0xc(%esi),%esi
  101f2f:	89 0c 24             	mov    %ecx,(%esp)
  101f32:	89 54 24 04          	mov    %edx,0x4(%esp)
  101f36:	89 74 24 08          	mov    %esi,0x8(%esp)
  101f3a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  101f41:	00 
  101f42:	89 45 88             	mov    %eax,-0x78(%ebp)
  101f45:	e8 16 32 00 00       	call   105160 <vfs_write>
  101f4a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101f4d:	89 01                	mov    %eax,(%ecx)
	    }
  101f4f:	e9 09 00 00 00       	jmp    101f5d <syscall+0x22d>
	    else
	    {
            cpu->eax = RW_ERR_VFS;
  101f54:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101f57:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	    }
	}
	    break;
  101f5d:	e9 dd 03 00 00       	jmp    10233f <syscall+0x60f>

	case 13: /* fread */
	{
        struct res_handle* handle = (void*) cpu->ebx;
  101f62:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101f65:	8b 40 04             	mov    0x4(%eax),%eax
  101f68:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if(handle != 0) {
  101f6b:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  101f72:	0f 84 39 00 00 00    	je     101fb1 <syscall+0x281>
  101f78:	b8 01 00 00 00       	mov    $0x1,%eax
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  101f7d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  101f80:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101f83:	8b 52 08             	mov    0x8(%edx),%edx
  101f86:	8b 75 f8             	mov    -0x8(%ebp),%esi
  101f89:	8b 76 0c             	mov    0xc(%esi),%esi
  101f8c:	89 0c 24             	mov    %ecx,(%esp)
  101f8f:	89 54 24 04          	mov    %edx,0x4(%esp)
  101f93:	89 74 24 08          	mov    %esi,0x8(%esp)
  101f97:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  101f9e:	00 
  101f9f:	89 45 84             	mov    %eax,-0x7c(%ebp)
  101fa2:	e8 d9 30 00 00       	call   105080 <vfs_read>
  101fa7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101faa:	89 01                	mov    %eax,(%ecx)
        }
  101fac:	e9 09 00 00 00       	jmp    101fba <syscall+0x28a>
        else
        {
            cpu->eax = RW_ERR_VFS;
  101fb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fb4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        }
	}
	    break;
  101fba:	e9 80 03 00 00       	jmp    10233f <syscall+0x60f>

	case 14: /* fmkfifo */
	{
        char* name = strclone((char*) cpu->ebx);
  101fbf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fc2:	8b 40 04             	mov    0x4(%eax),%eax
  101fc5:	89 04 24             	mov    %eax,(%esp)
  101fc8:	e8 53 2a 00 00       	call   104a20 <strclone>
  101fcd:	8d 4d d0             	lea    -0x30(%ebp),%ecx
  101fd0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){16384}); //default to 16k Buffer-size
  101fd3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101fd6:	89 4d 80             	mov    %ecx,-0x80(%ebp)
  101fd9:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  101fdf:	e8 7c 14 00 00       	call   103460 <ramfs_fifo_driver_struct>
  101fe4:	c7 45 d0 00 40 00 00 	movl   $0x4000,-0x30(%ebp)
  101feb:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
  101ff1:	89 0c 24             	mov    %ecx,(%esp)
  101ff4:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ff8:	8b 45 80             	mov    -0x80(%ebp),%eax
  101ffb:	89 44 24 08          	mov    %eax,0x8(%esp)
  101fff:	e8 3c 2e 00 00       	call   104e40 <vfs_create_kfile>
  102004:	b9 03 00 00 00       	mov    $0x3,%ecx

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
  102009:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  10200c:	89 14 24             	mov    %edx,(%esp)
  10200f:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  102016:	00 
  102017:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  10201d:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
  102023:	e8 88 2f 00 00       	call   104fb0 <vfs_open>
  102028:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if(handle) {
  10202b:	81 7d cc 00 00 00 00 	cmpl   $0x0,-0x34(%ebp)
  102032:	0f 84 1e 00 00 00    	je     102056 <syscall+0x326>
            register_handle(handle);
  102038:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10203b:	89 04 24             	mov    %eax,(%esp)
  10203e:	e8 dd 19 00 00       	call   103a20 <register_handle>
            cpu->eax = (uint32_t) handle;
  102043:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  102046:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102049:	89 0a                	mov    %ecx,(%edx)
        }
  10204b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  102051:	e9 09 00 00 00       	jmp    10205f <syscall+0x32f>
        else
        {
            cpu->eax = 0;
  102056:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102059:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }

        free(name);
  10205f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102062:	89 04 24             	mov    %eax,(%esp)
  102065:	e8 16 24 00 00       	call   104480 <free>
	}
	    break;
  10206a:	e9 d0 02 00 00       	jmp    10233f <syscall+0x60f>

	case 20: /* getpmhandle */
	{
	    struct res_handle* handle = 0;
  10206f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)

	    switch(cpu->ebx) {
  102076:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102079:	8b 40 04             	mov    0x4(%eax),%eax
  10207c:	89 c1                	mov    %eax,%ecx
  10207e:	83 e9 02             	sub    $0x2,%ecx
  102081:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  102087:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  10208d:	0f 84 52 00 00 00    	je     1020e5 <syscall+0x3b5>
  102093:	e9 00 00 00 00       	jmp    102098 <syscall+0x368>
  102098:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
  10209e:	83 e8 01             	sub    $0x1,%eax
  1020a1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  1020a7:	0f 84 28 00 00 00    	je     1020d5 <syscall+0x3a5>
  1020ad:	e9 00 00 00 00       	jmp    1020b2 <syscall+0x382>
  1020b2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
  1020b8:	85 c0                	test   %eax,%eax
  1020ba:	0f 85 35 00 00 00    	jne    1020f5 <syscall+0x3c5>
  1020c0:	e9 00 00 00 00       	jmp    1020c5 <syscall+0x395>
	    case PMID_STDOUT:
	        handle = get_current_task()->stdout;
  1020c5:	e8 46 19 00 00       	call   103a10 <get_current_task>
  1020ca:	8b 40 1c             	mov    0x1c(%eax),%eax
  1020cd:	89 45 c8             	mov    %eax,-0x38(%ebp)
	        break;
  1020d0:	e9 2b 00 00 00       	jmp    102100 <syscall+0x3d0>
        case PMID_STDIN:
            handle = get_current_task()->stdin;
  1020d5:	e8 36 19 00 00       	call   103a10 <get_current_task>
  1020da:	8b 40 24             	mov    0x24(%eax),%eax
  1020dd:	89 45 c8             	mov    %eax,-0x38(%ebp)
            break;
  1020e0:	e9 1b 00 00 00       	jmp    102100 <syscall+0x3d0>
        case PMID_STDERR:
            handle = get_current_task()->stderr;
  1020e5:	e8 26 19 00 00       	call   103a10 <get_current_task>
  1020ea:	8b 40 20             	mov    0x20(%eax),%eax
  1020ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
            break;
  1020f0:	e9 0b 00 00 00       	jmp    102100 <syscall+0x3d0>
        default:
            handle = get_current_task()->stdout;
  1020f5:	e8 16 19 00 00       	call   103a10 <get_current_task>
  1020fa:	8b 40 1c             	mov    0x1c(%eax),%eax
  1020fd:	89 45 c8             	mov    %eax,-0x38(%ebp)
            break;
	    }

	    cpu->eax = (uint32_t) handle;
  102100:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102103:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102106:	89 01                	mov    %eax,(%ecx)
	}
	    break;
  102108:	e9 32 02 00 00       	jmp    10233f <syscall+0x60f>

	case 21: /* fopenpmhandle */
	{
	    char* path = strclone((char*)cpu->ecx);
  10210d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102110:	8b 40 08             	mov    0x8(%eax),%eax
  102113:	89 04 24             	mov    %eax,(%esp)
  102116:	e8 05 29 00 00       	call   104a20 <strclone>
  10211b:	89 45 c4             	mov    %eax,-0x3c(%ebp)

	    struct res_handle* open;
	    uint32_t fm = FM_WRITE;
  10211e:	c7 45 bc 02 00 00 00 	movl   $0x2,-0x44(%ebp)

	    if(cpu->ebx == PMID_STDIN) {
  102125:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102128:	81 78 04 01 00 00 00 	cmpl   $0x1,0x4(%eax)
  10212f:	0f 85 07 00 00 00    	jne    10213c <syscall+0x40c>
	        fm = FM_READ;
  102135:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
	    }

	    open = vfs_open(path, fm);
  10213c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10213f:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  102142:	89 04 24             	mov    %eax,(%esp)
  102145:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102149:	e8 62 2e 00 00       	call   104fb0 <vfs_open>
  10214e:	89 45 c0             	mov    %eax,-0x40(%ebp)

	    free(path);
  102151:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  102154:	89 04 24             	mov    %eax,(%esp)
  102157:	e8 24 23 00 00       	call   104480 <free>

	    if(!open) {
  10215c:	81 7d c0 00 00 00 00 	cmpl   $0x0,-0x40(%ebp)
  102163:	0f 85 0e 00 00 00    	jne    102177 <syscall+0x447>
	        cpu->eax = (uint32_t) -1;
  102169:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10216c:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	        break;
  102172:	e9 c8 01 00 00       	jmp    10233f <syscall+0x60f>
	    }

	    struct res_handle* oldhandle = 0;
  102177:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

        switch(cpu->ebx) {
  10217e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102181:	8b 40 04             	mov    0x4(%eax),%eax
  102184:	89 c1                	mov    %eax,%ecx
  102186:	83 e9 02             	sub    $0x2,%ecx
  102189:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  10218f:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
  102195:	0f 84 80 00 00 00    	je     10221b <syscall+0x4eb>
  10219b:	e9 00 00 00 00       	jmp    1021a0 <syscall+0x470>
  1021a0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
  1021a6:	83 e8 01             	sub    $0x1,%eax
  1021a9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  1021af:	0f 84 3f 00 00 00    	je     1021f4 <syscall+0x4c4>
  1021b5:	e9 00 00 00 00       	jmp    1021ba <syscall+0x48a>
  1021ba:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
  1021c0:	85 c0                	test   %eax,%eax
  1021c2:	0f 85 7a 00 00 00    	jne    102242 <syscall+0x512>
  1021c8:	e9 00 00 00 00       	jmp    1021cd <syscall+0x49d>
        case PMID_STDOUT:
            oldhandle = get_current_task()->stdout;
  1021cd:	e8 3e 18 00 00       	call   103a10 <get_current_task>
  1021d2:	8b 40 1c             	mov    0x1c(%eax),%eax
  1021d5:	89 45 b8             	mov    %eax,-0x48(%ebp)
            get_current_task()->stdout = open;
  1021d8:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1021db:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  1021e1:	e8 2a 18 00 00       	call   103a10 <get_current_task>
  1021e6:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
  1021ec:	89 48 1c             	mov    %ecx,0x1c(%eax)
            break;
  1021ef:	e9 70 00 00 00       	jmp    102264 <syscall+0x534>
        case PMID_STDIN:
            oldhandle = get_current_task()->stdin;
  1021f4:	e8 17 18 00 00       	call   103a10 <get_current_task>
  1021f9:	8b 40 24             	mov    0x24(%eax),%eax
  1021fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
            get_current_task()->stdin = open;
  1021ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102202:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  102208:	e8 03 18 00 00       	call   103a10 <get_current_task>
  10220d:	8b 8d 50 ff ff ff    	mov    -0xb0(%ebp),%ecx
  102213:	89 48 24             	mov    %ecx,0x24(%eax)
            break;
  102216:	e9 49 00 00 00       	jmp    102264 <syscall+0x534>
        case PMID_STDERR:
            oldhandle = get_current_task()->stderr;
  10221b:	e8 f0 17 00 00       	call   103a10 <get_current_task>
  102220:	8b 40 20             	mov    0x20(%eax),%eax
  102223:	89 45 b8             	mov    %eax,-0x48(%ebp)
            get_current_task()->stderr = open;
  102226:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102229:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
  10222f:	e8 dc 17 00 00       	call   103a10 <get_current_task>
  102234:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
  10223a:	89 48 20             	mov    %ecx,0x20(%eax)
            break;
  10223d:	e9 22 00 00 00       	jmp    102264 <syscall+0x534>
        default:
            oldhandle = get_current_task()->stdout;
  102242:	e8 c9 17 00 00       	call   103a10 <get_current_task>
  102247:	8b 40 1c             	mov    0x1c(%eax),%eax
  10224a:	89 45 b8             	mov    %eax,-0x48(%ebp)
            get_current_task()->stdout = open;
  10224d:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102250:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  102256:	e8 b5 17 00 00       	call   103a10 <get_current_task>
  10225b:	8b 8d 48 ff ff ff    	mov    -0xb8(%ebp),%ecx
  102261:	89 48 1c             	mov    %ecx,0x1c(%eax)
            break;
        }

        if(oldhandle != 0) {
  102264:	81 7d b8 00 00 00 00 	cmpl   $0x0,-0x48(%ebp)
  10226b:	0f 84 11 00 00 00    	je     102282 <syscall+0x552>
            vfs_close(oldhandle);
  102271:	8b 45 b8             	mov    -0x48(%ebp),%eax
  102274:	89 04 24             	mov    %eax,(%esp)
  102277:	e8 b4 2d 00 00       	call   105030 <vfs_close>
  10227c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
        }

        cpu->eax = 0;
  102282:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102285:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	    break;
  10228b:	e9 af 00 00 00       	jmp    10233f <syscall+0x60f>
  102290:	8d 05 76 82 10 00    	lea    0x108276,%eax

	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
  102296:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102299:	8b 49 04             	mov    0x4(%ecx),%ecx
  10229c:	89 04 24             	mov    %eax,(%esp)
  10229f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1022a3:	e8 c8 e2 ff ff       	call   100570 <kprintf>
  1022a8:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1022ab:	89 01                	mov    %eax,(%ecx)
		break;
  1022ad:	e9 8d 00 00 00       	jmp    10233f <syscall+0x60f>
  1022b2:	8d 05 79 82 10 00    	lea    0x108279,%eax

	case 202: /* kputs */
		cpu->eax = kprintf("%s", cpu->ebx);
  1022b8:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1022bb:	8b 49 04             	mov    0x4(%ecx),%ecx
  1022be:	89 04 24             	mov    %eax,(%esp)
  1022c1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1022c5:	e8 a6 e2 ff ff       	call   100570 <kprintf>
  1022ca:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1022cd:	89 01                	mov    %eax,(%ecx)
		break;
  1022cf:	e9 6b 00 00 00       	jmp    10233f <syscall+0x60f>

	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  1022d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1022d7:	8b 40 04             	mov    0x4(%eax),%eax
  1022da:	89 04 24             	mov    %eax,(%esp)
  1022dd:	e8 8e 3e 00 00       	call   106170 <vmm_alloc_ucont>
  1022e2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1022e5:	89 01                	mov    %eax,(%ecx)
		break;
  1022e7:	e9 53 00 00 00       	jmp    10233f <syscall+0x60f>

	case 204: /* vmm_free */
		cpu->eax = 0;
  1022ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1022ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  1022f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1022f8:	81 78 04 00 10 40 20 	cmpl   $0x20401000,0x4(%eax)
  1022ff:	0f 82 0e 00 00 00    	jb     102313 <syscall+0x5e3>
			vmm_free((void*) cpu->ebx);
  102305:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102308:	8b 40 04             	mov    0x4(%eax),%eax
  10230b:	89 04 24             	mov    %eax,(%esp)
  10230e:	e8 cd 3c 00 00       	call   105fe0 <vmm_free>
		}
		break;
  102313:	e9 27 00 00 00       	jmp    10233f <syscall+0x60f>

	case 205: /* pmm_print_stats */
		pmm_print_stats();
  102318:	e8 13 03 00 00       	call   102630 <pmm_print_stats>
		break;
  10231d:	e9 1d 00 00 00       	jmp    10233f <syscall+0x60f>
  102322:	8d 05 7c 82 10 00    	lea    0x10827c,%eax

	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  102328:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10232b:	8b 09                	mov    (%ecx),%ecx
  10232d:	89 04 24             	mov    %eax,(%esp)
  102330:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102334:	e8 37 e2 ff ff       	call   100570 <kprintf>
  102339:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		break;
	}

	return cpu;
  10233f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102342:	81 c4 d4 00 00 00    	add    $0xd4,%esp
  102348:	5e                   	pop    %esi
  102349:	5d                   	pop    %ebp
  10234a:	c3                   	ret    
  10234b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102350 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {
  102350:	55                   	push   %ebp
  102351:	89 e5                	mov    %esp,%ebp
  102353:	57                   	push   %edi
  102354:	56                   	push   %esi
  102355:	83 ec 50             	sub    $0x50,%esp
  102358:	8b 45 08             	mov    0x8(%ebp),%eax
  10235b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  10235e:	e8 0d 41 00 00       	call   106470 <vmm_init>
  102363:	8d 0d 92 82 10 00    	lea    0x108292,%ecx
  102369:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kprintf("Initializing vfs...\n");
  10236c:	89 0c 24             	mov    %ecx,(%esp)
  10236f:	e8 fc e1 ff ff       	call   100570 <kprintf>

    vfs_init_root();
  102374:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102377:	e8 04 33 00 00       	call   105680 <vfs_init_root>
  10237c:	b8 00 00 00 00       	mov    $0x0,%eax
    ramfs_fifo_init();
  102381:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102384:	e8 37 0b 00 00       	call   102ec0 <ramfs_fifo_init>
    ramfs_block_init();
  102389:	e8 82 06 00 00       	call   102a10 <ramfs_block_init>

    map_address_active((uint32_t) mb_info,
  10238e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102391:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102394:	89 04 24             	mov    %eax,(%esp)
  102397:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10239b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1023a2:	00 
  1023a3:	e8 b8 3c 00 00       	call   106060 <map_address_active>
  1023a8:	b8 00 00 00 00       	mov    $0x0,%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
  1023ad:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1023b0:	8b 49 18             	mov    0x18(%ecx),%ecx
  1023b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1023b6:	8b 52 18             	mov    0x18(%edx),%edx
  1023b9:	89 0c 24             	mov    %ecx,(%esp)
  1023bc:	89 54 24 04          	mov    %edx,0x4(%esp)
  1023c0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1023c7:	00 
  1023c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1023cb:	e8 90 3c 00 00       	call   106060 <map_address_active>
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  1023d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1023d3:	8b 00                	mov    (%eax),%eax
  1023d5:	25 08 00 00 00       	and    $0x8,%eax
  1023da:	3d 00 00 00 00       	cmp    $0x0,%eax
  1023df:	0f 84 aa 00 00 00    	je     10248f <kernel_main+0x13f>
  1023e5:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  1023ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1023ed:	8b 49 18             	mov    0x18(%ecx),%ecx
  1023f0:	8b 09                	mov    (%ecx),%ecx
  1023f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1023f5:	8b 52 18             	mov    0x18(%edx),%edx
  1023f8:	8b 12                	mov    (%edx),%edx
  1023fa:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1023fd:	8b 76 18             	mov    0x18(%esi),%esi
  102400:	8b 76 04             	mov    0x4(%esi),%esi
  102403:	8b 7d f4             	mov    -0xc(%ebp),%edi
  102406:	8b 7f 18             	mov    0x18(%edi),%edi
  102409:	8b 3f                	mov    (%edi),%edi
  10240b:	29 fe                	sub    %edi,%esi
  10240d:	89 0c 24             	mov    %ecx,(%esp)
  102410:	89 54 24 04          	mov    %edx,0x4(%esp)
  102414:	89 74 24 08          	mov    %esi,0x8(%esp)
  102418:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10241f:	00 
  102420:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102423:	e8 a8 3c 00 00       	call   1060d0 <vmm_map_range>
  102428:	8d 05 a7 82 10 00    	lea    0x1082a7,%eax
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
  10242e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102431:	8b 49 18             	mov    0x18(%ecx),%ecx
  102434:	8b 49 04             	mov    0x4(%ecx),%ecx
  102437:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10243a:	8b 52 18             	mov    0x18(%edx),%edx
  10243d:	8b 12                	mov    (%edx),%edx
  10243f:	29 d1                	sub    %edx,%ecx
  102441:	89 04 24             	mov    %eax,(%esp)
  102444:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102448:	e8 23 e1 ff ff       	call   100570 <kprintf>
  10244d:	8d 0d e7 82 10 00    	lea    0x1082e7,%ecx
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);
  102453:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102456:	8b 52 18             	mov    0x18(%edx),%edx
  102459:	8b 12                	mov    (%edx),%edx
  10245b:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10245e:	8b 76 18             	mov    0x18(%esi),%esi
  102461:	8b 76 04             	mov    0x4(%esi),%esi
  102464:	89 0c 24             	mov    %ecx,(%esp)
  102467:	89 54 24 04          	mov    %edx,0x4(%esp)
  10246b:	89 74 24 08          	mov    %esi,0x8(%esp)
  10246f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102472:	e8 f9 e0 ff ff       	call   100570 <kprintf>

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
  102477:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10247a:	8b 49 18             	mov    0x18(%ecx),%ecx
  10247d:	8b 09                	mov    (%ecx),%ecx
  10247f:	89 0c 24             	mov    %ecx,(%esp)
  102482:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102485:	e8 e6 0f 00 00       	call   103470 <tar_load_ramfs>
    } else {
  10248a:	e9 11 00 00 00       	jmp    1024a0 <kernel_main+0x150>
  10248f:	8d 05 01 83 10 00    	lea    0x108301,%eax
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
  102495:	89 04 24             	mov    %eax,(%esp)
  102498:	e8 d3 e0 ff ff       	call   100570 <kprintf>
  10249d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1024a0:	8d 05 33 83 10 00    	lea    0x108333,%eax
    }

    kprintf("[kernel_res] Creating /dev/vga\n");
  1024a6:	89 04 24             	mov    %eax,(%esp)
  1024a9:	e8 c2 e0 ff ff       	call   100570 <kprintf>
  1024ae:	8d 0d 53 83 10 00    	lea    0x108353,%ecx
  1024b4:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);
  1024b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1024bc:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  1024bf:	89 55 c8             	mov    %edx,-0x38(%ebp)
  1024c2:	e8 09 15 00 00       	call   1039d0 <ramfs_vga_driver_struct>
  1024c7:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  1024ca:	89 0c 24             	mov    %ecx,(%esp)
  1024cd:	89 44 24 04          	mov    %eax,0x4(%esp)
  1024d1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1024d8:	00 
  1024d9:	e8 62 29 00 00       	call   104e40 <vfs_create_kfile>
  1024de:	8d 0d 5c 83 10 00    	lea    0x10835c,%ecx

    if(vfs_exists("/ibin/init")) {
  1024e4:	89 0c 24             	mov    %ecx,(%esp)
  1024e7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1024ea:	e8 c1 2d 00 00       	call   1052b0 <vfs_exists>
  1024ef:	3d 00 00 00 00       	cmp    $0x0,%eax
  1024f4:	0f 84 3c 00 00 00    	je     102536 <kernel_main+0x1e6>
  1024fa:	8d 05 67 83 10 00    	lea    0x108367,%eax
        kprintf("[init] /ibin/init found. Executing...\n");
  102500:	89 04 24             	mov    %eax,(%esp)
  102503:	e8 68 e0 ff ff       	call   100570 <kprintf>
  102508:	8d 0d 5c 83 10 00    	lea    0x10835c,%ecx
  10250e:	ba 00 00 00 00       	mov    $0x0,%edx

        vfs_exec("/ibin/init", 0, 0);
  102513:	89 0c 24             	mov    %ecx,(%esp)
  102516:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10251d:	00 
  10251e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102525:	00 
  102526:	89 45 c0             	mov    %eax,-0x40(%ebp)
  102529:	89 55 bc             	mov    %edx,-0x44(%ebp)
  10252c:	e8 0f 2e 00 00       	call   105340 <vfs_exec>
        enableScheduling();
  102531:	e8 ba 14 00 00       	call   1039f0 <enableScheduling>
    }

	while(1);
  102536:	e9 00 00 00 00       	jmp    10253b <kernel_main+0x1eb>
  10253b:	e9 fb ff ff ff       	jmp    10253b <kernel_main+0x1eb>

00102540 <pmm_alloc>:
#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
  102540:	55                   	push   %ebp
  102541:	89 e5                	mov    %esp,%ebp
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102543:	56                   	push   %esi
  102544:	83 ec 10             	sub    $0x10,%esp
  102547:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10254e:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102555:	0f 8d b7 00 00 00    	jge    102612 <pmm_alloc+0xd2>
		if (allocatable[i]) {
  10255b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10255e:	81 3c 85 98 a4 12 00 	cmpl   $0x0,0x12a498(,%eax,4)
  102565:	00 00 00 00 
  102569:	0f 84 8e 00 00 00    	je     1025fd <pmm_alloc+0xbd>
			int s;
			for (s = 0; s < 32; s++) {
  10256f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102576:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  10257d:	0f 8d 75 00 00 00    	jge    1025f8 <pmm_alloc+0xb8>
  102583:	b8 01 00 00 00       	mov    $0x1,%eax
				if (allocatable[i] & (1 << s)) {
  102588:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10258b:	8b 0c 8d 98 a4 12 00 	mov    0x12a498(,%ecx,4),%ecx
  102592:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102595:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102598:	89 d1                	mov    %edx,%ecx
  10259a:	d3 e0                	shl    %cl,%eax
  10259c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10259f:	21 c2                	and    %eax,%edx
  1025a1:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  1025a7:	0f 84 36 00 00 00    	je     1025e3 <pmm_alloc+0xa3>
  1025ad:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  1025b2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1025b5:	d3 e0                	shl    %cl,%eax
  1025b7:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  1025bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1025bf:	8b 34 95 98 a4 12 00 	mov    0x12a498(,%edx,4),%esi
  1025c6:	21 c6                	and    %eax,%esi
  1025c8:	89 34 95 98 a4 12 00 	mov    %esi,0x12a498(,%edx,4)
					return (uint8_t*) ((i * 32 + s) * 4096);
  1025cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1025d2:	c1 e0 05             	shl    $0x5,%eax
  1025d5:	03 45 f0             	add    -0x10(%ebp),%eax
  1025d8:	c1 e0 0c             	shl    $0xc,%eax
  1025db:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1025de:	e9 36 00 00 00       	jmp    102619 <pmm_alloc+0xd9>
				}
			}
  1025e3:	e9 00 00 00 00       	jmp    1025e8 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
		if (allocatable[i]) {
			int s;
			for (s = 0; s < 32; s++) {
  1025e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1025eb:	05 01 00 00 00       	add    $0x1,%eax
  1025f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1025f3:	e9 7e ff ff ff       	jmp    102576 <pmm_alloc+0x36>
				if (allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
  1025f8:	e9 00 00 00 00       	jmp    1025fd <pmm_alloc+0xbd>
	}
  1025fd:	e9 00 00 00 00       	jmp    102602 <pmm_alloc+0xc2>
uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102602:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102605:	05 01 00 00 00       	add    $0x1,%eax
  10260a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10260d:	e9 3c ff ff ff       	jmp    10254e <pmm_alloc+0xe>
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
	}
	return NULL ;
  102612:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  102619:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10261c:	83 c4 10             	add    $0x10,%esp
  10261f:	5e                   	pop    %esi
  102620:	5d                   	pop    %ebp
  102621:	c3                   	ret    
  102622:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102629:	1f 84 00 00 00 00 00 

00102630 <pmm_print_stats>:

void pmm_print_stats() {
  102630:	55                   	push   %ebp
  102631:	89 e5                	mov    %esp,%ebp
  102633:	56                   	push   %esi
  102634:	83 ec 34             	sub    $0x34,%esp
  102637:	b8 00 00 10 00       	mov    $0x100000,%eax
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
  10263c:	c7 04 24 00 00 10 00 	movl   $0x100000,(%esp)
  102643:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102646:	e8 65 00 00 00       	call   1026b0 <pmm_get_free_space>
  10264b:	b9 00 04 00 00       	mov    $0x400,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102650:	8b 15 28 a4 10 00    	mov    0x10a428,%edx
  102656:	c1 ea 14             	shr    $0x14,%edx
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
  102659:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  102660:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102663:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102666:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102669:	e8 42 00 00 00       	call   1026b0 <pmm_get_free_space>
  10266e:	8d 0d 8e 83 10 00    	lea    0x10838e,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102674:	8b 15 28 a4 10 00    	mov    0x10a428,%edx
  10267a:	c1 ea 0a             	shr    $0xa,%edx
  10267d:	89 0c 24             	mov    %ecx,(%esp)
  102680:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102683:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102687:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10268a:	89 74 24 08          	mov    %esi,0x8(%esp)
  10268e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  102692:	89 54 24 10          	mov    %edx,0x10(%esp)
  102696:	e8 d5 de ff ff       	call   100570 <kprintf>
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
}
  10269b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10269e:	83 c4 34             	add    $0x34,%esp
  1026a1:	5e                   	pop    %esi
  1026a2:	5d                   	pop    %ebp
  1026a3:	c3                   	ret    
  1026a4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1026ab:	00 00 00 00 00 

001026b0 <pmm_get_free_space>:

uint32_t pmm_get_free_space(uint32_t div) {
  1026b0:	55                   	push   %ebp
  1026b1:	89 e5                	mov    %esp,%ebp
  1026b3:	83 ec 14             	sub    $0x14,%esp
  1026b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1026b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t free = 0;
  1026bc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  1026c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1026ca:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  1026d1:	0f 83 73 00 00 00    	jae    10274a <pmm_get_free_space+0x9a>
		for (uint32_t s = 0; s < 32; s++) {
  1026d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1026de:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  1026e5:	0f 83 4a 00 00 00    	jae    102735 <pmm_get_free_space+0x85>
  1026eb:	b8 01 00 00 00       	mov    $0x1,%eax
			if (allocatable[i] & (1 << s))
  1026f0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1026f3:	8b 0c 8d 98 a4 12 00 	mov    0x12a498(,%ecx,4),%ecx
  1026fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1026fd:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102700:	89 d1                	mov    %edx,%ecx
  102702:	d3 e0                	shl    %cl,%eax
  102704:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102707:	21 c2                	and    %eax,%edx
  102709:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  10270f:	0f 84 0b 00 00 00    	je     102720 <pmm_get_free_space+0x70>
				free += 0x1000;
  102715:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102718:	05 00 10 00 00       	add    $0x1000,%eax
  10271d:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  102720:	e9 00 00 00 00       	jmp    102725 <pmm_get_free_space+0x75>

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
		for (uint32_t s = 0; s < 32; s++) {
  102725:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102728:	05 01 00 00 00       	add    $0x1,%eax
  10272d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102730:	e9 a9 ff ff ff       	jmp    1026de <pmm_get_free_space+0x2e>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}
  102735:	e9 00 00 00 00       	jmp    10273a <pmm_get_free_space+0x8a>
}

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  10273a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10273d:	05 01 00 00 00       	add    $0x1,%eax
  102742:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102745:	e9 80 ff ff ff       	jmp    1026ca <pmm_get_free_space+0x1a>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}

	return free / div;
  10274a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10274d:	31 d2                	xor    %edx,%edx
  10274f:	f7 75 fc             	divl   -0x4(%ebp)
  102752:	83 c4 14             	add    $0x14,%esp
  102755:	5d                   	pop    %ebp
  102756:	c3                   	ret    
  102757:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10275e:	00 00 

00102760 <pmm_free>:
}

void pmm_free(void* addr) {
  102760:	55                   	push   %ebp
  102761:	89 e5                	mov    %esp,%ebp
  102763:	56                   	push   %esi
  102764:	83 ec 14             	sub    $0x14,%esp
  102767:	8b 45 08             	mov    0x8(%ebp),%eax
  10276a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10276f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102772:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102775:	c1 e8 0c             	shr    $0xc,%eax
  102778:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10277b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10277e:	25 1f 00 00 00       	and    $0x1f,%eax
  102783:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102786:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102789:	c1 e8 05             	shr    $0x5,%eax
  10278c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  10278f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102792:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102795:	89 c1                	mov    %eax,%ecx
  102797:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10279a:	d3 e0                	shl    %cl,%eax
  10279c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10279f:	8b 34 95 98 a4 12 00 	mov    0x12a498(,%edx,4),%esi
  1027a6:	09 c6                	or     %eax,%esi
  1027a8:	89 34 95 98 a4 12 00 	mov    %esi,0x12a498(,%edx,4)
}
  1027af:	83 c4 14             	add    $0x14,%esp
  1027b2:	5e                   	pop    %esi
  1027b3:	5d                   	pop    %ebp
  1027b4:	c3                   	ret    
  1027b5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1027bc:	00 00 00 00 

001027c0 <pmm_mark_used>:

void pmm_mark_used(void* addr) {
  1027c0:	55                   	push   %ebp
  1027c1:	89 e5                	mov    %esp,%ebp
  1027c3:	56                   	push   %esi
  1027c4:	83 ec 14             	sub    $0x14,%esp
  1027c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1027ca:	b9 01 00 00 00       	mov    $0x1,%ecx
  1027cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  1027d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1027d5:	c1 e8 0c             	shr    $0xc,%eax
  1027d8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  1027db:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027de:	25 1f 00 00 00       	and    $0x1f,%eax
  1027e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  1027e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1027e9:	c1 e8 05             	shr    $0x5,%eax
  1027ec:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  1027ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1027f2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1027f5:	89 c1                	mov    %eax,%ecx
  1027f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1027fa:	d3 e0                	shl    %cl,%eax
  1027fc:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  102801:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102804:	8b 34 95 98 a4 12 00 	mov    0x12a498(,%edx,4),%esi
  10280b:	21 c6                	and    %eax,%esi
  10280d:	89 34 95 98 a4 12 00 	mov    %esi,0x12a498(,%edx,4)
}
  102814:	83 c4 14             	add    $0x14,%esp
  102817:	5e                   	pop    %esi
  102818:	5d                   	pop    %ebp
  102819:	c3                   	ret    
  10281a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00102820 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  102820:	55                   	push   %ebp
  102821:	89 e5                	mov    %esp,%ebp
  102823:	53                   	push   %ebx
  102824:	57                   	push   %edi
  102825:	56                   	push   %esi
  102826:	83 ec 5c             	sub    $0x5c,%esp
  102829:	8b 45 08             	mov    0x8(%ebp),%eax
  10282c:	8d 0d cb 83 10 00    	lea    0x1083cb,%ecx
  102832:	8d 15 98 a4 12 00    	lea    0x12a498,%edx
  102838:	89 d6                	mov    %edx,%esi
  10283a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  102840:	89 d7                	mov    %edx,%edi
  102842:	bb 00 00 00 00       	mov    $0x0,%ebx
  102847:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10284a:	b8 00 00 02 00       	mov    $0x20000,%eax
  10284f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102852:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102855:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  102858:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10285b:	8b 40 30             	mov    0x30(%eax),%eax
  10285e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  102861:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102864:	8b 40 30             	mov    0x30(%eax),%eax
  102867:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10286a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10286d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102870:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102873:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  102876:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  102879:	03 41 2c             	add    0x2c(%ecx),%eax
  10287c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			+ mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  10287f:	89 3c 24             	mov    %edi,(%esp)
  102882:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102889:	00 
  10288a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  102891:	00 
  102892:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  102895:	89 55 b8             	mov    %edx,-0x48(%ebp)
  102898:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  10289b:	e8 80 1e 00 00       	call   104720 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  1028a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1028a3:	89 04 24             	mov    %eax,(%esp)
  1028a6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  1028a9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1028ad:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  1028b0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1028b4:	e8 b7 dc ff ff       	call   100570 <kprintf>
  1028b9:	89 45 b0             	mov    %eax,-0x50(%ebp)

	while (mmap < mmap_end) {
  1028bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028bf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  1028c2:	0f 83 77 00 00 00    	jae    10293f <pmm_init+0x11f>
		if (mmap->mm_type == 1) {
  1028c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028cb:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  1028d2:	0f 85 57 00 00 00    	jne    10292f <pmm_init+0x10f>
			uintptr_t addr = mmap->mm_base_addr;
  1028d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1028db:	8b 40 04             	mov    0x4(%eax),%eax
  1028de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uintptr_t end_addr = addr + mmap->mm_length;
  1028e1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1028e4:	8b 49 0c             	mov    0xc(%ecx),%ecx
  1028e7:	01 c8                	add    %ecx,%eax
  1028e9:	89 45 e0             	mov    %eax,-0x20(%ebp)

			while (addr < end_addr) {
  1028ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1028ef:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  1028f2:	0f 83 32 00 00 00    	jae    10292a <pmm_init+0x10a>
				pmm_free((void*) addr);
  1028f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1028fb:	89 04 24             	mov    %eax,(%esp)
  1028fe:	e8 5d fe ff ff       	call   102760 <pmm_free>
				if (addr > upper_limit)
  102903:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102906:	3b 05 28 a4 10 00    	cmp    0x10a428,%eax
  10290c:	0f 86 08 00 00 00    	jbe    10291a <pmm_init+0xfa>
					upper_limit = addr;
  102912:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102915:	a3 28 a4 10 00       	mov    %eax,0x10a428
				addr += 0x1000;
  10291a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10291d:	05 00 10 00 00       	add    $0x1000,%eax
  102922:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			}
  102925:	e9 c2 ff ff ff       	jmp    1028ec <pmm_init+0xcc>
		}
  10292a:	e9 00 00 00 00       	jmp    10292f <pmm_init+0x10f>
		mmap++;
  10292f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102932:	05 18 00 00 00       	add    $0x18,%eax
  102937:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  10293a:	e9 7d ff ff ff       	jmp    1028bc <pmm_init+0x9c>
  10293f:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
  102945:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102948:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  10294e:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  102951:	0f 83 1b 00 00 00    	jae    102972 <pmm_init+0x152>
		pmm_mark_used((void*) addr);
  102957:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10295a:	89 04 24             	mov    %eax,(%esp)
  10295d:	e8 5e fe ff ff       	call   1027c0 <pmm_mark_used>
		addr += 0x1000;
  102962:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102965:	05 00 10 00 00       	add    $0x1000,%eax
  10296a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  10296d:	e9 d6 ff ff ff       	jmp    102948 <pmm_init+0x128>

	struct multiboot_module* modules = mb_info->mi_mods_addr;
  102972:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102975:	8b 40 18             	mov    0x18(%eax),%eax
  102978:	89 45 d8             	mov    %eax,-0x28(%ebp)

	pmm_mark_used(mb_info);
  10297b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10297e:	89 04 24             	mov    %eax,(%esp)
  102981:	e8 3a fe ff ff       	call   1027c0 <pmm_mark_used>
	pmm_mark_used(modules);
  102986:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102989:	89 04 24             	mov    %eax,(%esp)
  10298c:	e8 2f fe ff ff       	call   1027c0 <pmm_mark_used>

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  102991:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102998:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10299b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10299e:	3b 41 14             	cmp    0x14(%ecx),%eax
  1029a1:	0f 83 59 00 00 00    	jae    102a00 <pmm_init+0x1e0>
		addr = (uintptr_t) modules[i].start;
  1029a7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1029aa:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1029ad:	c1 e0 04             	shl    $0x4,%eax
  1029b0:	01 c1                	add    %eax,%ecx
  1029b2:	8b 01                	mov    (%ecx),%eax
  1029b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		while (addr < (uintptr_t) modules[i].end) {
  1029b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1029ba:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  1029bd:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1029c0:	c1 e1 04             	shl    $0x4,%ecx
  1029c3:	01 ca                	add    %ecx,%edx
  1029c5:	8b 4a 04             	mov    0x4(%edx),%ecx
  1029c8:	39 c8                	cmp    %ecx,%eax
  1029ca:	0f 83 1b 00 00 00    	jae    1029eb <pmm_init+0x1cb>
			pmm_mark_used((void*) addr);
  1029d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1029d3:	89 04 24             	mov    %eax,(%esp)
  1029d6:	e8 e5 fd ff ff       	call   1027c0 <pmm_mark_used>
			addr += 0x1000;
  1029db:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1029de:	05 00 10 00 00       	add    $0x1000,%eax
  1029e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
  1029e6:	e9 cc ff ff ff       	jmp    1029b7 <pmm_init+0x197>
	}
  1029eb:	e9 00 00 00 00       	jmp    1029f0 <pmm_init+0x1d0>

	pmm_mark_used(mb_info);
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  1029f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1029f3:	05 01 00 00 00       	add    $0x1,%eax
  1029f8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1029fb:	e9 98 ff ff ff       	jmp    102998 <pmm_init+0x178>
		while (addr < (uintptr_t) modules[i].end) {
			pmm_mark_used((void*) addr);
			addr += 0x1000;
		}
	}
}
  102a00:	83 c4 5c             	add    $0x5c,%esp
  102a03:	5e                   	pop    %esi
  102a04:	5f                   	pop    %edi
  102a05:	5b                   	pop    %ebx
  102a06:	5d                   	pop    %ebp
  102a07:	c3                   	ret    
  102a08:	66 90                	xchg   %ax,%ax
  102a0a:	66 90                	xchg   %ax,%ax
  102a0c:	66 90                	xchg   %ax,%ax
  102a0e:	66 90                	xchg   %ax,%ax

00102a10 <ramfs_block_init>:
#include "ramfs/block.h"

struct block_buffer* buffer[65536];

void ramfs_block_init() {
  102a10:	55                   	push   %ebp
  102a11:	89 e5                	mov    %esp,%ebp
  102a13:	83 ec 18             	sub    $0x18,%esp
  102a16:	8d 05 98 a4 14 00    	lea    0x14a498,%eax
  102a1c:	b9 00 00 00 00       	mov    $0x0,%ecx
  102a21:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  102a26:	89 04 24             	mov    %eax,(%esp)
  102a29:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102a30:	00 
  102a31:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  102a38:	00 
  102a39:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102a3c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102a3f:	e8 dc 1c 00 00       	call   104720 <memset>
}
  102a44:	83 c4 18             	add    $0x18,%esp
  102a47:	5d                   	pop    %ebp
  102a48:	c3                   	ret    
  102a49:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102a50 <ramfs_block_read>:
    }

    return 0;
}

uint32_t ramfs_block_read(struct res_handle* handle, void* dest, uint32_t length) {
  102a50:	55                   	push   %ebp
  102a51:	89 e5                	mov    %esp,%ebp
  102a53:	83 ec 28             	sub    $0x28,%esp
  102a56:	8b 45 10             	mov    0x10(%ebp),%eax
  102a59:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102a5c:	8b 55 08             	mov    0x8(%ebp),%edx
  102a5f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102a62:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102a68:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102a6b:	8b 40 04             	mov    0x4(%eax),%eax
  102a6e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102a71:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102a74:	8b 00                	mov    (%eax),%eax
  102a76:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  102a7d:	00 00 00 00 
  102a81:	0f 84 70 00 00 00    	je     102af7 <ramfs_block_read+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't read that much biatch
  102a87:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102a8a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102a8d:	8b 09                	mov    (%ecx),%ecx
  102a8f:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102a96:	8b 49 04             	mov    0x4(%ecx),%ecx
  102a99:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102a9c:	2b 4a 08             	sub    0x8(%edx),%ecx
  102a9f:	39 c8                	cmp    %ecx,%eax
  102aa1:	0f 86 0c 00 00 00    	jbe    102ab3 <ramfs_block_read+0x63>
  102aa7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  102aae:	e9 4b 00 00 00       	jmp    102afe <ramfs_block_read+0xae>

        memcpy(dest, buffer[kf->id]->buffer + handle->position, length);
  102ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ab6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102ab9:	8b 09                	mov    (%ecx),%ecx
  102abb:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102ac2:	8b 09                	mov    (%ecx),%ecx
  102ac4:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102ac7:	03 4a 08             	add    0x8(%edx),%ecx
  102aca:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102acd:	89 04 24             	mov    %eax,(%esp)
  102ad0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102ad4:	89 54 24 08          	mov    %edx,0x8(%esp)
  102ad8:	e8 a3 1c 00 00       	call   104780 <memcpy>
        handle->position += length;
  102add:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ae0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102ae3:	8b 51 08             	mov    0x8(%ecx),%edx
  102ae6:	01 c2                	add    %eax,%edx
  102ae8:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  102aeb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102af2:	e9 07 00 00 00       	jmp    102afe <ramfs_block_read+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  102af7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  102afe:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102b01:	83 c4 28             	add    $0x28,%esp
  102b04:	5d                   	pop    %ebp
  102b05:	c3                   	ret    
  102b06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  102b0d:	00 00 00 

00102b10 <ramfs_block_write>:

uint32_t ramfs_block_write(struct res_handle* handle, void* src, uint32_t length) {
  102b10:	55                   	push   %ebp
  102b11:	89 e5                	mov    %esp,%ebp
  102b13:	83 ec 28             	sub    $0x28,%esp
  102b16:	8b 45 10             	mov    0x10(%ebp),%eax
  102b19:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102b1c:	8b 55 08             	mov    0x8(%ebp),%edx
  102b1f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102b22:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102b25:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102b28:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102b2b:	8b 40 04             	mov    0x4(%eax),%eax
  102b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102b31:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102b34:	8b 00                	mov    (%eax),%eax
  102b36:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  102b3d:	00 00 00 00 
  102b41:	0f 84 70 00 00 00    	je     102bb7 <ramfs_block_write+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't write  that much biatch TODO realloc so file may grow
  102b47:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b4a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102b4d:	8b 09                	mov    (%ecx),%ecx
  102b4f:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102b56:	8b 49 04             	mov    0x4(%ecx),%ecx
  102b59:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102b5c:	2b 4a 08             	sub    0x8(%edx),%ecx
  102b5f:	39 c8                	cmp    %ecx,%eax
  102b61:	0f 86 0c 00 00 00    	jbe    102b73 <ramfs_block_write+0x63>
  102b67:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  102b6e:	e9 4b 00 00 00       	jmp    102bbe <ramfs_block_write+0xae>

        memcpy(buffer[kf->id]->buffer + handle->position, src, length);
  102b73:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102b76:	8b 00                	mov    (%eax),%eax
  102b78:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102b7f:	8b 00                	mov    (%eax),%eax
  102b81:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102b84:	03 41 08             	add    0x8(%ecx),%eax
  102b87:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102b8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102b8d:	89 04 24             	mov    %eax,(%esp)
  102b90:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102b94:	89 54 24 08          	mov    %edx,0x8(%esp)
  102b98:	e8 e3 1b 00 00       	call   104780 <memcpy>
        handle->position += length;
  102b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ba0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102ba3:	8b 51 08             	mov    0x8(%ecx),%edx
  102ba6:	01 c2                	add    %eax,%edx
  102ba8:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  102bab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102bb2:	e9 07 00 00 00       	jmp    102bbe <ramfs_block_write+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  102bb7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  102bbe:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102bc1:	83 c4 28             	add    $0x28,%esp
  102bc4:	5d                   	pop    %ebp
  102bc5:	c3                   	ret    
  102bc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  102bcd:	00 00 00 

00102bd0 <ramfs_block_open>:

struct res_handle* ramfs_block_open(struct res_kfile* kf, uint32_t filemode) {
  102bd0:	55                   	push   %ebp
  102bd1:	89 e5                	mov    %esp,%ebp
  102bd3:	83 ec 18             	sub    $0x18,%esp
  102bd6:	8b 45 0c             	mov    0xc(%ebp),%eax
  102bd9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102bdc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102bdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  102be2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102be5:	8b 00                	mov    (%eax),%eax
  102be7:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  102bee:	00 00 00 00 
  102bf2:	0f 84 9d 00 00 00    	je     102c95 <ramfs_block_open+0xc5>
        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  102bf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102bfb:	25 01 00 00 00       	and    $0x1,%eax
  102c00:	3d 00 00 00 00       	cmp    $0x0,%eax
  102c05:	0f 84 18 00 00 00    	je     102c23 <ramfs_block_open+0x53>
  102c0b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102c0e:	8b 00                	mov    (%eax),%eax
  102c10:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102c17:	8b 48 08             	mov    0x8(%eax),%ecx
  102c1a:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102c20:	89 48 08             	mov    %ecx,0x8(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  102c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c26:	25 02 00 00 00       	and    $0x2,%eax
  102c2b:	3d 00 00 00 00       	cmp    $0x0,%eax
  102c30:	0f 84 18 00 00 00    	je     102c4e <ramfs_block_open+0x7e>
  102c36:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102c39:	8b 00                	mov    (%eax),%eax
  102c3b:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102c42:	8b 48 0c             	mov    0xc(%eax),%ecx
  102c45:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102c4b:	89 48 0c             	mov    %ecx,0xc(%eax)
  102c4e:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  102c53:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  102c5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102c5d:	e8 4e 14 00 00       	call   1040b0 <malloc>
  102c62:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  102c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c68:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102c6b:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  102c6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c71:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  102c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c7b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  102c81:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102c84:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102c87:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  102c8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c8d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102c90:	e9 08 00 00 00       	jmp    102c9d <ramfs_block_open+0xcd>
  102c95:	b8 01 00 00 00       	mov    $0x1,%eax
    }

    return (void*)1;
  102c9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  102c9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102ca0:	83 c4 18             	add    $0x18,%esp
  102ca3:	5d                   	pop    %ebp
  102ca4:	c3                   	ret    
  102ca5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102cac:	00 00 00 00 

00102cb0 <ramfs_block_close>:

uint32_t ramfs_block_close(struct res_handle* handle) {
  102cb0:	55                   	push   %ebp
  102cb1:	89 e5                	mov    %esp,%ebp
  102cb3:	83 ec 18             	sub    $0x18,%esp
  102cb6:	8b 45 08             	mov    0x8(%ebp),%eax
  102cb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102cbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102cbf:	8b 40 04             	mov    0x4(%eax),%eax
  102cc2:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  102cc5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102cc8:	8b 00                	mov    (%eax),%eax
  102cca:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  102cd1:	00 00 00 00 
  102cd5:	0f 84 61 00 00 00    	je     102d3c <ramfs_block_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  102cdb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102cde:	8b 40 0c             	mov    0xc(%eax),%eax
  102ce1:	25 01 00 00 00       	and    $0x1,%eax
  102ce6:	3d 00 00 00 00       	cmp    $0x0,%eax
  102ceb:	0f 84 18 00 00 00    	je     102d09 <ramfs_block_close+0x59>
  102cf1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102cf4:	8b 00                	mov    (%eax),%eax
  102cf6:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102cfd:	8b 48 08             	mov    0x8(%eax),%ecx
  102d00:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102d06:	89 48 08             	mov    %ecx,0x8(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  102d09:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102d0c:	8b 40 0c             	mov    0xc(%eax),%eax
  102d0f:	25 02 00 00 00       	and    $0x2,%eax
  102d14:	3d 00 00 00 00       	cmp    $0x0,%eax
  102d19:	0f 84 18 00 00 00    	je     102d37 <ramfs_block_close+0x87>
  102d1f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d22:	8b 00                	mov    (%eax),%eax
  102d24:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102d2b:	8b 48 0c             	mov    0xc(%eax),%ecx
  102d2e:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102d34:	89 48 0c             	mov    %ecx,0xc(%eax)
    }
  102d37:	e9 00 00 00 00       	jmp    102d3c <ramfs_block_close+0x8c>

    free(handle);
  102d3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102d3f:	89 04 24             	mov    %eax,(%esp)
  102d42:	e8 39 17 00 00       	call   104480 <free>
  102d47:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  102d4c:	83 c4 18             	add    $0x18,%esp
  102d4f:	5d                   	pop    %ebp
  102d50:	c3                   	ret    
  102d51:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102d58:	0f 1f 84 00 00 00 00 
  102d5f:	00 

00102d60 <ramfs_block_available>:

struct kfs_driver* ramfs_block_driver_struct() {
    return &block_driver;
}

uint32_t ramfs_block_available(struct res_handle* handle) {
  102d60:	55                   	push   %ebp
  102d61:	89 e5                	mov    %esp,%ebp
  102d63:	83 ec 0c             	sub    $0xc,%esp
  102d66:	8b 45 08             	mov    0x8(%ebp),%eax
  102d69:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102d6c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d6f:	8b 40 04             	mov    0x4(%eax),%eax
  102d72:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  102d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d78:	8b 00                	mov    (%eax),%eax
  102d7a:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  102d81:	00 00 00 00 
  102d85:	0f 84 1d 00 00 00    	je     102da8 <ramfs_block_available+0x48>
        return buffer[kf->id]->size - handle->position;
  102d8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102d8e:	8b 00                	mov    (%eax),%eax
  102d90:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102d97:	8b 40 04             	mov    0x4(%eax),%eax
  102d9a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102d9d:	2b 41 08             	sub    0x8(%ecx),%eax
  102da0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102da3:	e9 07 00 00 00       	jmp    102daf <ramfs_block_available+0x4f>
    }

    return 0;
  102da8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102daf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102db2:	83 c4 0c             	add    $0xc,%esp
  102db5:	5d                   	pop    %ebp
  102db6:	c3                   	ret    
  102db7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  102dbe:	00 00 

00102dc0 <ramfs_block_create>:

struct res_kfile* ramfs_block_create(uint32_t* args) {
  102dc0:	55                   	push   %ebp
  102dc1:	89 e5                	mov    %esp,%ebp
  102dc3:	83 ec 28             	sub    $0x28,%esp
  102dc6:	8b 45 08             	mov    0x8(%ebp),%eax
  102dc9:	b9 08 00 00 00       	mov    $0x8,%ecx
  102dce:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  102dd1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  102dd8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102ddb:	e8 d0 12 00 00       	call   1040b0 <malloc>
  102de0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  102de3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102dea:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  102df1:	0f 8d a7 00 00 00    	jge    102e9e <ramfs_block_create+0xde>
        if(buffer[i] == 0) {
  102df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102dfa:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  102e01:	00 00 00 00 
  102e05:	0f 85 7e 00 00 00    	jne    102e89 <ramfs_block_create+0xc9>
  102e0b:	b8 10 00 00 00       	mov    $0x10,%eax
            buffer[i] = malloc(sizeof(struct block_buffer));
  102e10:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  102e17:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102e1a:	e8 91 12 00 00       	call   1040b0 <malloc>
  102e1f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102e22:	89 04 8d 98 a4 14 00 	mov    %eax,0x14a498(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  102e29:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e2c:	8b 00                	mov    (%eax),%eax
  102e2e:	89 04 24             	mov    %eax,(%esp)
  102e31:	e8 7a 12 00 00       	call   1040b0 <malloc>
  102e36:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102e39:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102e40:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  102e42:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e45:	8b 00                	mov    (%eax),%eax
  102e47:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102e4a:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102e51:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->writers = 0;
  102e54:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e57:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102e5e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            buffer[i]->readers = 0;
  102e65:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e68:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102e6f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            kfret->id = i;
  102e76:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e79:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102e7c:	89 01                	mov    %eax,(%ecx)

            return kfret;
  102e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e81:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102e84:	e9 1c 00 00 00       	jmp    102ea5 <ramfs_block_create+0xe5>
        }
    }
  102e89:	e9 00 00 00 00       	jmp    102e8e <ramfs_block_create+0xce>
}

struct res_kfile* ramfs_block_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  102e8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102e91:	05 01 00 00 00       	add    $0x1,%eax
  102e96:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102e99:	e9 4c ff ff ff       	jmp    102dea <ramfs_block_create+0x2a>

            return kfret;
        }
    }

    return 0;
  102e9e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102ea5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102ea8:	83 c4 28             	add    $0x28,%esp
  102eab:	5d                   	pop    %ebp
  102eac:	c3                   	ret    
  102ead:	0f 1f 00             	nopl   (%eax)

00102eb0 <ramfs_block_driver_struct>:
    .close     = ramfs_block_close,
    .available = ramfs_block_available,
    .drvname   = "RAMFILE"
};

struct kfs_driver* ramfs_block_driver_struct() {
  102eb0:	55                   	push   %ebp
  102eb1:	89 e5                	mov    %esp,%ebp
  102eb3:	8d 05 88 71 10 00    	lea    0x107188,%eax
    return &block_driver;
  102eb9:	5d                   	pop    %ebp
  102eba:	c3                   	ret    
  102ebb:	66 90                	xchg   %ax,%ax
  102ebd:	66 90                	xchg   %ax,%ax
  102ebf:	90                   	nop

00102ec0 <ramfs_fifo_init>:
#include "ramfs/fifo.h"

struct fifo_buffer* buffer[65536];

void ramfs_fifo_init() {
  102ec0:	55                   	push   %ebp
  102ec1:	89 e5                	mov    %esp,%ebp
  102ec3:	83 ec 18             	sub    $0x18,%esp
  102ec6:	8d 05 98 a4 14 00    	lea    0x14a498,%eax
  102ecc:	b9 00 00 00 00       	mov    $0x0,%ecx
  102ed1:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  102ed6:	89 04 24             	mov    %eax,(%esp)
  102ed9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102ee0:	00 
  102ee1:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  102ee8:	00 
  102ee9:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102eec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102eef:	e8 2c 18 00 00       	call   104720 <memset>
}
  102ef4:	83 c4 18             	add    $0x18,%esp
  102ef7:	5d                   	pop    %ebp
  102ef8:	c3                   	ret    
  102ef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102f00 <ramfs_fifo_read>:
    }

    return 0;
}

uint32_t ramfs_fifo_read(struct res_handle* handle, void* dest, uint32_t length) {
  102f00:	55                   	push   %ebp
  102f01:	89 e5                	mov    %esp,%ebp
  102f03:	83 ec 28             	sub    $0x28,%esp
  102f06:	8b 45 10             	mov    0x10(%ebp),%eax
  102f09:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102f0c:	8b 55 08             	mov    0x8(%ebp),%edx
  102f0f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102f12:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102f15:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102f18:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f1b:	8b 40 04             	mov    0x4(%eax),%eax
  102f1e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102f21:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102f24:	8b 00                	mov    (%eax),%eax
  102f26:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  102f2d:	00 00 00 00 
  102f31:	0f 84 d0 00 00 00    	je     103007 <ramfs_fifo_read+0x107>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't read cause buffer too small
  102f37:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f3a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102f3d:	8b 09                	mov    (%ecx),%ecx
  102f3f:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102f46:	3b 41 04             	cmp    0x4(%ecx),%eax
  102f49:	0f 86 0c 00 00 00    	jbe    102f5b <ramfs_fifo_read+0x5b>
  102f4f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  102f56:	e9 b3 00 00 00       	jmp    10300e <ramfs_fifo_read+0x10e>
        if(length > buffer[kf->id]->pos)  return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has writers
  102f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f5e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102f61:	8b 09                	mov    (%ecx),%ecx
  102f63:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102f6a:	3b 41 08             	cmp    0x8(%ecx),%eax
  102f6d:	0f 86 0c 00 00 00    	jbe    102f7f <ramfs_fifo_read+0x7f>
  102f73:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  102f7a:	e9 8f 00 00 00       	jmp    10300e <ramfs_fifo_read+0x10e>

        memcpy(dest, buffer[kf->id]->buffer, length);
  102f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102f82:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102f85:	8b 09                	mov    (%ecx),%ecx
  102f87:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102f8e:	8b 09                	mov    (%ecx),%ecx
  102f90:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102f93:	89 04 24             	mov    %eax,(%esp)
  102f96:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102f9a:	89 54 24 08          	mov    %edx,0x8(%esp)
  102f9e:	e8 dd 17 00 00       	call   104780 <memcpy>
        memcpy(buffer[kf->id]->buffer, buffer[kf->id]->buffer + length, buffer[kf->id]->pos - length);
  102fa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102fa6:	8b 00                	mov    (%eax),%eax
  102fa8:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  102faf:	8b 00                	mov    (%eax),%eax
  102fb1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102fb4:	8b 09                	mov    (%ecx),%ecx
  102fb6:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102fbd:	8b 09                	mov    (%ecx),%ecx
  102fbf:	03 4d f0             	add    -0x10(%ebp),%ecx
  102fc2:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102fc5:	8b 12                	mov    (%edx),%edx
  102fc7:	8b 14 95 98 a4 14 00 	mov    0x14a498(,%edx,4),%edx
  102fce:	8b 52 08             	mov    0x8(%edx),%edx
  102fd1:	2b 55 f0             	sub    -0x10(%ebp),%edx
  102fd4:	89 04 24             	mov    %eax,(%esp)
  102fd7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102fdb:	89 54 24 08          	mov    %edx,0x8(%esp)
  102fdf:	e8 9c 17 00 00       	call   104780 <memcpy>
        buffer[kf->id]->pos -= length;
  102fe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102fe7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102fea:	8b 09                	mov    (%ecx),%ecx
  102fec:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  102ff3:	8b 51 08             	mov    0x8(%ecx),%edx
  102ff6:	29 c2                	sub    %eax,%edx
  102ff8:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  102ffb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103002:	e9 07 00 00 00       	jmp    10300e <ramfs_fifo_read+0x10e>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  103007:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10300e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103011:	83 c4 28             	add    $0x28,%esp
  103014:	5d                   	pop    %ebp
  103015:	c3                   	ret    
  103016:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10301d:	00 00 00 

00103020 <ramfs_fifo_write>:

uint32_t ramfs_fifo_write(struct res_handle* handle, void* src, uint32_t length) {
  103020:	55                   	push   %ebp
  103021:	89 e5                	mov    %esp,%ebp
  103023:	83 ec 28             	sub    $0x28,%esp
  103026:	8b 45 10             	mov    0x10(%ebp),%eax
  103029:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10302c:	8b 55 08             	mov    0x8(%ebp),%edx
  10302f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103032:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103035:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  103038:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10303b:	8b 40 04             	mov    0x4(%eax),%eax
  10303e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  103041:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103044:	8b 00                	mov    (%eax),%eax
  103046:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  10304d:	00 00 00 00 
  103051:	0f 84 af 00 00 00    	je     103106 <ramfs_fifo_write+0xe6>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't write cause buffer too small
  103057:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10305a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10305d:	8b 09                	mov    (%ecx),%ecx
  10305f:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  103066:	3b 41 04             	cmp    0x4(%ecx),%eax
  103069:	0f 86 0c 00 00 00    	jbe    10307b <ramfs_fifo_write+0x5b>
  10306f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  103076:	e9 92 00 00 00       	jmp    10310d <ramfs_fifo_write+0xed>
        if(length > (buffer[kf->id]->size - buffer[kf->id]->pos)) return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has readers
  10307b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10307e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  103081:	8b 09                	mov    (%ecx),%ecx
  103083:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  10308a:	8b 49 04             	mov    0x4(%ecx),%ecx
  10308d:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103090:	8b 12                	mov    (%edx),%edx
  103092:	8b 14 95 98 a4 14 00 	mov    0x14a498(,%edx,4),%edx
  103099:	2b 4a 08             	sub    0x8(%edx),%ecx
  10309c:	39 c8                	cmp    %ecx,%eax
  10309e:	0f 86 0c 00 00 00    	jbe    1030b0 <ramfs_fifo_write+0x90>
  1030a4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  1030ab:	e9 5d 00 00 00       	jmp    10310d <ramfs_fifo_write+0xed>

        memcpy(buffer[kf->id]->buffer + buffer[kf->id]->pos, src, length);
  1030b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1030b3:	8b 00                	mov    (%eax),%eax
  1030b5:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  1030bc:	8b 00                	mov    (%eax),%eax
  1030be:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1030c1:	8b 09                	mov    (%ecx),%ecx
  1030c3:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  1030ca:	03 41 08             	add    0x8(%ecx),%eax
  1030cd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1030d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1030d3:	89 04 24             	mov    %eax,(%esp)
  1030d6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1030da:	89 54 24 08          	mov    %edx,0x8(%esp)
  1030de:	e8 9d 16 00 00       	call   104780 <memcpy>
        buffer[kf->id]->pos += length;
  1030e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030e6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1030e9:	8b 09                	mov    (%ecx),%ecx
  1030eb:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  1030f2:	8b 51 08             	mov    0x8(%ecx),%edx
  1030f5:	01 c2                	add    %eax,%edx
  1030f7:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  1030fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103101:	e9 07 00 00 00       	jmp    10310d <ramfs_fifo_write+0xed>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103106:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10310d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103110:	83 c4 28             	add    $0x28,%esp
  103113:	5d                   	pop    %ebp
  103114:	c3                   	ret    
  103115:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10311c:	00 00 00 00 

00103120 <ramfs_fifo_open>:

struct res_handle* ramfs_fifo_open(struct res_kfile* kf, uint32_t filemode) {
  103120:	55                   	push   %ebp
  103121:	89 e5                	mov    %esp,%ebp
  103123:	83 ec 18             	sub    $0x18,%esp
  103126:	8b 45 0c             	mov    0xc(%ebp),%eax
  103129:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10312c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10312f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  103132:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103135:	8b 00                	mov    (%eax),%eax
  103137:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  10313e:	00 00 00 00 
  103142:	0f 84 f4 00 00 00    	je     10323c <ramfs_fifo_open+0x11c>
        if(filemode & FM_EXEC) return 0;
  103148:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10314b:	25 04 00 00 00       	and    $0x4,%eax
  103150:	3d 00 00 00 00       	cmp    $0x0,%eax
  103155:	0f 84 0c 00 00 00    	je     103167 <ramfs_fifo_open+0x47>
  10315b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103162:	e9 dc 00 00 00       	jmp    103243 <ramfs_fifo_open+0x123>
        if((filemode & FM_READ) && buffer[kf->id]->readers > 0) return 0;
  103167:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10316a:	25 01 00 00 00       	and    $0x1,%eax
  10316f:	3d 00 00 00 00       	cmp    $0x0,%eax
  103174:	0f 84 25 00 00 00    	je     10319f <ramfs_fifo_open+0x7f>
  10317a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10317d:	8b 00                	mov    (%eax),%eax
  10317f:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  103186:	81 78 0c 00 00 00 00 	cmpl   $0x0,0xc(%eax)
  10318d:	0f 86 0c 00 00 00    	jbe    10319f <ramfs_fifo_open+0x7f>
  103193:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10319a:	e9 a4 00 00 00       	jmp    103243 <ramfs_fifo_open+0x123>

        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  10319f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031a2:	25 01 00 00 00       	and    $0x1,%eax
  1031a7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1031ac:	0f 84 18 00 00 00    	je     1031ca <ramfs_fifo_open+0xaa>
  1031b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031b5:	8b 00                	mov    (%eax),%eax
  1031b7:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  1031be:	8b 48 0c             	mov    0xc(%eax),%ecx
  1031c1:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1031c7:	89 48 0c             	mov    %ecx,0xc(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  1031ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031cd:	25 02 00 00 00       	and    $0x2,%eax
  1031d2:	3d 00 00 00 00       	cmp    $0x0,%eax
  1031d7:	0f 84 18 00 00 00    	je     1031f5 <ramfs_fifo_open+0xd5>
  1031dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1031e0:	8b 00                	mov    (%eax),%eax
  1031e2:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  1031e9:	8b 48 10             	mov    0x10(%eax),%ecx
  1031ec:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1031f2:	89 48 10             	mov    %ecx,0x10(%eax)
  1031f5:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  1031fa:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  103201:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103204:	e8 a7 0e 00 00       	call   1040b0 <malloc>
  103209:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  10320c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10320f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103212:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  103215:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103218:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  10321f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103222:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  103228:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10322b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10322e:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  103231:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103234:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103237:	e9 07 00 00 00       	jmp    103243 <ramfs_fifo_open+0x123>
    }

    return 0;
  10323c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103243:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103246:	83 c4 18             	add    $0x18,%esp
  103249:	5d                   	pop    %ebp
  10324a:	c3                   	ret    
  10324b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103250 <ramfs_fifo_close>:

uint32_t ramfs_fifo_close(struct res_handle* handle) {
  103250:	55                   	push   %ebp
  103251:	89 e5                	mov    %esp,%ebp
  103253:	83 ec 18             	sub    $0x18,%esp
  103256:	8b 45 08             	mov    0x8(%ebp),%eax
  103259:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10325c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10325f:	8b 40 04             	mov    0x4(%eax),%eax
  103262:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  103265:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103268:	8b 00                	mov    (%eax),%eax
  10326a:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  103271:	00 00 00 00 
  103275:	0f 84 61 00 00 00    	je     1032dc <ramfs_fifo_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  10327b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10327e:	8b 40 0c             	mov    0xc(%eax),%eax
  103281:	25 01 00 00 00       	and    $0x1,%eax
  103286:	3d 00 00 00 00       	cmp    $0x0,%eax
  10328b:	0f 84 18 00 00 00    	je     1032a9 <ramfs_fifo_close+0x59>
  103291:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103294:	8b 00                	mov    (%eax),%eax
  103296:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  10329d:	8b 48 0c             	mov    0xc(%eax),%ecx
  1032a0:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1032a6:	89 48 0c             	mov    %ecx,0xc(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  1032a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1032ac:	8b 40 0c             	mov    0xc(%eax),%eax
  1032af:	25 02 00 00 00       	and    $0x2,%eax
  1032b4:	3d 00 00 00 00       	cmp    $0x0,%eax
  1032b9:	0f 84 18 00 00 00    	je     1032d7 <ramfs_fifo_close+0x87>
  1032bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1032c2:	8b 00                	mov    (%eax),%eax
  1032c4:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  1032cb:	8b 48 10             	mov    0x10(%eax),%ecx
  1032ce:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1032d4:	89 48 10             	mov    %ecx,0x10(%eax)
    }
  1032d7:	e9 00 00 00 00       	jmp    1032dc <ramfs_fifo_close+0x8c>

    free(handle);
  1032dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1032df:	89 04 24             	mov    %eax,(%esp)
  1032e2:	e8 99 11 00 00       	call   104480 <free>
  1032e7:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  1032ec:	83 c4 18             	add    $0x18,%esp
  1032ef:	5d                   	pop    %ebp
  1032f0:	c3                   	ret    
  1032f1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1032f8:	0f 1f 84 00 00 00 00 
  1032ff:	00 

00103300 <ramfs_fifo_available>:

struct kfs_driver* ramfs_fifo_driver_struct() {
    return &fifo_driver;
}

uint32_t ramfs_fifo_available(struct res_handle* handle) {
  103300:	55                   	push   %ebp
  103301:	89 e5                	mov    %esp,%ebp
  103303:	83 ec 0c             	sub    $0xc,%esp
  103306:	8b 45 08             	mov    0x8(%ebp),%eax
  103309:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10330c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10330f:	8b 40 04             	mov    0x4(%eax),%eax
  103312:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  103315:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103318:	8b 00                	mov    (%eax),%eax
  10331a:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  103321:	00 00 00 00 
  103325:	0f 84 17 00 00 00    	je     103342 <ramfs_fifo_available+0x42>
        return buffer[kf->id]->pos;
  10332b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10332e:	8b 00                	mov    (%eax),%eax
  103330:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  103337:	8b 40 08             	mov    0x8(%eax),%eax
  10333a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10333d:	e9 07 00 00 00       	jmp    103349 <ramfs_fifo_available+0x49>
    }

    return 0;
  103342:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103349:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10334c:	83 c4 0c             	add    $0xc,%esp
  10334f:	5d                   	pop    %ebp
  103350:	c3                   	ret    
  103351:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103358:	0f 1f 84 00 00 00 00 
  10335f:	00 

00103360 <ramfs_fifo_create>:

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
  103360:	55                   	push   %ebp
  103361:	89 e5                	mov    %esp,%ebp
  103363:	83 ec 28             	sub    $0x28,%esp
  103366:	8b 45 08             	mov    0x8(%ebp),%eax
  103369:	b9 08 00 00 00       	mov    $0x8,%ecx
  10336e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  103371:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103378:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10337b:	e8 30 0d 00 00       	call   1040b0 <malloc>
  103380:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  103383:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10338a:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  103391:	0f 8d b8 00 00 00    	jge    10344f <ramfs_fifo_create+0xef>
        if(buffer[i] == 0) {
  103397:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10339a:	81 3c 85 98 a4 14 00 	cmpl   $0x0,0x14a498(,%eax,4)
  1033a1:	00 00 00 00 
  1033a5:	0f 85 8f 00 00 00    	jne    10343a <ramfs_fifo_create+0xda>
  1033ab:	b8 14 00 00 00       	mov    $0x14,%eax
            buffer[i] = malloc(sizeof(struct fifo_buffer));
  1033b0:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
  1033b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1033ba:	e8 f1 0c 00 00       	call   1040b0 <malloc>
  1033bf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1033c2:	89 04 8d 98 a4 14 00 	mov    %eax,0x14a498(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  1033c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1033cc:	8b 00                	mov    (%eax),%eax
  1033ce:	89 04 24             	mov    %eax,(%esp)
  1033d1:	e8 da 0c 00 00       	call   1040b0 <malloc>
  1033d6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1033d9:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  1033e0:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  1033e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1033e5:	8b 00                	mov    (%eax),%eax
  1033e7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1033ea:	8b 0c 8d 98 a4 14 00 	mov    0x14a498(,%ecx,4),%ecx
  1033f1:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->pos = 0;
  1033f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1033f7:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  1033fe:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            buffer[i]->writers = 0;
  103405:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103408:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  10340f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
            buffer[i]->readers = 0;
  103416:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103419:	8b 04 85 98 a4 14 00 	mov    0x14a498(,%eax,4),%eax
  103420:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            kfret->id = i;
  103427:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10342a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10342d:	89 01                	mov    %eax,(%ecx)

            return kfret;
  10342f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103432:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103435:	e9 1c 00 00 00       	jmp    103456 <ramfs_fifo_create+0xf6>
        }
    }
  10343a:	e9 00 00 00 00       	jmp    10343f <ramfs_fifo_create+0xdf>
}

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  10343f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103442:	05 01 00 00 00       	add    $0x1,%eax
  103447:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10344a:	e9 3b ff ff ff       	jmp    10338a <ramfs_fifo_create+0x2a>

            return kfret;
        }
    }

    return 0;
  10344f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103456:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103459:	83 c4 28             	add    $0x28,%esp
  10345c:	5d                   	pop    %ebp
  10345d:	c3                   	ret    
  10345e:	66 90                	xchg   %ax,%ax

00103460 <ramfs_fifo_driver_struct>:
    .close     = ramfs_fifo_close,
    .available = ramfs_fifo_available,
    .drvname   = "FIFO"
};

struct kfs_driver* ramfs_fifo_driver_struct() {
  103460:	55                   	push   %ebp
  103461:	89 e5                	mov    %esp,%ebp
  103463:	8d 05 a4 71 10 00    	lea    0x1071a4,%eax
    return &fifo_driver;
  103469:	5d                   	pop    %ebp
  10346a:	c3                   	ret    
  10346b:	90                   	nop
  10346c:	66 90                	xchg   %ax,%ax
  10346e:	66 90                	xchg   %ax,%ax

00103470 <tar_load_ramfs>:

    return size;

}

void tar_load_ramfs(void* tarball) {
  103470:	55                   	push   %ebp
  103471:	89 e5                	mov    %esp,%ebp
  103473:	56                   	push   %esi
  103474:	83 ec 64             	sub    $0x64,%esp
  103477:	8b 45 08             	mov    0x8(%ebp),%eax
  10347a:	8d 0d ee 83 10 00    	lea    0x1083ee,%ecx
  103480:	89 45 f8             	mov    %eax,-0x8(%ebp)
    void* address = tarball;
  103483:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103486:	89 45 f4             	mov    %eax,-0xc(%ebp)

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);
  103489:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10348c:	89 0c 24             	mov    %ecx,(%esp)
  10348f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103493:	e8 d8 d0 ff ff       	call   100570 <kprintf>

    for (i = 0; ; i++)
  103498:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10349f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    {

        struct tar_header *header = (struct tar_header*)address;
  1034a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034a5:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (header->name[0] == '\0')
  1034a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1034ab:	0f be 00             	movsbl (%eax),%eax
  1034ae:	3d 00 00 00 00       	cmp    $0x0,%eax
  1034b3:	0f 85 05 00 00 00    	jne    1034be <tar_load_ramfs+0x4e>
            break;
  1034b9:	e9 67 01 00 00       	jmp    103625 <tar_load_ramfs+0x1b5>

        uint32_t size = tar_parse_number(header->size);
  1034be:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1034c1:	05 7c 00 00 00       	add    $0x7c,%eax
  1034c6:	89 04 24             	mov    %eax,(%esp)
  1034c9:	e8 72 01 00 00       	call   103640 <tar_parse_number>
  1034ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
        address += 512;
  1034d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1034d4:	05 00 02 00 00       	add    $0x200,%eax
  1034d9:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(size != 0) {
  1034dc:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  1034e3:	0f 84 cb 00 00 00    	je     1035b4 <tar_load_ramfs+0x144>
  1034e9:	8d 05 1a 84 10 00    	lea    0x10841a,%eax
            kprintf("[initrfs] Extracting %s (%d bytes)\n", header->name, size);
  1034ef:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1034f2:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1034f5:	89 04 24             	mov    %eax,(%esp)
  1034f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1034fc:	89 54 24 08          	mov    %edx,0x8(%esp)
  103500:	e8 6b d0 ff ff       	call   100570 <kprintf>
  103505:	8d 4d e8             	lea    -0x18(%ebp),%ecx

            vfs_create_kfile(header->name, ramfs_block_driver_struct(), &size);
  103508:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10350b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10350e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  103511:	89 55 d0             	mov    %edx,-0x30(%ebp)
  103514:	e8 97 f9 ff ff       	call   102eb0 <ramfs_block_driver_struct>
  103519:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10351c:	89 0c 24             	mov    %ecx,(%esp)
  10351f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103523:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  103526:	89 44 24 08          	mov    %eax,0x8(%esp)
  10352a:	e8 11 19 00 00       	call   104e40 <vfs_create_kfile>
  10352f:	b9 02 00 00 00       	mov    $0x2,%ecx
            struct res_handle* h = vfs_open(header->name, FM_WRITE);
  103534:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103537:	89 14 24             	mov    %edx,(%esp)
  10353a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  103541:	00 
  103542:	89 45 cc             	mov    %eax,-0x34(%ebp)
  103545:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  103548:	e8 63 1a 00 00       	call   104fb0 <vfs_open>
  10354d:	b9 01 00 00 00       	mov    $0x1,%ecx
  103552:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            uint32_t err = vfs_write(h, address, size, 1);
  103555:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103558:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10355b:	8b 75 e8             	mov    -0x18(%ebp),%esi
  10355e:	89 04 24             	mov    %eax,(%esp)
  103561:	89 54 24 04          	mov    %edx,0x4(%esp)
  103565:	89 74 24 08          	mov    %esi,0x8(%esp)
  103569:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103570:	00 
  103571:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  103574:	e8 e7 1b 00 00       	call   105160 <vfs_write>
  103579:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(err) {
  10357c:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  103583:	0f 84 18 00 00 00    	je     1035a1 <tar_load_ramfs+0x131>
  103589:	8d 05 3e 84 10 00    	lea    0x10843e,%eax
                kprintf("[initrfs] VFS ERROR: %d\n", err);
  10358f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103592:	89 04 24             	mov    %eax,(%esp)
  103595:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103599:	e8 d2 cf ff ff       	call   100570 <kprintf>
  10359e:	89 45 c0             	mov    %eax,-0x40(%ebp)
            }

            vfs_close(h);
  1035a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1035a4:	89 04 24             	mov    %eax,(%esp)
  1035a7:	e8 84 1a 00 00       	call   105030 <vfs_close>
        }
  1035ac:	89 45 bc             	mov    %eax,-0x44(%ebp)
  1035af:	e9 2d 00 00 00       	jmp    1035e1 <tar_load_ramfs+0x171>
  1035b4:	8d 05 57 84 10 00    	lea    0x108457,%eax
        else
        {
            kprintf("[initrfs] Creating dir %s (%d bytes)\n", header->name, size);
  1035ba:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1035bd:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1035c0:	89 04 24             	mov    %eax,(%esp)
  1035c3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1035c7:	89 54 24 08          	mov    %edx,0x8(%esp)
  1035cb:	e8 a0 cf ff ff       	call   100570 <kprintf>
            vfs_create_dir(header->name);
  1035d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1035d3:	89 0c 24             	mov    %ecx,(%esp)
  1035d6:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1035d9:	e8 d2 16 00 00       	call   104cb0 <vfs_create_dir>
  1035de:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        }

        address += (size / 512) * 512;
  1035e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1035e4:	c1 e8 09             	shr    $0x9,%eax
  1035e7:	c1 e0 09             	shl    $0x9,%eax
  1035ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1035ed:	01 c1                	add    %eax,%ecx
  1035ef:	89 4d f4             	mov    %ecx,-0xc(%ebp)

        if (size % 512)
  1035f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1035f5:	25 ff 01 00 00       	and    $0x1ff,%eax
  1035fa:	3d 00 00 00 00       	cmp    $0x0,%eax
  1035ff:	0f 84 0b 00 00 00    	je     103610 <tar_load_ramfs+0x1a0>
            address += 512;
  103605:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103608:	05 00 02 00 00       	add    $0x200,%eax
  10360d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    }
  103610:	e9 00 00 00 00       	jmp    103615 <tar_load_ramfs+0x1a5>

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);

    for (i = 0; ; i++)
  103615:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103618:	05 01 00 00 00       	add    $0x1,%eax
  10361d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103620:	e9 7d fe ff ff       	jmp    1034a2 <tar_load_ramfs+0x32>
  103625:	8d 05 7d 84 10 00    	lea    0x10847d,%eax
        if (size % 512)
            address += 512;

    }

    kprintf("[initrfs] Finished unpacking tarball\n");
  10362b:	89 04 24             	mov    %eax,(%esp)
  10362e:	e8 3d cf ff ff       	call   100570 <kprintf>
}
  103633:	89 45 b0             	mov    %eax,-0x50(%ebp)
  103636:	83 c4 64             	add    $0x64,%esp
  103639:	5e                   	pop    %esi
  10363a:	5d                   	pop    %ebp
  10363b:	c3                   	ret    
  10363c:	0f 1f 40 00          	nopl   0x0(%eax)

00103640 <tar_parse_number>:
#include "ramfs/tar.h"
#include "ramfs/block.h"
#include "vfs.h"

static uint32_t tar_parse_number(const char *in)
{
  103640:	55                   	push   %ebp
  103641:	89 e5                	mov    %esp,%ebp
  103643:	83 ec 10             	sub    $0x10,%esp
  103646:	8b 45 08             	mov    0x8(%ebp),%eax
  103649:	89 45 fc             	mov    %eax,-0x4(%ebp)

    unsigned int size = 0;
  10364c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    unsigned int j;
    unsigned int count = 1;
  103653:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

    for (j = 11; j > 0; j--, count *= 8)
  10365a:	c7 45 f4 0b 00 00 00 	movl   $0xb,-0xc(%ebp)
  103661:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103668:	0f 86 39 00 00 00    	jbe    1036a7 <tar_parse_number+0x67>
        size += ((in[j - 1] - '0') * count);
  10366e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103671:	2d 01 00 00 00       	sub    $0x1,%eax
  103676:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103679:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  10367d:	2d 30 00 00 00       	sub    $0x30,%eax
  103682:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  103686:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103689:	01 c1                	add    %eax,%ecx
  10368b:	89 4d f8             	mov    %ecx,-0x8(%ebp)

    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;

    for (j = 11; j > 0; j--, count *= 8)
  10368e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103691:	05 ff ff ff ff       	add    $0xffffffff,%eax
  103696:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103699:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10369c:	c1 e0 03             	shl    $0x3,%eax
  10369f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1036a2:	e9 ba ff ff ff       	jmp    103661 <tar_parse_number+0x21>
        size += ((in[j - 1] - '0') * count);

    return size;
  1036a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1036aa:	83 c4 10             	add    $0x10,%esp
  1036ad:	5d                   	pop    %ebp
  1036ae:	c3                   	ret    
  1036af:	90                   	nop

001036b0 <ramfs_vga_read>:

struct res_kfile* ramfs_vga_create(uint32_t* args) {
    return malloc(sizeof(struct res_kfile));
}

uint32_t ramfs_vga_read(struct res_handle* handle, void* dest, uint32_t length) {
  1036b0:	55                   	push   %ebp
  1036b1:	89 e5                	mov    %esp,%ebp
  1036b3:	56                   	push   %esi
  1036b4:	83 ec 0c             	sub    $0xc,%esp
  1036b7:	8b 45 10             	mov    0x10(%ebp),%eax
  1036ba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1036bd:	8b 55 08             	mov    0x8(%ebp),%edx
  1036c0:	be 03 00 00 00       	mov    $0x3,%esi
  1036c5:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1036c8:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1036cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  1036ce:	89 f0                	mov    %esi,%eax
  1036d0:	83 c4 0c             	add    $0xc,%esp
  1036d3:	5e                   	pop    %esi
  1036d4:	5d                   	pop    %ebp
  1036d5:	c3                   	ret    
  1036d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1036dd:	00 00 00 

001036e0 <ramfs_vga_write>:
}

uint32_t ramfs_vga_write(struct res_handle* handle, void* src, uint32_t length) {
  1036e0:	55                   	push   %ebp
  1036e1:	89 e5                	mov    %esp,%ebp
  1036e3:	83 ec 1c             	sub    $0x1c,%esp
  1036e6:	8b 45 10             	mov    0x10(%ebp),%eax
  1036e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1036ec:	8b 55 08             	mov    0x8(%ebp),%edx
  1036ef:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1036f2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1036f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(length != sizeof(struct vga_command)) return RW_ERR_DRIVER;
  1036f8:	81 7d f0 06 00 00 00 	cmpl   $0x6,-0x10(%ebp)
  1036ff:	0f 84 0c 00 00 00    	je     103711 <ramfs_vga_write+0x31>
  103705:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  10370c:	e9 1f 01 00 00       	jmp    103830 <ramfs_vga_write+0x150>

    struct vga_command* vgac = src;
  103711:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103714:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(vgac->command == CMD_SET) {
  103717:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10371a:	0f b7 00             	movzwl (%eax),%eax
  10371d:	3d 00 00 00 00       	cmp    $0x0,%eax
  103722:	0f 85 2f 00 00 00    	jne    103757 <ramfs_vga_write+0x77>
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
  103728:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10372b:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  10372f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
  103734:	0f 8d 18 00 00 00    	jge    103752 <ramfs_vga_write+0x72>
  10373a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10373d:	66 8b 48 04          	mov    0x4(%eax),%cx
  103741:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103744:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  103748:	8b 15 c0 71 10 00    	mov    0x1071c0,%edx
  10374e:	66 89 0c 42          	mov    %cx,(%edx,%eax,2)
    }
  103752:	e9 00 00 00 00       	jmp    103757 <ramfs_vga_write+0x77>

    if(vgac->command == CMD_CLEAR) {
  103757:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10375a:	0f b7 00             	movzwl (%eax),%eax
  10375d:	3d 01 00 00 00       	cmp    $0x1,%eax
  103762:	0f 85 38 00 00 00    	jne    1037a0 <ramfs_vga_write+0xc0>
        for(int i = 0; i < (80 * 25); i++) {
  103768:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10376f:	81 7d e8 d0 07 00 00 	cmpl   $0x7d0,-0x18(%ebp)
  103776:	0f 8d 1f 00 00 00    	jge    10379b <ramfs_vga_write+0xbb>
            vga_buffer[i] = 0;
  10377c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10377f:	8b 0d c0 71 10 00    	mov    0x1071c0,%ecx
  103785:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
    if(vgac->command == CMD_SET) {
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
    }

    if(vgac->command == CMD_CLEAR) {
        for(int i = 0; i < (80 * 25); i++) {
  10378b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10378e:	05 01 00 00 00       	add    $0x1,%eax
  103793:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103796:	e9 d4 ff ff ff       	jmp    10376f <ramfs_vga_write+0x8f>
            vga_buffer[i] = 0;
        }
    }
  10379b:	e9 00 00 00 00       	jmp    1037a0 <ramfs_vga_write+0xc0>

    if(vgac->command == CMD_SCROLL) {
  1037a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1037a3:	0f b7 00             	movzwl (%eax),%eax
  1037a6:	3d 02 00 00 00       	cmp    $0x2,%eax
  1037ab:	0f 85 78 00 00 00    	jne    103829 <ramfs_vga_write+0x149>
        int i;
        for (i = 0; i < 24 * 80; i++) {
  1037b1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  1037b8:	81 7d e4 80 07 00 00 	cmpl   $0x780,-0x1c(%ebp)
  1037bf:	0f 8d 2e 00 00 00    	jge    1037f3 <ramfs_vga_write+0x113>
            vga_buffer[i] = vga_buffer[i + 80];
  1037c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1037c8:	8b 0d c0 71 10 00    	mov    0x1071c0,%ecx
  1037ce:	66 8b 94 41 a0 00 00 	mov    0xa0(%ecx,%eax,2),%dx
  1037d5:	00 
  1037d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1037d9:	8b 0d c0 71 10 00    	mov    0x1071c0,%ecx
  1037df:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)
        }
    }

    if(vgac->command == CMD_SCROLL) {
        int i;
        for (i = 0; i < 24 * 80; i++) {
  1037e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1037e6:	05 01 00 00 00       	add    $0x1,%eax
  1037eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1037ee:	e9 c5 ff ff ff       	jmp    1037b8 <ramfs_vga_write+0xd8>
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  1037f3:	e9 00 00 00 00       	jmp    1037f8 <ramfs_vga_write+0x118>
  1037f8:	81 7d e4 d0 07 00 00 	cmpl   $0x7d0,-0x1c(%ebp)
  1037ff:	0f 8d 1f 00 00 00    	jge    103824 <ramfs_vga_write+0x144>
            vga_buffer[i] = 0;
  103805:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103808:	8b 0d c0 71 10 00    	mov    0x1071c0,%ecx
  10380e:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
        int i;
        for (i = 0; i < 24 * 80; i++) {
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  103814:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103817:	05 01 00 00 00       	add    $0x1,%eax
  10381c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10381f:	e9 d4 ff ff ff       	jmp    1037f8 <ramfs_vga_write+0x118>
            vga_buffer[i] = 0;
        }
    }
  103824:	e9 00 00 00 00       	jmp    103829 <ramfs_vga_write+0x149>

    return RW_OK; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  103829:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103830:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103833:	83 c4 1c             	add    $0x1c,%esp
  103836:	5d                   	pop    %ebp
  103837:	c3                   	ret    
  103838:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10383f:	00 

00103840 <ramfs_vga_open>:

struct res_handle* ramfs_vga_open(struct res_kfile* kf, uint32_t filemode) {
  103840:	55                   	push   %ebp
  103841:	89 e5                	mov    %esp,%ebp
  103843:	83 ec 18             	sub    $0x18,%esp
  103846:	8b 45 0c             	mov    0xc(%ebp),%eax
  103849:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10384c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10384f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(filemode & FM_EXEC) return 0;
  103852:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103855:	25 04 00 00 00       	and    $0x4,%eax
  10385a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10385f:	0f 84 0c 00 00 00    	je     103871 <ramfs_vga_open+0x31>
  103865:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10386c:	e9 b2 00 00 00       	jmp    103923 <ramfs_vga_open+0xe3>
    if(filemode & FM_READ) return 0;
  103871:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103874:	25 01 00 00 00       	and    $0x1,%eax
  103879:	3d 00 00 00 00       	cmp    $0x0,%eax
  10387e:	0f 84 0c 00 00 00    	je     103890 <ramfs_vga_open+0x50>
  103884:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10388b:	e9 93 00 00 00       	jmp    103923 <ramfs_vga_open+0xe3>

    if((filemode & FM_WRITE) && vga_writers != 0) return 0;
  103890:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103893:	25 02 00 00 00       	and    $0x2,%eax
  103898:	3d 00 00 00 00       	cmp    $0x0,%eax
  10389d:	0f 84 1c 00 00 00    	je     1038bf <ramfs_vga_open+0x7f>
  1038a3:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  1038aa:	00 00 00 
  1038ad:	0f 84 0c 00 00 00    	je     1038bf <ramfs_vga_open+0x7f>
  1038b3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1038ba:	e9 64 00 00 00       	jmp    103923 <ramfs_vga_open+0xe3>
    if((filemode & FM_WRITE)) vga_writers++;
  1038bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1038c2:	25 02 00 00 00       	and    $0x2,%eax
  1038c7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1038cc:	0f 84 0f 00 00 00    	je     1038e1 <ramfs_vga_open+0xa1>
  1038d2:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  1038d7:	05 01 00 00 00       	add    $0x1,%eax
  1038dc:	a3 2c a4 10 00       	mov    %eax,0x10a42c
  1038e1:	b8 10 00 00 00       	mov    $0x10,%eax

    struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  1038e6:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1038ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1038f0:	e8 bb 07 00 00       	call   1040b0 <malloc>
  1038f5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    rethandle->filemode = filemode;
  1038f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1038fb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1038fe:	89 41 0c             	mov    %eax,0xc(%ecx)
    rethandle->position = 0;
  103901:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103904:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    rethandle->res_type = RES_KERNDRV;
  10390b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10390e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    rethandle->res_ptr  = kf;
  103914:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103917:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10391a:	89 41 04             	mov    %eax,0x4(%ecx)

    return rethandle;
  10391d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103920:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  103923:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103926:	83 c4 18             	add    $0x18,%esp
  103929:	5d                   	pop    %ebp
  10392a:	c3                   	ret    
  10392b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103930 <ramfs_vga_close>:

uint32_t ramfs_vga_close(struct res_handle* handle) {
  103930:	55                   	push   %ebp
  103931:	89 e5                	mov    %esp,%ebp
  103933:	83 ec 08             	sub    $0x8,%esp
  103936:	8b 45 08             	mov    0x8(%ebp),%eax
  103939:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(handle->filemode & FM_WRITE) vga_writers--;
  10393c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10393f:	8b 40 0c             	mov    0xc(%eax),%eax
  103942:	25 02 00 00 00       	and    $0x2,%eax
  103947:	3d 00 00 00 00       	cmp    $0x0,%eax
  10394c:	0f 84 0f 00 00 00    	je     103961 <ramfs_vga_close+0x31>
  103952:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  103957:	05 ff ff ff ff       	add    $0xffffffff,%eax
  10395c:	a3 2c a4 10 00       	mov    %eax,0x10a42c

    free(handle);
  103961:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103964:	89 04 24             	mov    %eax,(%esp)
  103967:	e8 14 0b 00 00       	call   104480 <free>
  10396c:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  103971:	83 c4 08             	add    $0x8,%esp
  103974:	5d                   	pop    %ebp
  103975:	c3                   	ret    
  103976:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10397d:	00 00 00 

00103980 <ramfs_vga_available>:

uint32_t ramfs_vga_writers() {
    return vga_writers;
}

uint32_t ramfs_vga_available(struct res_handle* handle) {
  103980:	55                   	push   %ebp
  103981:	89 e5                	mov    %esp,%ebp
  103983:	50                   	push   %eax
  103984:	8b 45 08             	mov    0x8(%ebp),%eax
  103987:	b9 06 00 00 00       	mov    $0x6,%ecx
  10398c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sizeof(struct vga_command);
  10398f:	89 c8                	mov    %ecx,%eax
  103991:	83 c4 04             	add    $0x4,%esp
  103994:	5d                   	pop    %ebp
  103995:	c3                   	ret    
  103996:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10399d:	00 00 00 

001039a0 <ramfs_vga_create>:
}

struct res_kfile* ramfs_vga_create(uint32_t* args) {
  1039a0:	55                   	push   %ebp
  1039a1:	89 e5                	mov    %esp,%ebp
  1039a3:	83 ec 18             	sub    $0x18,%esp
  1039a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1039a9:	b9 08 00 00 00       	mov    $0x8,%ecx
  1039ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return malloc(sizeof(struct res_kfile));
  1039b1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1039b8:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1039bb:	e8 f0 06 00 00       	call   1040b0 <malloc>
  1039c0:	83 c4 18             	add    $0x18,%esp
  1039c3:	5d                   	pop    %ebp
  1039c4:	c3                   	ret    
  1039c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1039cc:	00 00 00 00 

001039d0 <ramfs_vga_driver_struct>:
    .close     = ramfs_vga_close,
    .available = ramfs_vga_available,
    .drvname   = "VGA_CONTROL"
};

struct kfs_driver* ramfs_vga_driver_struct() {
  1039d0:	55                   	push   %ebp
  1039d1:	89 e5                	mov    %esp,%ebp
  1039d3:	8d 05 c4 71 10 00    	lea    0x1071c4,%eax
    return &vga_driver;
  1039d9:	5d                   	pop    %ebp
  1039da:	c3                   	ret    
  1039db:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001039e0 <ramfs_vga_writers>:
}

uint32_t ramfs_vga_writers() {
  1039e0:	55                   	push   %ebp
  1039e1:	89 e5                	mov    %esp,%ebp
    return vga_writers;
  1039e3:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  1039e8:	5d                   	pop    %ebp
  1039e9:	c3                   	ret    
  1039ea:	66 90                	xchg   %ax,%ax
  1039ec:	66 90                	xchg   %ax,%ax
  1039ee:	66 90                	xchg   %ax,%ax

001039f0 <enableScheduling>:
struct task* first_task = 0;
struct task* current_task = 0;

int nextPID = 1;

void enableScheduling(void) {
  1039f0:	55                   	push   %ebp
  1039f1:	89 e5                	mov    %esp,%ebp
    schedulingEnabled = 1;
  1039f3:	c7 05 30 a4 10 00 01 	movl   $0x1,0x10a430
  1039fa:	00 00 00 
}
  1039fd:	5d                   	pop    %ebp
  1039fe:	c3                   	ret    
  1039ff:	90                   	nop

00103a00 <isSchedulingEnabled>:

uint32_t isSchedulingEnabled(void) {
  103a00:	55                   	push   %ebp
  103a01:	89 e5                	mov    %esp,%ebp
    return schedulingEnabled;
  103a03:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103a08:	5d                   	pop    %ebp
  103a09:	c3                   	ret    
  103a0a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103a10 <get_current_task>:
}

struct task* get_current_task(void) {
  103a10:	55                   	push   %ebp
  103a11:	89 e5                	mov    %esp,%ebp
    return current_task;
  103a13:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103a18:	5d                   	pop    %ebp
  103a19:	c3                   	ret    
  103a1a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103a20 <register_handle>:
}

uint32_t register_handle(struct res_handle* h) {
  103a20:	55                   	push   %ebp
  103a21:	89 e5                	mov    %esp,%ebp
  103a23:	83 ec 18             	sub    $0x18,%esp
  103a26:	8b 45 08             	mov    0x8(%ebp),%eax
  103a29:	b9 08 00 00 00       	mov    $0x8,%ecx
  103a2e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct hl_node* old = current_task->handle_list;
  103a31:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103a36:	8b 40 28             	mov    0x28(%eax),%eax
  103a39:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task->handle_list = malloc(sizeof(struct hl_node));
  103a3c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103a43:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103a46:	e8 65 06 00 00       	call   1040b0 <malloc>
  103a4b:	b9 00 00 00 00       	mov    $0x0,%ecx
  103a50:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  103a56:	89 42 28             	mov    %eax,0x28(%edx)
    current_task->handle_list->next = old;
  103a59:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103a5c:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  103a62:	8b 52 28             	mov    0x28(%edx),%edx
  103a65:	89 42 04             	mov    %eax,0x4(%edx)
    current_task->handle_list->handle = h;
  103a68:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a6b:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  103a71:	8b 52 28             	mov    0x28(%edx),%edx
  103a74:	89 02                	mov    %eax,(%edx)

    return 0;
  103a76:	89 c8                	mov    %ecx,%eax
  103a78:	83 c4 18             	add    $0x18,%esp
  103a7b:	5d                   	pop    %ebp
  103a7c:	c3                   	ret    
  103a7d:	0f 1f 00             	nopl   (%eax)

00103a80 <unregister_handle>:
}

uint32_t unregister_handle(struct res_handle* h) {
  103a80:	55                   	push   %ebp
  103a81:	89 e5                	mov    %esp,%ebp
  103a83:	83 ec 18             	sub    $0x18,%esp
  103a86:	8b 45 08             	mov    0x8(%ebp),%eax
  103a89:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct hl_node* cur = current_task->handle_list;
  103a8c:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103a91:	8b 40 28             	mov    0x28(%eax),%eax
  103a94:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(h == 0) return 2;
  103a97:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103a9e:	0f 85 0c 00 00 00    	jne    103ab0 <unregister_handle+0x30>
  103aa4:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
  103aab:	e9 b4 00 00 00       	jmp    103b64 <unregister_handle+0xe4>
    if(cur == 0) return 1;
  103ab0:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103ab7:	0f 85 0c 00 00 00    	jne    103ac9 <unregister_handle+0x49>
  103abd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  103ac4:	e9 9b 00 00 00       	jmp    103b64 <unregister_handle+0xe4>

    if(cur->handle == h) {
  103ac9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103acc:	8b 00                	mov    (%eax),%eax
  103ace:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103ad1:	0f 85 26 00 00 00    	jne    103afd <unregister_handle+0x7d>
        current_task->handle_list = cur->next;
  103ad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ada:	8b 40 04             	mov    0x4(%eax),%eax
  103add:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  103ae3:	89 41 28             	mov    %eax,0x28(%ecx)
        free(cur);
  103ae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ae9:	89 04 24             	mov    %eax,(%esp)
  103aec:	e8 8f 09 00 00       	call   104480 <free>

        return 0;
  103af1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103af8:	e9 67 00 00 00       	jmp    103b64 <unregister_handle+0xe4>
    }

    while(cur != 0) {
  103afd:	e9 00 00 00 00       	jmp    103b02 <unregister_handle+0x82>
  103b02:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103b09:	0f 84 4e 00 00 00    	je     103b5d <unregister_handle+0xdd>
        if(cur->next->handle == h) {
  103b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b12:	8b 40 04             	mov    0x4(%eax),%eax
  103b15:	8b 00                	mov    (%eax),%eax
  103b17:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103b1a:	0f 85 2f 00 00 00    	jne    103b4f <unregister_handle+0xcf>
            void* next = cur->next;
  103b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b23:	8b 40 04             	mov    0x4(%eax),%eax
  103b26:	89 45 f0             	mov    %eax,-0x10(%ebp)
            cur->next =  cur->next->next;
  103b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b2c:	8b 40 04             	mov    0x4(%eax),%eax
  103b2f:	8b 40 04             	mov    0x4(%eax),%eax
  103b32:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103b35:	89 41 04             	mov    %eax,0x4(%ecx)

            free(next);
  103b38:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103b3b:	89 04 24             	mov    %eax,(%esp)
  103b3e:	e8 3d 09 00 00       	call   104480 <free>

            return 0;
  103b43:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103b4a:	e9 15 00 00 00       	jmp    103b64 <unregister_handle+0xe4>
        }

        cur = cur->next;
  103b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b52:	8b 40 04             	mov    0x4(%eax),%eax
  103b55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  103b58:	e9 a5 ff ff ff       	jmp    103b02 <unregister_handle+0x82>

    return 3;
  103b5d:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  103b64:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103b67:	83 c4 18             	add    $0x18,%esp
  103b6a:	5d                   	pop    %ebp
  103b6b:	c3                   	ret    
  103b6c:	0f 1f 40 00          	nopl   0x0(%eax)

00103b70 <schedule_exception>:

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  103b70:	55                   	push   %ebp
  103b71:	89 e5                	mov    %esp,%ebp
  103b73:	56                   	push   %esi
  103b74:	83 ec 34             	sub    $0x34,%esp
  103b77:	8b 45 08             	mov    0x8(%ebp),%eax
  103b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (current_task == first_task && current_task->next == 0) {
  103b7d:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103b82:	3b 05 34 a4 10 00    	cmp    0x10a434,%eax
  103b88:	0f 85 78 00 00 00    	jne    103c06 <schedule_exception+0x96>
  103b8e:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103b93:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  103b9a:	0f 85 66 00 00 00    	jne    103c06 <schedule_exception+0x96>
  103ba0:	b8 04 00 00 00       	mov    $0x4,%eax
        //Only one process is running, which just crashed. Stop system.
        setclr(0x04);
  103ba5:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  103bac:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103baf:	e8 9c c9 ff ff       	call   100550 <setclr>
  103bb4:	8d 05 af 84 10 00    	lea    0x1084af,%eax
        kprintf("\n~~~ Terminated task (PID=%d) due to exception %x:%x \n", current_task->PID, cpu->intr, cpu->error);
  103bba:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  103bc0:	8b 09                	mov    (%ecx),%ecx
  103bc2:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103bc5:	8b 52 1c             	mov    0x1c(%edx),%edx
  103bc8:	8b 75 f4             	mov    -0xc(%ebp),%esi
  103bcb:	8b 76 20             	mov    0x20(%esi),%esi
  103bce:	89 04 24             	mov    %eax,(%esp)
  103bd1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103bd5:	89 54 24 08          	mov    %edx,0x8(%esp)
  103bd9:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103bdd:	e8 8e c9 ff ff       	call   100570 <kprintf>
  103be2:	8d 0d e6 84 10 00    	lea    0x1084e6,%ecx
        show_cod(cpu, "Last task crashed. Terminating kernel...");
  103be8:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103beb:	89 14 24             	mov    %edx,(%esp)
  103bee:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103bf2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103bf5:	e8 86 c7 ff ff       	call   100380 <show_cod>

        //will never occur cause COD terminates execution
        return 0;
  103bfa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  103c01:	e9 83 00 00 00       	jmp    103c89 <schedule_exception+0x119>
  103c06:	b8 04 00 00 00       	mov    $0x4,%eax
    } else {
        //Potential security leaks available in following code.
        setclr(0x04);
  103c0b:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  103c12:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103c15:	e8 36 c9 ff ff       	call   100550 <setclr>
  103c1a:	8d 05 af 84 10 00    	lea    0x1084af,%eax
        kprintf("\n~~~ Terminated task (PID=%d) due to exception %x:%x \n", current_task->PID, cpu->intr, cpu->error);
  103c20:	8b 0d 38 a4 10 00    	mov    0x10a438,%ecx
  103c26:	8b 09                	mov    (%ecx),%ecx
  103c28:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103c2b:	8b 52 1c             	mov    0x1c(%edx),%edx
  103c2e:	8b 75 f4             	mov    -0xc(%ebp),%esi
  103c31:	8b 76 20             	mov    0x20(%esi),%esi
  103c34:	89 04 24             	mov    %eax,(%esp)
  103c37:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103c3b:	89 54 24 08          	mov    %edx,0x8(%esp)
  103c3f:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103c43:	e8 28 c9 ff ff       	call   100570 <kprintf>
  103c48:	8d 0d e5 82 10 00    	lea    0x1082e5,%ecx
        kprintf("\n");
  103c4e:	89 0c 24             	mov    %ecx,(%esp)
  103c51:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103c54:	e8 17 c9 ff ff       	call   100570 <kprintf>
        show_dump(cpu);
  103c59:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103c5c:	89 0c 24             	mov    %ecx,(%esp)
  103c5f:	89 45 e0             	mov    %eax,-0x20(%ebp)
  103c62:	e8 99 c7 ff ff       	call   100400 <show_dump>
  103c67:	b8 07 00 00 00       	mov    $0x7,%eax
        setclr(0x07);
  103c6c:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  103c73:	89 45 dc             	mov    %eax,-0x24(%ebp)
  103c76:	e8 d5 c8 ff ff       	call   100550 <setclr>

        return terminate_current(cpu);
  103c7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c7e:	89 04 24             	mov    %eax,(%esp)
  103c81:	e8 1a 00 00 00       	call   103ca0 <terminate_current>
  103c86:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
}
  103c89:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103c8c:	83 c4 34             	add    $0x34,%esp
  103c8f:	5e                   	pop    %esi
  103c90:	5d                   	pop    %ebp
  103c91:	c3                   	ret    
  103c92:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103c99:	1f 84 00 00 00 00 00 

00103ca0 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  103ca0:	55                   	push   %ebp
  103ca1:	89 e5                	mov    %esp,%ebp
  103ca3:	83 ec 18             	sub    $0x18,%esp
  103ca6:	8b 45 08             	mov    0x8(%ebp),%eax
  103ca9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct task* next = current_task->next;
  103cac:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103cb1:	8b 40 08             	mov    0x8(%eax),%eax
  103cb4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* prev = current_task->prev;
  103cb7:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103cbc:	8b 40 0c             	mov    0xc(%eax),%eax
  103cbf:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //TODO: free resources here

    if (current_task == first_task) {
  103cc2:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103cc7:	3b 05 34 a4 10 00    	cmp    0x10a434,%eax
  103ccd:	0f 85 0d 00 00 00    	jne    103ce0 <terminate_current+0x40>
        first_task = current_task->next;
  103cd3:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103cd8:	8b 40 08             	mov    0x8(%eax),%eax
  103cdb:	a3 34 a4 10 00       	mov    %eax,0x10a434
    }

    if (next != 0) {
  103ce0:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103ce7:	0f 84 09 00 00 00    	je     103cf6 <terminate_current+0x56>
        next->prev = prev;
  103ced:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103cf0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103cf3:	89 41 0c             	mov    %eax,0xc(%ecx)
    }

    if (prev != 0) {
  103cf6:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103cfd:	0f 84 09 00 00 00    	je     103d0c <terminate_current+0x6c>
        prev->next = next;
  103d03:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d06:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103d09:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    //TODO: handle if all tasks are closed

    if (next == 0)
  103d0c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103d13:	0f 85 08 00 00 00    	jne    103d21 <terminate_current+0x81>
        next = first_task;
  103d19:	a1 34 a4 10 00       	mov    0x10a434,%eax
  103d1e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task = next;
  103d21:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d24:	a3 38 a4 10 00       	mov    %eax,0x10a438

    if(current_task == 0) {
  103d29:	81 3d 38 a4 10 00 00 	cmpl   $0x0,0x10a438
  103d30:	00 00 00 
  103d33:	0f 85 05 00 00 00    	jne    103d3e <terminate_current+0x9e>
        //show_cod(cpu, "Last task terminated.");
    }
  103d39:	e9 00 00 00 00       	jmp    103d3e <terminate_current+0x9e>

    vmm_activate_pagedir(current_task->phys_pdir);
  103d3e:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103d43:	8b 40 14             	mov    0x14(%eax),%eax
  103d46:	89 04 24             	mov    %eax,(%esp)
  103d49:	e8 02 27 00 00       	call   106450 <vmm_activate_pagedir>
    return current_task->cpuState;
  103d4e:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103d53:	8b 40 04             	mov    0x4(%eax),%eax
  103d56:	83 c4 18             	add    $0x18,%esp
  103d59:	5d                   	pop    %ebp
  103d5a:	c3                   	ret    
  103d5b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103d60 <fork_task_state>:
}

void fork_task_state(struct task* new_task) {
  103d60:	55                   	push   %ebp
  103d61:	89 e5                	mov    %esp,%ebp
  103d63:	83 ec 18             	sub    $0x18,%esp
  103d66:	8b 45 08             	mov    0x8(%ebp),%eax
  103d69:	b9 38 00 00 00       	mov    $0x38,%ecx
  103d6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    new_task->user_stack_bottom = current_task->user_stack_bottom;
  103d71:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103d76:	8b 40 10             	mov    0x10(%eax),%eax
  103d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103d7c:	89 42 10             	mov    %eax,0x10(%edx)

    new_task->stdout = current_task->stdout;
  103d7f:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103d84:	8b 40 1c             	mov    0x1c(%eax),%eax
  103d87:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103d8a:	89 42 1c             	mov    %eax,0x1c(%edx)
    new_task->stdin  = current_task->stdin;
  103d8d:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103d92:	8b 40 24             	mov    0x24(%eax),%eax
  103d95:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103d98:	89 42 24             	mov    %eax,0x24(%edx)
    new_task->stderr = current_task->stderr;
  103d9b:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103da0:	8b 40 20             	mov    0x20(%eax),%eax
  103da3:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103da6:	89 42 20             	mov    %eax,0x20(%edx)

    memcpy(new_task->cpuState, current_task->cpuState, sizeof(struct cpu_state));
  103da9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103dac:	8b 40 04             	mov    0x4(%eax),%eax
  103daf:	8b 15 38 a4 10 00    	mov    0x10a438,%edx
  103db5:	8b 52 04             	mov    0x4(%edx),%edx
  103db8:	89 04 24             	mov    %eax,(%esp)
  103dbb:	89 54 24 04          	mov    %edx,0x4(%esp)
  103dbf:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103dc6:	00 
  103dc7:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103dca:	e8 b1 09 00 00       	call   104780 <memcpy>

    new_task->cpuState->eax = 0;
  103dcf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103dd2:	8b 40 04             	mov    0x4(%eax),%eax
  103dd5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
  103ddb:	83 c4 18             	add    $0x18,%esp
  103dde:	5d                   	pop    %ebp
  103ddf:	c3                   	ret    

00103de0 <init_task>:

struct task* init_task(uint32_t task_pagedir, void* entry) {
  103de0:	55                   	push   %ebp
  103de1:	89 e5                	mov    %esp,%ebp
  103de3:	83 ec 68             	sub    $0x68,%esp
  103de6:	8b 45 0c             	mov    0xc(%ebp),%eax
  103de9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103dec:	ba 2c 00 00 00       	mov    $0x2c,%edx
  103df1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103df4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* ntask = malloc(sizeof(struct task));
  103df7:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  103dfe:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  103e01:	e8 aa 02 00 00       	call   1040b0 <malloc>
  103e06:	b9 38 00 00 00       	mov    $0x38,%ecx
  103e0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ntask->cpuState = malloc(sizeof(struct cpu_state));
  103e0e:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  103e15:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  103e18:	e8 93 02 00 00       	call   1040b0 <malloc>
  103e1d:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  103e22:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103e25:	89 42 04             	mov    %eax,0x4(%edx)

    ntask->phys_pdir = task_pagedir;
  103e28:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103e2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103e2e:	89 42 14             	mov    %eax,0x14(%edx)
    ntask->user_stack_bottom = (void*) 0xFFFFE000;
  103e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e34:	89 48 10             	mov    %ecx,0x10(%eax)
    ntask->PID = nextPID++;
  103e37:	a1 e0 71 10 00       	mov    0x1071e0,%eax
  103e3c:	89 c1                	mov    %eax,%ecx
  103e3e:	81 c1 01 00 00 00    	add    $0x1,%ecx
  103e44:	89 0d e0 71 10 00    	mov    %ecx,0x1071e0
  103e4a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103e4d:	89 01                	mov    %eax,(%ecx)

    ntask->stdin  = 0;
  103e4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e52:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    ntask->stdout = 0;
  103e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e5c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    ntask->stderr = 0;
  103e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e66:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)

    ntask->next = (void*) 0;
  103e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e70:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    ntask->prev = (void*) 0;
  103e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e7a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    if (first_task == 0) {
  103e81:	81 3d 34 a4 10 00 00 	cmpl   $0x0,0x10a434
  103e88:	00 00 00 
  103e8b:	0f 85 0d 00 00 00    	jne    103e9e <init_task+0xbe>
        first_task = ntask;
  103e91:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103e94:	a3 34 a4 10 00       	mov    %eax,0x10a434
    } else {
  103e99:	e9 1f 00 00 00       	jmp    103ebd <init_task+0xdd>
        ntask->next = first_task;
  103e9e:	a1 34 a4 10 00       	mov    0x10a434,%eax
  103ea3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103ea6:	89 41 08             	mov    %eax,0x8(%ecx)
        first_task->prev = ntask;
  103ea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103eac:	8b 0d 34 a4 10 00    	mov    0x10a434,%ecx
  103eb2:	89 41 0c             	mov    %eax,0xc(%ecx)
        first_task = ntask;
  103eb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103eb8:	a3 34 a4 10 00       	mov    %eax,0x10a434
    }

    uint32_t rest_pdir = vmm_get_current_pagedir();
  103ebd:	e8 4e 1a 00 00       	call   105910 <vmm_get_current_pagedir>
  103ec2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    vmm_activate_pagedir(task_pagedir);
  103ec5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103ec8:	89 04 24             	mov    %eax,(%esp)
  103ecb:	e8 80 25 00 00       	call   106450 <vmm_activate_pagedir>

    if (entry != 0) { //entry == 0 means that this will be forked
  103ed0:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103ed7:	0f 84 21 00 00 00    	je     103efe <init_task+0x11e>
  103edd:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_alloc_addr(ntask->user_stack_bottom, 0);
  103ee2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103ee5:	8b 49 10             	mov    0x10(%ecx),%ecx
  103ee8:	89 0c 24             	mov    %ecx,(%esp)
  103eeb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103ef2:	00 
  103ef3:	89 45 ac             	mov    %eax,-0x54(%ebp)
  103ef6:	e8 55 24 00 00       	call   106350 <vmm_alloc_addr>
  103efb:	89 45 a8             	mov    %eax,-0x58(%ebp)
  103efe:	b8 38 00 00 00       	mov    $0x38,%eax
  103f03:	8d 4d b8             	lea    -0x48(%ebp),%ecx
    }

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  103f06:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  103f0d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  103f14:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  103f1b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  103f22:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  103f29:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  103f30:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  103f37:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  103f3e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  103f45:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103f48:	89 55 dc             	mov    %edx,-0x24(%ebp)
  103f4b:	c7 45 e0 1b 00 00 00 	movl   $0x1b,-0x20(%ebp)
  103f52:	c7 45 e4 00 02 00 00 	movl   $0x200,-0x1c(%ebp)
  103f59:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103f5c:	8b 52 10             	mov    0x10(%edx),%edx
  103f5f:	81 c2 00 10 00 00    	add    $0x1000,%edx
  103f65:	89 55 e8             	mov    %edx,-0x18(%ebp)
  103f68:	c7 45 ec 23 00 00 00 	movl   $0x23,-0x14(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(ntask->cpuState, &nstate, sizeof(struct cpu_state));
  103f6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103f72:	8b 52 04             	mov    0x4(%edx),%edx
  103f75:	89 14 24             	mov    %edx,(%esp)
  103f78:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103f7c:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103f83:	00 
  103f84:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  103f87:	e8 f4 07 00 00       	call   104780 <memcpy>

    vmm_activate_pagedir(rest_pdir);
  103f8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103f8f:	89 04 24             	mov    %eax,(%esp)
  103f92:	e8 b9 24 00 00       	call   106450 <vmm_activate_pagedir>

    return ntask;
  103f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103f9a:	83 c4 68             	add    $0x68,%esp
  103f9d:	5d                   	pop    %ebp
  103f9e:	c3                   	ret    
  103f9f:	90                   	nop

00103fa0 <save_cpu_state>:
}

void save_cpu_state(struct cpu_state* cpu) {
  103fa0:	55                   	push   %ebp
  103fa1:	89 e5                	mov    %esp,%ebp
  103fa3:	83 ec 18             	sub    $0x18,%esp
  103fa6:	8b 45 08             	mov    0x8(%ebp),%eax
  103fa9:	b9 38 00 00 00       	mov    $0x38,%ecx
  103fae:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memcpy(current_task->cpuState, cpu, sizeof(struct cpu_state));
  103fb1:	a1 38 a4 10 00       	mov    0x10a438,%eax
  103fb6:	8b 40 04             	mov    0x4(%eax),%eax
  103fb9:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103fbc:	89 04 24             	mov    %eax,(%esp)
  103fbf:	89 54 24 04          	mov    %edx,0x4(%esp)
  103fc3:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103fca:	00 
  103fcb:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103fce:	e8 ad 07 00 00       	call   104780 <memcpy>
}
  103fd3:	83 c4 18             	add    $0x18,%esp
  103fd6:	5d                   	pop    %ebp
  103fd7:	c3                   	ret    
  103fd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  103fdf:	00 

00103fe0 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu) {
  103fe0:	55                   	push   %ebp
  103fe1:	89 e5                	mov    %esp,%ebp
  103fe3:	83 ec 18             	sub    $0x18,%esp
  103fe6:	8b 45 08             	mov    0x8(%ebp),%eax
  103fe9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (first_task != 0 && schedulingEnabled) {
  103fec:	81 3d 34 a4 10 00 00 	cmpl   $0x0,0x10a434
  103ff3:	00 00 00 
  103ff6:	0f 84 9d 00 00 00    	je     104099 <schedule+0xb9>
  103ffc:	81 3d 30 a4 10 00 00 	cmpl   $0x0,0x10a430
  104003:	00 00 00 
  104006:	0f 84 8d 00 00 00    	je     104099 <schedule+0xb9>
        if (current_task == 0) {
  10400c:	81 3d 38 a4 10 00 00 	cmpl   $0x0,0x10a438
  104013:	00 00 00 
  104016:	0f 85 2a 00 00 00    	jne    104046 <schedule+0x66>
            current_task = first_task;
  10401c:	a1 34 a4 10 00       	mov    0x10a434,%eax
  104021:	a3 38 a4 10 00       	mov    %eax,0x10a438
            vmm_activate_pagedir(current_task->phys_pdir);
  104026:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10402b:	8b 40 14             	mov    0x14(%eax),%eax
  10402e:	89 04 24             	mov    %eax,(%esp)
  104031:	e8 1a 24 00 00       	call   106450 <vmm_activate_pagedir>
            return current_task->cpuState;
  104036:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10403b:	8b 40 04             	mov    0x4(%eax),%eax
  10403e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104041:	e9 59 00 00 00       	jmp    10409f <schedule+0xbf>
        }

        struct task* next = current_task->next;
  104046:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10404b:	8b 40 08             	mov    0x8(%eax),%eax
  10404e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (next == 0)
  104051:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104058:	0f 85 08 00 00 00    	jne    104066 <schedule+0x86>
            next = first_task;
  10405e:	a1 34 a4 10 00       	mov    0x10a434,%eax
  104063:	89 45 f4             	mov    %eax,-0xc(%ebp)

        save_cpu_state(cpu);
  104066:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104069:	89 04 24             	mov    %eax,(%esp)
  10406c:	e8 2f ff ff ff       	call   103fa0 <save_cpu_state>

        current_task = next;
  104071:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104074:	a3 38 a4 10 00       	mov    %eax,0x10a438
        vmm_activate_pagedir(current_task->phys_pdir);
  104079:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10407e:	8b 40 14             	mov    0x14(%eax),%eax
  104081:	89 04 24             	mov    %eax,(%esp)
  104084:	e8 c7 23 00 00       	call   106450 <vmm_activate_pagedir>
        return current_task->cpuState;
  104089:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10408e:	8b 40 04             	mov    0x4(%eax),%eax
  104091:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104094:	e9 06 00 00 00       	jmp    10409f <schedule+0xbf>
    }
    return cpu;
  104099:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10409c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10409f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1040a2:	83 c4 18             	add    $0x18,%esp
  1040a5:	5d                   	pop    %ebp
  1040a6:	c3                   	ret    
  1040a7:	66 90                	xchg   %ax,%ax
  1040a9:	66 90                	xchg   %ax,%ax
  1040ab:	66 90                	xchg   %ax,%ax
  1040ad:	66 90                	xchg   %ax,%ax
  1040af:	90                   	nop

001040b0 <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
  1040b0:	55                   	push   %ebp
  1040b1:	89 e5                	mov    %esp,%ebp
  1040b3:	83 ec 38             	sub    $0x38,%esp
  1040b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1040b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(size == 0) return 0;
  1040bc:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1040c3:	0f 85 0c 00 00 00    	jne    1040d5 <malloc+0x25>
  1040c9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1040d0:	e9 95 01 00 00       	jmp    10426a <malloc+0x1ba>

    struct memory_node* last = 0;
  1040d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = first_free;
  1040dc:	a1 44 a4 10 00       	mov    0x10a444,%eax
  1040e1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  1040e4:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1040eb:	0f 84 27 00 00 00    	je     104118 <malloc+0x68>
        if (cur->size >= size) {
  1040f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1040f4:	8b 00                	mov    (%eax),%eax
  1040f6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1040f9:	0f 82 05 00 00 00    	jb     104104 <malloc+0x54>
            break;
  1040ff:	e9 14 00 00 00       	jmp    104118 <malloc+0x68>
        }
        last = cur;
  104104:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104107:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  10410a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10410d:	8b 40 08             	mov    0x8(%eax),%eax
  104110:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  104113:	e9 cc ff ff ff       	jmp    1040e4 <malloc+0x34>

    if (cur == 0) {
  104118:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10411f:	0f 85 bc 00 00 00    	jne    1041e1 <malloc+0x131>
        uint32_t pgs = size / PAGESIZE;
  104125:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104128:	c1 e8 0c             	shr    $0xc,%eax
  10412b:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if ((size % PAGESIZE) != 0)
  10412e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104131:	25 ff 0f 00 00       	and    $0xfff,%eax
  104136:	3d 00 00 00 00       	cmp    $0x0,%eax
  10413b:	0f 84 0b 00 00 00    	je     10414c <malloc+0x9c>
            pgs++;
  104141:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104144:	05 01 00 00 00       	add    $0x1,%eax
  104149:	89 45 ec             	mov    %eax,-0x14(%ebp)

        void* addr = vmm_alloc_cont(pgs);
  10414c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10414f:	89 04 24             	mov    %eax,(%esp)
  104152:	e8 a9 21 00 00       	call   106300 <vmm_alloc_cont>
  104157:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
  10415a:	e8 81 04 00 00       	call   1045e0 <pop_unused_node>
  10415f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
  104162:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104165:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104168:	89 41 04             	mov    %eax,0x4(%ecx)
        fill->size = (uint32_t) size;
  10416b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10416e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104171:	89 01                	mov    %eax,(%ecx)

        if (pgs * PAGESIZE > size) {
  104173:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104176:	c1 e0 0c             	shl    $0xc,%eax
  104179:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  10417c:	0f 86 3c 00 00 00    	jbe    1041be <malloc+0x10e>
            struct memory_node* free = pop_unused_node();
  104182:	e8 59 04 00 00       	call   1045e0 <pop_unused_node>
  104187:	8d 0d 44 a4 10 00    	lea    0x10a444,%ecx
  10418d:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
  104190:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104193:	8b 40 04             	mov    0x4(%eax),%eax
  104196:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  104199:	03 02                	add    (%edx),%eax
  10419b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10419e:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = pgs * PAGESIZE - size;
  1041a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1041a4:	c1 e0 0c             	shl    $0xc,%eax
  1041a7:	2b 45 f8             	sub    -0x8(%ebp),%eax
  1041aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
  1041ad:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  1041af:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1041b2:	89 0c 24             	mov    %ecx,(%esp)
  1041b5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1041b9:	e8 c2 00 00 00       	call   104280 <append_to_list>
  1041be:	8d 05 40 a4 10 00    	lea    0x10a440,%eax
        }

        append_to_list(&first_used, fill);
  1041c4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1041c7:	89 04 24             	mov    %eax,(%esp)
  1041ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1041ce:	e8 ad 00 00 00       	call   104280 <append_to_list>

        return (void*) fill->address;
  1041d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1041d6:	8b 40 04             	mov    0x4(%eax),%eax
  1041d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1041dc:	e9 89 00 00 00       	jmp    10426a <malloc+0x1ba>
  1041e1:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
    } else {
        uint32_t freesize = cur->size - size;
  1041e7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1041ea:	8b 09                	mov    (%ecx),%ecx
  1041ec:	2b 4d f8             	sub    -0x8(%ebp),%ecx
  1041ef:	89 4d dc             	mov    %ecx,-0x24(%ebp)

        cur->size = size;
  1041f2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1041f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1041f8:	89 0a                	mov    %ecx,(%edx)

        remove_from_list(&first_free, cur);
  1041fa:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1041fd:	89 04 24             	mov    %eax,(%esp)
  104200:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104204:	e8 a7 00 00 00       	call   1042b0 <remove_from_list>
  104209:	8d 05 40 a4 10 00    	lea    0x10a440,%eax
        append_to_list(&first_used, cur);
  10420f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104212:	89 04 24             	mov    %eax,(%esp)
  104215:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104219:	e8 62 00 00 00       	call   104280 <append_to_list>

        if (freesize > 0) {
  10421e:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  104225:	0f 86 36 00 00 00    	jbe    104261 <malloc+0x1b1>
            struct memory_node* free = pop_unused_node();
  10422b:	e8 b0 03 00 00       	call   1045e0 <pop_unused_node>
  104230:	8d 0d 44 a4 10 00    	lea    0x10a444,%ecx
  104236:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
  104239:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10423c:	8b 40 04             	mov    0x4(%eax),%eax
  10423f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104242:	03 02                	add    (%edx),%eax
  104244:	8b 55 d8             	mov    -0x28(%ebp),%edx
  104247:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = freesize;
  10424a:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10424d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  104250:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  104252:	8b 45 d8             	mov    -0x28(%ebp),%eax
  104255:	89 0c 24             	mov    %ecx,(%esp)
  104258:	89 44 24 04          	mov    %eax,0x4(%esp)
  10425c:	e8 1f 00 00 00       	call   104280 <append_to_list>
        }

        return (void*) cur->address;
  104261:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104264:	8b 40 04             	mov    0x4(%eax),%eax
  104267:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  10426a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10426d:	83 c4 38             	add    $0x38,%esp
  104270:	5d                   	pop    %ebp
  104271:	c3                   	ret    
  104272:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104279:	1f 84 00 00 00 00 00 

00104280 <append_to_list>:
        cur = cur->next;
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
  104280:	55                   	push   %ebp
  104281:	89 e5                	mov    %esp,%ebp
  104283:	83 ec 08             	sub    $0x8,%esp
  104286:	8b 45 0c             	mov    0xc(%ebp),%eax
  104289:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10428c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10428f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    element->next = *root;
  104292:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104295:	8b 00                	mov    (%eax),%eax
  104297:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10429a:	89 41 08             	mov    %eax,0x8(%ecx)
    *root = element;
  10429d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1042a0:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1042a3:	89 01                	mov    %eax,(%ecx)
}
  1042a5:	83 c4 08             	add    $0x8,%esp
  1042a8:	5d                   	pop    %ebp
  1042a9:	c3                   	ret    
  1042aa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001042b0 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
  1042b0:	55                   	push   %ebp
  1042b1:	89 e5                	mov    %esp,%ebp
  1042b3:	83 ec 10             	sub    $0x10,%esp
  1042b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1042b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1042bc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1042bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct memory_node* last = 0;
  1042c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = *root;
  1042c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1042cc:	8b 00                	mov    (%eax),%eax
  1042ce:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  1042d1:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1042d8:	0f 84 4e 00 00 00    	je     10432c <remove_from_list+0x7c>
        if (cur == element) {
  1042de:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042e1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1042e4:	0f 85 2e 00 00 00    	jne    104318 <remove_from_list+0x68>
            if (last == 0) {
  1042ea:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1042f1:	0f 85 10 00 00 00    	jne    104307 <remove_from_list+0x57>
                *root = cur->next;
  1042f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042fa:	8b 40 08             	mov    0x8(%eax),%eax
  1042fd:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104300:	89 01                	mov    %eax,(%ecx)
                return;
  104302:	e9 25 00 00 00       	jmp    10432c <remove_from_list+0x7c>
            } else {
                last->next = cur->next;
  104307:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10430a:	8b 40 08             	mov    0x8(%eax),%eax
  10430d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104310:	89 41 08             	mov    %eax,0x8(%ecx)
                return;
  104313:	e9 14 00 00 00       	jmp    10432c <remove_from_list+0x7c>
            }
        }
        last = cur;
  104318:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10431b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  10431e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104321:	8b 40 08             	mov    0x8(%eax),%eax
  104324:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  104327:	e9 a5 ff ff ff       	jmp    1042d1 <remove_from_list+0x21>
}
  10432c:	83 c4 10             	add    $0x10,%esp
  10432f:	5d                   	pop    %ebp
  104330:	c3                   	ret    
  104331:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104338:	0f 1f 84 00 00 00 00 
  10433f:	00 

00104340 <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
  104340:	55                   	push   %ebp
  104341:	89 e5                	mov    %esp,%ebp
  104343:	83 ec 28             	sub    $0x28,%esp
  104346:	8b 45 0c             	mov    0xc(%ebp),%eax
  104349:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10434c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10434f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t gsize = num * size;
  104352:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104355:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  104359:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
  10435c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10435f:	89 04 24             	mov    %eax,(%esp)
  104362:	e8 49 fd ff ff       	call   1040b0 <malloc>
  104367:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
  10436a:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104371:	0f 84 22 00 00 00    	je     104399 <calloc+0x59>
  104377:	b8 00 00 00 00       	mov    $0x0,%eax
        memset(p, 0, gsize);
  10437c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10437f:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104382:	89 0c 24             	mov    %ecx,(%esp)
  104385:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10438c:	00 
  10438d:	89 54 24 08          	mov    %edx,0x8(%esp)
  104391:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104394:	e8 87 03 00 00       	call   104720 <memset>
    }

    return p;
  104399:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10439c:	83 c4 28             	add    $0x28,%esp
  10439f:	5d                   	pop    %ebp
  1043a0:	c3                   	ret    
  1043a1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1043a8:	0f 1f 84 00 00 00 00 
  1043af:	00 

001043b0 <realloc>:
}

void* realloc(void* ptr, size_t size) {
  1043b0:	55                   	push   %ebp
  1043b1:	89 e5                	mov    %esp,%ebp
  1043b3:	83 ec 28             	sub    $0x28,%esp
  1043b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1043b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1043bc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1043bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct memory_node* last = 0;
  1043c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
  1043c9:	a1 40 a4 10 00       	mov    0x10a440,%eax
  1043ce:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (cur != 0) {
  1043d1:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  1043d8:	0f 84 8e 00 00 00    	je     10446c <realloc+0xbc>
        if (cur->address == (uint32_t) ptr) {
  1043de:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1043e1:	8b 40 04             	mov    0x4(%eax),%eax
  1043e4:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1043e7:	39 c8                	cmp    %ecx,%eax
  1043e9:	0f 85 69 00 00 00    	jne    104458 <realloc+0xa8>
            if (size == 0) {
  1043ef:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1043f6:	0f 85 17 00 00 00    	jne    104413 <realloc+0x63>
                free(ptr);
  1043fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1043ff:	89 04 24             	mov    %eax,(%esp)
  104402:	e8 79 00 00 00       	call   104480 <free>
                return 0;
  104407:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10440e:	e9 60 00 00 00       	jmp    104473 <realloc+0xc3>
            } else {
                void* new = malloc(size);
  104413:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104416:	89 04 24             	mov    %eax,(%esp)
  104419:	e8 92 fc ff ff       	call   1040b0 <malloc>
  10441e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
  104421:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104424:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104427:	8b 49 04             	mov    0x4(%ecx),%ecx
  10442a:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10442d:	8b 12                	mov    (%edx),%edx
  10442f:	89 04 24             	mov    %eax,(%esp)
  104432:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104436:	89 54 24 08          	mov    %edx,0x8(%esp)
  10443a:	e8 41 03 00 00       	call   104780 <memcpy>
                free((void*) cur->address);
  10443f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104442:	8b 40 04             	mov    0x4(%eax),%eax
  104445:	89 04 24             	mov    %eax,(%esp)
  104448:	e8 33 00 00 00       	call   104480 <free>

                return new;
  10444d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104450:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104453:	e9 1b 00 00 00       	jmp    104473 <realloc+0xc3>
            }
        }
        last = cur;
  104458:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10445b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
  10445e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104461:	8b 40 08             	mov    0x8(%eax),%eax
  104464:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
  104467:	e9 65 ff ff ff       	jmp    1043d1 <realloc+0x21>
    return 0;
  10446c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104473:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104476:	83 c4 28             	add    $0x28,%esp
  104479:	5d                   	pop    %ebp
  10447a:	c3                   	ret    
  10447b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104480 <free>:

void free(void* ptr) {
  104480:	55                   	push   %ebp
  104481:	89 e5                	mov    %esp,%ebp
  104483:	83 ec 18             	sub    $0x18,%esp
  104486:	8b 45 08             	mov    0x8(%ebp),%eax
  104489:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* last = 0;
  10448c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
  104493:	a1 40 a4 10 00       	mov    0x10a440,%eax
  104498:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  10449b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1044a2:	0f 84 35 00 00 00    	je     1044dd <free+0x5d>
        if (cur->address == (uint32_t) ptr) {
  1044a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1044ab:	8b 40 04             	mov    0x4(%eax),%eax
  1044ae:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1044b1:	39 c8                	cmp    %ecx,%eax
  1044b3:	0f 85 10 00 00 00    	jne    1044c9 <free+0x49>
            merge_into_frees(cur);
  1044b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1044bc:	89 04 24             	mov    %eax,(%esp)
  1044bf:	e8 2c 00 00 00       	call   1044f0 <merge_into_frees>
            break;
  1044c4:	e9 14 00 00 00       	jmp    1044dd <free+0x5d>
        }
        last = cur;
  1044c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1044cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
  1044cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1044d2:	8b 40 08             	mov    0x8(%eax),%eax
  1044d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  1044d8:	e9 be ff ff ff       	jmp    10449b <free+0x1b>
}
  1044dd:	83 c4 18             	add    $0x18,%esp
  1044e0:	5d                   	pop    %ebp
  1044e1:	c3                   	ret    
  1044e2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1044e9:	1f 84 00 00 00 00 00 

001044f0 <merge_into_frees>:
    }

    return ret;
}

static void merge_into_frees(struct memory_node* tf) {
  1044f0:	55                   	push   %ebp
  1044f1:	89 e5                	mov    %esp,%ebp
  1044f3:	56                   	push   %esi
  1044f4:	83 ec 14             	sub    $0x14,%esp
  1044f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1044fa:	8d 0d 40 a4 10 00    	lea    0x10a440,%ecx
  104500:	89 45 f8             	mov    %eax,-0x8(%ebp)
    remove_from_list(&first_used, tf);
  104503:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104506:	89 0c 24             	mov    %ecx,(%esp)
  104509:	89 44 24 04          	mov    %eax,0x4(%esp)
  10450d:	e8 9e fd ff ff       	call   1042b0 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
  104512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    cur = first_free;
  104519:	a1 44 a4 10 00       	mov    0x10a444,%eax
  10451e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  104521:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104528:	0f 84 92 00 00 00    	je     1045c0 <merge_into_frees+0xd0>
        if (cur->address + cur->size == tf->address) {
  10452e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104531:	8b 40 04             	mov    0x4(%eax),%eax
  104534:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104537:	03 01                	add    (%ecx),%eax
  104539:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10453c:	3b 41 04             	cmp    0x4(%ecx),%eax
  10453f:	0f 85 26 00 00 00    	jne    10456b <merge_into_frees+0x7b>
  104545:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
            tf->address = cur->address;
  10454b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10454e:	8b 49 04             	mov    0x4(%ecx),%ecx
  104551:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104554:	89 4a 04             	mov    %ecx,0x4(%edx)
            remove_from_list(&first_free, cur);
  104557:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10455a:	89 04 24             	mov    %eax,(%esp)
  10455d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104561:	e8 4a fd ff ff       	call   1042b0 <remove_from_list>
            goto editedList;
  104566:	e9 a7 ff ff ff       	jmp    104512 <merge_into_frees+0x22>
        }

        if (cur->address == tf->address + tf->size) {
  10456b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10456e:	8b 40 04             	mov    0x4(%eax),%eax
  104571:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104574:	8b 49 04             	mov    0x4(%ecx),%ecx
  104577:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10457a:	03 0a                	add    (%edx),%ecx
  10457c:	39 c8                	cmp    %ecx,%eax
  10457e:	0f 85 28 00 00 00    	jne    1045ac <merge_into_frees+0xbc>
  104584:	8d 05 44 a4 10 00    	lea    0x10a444,%eax
            tf->size += cur->size;
  10458a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10458d:	8b 09                	mov    (%ecx),%ecx
  10458f:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104592:	8b 32                	mov    (%edx),%esi
  104594:	01 ce                	add    %ecx,%esi
  104596:	89 32                	mov    %esi,(%edx)
            remove_from_list(&first_free, cur);
  104598:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10459b:	89 04 24             	mov    %eax,(%esp)
  10459e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1045a2:	e8 09 fd ff ff       	call   1042b0 <remove_from_list>
            goto editedList;
  1045a7:	e9 66 ff ff ff       	jmp    104512 <merge_into_frees+0x22>
        }

        last = cur;
  1045ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1045af:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  1045b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1045b5:	8b 40 08             	mov    0x8(%eax),%eax
  1045b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  1045bb:	e9 61 ff ff ff       	jmp    104521 <merge_into_frees+0x31>
  1045c0:	8d 05 44 a4 10 00    	lea    0x10a444,%eax

    append_to_list(&first_free, tf);
  1045c6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1045c9:	89 04 24             	mov    %eax,(%esp)
  1045cc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1045d0:	e8 ab fc ff ff       	call   104280 <append_to_list>
}
  1045d5:	83 c4 14             	add    $0x14,%esp
  1045d8:	5e                   	pop    %esi
  1045d9:	5d                   	pop    %ebp
  1045da:	c3                   	ret    
  1045db:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001045e0 <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
  1045e0:	55                   	push   %ebp
  1045e1:	89 e5                	mov    %esp,%ebp
  1045e3:	83 ec 08             	sub    $0x8,%esp
  1045e6:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
    struct memory_node* ret = pop_from_list(&first_unused);
  1045ec:	89 04 24             	mov    %eax,(%esp)
  1045ef:	e8 3c 00 00 00       	call   104630 <pop_from_list>
  1045f4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (ret == 0) {
  1045f7:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  1045fe:	0f 85 1b 00 00 00    	jne    10461f <pop_unused_node+0x3f>
        allocate_unused_nodes();
  104604:	e8 77 00 00 00       	call   104680 <allocate_unused_nodes>
  104609:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
        ret = pop_from_list(&first_unused);
  10460f:	89 04 24             	mov    %eax,(%esp)
  104612:	e8 19 00 00 00       	call   104630 <pop_from_list>
  104617:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  10461a:	e9 d8 ff ff ff       	jmp    1045f7 <pop_unused_node+0x17>

    return ret;
  10461f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104622:	83 c4 08             	add    $0x8,%esp
  104625:	5d                   	pop    %ebp
  104626:	c3                   	ret    
  104627:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10462e:	00 00 

00104630 <pop_from_list>:
        struct memory_node* element) {
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
  104630:	55                   	push   %ebp
  104631:	89 e5                	mov    %esp,%ebp
  104633:	83 ec 18             	sub    $0x18,%esp
  104636:	8b 45 08             	mov    0x8(%ebp),%eax
  104639:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (*root == 0)
  10463c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10463f:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  104645:	0f 85 0c 00 00 00    	jne    104657 <pop_from_list+0x27>
        return 0;
  10464b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104652:	e9 20 00 00 00       	jmp    104677 <pop_from_list+0x47>
    struct memory_node* pop = *root;
  104657:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10465a:	8b 00                	mov    (%eax),%eax
  10465c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    remove_from_list(root, pop);
  10465f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104662:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104665:	89 04 24             	mov    %eax,(%esp)
  104668:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10466c:	e8 3f fc ff ff       	call   1042b0 <remove_from_list>
    return pop;
  104671:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104674:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104677:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10467a:	83 c4 18             	add    $0x18,%esp
  10467d:	5d                   	pop    %ebp
  10467e:	c3                   	ret    
  10467f:	90                   	nop

00104680 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  104680:	55                   	push   %ebp
  104681:	89 e5                	mov    %esp,%ebp
  104683:	83 ec 28             	sub    $0x28,%esp
  104686:	b8 01 00 00 00       	mov    $0x1,%eax
    struct memory_node* new_nodes = vmm_alloc_cont(1);
  10468b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104692:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104695:	e8 66 1c 00 00       	call   106300 <vmm_alloc_cont>
  10469a:	b9 00 00 00 00       	mov    $0x0,%ecx
  10469f:	ba 00 10 00 00       	mov    $0x1000,%edx
  1046a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memset(new_nodes, 0, PAGESIZE);
  1046a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1046aa:	89 04 24             	mov    %eax,(%esp)
  1046ad:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1046b4:	00 
  1046b5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  1046bc:	00 
  1046bd:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1046c0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1046c3:	e8 58 00 00 00       	call   104720 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  1046c8:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  1046cf:	81 7d f8 55 01 00 00 	cmpl   $0x155,-0x8(%ebp)
  1046d6:	0f 83 30 00 00 00    	jae    10470c <allocate_unused_nodes+0x8c>
  1046dc:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
        append_to_list(&first_unused, &(new_nodes[i]));
  1046e2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1046e5:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1046e8:	69 c9 0c 00 00 00    	imul   $0xc,%ecx,%ecx
  1046ee:	01 ca                	add    %ecx,%edx
  1046f0:	89 04 24             	mov    %eax,(%esp)
  1046f3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1046f7:	e8 84 fb ff ff       	call   104280 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  1046fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1046ff:	05 01 00 00 00       	add    $0x1,%eax
  104704:	89 45 f8             	mov    %eax,-0x8(%ebp)
  104707:	e9 c3 ff ff ff       	jmp    1046cf <allocate_unused_nodes+0x4f>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
  10470c:	83 c4 28             	add    $0x28,%esp
  10470f:	5d                   	pop    %ebp
  104710:	c3                   	ret    
  104711:	66 90                	xchg   %ax,%ax
  104713:	66 90                	xchg   %ax,%ax
  104715:	66 90                	xchg   %ax,%ax
  104717:	66 90                	xchg   %ax,%ax
  104719:	66 90                	xchg   %ax,%ax
  10471b:	66 90                	xchg   %ax,%ax
  10471d:	66 90                	xchg   %ax,%ax
  10471f:	90                   	nop

00104720 <memset>:
#include "vmm.h"
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
  104720:	55                   	push   %ebp
  104721:	89 e5                	mov    %esp,%ebp
  104723:	83 ec 10             	sub    $0x10,%esp
  104726:	8b 45 10             	mov    0x10(%ebp),%eax
  104729:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10472c:	8b 55 08             	mov    0x8(%ebp),%edx
  10472f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104732:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104735:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  104738:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10473b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  10473e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104741:	89 c1                	mov    %eax,%ecx
  104743:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  104749:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10474c:	3d 00 00 00 00       	cmp    $0x0,%eax
  104751:	0f 84 1a 00 00 00    	je     104771 <memset+0x51>
        *p++ = c;
  104757:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10475a:	88 c1                	mov    %al,%cl
  10475c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10475f:	89 c2                	mov    %eax,%edx
  104761:	81 c2 01 00 00 00    	add    $0x1,%edx
  104767:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10476a:	88 08                	mov    %cl,(%eax)
    }
  10476c:	e9 cd ff ff ff       	jmp    10473e <memset+0x1e>

    return buf;
  104771:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104774:	83 c4 10             	add    $0x10,%esp
  104777:	5d                   	pop    %ebp
  104778:	c3                   	ret    
  104779:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00104780 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n) {
  104780:	55                   	push   %ebp
  104781:	89 e5                	mov    %esp,%ebp
  104783:	83 ec 14             	sub    $0x14,%esp
  104786:	8b 45 10             	mov    0x10(%ebp),%eax
  104789:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10478c:	8b 55 08             	mov    0x8(%ebp),%edx
  10478f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104792:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104795:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  104798:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10479b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  10479e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1047a1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  1047a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1047a7:	89 c1                	mov    %eax,%ecx
  1047a9:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1047af:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1047b2:	3d 00 00 00 00       	cmp    $0x0,%eax
  1047b7:	0f 84 25 00 00 00    	je     1047e2 <memcpy+0x62>
        *(d++) = *(s++);
  1047bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1047c0:	89 c1                	mov    %eax,%ecx
  1047c2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1047c8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1047cb:	8a 10                	mov    (%eax),%dl
  1047cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1047d0:	89 c1                	mov    %eax,%ecx
  1047d2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1047d8:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1047db:	88 10                	mov    %dl,(%eax)
    }
  1047dd:	e9 c2 ff ff ff       	jmp    1047a4 <memcpy+0x24>

    return dest;
  1047e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1047e5:	83 c4 14             	add    $0x14,%esp
  1047e8:	5d                   	pop    %ebp
  1047e9:	c3                   	ret    
  1047ea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001047f0 <memcmp>:
}

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
  1047f0:	55                   	push   %ebp
  1047f1:	89 e5                	mov    %esp,%ebp
  1047f3:	83 ec 1c             	sub    $0x1c,%esp
  1047f6:	8b 45 10             	mov    0x10(%ebp),%eax
  1047f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1047fc:	8b 55 08             	mov    0x8(%ebp),%edx
  1047ff:	89 55 f8             	mov    %edx,-0x8(%ebp)
  104802:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104805:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (ptr1 == 0)
  104808:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10480f:	0f 85 0c 00 00 00    	jne    104821 <memcmp+0x31>
        return -1;
  104815:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  10481c:	e9 a7 00 00 00       	jmp    1048c8 <memcmp+0xd8>
    if (ptr2 == 0)
  104821:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104828:	0f 85 0c 00 00 00    	jne    10483a <memcmp+0x4a>
        return 1;
  10482e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  104835:	e9 8e 00 00 00       	jmp    1048c8 <memcmp+0xd8>
    if (num == 0)
  10483a:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104841:	0f 85 0c 00 00 00    	jne    104853 <memcmp+0x63>
        return 0;
  104847:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10484e:	e9 75 00 00 00       	jmp    1048c8 <memcmp+0xd8>

    const uint8_t* pa = ptr1;
  104853:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104856:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const uint8_t* pb = ptr2;
  104859:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10485c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (uint32_t i = 0; i < num; i++) {
  10485f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  104866:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104869:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10486c:	0f 83 4f 00 00 00    	jae    1048c1 <memcmp+0xd1>
        if (pa[i] != pb[i]) {
  104872:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104875:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104878:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  10487c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10487f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104882:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  104886:	39 c8                	cmp    %ecx,%eax
  104888:	0f 84 1e 00 00 00    	je     1048ac <memcmp+0xbc>
            return pa[i] - pb[i];
  10488e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104891:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104894:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  104898:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10489b:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10489e:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  1048a2:	29 c8                	sub    %ecx,%eax
  1048a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1048a7:	e9 1c 00 00 00       	jmp    1048c8 <memcmp+0xd8>
        }
    }
  1048ac:	e9 00 00 00 00       	jmp    1048b1 <memcmp+0xc1>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
  1048b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1048b4:	05 01 00 00 00       	add    $0x1,%eax
  1048b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1048bc:	e9 a5 ff ff ff       	jmp    104866 <memcmp+0x76>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
  1048c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1048c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1048cb:	83 c4 1c             	add    $0x1c,%esp
  1048ce:	5d                   	pop    %ebp
  1048cf:	c3                   	ret    

001048d0 <strcmp>:

int strcmp(const char* str1, const char* str2) {
  1048d0:	55                   	push   %ebp
  1048d1:	89 e5                	mov    %esp,%ebp
  1048d3:	56                   	push   %esi
  1048d4:	83 ec 24             	sub    $0x24,%esp
  1048d7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1048da:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1048dd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1048e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l1 = strlen(str1);
  1048e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1048e6:	89 e1                	mov    %esp,%ecx
  1048e8:	89 01                	mov    %eax,(%ecx)
  1048ea:	e8 61 00 00 00       	call   104950 <strlen>
  1048ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int l2 = strlen(str2);
  1048f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1048f5:	89 e1                	mov    %esp,%ecx
  1048f7:	89 01                	mov    %eax,(%ecx)
  1048f9:	e8 52 00 00 00       	call   104950 <strlen>
  1048fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
    l1 = l1 < l2 ? l1 : l2;
  104901:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104904:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104907:	0f 8d 0b 00 00 00    	jge    104918 <strcmp+0x48>
  10490d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104910:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104913:	e9 06 00 00 00       	jmp    10491e <strcmp+0x4e>
  104918:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10491b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10491e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104921:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return memcmp(str1, str2, l1 * sizeof(char));
  104924:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104927:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10492a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10492d:	c1 e2 00             	shl    $0x0,%edx
  104930:	89 e6                	mov    %esp,%esi
  104932:	89 56 08             	mov    %edx,0x8(%esi)
  104935:	89 4e 04             	mov    %ecx,0x4(%esi)
  104938:	89 06                	mov    %eax,(%esi)
  10493a:	e8 b1 fe ff ff       	call   1047f0 <memcmp>
  10493f:	83 c4 24             	add    $0x24,%esp
  104942:	5e                   	pop    %esi
  104943:	5d                   	pop    %ebp
  104944:	c3                   	ret    
  104945:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10494c:	00 00 00 00 

00104950 <strlen>:
}

unsigned int strlen(const char* str) {
  104950:	55                   	push   %ebp
  104951:	89 e5                	mov    %esp,%ebp
  104953:	83 ec 0c             	sub    $0xc,%esp
  104956:	8b 45 08             	mov    0x8(%ebp),%eax
  104959:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (str == 0)
  10495c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104963:	0f 85 0c 00 00 00    	jne    104975 <strlen+0x25>
        return 0;
  104969:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104970:	e9 37 00 00 00       	jmp    1049ac <strlen+0x5c>
    int i;
    for (i = 0; str[i] != '\0'; i++)
  104975:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10497c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10497f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104982:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  104986:	3d 00 00 00 00       	cmp    $0x0,%eax
  10498b:	0f 84 15 00 00 00    	je     1049a6 <strlen+0x56>
  104991:	e9 00 00 00 00       	jmp    104996 <strlen+0x46>
  104996:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104999:	05 01 00 00 00       	add    $0x1,%eax
  10499e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1049a1:	e9 d6 ff ff ff       	jmp    10497c <strlen+0x2c>
        ;
    return i;
  1049a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1049a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1049ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1049af:	83 c4 0c             	add    $0xc,%esp
  1049b2:	5d                   	pop    %ebp
  1049b3:	c3                   	ret    
  1049b4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1049bb:	00 00 00 00 00 

001049c0 <strcpy>:

char* strcpy(char* dest, const char* src) {
  1049c0:	55                   	push   %ebp
  1049c1:	89 e5                	mov    %esp,%ebp
  1049c3:	56                   	push   %esi
  1049c4:	83 ec 24             	sub    $0x24,%esp
  1049c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1049ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1049cd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1049d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
  1049d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1049d6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1049d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1049dc:	89 e6                	mov    %esp,%esi
  1049de:	89 16                	mov    %edx,(%esi)
  1049e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1049e3:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1049e6:	e8 65 ff ff ff       	call   104950 <strlen>
  1049eb:	c1 e0 00             	shl    $0x0,%eax
  1049ee:	05 01 00 00 00       	add    $0x1,%eax
  1049f3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1049f6:	89 0c 24             	mov    %ecx,(%esp)
  1049f9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1049fc:	89 54 24 04          	mov    %edx,0x4(%esp)
  104a00:	89 44 24 08          	mov    %eax,0x8(%esp)
  104a04:	e8 77 fd ff ff       	call   104780 <memcpy>
    return dest;
  104a09:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104a0c:	83 c4 24             	add    $0x24,%esp
  104a0f:	5e                   	pop    %esi
  104a10:	5d                   	pop    %ebp
  104a11:	c3                   	ret    
  104a12:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104a19:	1f 84 00 00 00 00 00 

00104a20 <strclone>:
}

char* strclone(char* str) {
  104a20:	55                   	push   %ebp
  104a21:	89 e5                	mov    %esp,%ebp
  104a23:	83 ec 18             	sub    $0x18,%esp
  104a26:	8b 45 08             	mov    0x8(%ebp),%eax
  104a29:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
  104a2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104a2f:	89 e1                	mov    %esp,%ecx
  104a31:	89 01                	mov    %eax,(%ecx)
  104a33:	e8 18 ff ff ff       	call   104950 <strlen>
  104a38:	c1 e0 00             	shl    $0x0,%eax
  104a3b:	05 01 00 00 00       	add    $0x1,%eax
  104a40:	89 04 24             	mov    %eax,(%esp)
  104a43:	e8 68 f6 ff ff       	call   1040b0 <malloc>
  104a48:	89 45 f8             	mov    %eax,-0x8(%ebp)
    strcpy(ret, str);
  104a4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104a4e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104a51:	89 e2                	mov    %esp,%edx
  104a53:	89 4a 04             	mov    %ecx,0x4(%edx)
  104a56:	89 02                	mov    %eax,(%edx)
  104a58:	e8 63 ff ff ff       	call   1049c0 <strcpy>

    return ret;
  104a5d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104a60:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104a63:	89 c8                	mov    %ecx,%eax
  104a65:	83 c4 18             	add    $0x18,%esp
  104a68:	5d                   	pop    %ebp
  104a69:	c3                   	ret    
  104a6a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104a70 <strtok>:
}

char* sp = NULL; /* the start position of the string */

char* strtok(char* str, const char* delimiters) {
  104a70:	55                   	push   %ebp
  104a71:	89 e5                	mov    %esp,%ebp
  104a73:	83 ec 18             	sub    $0x18,%esp
  104a76:	8b 45 0c             	mov    0xc(%ebp),%eax
  104a79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104a7c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(str != 0) {
  104a82:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104a89:	0f 84 22 00 00 00    	je     104ab1 <strtok+0x41>
        return strtoknc(strclone(str), delimiters);
  104a8f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104a92:	89 04 24             	mov    %eax,(%esp)
  104a95:	e8 86 ff ff ff       	call   104a20 <strclone>
  104a9a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104a9d:	89 04 24             	mov    %eax,(%esp)
  104aa0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104aa4:	e8 37 00 00 00       	call   104ae0 <strtoknc>
  104aa9:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104aac:	e9 1e 00 00 00       	jmp    104acf <strtok+0x5f>
  104ab1:	b8 00 00 00 00       	mov    $0x0,%eax
    }
    return strtoknc(0, delimiters);
  104ab6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104ab9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104ac0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104ac4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104ac7:	e8 14 00 00 00       	call   104ae0 <strtoknc>
  104acc:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104acf:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104ad2:	83 c4 18             	add    $0x18,%esp
  104ad5:	5d                   	pop    %ebp
  104ad6:	c3                   	ret    
  104ad7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  104ade:	00 00 

00104ae0 <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
  104ae0:	55                   	push   %ebp
  104ae1:	89 e5                	mov    %esp,%ebp
  104ae3:	83 ec 28             	sub    $0x28,%esp
  104ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
  104ae9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104aec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104aef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i = 0;
  104af2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int len = strlen(delimiters);
  104af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104afc:	89 e1                	mov    %esp,%ecx
  104afe:	89 01                	mov    %eax,(%ecx)
  104b00:	e8 4b fe ff ff       	call   104950 <strlen>
  104b05:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* check in the delimiters */
    if (len == 0)
  104b08:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  104b0f:	0f 85 0c 00 00 00    	jne    104b21 <strtoknc+0x41>
        return 0;
  104b15:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104b1c:	e9 80 01 00 00       	jmp    104ca1 <strtoknc+0x1c1>

    /* if the original string has nothing left */
    if (!str && !sp)
  104b21:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104b28:	0f 85 1c 00 00 00    	jne    104b4a <strtoknc+0x6a>
  104b2e:	81 3d 48 a4 10 00 00 	cmpl   $0x0,0x10a448
  104b35:	00 00 00 
  104b38:	0f 85 0c 00 00 00    	jne    104b4a <strtoknc+0x6a>
        return 0;
  104b3e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104b45:	e9 57 01 00 00       	jmp    104ca1 <strtoknc+0x1c1>

    /* initialize the sp during the first call */
    if (str && !sp)
  104b4a:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104b51:	0f 84 18 00 00 00    	je     104b6f <strtoknc+0x8f>
  104b57:	81 3d 48 a4 10 00 00 	cmpl   $0x0,0x10a448
  104b5e:	00 00 00 
  104b61:	0f 85 08 00 00 00    	jne    104b6f <strtoknc+0x8f>
        sp = str;
  104b67:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104b6a:	a3 48 a4 10 00       	mov    %eax,0x10a448

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
  104b6f:	a1 48 a4 10 00       	mov    0x10a448,%eax
  104b74:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
  104b77:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  104b7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104b81:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104b84:	0f 8d 3d 00 00 00    	jge    104bc7 <strtoknc+0xe7>
            if (*p_start == delimiters[i]) {
  104b8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104b8d:	0f be 00             	movsbl (%eax),%eax
  104b90:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104b93:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104b96:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  104b9a:	39 c8                	cmp    %ecx,%eax
  104b9c:	0f 85 10 00 00 00    	jne    104bb2 <strtoknc+0xd2>
                p_start++;
  104ba2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104ba5:	05 01 00 00 00       	add    $0x1,%eax
  104baa:	89 45 e8             	mov    %eax,-0x18(%ebp)
                break;
  104bad:	e9 15 00 00 00       	jmp    104bc7 <strtoknc+0xe7>
            }
        }
  104bb2:	e9 00 00 00 00       	jmp    104bb7 <strtoknc+0xd7>
        sp = str;

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
  104bb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104bba:	05 01 00 00 00       	add    $0x1,%eax
  104bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104bc2:	e9 b7 ff ff ff       	jmp    104b7e <strtoknc+0x9e>
                p_start++;
                break;
            }
        }

        if (i == len) {
  104bc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104bca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104bcd:	0f 85 0d 00 00 00    	jne    104be0 <strtoknc+0x100>
            sp = p_start;
  104bd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104bd6:	a3 48 a4 10 00       	mov    %eax,0x10a448
            break;
  104bdb:	e9 05 00 00 00       	jmp    104be5 <strtoknc+0x105>
        }
    }
  104be0:	e9 92 ff ff ff       	jmp    104b77 <strtoknc+0x97>

    /* return NULL if nothing left */
    if (*sp == '\0') {
  104be5:	a1 48 a4 10 00       	mov    0x10a448,%eax
  104bea:	0f be 00             	movsbl (%eax),%eax
  104bed:	3d 00 00 00 00       	cmp    $0x0,%eax
  104bf2:	0f 85 17 00 00 00    	jne    104c0f <strtoknc+0x12f>
        sp = NULL;
  104bf8:	c7 05 48 a4 10 00 00 	movl   $0x0,0x10a448
  104bff:	00 00 00 
        return sp;
  104c02:	a1 48 a4 10 00       	mov    0x10a448,%eax
  104c07:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104c0a:	e9 92 00 00 00       	jmp    104ca1 <strtoknc+0x1c1>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  104c0f:	e9 00 00 00 00       	jmp    104c14 <strtoknc+0x134>
  104c14:	a1 48 a4 10 00       	mov    0x10a448,%eax
  104c19:	0f be 00             	movsbl (%eax),%eax
  104c1c:	3d 00 00 00 00       	cmp    $0x0,%eax
  104c21:	0f 84 74 00 00 00    	je     104c9b <strtoknc+0x1bb>
        for (i = 0; i < len; i++) {
  104c27:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  104c2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c31:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104c34:	0f 8d 3c 00 00 00    	jge    104c76 <strtoknc+0x196>
            if (*sp == delimiters[i]) {
  104c3a:	a1 48 a4 10 00       	mov    0x10a448,%eax
  104c3f:	0f be 00             	movsbl (%eax),%eax
  104c42:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104c45:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104c48:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  104c4c:	39 c8                	cmp    %ecx,%eax
  104c4e:	0f 85 0d 00 00 00    	jne    104c61 <strtoknc+0x181>
                *sp = '\0';
  104c54:	a1 48 a4 10 00       	mov    0x10a448,%eax
  104c59:	c6 00 00             	movb   $0x0,(%eax)
                break;
  104c5c:	e9 15 00 00 00       	jmp    104c76 <strtoknc+0x196>
            }
        }
  104c61:	e9 00 00 00 00       	jmp    104c66 <strtoknc+0x186>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
  104c66:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c69:	05 01 00 00 00       	add    $0x1,%eax
  104c6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104c71:	e9 b8 ff ff ff       	jmp    104c2e <strtoknc+0x14e>
                *sp = '\0';
                break;
            }
        }

        sp++;
  104c76:	a1 48 a4 10 00       	mov    0x10a448,%eax
  104c7b:	05 01 00 00 00       	add    $0x1,%eax
  104c80:	a3 48 a4 10 00       	mov    %eax,0x10a448
        if (i < len)
  104c85:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c88:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104c8b:	0f 8d 05 00 00 00    	jge    104c96 <strtoknc+0x1b6>
            break;
  104c91:	e9 05 00 00 00       	jmp    104c9b <strtoknc+0x1bb>
    }
  104c96:	e9 79 ff ff ff       	jmp    104c14 <strtoknc+0x134>

    return p_start;
  104c9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104c9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104ca1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104ca4:	83 c4 28             	add    $0x28,%esp
  104ca7:	5d                   	pop    %ebp
  104ca8:	c3                   	ret    
  104ca9:	66 90                	xchg   %ax,%ax
  104cab:	66 90                	xchg   %ax,%ax
  104cad:	66 90                	xchg   %ax,%ax
  104caf:	90                   	nop

00104cb0 <vfs_create_dir>:
    }

    return child;
}

uint32_t vfs_create_dir(char* path) {
  104cb0:	55                   	push   %ebp
  104cb1:	89 e5                	mov    %esp,%ebp
  104cb3:	83 ec 08             	sub    $0x8,%esp
  104cb6:	8b 45 08             	mov    0x8(%ebp),%eax
  104cb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return vfs_create_path(path);
  104cbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104cbf:	89 04 24             	mov    %eax,(%esp)
  104cc2:	e8 09 00 00 00       	call   104cd0 <vfs_create_path>
  104cc7:	83 c4 08             	add    $0x8,%esp
  104cca:	5d                   	pop    %ebp
  104ccb:	c3                   	ret    
  104ccc:	0f 1f 40 00          	nopl   0x0(%eax)

00104cd0 <vfs_create_path>:
    }

    return 1;
}

static int vfs_create_path(char* path) {
  104cd0:	55                   	push   %ebp
  104cd1:	89 e5                	mov    %esp,%ebp
  104cd3:	83 ec 38             	sub    $0x38,%esp
  104cd6:	8b 45 08             	mov    0x8(%ebp),%eax
  104cd9:	8d 0d e8 85 10 00    	lea    0x1085e8,%ecx
  104cdf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = root;
  104ce2:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  104ce7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  104cea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    int created = 0;
  104cf1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    sub = strtok(path, "/");
  104cf8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104cfb:	89 04 24             	mov    %eax,(%esp)
  104cfe:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104d02:	e8 69 fd ff ff       	call   104a70 <strtok>
  104d07:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  104d0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104d0d:	0f be 00             	movsbl (%eax),%eax
  104d10:	3d 00 00 00 00       	cmp    $0x0,%eax
  104d15:	0f 85 21 00 00 00    	jne    104d3c <vfs_create_path+0x6c>
  104d1b:	b8 00 00 00 00       	mov    $0x0,%eax
  104d20:	8d 0d e8 85 10 00    	lea    0x1085e8,%ecx
  104d26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104d2d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104d31:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104d34:	e8 37 fd ff ff       	call   104a70 <strtok>
  104d39:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  104d3c:	e9 00 00 00 00       	jmp    104d41 <vfs_create_path+0x71>
  104d41:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104d48:	0f 84 e8 00 00 00    	je     104e36 <vfs_create_path+0x166>
    {
        child = vfs_find_node(parent, sub);
  104d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d51:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104d54:	89 04 24             	mov    %eax,(%esp)
  104d57:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104d5b:	e8 90 0a 00 00       	call   1057f0 <vfs_find_node>
  104d60:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if(child == 0) {
  104d63:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104d6a:	0f 85 9a 00 00 00    	jne    104e0a <vfs_create_path+0x13a>
  104d70:	b8 10 01 00 00       	mov    $0x110,%eax
            child = malloc(sizeof(struct res_node));
  104d75:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  104d7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  104d7f:	e8 2c f3 ff ff       	call   1040b0 <malloc>
  104d84:	89 45 f0             	mov    %eax,-0x10(%ebp)

            strcpy(child->name, sub);
  104d87:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104d8a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104d8d:	89 e2                	mov    %esp,%edx
  104d8f:	89 4a 04             	mov    %ecx,0x4(%edx)
  104d92:	89 02                	mov    %eax,(%edx)
  104d94:	e8 27 fc ff ff       	call   1049c0 <strcpy>
            child->res_type = RES_SUBDIR;
  104d99:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104d9c:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  104da3:	00 00 00 
            child->res_ptr = 0;
  104da6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104da9:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  104db0:	00 00 00 

            created++;
  104db3:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104db6:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104dbc:	89 4d ec             	mov    %ecx,-0x14(%ebp)

            if(vfs_insert_node(parent, child)) {
  104dbf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104dc2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104dc5:	89 0c 24             	mov    %ecx,(%esp)
  104dc8:	89 54 24 04          	mov    %edx,0x4(%esp)
  104dcc:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104dcf:	e8 ac 0a 00 00       	call   105880 <vfs_insert_node>
  104dd4:	3d 00 00 00 00       	cmp    $0x0,%eax
  104dd9:	0f 84 26 00 00 00    	je     104e05 <vfs_create_path+0x135>
  104ddf:	b8 38 00 00 00       	mov    $0x38,%eax
                show_cod(malloc(sizeof(struct cpu_state)), "Tried to insert VFS node in non RES_SUBDIR parent");
  104de4:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  104deb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  104dee:	e8 bd f2 ff ff       	call   1040b0 <malloc>
  104df3:	8d 0d ea 85 10 00    	lea    0x1085ea,%ecx
  104df9:	89 04 24             	mov    %eax,(%esp)
  104dfc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104e00:	e8 7b b5 ff ff       	call   100380 <show_cod>
            }
        }
  104e05:	e9 00 00 00 00       	jmp    104e0a <vfs_create_path+0x13a>
  104e0a:	b8 00 00 00 00       	mov    $0x0,%eax
  104e0f:	8d 0d e8 85 10 00    	lea    0x1085e8,%ecx

        parent = child;
  104e15:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104e18:	89 55 f4             	mov    %edx,-0xc(%ebp)

        sub = strtok(0, "/");
  104e1b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104e22:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104e26:	89 45 d8             	mov    %eax,-0x28(%ebp)
  104e29:	e8 42 fc ff ff       	call   104a70 <strtok>
  104e2e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  104e31:	e9 0b ff ff ff       	jmp    104d41 <vfs_create_path+0x71>

    return created;
  104e36:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104e39:	83 c4 38             	add    $0x38,%esp
  104e3c:	5d                   	pop    %ebp
  104e3d:	c3                   	ret    
  104e3e:	66 90                	xchg   %ax,%ax

00104e40 <vfs_create_kfile>:

uint32_t vfs_create_dir(char* path) {
    return vfs_create_path(path);
}

uint32_t vfs_create_kfile(char* path, struct kfs_driver* driver, uint32_t* params) {
  104e40:	55                   	push   %ebp
  104e41:	89 e5                	mov    %esp,%ebp
  104e43:	83 ec 28             	sub    $0x28,%esp
  104e46:	8b 45 10             	mov    0x10(%ebp),%eax
  104e49:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104e4c:	8b 55 08             	mov    0x8(%ebp),%edx
  104e4f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104e52:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104e55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* pathc = malloc(strlen(path) + 1);
  104e58:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104e5b:	89 e1                	mov    %esp,%ecx
  104e5d:	89 01                	mov    %eax,(%ecx)
  104e5f:	e8 ec fa ff ff       	call   104950 <strlen>
  104e64:	05 01 00 00 00       	add    $0x1,%eax
  104e69:	89 04 24             	mov    %eax,(%esp)
  104e6c:	e8 3f f2 ff ff       	call   1040b0 <malloc>
  104e71:	89 45 f0             	mov    %eax,-0x10(%ebp)
    strcpy(pathc, path);
  104e74:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104e77:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104e7a:	89 e2                	mov    %esp,%edx
  104e7c:	89 4a 04             	mov    %ecx,0x4(%edx)
  104e7f:	89 02                	mov    %eax,(%edx)
  104e81:	e8 3a fb ff ff       	call   1049c0 <strcpy>

    uint32_t ret = vfs_create_path(pathc);
  104e86:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104e89:	89 0c 24             	mov    %ecx,(%esp)
  104e8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104e8f:	e8 3c fe ff ff       	call   104cd0 <vfs_create_path>
  104e94:	89 45 ec             	mov    %eax,-0x14(%ebp)

    static struct res_node* node;
    node = vfs_get_node(path);
  104e97:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104e9a:	89 04 24             	mov    %eax,(%esp)
  104e9d:	e8 4e 00 00 00       	call   104ef0 <vfs_get_node>
  104ea2:	a3 58 a4 10 00       	mov    %eax,0x10a458

    node->res_type = RES_KERNDRV;
  104ea7:	a1 58 a4 10 00       	mov    0x10a458,%eax
  104eac:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  104eb3:	00 00 00 
    node->res_ptr = driver->create(params);
  104eb6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104eb9:	8b 40 14             	mov    0x14(%eax),%eax
  104ebc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104ebf:	89 0c 24             	mov    %ecx,(%esp)
  104ec2:	ff d0                	call   *%eax
  104ec4:	8b 0d 58 a4 10 00    	mov    0x10a458,%ecx
  104eca:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)
    ((struct res_kfile*) node->res_ptr)->driver = driver;
  104ed0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ed3:	8b 0d 58 a4 10 00    	mov    0x10a458,%ecx
  104ed9:	8b 89 04 01 00 00    	mov    0x104(%ecx),%ecx
  104edf:	89 41 04             	mov    %eax,0x4(%ecx)

    return ret;
  104ee2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104ee5:	83 c4 28             	add    $0x28,%esp
  104ee8:	5d                   	pop    %ebp
  104ee9:	c3                   	ret    
  104eea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104ef0 <vfs_get_node>:
    }

    return created;
}

static struct res_node* vfs_get_node(char* path) {
  104ef0:	55                   	push   %ebp
  104ef1:	89 e5                	mov    %esp,%ebp
  104ef3:	83 ec 28             	sub    $0x28,%esp
  104ef6:	8b 45 08             	mov    0x8(%ebp),%eax
  104ef9:	8d 0d e8 85 10 00    	lea    0x1085e8,%ecx
  104eff:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = root;
  104f02:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  104f07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  104f0a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    sub = strtok(path, "/");
  104f11:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104f14:	89 04 24             	mov    %eax,(%esp)
  104f17:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104f1b:	e8 50 fb ff ff       	call   104a70 <strtok>
  104f20:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  104f23:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f26:	0f be 00             	movsbl (%eax),%eax
  104f29:	3d 00 00 00 00       	cmp    $0x0,%eax
  104f2e:	0f 85 21 00 00 00    	jne    104f55 <vfs_get_node+0x65>
  104f34:	b8 00 00 00 00       	mov    $0x0,%eax
  104f39:	8d 0d e8 85 10 00    	lea    0x1085e8,%ecx
  104f3f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104f46:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104f4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104f4d:	e8 1e fb ff ff       	call   104a70 <strtok>
  104f52:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  104f55:	e9 00 00 00 00       	jmp    104f5a <vfs_get_node+0x6a>
  104f5a:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104f61:	0f 84 41 00 00 00    	je     104fa8 <vfs_get_node+0xb8>
    {
        child = vfs_find_node(parent, sub);
  104f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104f6a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104f6d:	89 04 24             	mov    %eax,(%esp)
  104f70:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104f74:	e8 77 08 00 00       	call   1057f0 <vfs_find_node>
  104f79:	b9 00 00 00 00       	mov    $0x0,%ecx
  104f7e:	8d 15 e8 85 10 00    	lea    0x1085e8,%edx
  104f84:	89 45 f0             	mov    %eax,-0x10(%ebp)
        parent = child;
  104f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104f8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        sub = strtok(0, "/");
  104f8d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104f94:	89 54 24 04          	mov    %edx,0x4(%esp)
  104f98:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  104f9b:	e8 d0 fa ff ff       	call   104a70 <strtok>
  104fa0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  104fa3:	e9 b2 ff ff ff       	jmp    104f5a <vfs_get_node+0x6a>

    return child;
  104fa8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104fab:	83 c4 28             	add    $0x28,%esp
  104fae:	5d                   	pop    %ebp
  104faf:	c3                   	ret    

00104fb0 <vfs_open>:
    ((struct res_kfile*) node->res_ptr)->driver = driver;

    return ret;
}

struct res_handle* vfs_open(char* path, uint32_t filemode) {
  104fb0:	55                   	push   %ebp
  104fb1:	89 e5                	mov    %esp,%ebp
  104fb3:	83 ec 28             	sub    $0x28,%esp
  104fb6:	8b 45 0c             	mov    0xc(%ebp),%eax
  104fb9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104fbc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104fbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static struct res_node* node;

    node = vfs_get_node(path);
  104fc2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104fc5:	89 04 24             	mov    %eax,(%esp)
  104fc8:	e8 23 ff ff ff       	call   104ef0 <vfs_get_node>
  104fcd:	a3 5c a4 10 00       	mov    %eax,0x10a45c

    if(node->res_type == RES_KERNDRV) {
  104fd2:	a1 5c a4 10 00       	mov    0x10a45c,%eax
  104fd7:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  104fde:	00 00 00 
  104fe1:	0f 85 34 00 00 00    	jne    10501b <vfs_open+0x6b>
        struct res_kfile* kf = (struct res_kfile*)node->res_ptr;
  104fe7:	a1 5c a4 10 00       	mov    0x10a45c,%eax
  104fec:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104ff2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct res_handle* handle = kf->driver->open(kf, filemode);
  104ff5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ff8:	8b 40 04             	mov    0x4(%eax),%eax
  104ffb:	8b 40 08             	mov    0x8(%eax),%eax
  104ffe:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105001:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105004:	89 0c 24             	mov    %ecx,(%esp)
  105007:	89 54 24 04          	mov    %edx,0x4(%esp)
  10500b:	ff d0                	call   *%eax
  10500d:	89 45 ec             	mov    %eax,-0x14(%ebp)

        return handle;
  105010:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105013:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105016:	e9 07 00 00 00       	jmp    105022 <vfs_open+0x72>
    }

    return 0;
  10501b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105022:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105025:	83 c4 28             	add    $0x28,%esp
  105028:	5d                   	pop    %ebp
  105029:	c3                   	ret    
  10502a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105030 <vfs_close>:

uint32_t vfs_close(struct res_handle* handle) {
  105030:	55                   	push   %ebp
  105031:	89 e5                	mov    %esp,%ebp
  105033:	83 ec 18             	sub    $0x18,%esp
  105036:	8b 45 08             	mov    0x8(%ebp),%eax
  105039:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle->res_type == RES_KERNDRV) {
  10503c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10503f:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105045:	0f 85 22 00 00 00    	jne    10506d <vfs_close+0x3d>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  10504b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10504e:	8b 40 04             	mov    0x4(%eax),%eax
  105051:	89 45 f4             	mov    %eax,-0xc(%ebp)

       return kf->driver->close(handle);
  105054:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105057:	8b 40 04             	mov    0x4(%eax),%eax
  10505a:	8b 40 0c             	mov    0xc(%eax),%eax
  10505d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105060:	89 0c 24             	mov    %ecx,(%esp)
  105063:	ff d0                	call   *%eax
  105065:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105068:	e9 07 00 00 00       	jmp    105074 <vfs_close+0x44>
    }

    return 0;
  10506d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105074:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105077:	83 c4 18             	add    $0x18,%esp
  10507a:	5d                   	pop    %ebp
  10507b:	c3                   	ret    
  10507c:	0f 1f 40 00          	nopl   0x0(%eax)

00105080 <vfs_read>:

uint32_t vfs_read(struct res_handle* handle, void* dest, uint32_t size, uint32_t count) {
  105080:	55                   	push   %ebp
  105081:	89 e5                	mov    %esp,%ebp
  105083:	56                   	push   %esi
  105084:	83 ec 34             	sub    $0x34,%esp
  105087:	8b 45 14             	mov    0x14(%ebp),%eax
  10508a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10508d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105090:	8b 75 08             	mov    0x8(%ebp),%esi
  105093:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105096:	89 55 f0             	mov    %edx,-0x10(%ebp)
  105099:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10509c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  10509f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1050a6:	0f 85 0c 00 00 00    	jne    1050b8 <vfs_read+0x38>
  1050ac:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  1050b3:	e9 94 00 00 00       	jmp    10514c <vfs_read+0xcc>

    if(handle->res_type == RES_KERNDRV) {
  1050b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1050bb:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  1050c1:	0f 85 7e 00 00 00    	jne    105145 <vfs_read+0xc5>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  1050c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1050ca:	8b 40 04             	mov    0x4(%eax),%eax
  1050cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rread(handle, dest, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  1050d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1050d3:	8b 40 04             	mov    0x4(%eax),%eax
  1050d6:	8b 00                	mov    (%eax),%eax
  1050d8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1050db:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1050de:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1050e1:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  1050e5:	89 0c 24             	mov    %ecx,(%esp)
  1050e8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1050ec:	89 74 24 08          	mov    %esi,0x8(%esp)
  1050f0:	ff d0                	call   *%eax
  1050f2:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  1050f5:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  1050fc:	0f 85 1e 00 00 00    	jne    105120 <vfs_read+0xa0>
           handle->position += size * count;
  105102:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105105:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  105109:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10510c:	8b 51 08             	mov    0x8(%ecx),%edx
  10510f:	01 c2                	add    %eax,%edx
  105111:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  105114:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10511b:	e9 2c 00 00 00       	jmp    10514c <vfs_read+0xcc>
       }

       if(res == RW_BLOCK) {
  105120:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  105127:	0f 85 0c 00 00 00    	jne    105139 <vfs_read+0xb9>
           return RW_BLOCK;
  10512d:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  105134:	e9 13 00 00 00       	jmp    10514c <vfs_read+0xcc>
       }

       return RW_ERR_DRIVER;
  105139:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  105140:	e9 07 00 00 00       	jmp    10514c <vfs_read+0xcc>
    }

    return RW_ERR_VFS;
  105145:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  10514c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10514f:	83 c4 34             	add    $0x34,%esp
  105152:	5e                   	pop    %esi
  105153:	5d                   	pop    %ebp
  105154:	c3                   	ret    
  105155:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10515c:	00 00 00 00 

00105160 <vfs_write>:

uint32_t vfs_write(struct res_handle* handle, void* src,  uint32_t size, uint32_t count) {
  105160:	55                   	push   %ebp
  105161:	89 e5                	mov    %esp,%ebp
  105163:	56                   	push   %esi
  105164:	83 ec 34             	sub    $0x34,%esp
  105167:	8b 45 14             	mov    0x14(%ebp),%eax
  10516a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10516d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105170:	8b 75 08             	mov    0x8(%ebp),%esi
  105173:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105176:	89 55 f0             	mov    %edx,-0x10(%ebp)
  105179:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10517c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  10517f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  105186:	0f 85 0c 00 00 00    	jne    105198 <vfs_write+0x38>
  10518c:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  105193:	e9 95 00 00 00       	jmp    10522d <vfs_write+0xcd>

    if(handle->res_type == RES_KERNDRV) {
  105198:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10519b:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  1051a1:	0f 85 7f 00 00 00    	jne    105226 <vfs_write+0xc6>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  1051a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1051aa:	8b 40 04             	mov    0x4(%eax),%eax
  1051ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rwrite(handle, src, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  1051b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1051b3:	8b 40 04             	mov    0x4(%eax),%eax
  1051b6:	8b 40 04             	mov    0x4(%eax),%eax
  1051b9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1051bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1051bf:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1051c2:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  1051c6:	89 0c 24             	mov    %ecx,(%esp)
  1051c9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1051cd:	89 74 24 08          	mov    %esi,0x8(%esp)
  1051d1:	ff d0                	call   *%eax
  1051d3:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  1051d6:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  1051dd:	0f 85 1e 00 00 00    	jne    105201 <vfs_write+0xa1>
           handle->position += size * count;
  1051e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1051e6:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  1051ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1051ed:	8b 51 08             	mov    0x8(%ecx),%edx
  1051f0:	01 c2                	add    %eax,%edx
  1051f2:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  1051f5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1051fc:	e9 2c 00 00 00       	jmp    10522d <vfs_write+0xcd>
       }

       if(res == RW_BLOCK) {
  105201:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  105208:	0f 85 0c 00 00 00    	jne    10521a <vfs_write+0xba>
           return RW_BLOCK;
  10520e:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  105215:	e9 13 00 00 00       	jmp    10522d <vfs_write+0xcd>
       }

       return RW_ERR_DRIVER;
  10521a:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  105221:	e9 07 00 00 00       	jmp    10522d <vfs_write+0xcd>
    }

    return RW_ERR_VFS;
  105226:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  10522d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105230:	83 c4 34             	add    $0x34,%esp
  105233:	5e                   	pop    %esi
  105234:	5d                   	pop    %ebp
  105235:	c3                   	ret    
  105236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10523d:	00 00 00 

00105240 <vfs_available>:

uint32_t vfs_available(struct res_handle* handle) {
  105240:	55                   	push   %ebp
  105241:	89 e5                	mov    %esp,%ebp
  105243:	83 ec 18             	sub    $0x18,%esp
  105246:	8b 45 08             	mov    0x8(%ebp),%eax
  105249:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle == 0) return 0;
  10524c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  105253:	0f 85 0c 00 00 00    	jne    105265 <vfs_available+0x25>
  105259:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105260:	e9 38 00 00 00       	jmp    10529d <vfs_available+0x5d>

    if(handle->res_type == RES_KERNDRV) {
  105265:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105268:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  10526e:	0f 85 22 00 00 00    	jne    105296 <vfs_available+0x56>
        struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  105274:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105277:	8b 40 04             	mov    0x4(%eax),%eax
  10527a:	89 45 f4             	mov    %eax,-0xc(%ebp)

        return kf->driver->available(handle);
  10527d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105280:	8b 40 04             	mov    0x4(%eax),%eax
  105283:	8b 40 10             	mov    0x10(%eax),%eax
  105286:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105289:	89 0c 24             	mov    %ecx,(%esp)
  10528c:	ff d0                	call   *%eax
  10528e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105291:	e9 07 00 00 00       	jmp    10529d <vfs_available+0x5d>
    }

    return 0;
  105296:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10529d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1052a0:	83 c4 18             	add    $0x18,%esp
  1052a3:	5d                   	pop    %ebp
  1052a4:	c3                   	ret    
  1052a5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1052ac:	00 00 00 00 

001052b0 <vfs_exists>:

uint32_t vfs_exists(char* path) {
  1052b0:	55                   	push   %ebp
  1052b1:	89 e5                	mov    %esp,%ebp
  1052b3:	83 ec 18             	sub    $0x18,%esp
  1052b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1052b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(vfs_get_node(path) != 0) return 1;
  1052bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1052bf:	89 04 24             	mov    %eax,(%esp)
  1052c2:	e8 29 fc ff ff       	call   104ef0 <vfs_get_node>
  1052c7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1052cc:	0f 84 0c 00 00 00    	je     1052de <vfs_exists+0x2e>
  1052d2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  1052d9:	e9 07 00 00 00       	jmp    1052e5 <vfs_exists+0x35>
    return 0;
  1052de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  1052e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1052e8:	83 c4 18             	add    $0x18,%esp
  1052eb:	5d                   	pop    %ebp
  1052ec:	c3                   	ret    
  1052ed:	0f 1f 00             	nopl   (%eax)

001052f0 <vfs_seek>:

void vfs_seek(struct res_handle* handle, uint32_t offset, uint32_t origin) {
  1052f0:	55                   	push   %ebp
  1052f1:	89 e5                	mov    %esp,%ebp
  1052f3:	83 ec 0c             	sub    $0xc,%esp
  1052f6:	8b 45 10             	mov    0x10(%ebp),%eax
  1052f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1052fc:	8b 55 08             	mov    0x8(%ebp),%edx
  1052ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
  105302:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105305:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(origin == SEEK_SET) {
  105308:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10530f:	0f 85 09 00 00 00    	jne    10531e <vfs_seek+0x2e>
        handle->position = offset;
  105315:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105318:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10531b:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if(origin == SEEK_CUR) {
  10531e:	81 7d f4 01 00 00 00 	cmpl   $0x1,-0xc(%ebp)
  105325:	0f 85 0e 00 00 00    	jne    105339 <vfs_seek+0x49>
        handle->position += offset;
  10532b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10532e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105331:	8b 51 08             	mov    0x8(%ecx),%edx
  105334:	01 c2                	add    %eax,%edx
  105336:	89 51 08             	mov    %edx,0x8(%ecx)
    }
}
  105339:	83 c4 0c             	add    $0xc,%esp
  10533c:	5d                   	pop    %ebp
  10533d:	c3                   	ret    
  10533e:	66 90                	xchg   %ax,%ax

00105340 <vfs_exec>:

void vfs_exec(char* ip, char* args[], struct task* task) {
  105340:	55                   	push   %ebp
  105341:	89 e5                	mov    %esp,%ebp
  105343:	56                   	push   %esi
  105344:	81 ec 94 00 00 00    	sub    $0x94,%esp
  10534a:	8b 45 10             	mov    0x10(%ebp),%eax
  10534d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  105350:	8b 55 08             	mov    0x8(%ebp),%edx
  105353:	89 55 f8             	mov    %edx,-0x8(%ebp)
  105356:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  105359:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char* path = strclone(ip);
  10535c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10535f:	89 04 24             	mov    %eax,(%esp)
  105362:	e8 b9 f6 ff ff       	call   104a20 <strclone>
  105367:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(vfs_exists(path)) {
  10536a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10536d:	89 04 24             	mov    %eax,(%esp)
  105370:	e8 3b ff ff ff       	call   1052b0 <vfs_exists>
  105375:	3d 00 00 00 00       	cmp    $0x0,%eax
  10537a:	0f 84 eb 02 00 00    	je     10566b <vfs_exec+0x32b>
        uint32_t elf_mod_pdir;

        if(task == 0) {
  105380:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105387:	0f 85 35 00 00 00    	jne    1053c2 <vfs_exec+0x82>
            elf_mod_pdir = vmm_create_pagedir();
  10538d:	e8 de 0a 00 00       	call   105e70 <vmm_create_pagedir>
  105392:	b9 01 00 00 00       	mov    $0x1,%ecx
  105397:	89 45 e8             	mov    %eax,-0x18(%ebp)
            task = init_task(elf_mod_pdir, (void*)1);
  10539a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10539d:	89 04 24             	mov    %eax,(%esp)
  1053a0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1053a4:	e8 37 ea ff ff       	call   103de0 <init_task>
  1053a9:	8d 0d 0f 85 10 00    	lea    0x10850f,%ecx
  1053af:	89 45 f0             	mov    %eax,-0x10(%ebp)
            kprintf("[exec] Initialized new task...\n");
  1053b2:	89 0c 24             	mov    %ecx,(%esp)
  1053b5:	e8 b6 b1 ff ff       	call   100570 <kprintf>
        }
  1053ba:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  1053bd:	e9 1a 00 00 00       	jmp    1053dc <vfs_exec+0x9c>
  1053c2:	8d 05 2f 85 10 00    	lea    0x10852f,%eax
        else
        {
            elf_mod_pdir = task->phys_pdir;
  1053c8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1053cb:	8b 49 14             	mov    0x14(%ecx),%ecx
  1053ce:	89 4d e8             	mov    %ecx,-0x18(%ebp)
            kprintf("[exec] Replacing old task...\n");
  1053d1:	89 04 24             	mov    %eax,(%esp)
  1053d4:	e8 97 b1 ff ff       	call   100570 <kprintf>
  1053d9:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1053dc:	b8 05 00 00 00       	mov    $0x5,%eax
        }

        struct res_handle* handle = vfs_open(path, FM_EXEC | FM_READ);
  1053e1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1053e4:	89 0c 24             	mov    %ecx,(%esp)
  1053e7:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  1053ee:	00 
  1053ef:	89 45 ac             	mov    %eax,-0x54(%ebp)
  1053f2:	e8 b9 fb ff ff       	call   104fb0 <vfs_open>
  1053f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if(handle) {
  1053fa:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  105401:	0f 84 47 02 00 00    	je     10564e <vfs_exec+0x30e>
            uint32_t size = vfs_available(handle);
  105407:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10540a:	89 04 24             	mov    %eax,(%esp)
  10540d:	e8 2e fe ff ff       	call   105240 <vfs_available>
  105412:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(size == 0) {
  105415:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  10541c:	0f 85 1d 00 00 00    	jne    10543f <vfs_exec+0xff>
  105422:	8d 05 4d 85 10 00    	lea    0x10854d,%eax
                kprintf("[exec] %s is empty\n", path);
  105428:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10542b:	89 04 24             	mov    %eax,(%esp)
  10542e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105432:	e8 39 b1 ff ff       	call   100570 <kprintf>
                return;
  105437:	89 45 a8             	mov    %eax,-0x58(%ebp)
  10543a:	e9 2c 02 00 00       	jmp    10566b <vfs_exec+0x32b>
            }

            void* modsrc = malloc(size);
  10543f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105442:	89 04 24             	mov    %eax,(%esp)
  105445:	e8 66 ec ff ff       	call   1040b0 <malloc>
  10544a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10544f:	89 45 dc             	mov    %eax,-0x24(%ebp)

            uint32_t res = vfs_read(handle, modsrc, size, 1);
  105452:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105455:	8b 55 dc             	mov    -0x24(%ebp),%edx
  105458:	8b 75 e0             	mov    -0x20(%ebp),%esi
  10545b:	89 04 24             	mov    %eax,(%esp)
  10545e:	89 54 24 04          	mov    %edx,0x4(%esp)
  105462:	89 74 24 08          	mov    %esi,0x8(%esp)
  105466:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10546d:	00 
  10546e:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  105471:	e8 0a fc ff ff       	call   105080 <vfs_read>
  105476:	89 45 d8             	mov    %eax,-0x28(%ebp)

            if(res != RW_OK) {
  105479:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  105480:	0f 84 21 00 00 00    	je     1054a7 <vfs_exec+0x167>
  105486:	8d 05 61 85 10 00    	lea    0x108561,%eax
                kprintf("[exec] Error while reading %s\n");
  10548c:	89 04 24             	mov    %eax,(%esp)
  10548f:	e8 dc b0 ff ff       	call   100570 <kprintf>
                free(modsrc);
  105494:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105497:	89 0c 24             	mov    %ecx,(%esp)
  10549a:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10549d:	e8 de ef ff ff       	call   104480 <free>
                return;
  1054a2:	e9 c4 01 00 00       	jmp    10566b <vfs_exec+0x32b>
            }

            uint32_t old_pdir = vmm_get_current_pagedir();
  1054a7:	e8 64 04 00 00       	call   105910 <vmm_get_current_pagedir>
  1054ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            //**********************************************************************************************************
            if(task != get_current_task())  vmm_activate_pagedir(elf_mod_pdir);
  1054af:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1054b2:	89 45 9c             	mov    %eax,-0x64(%ebp)
  1054b5:	e8 56 e5 ff ff       	call   103a10 <get_current_task>
  1054ba:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  1054bd:	39 c1                	cmp    %eax,%ecx
  1054bf:	0f 84 0b 00 00 00    	je     1054d0 <vfs_exec+0x190>
  1054c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1054c8:	89 04 24             	mov    %eax,(%esp)
  1054cb:	e8 80 0f 00 00       	call   106450 <vmm_activate_pagedir>

            struct elf_header* header = modsrc;
  1054d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1054d3:	89 45 d0             	mov    %eax,-0x30(%ebp)
            struct elf_program_header* ph;

            /* Ist es ueberhaupt eine ELF-Datei? */
            if (header->magic != ELF_MAGIC) {
  1054d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1054d9:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  1054df:	0f 84 28 00 00 00    	je     10550d <vfs_exec+0x1cd>
  1054e5:	8d 05 80 85 10 00    	lea    0x108580,%eax
                kprintf("[exec] Invalid ELF-Magic in %s!\n", path);
  1054eb:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1054ee:	89 04 24             	mov    %eax,(%esp)
  1054f1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1054f5:	e8 76 b0 ff ff       	call   100570 <kprintf>
                free(modsrc);
  1054fa:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1054fd:	89 0c 24             	mov    %ecx,(%esp)
  105500:	89 45 98             	mov    %eax,-0x68(%ebp)
  105503:	e8 78 ef ff ff       	call   104480 <free>
                return;
  105508:	e9 5e 01 00 00       	jmp    10566b <vfs_exec+0x32b>
            }

            void* elf_mod_entry = (void*) (header->entry);
  10550d:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105510:	8b 40 18             	mov    0x18(%eax),%eax
  105513:	89 45 c8             	mov    %eax,-0x38(%ebp)

            ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  105516:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105519:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10551c:	03 41 1c             	add    0x1c(%ecx),%eax
  10551f:	89 45 cc             	mov    %eax,-0x34(%ebp)

            for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  105522:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  105529:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10552c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10552f:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  105533:	39 c8                	cmp    %ecx,%eax
  105535:	0f 83 b5 00 00 00    	jae    1055f0 <vfs_exec+0x2b0>
                void* dest = (void*) ph->virt_addr;
  10553b:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10553e:	8b 40 08             	mov    0x8(%eax),%eax
  105541:	89 45 c0             	mov    %eax,-0x40(%ebp)
                void* src = ((char*) header) + ph->offset;
  105544:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105547:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10554a:	03 41 04             	add    0x4(%ecx),%eax
  10554d:	89 45 bc             	mov    %eax,-0x44(%ebp)

                /* Nur Program Header vom Typ LOAD laden */
                if (ph->type != 1) {
  105550:	8b 45 cc             	mov    -0x34(%ebp),%eax
  105553:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105559:	0f 84 05 00 00 00    	je     105564 <vfs_exec+0x224>
                    continue;
  10555f:	e9 71 00 00 00       	jmp    1055d5 <vfs_exec+0x295>
                }

                for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  105564:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10556b:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10556e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  105571:	3b 41 14             	cmp    0x14(%ecx),%eax
  105574:	0f 83 3f 00 00 00    	jae    1055b9 <vfs_exec+0x279>
                    vmm_free(dest + offset);
  10557a:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10557d:	03 45 b8             	add    -0x48(%ebp),%eax
  105580:	89 04 24             	mov    %eax,(%esp)
  105583:	e8 58 0a 00 00       	call   105fe0 <vmm_free>
  105588:	b8 00 00 00 00       	mov    $0x0,%eax
                    vmm_alloc_addr(dest + offset, 0);
  10558d:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  105590:	03 4d b8             	add    -0x48(%ebp),%ecx
  105593:	89 0c 24             	mov    %ecx,(%esp)
  105596:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10559d:	00 
  10559e:	89 45 94             	mov    %eax,-0x6c(%ebp)
  1055a1:	e8 aa 0d 00 00       	call   106350 <vmm_alloc_addr>
  1055a6:	89 45 90             	mov    %eax,-0x70(%ebp)
                /* Nur Program Header vom Typ LOAD laden */
                if (ph->type != 1) {
                    continue;
                }

                for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  1055a9:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1055ac:	05 00 10 00 00       	add    $0x1000,%eax
  1055b1:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1055b4:	e9 b2 ff ff ff       	jmp    10556b <vfs_exec+0x22b>
                    vmm_free(dest + offset);
                    vmm_alloc_addr(dest + offset, 0);
                }

                memcpy(dest, src, ph->file_size);
  1055b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1055bc:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  1055bf:	8b 55 cc             	mov    -0x34(%ebp),%edx
  1055c2:	8b 52 10             	mov    0x10(%edx),%edx
  1055c5:	89 04 24             	mov    %eax,(%esp)
  1055c8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1055cc:	89 54 24 08          	mov    %edx,0x8(%esp)
  1055d0:	e8 ab f1 ff ff       	call   104780 <memcpy>

            void* elf_mod_entry = (void*) (header->entry);

            ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);

            for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  1055d5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1055d8:	05 01 00 00 00       	add    $0x1,%eax
  1055dd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1055e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1055e3:	05 20 00 00 00       	add    $0x20,%eax
  1055e8:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1055eb:	e9 39 ff ff ff       	jmp    105529 <vfs_exec+0x1e9>
                }

                memcpy(dest, src, ph->file_size);
            }

            task->args = args;
  1055f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1055f3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1055f6:	89 41 18             	mov    %eax,0x18(%ecx)
            task->cpuState->eip = (uint32_t) elf_mod_entry;
  1055f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1055fc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1055ff:	8b 49 04             	mov    0x4(%ecx),%ecx
  105602:	89 41 24             	mov    %eax,0x24(%ecx)

            if(task != get_current_task()) vmm_activate_pagedir(old_pdir);
  105605:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105608:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10560b:	e8 00 e4 ff ff       	call   103a10 <get_current_task>
  105610:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  105613:	39 c1                	cmp    %eax,%ecx
  105615:	0f 84 0b 00 00 00    	je     105626 <vfs_exec+0x2e6>
  10561b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10561e:	89 04 24             	mov    %eax,(%esp)
  105621:	e8 2a 0e 00 00       	call   106450 <vmm_activate_pagedir>
  105626:	8d 05 a1 85 10 00    	lea    0x1085a1,%eax

            kprintf("[exec] Executed %s\n", path);
  10562c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10562f:	89 04 24             	mov    %eax,(%esp)
  105632:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105636:	e8 35 af ff ff       	call   100570 <kprintf>
            free(modsrc);
  10563b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10563e:	89 0c 24             	mov    %ecx,(%esp)
  105641:	89 45 88             	mov    %eax,-0x78(%ebp)
  105644:	e8 37 ee ff ff       	call   104480 <free>
        }
  105649:	e9 18 00 00 00       	jmp    105666 <vfs_exec+0x326>
  10564e:	8d 05 b5 85 10 00    	lea    0x1085b5,%eax
        else
        {
            kprintf("[exec] %s doesn't exist\n", path);
  105654:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105657:	89 04 24             	mov    %eax,(%esp)
  10565a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10565e:	e8 0d af ff ff       	call   100570 <kprintf>
  105663:	89 45 84             	mov    %eax,-0x7c(%ebp)
        }
    }
  105666:	e9 00 00 00 00       	jmp    10566b <vfs_exec+0x32b>
}
  10566b:	81 c4 94 00 00 00    	add    $0x94,%esp
  105671:	5e                   	pop    %esi
  105672:	5d                   	pop    %ebp
  105673:	c3                   	ret    
  105674:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10567b:	00 00 00 00 00 

00105680 <vfs_init_root>:

void vfs_init_root() {
  105680:	55                   	push   %ebp
  105681:	89 e5                	mov    %esp,%ebp
    if(root == 0) {
  105683:	83 ec 18             	sub    $0x18,%esp
  105686:	81 3d 4c a4 10 00 00 	cmpl   $0x0,0x10a44c
  10568d:	00 00 00 
  105690:	0f 85 6f 00 00 00    	jne    105705 <vfs_init_root+0x85>
  105696:	b8 10 01 00 00       	mov    $0x110,%eax
        root = malloc(sizeof(struct res_node));
  10569b:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  1056a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1056a5:	e8 06 ea ff ff       	call   1040b0 <malloc>
  1056aa:	a3 4c a4 10 00       	mov    %eax,0x10a44c
        root->next = 0;
  1056af:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  1056b4:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  1056bb:	00 00 00 
        root->parent = 0;
  1056be:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  1056c3:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  1056ca:	00 00 00 
        strcpy(root->name, "$");
  1056cd:	a1 4c a4 10 00       	mov    0x10a44c,%eax
  1056d2:	89 e1                	mov    %esp,%ecx
  1056d4:	89 01                	mov    %eax,(%ecx)
  1056d6:	c7 41 04 ce 85 10 00 	movl   $0x1085ce,0x4(%ecx)
  1056dd:	e8 de f2 ff ff       	call   1049c0 <strcpy>
        root->res_ptr = 0;
  1056e2:	8b 0d 4c a4 10 00    	mov    0x10a44c,%ecx
  1056e8:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  1056ef:	00 00 00 
        root->res_type = RES_SUBDIR;
  1056f2:	8b 0d 4c a4 10 00    	mov    0x10a44c,%ecx
  1056f8:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  1056ff:	00 00 00 
  105702:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
}
  105705:	83 c4 18             	add    $0x18,%esp
  105708:	5d                   	pop    %ebp
  105709:	c3                   	ret    
  10570a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105710 <vfs_debug_ls>:

void vfs_debug_ls(char* path) {
  105710:	55                   	push   %ebp
  105711:	89 e5                	mov    %esp,%ebp
  105713:	56                   	push   %esi
  105714:	83 ec 24             	sub    $0x24,%esp
  105717:	8b 45 08             	mov    0x8(%ebp),%eax
  10571a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    static struct res_node* node;
    node = vfs_get_node(path);
  10571d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105720:	89 04 24             	mov    %eax,(%esp)
  105723:	e8 c8 f7 ff ff       	call   104ef0 <vfs_get_node>
  105728:	a3 60 a4 10 00       	mov    %eax,0x10a460
    node = node->res_ptr;
  10572d:	a1 60 a4 10 00       	mov    0x10a460,%eax
  105732:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105738:	a3 60 a4 10 00       	mov    %eax,0x10a460

    while(node != 0) {
  10573d:	81 3d 60 a4 10 00 00 	cmpl   $0x0,0x10a460
  105744:	00 00 00 
  105747:	0f 84 90 00 00 00    	je     1057dd <vfs_debug_ls+0xcd>
  10574d:	8d 05 d0 85 10 00    	lea    0x1085d0,%eax
        char* type = "N/A";
  105753:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(node->res_type == RES_SUBDIR) {
  105756:	a1 60 a4 10 00       	mov    0x10a460,%eax
  10575b:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  105762:	00 00 00 
  105765:	0f 85 09 00 00 00    	jne    105774 <vfs_debug_ls+0x64>
  10576b:	8d 05 d4 85 10 00    	lea    0x1085d4,%eax
            type = "DIR";
  105771:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        if(node->res_type == RES_KERNDRV) {
  105774:	a1 60 a4 10 00       	mov    0x10a460,%eax
  105779:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  105780:	00 00 00 
  105783:	0f 85 14 00 00 00    	jne    10579d <vfs_debug_ls+0x8d>
            type = ((struct res_kfile*)node->res_ptr)->driver->drvname;
  105789:	a1 60 a4 10 00       	mov    0x10a460,%eax
  10578e:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105794:	8b 40 04             	mov    0x4(%eax),%eax
  105797:	8b 40 18             	mov    0x18(%eax),%eax
  10579a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10579d:	8d 05 d8 85 10 00    	lea    0x1085d8,%eax
        }

        kprintf("LS %s: %s [%s]\n", path, node->name, type);
  1057a3:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1057a6:	8b 15 60 a4 10 00    	mov    0x10a460,%edx
  1057ac:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1057af:	89 04 24             	mov    %eax,(%esp)
  1057b2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1057b6:	89 54 24 08          	mov    %edx,0x8(%esp)
  1057ba:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1057be:	e8 ad ad ff ff       	call   100570 <kprintf>

        node = node->next;
  1057c3:	8b 0d 60 a4 10 00    	mov    0x10a460,%ecx
  1057c9:	8b 89 08 01 00 00    	mov    0x108(%ecx),%ecx
  1057cf:	89 0d 60 a4 10 00    	mov    %ecx,0x10a460
    }
  1057d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1057d8:	e9 60 ff ff ff       	jmp    10573d <vfs_debug_ls+0x2d>
}
  1057dd:	83 c4 24             	add    $0x24,%esp
  1057e0:	5e                   	pop    %esi
  1057e1:	5d                   	pop    %ebp
  1057e2:	c3                   	ret    
  1057e3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1057ea:	84 00 00 00 00 00 

001057f0 <vfs_find_node>:

struct res_node* root = 0;
struct res_node* current = 0;
struct res_node* temp = 0;

static struct res_node* vfs_find_node(struct res_node* parent, char* name) {
  1057f0:	55                   	push   %ebp
  1057f1:	89 e5                	mov    %esp,%ebp
  1057f3:	83 ec 18             	sub    $0x18,%esp
  1057f6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1057f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1057fc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1057ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_type == RES_SUBDIR) {
  105802:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105805:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  10580c:	00 00 00 
  10580f:	0f 85 57 00 00 00    	jne    10586c <vfs_find_node+0x7c>
        struct res_node* ptr = parent->res_ptr;
  105815:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105818:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  10581e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        while(ptr != 0) {
  105821:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105828:	0f 84 39 00 00 00    	je     105867 <vfs_find_node+0x77>
            if(strcmp(name, ptr->name) == 0) {
  10582e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105831:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105834:	89 e2                	mov    %esp,%edx
  105836:	89 4a 04             	mov    %ecx,0x4(%edx)
  105839:	89 02                	mov    %eax,(%edx)
  10583b:	e8 90 f0 ff ff       	call   1048d0 <strcmp>
  105840:	3d 00 00 00 00       	cmp    $0x0,%eax
  105845:	0f 85 0b 00 00 00    	jne    105856 <vfs_find_node+0x66>
                return ptr;
  10584b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10584e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105851:	e9 1d 00 00 00       	jmp    105873 <vfs_find_node+0x83>
            }

            ptr = ptr->next;
  105856:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105859:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  10585f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
  105862:	e9 ba ff ff ff       	jmp    105821 <vfs_find_node+0x31>
    }
  105867:	e9 00 00 00 00       	jmp    10586c <vfs_find_node+0x7c>

    return 0;
  10586c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105873:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105876:	83 c4 18             	add    $0x18,%esp
  105879:	5d                   	pop    %ebp
  10587a:	c3                   	ret    
  10587b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00105880 <vfs_insert_node>:

static int vfs_insert_node(struct res_node* parent, struct res_node* child) {
  105880:	55                   	push   %ebp
  105881:	89 e5                	mov    %esp,%ebp
  105883:	83 ec 0c             	sub    $0xc,%esp
  105886:	8b 45 0c             	mov    0xc(%ebp),%eax
  105889:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10588c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10588f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_ptr == 0) {
  105892:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105895:	81 b8 04 01 00 00 00 	cmpl   $0x0,0x104(%eax)
  10589c:	00 00 00 
  10589f:	0f 85 0d 00 00 00    	jne    1058b2 <vfs_insert_node+0x32>
        parent->res_type = RES_SUBDIR;
  1058a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1058a8:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  1058af:	00 00 00 
    }

    if(parent->res_type == RES_SUBDIR) {
  1058b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1058b5:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  1058bc:	00 00 00 
  1058bf:	0f 85 36 00 00 00    	jne    1058fb <vfs_insert_node+0x7b>
        child->next = parent->res_ptr;
  1058c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1058c8:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1058ce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1058d1:	89 81 08 01 00 00    	mov    %eax,0x108(%ecx)
        child->parent = parent;
  1058d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1058da:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1058dd:	89 81 0c 01 00 00    	mov    %eax,0x10c(%ecx)
        parent->res_ptr = child;
  1058e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1058e6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1058e9:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)

        return 0;
  1058ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1058f6:	e9 07 00 00 00       	jmp    105902 <vfs_insert_node+0x82>
    }

    return 1;
  1058fb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
}
  105902:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105905:	83 c4 0c             	add    $0xc,%esp
  105908:	5d                   	pop    %ebp
  105909:	c3                   	ret    
  10590a:	66 90                	xchg   %ax,%ax
  10590c:	66 90                	xchg   %ax,%ax
  10590e:	66 90                	xchg   %ax,%ax

00105910 <vmm_get_current_pagedir>:
	}

	vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  105910:	55                   	push   %ebp
  105911:	89 e5                	mov    %esp,%ebp
	return active_pagedir;
  105913:	a1 64 a4 10 00       	mov    0x10a464,%eax
  105918:	5d                   	pop    %ebp
  105919:	c3                   	ret    
  10591a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105920 <vmm_fork_current>:
}

uint32_t vmm_fork_current(void) {
  105920:	55                   	push   %ebp
  105921:	89 e5                	mov    %esp,%ebp
  105923:	56                   	push   %esi
  105924:	83 ec 34             	sub    $0x34,%esp
  105927:	8d 45 f8             	lea    -0x8(%ebp),%eax
	uint32_t phys_pagedir, paddr, i;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  10592a:	89 04 24             	mov    %eax,(%esp)
  10592d:	e8 ce 00 00 00       	call   105a00 <vmm_create_vpdraw>
  105932:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for (i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  105935:	c7 45 f0 00 10 40 20 	movl   $0x20401000,-0x10(%ebp)
  10593c:	81 7d f0 00 f0 ff ff 	cmpl   $0xfffff000,-0x10(%ebp)
  105943:	0f 83 98 00 00 00    	jae    1059e1 <vmm_fork_current+0xc1>
		if (active_pagetables[i >> 12] & PT_PRESENT) {
  105949:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10594c:	c1 e8 0c             	shr    $0xc,%eax
  10594f:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105955:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105958:	25 01 00 00 00       	and    $0x1,%eax
  10595d:	3d 00 00 00 00       	cmp    $0x0,%eax
  105962:	0f 84 64 00 00 00    	je     1059cc <vmm_fork_current+0xac>
  105968:	8d 45 f4             	lea    -0xc(%ebp),%eax
			void* newp = vmm_alloc_user(&paddr);
  10596b:	89 04 24             	mov    %eax,(%esp)
  10596e:	e8 4d 03 00 00       	call   105cc0 <vmm_alloc_user>
  105973:	b9 00 00 00 00       	mov    $0x0,%ecx
  105978:	ba 00 10 00 00       	mov    $0x1000,%edx
  10597d:	89 45 e8             	mov    %eax,-0x18(%ebp)

			memcpy(newp, (void*) i, 0x1000);
  105980:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105983:	8b 75 f0             	mov    -0x10(%ebp),%esi
  105986:	89 04 24             	mov    %eax,(%esp)
  105989:	89 74 24 04          	mov    %esi,0x4(%esp)
  10598d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  105994:	00 
  105995:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  105998:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10599b:	e8 e0 ed ff ff       	call   104780 <memcpy>
			map_address_context(pdptr, i, paddr, 0);
  1059a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1059a3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1059a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1059a9:	89 04 24             	mov    %eax,(%esp)
  1059ac:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1059b0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1059b4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1059bb:	00 
  1059bc:	e8 4f 03 00 00       	call   105d10 <map_address_context>

			vmm_unmap(newp);
  1059c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1059c4:	89 04 24             	mov    %eax,(%esp)
  1059c7:	e8 d4 03 00 00       	call   105da0 <vmm_unmap>
		}

	}
  1059cc:	e9 00 00 00 00       	jmp    1059d1 <vmm_fork_current+0xb1>

uint32_t vmm_fork_current(void) {
	uint32_t phys_pagedir, paddr, i;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);

	for (i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  1059d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1059d4:	05 00 10 00 00       	add    $0x1000,%eax
  1059d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1059dc:	e9 5b ff ff ff       	jmp    10593c <vmm_fork_current+0x1c>
			vmm_unmap(newp);
		}

	}

	vmm_free_pdptr(pdptr);
  1059e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1059e4:	89 04 24             	mov    %eax,(%esp)
  1059e7:	e8 24 04 00 00       	call   105e10 <vmm_free_pdptr>

	return phys_pagedir;
  1059ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1059ef:	83 c4 34             	add    $0x34,%esp
  1059f2:	5e                   	pop    %esi
  1059f3:	5d                   	pop    %ebp
  1059f4:	c3                   	ret    
  1059f5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1059fc:	00 00 00 00 

00105a00 <vmm_create_vpdraw>:
uint32_t* active_pagetables = (uint32_t*) (ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*) (ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  105a00:	55                   	push   %ebp
  105a01:	89 e5                	mov    %esp,%ebp
  105a03:	53                   	push   %ebx
  105a04:	57                   	push   %edi
  105a05:	56                   	push   %esi
  105a06:	83 ec 4c             	sub    $0x4c,%esp
  105a09:	8b 45 08             	mov    0x8(%ebp),%eax
  105a0c:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  105a0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t phys_context = 0;
  105a12:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct vmm_context* context = vmm_alloc(&phys_context);
  105a19:	89 0c 24             	mov    %ecx,(%esp)
  105a1c:	e8 6f 05 00 00       	call   105f90 <vmm_alloc>
  105a21:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  105a24:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uint32_t phys_pagedir = 0;
  105a27:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	context->pagedir = vmm_alloc(&phys_pagedir);
  105a2e:	89 0c 24             	mov    %ecx,(%esp)
  105a31:	e8 5a 05 00 00       	call   105f90 <vmm_alloc>
  105a36:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  105a39:	89 01                	mov    %eax,(%ecx)
	if (pagedir != 0)
  105a3b:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105a42:	0f 84 08 00 00 00    	je     105a50 <vmm_create_vpdraw+0x50>
		*pagedir = phys_pagedir;
  105a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105a4b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105a4e:	89 01                	mov    %eax,(%ecx)
  105a50:	b8 00 00 00 00       	mov    $0x0,%eax

	uint32_t* pagedir_ptr = vmm_alloc(0);
  105a55:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105a5c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  105a5f:	e8 2c 05 00 00       	call   105f90 <vmm_alloc>
  105a64:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  105a67:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  105a6e:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  105a75:	0f 83 25 01 00 00    	jae    105ba0 <vmm_create_vpdraw+0x1a0>
  105a7b:	8d 45 dc             	lea    -0x24(%ebp),%eax
		pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  105a7e:	89 04 24             	mov    %eax,(%esp)
  105a81:	e8 0a 05 00 00       	call   105f90 <vmm_alloc>
  105a86:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105a89:	8b 55 e0             	mov    -0x20(%ebp),%edx
  105a8c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i < PMEM_TABLES) {
  105a8f:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  105a96:	0f 83 4d 00 00 00    	jae    105ae9 <vmm_create_vpdraw+0xe9>
			vmm_free((void*) (pagedir_ptr[i]));
  105a9c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105a9f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105aa2:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105aa5:	89 04 24             	mov    %eax,(%esp)
  105aa8:	e8 33 05 00 00       	call   105fe0 <vmm_free>
  105aad:	b8 00 00 00 00       	mov    $0x0,%eax
			map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  105ab2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105ab5:	8b 55 e0             	mov    -0x20(%ebp),%edx
  105ab8:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105abb:	8b 55 d8             	mov    -0x28(%ebp),%edx
  105abe:	8b 14 95 98 a4 18 00 	mov    0x18a498(,%edx,4),%edx
  105ac5:	89 0c 24             	mov    %ecx,(%esp)
  105ac8:	89 54 24 04          	mov    %edx,0x4(%esp)
  105acc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105ad3:	00 
  105ad4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  105ad7:	e8 84 05 00 00       	call   106060 <map_address_active>
			paddr = kernel_pagetables[i];
  105adc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105adf:	8b 04 85 98 a4 18 00 	mov    0x18a498(,%eax,4),%eax
  105ae6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  105ae9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105aec:	0d 01 00 00 00       	or     $0x1,%eax
  105af1:	0d 02 00 00 00       	or     $0x2,%eax
  105af6:	0d 04 00 00 00       	or     $0x4,%eax
  105afb:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105afe:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105b01:	8b 12                	mov    (%edx),%edx
  105b03:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
  105b06:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  105b0d:	0f 82 78 00 00 00    	jb     105b8b <vmm_create_vpdraw+0x18b>
			for (i2 = 0; i2 < 1024; i2++) {
  105b13:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  105b1a:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  105b21:	0f 83 5f 00 00 00    	jae    105b86 <vmm_create_vpdraw+0x186>
  105b27:	b8 04 00 00 00       	mov    $0x4,%eax
  105b2c:	b9 00 00 00 00       	mov    $0x0,%ecx
  105b31:	ba 00 02 00 00       	mov    $0x200,%edx
				uint32_t vaddr = (i << 22) + (i2 << 12);
  105b36:	8b 75 d8             	mov    -0x28(%ebp),%esi
  105b39:	c1 e6 16             	shl    $0x16,%esi
  105b3c:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  105b3f:	c1 e7 0c             	shl    $0xc,%edi
  105b42:	01 fe                	add    %edi,%esi
  105b44:	89 75 d0             	mov    %esi,-0x30(%ebp)

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  105b47:	81 7d d0 00 00 00 01 	cmpl   $0x1000000,-0x30(%ebp)
  105b4e:	0f 97 c3             	seta   %bl
  105b51:	84 db                	test   %bl,%bl
  105b53:	0f 44 d1             	cmove  %ecx,%edx
  105b56:	81 7d d0 00 10 40 20 	cmpl   $0x20401000,-0x30(%ebp)
  105b5d:	0f 97 c3             	seta   %bl
  105b60:	84 db                	test   %bl,%bl
  105b62:	0f 44 c1             	cmove  %ecx,%eax
  105b65:	09 c2                	or     %eax,%edx
  105b67:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105b6a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105b6d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  105b70:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  105b73:	89 14 81             	mov    %edx,(%ecx,%eax,4)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
  105b76:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105b79:	05 01 00 00 00       	add    $0x1,%eax
  105b7e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  105b81:	e9 94 ff ff ff       	jmp    105b1a <vmm_create_vpdraw+0x11a>

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
						(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
  105b86:	e9 00 00 00 00       	jmp    105b8b <vmm_create_vpdraw+0x18b>
	}
  105b8b:	e9 00 00 00 00       	jmp    105b90 <vmm_create_vpdraw+0x190>
		*pagedir = phys_pagedir;

	uint32_t* pagedir_ptr = vmm_alloc(0);
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  105b90:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105b93:	05 01 00 00 00       	add    $0x1,%eax
  105b98:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105b9b:	e9 ce fe ff ff       	jmp    105a6e <vmm_create_vpdraw+0x6e>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  105ba0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  105ba7:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  105bae:	0f 83 58 00 00 00    	jae    105c0c <vmm_create_vpdraw+0x20c>
  105bb4:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
  105bb9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105bbc:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105bbf:	8b 12                	mov    (%edx),%edx
  105bc1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105bc4:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  105bca:	89 4d dc             	mov    %ecx,-0x24(%ebp)
		map_address_context(pagedir_ptr,
  105bcd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105bd0:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  105bd6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  105bd9:	c1 e6 0c             	shl    $0xc,%esi
  105bdc:	01 f2                	add    %esi,%edx
  105bde:	8b 75 dc             	mov    -0x24(%ebp),%esi
  105be1:	89 0c 24             	mov    %ecx,(%esp)
  105be4:	89 54 24 04          	mov    %edx,0x4(%esp)
  105be8:	89 74 24 08          	mov    %esi,0x8(%esp)
  105bec:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105bf3:	00 
  105bf4:	89 45 c0             	mov    %eax,-0x40(%ebp)
  105bf7:	e8 14 01 00 00       	call   105d10 <map_address_context>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  105bfc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105bff:	05 01 00 00 00       	add    $0x1,%eax
  105c04:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105c07:	e9 9b ff ff ff       	jmp    105ba7 <vmm_create_vpdraw+0x1a7>
  105c0c:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
  105c11:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105c14:	8b 15 e8 71 10 00    	mov    0x1071e8,%edx
  105c1a:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105c1d:	89 0c 24             	mov    %ecx,(%esp)
  105c20:	89 54 24 04          	mov    %edx,0x4(%esp)
  105c24:	89 74 24 08          	mov    %esi,0x8(%esp)
  105c28:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105c2f:	00 
  105c30:	89 45 bc             	mov    %eax,-0x44(%ebp)
  105c33:	e8 d8 00 00 00       	call   105d10 <map_address_context>
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  105c38:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  105c3f:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
  105c45:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  105c48:	0f 83 39 00 00 00    	jae    105c87 <vmm_create_vpdraw+0x287>
  105c4e:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(pagedir_ptr, i, i, 0);
  105c53:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105c56:	8b 55 d8             	mov    -0x28(%ebp),%edx
  105c59:	8b 75 d8             	mov    -0x28(%ebp),%esi
  105c5c:	89 0c 24             	mov    %ecx,(%esp)
  105c5f:	89 54 24 04          	mov    %edx,0x4(%esp)
  105c63:	89 74 24 08          	mov    %esi,0x8(%esp)
  105c67:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105c6e:	00 
  105c6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  105c72:	e8 99 00 00 00       	call   105d10 <map_address_context>
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  105c77:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105c7a:	05 00 10 00 00       	add    $0x1000,%eax
  105c7f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105c82:	e9 b8 ff ff ff       	jmp    105c3f <vmm_create_vpdraw+0x23f>
		map_address_context(pagedir_ptr, i, i, 0);
	}

	uint32_t* pd_ptr = context->pagedir;
  105c87:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105c8a:	8b 00                	mov    (%eax),%eax
  105c8c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	context->pagedir = (uint32_t*) phys_pagedir;
  105c8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105c92:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  105c95:	89 01                	mov    %eax,(%ecx)

	vmm_unmap(pd_ptr);
  105c97:	8b 45 cc             	mov    -0x34(%ebp),%eax
  105c9a:	89 04 24             	mov    %eax,(%esp)
  105c9d:	e8 fe 00 00 00       	call   105da0 <vmm_unmap>
	vmm_unmap(context);
  105ca2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105ca5:	89 04 24             	mov    %eax,(%esp)
  105ca8:	e8 f3 00 00 00       	call   105da0 <vmm_unmap>

	return pagedir_ptr;
  105cad:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105cb0:	83 c4 4c             	add    $0x4c,%esp
  105cb3:	5e                   	pop    %esi
  105cb4:	5f                   	pop    %edi
  105cb5:	5b                   	pop    %ebx
  105cb6:	5d                   	pop    %ebp
  105cb7:	c3                   	ret    
  105cb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  105cbf:	00 

00105cc0 <vmm_alloc_user>:

void* vmm_alloc_ucont(uint32_t cont) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  105cc0:	55                   	push   %ebp
  105cc1:	89 e5                	mov    %esp,%ebp
  105cc3:	56                   	push   %esi
  105cc4:	83 ec 24             	sub    $0x24,%esp
  105cc7:	8b 45 08             	mov    0x8(%ebp),%eax
  105cca:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  105ccf:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  105cd4:	be 01 00 00 00       	mov    $0x1,%esi
  105cd9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  105cdc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105cdf:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  105ce6:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  105ced:	ff 
  105cee:	89 44 24 08          	mov    %eax,0x8(%esp)
  105cf2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  105cf9:	00 
  105cfa:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105cfd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105d00:	89 55 ec             	mov    %edx,-0x14(%ebp)
  105d03:	e8 b8 04 00 00       	call   1061c0 <vmm_alloc_in_range>
  105d08:	83 c4 24             	add    $0x24,%esp
  105d0b:	5e                   	pop    %esi
  105d0c:	5d                   	pop    %ebp
  105d0d:	c3                   	ret    
  105d0e:	66 90                	xchg   %ax,%ax

00105d10 <map_address_context>:
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
  105d10:	55                   	push   %ebp
  105d11:	89 e5                	mov    %esp,%ebp
  105d13:	56                   	push   %esi
  105d14:	83 ec 18             	sub    $0x18,%esp
  105d17:	8b 45 14             	mov    0x14(%ebp),%eax
  105d1a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  105d1d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105d20:	8b 75 08             	mov    0x8(%ebp),%esi
  105d23:	89 75 f8             	mov    %esi,-0x8(%ebp)
  105d26:	89 55 f4             	mov    %edx,-0xc(%ebp)
  105d29:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105d2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32_t pd_entry = vaddr >> 22;
  105d2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105d32:	c1 e8 16             	shr    $0x16,%eax
  105d35:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32_t pt_entry = (vaddr >> 12) % 1024;
  105d38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105d3b:	c1 e8 0c             	shr    $0xc,%eax
  105d3e:	25 ff 03 00 00       	and    $0x3ff,%eax
  105d43:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  105d46:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105d49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105d4e:	0d 01 00 00 00       	or     $0x1,%eax
  105d53:	0d 02 00 00 00       	or     $0x2,%eax
  105d58:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105d5b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  105d61:	09 c8                	or     %ecx,%eax
  105d63:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105d66:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105d69:	8b 75 f8             	mov    -0x8(%ebp),%esi
  105d6c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  105d6f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  105d75:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105d78:	81 e1 04 02 00 00    	and    $0x204,%ecx
  105d7e:	09 c8                	or     %ecx,%eax
  105d80:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105d83:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105d86:	8b 75 f8             	mov    -0x8(%ebp),%esi
  105d89:	8b 14 96             	mov    (%esi,%edx,4),%edx
  105d8c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  105d92:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}
  105d95:	83 c4 18             	add    $0x18,%esp
  105d98:	5e                   	pop    %esi
  105d99:	5d                   	pop    %ebp
  105d9a:	c3                   	ret    
  105d9b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00105da0 <vmm_unmap>:
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  105da0:	55                   	push   %ebp
  105da1:	89 e5                	mov    %esp,%ebp
  105da3:	83 ec 08             	sub    $0x8,%esp
  105da6:	8b 45 08             	mov    0x8(%ebp),%eax
  105da9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  105dac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105daf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  105db2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105db5:	c1 e8 0c             	shr    $0xc,%eax
  105db8:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105dbe:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105dc1:	25 01 02 00 00       	and    $0x201,%eax
  105dc6:	3d 01 02 00 00       	cmp    $0x201,%eax
  105dcb:	0f 85 2e 00 00 00    	jne    105dff <vmm_unmap+0x5f>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  105dd1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105dd4:	c1 e8 0c             	shr    $0xc,%eax
  105dd7:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105ddd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105de0:	25 04 00 00 00       	and    $0x4,%eax
  105de5:	0d 00 02 00 00       	or     $0x200,%eax
  105dea:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105ded:	c1 e9 0c             	shr    $0xc,%ecx
  105df0:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  105df6:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  105df9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105dfc:	0f 01 38             	invlpg (%eax)
	}
}
  105dff:	83 c4 08             	add    $0x8,%esp
  105e02:	5d                   	pop    %ebp
  105e03:	c3                   	ret    
  105e04:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105e0b:	00 00 00 00 00 

00105e10 <vmm_free_pdptr>:
	vmm_unmap(context);

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  105e10:	55                   	push   %ebp
  105e11:	89 e5                	mov    %esp,%ebp
  105e13:	83 ec 18             	sub    $0x18,%esp
  105e16:	8b 45 08             	mov    0x8(%ebp),%eax
  105e19:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (uint32_t i = 0; i < 1024; i++) {
  105e1c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  105e23:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  105e2a:	0f 83 21 00 00 00    	jae    105e51 <vmm_free_pdptr+0x41>
		vmm_unmap((void*) pagedir_ptr[i]);
  105e30:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e33:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105e36:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105e39:	89 04 24             	mov    %eax,(%esp)
  105e3c:	e8 5f ff ff ff       	call   105da0 <vmm_unmap>

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
	for (uint32_t i = 0; i < 1024; i++) {
  105e41:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e44:	05 01 00 00 00       	add    $0x1,%eax
  105e49:	89 45 f8             	mov    %eax,-0x8(%ebp)
  105e4c:	e9 d2 ff ff ff       	jmp    105e23 <vmm_free_pdptr+0x13>
		vmm_unmap((void*) pagedir_ptr[i]);
	}

	vmm_unmap(pagedir_ptr);
  105e51:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105e54:	89 04 24             	mov    %eax,(%esp)
  105e57:	e8 44 ff ff ff       	call   105da0 <vmm_unmap>
}
  105e5c:	83 c4 18             	add    $0x18,%esp
  105e5f:	5d                   	pop    %ebp
  105e60:	c3                   	ret    
  105e61:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105e68:	0f 1f 84 00 00 00 00 
  105e6f:	00 

00105e70 <vmm_create_pagedir>:
	vmm_free_pdptr(pdptr);

	return phys_pagedir;
}

uint32_t vmm_create_pagedir() {
  105e70:	55                   	push   %ebp
  105e71:	89 e5                	mov    %esp,%ebp
  105e73:	83 ec 18             	sub    $0x18,%esp
  105e76:	8d 45 fc             	lea    -0x4(%ebp),%eax
	uint32_t phys_pagedir;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  105e79:	89 04 24             	mov    %eax,(%esp)
  105e7c:	e8 7f fb ff ff       	call   105a00 <vmm_create_vpdraw>
  105e81:	89 45 f8             	mov    %eax,-0x8(%ebp)
	vmm_free_pdptr(pdptr);
  105e84:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e87:	89 04 24             	mov    %eax,(%esp)
  105e8a:	e8 81 ff ff ff       	call   105e10 <vmm_free_pdptr>

	return phys_pagedir;
  105e8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105e92:	83 c4 18             	add    $0x18,%esp
  105e95:	5d                   	pop    %ebp
  105e96:	c3                   	ret    
  105e97:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  105e9e:	00 00 

00105ea0 <vmm_resolve>:
}

uint32_t vmm_resolve(void* vaddr) {
  105ea0:	55                   	push   %ebp
  105ea1:	89 e5                	mov    %esp,%ebp
  105ea3:	50                   	push   %eax
  105ea4:	8b 45 08             	mov    0x8(%ebp),%eax
  105ea7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return active_pagetables[(uint32_t) vaddr >> 12] & 0xFFFFF000;
  105eaa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105ead:	c1 e8 0c             	shr    $0xc,%eax
  105eb0:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105eb6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105eb9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105ebe:	83 c4 04             	add    $0x4,%esp
  105ec1:	5d                   	pop    %ebp
  105ec2:	c3                   	ret    
  105ec3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105eca:	84 00 00 00 00 00 

00105ed0 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  105ed0:	55                   	push   %ebp
  105ed1:	89 e5                	mov    %esp,%ebp
  105ed3:	83 ec 38             	sub    $0x38,%esp
  105ed6:	8b 45 0c             	mov    0xc(%ebp),%eax
  105ed9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105edc:	ba 00 00 00 00       	mov    $0x0,%edx
  105ee1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  105ee4:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uint32_t pd_entry = (uint32_t) vaddr >> 22;
  105ee7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105eea:	c1 e8 16             	shr    $0x16,%eax
  105eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = ((uint32_t) vaddr >> 12) % 1024;
  105ef0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105ef3:	c1 e8 0c             	shr    $0xc,%eax
  105ef6:	25 ff 03 00 00       	and    $0x3ff,%eax
  105efb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32_t* vpd = vmm_alloc(0);
  105efe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105f05:	89 55 e0             	mov    %edx,-0x20(%ebp)
  105f08:	e8 83 00 00 00       	call   105f90 <vmm_alloc>
  105f0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vmm_free(vpd);
  105f10:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105f13:	89 04 24             	mov    %eax,(%esp)
  105f16:	e8 c5 00 00 00       	call   105fe0 <vmm_free>
  105f1b:	b8 00 00 00 00       	mov    $0x0,%eax

	map_address_active((uint32_t) vpd, pdir, 0);
  105f20:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105f23:	8b 55 fc             	mov    -0x4(%ebp),%edx
  105f26:	89 0c 24             	mov    %ecx,(%esp)
  105f29:	89 54 24 04          	mov    %edx,0x4(%esp)
  105f2d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105f34:	00 
  105f35:	89 45 dc             	mov    %eax,-0x24(%ebp)
  105f38:	e8 23 01 00 00       	call   106060 <map_address_active>
  105f3d:	b8 00 00 00 00       	mov    $0x0,%eax
	uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  105f42:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105f45:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105f48:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105f4b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  105f51:	89 4d e8             	mov    %ecx,-0x18(%ebp)

	map_address_active((uint32_t) vpd, table, 0);
  105f54:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105f57:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105f5a:	89 0c 24             	mov    %ecx,(%esp)
  105f5d:	89 54 24 04          	mov    %edx,0x4(%esp)
  105f61:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105f68:	00 
  105f69:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105f6c:	e8 ef 00 00 00       	call   106060 <map_address_active>
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  105f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105f74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105f77:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105f7a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105f7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	return addr & 0xFFFFF000;
  105f82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105f85:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105f8a:	83 c4 38             	add    $0x38,%esp
  105f8d:	5d                   	pop    %ebp
  105f8e:	c3                   	ret    
  105f8f:	90                   	nop

00105f90 <vmm_alloc>:

void* vmm_alloc_cont(uint32_t cont) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
}

void* vmm_alloc(uint32_t* retpaddr) {
  105f90:	55                   	push   %ebp
  105f91:	89 e5                	mov    %esp,%ebp
  105f93:	56                   	push   %esi
  105f94:	83 ec 24             	sub    $0x24,%esp
  105f97:	8b 45 08             	mov    0x8(%ebp),%eax
  105f9a:	b9 00 00 00 01       	mov    $0x1000000,%ecx
  105f9f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  105fa4:	be 01 00 00 00       	mov    $0x1,%esi
  105fa9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  105fac:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105faf:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
  105fb6:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  105fbd:	20 
  105fbe:	89 44 24 08          	mov    %eax,0x8(%esp)
  105fc2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  105fc9:	00 
  105fca:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105fcd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105fd0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  105fd3:	e8 e8 01 00 00       	call   1061c0 <vmm_alloc_in_range>
  105fd8:	83 c4 24             	add    $0x24,%esp
  105fdb:	5e                   	pop    %esi
  105fdc:	5d                   	pop    %ebp
  105fdd:	c3                   	ret    
  105fde:	66 90                	xchg   %ax,%ax

00105fe0 <vmm_free>:
			| PT_WRITE | (flags & 0xFFF)
			| (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  105fe0:	55                   	push   %ebp
  105fe1:	89 e5                	mov    %esp,%ebp
  105fe3:	83 ec 18             	sub    $0x18,%esp
  105fe6:	8b 45 08             	mov    0x8(%ebp),%eax
  105fe9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  105fec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105fef:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  105ff2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105ff5:	c1 e8 0c             	shr    $0xc,%eax
  105ff8:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105ffe:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106001:	25 01 02 00 00       	and    $0x201,%eax
  106006:	3d 01 02 00 00       	cmp    $0x201,%eax
  10600b:	0f 85 4a 00 00 00    	jne    10605b <vmm_free+0x7b>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));
  106011:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106014:	c1 e8 0c             	shr    $0xc,%eax
  106017:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  10601d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106020:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106025:	89 04 24             	mov    %eax,(%esp)
  106028:	e8 33 c7 ff ff       	call   102760 <pmm_free>

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  10602d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106030:	c1 e8 0c             	shr    $0xc,%eax
  106033:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  106039:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10603c:	25 04 00 00 00       	and    $0x4,%eax
  106041:	0d 00 02 00 00       	or     $0x200,%eax
  106046:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106049:	c1 e9 0c             	shr    $0xc,%ecx
  10604c:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  106052:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  106055:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106058:	0f 01 38             	invlpg (%eax)
	}
}
  10605b:	83 c4 18             	add    $0x18,%esp
  10605e:	5d                   	pop    %ebp
  10605f:	c3                   	ret    

00106060 <map_address_active>:
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  106060:	55                   	push   %ebp
  106061:	89 e5                	mov    %esp,%ebp
  106063:	83 ec 0c             	sub    $0xc,%esp
  106066:	8b 45 10             	mov    0x10(%ebp),%eax
  106069:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10606c:	8b 55 08             	mov    0x8(%ebp),%edx
  10606f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  106072:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  106075:	89 45 f4             	mov    %eax,-0xc(%ebp)
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT
  106078:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10607b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  106080:	0d 01 00 00 00       	or     $0x1,%eax
  106085:	0d 02 00 00 00       	or     $0x2,%eax
  10608a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10608d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  106093:	09 c8                	or     %ecx,%eax
  106095:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106098:	c1 e9 0c             	shr    $0xc,%ecx
  10609b:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  1060a1:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  1060a4:	81 e1 04 02 00 00    	and    $0x204,%ecx
  1060aa:	09 c8                	or     %ecx,%eax
  1060ac:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1060af:	c1 e9 0c             	shr    $0xc,%ecx
  1060b2:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  1060b8:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			| PT_WRITE | (flags & 0xFFF)
			| (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  1060bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1060be:	0f 01 38             	invlpg (%eax)
}
  1060c1:	83 c4 0c             	add    $0xc,%esp
  1060c4:	5d                   	pop    %ebp
  1060c5:	c3                   	ret    
  1060c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1060cd:	00 00 00 

001060d0 <vmm_map_range>:
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;

	return addr & 0xFFFFF000;
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  1060d0:	55                   	push   %ebp
  1060d1:	89 e5                	mov    %esp,%ebp
  1060d3:	56                   	push   %esi
  1060d4:	83 ec 24             	sub    $0x24,%esp
  1060d7:	8b 45 14             	mov    0x14(%ebp),%eax
  1060da:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1060dd:	8b 55 0c             	mov    0xc(%ebp),%edx
  1060e0:	8b 75 08             	mov    0x8(%ebp),%esi
  1060e3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  1060e6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1060e9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1060ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((uint32_t) vaddr & 0xFFF)
  1060ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1060f2:	25 ff 0f 00 00       	and    $0xfff,%eax
  1060f7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1060fc:	0f 84 05 00 00 00    	je     106107 <vmm_map_range+0x37>
		return;
  106102:	e9 5a 00 00 00       	jmp    106161 <vmm_map_range+0x91>
	if ((uint32_t) paddr & 0xFFF)
  106107:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10610a:	25 ff 0f 00 00       	and    $0xfff,%eax
  10610f:	3d 00 00 00 00       	cmp    $0x0,%eax
  106114:	0f 84 05 00 00 00    	je     10611f <vmm_map_range+0x4f>
		return;
  10611a:	e9 42 00 00 00       	jmp    106161 <vmm_map_range+0x91>

	for (uint32_t i = 0; i < length; i += 0x1000) {
  10611f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  106126:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106129:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10612c:	0f 83 2f 00 00 00    	jae    106161 <vmm_map_range+0x91>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
  106132:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106135:	03 45 e8             	add    -0x18(%ebp),%eax
  106138:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10613b:	03 4d e8             	add    -0x18(%ebp),%ecx
  10613e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  106141:	89 04 24             	mov    %eax,(%esp)
  106144:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106148:	89 54 24 08          	mov    %edx,0x8(%esp)
  10614c:	e8 0f ff ff ff       	call   106060 <map_address_active>
	if ((uint32_t) vaddr & 0xFFF)
		return;
	if ((uint32_t) paddr & 0xFFF)
		return;

	for (uint32_t i = 0; i < length; i += 0x1000) {
  106151:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106154:	05 00 10 00 00       	add    $0x1000,%eax
  106159:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10615c:	e9 c5 ff ff ff       	jmp    106126 <vmm_map_range+0x56>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}
  106161:	83 c4 24             	add    $0x24,%esp
  106164:	5e                   	pop    %esi
  106165:	5d                   	pop    %ebp
  106166:	c3                   	ret    
  106167:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10616e:	00 00 

00106170 <vmm_alloc_ucont>:
	}

	return vaddr;
}

void* vmm_alloc_ucont(uint32_t cont) {
  106170:	55                   	push   %ebp
  106171:	89 e5                	mov    %esp,%ebp
  106173:	56                   	push   %esi
  106174:	83 ec 24             	sub    $0x24,%esp
  106177:	8b 45 08             	mov    0x8(%ebp),%eax
  10617a:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  10617f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  106184:	be 00 00 00 00       	mov    $0x0,%esi
  106189:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  10618c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10618f:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  106196:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  10619d:	ff 
  10619e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1061a5:	00 
  1061a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  1061aa:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1061ad:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1061b0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1061b3:	e8 08 00 00 00       	call   1061c0 <vmm_alloc_in_range>
  1061b8:	83 c4 24             	add    $0x24,%esp
  1061bb:	5e                   	pop    %esi
  1061bc:	5d                   	pop    %ebp
  1061bd:	c3                   	ret    
  1061be:	66 90                	xchg   %ax,%ax

001061c0 <vmm_alloc_in_range>:
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr,
		uint32_t cont) {
  1061c0:	55                   	push   %ebp
  1061c1:	89 e5                	mov    %esp,%ebp
  1061c3:	56                   	push   %esi
  1061c4:	83 ec 34             	sub    $0x34,%esp
  1061c7:	8b 45 14             	mov    0x14(%ebp),%eax
  1061ca:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1061cd:	8b 55 0c             	mov    0xc(%ebp),%edx
  1061d0:	8b 75 08             	mov    0x8(%ebp),%esi
  1061d3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  1061d6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1061d9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1061dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* vaddr = 0;
  1061df:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32_t i = 0;
  1061e6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32_t c = 0;
  1061ed:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  1061f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1061f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1061fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1061ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106202:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  106205:	0f 83 6f 00 00 00    	jae    10627a <vmm_alloc_in_range+0xba>
		if ((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  10620b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10620e:	c1 e8 0c             	shr    $0xc,%eax
  106211:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  106217:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10621a:	25 01 02 00 00       	and    $0x201,%eax
  10621f:	3d 00 02 00 00       	cmp    $0x200,%eax
  106224:	0f 85 34 00 00 00    	jne    10625e <vmm_alloc_in_range+0x9e>
				== PT_ALLOCATABLE) {
			if (c == 0)
  10622a:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  106231:	0f 85 06 00 00 00    	jne    10623d <vmm_alloc_in_range+0x7d>
				vaddr = (void*) i;
  106237:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10623a:	89 45 e8             	mov    %eax,-0x18(%ebp)
			c++;
  10623d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  106240:	05 01 00 00 00       	add    $0x1,%eax
  106245:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (c >= cont)
  106248:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10624b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10624e:	0f 82 05 00 00 00    	jb     106259 <vmm_alloc_in_range+0x99>
				break;
  106254:	e9 21 00 00 00       	jmp    10627a <vmm_alloc_in_range+0xba>
		} else {
  106259:	e9 07 00 00 00       	jmp    106265 <vmm_alloc_in_range+0xa5>
			c = 0;
  10625e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
	}
  106265:	e9 00 00 00 00       	jmp    10626a <vmm_alloc_in_range+0xaa>
		uint32_t cont) {
	void* vaddr = 0;
	uint32_t i = 0;
	uint32_t c = 0;

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  10626a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10626d:	05 00 10 00 00       	add    $0x1000,%eax
  106272:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  106275:	e9 85 ff ff ff       	jmp    1061ff <vmm_alloc_in_range+0x3f>
		} else {
			c = 0;
		}
	}

	uint32_t off = 0;
  10627a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	while (c--) {
  106281:	8b 45 e0             	mov    -0x20(%ebp),%eax
  106284:	89 c1                	mov    %eax,%ecx
  106286:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10628c:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10628f:	3d 00 00 00 00       	cmp    $0x0,%eax
  106294:	0f 84 59 00 00 00    	je     1062f3 <vmm_alloc_in_range+0x133>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
  10629a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10629d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1062a0:	c1 e1 0c             	shl    $0xc,%ecx
  1062a3:	01 c8                	add    %ecx,%eax
  1062a5:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  1062ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1062af:	0f 85 0b 00 00 00    	jne    1062c0 <vmm_alloc_in_range+0x100>
  1062b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1062b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1062bb:	e9 0d 00 00 00       	jmp    1062cd <vmm_alloc_in_range+0x10d>
  1062c0:	b8 00 00 00 00       	mov    $0x0,%eax
  1062c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1062c8:	e9 00 00 00 00       	jmp    1062cd <vmm_alloc_in_range+0x10d>
  1062cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1062d0:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1062d3:	89 0c 24             	mov    %ecx,(%esp)
  1062d6:	89 44 24 04          	mov    %eax,0x4(%esp)
  1062da:	e8 71 00 00 00       	call   106350 <vmm_alloc_addr>
		off++;
  1062df:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1062e2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1062e8:	89 4d dc             	mov    %ecx,-0x24(%ebp)
	}
  1062eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1062ee:	e9 8e ff ff ff       	jmp    106281 <vmm_alloc_in_range+0xc1>

	return vaddr;
  1062f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1062f6:	83 c4 34             	add    $0x34,%esp
  1062f9:	5e                   	pop    %esi
  1062fa:	5d                   	pop    %ebp
  1062fb:	c3                   	ret    
  1062fc:	0f 1f 40 00          	nopl   0x0(%eax)

00106300 <vmm_alloc_cont>:

void* vmm_alloc_user(uint32_t* retpaddr) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
}

void* vmm_alloc_cont(uint32_t cont) {
  106300:	55                   	push   %ebp
  106301:	89 e5                	mov    %esp,%ebp
  106303:	56                   	push   %esi
  106304:	83 ec 24             	sub    $0x24,%esp
  106307:	8b 45 08             	mov    0x8(%ebp),%eax
  10630a:	b9 00 00 00 01       	mov    $0x1000000,%ecx
  10630f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  106314:	be 00 00 00 00       	mov    $0x0,%esi
  106319:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  10631c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10631f:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
  106326:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  10632d:	20 
  10632e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106335:	00 
  106336:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10633a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10633d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106340:	89 55 ec             	mov    %edx,-0x14(%ebp)
  106343:	e8 78 fe ff ff       	call   1061c0 <vmm_alloc_in_range>
  106348:	83 c4 24             	add    $0x24,%esp
  10634b:	5e                   	pop    %esi
  10634c:	5d                   	pop    %ebp
  10634d:	c3                   	ret    
  10634e:	66 90                	xchg   %ax,%ax

00106350 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  106350:	55                   	push   %ebp
  106351:	89 e5                	mov    %esp,%ebp
  106353:	56                   	push   %esi
  106354:	83 ec 34             	sub    $0x34,%esp
  106357:	8b 45 0c             	mov    0xc(%ebp),%eax
  10635a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10635d:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  106360:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (reqvaddr == 0) {
  106363:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10636a:	0f 85 34 00 00 00    	jne    1063a4 <vmm_alloc_addr+0x54>
  106370:	8d 05 1c 86 10 00    	lea    0x10861c,%eax
  106376:	b9 00 00 00 00       	mov    $0x0,%ecx
		kprintf(
  10637b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10637e:	89 04 24             	mov    %eax,(%esp)
  106381:	89 54 24 04          	mov    %edx,0x4(%esp)
  106385:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10638c:	00 
  10638d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  106390:	e8 db a1 ff ff       	call   100570 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
  106395:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10639c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10639f:	e9 9b 00 00 00       	jmp    10643f <vmm_alloc_addr+0xef>
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  1063a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1063a7:	c1 e8 0c             	shr    $0xc,%eax
  1063aa:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  1063b0:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1063b3:	25 01 02 00 00       	and    $0x201,%eax
  1063b8:	3d 00 02 00 00       	cmp    $0x200,%eax
  1063bd:	0f 84 37 00 00 00    	je     1063fa <vmm_alloc_addr+0xaa>
  1063c3:	8d 05 1c 86 10 00    	lea    0x10861c,%eax
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
  1063c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1063cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1063cf:	c1 ea 0c             	shr    $0xc,%edx
  1063d2:	8b 35 e4 71 10 00    	mov    0x1071e4,%esi
  1063d8:	8b 14 96             	mov    (%esi,%edx,4),%edx
  1063db:	89 04 24             	mov    %eax,(%esp)
  1063de:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1063e2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1063e6:	e8 85 a1 ff ff       	call   100570 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
		return 0;
  1063eb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1063f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1063f5:	e9 45 00 00 00       	jmp    10643f <vmm_alloc_addr+0xef>
  1063fa:	b8 04 02 00 00       	mov    $0x204,%eax
	}

	uint32_t paddr = (uint32_t) pmm_alloc();
  1063ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
  106402:	e8 39 c1 ff ff       	call   102540 <pmm_alloc>
  106407:	89 45 ec             	mov    %eax,-0x14(%ebp)
	map_address_active((uint32_t) reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  10640a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10640d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106410:	89 04 24             	mov    %eax,(%esp)
  106413:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106417:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  10641e:	00 
  10641f:	e8 3c fc ff ff       	call   106060 <map_address_active>

	if (retpaddr != 0)
  106424:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  10642b:	0f 84 08 00 00 00    	je     106439 <vmm_alloc_addr+0xe9>
		*retpaddr = paddr;
  106431:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106434:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106437:	89 01                	mov    %eax,(%ecx)

	return reqvaddr;
  106439:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10643c:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  10643f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106442:	83 c4 34             	add    $0x34,%esp
  106445:	5e                   	pop    %esi
  106446:	5d                   	pop    %ebp
  106447:	c3                   	ret    
  106448:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10644f:	00 

00106450 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  106450:	55                   	push   %ebp
  106451:	89 e5                	mov    %esp,%ebp
  106453:	50                   	push   %eax
  106454:	8b 45 08             	mov    0x8(%ebp),%eax
  106457:	89 45 fc             	mov    %eax,-0x4(%ebp)
	active_pagedir = pdpaddr;
  10645a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10645d:	a3 64 a4 10 00       	mov    %eax,0x10a464
	asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  106462:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106465:	0f 22 d8             	mov    %eax,%cr3
}
  106468:	83 c4 04             	add    $0x4,%esp
  10646b:	5d                   	pop    %ebp
  10646c:	c3                   	ret    
  10646d:	0f 1f 00             	nopl   (%eax)

00106470 <vmm_init>:

uint32_t vmm_init(void) {
  106470:	55                   	push   %ebp
  106471:	89 e5                	mov    %esp,%ebp
	//CREATE CONTEXT ************************************************************

	struct vmm_context* context = pmm_alloc();
  106473:	53                   	push   %ebx
  106474:	57                   	push   %edi
  106475:	56                   	push   %esi
  106476:	83 ec 3c             	sub    $0x3c,%esp
  106479:	e8 c2 c0 ff ff       	call   102540 <pmm_alloc>
  10647e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t i, i2;

	context->pagedir = pmm_alloc();
  106481:	e8 ba c0 ff ff       	call   102540 <pmm_alloc>
  106486:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106489:	89 01                	mov    %eax,(%ecx)

	for (i = 0; i < 1024; i++) {
  10648b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  106492:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  106499:	0f 83 d6 00 00 00    	jae    106575 <vmm_init+0x105>
		context->pagedir[i] = ((uint32_t) pmm_alloc());
  10649f:	e8 9c c0 ff ff       	call   102540 <pmm_alloc>
  1064a4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1064a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1064aa:	8b 12                	mov    (%edx),%edx
  1064ac:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
		if (i < PMEM_TABLES) {
  1064af:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  1064b6:	0f 83 15 00 00 00    	jae    1064d1 <vmm_init+0x61>
			kernel_pagetables[i] = context->pagedir[i];
  1064bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1064bf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1064c2:	8b 09                	mov    (%ecx),%ecx
  1064c4:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1064c7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1064ca:	89 04 8d 98 a4 18 00 	mov    %eax,0x18a498(,%ecx,4)
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  1064d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1064d4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1064d7:	8b 09                	mov    (%ecx),%ecx
  1064d9:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  1064dc:	81 ca 07 00 00 00    	or     $0x7,%edx
  1064e2:	89 14 81             	mov    %edx,(%ecx,%eax,4)

		for (i2 = 0; i2 < 1024; i2++) {
  1064e5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1064ec:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  1064f3:	0f 83 67 00 00 00    	jae    106560 <vmm_init+0xf0>
  1064f9:	b8 04 00 00 00       	mov    $0x4,%eax
  1064fe:	b9 00 00 00 00       	mov    $0x0,%ecx
  106503:	ba 00 02 00 00       	mov    $0x200,%edx
			uint32_t vaddr = (i << 22) + (i2 << 12);
  106508:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10650b:	c1 e6 16             	shl    $0x16,%esi
  10650e:	8b 7d e8             	mov    -0x18(%ebp),%edi
  106511:	c1 e7 0c             	shl    $0xc,%edi
  106514:	01 fe                	add    %edi,%esi
  106516:	89 75 e4             	mov    %esi,-0x1c(%ebp)

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  106519:	81 7d e4 00 00 00 01 	cmpl   $0x1000000,-0x1c(%ebp)
  106520:	0f 97 c3             	seta   %bl
  106523:	84 db                	test   %bl,%bl
  106525:	0f 44 d1             	cmove  %ecx,%edx
  106528:	81 7d e4 00 10 40 20 	cmpl   $0x20401000,-0x1c(%ebp)
  10652f:	0f 97 c3             	seta   %bl
  106532:	84 db                	test   %bl,%bl
  106534:	0f 44 c1             	cmove  %ecx,%eax
  106537:	09 c2                	or     %eax,%edx
  106539:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10653c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10653f:	8b 75 f0             	mov    -0x10(%ebp),%esi
  106542:	8b 36                	mov    (%esi),%esi
  106544:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  106547:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10654d:	89 14 81             	mov    %edx,(%ecx,%eax,4)
			kernel_pagetables[i] = context->pagedir[i];
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
  106550:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106553:	05 01 00 00 00       	add    $0x1,%eax
  106558:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10655b:	e9 8c ff ff ff       	jmp    1064ec <vmm_init+0x7c>

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}
  106560:	e9 00 00 00 00       	jmp    106565 <vmm_init+0xf5>
	struct vmm_context* context = pmm_alloc();
	uint32_t i, i2;

	context->pagedir = pmm_alloc();

	for (i = 0; i < 1024; i++) {
  106565:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106568:	05 01 00 00 00       	add    $0x1,%eax
  10656d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106570:	e9 1d ff ff ff       	jmp    106492 <vmm_init+0x22>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  106575:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10657c:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  106583:	0f 83 5a 00 00 00    	jae    1065e3 <vmm_init+0x173>
  106589:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  10658e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106591:	8b 55 f0             	mov    -0x10(%ebp),%edx
  106594:	8b 12                	mov    (%edx),%edx
  106596:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106599:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10659f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
		map_address_context(context->pagedir,
  1065a2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1065a5:	8b 09                	mov    (%ecx),%ecx
  1065a7:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  1065ad:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1065b0:	c1 e6 0c             	shl    $0xc,%esi
  1065b3:	01 f2                	add    %esi,%edx
  1065b5:	8b 75 e0             	mov    -0x20(%ebp),%esi
  1065b8:	89 0c 24             	mov    %ecx,(%esp)
  1065bb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1065bf:	89 74 24 08          	mov    %esi,0x8(%esp)
  1065c3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1065ca:	00 
  1065cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1065ce:	e8 3d f7 ff ff       	call   105d10 <map_address_context>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  1065d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1065d6:	05 01 00 00 00       	add    $0x1,%eax
  1065db:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1065de:	e9 99 ff ff ff       	jmp    10657c <vmm_init+0x10c>
  1065e3:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
  1065e8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1065eb:	8b 09                	mov    (%ecx),%ecx
  1065ed:	8b 15 e8 71 10 00    	mov    0x1071e8,%edx
  1065f3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1065f6:	89 0c 24             	mov    %ecx,(%esp)
  1065f9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1065fd:	89 74 24 08          	mov    %esi,0x8(%esp)
  106601:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  106608:	00 
  106609:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10660c:	e8 ff f6 ff ff       	call   105d10 <map_address_context>
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  106611:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  106618:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
  10661e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  106621:	0f 83 3b 00 00 00    	jae    106662 <vmm_init+0x1f2>
  106627:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(context->pagedir, i, i, 0);
  10662c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10662f:	8b 09                	mov    (%ecx),%ecx
  106631:	8b 55 ec             	mov    -0x14(%ebp),%edx
  106634:	8b 75 ec             	mov    -0x14(%ebp),%esi
  106637:	89 0c 24             	mov    %ecx,(%esp)
  10663a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10663e:	89 74 24 08          	mov    %esi,0x8(%esp)
  106642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  106649:	00 
  10664a:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10664d:	e8 be f6 ff ff       	call   105d10 <map_address_context>
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  106652:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106655:	05 00 10 00 00       	add    $0x1000,%eax
  10665a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10665d:	e9 b6 ff ff ff       	jmp    106618 <vmm_init+0x1a8>
		map_address_context(context->pagedir, i, i, 0);
	}

	//END CREATE CONTEXT ********************************************************

	vmm_activate_pagedir((uint32_t) context->pagedir);
  106662:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106665:	8b 00                	mov    (%eax),%eax
  106667:	89 04 24             	mov    %eax,(%esp)
  10666a:	e8 e1 fd ff ff       	call   106450 <vmm_activate_pagedir>

	uint32_t cr0;

	asm volatile("mov %%cr0, %0" : "=r" (cr0));
  10666f:	0f 20 c0             	mov    %cr0,%eax
  106672:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= (1 << 31);
  106675:	8b 45 dc             	mov    -0x24(%ebp),%eax
  106678:	0d 00 00 00 80       	or     $0x80000000,%eax
  10667d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	asm volatile("mov %0, %%cr0" : : "r" (cr0));
  106680:	8b 45 dc             	mov    -0x24(%ebp),%eax
  106683:	0f 22 c0             	mov    %eax,%cr0

	return (uint32_t) active_context->pagedir;
  106686:	a1 e8 71 10 00       	mov    0x1071e8,%eax
  10668b:	8b 00                	mov    (%eax),%eax
  10668d:	83 c4 3c             	add    $0x3c,%esp
  106690:	5e                   	pop    %esi
  106691:	5f                   	pop    %edi
  106692:	5b                   	pop    %ebx
  106693:	5d                   	pop    %ebp
  106694:	c3                   	ret    
  106695:	66 90                	xchg   %ax,%ax
  106697:	90                   	nop

00106698 <_start>:
  106698:	bc 68 a4 11 00       	mov    $0x11a468,%esp
  10669d:	53                   	push   %ebx
  10669e:	e8 6d 99 ff ff       	call   100010 <init>

001066a3 <_stop>:
  1066a3:	fa                   	cli    
  1066a4:	f4                   	hlt    
  1066a5:	eb fc                	jmp    1066a3 <_stop>
