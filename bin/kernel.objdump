
kernel/kernel:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 66                	in     $0x66,%al
  10000d:	90                   	nop
  10000e:	66 90                	xchg   %ax,%ax

00100010 <init>:
#include "pmm.h"
#include "vfs.h"

#define _VERSION "alphaKernelDev 1.01"

void init(struct multiboot_info* mb_info) {
  100010:	55                   	push   %ebp
  100011:	89 e5                	mov    %esp,%ebp
  100013:	83 ec 28             	sub    $0x28,%esp
  100016:	8b 45 08             	mov    0x8(%ebp),%eax
  100019:	89 45 fc             	mov    %eax,-0x4(%ebp)
	clrscr();
  10001c:	e8 af 04 00 00       	call   1004d0 <clrscr>
	pmm_init(mb_info);
  100021:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100024:	89 04 24             	mov    %eax,(%esp)
  100027:	e8 c4 24 00 00       	call   1024f0 <pmm_init>
  10002c:	8d 05 7c 80 10 00    	lea    0x10807c,%eax
  100032:	8d 0d 9f 80 10 00    	lea    0x10809f,%ecx

	kprintf("Welcome to mikrOS (version '%s')!\n", _VERSION);
  100038:	89 04 24             	mov    %eax,(%esp)
  10003b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10003f:	e8 0c 05 00 00       	call   100550 <kprintf>
  100044:	8d 0d b3 80 10 00    	lea    0x1080b3,%ecx
	kprintf("(C) Copyright 2012-2014 Fabian Sachara.  All Rights Reserved.\n");
  10004a:	89 0c 24             	mov    %ecx,(%esp)
  10004d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100050:	e8 fb 04 00 00       	call   100550 <kprintf>
  100055:	8d 0d f2 80 10 00    	lea    0x1080f2,%ecx

	kprintf("Initializing GDT...\n");
  10005b:	89 0c 24             	mov    %ecx,(%esp)
  10005e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100061:	e8 ea 04 00 00       	call   100550 <kprintf>

	init_gdt();
  100066:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100069:	e8 b2 0a 00 00       	call   100b20 <init_gdt>
  10006e:	8d 05 07 81 10 00    	lea    0x108107,%eax

	kprintf("Initializing IDT...\n");
  100074:	89 04 24             	mov    %eax,(%esp)
  100077:	e8 d4 04 00 00       	call   100550 <kprintf>
  10007c:	8d 0d 1c 81 10 00    	lea    0x10811c,%ecx

	init_idt();
  100082:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100085:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100088:	e8 b3 0c 00 00       	call   100d40 <init_idt>

	kprintf("Initializing in-kernel-Drivers...\n");
  10008d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100090:	89 04 24             	mov    %eax,(%esp)
  100093:	e8 b8 04 00 00       	call   100550 <kprintf>

	init_drivers();
  100098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10009b:	e8 30 00 00 00       	call   1000d0 <init_drivers>
  1000a0:	8d 05 3f 81 10 00    	lea    0x10813f,%eax

	kprintf("Initializing Kernel...\n");
  1000a6:	89 04 24             	mov    %eax,(%esp)
  1000a9:	e8 a2 04 00 00       	call   100550 <kprintf>

	pmm_print_stats();
  1000ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1000b1:	e8 4a 22 00 00       	call   102300 <pmm_print_stats>

	kernel_main(mb_info);
  1000b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000b9:	89 04 24             	mov    %eax,(%esp)
  1000bc:	e8 5f 1f 00 00       	call   102020 <kernel_main>

	return;
  1000c1:	83 c4 28             	add    $0x28,%esp
  1000c4:	5d                   	pop    %ebp
  1000c5:	c3                   	ret    
  1000c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1000cd:	00 00 00 

001000d0 <init_drivers>:
#ifndef DRVINIT_H
#define DRVINIT_H

#include "keyboard.h"

static inline void init_drivers() {
  1000d0:	55                   	push   %ebp
  1000d1:	89 e5                	mov    %esp,%ebp
    init_keyboard_drv();
  1000d3:	83 ec 08             	sub    $0x8,%esp
  1000d6:	e8 05 02 00 00       	call   1002e0 <init_keyboard_drv>
}
  1000db:	83 c4 08             	add    $0x8,%esp
  1000de:	5d                   	pop    %ebp
  1000df:	c3                   	ret    

001000e0 <translate_scancode>:

static uint8_t buffer[4096];
static int bfindex = 0;

uint8_t translate_scancode(int set, uint16_t scancode)
{
  1000e0:	55                   	push   %ebp
  1000e1:	89 e5                	mov    %esp,%ebp
  1000e3:	83 ec 28             	sub    $0x28,%esp
  1000e6:	0f b7 45 0c          	movzwl 0xc(%ebp),%eax
  1000ea:	66 89 c1             	mov    %ax,%cx
  1000ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1000f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1000f3:	66 89 4d fa          	mov    %cx,-0x6(%ebp)
  uint8_t keycode = 0;
  1000f7:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)

  switch (set) {
  1000fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1000fe:	89 c2                	mov    %eax,%edx
  100100:	83 ea 02             	sub    $0x2,%edx
  100103:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100106:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100109:	0f 84 4f 00 00 00    	je     10015e <translate_scancode+0x7e>
  10010f:	e9 00 00 00 00       	jmp    100114 <translate_scancode+0x34>
  100114:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100117:	83 e8 01             	sub    $0x1,%eax
  10011a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10011d:	0f 84 28 00 00 00    	je     10014b <translate_scancode+0x6b>
  100123:	e9 00 00 00 00       	jmp    100128 <translate_scancode+0x48>
  100128:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10012b:	85 c0                	test   %eax,%eax
  10012d:	0f 85 54 00 00 00    	jne    100187 <translate_scancode+0xa7>
  100133:	e9 00 00 00 00       	jmp    100138 <translate_scancode+0x58>
    case 0:
      keycode = sc_to_kc[0][scancode];
  100138:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10013c:	8a 0c 05 00 70 10 00 	mov    0x107000(,%eax,1),%cl
  100143:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100146:	e9 3c 00 00 00       	jmp    100187 <translate_scancode+0xa7>
    case 1:
      keycode = sc_to_kc[1][scancode];
  10014b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  10014f:	8a 0c 05 80 70 10 00 	mov    0x107080(,%eax,1),%cl
  100156:	88 4d f9             	mov    %cl,-0x7(%ebp)
      break;
  100159:	e9 29 00 00 00       	jmp    100187 <translate_scancode+0xa7>
    case 2:
      switch (scancode) {
  10015e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
  100162:	2d 1d 45 00 00       	sub    $0x451d,%eax
  100167:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10016a:	0f 85 0e 00 00 00    	jne    10017e <translate_scancode+0x9e>
  100170:	e9 00 00 00 00       	jmp    100175 <translate_scancode+0x95>
        case 0x451D:
          keycode = 119;
  100175:	c6 45 f9 77          	movb   $0x77,-0x7(%ebp)
          break;
  100179:	e9 04 00 00 00       	jmp    100182 <translate_scancode+0xa2>

        default:
          keycode = 0x0;	
  10017e:	c6 45 f9 00          	movb   $0x0,-0x7(%ebp)
      };
      break;
  100182:	e9 00 00 00 00       	jmp    100187 <translate_scancode+0xa7>
  }

  if (keycode == 0) {
  100187:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  10018b:	3d 00 00 00 00       	cmp    $0x0,%eax
  100190:	0f 85 20 00 00 00    	jne    1001b6 <translate_scancode+0xd6>
  100196:	8d 05 57 81 10 00    	lea    0x108157,%eax
      kprintf("kbc: Unbekannter Scancode: 0x%x (%d)\n", scancode, set);
  10019c:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
  1001a0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1001a3:	89 04 24             	mov    %eax,(%esp)
  1001a6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001aa:	89 54 24 08          	mov    %edx,0x8(%esp)
  1001ae:	e8 9d 03 00 00       	call   100550 <kprintf>
  1001b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  }

  return keycode;
  1001b6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
  1001ba:	83 c4 28             	add    $0x28,%esp
  1001bd:	5d                   	pop    %ebp
  1001be:	c3                   	ret    
  1001bf:	90                   	nop

001001c0 <keyboard_handler>:
}

void keyboard_handler() {    
  1001c0:	55                   	push   %ebp
  1001c1:	89 e5                	mov    %esp,%ebp
  return;
  1001c3:	5d                   	pop    %ebp
  1001c4:	c3                   	ret    
  1001c5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1001cc:	00 00 00 00 

001001d0 <getc>:
		//buffer[bfindex] = keycode;
		//bfindex++;	
	}
}

char getc() {
  1001d0:	55                   	push   %ebp
  1001d1:	89 e5                	mov    %esp,%ebp
	char ret = buffer[0];
  1001d3:	83 ec 08             	sub    $0x8,%esp
  1001d6:	a0 0a 90 10 00       	mov    0x10900a,%al
  1001db:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	int i;
	for(i = 0; i < bfindex; i++) {
  1001de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1001e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001e8:	3b 05 0c a0 10 00    	cmp    0x10a00c,%eax
  1001ee:	0f 8d 24 00 00 00    	jge    100218 <getc+0x48>
		buffer[i] = buffer[i+1];	
  1001f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001f7:	8a 0c 05 0b 90 10 00 	mov    0x10900b(,%eax,1),%cl
  1001fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100201:	88 0c 05 0a 90 10 00 	mov    %cl,0x10900a(,%eax,1)

char getc() {
	char ret = buffer[0];
	
	int i;
	for(i = 0; i < bfindex; i++) {
  100208:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10020b:	05 01 00 00 00       	add    $0x1,%eax
  100210:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100213:	e9 cd ff ff ff       	jmp    1001e5 <getc+0x15>
		buffer[i] = buffer[i+1];	
	}
	bfindex--;
  100218:	a1 0c a0 10 00       	mov    0x10a00c,%eax
  10021d:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100222:	a3 0c a0 10 00       	mov    %eax,0x10a00c

	return ret;
  100227:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  10022b:	83 c4 08             	add    $0x8,%esp
  10022e:	5d                   	pop    %ebp
  10022f:	c3                   	ret    

00100230 <send_command>:
}

void send_command(uint8_t command) {
  100230:	55                   	push   %ebp
  100231:	89 e5                	mov    %esp,%ebp
  100233:	83 ec 18             	sub    $0x18,%esp
  100236:	8a 45 08             	mov    0x8(%ebp),%al
  100239:	88 45 ff             	mov    %al,-0x1(%ebp)
  10023c:	b8 64 00 00 00       	mov    $0x64,%eax
	while((inb(0x64) & 0x2)) { }
  100241:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100248:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10024b:	e8 40 00 00 00       	call   100290 <inb>
  100250:	0f b6 c8             	movzbl %al,%ecx
  100253:	81 e1 02 00 00 00    	and    $0x2,%ecx
  100259:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  10025f:	0f 84 05 00 00 00    	je     10026a <send_command+0x3a>
  100265:	e9 d2 ff ff ff       	jmp    10023c <send_command+0xc>
  10026a:	b8 60 00 00 00       	mov    $0x60,%eax
	outb(0x60, command);
  10026f:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100276:	0f b6 4d ff          	movzbl -0x1(%ebp),%ecx
  10027a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10027e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100281:	e8 2a 00 00 00       	call   1002b0 <outb>
}
  100286:	83 c4 18             	add    $0x18,%esp
  100289:	5d                   	pop    %ebp
  10028a:	c3                   	ret    
  10028b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100290 <inb>:
    uint16_t result;
    asm volatile ("inw %1, %0" : "=a" (result) : "Nd" (_port));
    return result;
}

static inline uint8_t inb(uint16_t _port) {
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	50                   	push   %eax
  100294:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  100298:	66 89 c1             	mov    %ax,%cx
  10029b:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
    uint8_t result;
    asm volatile ("inb %1, %0" : "=a" (result) : "Nd" (_port));
  10029f:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002a3:	ec                   	in     (%dx),%al
  1002a4:	88 45 fd             	mov    %al,-0x3(%ebp)
    return result;
  1002a7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
  1002ab:	83 c4 04             	add    $0x4,%esp
  1002ae:	5d                   	pop    %ebp
  1002af:	c3                   	ret    

001002b0 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  1002b0:	55                   	push   %ebp
  1002b1:	89 e5                	mov    %esp,%ebp
  1002b3:	50                   	push   %eax
  1002b4:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  1002b8:	66 89 c1             	mov    %ax,%cx
  1002bb:	8a 55 0c             	mov    0xc(%ebp),%dl
  1002be:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  1002c2:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  1002c5:	8a 45 fd             	mov    -0x3(%ebp),%al
  1002c8:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1002cc:	ee                   	out    %al,(%dx)
}
  1002cd:	83 c4 04             	add    $0x4,%esp
  1002d0:	5d                   	pop    %ebp
  1002d1:	c3                   	ret    
  1002d2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1002d9:	1f 84 00 00 00 00 00 

001002e0 <init_keyboard_drv>:

void init_keyboard_drv() {
  1002e0:	55                   	push   %ebp
  1002e1:	89 e5                	mov    %esp,%ebp
  1002e3:	83 ec 28             	sub    $0x28,%esp
  1002e6:	b8 21 00 00 00       	mov    $0x21,%eax
  1002eb:	8d 0d c0 01 10 00    	lea    0x1001c0,%ecx
	register_intr_handler(0x21, &keyboard_handler);
  1002f1:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  1002f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1002fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1002ff:	e8 6c 16 00 00       	call   101970 <register_intr_handler>
  100304:	b8 64 00 00 00       	mov    $0x64,%eax

	while(inb(0x64) & 0x1) {
  100309:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
  100310:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100313:	e8 78 ff ff ff       	call   100290 <inb>
  100318:	0f b6 c8             	movzbl %al,%ecx
  10031b:	81 e1 01 00 00 00    	and    $0x1,%ecx
  100321:	81 f9 00 00 00 00    	cmp    $0x0,%ecx
  100327:	0f 84 1c 00 00 00    	je     100349 <init_keyboard_drv+0x69>
  10032d:	b8 60 00 00 00       	mov    $0x60,%eax
		inb(0x60);
  100332:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
  100339:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10033c:	e8 4f ff ff ff       	call   100290 <inb>
	}
  100341:	88 45 f3             	mov    %al,-0xd(%ebp)
  100344:	e9 bb ff ff ff       	jmp    100304 <init_keyboard_drv+0x24>
  100349:	b8 f4 00 00 00       	mov    $0xf4,%eax

	send_command(0xF4);
  10034e:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
  100355:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100358:	e8 d3 fe ff ff       	call   100230 <send_command>

	init_done = 1;
  10035d:	c7 05 10 a0 10 00 01 	movl   $0x1,0x10a010
  100364:	00 00 00 
}
  100367:	83 c4 28             	add    $0x28,%esp
  10036a:	5d                   	pop    %ebp
  10036b:	c3                   	ret    
  10036c:	66 90                	xchg   %ax,%ax
  10036e:	66 90                	xchg   %ax,%ax

00100370 <show_cod>:
#include "catofdeath.h"

void show_cod(struct cpu_state* cpu, char* fstr) {
  100370:	55                   	push   %ebp
  100371:	89 e5                	mov    %esp,%ebp
  100373:	56                   	push   %esi
  100374:	83 ec 24             	sub    $0x24,%esp
  100377:	8b 45 0c             	mov    0xc(%ebp),%eax
  10037a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10037d:	ba 04 00 00 00       	mov    $0x4,%edx
  100382:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100385:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kprintf ("          '''  \\   `-._.'`---^_))) \n");
    kprintf ("                `-._ )))       ``` \n");
    kprintf ("                     ```            \n");
#endif

    setclr(0x04);
  100388:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10038f:	89 55 f0             	mov    %edx,-0x10(%ebp)
  100392:	e8 99 01 00 00       	call   100530 <setclr>
    kprintf(fstr);
  100397:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10039a:	89 04 24             	mov    %eax,(%esp)
  10039d:	e8 ae 01 00 00       	call   100550 <kprintf>
  1003a2:	8d 0d 7d 81 10 00    	lea    0x10817d,%ecx
    kprintf("\n\nException I:%d E:%x, Kernel halt!\n", cpu->intr, cpu->error);
  1003a8:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1003ab:	8b 52 1c             	mov    0x1c(%edx),%edx
  1003ae:	8b 75 f8             	mov    -0x8(%ebp),%esi
  1003b1:	8b 76 20             	mov    0x20(%esi),%esi
  1003b4:	89 0c 24             	mov    %ecx,(%esp)
  1003b7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1003bb:	89 74 24 08          	mov    %esi,0x8(%esp)
  1003bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1003c2:	e8 89 01 00 00       	call   100550 <kprintf>
    show_dump(cpu);
  1003c7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1003ca:	89 0c 24             	mov    %ecx,(%esp)
  1003cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1003d0:	e8 0b 00 00 00       	call   1003e0 <show_dump>

    while (1) {
        asm volatile("cli; hlt");
  1003d5:	fa                   	cli    
  1003d6:	f4                   	hlt    
    }
  1003d7:	e9 f9 ff ff ff       	jmp    1003d5 <show_cod+0x65>
  1003dc:	0f 1f 40 00          	nopl   0x0(%eax)

001003e0 <show_dump>:
}

void show_dump(struct cpu_state* cpu) {
  1003e0:	55                   	push   %ebp
  1003e1:	89 e5                	mov    %esp,%ebp
  1003e3:	53                   	push   %ebx
  1003e4:	57                   	push   %edi
  1003e5:	56                   	push   %esi
  1003e6:	83 ec 2c             	sub    $0x2c,%esp
  1003e9:	8b 45 08             	mov    0x8(%ebp),%eax
  1003ec:	8d 0d a2 81 10 00    	lea    0x1081a2,%ecx
  1003f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    kprintf("EAX: %x EBX: %x ECX: %x EDX: %x\n", cpu->eax, cpu->ebx, cpu->ecx,
  1003f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1003f8:	8b 00                	mov    (%eax),%eax
  1003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1003fd:	8b 52 04             	mov    0x4(%edx),%edx
  100400:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100403:	8b 76 08             	mov    0x8(%esi),%esi
  100406:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100409:	8b 7f 0c             	mov    0xc(%edi),%edi
  10040c:	89 0c 24             	mov    %ecx,(%esp)
  10040f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100413:	89 54 24 08          	mov    %edx,0x8(%esp)
  100417:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10041b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10041f:	e8 2c 01 00 00       	call   100550 <kprintf>
  100424:	8d 0d c3 81 10 00    	lea    0x1081c3,%ecx
            cpu->edx);
    kprintf("ESI: %x EDI: %x EBP: %x EIP: %x\n", cpu->esi, cpu->edi, cpu->ebp,
  10042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10042d:	8b 52 10             	mov    0x10(%edx),%edx
  100430:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100433:	8b 76 14             	mov    0x14(%esi),%esi
  100436:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100439:	8b 7f 18             	mov    0x18(%edi),%edi
  10043c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10043f:	8b 5b 24             	mov    0x24(%ebx),%ebx
  100442:	89 0c 24             	mov    %ecx,(%esp)
  100445:	89 54 24 04          	mov    %edx,0x4(%esp)
  100449:	89 74 24 08          	mov    %esi,0x8(%esp)
  10044d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  100451:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  100455:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100458:	e8 f3 00 00 00       	call   100550 <kprintf>
  10045d:	8d 0d e4 81 10 00    	lea    0x1081e4,%ecx
            cpu->eip);
    kprintf("CS: %x EFLAGS: %x ESP: %x SS: %x\n", cpu->cs, cpu->eflags,
  100463:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100466:	8b 52 28             	mov    0x28(%edx),%edx
  100469:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10046c:	8b 76 2c             	mov    0x2c(%esi),%esi
  10046f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  100472:	8b 7f 30             	mov    0x30(%edi),%edi
  100475:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  100478:	8b 5b 34             	mov    0x34(%ebx),%ebx
  10047b:	89 0c 24             	mov    %ecx,(%esp)
  10047e:	89 54 24 04          	mov    %edx,0x4(%esp)
  100482:	89 74 24 08          	mov    %esi,0x8(%esp)
  100486:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10048a:	89 5c 24 10          	mov    %ebx,0x10(%esp)
  10048e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100491:	e8 ba 00 00 00       	call   100550 <kprintf>
  100496:	8d 0d 06 82 10 00    	lea    0x108206,%ecx
            cpu->esp, cpu->ss);

    uint32_t cr2 = 0;
  10049c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    asm volatile("mov %%cr2, %0" : "=r" (cr2));
  1004a3:	0f 20 d2             	mov    %cr2,%edx
  1004a6:	89 55 ec             	mov    %edx,-0x14(%ebp)

    kprintf("CR2: %x \n", cr2);
  1004a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1004ac:	89 0c 24             	mov    %ecx,(%esp)
  1004af:	89 54 24 04          	mov    %edx,0x4(%esp)
  1004b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1004b6:	e8 95 00 00 00       	call   100550 <kprintf>
}
  1004bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1004be:	83 c4 2c             	add    $0x2c,%esp
  1004c1:	5e                   	pop    %esi
  1004c2:	5f                   	pop    %edi
  1004c3:	5b                   	pop    %ebx
  1004c4:	5d                   	pop    %ebp
  1004c5:	c3                   	ret    
  1004c6:	66 90                	xchg   %ax,%ax
  1004c8:	66 90                	xchg   %ax,%ax
  1004ca:	66 90                	xchg   %ax,%ax
  1004cc:	66 90                	xchg   %ax,%ax
  1004ce:	66 90                	xchg   %ax,%ax

001004d0 <clrscr>:
        x /= base;
    } while (x);
    kputs(p);
}

void clrscr(void) {
  1004d0:	55                   	push   %ebp
  1004d1:	89 e5                	mov    %esp,%ebp
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1004d3:	50                   	push   %eax
  1004d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1004db:	81 7d fc a0 0f 00 00 	cmpl   $0xfa0,-0x4(%ebp)
  1004e2:	0f 8d 1d 00 00 00    	jge    100505 <clrscr+0x35>
        video[i] = 0;
  1004e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004eb:	8b 0d 00 71 10 00    	mov    0x107100,%ecx
  1004f1:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
    kputs(p);
}

void clrscr(void) {
    int i;
    for (i = 0; i < 2 * 25 * 80; i++) {
  1004f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004f8:	05 01 00 00 00       	add    $0x1,%eax
  1004fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100500:	e9 d6 ff ff ff       	jmp    1004db <clrscr+0xb>
        video[i] = 0;
    }

    color = 0x07;
  100505:	c6 05 04 71 10 00 07 	movb   $0x7,0x107104

    x = y = 0;
  10050c:	c7 05 14 a0 10 00 00 	movl   $0x0,0x10a014
  100513:	00 00 00 
  100516:	c7 05 18 a0 10 00 00 	movl   $0x0,0x10a018
  10051d:	00 00 00 
}
  100520:	83 c4 04             	add    $0x4,%esp
  100523:	5d                   	pop    %ebp
  100524:	c3                   	ret    
  100525:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10052c:	00 00 00 00 

00100530 <setclr>:

void setclr(char clr) {
  100530:	55                   	push   %ebp
  100531:	89 e5                	mov    %esp,%ebp
  100533:	50                   	push   %eax
  100534:	8a 45 08             	mov    0x8(%ebp),%al
  100537:	88 45 ff             	mov    %al,-0x1(%ebp)
    color = clr;
  10053a:	8a 45 ff             	mov    -0x1(%ebp),%al
  10053d:	a2 04 71 10 00       	mov    %al,0x107104
}
  100542:	83 c4 04             	add    $0x4,%esp
  100545:	5d                   	pop    %ebp
  100546:	c3                   	ret    
  100547:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10054e:	00 00 

00100550 <kprintf>:

int kprintf(const char* fmt, ...) {
  100550:	55                   	push   %ebp
  100551:	89 e5                	mov    %esp,%ebp
  100553:	83 ec 58             	sub    $0x58,%esp
  100556:	8b 45 08             	mov    0x8(%ebp),%eax
  100559:	8d 4d f8             	lea    -0x8(%ebp),%ecx
  10055c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10055f:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    const char* s;
    unsigned long n;
    char c;

    va_start(ap, fmt);
  100562:	89 01                	mov    %eax,(%ecx)
    kprintf_res = 0;
  100564:	c7 05 1c a0 10 00 00 	movl   $0x0,0x10a01c
  10056b:	00 00 00 
    while (*fmt) {
  10056e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100571:	80 38 00             	cmpb   $0x0,(%eax)
  100574:	0f 84 dd 01 00 00    	je     100757 <kprintf+0x207>
        if (*fmt == '%') {
  10057a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10057d:	0f be 00             	movsbl (%eax),%eax
  100580:	3d 25 00 00 00       	cmp    $0x25,%eax
  100585:	0f 85 ae 01 00 00    	jne    100739 <kprintf+0x1e9>
            fmt++;
  10058b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10058e:	89 c1                	mov    %eax,%ecx
  100590:	41                   	inc    %ecx
  100591:	89 4d fc             	mov    %ecx,-0x4(%ebp)
            switch (*fmt) {
  100594:	0f be 40 01          	movsbl 0x1(%eax),%eax
  100598:	89 c1                	mov    %eax,%ecx
  10059a:	83 e9 24             	sub    $0x24,%ecx
  10059d:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1005a0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1005a3:	0f 8f 15 00 00 00    	jg     1005be <kprintf+0x6e>
  1005a9:	e9 00 00 00 00       	jmp    1005ae <kprintf+0x5e>
  1005ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005b1:	85 c0                	test   %eax,%eax
  1005b3:	0f 84 54 01 00 00    	je     10070d <kprintf+0x1bd>
  1005b9:	e9 54 01 00 00       	jmp    100712 <kprintf+0x1c2>
  1005be:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005c1:	83 e8 62             	sub    $0x62,%eax
  1005c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1005c7:	0f 8f 19 00 00 00    	jg     1005e6 <kprintf+0x96>
  1005cd:	e9 00 00 00 00       	jmp    1005d2 <kprintf+0x82>
  1005d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005d5:	83 e8 25             	sub    $0x25,%eax
  1005d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1005db:	0f 84 13 01 00 00    	je     1006f4 <kprintf+0x1a4>
  1005e1:	e9 2c 01 00 00       	jmp    100712 <kprintf+0x1c2>
  1005e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005e9:	83 e8 6f             	sub    $0x6f,%eax
  1005ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1005ef:	0f 8f 2d 00 00 00    	jg     100622 <kprintf+0xd2>
  1005f5:	e9 00 00 00 00       	jmp    1005fa <kprintf+0xaa>
  1005fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005fd:	83 e8 63             	sub    $0x63,%eax
  100600:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100603:	0f 84 c5 00 00 00    	je     1006ce <kprintf+0x17e>
  100609:	e9 00 00 00 00       	jmp    10060e <kprintf+0xbe>
  10060e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100611:	83 e8 64             	sub    $0x64,%eax
  100614:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100617:	0f 84 4b 00 00 00    	je     100668 <kprintf+0x118>
  10061d:	e9 f0 00 00 00       	jmp    100712 <kprintf+0x1c2>
  100622:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100625:	83 c0 90             	add    $0xffffff90,%eax
  100628:	89 c1                	mov    %eax,%ecx
  10062a:	83 e9 08             	sub    $0x8,%ecx
  10062d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100630:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  100633:	0f 87 d9 00 00 00    	ja     100712 <kprintf+0x1c2>
  100639:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10063c:	8b 0c 85 00 80 10 00 	mov    0x108000(,%eax,4),%ecx
  100643:	ff e1                	jmp    *%ecx
            case 's':
                s = va_arg(ap, char*);
  100645:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100648:	89 c1                	mov    %eax,%ecx
  10064a:	81 c1 04 00 00 00    	add    $0x4,%ecx
  100650:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100653:	8b 00                	mov    (%eax),%eax
  100655:	89 45 f4             	mov    %eax,-0xc(%ebp)
                kputs(s);
  100658:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10065b:	89 04 24             	mov    %eax,(%esp)
  10065e:	e8 0d 01 00 00       	call   100770 <kputs>
                break;
  100663:	e9 cc 00 00 00       	jmp    100734 <kprintf+0x1e4>
  100668:	b8 0a 00 00 00       	mov    $0xa,%eax
            case 'd':
            case 'u':
                n = va_arg(ap, unsigned long int);
  10066d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100670:	89 ca                	mov    %ecx,%edx
  100672:	81 c2 04 00 00 00    	add    $0x4,%edx
  100678:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10067b:	8b 09                	mov    (%ecx),%ecx
  10067d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 10);
  100680:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100683:	89 0c 24             	mov    %ecx,(%esp)
  100686:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10068d:	00 
  10068e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100691:	e8 1a 01 00 00       	call   1007b0 <kputn>
                break;
  100696:	e9 99 00 00 00       	jmp    100734 <kprintf+0x1e4>
  10069b:	b8 10 00 00 00       	mov    $0x10,%eax
            case 'x':
            case 'p':
                n = va_arg(ap, unsigned long int);
  1006a0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1006a3:	89 ca                	mov    %ecx,%edx
  1006a5:	81 c2 04 00 00 00    	add    $0x4,%edx
  1006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1006ae:	8b 09                	mov    (%ecx),%ecx
  1006b0:	89 4d f0             	mov    %ecx,-0x10(%ebp)
                kputn(n, 16);
  1006b3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1006b6:	89 0c 24             	mov    %ecx,(%esp)
  1006b9:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  1006c0:	00 
  1006c1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1006c4:	e8 e7 00 00 00       	call   1007b0 <kputn>
                break;
  1006c9:	e9 66 00 00 00       	jmp    100734 <kprintf+0x1e4>
            case 'c':
                c = va_arg(ap, int);
  1006ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1006d1:	89 c1                	mov    %eax,%ecx
  1006d3:	81 c1 04 00 00 00    	add    $0x4,%ecx
  1006d9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1006dc:	8b 00                	mov    (%eax),%eax
  1006de:	88 c2                	mov    %al,%dl
  1006e0:	88 55 ef             	mov    %dl,-0x11(%ebp)
                kputc(c);
  1006e3:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
  1006e7:	89 04 24             	mov    %eax,(%esp)
  1006ea:	e8 61 01 00 00       	call   100850 <kputc>
                break;
  1006ef:	e9 40 00 00 00       	jmp    100734 <kprintf+0x1e4>
  1006f4:	b8 25 00 00 00       	mov    $0x25,%eax
            case '%':
                kputc('%');
  1006f9:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  100700:	89 45 bc             	mov    %eax,-0x44(%ebp)
  100703:	e8 48 01 00 00       	call   100850 <kputc>
                break;
  100708:	e9 27 00 00 00       	jmp    100734 <kprintf+0x1e4>
            case '\0':
                goto out;
  10070d:	e9 4a 00 00 00       	jmp    10075c <kprintf+0x20c>
  100712:	b8 25 00 00 00       	mov    $0x25,%eax
            default:
                kputc('%');
  100717:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10071e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100721:	e8 2a 01 00 00       	call   100850 <kputc>
                kputc(*fmt);
  100726:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100729:	0f be 00             	movsbl (%eax),%eax
  10072c:	89 04 24             	mov    %eax,(%esp)
  10072f:	e8 1c 01 00 00       	call   100850 <kputc>
                break;
            }
        } else {
  100734:	e9 0e 00 00 00       	jmp    100747 <kprintf+0x1f7>
            kputc(*fmt);
  100739:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10073c:	0f be 00             	movsbl (%eax),%eax
  10073f:	89 04 24             	mov    %eax,(%esp)
  100742:	e8 09 01 00 00       	call   100850 <kputc>
        }

        fmt++;
  100747:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10074a:	05 01 00 00 00       	add    $0x1,%eax
  10074f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  100752:	e9 17 fe ff ff       	jmp    10056e <kprintf+0x1e>
  100757:	e9 00 00 00 00       	jmp    10075c <kprintf+0x20c>

    out:
    va_end(ap);

    return kprintf_res;
  10075c:	a1 1c a0 10 00       	mov    0x10a01c,%eax
  100761:	83 c4 58             	add    $0x58,%esp
  100764:	5d                   	pop    %ebp
  100765:	c3                   	ret    
  100766:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10076d:	00 00 00 

00100770 <kputs>:

    x++;
    kprintf_res++;
}

static void kputs(const char* s) {
  100770:	55                   	push   %ebp
  100771:	89 e5                	mov    %esp,%ebp
  100773:	83 ec 08             	sub    $0x8,%esp
  100776:	8b 45 08             	mov    0x8(%ebp),%eax
  100779:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s) {
  10077c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10077f:	80 38 00             	cmpb   $0x0,(%eax)
  100782:	0f 84 1e 00 00 00    	je     1007a6 <kputs+0x36>
        kputc(*s++);
  100788:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10078b:	89 c1                	mov    %eax,%ecx
  10078d:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100793:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100796:	0f be 00             	movsbl (%eax),%eax
  100799:	89 04 24             	mov    %eax,(%esp)
  10079c:	e8 af 00 00 00       	call   100850 <kputc>
    }
  1007a1:	e9 d6 ff ff ff       	jmp    10077c <kputs+0xc>
}
  1007a6:	83 c4 08             	add    $0x8,%esp
  1007a9:	5d                   	pop    %ebp
  1007aa:	c3                   	ret    
  1007ab:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001007b0 <kputn>:

static void kputn(unsigned long x, int base) {
  1007b0:	55                   	push   %ebp
  1007b1:	89 e5                	mov    %esp,%ebp
  1007b3:	56                   	push   %esi
  1007b4:	83 ec 64             	sub    $0x64,%esp
  1007b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1007ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1007bd:	8d 15 10 82 10 00    	lea    0x108210,%edx
  1007c3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1007c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char buf[65];
    const char* digits = "0123456789abcdefghijklmnopqrstuvwxyz";
  1007c9:	89 55 ac             	mov    %edx,-0x54(%ebp)
    char* p;

    if (base > 36) {
  1007cc:	81 7d f4 24 00 00 00 	cmpl   $0x24,-0xc(%ebp)
  1007d3:	0f 8e 05 00 00 00    	jle    1007de <kputn+0x2e>
        return;
  1007d9:	e9 5d 00 00 00       	jmp    10083b <kputn+0x8b>
  1007de:	8d 45 b3             	lea    -0x4d(%ebp),%eax
    }

    p = buf + 64;
  1007e1:	05 40 00 00 00       	add    $0x40,%eax
  1007e6:	89 45 a8             	mov    %eax,-0x58(%ebp)
    *p = '\0';
  1007e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
  1007ec:	c6 00 00             	movb   $0x0,(%eax)
    do {
        *--p = digits[x % base];
  1007ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1007f2:	31 d2                	xor    %edx,%edx
  1007f4:	f7 75 f4             	divl   -0xc(%ebp)
  1007f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
  1007fa:	8a 0c 10             	mov    (%eax,%edx,1),%cl
  1007fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100800:	89 c2                	mov    %eax,%edx
  100802:	81 c2 ff ff ff ff    	add    $0xffffffff,%edx
  100808:	89 55 a8             	mov    %edx,-0x58(%ebp)
  10080b:	88 48 ff             	mov    %cl,-0x1(%eax)
        x /= base;
  10080e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100811:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100814:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  100817:	89 d0                	mov    %edx,%eax
  100819:	31 d2                	xor    %edx,%edx
  10081b:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  10081e:	f7 f6                	div    %esi
  100820:	89 45 f8             	mov    %eax,-0x8(%ebp)
    } while (x);
  100823:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10082a:	0f 85 bf ff ff ff    	jne    1007ef <kputn+0x3f>
    kputs(p);
  100830:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100833:	89 04 24             	mov    %eax,(%esp)
  100836:	e8 35 ff ff ff       	call   100770 <kputs>
}
  10083b:	83 c4 64             	add    $0x64,%esp
  10083e:	5e                   	pop    %esi
  10083f:	5d                   	pop    %ebp
  100840:	c3                   	ret    
  100841:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  100848:	0f 1f 84 00 00 00 00 
  10084f:	00 

00100850 <kputc>:
static int kprintf_res = 0;
static char color = 0x07;

static char* video = (char*) 0xb8000;

static void kputc(char c) {
  100850:	55                   	push   %ebp
  100851:	89 e5                	mov    %esp,%ebp
  100853:	83 ec 08             	sub    $0x8,%esp
  100856:	8a 45 08             	mov    0x8(%ebp),%al
  100859:	88 45 ff             	mov    %al,-0x1(%ebp)
    if(ramfs_vga_writers()) {
  10085c:	e8 4f 2e 00 00       	call   1036b0 <ramfs_vga_writers>
  100861:	3d 00 00 00 00       	cmp    $0x0,%eax
  100866:	0f 84 05 00 00 00    	je     100871 <kputc+0x21>
        //TODO write to stdout;
        return;
  10086c:	e9 3f 01 00 00       	jmp    1009b0 <kputc+0x160>
    }

    if ((c == '\n') || (x > 79)) {
  100871:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  100875:	3d 0a 00 00 00       	cmp    $0xa,%eax
  10087a:	0f 84 10 00 00 00    	je     100890 <kputc+0x40>
  100880:	81 3d 18 a0 10 00 4f 	cmpl   $0x4f,0x10a018
  100887:	00 00 00 
  10088a:	0f 8e 19 00 00 00    	jle    1008a9 <kputc+0x59>
        x = 0;
  100890:	c7 05 18 a0 10 00 00 	movl   $0x0,0x10a018
  100897:	00 00 00 
        y++;
  10089a:	a1 14 a0 10 00       	mov    0x10a014,%eax
  10089f:	05 01 00 00 00       	add    $0x1,%eax
  1008a4:	a3 14 a0 10 00       	mov    %eax,0x10a014
    }

    if (c == '\n') {
  1008a9:	0f be 45 ff          	movsbl -0x1(%ebp),%eax
  1008ad:	3d 0a 00 00 00       	cmp    $0xa,%eax
  1008b2:	0f 85 05 00 00 00    	jne    1008bd <kputc+0x6d>
        return;
  1008b8:	e9 f3 00 00 00       	jmp    1009b0 <kputc+0x160>
    }

    if (y > 24) {
  1008bd:	81 3d 14 a0 10 00 18 	cmpl   $0x18,0x10a014
  1008c4:	00 00 00 
  1008c7:	0f 8e 7e 00 00 00    	jle    10094b <kputc+0xfb>
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1008cd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1008d4:	81 7d f8 00 0f 00 00 	cmpl   $0xf00,-0x8(%ebp)
  1008db:	0f 8d 2c 00 00 00    	jge    10090d <kputc+0xbd>
            video[i] = video[i + 160];
  1008e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1008e4:	8b 0d 00 71 10 00    	mov    0x107100,%ecx
  1008ea:	8a 94 01 a0 00 00 00 	mov    0xa0(%ecx,%eax,1),%dl
  1008f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1008f4:	8b 0d 00 71 10 00    	mov    0x107100,%ecx
  1008fa:	88 14 01             	mov    %dl,(%ecx,%eax,1)
        return;
    }

    if (y > 24) {
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
  1008fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100900:	05 01 00 00 00       	add    $0x1,%eax
  100905:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100908:	e9 c7 ff ff ff       	jmp    1008d4 <kputc+0x84>
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10090d:	e9 00 00 00 00       	jmp    100912 <kputc+0xc2>
  100912:	81 7d f8 a0 0f 00 00 	cmpl   $0xfa0,-0x8(%ebp)
  100919:	0f 8d 1d 00 00 00    	jge    10093c <kputc+0xec>
            video[i] = 0;
  10091f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100922:	8b 0d 00 71 10 00    	mov    0x107100,%ecx
  100928:	c6 04 01 00          	movb   $0x0,(%ecx,%eax,1)
        int i;
        for (i = 0; i < 2 * 24 * 80; i++) {
            video[i] = video[i + 160];
        }

        for (; i < 2 * 25 * 80; i++) {
  10092c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10092f:	05 01 00 00 00       	add    $0x1,%eax
  100934:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100937:	e9 d6 ff ff ff       	jmp    100912 <kputc+0xc2>
            video[i] = 0;
        }
        y--;
  10093c:	a1 14 a0 10 00       	mov    0x10a014,%eax
  100941:	05 ff ff ff ff       	add    $0xffffffff,%eax
  100946:	a3 14 a0 10 00       	mov    %eax,0x10a014
    }

    video[2 * (y * 80 + x)] = c;
  10094b:	8a 45 ff             	mov    -0x1(%ebp),%al
  10094e:	69 0d 14 a0 10 00 50 	imul   $0x50,0x10a014,%ecx
  100955:	00 00 00 
  100958:	03 0d 18 a0 10 00    	add    0x10a018,%ecx
  10095e:	c1 e1 01             	shl    $0x1,%ecx
  100961:	8b 15 00 71 10 00    	mov    0x107100,%edx
  100967:	88 04 0a             	mov    %al,(%edx,%ecx,1)
    video[2 * (y * 80 + x) + 1] = color;
  10096a:	a0 04 71 10 00       	mov    0x107104,%al
  10096f:	69 0d 14 a0 10 00 50 	imul   $0x50,0x10a014,%ecx
  100976:	00 00 00 
  100979:	03 0d 18 a0 10 00    	add    0x10a018,%ecx
  10097f:	c1 e1 01             	shl    $0x1,%ecx
  100982:	8b 15 00 71 10 00    	mov    0x107100,%edx
  100988:	88 44 0a 01          	mov    %al,0x1(%edx,%ecx,1)

    x++;
  10098c:	8b 0d 18 a0 10 00    	mov    0x10a018,%ecx
  100992:	81 c1 01 00 00 00    	add    $0x1,%ecx
  100998:	89 0d 18 a0 10 00    	mov    %ecx,0x10a018
    kprintf_res++;
  10099e:	8b 0d 1c a0 10 00    	mov    0x10a01c,%ecx
  1009a4:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1009aa:	89 0d 1c a0 10 00    	mov    %ecx,0x10a01c
}
  1009b0:	83 c4 08             	add    $0x8,%esp
  1009b3:	5d                   	pop    %ebp
  1009b4:	c3                   	ret    
  1009b5:	66 90                	xchg   %ax,%ax
  1009b7:	66 90                	xchg   %ax,%ax
  1009b9:	66 90                	xchg   %ax,%ax
  1009bb:	66 90                	xchg   %ax,%ax
  1009bd:	66 90                	xchg   %ax,%ax
  1009bf:	90                   	nop

001009c0 <load_gdt>:

#define GDT_ENTRIES 6

uint64_t gdt[GDT_ENTRIES];

void load_gdt() {
  1009c0:	55                   	push   %ebp
  1009c1:	89 e5                	mov    %esp,%ebp
	struct {
  1009c3:	83 ec 08             	sub    $0x8,%esp
  1009c6:	a1 24 80 10 00       	mov    0x108024,%eax
  1009cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1009ce:	66 8b 0d 28 80 10 00 	mov    0x108028,%cx
  1009d5:	66 89 4d fc          	mov    %cx,-0x4(%ebp)
		uint16_t limit;
		void* pointer;
	}__attribute__((packed)) gdtp = { .limit = GDT_ENTRIES * 8 - 1, .pointer =
			gdt, };

	asm volatile("lgdt %0" : : "m" (gdtp));
  1009d9:	0f 01 55 f8          	lgdtl  -0x8(%ebp)

	asm ("mov $0x10, %ax");
  1009dd:	66 b8 10 00          	mov    $0x10,%ax
	asm ("mov %ax, %ds");
  1009e1:	66 8e d8             	mov    %ax,%ds
	asm ("mov %ax, %es");
  1009e4:	66 8e c0             	mov    %ax,%es
	asm ("mov %ax, %fs");
  1009e7:	66 8e e0             	mov    %ax,%fs
	asm ("mov %ax, %gs");
  1009ea:	66 8e e8             	mov    %ax,%gs
	asm ("mov %ax, %ss");
  1009ed:	66 8e d0             	mov    %ax,%ss
	//asm ("ljmp $0x8, $.1");
	//asm (".1:");
}
  1009f0:	83 c4 08             	add    $0x8,%esp
  1009f3:	5d                   	pop    %ebp
  1009f4:	c3                   	ret    
  1009f5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1009fc:	00 00 00 00 

00100a00 <set_gdt_entry>:

void set_gdt_entry(int i, unsigned int base, unsigned int limit, int flags) {
  100a00:	55                   	push   %ebp
  100a01:	89 e5                	mov    %esp,%ebp
  100a03:	56                   	push   %esi
  100a04:	83 ec 10             	sub    $0x10,%esp
  100a07:	8b 45 14             	mov    0x14(%ebp),%eax
  100a0a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  100a0d:	8b 55 0c             	mov    0xc(%ebp),%edx
  100a10:	8b 75 08             	mov    0x8(%ebp),%esi
  100a13:	89 75 f8             	mov    %esi,-0x8(%ebp)
  100a16:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100a19:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100a1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	gdt[i] = limit & 0xffffLL;
  100a1f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
  100a23:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100a26:	89 04 cd 60 a4 12 00 	mov    %eax,0x12a460(,%ecx,8)
  100a2d:	c7 04 cd 64 a4 12 00 	movl   $0x0,0x12a464(,%ecx,8)
  100a34:	00 00 00 00 
	gdt[i] |= (base & 0xffffffLL) << 16;
  100a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100a3b:	25 ff ff ff 00       	and    $0xffffff,%eax
  100a40:	89 c1                	mov    %eax,%ecx
  100a42:	c1 e1 10             	shl    $0x10,%ecx
  100a45:	c1 e8 10             	shr    $0x10,%eax
  100a48:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100a4b:	8b 34 d5 64 a4 12 00 	mov    0x12a464(,%edx,8),%esi
  100a52:	09 f0                	or     %esi,%eax
  100a54:	8b 34 d5 60 a4 12 00 	mov    0x12a460(,%edx,8),%esi
  100a5b:	09 ce                	or     %ecx,%esi
  100a5d:	89 04 d5 64 a4 12 00 	mov    %eax,0x12a464(,%edx,8)
  100a64:	89 34 d5 60 a4 12 00 	mov    %esi,0x12a460(,%edx,8)
	gdt[i] |= (flags & 0xffLL) << 40;
  100a6b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  100a6f:	c1 e0 08             	shl    $0x8,%eax
  100a72:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100a75:	8b 14 cd 60 a4 12 00 	mov    0x12a460(,%ecx,8),%edx
  100a7c:	8b 34 cd 64 a4 12 00 	mov    0x12a464(,%ecx,8),%esi
  100a83:	09 c6                	or     %eax,%esi
  100a85:	89 14 cd 60 a4 12 00 	mov    %edx,0x12a460(,%ecx,8)
  100a8c:	89 34 cd 64 a4 12 00 	mov    %esi,0x12a464(,%ecx,8)
	gdt[i] |= ((limit >> 16) & 0xfLL) << 48;
  100a93:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
  100a97:	83 e0 0f             	and    $0xf,%eax
  100a9a:	c1 e0 10             	shl    $0x10,%eax
  100a9d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100aa0:	8b 14 cd 60 a4 12 00 	mov    0x12a460(,%ecx,8),%edx
  100aa7:	8b 34 cd 64 a4 12 00 	mov    0x12a464(,%ecx,8),%esi
  100aae:	09 c6                	or     %eax,%esi
  100ab0:	89 14 cd 60 a4 12 00 	mov    %edx,0x12a460(,%ecx,8)
  100ab7:	89 34 cd 64 a4 12 00 	mov    %esi,0x12a464(,%ecx,8)
	gdt[i] |= ((flags >> 8) & 0xffLL) << 52;
  100abe:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100ac1:	c1 e0 0c             	shl    $0xc,%eax
  100ac4:	25 00 00 f0 0f       	and    $0xff00000,%eax
  100ac9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100acc:	8b 14 cd 60 a4 12 00 	mov    0x12a460(,%ecx,8),%edx
  100ad3:	8b 34 cd 64 a4 12 00 	mov    0x12a464(,%ecx,8),%esi
  100ada:	09 c6                	or     %eax,%esi
  100adc:	89 14 cd 60 a4 12 00 	mov    %edx,0x12a460(,%ecx,8)
  100ae3:	89 34 cd 64 a4 12 00 	mov    %esi,0x12a464(,%ecx,8)
	gdt[i] |= ((base >> 24) & 0xffLL) << 56;
  100aea:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  100aee:	c1 e0 18             	shl    $0x18,%eax
  100af1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100af4:	8b 14 cd 60 a4 12 00 	mov    0x12a460(,%ecx,8),%edx
  100afb:	8b 34 cd 64 a4 12 00 	mov    0x12a464(,%ecx,8),%esi
  100b02:	09 c6                	or     %eax,%esi
  100b04:	89 14 cd 60 a4 12 00 	mov    %edx,0x12a460(,%ecx,8)
  100b0b:	89 34 cd 64 a4 12 00 	mov    %esi,0x12a464(,%ecx,8)
}
  100b12:	83 c4 10             	add    $0x10,%esp
  100b15:	5e                   	pop    %esi
  100b16:	5d                   	pop    %ebp
  100b17:	c3                   	ret    
  100b18:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  100b1f:	00 

00100b20 <init_gdt>:

void init_gdt(void) {
  100b20:	55                   	push   %ebp
  100b21:	89 e5                	mov    %esp,%ebp
  100b23:	56                   	push   %esi
  100b24:	83 ec 54             	sub    $0x54,%esp
  100b27:	b8 00 00 00 00       	mov    $0x0,%eax
	set_gdt_entry(0, 0, 0, 0);
  100b2c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100b33:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100b3a:	00 
  100b3b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100b42:	00 
  100b43:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  100b4a:	00 
  100b4b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100b4e:	e8 ad fe ff ff       	call   100a00 <set_gdt_entry>
  100b53:	b8 01 00 00 00       	mov    $0x1,%eax
  100b58:	b9 00 00 00 00       	mov    $0x0,%ecx
  100b5d:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100b62:	be 9a 0c 00 00       	mov    $0xc9a,%esi
	set_gdt_entry(1, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100b67:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100b6e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100b75:	00 
  100b76:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100b7d:	00 
  100b7e:	c7 44 24 0c 9a 0c 00 	movl   $0xc9a,0xc(%esp)
  100b85:	00 
  100b86:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100b89:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  100b8c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100b8f:	89 75 e8             	mov    %esi,-0x18(%ebp)
  100b92:	e8 69 fe ff ff       	call   100a00 <set_gdt_entry>
  100b97:	b8 02 00 00 00       	mov    $0x2,%eax
  100b9c:	b9 00 00 00 00       	mov    $0x0,%ecx
  100ba1:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100ba6:	be 92 0c 00 00       	mov    $0xc92,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(2, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100bab:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100bb2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100bb9:	00 
  100bba:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100bc1:	00 
  100bc2:	c7 44 24 0c 92 0c 00 	movl   $0xc92,0xc(%esp)
  100bc9:	00 
  100bca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100bcd:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  100bd0:	89 55 dc             	mov    %edx,-0x24(%ebp)
  100bd3:	89 75 d8             	mov    %esi,-0x28(%ebp)
  100bd6:	e8 25 fe ff ff       	call   100a00 <set_gdt_entry>
  100bdb:	b8 03 00 00 00       	mov    $0x3,%eax
  100be0:	b9 00 00 00 00       	mov    $0x0,%ecx
  100be5:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100bea:	be fa 0c 00 00       	mov    $0xcfa,%esi
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT);
	set_gdt_entry(3, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100bef:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100bf6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100bfd:	00 
  100bfe:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100c05:	00 
  100c06:	c7 44 24 0c fa 0c 00 	movl   $0xcfa,0xc(%esp)
  100c0d:	00 
  100c0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100c11:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  100c14:	89 55 cc             	mov    %edx,-0x34(%ebp)
  100c17:	89 75 c8             	mov    %esi,-0x38(%ebp)
  100c1a:	e8 e1 fd ff ff       	call   100a00 <set_gdt_entry>
  100c1f:	b8 04 00 00 00       	mov    $0x4,%eax
  100c24:	b9 00 00 00 00       	mov    $0x0,%ecx
  100c29:	ba ff ff 0f 00       	mov    $0xfffff,%edx
  100c2e:	be f2 0c 00 00       	mov    $0xcf2,%esi
	GDT_FLAG_CODESEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);
	set_gdt_entry(4, 0, 0xfffff, GDT_FLAG_SEGMENT | GDT_FLAG_32_BIT |
  100c33:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  100c3a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100c41:	00 
  100c42:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
  100c49:	00 
  100c4a:	c7 44 24 0c f2 0c 00 	movl   $0xcf2,0xc(%esp)
  100c51:	00 
  100c52:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  100c55:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  100c58:	89 55 bc             	mov    %edx,-0x44(%ebp)
  100c5b:	89 75 b8             	mov    %esi,-0x48(%ebp)
  100c5e:	e8 9d fd ff ff       	call   100a00 <set_gdt_entry>
	GDT_FLAG_DATASEG | GDT_FLAG_4K_GRAN | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	load_gdt();
  100c63:	e8 58 fd ff ff       	call   1009c0 <load_gdt>
}
  100c68:	83 c4 54             	add    $0x54,%esp
  100c6b:	5e                   	pop    %esi
  100c6c:	5d                   	pop    %ebp
  100c6d:	c3                   	ret    
  100c6e:	66 90                	xchg   %ax,%ax

00100c70 <idt_set_entry>:
extern void intr_stub_46(void);
extern void intr_stub_47(void);

extern void intr_stub_48(void);

void idt_set_entry(int i, void (*fn)(), uint16_t selector, uint8_t flags) {
  100c70:	55                   	push   %ebp
  100c71:	89 e5                	mov    %esp,%ebp
  100c73:	53                   	push   %ebx
  100c74:	57                   	push   %edi
  100c75:	56                   	push   %esi
  100c76:	83 ec 10             	sub    $0x10,%esp
  100c79:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  100c7d:	66 89 c1             	mov    %ax,%cx
  100c80:	8a 55 14             	mov    0x14(%ebp),%dl
  100c83:	8b 45 0c             	mov    0xc(%ebp),%eax
  100c86:	8b 75 08             	mov    0x8(%ebp),%esi
  100c89:	89 75 f0             	mov    %esi,-0x10(%ebp)
  100c8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100c8f:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
  100c93:	88 55 e9             	mov    %dl,-0x17(%ebp)
	unsigned long int handler = (unsigned long int) fn;
  100c96:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100c99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	idt[i] = handler & 0xffffLL;
  100c9c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  100ca0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100ca3:	89 04 f5 20 a0 10 00 	mov    %eax,0x10a020(,%esi,8)
  100caa:	c7 04 f5 24 a0 10 00 	movl   $0x0,0x10a024(,%esi,8)
  100cb1:	00 00 00 00 
	idt[i] |= (selector & 0xffffLL) << 16;
  100cb5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
  100cb9:	c1 e0 10             	shl    $0x10,%eax
  100cbc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100cbf:	8b 3c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%edi
  100cc6:	8b 1c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%ebx
  100ccd:	09 c3                	or     %eax,%ebx
  100ccf:	89 3c f5 24 a0 10 00 	mov    %edi,0x10a024(,%esi,8)
  100cd6:	89 1c f5 20 a0 10 00 	mov    %ebx,0x10a020(,%esi,8)
	idt[i] |= (flags & 0xffLL) << 40;
  100cdd:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
  100ce1:	c1 e0 08             	shl    $0x8,%eax
  100ce4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100ce7:	8b 3c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%edi
  100cee:	8b 1c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%ebx
  100cf5:	09 c3                	or     %eax,%ebx
  100cf7:	89 3c f5 20 a0 10 00 	mov    %edi,0x10a020(,%esi,8)
  100cfe:	89 1c f5 24 a0 10 00 	mov    %ebx,0x10a024(,%esi,8)
	idt[i] |= ((handler >> 16) & 0xffffLL) << 48;
  100d05:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
  100d09:	c1 e0 10             	shl    $0x10,%eax
  100d0c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100d0f:	8b 3c f5 20 a0 10 00 	mov    0x10a020(,%esi,8),%edi
  100d16:	8b 1c f5 24 a0 10 00 	mov    0x10a024(,%esi,8),%ebx
  100d1d:	09 c3                	or     %eax,%ebx
  100d1f:	89 3c f5 20 a0 10 00 	mov    %edi,0x10a020(,%esi,8)
  100d26:	89 1c f5 24 a0 10 00 	mov    %ebx,0x10a024(,%esi,8)
}
  100d2d:	83 c4 10             	add    $0x10,%esp
  100d30:	5e                   	pop    %esi
  100d31:	5f                   	pop    %edi
  100d32:	5b                   	pop    %ebx
  100d33:	5d                   	pop    %ebp
  100d34:	c3                   	ret    
  100d35:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  100d3c:	00 00 00 00 

00100d40 <init_idt>:

void init_idt() {
  100d40:	55                   	push   %ebp
  100d41:	89 e5                	mov    %esp,%ebp
	struct {
  100d43:	56                   	push   %esi
  100d44:	81 ec 34 02 00 00    	sub    $0x234,%esp
  100d4a:	a1 2a 80 10 00       	mov    0x10802a,%eax
  100d4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100d52:	66 8b 0d 2e 80 10 00 	mov    0x10802e,%cx
  100d59:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
		unsigned short int limit;
		void* pointer;
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;
  100d5d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	for (i = 0; i < IDT_ENTRIES; i++) {
  100d64:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100d6b:	81 7d ec 40 00 00 00 	cmpl   $0x40,-0x14(%ebp)
  100d72:	0f 8d 1e 00 00 00    	jge    100d96 <init_idt+0x56>
		handler_set[i] = 0;
  100d78:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d7b:	c7 04 85 20 a2 10 00 	movl   $0x0,0x10a220(,%eax,4)
  100d82:	00 00 00 00 
	}__attribute__((packed)) idtp = { .limit = IDT_ENTRIES * 8 - 1, .pointer =
			idt, };

	int i = 0;

	for (i = 0; i < IDT_ENTRIES; i++) {
  100d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d89:	05 01 00 00 00       	add    $0x1,%eax
  100d8e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100d91:	e9 d5 ff ff ff       	jmp    100d6b <init_idt+0x2b>
  100d96:	b8 20 00 00 00       	mov    $0x20,%eax
  100d9b:	b9 11 00 00 00       	mov    $0x11,%ecx
		handler_set[i] = 0;
	}

	outb(0x20, 0x11); // Initialisierungsbefehl fuer den PIC
  100da0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100da7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100dae:	00 
  100daf:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100db2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  100db5:	e8 86 0b 00 00       	call   101940 <outb>
  100dba:	b8 21 00 00 00       	mov    $0x21,%eax
  100dbf:	b9 20 00 00 00       	mov    $0x20,%ecx
	outb(0x21, 0x20); // Interruptnummer fuer IRQ 0
  100dc4:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100dcb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  100dd2:	00 
  100dd3:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100dd6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  100dd9:	e8 62 0b 00 00       	call   101940 <outb>
  100dde:	b8 21 00 00 00       	mov    $0x21,%eax
  100de3:	b9 04 00 00 00       	mov    $0x4,%ecx
	outb(0x21, 0x04); // An IRQ 2 haengt der Slave
  100de8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100def:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  100df6:	00 
  100df7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  100dfa:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  100dfd:	e8 3e 0b 00 00       	call   101940 <outb>
  100e02:	b8 21 00 00 00       	mov    $0x21,%eax
  100e07:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0x21, 0x01); // ICW 4
  100e0c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  100e13:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100e1a:	00 
  100e1b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100e1e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  100e21:	e8 1a 0b 00 00       	call   101940 <outb>
  100e26:	b8 a0 00 00 00       	mov    $0xa0,%eax
  100e2b:	b9 11 00 00 00       	mov    $0x11,%ecx

	outb(0xa0, 0x11); // Initialisierungsbefehl fuer den PIC
  100e30:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100e37:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  100e3e:	00 
  100e3f:	89 45 c8             	mov    %eax,-0x38(%ebp)
  100e42:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  100e45:	e8 f6 0a 00 00       	call   101940 <outb>
  100e4a:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e4f:	b9 28 00 00 00       	mov    $0x28,%ecx
	outb(0xa1, 0x28); // Interruptnummer fuer IRQ 8
  100e54:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100e5b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  100e62:	00 
  100e63:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100e66:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  100e69:	e8 d2 0a 00 00       	call   101940 <outb>
  100e6e:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e73:	b9 02 00 00 00       	mov    $0x2,%ecx
	outb(0xa1, 0x02); // An IRQ 2 haengt der Slave
  100e78:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100e7f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100e86:	00 
  100e87:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100e8a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  100e8d:	e8 ae 0a 00 00       	call   101940 <outb>
  100e92:	b8 a1 00 00 00       	mov    $0xa1,%eax
  100e97:	b9 01 00 00 00       	mov    $0x1,%ecx
	outb(0xa1, 0x01); // ICW 4
  100e9c:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  100ea3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  100eaa:	00 
  100eab:	89 45 b0             	mov    %eax,-0x50(%ebp)
  100eae:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  100eb1:	e8 8a 0a 00 00       	call   101940 <outb>
  100eb6:	b8 20 00 00 00       	mov    $0x20,%eax
  100ebb:	b9 00 00 00 00       	mov    $0x0,%ecx

	outb(0x20, 0x0);
  100ec0:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  100ec7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ece:	00 
  100ecf:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100ed2:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  100ed5:	e8 66 0a 00 00       	call   101940 <outb>
  100eda:	b8 a0 00 00 00       	mov    $0xa0,%eax
  100edf:	b9 00 00 00 00       	mov    $0x0,%ecx
	outb(0xa0, 0x0);
  100ee4:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  100eeb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100ef2:	00 
  100ef3:	89 45 a0             	mov    %eax,-0x60(%ebp)
  100ef6:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  100ef9:	e8 42 0a 00 00       	call   101940 <outb>
  100efe:	b8 00 00 00 00       	mov    $0x0,%eax
  100f03:	8d 0d 14 1b 10 00    	lea    0x101b14,%ecx
  100f09:	ba 08 00 00 00       	mov    $0x8,%edx
  100f0e:	be 8e 00 00 00       	mov    $0x8e,%esi

	idt_set_entry(0, intr_stub_0, 0x8,
  100f13:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100f1a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f1e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100f25:	00 
  100f26:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100f2d:	00 
  100f2e:	89 45 98             	mov    %eax,-0x68(%ebp)
  100f31:	89 75 94             	mov    %esi,-0x6c(%ebp)
  100f34:	89 55 90             	mov    %edx,-0x70(%ebp)
  100f37:	e8 34 fd ff ff       	call   100c70 <idt_set_entry>
  100f3c:	b8 01 00 00 00       	mov    $0x1,%eax
  100f41:	8d 0d 1d 1b 10 00    	lea    0x101b1d,%ecx
  100f47:	ba 08 00 00 00       	mov    $0x8,%edx
  100f4c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(1, intr_stub_1, 0x8,
  100f51:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100f58:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f5c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100f63:	00 
  100f64:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100f6b:	00 
  100f6c:	89 45 8c             	mov    %eax,-0x74(%ebp)
  100f6f:	89 75 88             	mov    %esi,-0x78(%ebp)
  100f72:	89 55 84             	mov    %edx,-0x7c(%ebp)
  100f75:	e8 f6 fc ff ff       	call   100c70 <idt_set_entry>
  100f7a:	b8 02 00 00 00       	mov    $0x2,%eax
  100f7f:	8d 0d 26 1b 10 00    	lea    0x101b26,%ecx
  100f85:	ba 08 00 00 00       	mov    $0x8,%edx
  100f8a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(2, intr_stub_2, 0x8,
  100f8f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  100f96:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100f9a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100fa1:	00 
  100fa2:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100fa9:	00 
  100faa:	89 45 80             	mov    %eax,-0x80(%ebp)
  100fad:	89 b5 7c ff ff ff    	mov    %esi,-0x84(%ebp)
  100fb3:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
  100fb9:	e8 b2 fc ff ff       	call   100c70 <idt_set_entry>
  100fbe:	b8 03 00 00 00       	mov    $0x3,%eax
  100fc3:	8d 0d 2f 1b 10 00    	lea    0x101b2f,%ecx
  100fc9:	ba 08 00 00 00       	mov    $0x8,%edx
  100fce:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(3, intr_stub_3, 0x8,
  100fd3:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  100fda:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100fde:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100fe5:	00 
  100fe6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  100fed:	00 
  100fee:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  100ff4:	89 b5 70 ff ff ff    	mov    %esi,-0x90(%ebp)
  100ffa:	89 95 6c ff ff ff    	mov    %edx,-0x94(%ebp)
  101000:	e8 6b fc ff ff       	call   100c70 <idt_set_entry>
  101005:	b8 04 00 00 00       	mov    $0x4,%eax
  10100a:	8d 0d 38 1b 10 00    	lea    0x101b38,%ecx
  101010:	ba 08 00 00 00       	mov    $0x8,%edx
  101015:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(4, intr_stub_4, 0x8,
  10101a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  101021:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101025:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10102c:	00 
  10102d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101034:	00 
  101035:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10103b:	89 b5 64 ff ff ff    	mov    %esi,-0x9c(%ebp)
  101041:	89 95 60 ff ff ff    	mov    %edx,-0xa0(%ebp)
  101047:	e8 24 fc ff ff       	call   100c70 <idt_set_entry>
  10104c:	b8 05 00 00 00       	mov    $0x5,%eax
  101051:	8d 0d 41 1b 10 00    	lea    0x101b41,%ecx
  101057:	ba 08 00 00 00       	mov    $0x8,%edx
  10105c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(5, intr_stub_5, 0x8,
  101061:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  101068:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10106c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101073:	00 
  101074:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10107b:	00 
  10107c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  101082:	89 b5 58 ff ff ff    	mov    %esi,-0xa8(%ebp)
  101088:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
  10108e:	e8 dd fb ff ff       	call   100c70 <idt_set_entry>
  101093:	b8 06 00 00 00       	mov    $0x6,%eax
  101098:	8d 0d 4a 1b 10 00    	lea    0x101b4a,%ecx
  10109e:	ba 08 00 00 00       	mov    $0x8,%edx
  1010a3:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(6, intr_stub_6, 0x8,
  1010a8:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  1010af:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010b3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1010ba:	00 
  1010bb:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1010c2:	00 
  1010c3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1010c9:	89 b5 4c ff ff ff    	mov    %esi,-0xb4(%ebp)
  1010cf:	89 95 48 ff ff ff    	mov    %edx,-0xb8(%ebp)
  1010d5:	e8 96 fb ff ff       	call   100c70 <idt_set_entry>
  1010da:	b8 07 00 00 00       	mov    $0x7,%eax
  1010df:	8d 0d 53 1b 10 00    	lea    0x101b53,%ecx
  1010e5:	ba 08 00 00 00       	mov    $0x8,%edx
  1010ea:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(7, intr_stub_7, 0x8,
  1010ef:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  1010f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1010fa:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101101:	00 
  101102:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101109:	00 
  10110a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  101110:	89 b5 40 ff ff ff    	mov    %esi,-0xc0(%ebp)
  101116:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
  10111c:	e8 4f fb ff ff       	call   100c70 <idt_set_entry>
  101121:	b8 08 00 00 00       	mov    $0x8,%eax
  101126:	8d 0d 5c 1b 10 00    	lea    0x101b5c,%ecx
  10112c:	ba 8e 00 00 00       	mov    $0x8e,%edx
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(8, intr_stub_8, 0x8,
  101131:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101138:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10113c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101143:	00 
  101144:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10114b:	00 
  10114c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  101152:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%ebp)
  101158:	e8 13 fb ff ff       	call   100c70 <idt_set_entry>
  10115d:	b8 09 00 00 00       	mov    $0x9,%eax
  101162:	8d 0d 63 1b 10 00    	lea    0x101b63,%ecx
  101168:	ba 08 00 00 00       	mov    $0x8,%edx
  10116d:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(9, intr_stub_9, 0x8,
  101172:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  101179:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10117d:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101184:	00 
  101185:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10118c:	00 
  10118d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  101193:	89 b5 2c ff ff ff    	mov    %esi,-0xd4(%ebp)
  101199:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
  10119f:	e8 cc fa ff ff       	call   100c70 <idt_set_entry>
  1011a4:	b8 0a 00 00 00       	mov    $0xa,%eax
  1011a9:	8d 0d 6c 1b 10 00    	lea    0x101b6c,%ecx
  1011af:	ba 08 00 00 00       	mov    $0x8,%edx
  1011b4:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(10, intr_stub_10, 0x8,
  1011b9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1011c0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1011c4:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1011cb:	00 
  1011cc:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1011d3:	00 
  1011d4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  1011da:	89 b5 20 ff ff ff    	mov    %esi,-0xe0(%ebp)
  1011e0:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%ebp)
  1011e6:	e8 85 fa ff ff       	call   100c70 <idt_set_entry>
  1011eb:	b8 0b 00 00 00       	mov    $0xb,%eax
  1011f0:	8d 0d 73 1b 10 00    	lea    0x101b73,%ecx
  1011f6:	ba 08 00 00 00       	mov    $0x8,%edx
  1011fb:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(11, intr_stub_11, 0x8,
  101200:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  101207:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10120b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101212:	00 
  101213:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10121a:	00 
  10121b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  101221:	89 b5 14 ff ff ff    	mov    %esi,-0xec(%ebp)
  101227:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  10122d:	e8 3e fa ff ff       	call   100c70 <idt_set_entry>
  101232:	b8 0c 00 00 00       	mov    $0xc,%eax
  101237:	8d 0d 7a 1b 10 00    	lea    0x101b7a,%ecx
  10123d:	ba 08 00 00 00       	mov    $0x8,%edx
  101242:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(12, intr_stub_12, 0x8,
  101247:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10124e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101252:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101259:	00 
  10125a:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101261:	00 
  101262:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  101268:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  10126e:	89 95 04 ff ff ff    	mov    %edx,-0xfc(%ebp)
  101274:	e8 f7 f9 ff ff       	call   100c70 <idt_set_entry>
  101279:	b8 0d 00 00 00       	mov    $0xd,%eax
  10127e:	8d 0d 81 1b 10 00    	lea    0x101b81,%ecx
  101284:	ba 08 00 00 00       	mov    $0x8,%edx
  101289:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(13, intr_stub_13, 0x8,
  10128e:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  101295:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101299:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1012a0:	00 
  1012a1:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1012a8:	00 
  1012a9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  1012af:	89 b5 fc fe ff ff    	mov    %esi,-0x104(%ebp)
  1012b5:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%ebp)
  1012bb:	e8 b0 f9 ff ff       	call   100c70 <idt_set_entry>
  1012c0:	b8 0e 00 00 00       	mov    $0xe,%eax
  1012c5:	8d 0d 88 1b 10 00    	lea    0x101b88,%ecx
  1012cb:	ba 08 00 00 00       	mov    $0x8,%edx
  1012d0:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(14, intr_stub_14, 0x8,
  1012d5:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
  1012dc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1012e0:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1012e7:	00 
  1012e8:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1012ef:	00 
  1012f0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  1012f6:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
  1012fc:	89 95 ec fe ff ff    	mov    %edx,-0x114(%ebp)
  101302:	e8 69 f9 ff ff       	call   100c70 <idt_set_entry>
  101307:	b8 0f 00 00 00       	mov    $0xf,%eax
  10130c:	8d 0d 8c 1b 10 00    	lea    0x101b8c,%ecx
  101312:	ba 08 00 00 00       	mov    $0x8,%edx
  101317:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(15, intr_stub_15, 0x8,
  10131c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
  101323:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101327:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10132e:	00 
  10132f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101336:	00 
  101337:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10133d:	89 b5 e4 fe ff ff    	mov    %esi,-0x11c(%ebp)
  101343:	89 95 e0 fe ff ff    	mov    %edx,-0x120(%ebp)
  101349:	e8 22 f9 ff ff       	call   100c70 <idt_set_entry>
  10134e:	b8 10 00 00 00       	mov    $0x10,%eax
  101353:	8d 0d 92 1b 10 00    	lea    0x101b92,%ecx
  101359:	ba 08 00 00 00       	mov    $0x8,%edx
  10135e:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(16, intr_stub_16, 0x8,
  101363:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10136a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10136e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101375:	00 
  101376:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10137d:	00 
  10137e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  101384:	89 b5 d8 fe ff ff    	mov    %esi,-0x128(%ebp)
  10138a:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
  101390:	e8 db f8 ff ff       	call   100c70 <idt_set_entry>
  101395:	b8 11 00 00 00       	mov    $0x11,%eax
  10139a:	8d 0d 98 1b 10 00    	lea    0x101b98,%ecx
  1013a0:	ba 08 00 00 00       	mov    $0x8,%edx
  1013a5:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(17, intr_stub_17, 0x8,
  1013aa:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
  1013b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1013b5:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1013bc:	00 
  1013bd:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1013c4:	00 
  1013c5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  1013cb:	89 b5 cc fe ff ff    	mov    %esi,-0x134(%ebp)
  1013d1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%ebp)
  1013d7:	e8 94 f8 ff ff       	call   100c70 <idt_set_entry>
  1013dc:	b8 12 00 00 00       	mov    $0x12,%eax
  1013e1:	8d 0d 9c 1b 10 00    	lea    0x101b9c,%ecx
  1013e7:	ba 08 00 00 00       	mov    $0x8,%edx
  1013ec:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(18, intr_stub_18, 0x8,
  1013f1:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
  1013f8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1013fc:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101403:	00 
  101404:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10140b:	00 
  10140c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  101412:	89 b5 c0 fe ff ff    	mov    %esi,-0x140(%ebp)
  101418:	89 95 bc fe ff ff    	mov    %edx,-0x144(%ebp)
  10141e:	e8 4d f8 ff ff       	call   100c70 <idt_set_entry>
  101423:	b8 20 00 00 00       	mov    $0x20,%eax
  101428:	8d 0d a2 1b 10 00    	lea    0x101ba2,%ecx
  10142e:	ba 08 00 00 00       	mov    $0x8,%edx
  101433:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(32, intr_stub_32, 0x8,
  101438:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10143f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101443:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10144a:	00 
  10144b:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101452:	00 
  101453:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  101459:	89 b5 b4 fe ff ff    	mov    %esi,-0x14c(%ebp)
  10145f:	89 95 b0 fe ff ff    	mov    %edx,-0x150(%ebp)
  101465:	e8 06 f8 ff ff       	call   100c70 <idt_set_entry>
  10146a:	b8 21 00 00 00       	mov    $0x21,%eax
  10146f:	8d 0d a8 1b 10 00    	lea    0x101ba8,%ecx
  101475:	ba 08 00 00 00       	mov    $0x8,%edx
  10147a:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(33, intr_stub_33, 0x8,
  10147f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  101486:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10148a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101491:	00 
  101492:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101499:	00 
  10149a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  1014a0:	89 b5 a8 fe ff ff    	mov    %esi,-0x158(%ebp)
  1014a6:	89 95 a4 fe ff ff    	mov    %edx,-0x15c(%ebp)
  1014ac:	e8 bf f7 ff ff       	call   100c70 <idt_set_entry>
  1014b1:	b8 22 00 00 00       	mov    $0x22,%eax
  1014b6:	8d 0d ae 1b 10 00    	lea    0x101bae,%ecx
  1014bc:	ba 08 00 00 00       	mov    $0x8,%edx
  1014c1:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(34, intr_stub_34, 0x8,
  1014c6:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
  1014cd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1014d1:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1014d8:	00 
  1014d9:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1014e0:	00 
  1014e1:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  1014e7:	89 b5 9c fe ff ff    	mov    %esi,-0x164(%ebp)
  1014ed:	89 95 98 fe ff ff    	mov    %edx,-0x168(%ebp)
  1014f3:	e8 78 f7 ff ff       	call   100c70 <idt_set_entry>
  1014f8:	b8 23 00 00 00       	mov    $0x23,%eax
  1014fd:	8d 0d b4 1b 10 00    	lea    0x101bb4,%ecx
  101503:	ba 08 00 00 00       	mov    $0x8,%edx
  101508:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(35, intr_stub_35, 0x8,
  10150d:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
  101514:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101518:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10151f:	00 
  101520:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101527:	00 
  101528:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  10152e:	89 b5 90 fe ff ff    	mov    %esi,-0x170(%ebp)
  101534:	89 95 8c fe ff ff    	mov    %edx,-0x174(%ebp)
  10153a:	e8 31 f7 ff ff       	call   100c70 <idt_set_entry>
  10153f:	b8 24 00 00 00       	mov    $0x24,%eax
  101544:	8d 0d ba 1b 10 00    	lea    0x101bba,%ecx
  10154a:	ba 08 00 00 00       	mov    $0x8,%edx
  10154f:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(36, intr_stub_36, 0x8,
  101554:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
  10155b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10155f:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101566:	00 
  101567:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10156e:	00 
  10156f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
  101575:	89 b5 84 fe ff ff    	mov    %esi,-0x17c(%ebp)
  10157b:	89 95 80 fe ff ff    	mov    %edx,-0x180(%ebp)
  101581:	e8 ea f6 ff ff       	call   100c70 <idt_set_entry>
  101586:	b8 25 00 00 00       	mov    $0x25,%eax
  10158b:	8d 0d c0 1b 10 00    	lea    0x101bc0,%ecx
  101591:	ba 08 00 00 00       	mov    $0x8,%edx
  101596:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(37, intr_stub_37, 0x8,
  10159b:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  1015a2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015a6:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015ad:	00 
  1015ae:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015b5:	00 
  1015b6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  1015bc:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%ebp)
  1015c2:	89 95 74 fe ff ff    	mov    %edx,-0x18c(%ebp)
  1015c8:	e8 a3 f6 ff ff       	call   100c70 <idt_set_entry>
  1015cd:	b8 26 00 00 00       	mov    $0x26,%eax
  1015d2:	8d 0d c6 1b 10 00    	lea    0x101bc6,%ecx
  1015d8:	ba 08 00 00 00       	mov    $0x8,%edx
  1015dd:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(38, intr_stub_38, 0x8,
  1015e2:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
  1015e9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1015ed:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1015f4:	00 
  1015f5:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1015fc:	00 
  1015fd:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
  101603:	89 b5 6c fe ff ff    	mov    %esi,-0x194(%ebp)
  101609:	89 95 68 fe ff ff    	mov    %edx,-0x198(%ebp)
  10160f:	e8 5c f6 ff ff       	call   100c70 <idt_set_entry>
  101614:	b8 27 00 00 00       	mov    $0x27,%eax
  101619:	8d 0d cc 1b 10 00    	lea    0x101bcc,%ecx
  10161f:	ba 08 00 00 00       	mov    $0x8,%edx
  101624:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(39, intr_stub_39, 0x8,
  101629:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
  101630:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101634:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10163b:	00 
  10163c:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101643:	00 
  101644:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
  10164a:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%ebp)
  101650:	89 95 5c fe ff ff    	mov    %edx,-0x1a4(%ebp)
  101656:	e8 15 f6 ff ff       	call   100c70 <idt_set_entry>
  10165b:	b8 28 00 00 00       	mov    $0x28,%eax
  101660:	8d 0d d2 1b 10 00    	lea    0x101bd2,%ecx
  101666:	ba 08 00 00 00       	mov    $0x8,%edx
  10166b:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(40, intr_stub_40, 0x8,
  101670:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
  101677:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10167b:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101682:	00 
  101683:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10168a:	00 
  10168b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
  101691:	89 b5 54 fe ff ff    	mov    %esi,-0x1ac(%ebp)
  101697:	89 95 50 fe ff ff    	mov    %edx,-0x1b0(%ebp)
  10169d:	e8 ce f5 ff ff       	call   100c70 <idt_set_entry>
  1016a2:	b8 29 00 00 00       	mov    $0x29,%eax
  1016a7:	8d 0d d8 1b 10 00    	lea    0x101bd8,%ecx
  1016ad:	ba 08 00 00 00       	mov    $0x8,%edx
  1016b2:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(41, intr_stub_41, 0x8,
  1016b7:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
  1016be:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1016c2:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1016c9:	00 
  1016ca:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1016d1:	00 
  1016d2:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
  1016d8:	89 b5 48 fe ff ff    	mov    %esi,-0x1b8(%ebp)
  1016de:	89 95 44 fe ff ff    	mov    %edx,-0x1bc(%ebp)
  1016e4:	e8 87 f5 ff ff       	call   100c70 <idt_set_entry>
  1016e9:	b8 2a 00 00 00       	mov    $0x2a,%eax
  1016ee:	8d 0d de 1b 10 00    	lea    0x101bde,%ecx
  1016f4:	ba 08 00 00 00       	mov    $0x8,%edx
  1016f9:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(42, intr_stub_42, 0x8,
  1016fe:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
  101705:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101709:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101710:	00 
  101711:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101718:	00 
  101719:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
  10171f:	89 b5 3c fe ff ff    	mov    %esi,-0x1c4(%ebp)
  101725:	89 95 38 fe ff ff    	mov    %edx,-0x1c8(%ebp)
  10172b:	e8 40 f5 ff ff       	call   100c70 <idt_set_entry>
  101730:	b8 2b 00 00 00       	mov    $0x2b,%eax
  101735:	8d 0d e4 1b 10 00    	lea    0x101be4,%ecx
  10173b:	ba 08 00 00 00       	mov    $0x8,%edx
  101740:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(43, intr_stub_43, 0x8,
  101745:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
  10174c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101750:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101757:	00 
  101758:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10175f:	00 
  101760:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
  101766:	89 b5 30 fe ff ff    	mov    %esi,-0x1d0(%ebp)
  10176c:	89 95 2c fe ff ff    	mov    %edx,-0x1d4(%ebp)
  101772:	e8 f9 f4 ff ff       	call   100c70 <idt_set_entry>
  101777:	b8 2c 00 00 00       	mov    $0x2c,%eax
  10177c:	8d 0d ea 1b 10 00    	lea    0x101bea,%ecx
  101782:	ba 08 00 00 00       	mov    $0x8,%edx
  101787:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(44, intr_stub_44, 0x8,
  10178c:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  101793:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101797:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10179e:	00 
  10179f:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017a6:	00 
  1017a7:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
  1017ad:	89 b5 24 fe ff ff    	mov    %esi,-0x1dc(%ebp)
  1017b3:	89 95 20 fe ff ff    	mov    %edx,-0x1e0(%ebp)
  1017b9:	e8 b2 f4 ff ff       	call   100c70 <idt_set_entry>
  1017be:	b8 2d 00 00 00       	mov    $0x2d,%eax
  1017c3:	8d 0d f0 1b 10 00    	lea    0x101bf0,%ecx
  1017c9:	ba 08 00 00 00       	mov    $0x8,%edx
  1017ce:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(45, intr_stub_45, 0x8,
  1017d3:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  1017da:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1017de:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1017e5:	00 
  1017e6:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  1017ed:	00 
  1017ee:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
  1017f4:	89 b5 18 fe ff ff    	mov    %esi,-0x1e8(%ebp)
  1017fa:	89 95 14 fe ff ff    	mov    %edx,-0x1ec(%ebp)
  101800:	e8 6b f4 ff ff       	call   100c70 <idt_set_entry>
  101805:	b8 2e 00 00 00       	mov    $0x2e,%eax
  10180a:	8d 0d f6 1b 10 00    	lea    0x101bf6,%ecx
  101810:	ba 08 00 00 00       	mov    $0x8,%edx
  101815:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(46, intr_stub_46, 0x8,
  10181a:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
  101821:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101825:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10182c:	00 
  10182d:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  101834:	00 
  101835:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
  10183b:	89 b5 0c fe ff ff    	mov    %esi,-0x1f4(%ebp)
  101841:	89 95 08 fe ff ff    	mov    %edx,-0x1f8(%ebp)
  101847:	e8 24 f4 ff ff       	call   100c70 <idt_set_entry>
  10184c:	b8 2f 00 00 00       	mov    $0x2f,%eax
  101851:	8d 0d fc 1b 10 00    	lea    0x101bfc,%ecx
  101857:	ba 08 00 00 00       	mov    $0x8,%edx
  10185c:	be 8e 00 00 00       	mov    $0x8e,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);
	idt_set_entry(47, intr_stub_47, 0x8,
  101861:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
  101868:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10186c:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  101873:	00 
  101874:	c7 44 24 0c 8e 00 00 	movl   $0x8e,0xc(%esp)
  10187b:	00 
  10187c:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
  101882:	89 b5 00 fe ff ff    	mov    %esi,-0x200(%ebp)
  101888:	89 95 fc fd ff ff    	mov    %edx,-0x204(%ebp)
  10188e:	e8 dd f3 ff ff       	call   100c70 <idt_set_entry>
  101893:	b8 30 00 00 00       	mov    $0x30,%eax
  101898:	8d 0d 02 1c 10 00    	lea    0x101c02,%ecx
  10189e:	ba 08 00 00 00       	mov    $0x8,%edx
  1018a3:	be ee 00 00 00       	mov    $0xee,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING0 | IDT_FLAG_PRESENT);

	idt_set_entry(48, intr_stub_48, 0x8,
  1018a8:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  1018af:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018b3:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  1018ba:	00 
  1018bb:	c7 44 24 0c ee 00 00 	movl   $0xee,0xc(%esp)
  1018c2:	00 
  1018c3:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
  1018c9:	89 b5 f4 fd ff ff    	mov    %esi,-0x20c(%ebp)
  1018cf:	89 95 f0 fd ff ff    	mov    %edx,-0x210(%ebp)
  1018d5:	e8 96 f3 ff ff       	call   100c70 <idt_set_entry>
  1018da:	b8 05 00 00 00       	mov    $0x5,%eax
  1018df:	8d 0d 08 71 10 00    	lea    0x107108,%ecx
  1018e5:	ba 80 00 00 00       	mov    $0x80,%edx
  1018ea:	be e9 00 00 00       	mov    $0xe9,%esi
			IDT_FLAG_INTERRUPT_GATE | IDT_FLAG_RING3 | IDT_FLAG_PRESENT);

	set_gdt_entry(5, (uint32_t) tss, sizeof(tss),
  1018ef:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  1018f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1018fa:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
  101901:	00 
  101902:	c7 44 24 0c e9 00 00 	movl   $0xe9,0xc(%esp)
  101909:	00 
  10190a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
  101910:	89 b5 e8 fd ff ff    	mov    %esi,-0x218(%ebp)
  101916:	89 95 e4 fd ff ff    	mov    %edx,-0x21c(%ebp)
  10191c:	e8 df f0 ff ff       	call   100a00 <set_gdt_entry>
  101921:	b8 28 00 00 00       	mov    $0x28,%eax
			GDT_FLAG_TSS | GDT_FLAG_PRESENT | GDT_FLAG_RING3);

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  101926:	0f 00 d8             	ltr    %ax

	asm volatile("lidt %0" : : "m" (idtp));
  101929:	0f 01 5d f0          	lidtl  -0x10(%ebp)
	asm volatile("sti");
  10192d:	fb                   	sti    
}
  10192e:	81 c4 34 02 00 00    	add    $0x234,%esp
  101934:	5e                   	pop    %esi
  101935:	5d                   	pop    %ebp
  101936:	c3                   	ret    
  101937:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10193e:	00 00 

00101940 <outb>:

static inline void outw(uint16_t _port, uint16_t _data) {
    asm volatile ("outw %0, %1" : : "a" (_data), "Nd" (_port));
}

static inline void outb(uint16_t _port, uint8_t _data) {
  101940:	55                   	push   %ebp
  101941:	89 e5                	mov    %esp,%ebp
  101943:	50                   	push   %eax
  101944:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101948:	66 89 c1             	mov    %ax,%cx
  10194b:	8a 55 0c             	mov    0xc(%ebp),%dl
  10194e:	66 89 4d fe          	mov    %cx,-0x2(%ebp)
  101952:	88 55 fd             	mov    %dl,-0x3(%ebp)
    asm volatile ("outb %0, %1" : : "a" (_data), "Nd" (_port));
  101955:	8a 45 fd             	mov    -0x3(%ebp),%al
  101958:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10195c:	ee                   	out    %al,(%dx)
}
  10195d:	83 c4 04             	add    $0x4,%esp
  101960:	5d                   	pop    %ebp
  101961:	c3                   	ret    
  101962:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  101969:	1f 84 00 00 00 00 00 

00101970 <register_intr_handler>:

void register_intr_handler(int i, void (*fn)()) {
  101970:	55                   	push   %ebp
  101971:	89 e5                	mov    %esp,%ebp
  101973:	83 ec 08             	sub    $0x8,%esp
  101976:	8b 45 0c             	mov    0xc(%ebp),%eax
  101979:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10197c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10197f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	handlers[i] = fn;
  101982:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101985:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  101988:	89 04 8d 20 a3 10 00 	mov    %eax,0x10a320(,%ecx,4)
	handler_set[i] = 1;
  10198f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101992:	c7 04 85 20 a2 10 00 	movl   $0x1,0x10a220(,%eax,4)
  101999:	01 00 00 00 
}
  10199d:	83 c4 08             	add    $0x8,%esp
  1019a0:	5d                   	pop    %ebp
  1019a1:	c3                   	ret    
  1019a2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1019a9:	1f 84 00 00 00 00 00 

001019b0 <handle_interrupt>:

struct cpu_state* handle_interrupt(struct cpu_state* cpu) {
  1019b0:	55                   	push   %ebp
  1019b1:	89 e5                	mov    %esp,%ebp
  1019b3:	83 ec 28             	sub    $0x28,%esp
  1019b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1019b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct cpu_state* new_cpu = cpu;
  1019bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019bf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if (cpu->intr <= 0x1f) {
  1019c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019c5:	81 78 1c 1f 00 00 00 	cmpl   $0x1f,0x1c(%eax)
  1019cc:	0f 87 3d 00 00 00    	ja     101a0f <handle_interrupt+0x5f>
		if (!isSchedulingEnabled()) {
  1019d2:	e8 f9 1c 00 00       	call   1036d0 <isSchedulingEnabled>
  1019d7:	3d 00 00 00 00       	cmp    $0x0,%eax
  1019dc:	0f 85 1a 00 00 00    	jne    1019fc <handle_interrupt+0x4c>
  1019e2:	8d 05 35 82 10 00    	lea    0x108235,%eax
			show_cod(cpu, "Kernel PANIC!");
  1019e8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1019eb:	89 0c 24             	mov    %ecx,(%esp)
  1019ee:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019f2:	e8 79 e9 ff ff       	call   100370 <show_cod>
		} else {
  1019f7:	e9 0e 00 00 00       	jmp    101a0a <handle_interrupt+0x5a>
			schedule_exception(cpu);
  1019fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1019ff:	89 04 24             	mov    %eax,(%esp)
  101a02:	e8 39 1e 00 00       	call   103840 <schedule_exception>
  101a07:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}
	} else if (cpu->intr >= 0x20 && cpu->intr <= 0x2f) {
  101a0a:	e9 fc 00 00 00       	jmp    101b0b <handle_interrupt+0x15b>
  101a0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a12:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101a19:	0f 82 a7 00 00 00    	jb     101ac6 <handle_interrupt+0x116>
  101a1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a22:	81 78 1c 2f 00 00 00 	cmpl   $0x2f,0x1c(%eax)
  101a29:	0f 87 97 00 00 00    	ja     101ac6 <handle_interrupt+0x116>
		if (cpu->intr >= 0x28) {
  101a2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a32:	81 78 1c 28 00 00 00 	cmpl   $0x28,0x1c(%eax)
  101a39:	0f 82 24 00 00 00    	jb     101a63 <handle_interrupt+0xb3>
  101a3f:	b8 a0 00 00 00       	mov    $0xa0,%eax
  101a44:	b9 20 00 00 00       	mov    $0x20,%ecx
			outb(0xa0, 0x20);
  101a49:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  101a50:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101a57:	00 
  101a58:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101a5b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  101a5e:	e8 dd fe ff ff       	call   101940 <outb>
		}
		if (cpu->intr == 0x20) {
  101a63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a66:	81 78 1c 20 00 00 00 	cmpl   $0x20,0x1c(%eax)
  101a6d:	0f 85 0e 00 00 00    	jne    101a81 <handle_interrupt+0xd1>
			new_cpu = schedule(cpu);
  101a73:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101a76:	89 04 24             	mov    %eax,(%esp)
  101a79:	e8 22 22 00 00       	call   103ca0 <schedule>
  101a7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101a81:	b8 20 00 00 00       	mov    $0x20,%eax
		}
		outb(0x20, 0x20);
  101a86:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101a8d:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  101a94:	00 
  101a95:	89 45 e8             	mov    %eax,-0x18(%ebp)
  101a98:	e8 a3 fe ff ff       	call   101940 <outb>
		if (handler_set[cpu->intr]) {
  101a9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101aa0:	8b 40 1c             	mov    0x1c(%eax),%eax
  101aa3:	81 3c 85 20 a2 10 00 	cmpl   $0x0,0x10a220(,%eax,4)
  101aaa:	00 00 00 00 
  101aae:	0f 84 0d 00 00 00    	je     101ac1 <handle_interrupt+0x111>
			handlers[cpu->intr]();
  101ab4:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ab7:	8b 40 1c             	mov    0x1c(%eax),%eax
  101aba:	ff 14 85 20 a3 10 00 	call   *0x10a320(,%eax,4)
		}
	} else if (cpu->intr == 0x30) {
  101ac1:	e9 40 00 00 00       	jmp    101b06 <handle_interrupt+0x156>
  101ac6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ac9:	81 78 1c 30 00 00 00 	cmpl   $0x30,0x1c(%eax)
  101ad0:	0f 85 13 00 00 00    	jne    101ae9 <handle_interrupt+0x139>
		new_cpu = syscall(new_cpu);
  101ad6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ad9:	89 04 24             	mov    %eax,(%esp)
  101adc:	e8 5f 01 00 00       	call   101c40 <syscall>
  101ae1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	} else {
  101ae4:	e9 18 00 00 00       	jmp    101b01 <handle_interrupt+0x151>
  101ae9:	8d 05 43 82 10 00    	lea    0x108243,%eax
		kprintf("Unbekannter Interrupt\n");
  101aef:	89 04 24             	mov    %eax,(%esp)
  101af2:	e8 59 ea ff ff       	call   100550 <kprintf>
  101af7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		while (1) {
			// Prozessor anhalten
			asm volatile("cli; hlt");
  101afa:	fa                   	cli    
  101afb:	f4                   	hlt    
		}
  101afc:	e9 f9 ff ff ff       	jmp    101afa <handle_interrupt+0x14a>
  101b01:	e9 00 00 00 00       	jmp    101b06 <handle_interrupt+0x156>
  101b06:	e9 00 00 00 00       	jmp    101b0b <handle_interrupt+0x15b>
	}

	return new_cpu;
  101b0b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101b0e:	83 c4 28             	add    $0x28,%esp
  101b11:	5d                   	pop    %ebp
  101b12:	c3                   	ret    
  101b13:	90                   	nop

00101b14 <intr_stub_0>:
  101b14:	6a 00                	push   $0x0
  101b16:	6a 00                	push   $0x0
  101b18:	e9 eb 00 00 00       	jmp    101c08 <intr_common_handler>

00101b1d <intr_stub_1>:
  101b1d:	6a 00                	push   $0x0
  101b1f:	6a 01                	push   $0x1
  101b21:	e9 e2 00 00 00       	jmp    101c08 <intr_common_handler>

00101b26 <intr_stub_2>:
  101b26:	6a 00                	push   $0x0
  101b28:	6a 02                	push   $0x2
  101b2a:	e9 d9 00 00 00       	jmp    101c08 <intr_common_handler>

00101b2f <intr_stub_3>:
  101b2f:	6a 00                	push   $0x0
  101b31:	6a 03                	push   $0x3
  101b33:	e9 d0 00 00 00       	jmp    101c08 <intr_common_handler>

00101b38 <intr_stub_4>:
  101b38:	6a 00                	push   $0x0
  101b3a:	6a 04                	push   $0x4
  101b3c:	e9 c7 00 00 00       	jmp    101c08 <intr_common_handler>

00101b41 <intr_stub_5>:
  101b41:	6a 00                	push   $0x0
  101b43:	6a 05                	push   $0x5
  101b45:	e9 be 00 00 00       	jmp    101c08 <intr_common_handler>

00101b4a <intr_stub_6>:
  101b4a:	6a 00                	push   $0x0
  101b4c:	6a 06                	push   $0x6
  101b4e:	e9 b5 00 00 00       	jmp    101c08 <intr_common_handler>

00101b53 <intr_stub_7>:
  101b53:	6a 00                	push   $0x0
  101b55:	6a 07                	push   $0x7
  101b57:	e9 ac 00 00 00       	jmp    101c08 <intr_common_handler>

00101b5c <intr_stub_8>:
  101b5c:	6a 08                	push   $0x8
  101b5e:	e9 a5 00 00 00       	jmp    101c08 <intr_common_handler>

00101b63 <intr_stub_9>:
  101b63:	6a 00                	push   $0x0
  101b65:	6a 09                	push   $0x9
  101b67:	e9 9c 00 00 00       	jmp    101c08 <intr_common_handler>

00101b6c <intr_stub_10>:
  101b6c:	6a 0a                	push   $0xa
  101b6e:	e9 95 00 00 00       	jmp    101c08 <intr_common_handler>

00101b73 <intr_stub_11>:
  101b73:	6a 0b                	push   $0xb
  101b75:	e9 8e 00 00 00       	jmp    101c08 <intr_common_handler>

00101b7a <intr_stub_12>:
  101b7a:	6a 0c                	push   $0xc
  101b7c:	e9 87 00 00 00       	jmp    101c08 <intr_common_handler>

00101b81 <intr_stub_13>:
  101b81:	6a 0d                	push   $0xd
  101b83:	e9 80 00 00 00       	jmp    101c08 <intr_common_handler>

00101b88 <intr_stub_14>:
  101b88:	6a 0e                	push   $0xe
  101b8a:	eb 7c                	jmp    101c08 <intr_common_handler>

00101b8c <intr_stub_15>:
  101b8c:	6a 00                	push   $0x0
  101b8e:	6a 0f                	push   $0xf
  101b90:	eb 76                	jmp    101c08 <intr_common_handler>

00101b92 <intr_stub_16>:
  101b92:	6a 00                	push   $0x0
  101b94:	6a 10                	push   $0x10
  101b96:	eb 70                	jmp    101c08 <intr_common_handler>

00101b98 <intr_stub_17>:
  101b98:	6a 11                	push   $0x11
  101b9a:	eb 6c                	jmp    101c08 <intr_common_handler>

00101b9c <intr_stub_18>:
  101b9c:	6a 00                	push   $0x0
  101b9e:	6a 12                	push   $0x12
  101ba0:	eb 66                	jmp    101c08 <intr_common_handler>

00101ba2 <intr_stub_32>:
  101ba2:	6a 00                	push   $0x0
  101ba4:	6a 20                	push   $0x20
  101ba6:	eb 60                	jmp    101c08 <intr_common_handler>

00101ba8 <intr_stub_33>:
  101ba8:	6a 00                	push   $0x0
  101baa:	6a 21                	push   $0x21
  101bac:	eb 5a                	jmp    101c08 <intr_common_handler>

00101bae <intr_stub_34>:
  101bae:	6a 00                	push   $0x0
  101bb0:	6a 22                	push   $0x22
  101bb2:	eb 54                	jmp    101c08 <intr_common_handler>

00101bb4 <intr_stub_35>:
  101bb4:	6a 00                	push   $0x0
  101bb6:	6a 23                	push   $0x23
  101bb8:	eb 4e                	jmp    101c08 <intr_common_handler>

00101bba <intr_stub_36>:
  101bba:	6a 00                	push   $0x0
  101bbc:	6a 24                	push   $0x24
  101bbe:	eb 48                	jmp    101c08 <intr_common_handler>

00101bc0 <intr_stub_37>:
  101bc0:	6a 00                	push   $0x0
  101bc2:	6a 25                	push   $0x25
  101bc4:	eb 42                	jmp    101c08 <intr_common_handler>

00101bc6 <intr_stub_38>:
  101bc6:	6a 00                	push   $0x0
  101bc8:	6a 26                	push   $0x26
  101bca:	eb 3c                	jmp    101c08 <intr_common_handler>

00101bcc <intr_stub_39>:
  101bcc:	6a 00                	push   $0x0
  101bce:	6a 27                	push   $0x27
  101bd0:	eb 36                	jmp    101c08 <intr_common_handler>

00101bd2 <intr_stub_40>:
  101bd2:	6a 00                	push   $0x0
  101bd4:	6a 28                	push   $0x28
  101bd6:	eb 30                	jmp    101c08 <intr_common_handler>

00101bd8 <intr_stub_41>:
  101bd8:	6a 00                	push   $0x0
  101bda:	6a 29                	push   $0x29
  101bdc:	eb 2a                	jmp    101c08 <intr_common_handler>

00101bde <intr_stub_42>:
  101bde:	6a 00                	push   $0x0
  101be0:	6a 2a                	push   $0x2a
  101be2:	eb 24                	jmp    101c08 <intr_common_handler>

00101be4 <intr_stub_43>:
  101be4:	6a 00                	push   $0x0
  101be6:	6a 2b                	push   $0x2b
  101be8:	eb 1e                	jmp    101c08 <intr_common_handler>

00101bea <intr_stub_44>:
  101bea:	6a 00                	push   $0x0
  101bec:	6a 2c                	push   $0x2c
  101bee:	eb 18                	jmp    101c08 <intr_common_handler>

00101bf0 <intr_stub_45>:
  101bf0:	6a 00                	push   $0x0
  101bf2:	6a 2d                	push   $0x2d
  101bf4:	eb 12                	jmp    101c08 <intr_common_handler>

00101bf6 <intr_stub_46>:
  101bf6:	6a 00                	push   $0x0
  101bf8:	6a 2e                	push   $0x2e
  101bfa:	eb 0c                	jmp    101c08 <intr_common_handler>

00101bfc <intr_stub_47>:
  101bfc:	6a 00                	push   $0x0
  101bfe:	6a 2f                	push   $0x2f
  101c00:	eb 06                	jmp    101c08 <intr_common_handler>

00101c02 <intr_stub_48>:
  101c02:	6a 00                	push   $0x0
  101c04:	6a 30                	push   $0x30
  101c06:	eb 00                	jmp    101c08 <intr_common_handler>

00101c08 <intr_common_handler>:
  101c08:	55                   	push   %ebp
  101c09:	57                   	push   %edi
  101c0a:	56                   	push   %esi
  101c0b:	52                   	push   %edx
  101c0c:	51                   	push   %ecx
  101c0d:	53                   	push   %ebx
  101c0e:	50                   	push   %eax
  101c0f:	54                   	push   %esp
  101c10:	66 b8 10 00          	mov    $0x10,%ax
  101c14:	66 8e d8             	mov    %ax,%ds
  101c17:	66 8e c0             	mov    %ax,%es
  101c1a:	e8 91 fd ff ff       	call   1019b0 <handle_interrupt>
  101c1f:	89 c4                	mov    %eax,%esp
  101c21:	66 b8 23 00          	mov    $0x23,%ax
  101c25:	66 8e d8             	mov    %ax,%ds
  101c28:	66 8e c0             	mov    %ax,%es
  101c2b:	58                   	pop    %eax
  101c2c:	5b                   	pop    %ebx
  101c2d:	59                   	pop    %ecx
  101c2e:	5a                   	pop    %edx
  101c2f:	5e                   	pop    %esi
  101c30:	5f                   	pop    %edi
  101c31:	5d                   	pop    %ebp
  101c32:	83 c4 08             	add    $0x8,%esp
  101c35:	cf                   	iret   
  101c36:	66 90                	xchg   %ax,%ax
  101c38:	66 90                	xchg   %ax,%ax
  101c3a:	66 90                	xchg   %ax,%ax
  101c3c:	66 90                	xchg   %ax,%ax
  101c3e:	66 90                	xchg   %ax,%ax

00101c40 <syscall>:
#include "ramfs/fifo.h"
#include "ramfs/block.h"
#include "ramfs/tar.h"
#include "ramfs/vgacntrl.h"

struct cpu_state* syscall(struct cpu_state* cpu) {
  101c40:	55                   	push   %ebp
  101c41:	89 e5                	mov    %esp,%ebp
  101c43:	56                   	push   %esi
  101c44:	81 ec 94 00 00 00    	sub    $0x94,%esp
  101c4a:	8b 45 08             	mov    0x8(%ebp),%eax
  101c4d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	switch (cpu->eax) {
  101c50:	8b 00                	mov    (%eax),%eax
  101c52:	89 c1                	mov    %eax,%ecx
  101c54:	81 e9 c8 00 00 00    	sub    $0xc8,%ecx
  101c5a:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101c5d:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  101c60:	0f 8f 26 00 00 00    	jg     101c8c <syscall+0x4c>
  101c66:	e9 00 00 00 00       	jmp    101c6b <syscall+0x2b>
  101c6b:	8b 45 c8             	mov    -0x38(%ebp),%eax
  101c6e:	48                   	dec    %eax
  101c6f:	89 c1                	mov    %eax,%ecx
  101c71:	83 e9 0d             	sub    $0xd,%ecx
  101c74:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101c77:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  101c7a:	0f 87 79 03 00 00    	ja     101ff9 <syscall+0x3b9>
  101c80:	8b 45 c0             	mov    -0x40(%ebp),%eax
  101c83:	8b 0c 85 44 80 10 00 	mov    0x108044(,%eax,4),%ecx
  101c8a:	ff e1                	jmp    *%ecx
  101c8c:	8b 45 c8             	mov    -0x38(%ebp),%eax
  101c8f:	05 37 ff ff ff       	add    $0xffffff37,%eax
  101c94:	89 c1                	mov    %eax,%ecx
  101c96:	83 e9 04             	sub    $0x4,%ecx
  101c99:	89 45 b8             	mov    %eax,-0x48(%ebp)
  101c9c:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  101c9f:	0f 87 54 03 00 00    	ja     101ff9 <syscall+0x3b9>
  101ca5:	8b 45 b8             	mov    -0x48(%ebp),%eax
  101ca8:	8b 0c 85 30 80 10 00 	mov    0x108030(,%eax,4),%ecx
  101caf:	ff e1                	jmp    *%ecx
	case 1: /* exit */
		cpu = terminate_current(cpu);
  101cb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101cb4:	89 04 24             	mov    %eax,(%esp)
  101cb7:	e8 b4 1c 00 00       	call   103970 <terminate_current>
  101cbc:	89 45 f8             	mov    %eax,-0x8(%ebp)
		break;
  101cbf:	e9 4f 03 00 00       	jmp    102013 <syscall+0x3d3>

	case 2: /* fork */
	{
		save_cpu_state(cpu);
  101cc4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101cc7:	89 04 24             	mov    %eax,(%esp)
  101cca:	e8 91 1f 00 00       	call   103c60 <save_cpu_state>

		uint32_t forkpdir = vmm_fork_current();
  101ccf:	e8 0c 39 00 00       	call   1055e0 <vmm_fork_current>
  101cd4:	b9 00 00 00 00       	mov    $0x0,%ecx
  101cd9:	89 45 f4             	mov    %eax,-0xc(%ebp)

		struct task* ntask = init_task(forkpdir, 0);
  101cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101cdf:	89 04 24             	mov    %eax,(%esp)
  101ce2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101ce9:	00 
  101cea:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  101ced:	e8 ae 1d 00 00       	call   103aa0 <init_task>
  101cf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		fork_task_state(ntask);
  101cf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101cf8:	89 04 24             	mov    %eax,(%esp)
  101cfb:	e8 40 1d 00 00       	call   103a40 <fork_task_state>

		cpu->eax = ntask->PID;
  101d00:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101d03:	8b 00                	mov    (%eax),%eax
  101d05:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101d08:	89 01                	mov    %eax,(%ecx)
	}
        break;
  101d0a:	e9 04 03 00 00       	jmp    102013 <syscall+0x3d3>

    case 3: /* exec */
    {
        save_cpu_state(cpu);
  101d0f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d12:	89 04 24             	mov    %eax,(%esp)
  101d15:	e8 46 1f 00 00       	call   103c60 <save_cpu_state>
        vfs_exec((char*) cpu->ebx, (char**) cpu->ecx, get_current_task());
  101d1a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d1d:	8b 40 04             	mov    0x4(%eax),%eax
  101d20:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101d23:	8b 49 08             	mov    0x8(%ecx),%ecx
  101d26:	89 45 ac             	mov    %eax,-0x54(%ebp)
  101d29:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  101d2c:	e8 af 19 00 00       	call   1036e0 <get_current_task>
  101d31:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  101d34:	89 0c 24             	mov    %ecx,(%esp)
  101d37:	8b 55 a8             	mov    -0x58(%ebp),%edx
  101d3a:	89 54 24 04          	mov    %edx,0x4(%esp)
  101d3e:	89 44 24 08          	mov    %eax,0x8(%esp)
  101d42:	e8 b9 32 00 00       	call   105000 <vfs_exec>
        cpu = get_current_task()->cpuState;
  101d47:	e8 94 19 00 00       	call   1036e0 <get_current_task>
  101d4c:	8b 40 04             	mov    0x4(%eax),%eax
  101d4f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
        break;
  101d52:	e9 bc 02 00 00       	jmp    102013 <syscall+0x3d3>

    case 4: /* getargs */
    {
        cpu->eax = (uint32_t) get_current_task()->args;
  101d57:	e8 84 19 00 00       	call   1036e0 <get_current_task>
  101d5c:	8b 40 18             	mov    0x18(%eax),%eax
  101d5f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101d62:	89 01                	mov    %eax,(%ecx)
    }
        break;
  101d64:	e9 aa 02 00 00       	jmp    102013 <syscall+0x3d3>

	case 10: /* fopen */
	{
	    char* name = strclone((char*) cpu->ebx);
  101d69:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d6c:	8b 40 04             	mov    0x4(%eax),%eax
  101d6f:	89 04 24             	mov    %eax,(%esp)
  101d72:	e8 69 29 00 00       	call   1046e0 <strclone>
  101d77:	89 45 ec             	mov    %eax,-0x14(%ebp)
	    uint32_t fmode = (uint32_t) cpu->ecx;
  101d7a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d7d:	8b 40 08             	mov    0x8(%eax),%eax
  101d80:	89 45 e8             	mov    %eax,-0x18(%ebp)

	    struct res_handle* handle = vfs_open(name, fmode);
  101d83:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101d86:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  101d89:	89 04 24             	mov    %eax,(%esp)
  101d8c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101d90:	e8 db 2e 00 00       	call   104c70 <vfs_open>
  101d95:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    if(handle) {
  101d98:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  101d9f:	0f 84 1b 00 00 00    	je     101dc0 <syscall+0x180>
	        register_handle(handle);
  101da5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101da8:	89 04 24             	mov    %eax,(%esp)
  101dab:	e8 40 19 00 00       	call   1036f0 <register_handle>
	        cpu->eax = (uint32_t) handle;
  101db0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  101db3:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101db6:	89 0a                	mov    %ecx,(%edx)
	    }
  101db8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  101dbb:	e9 09 00 00 00       	jmp    101dc9 <syscall+0x189>
	    else
	    {
	        cpu->eax = 0;
  101dc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101dc3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    }
	}
	    break;
  101dc9:	e9 45 02 00 00       	jmp    102013 <syscall+0x3d3>

	case 11: /* fclose */
	{
	    struct res_handle* handle = (void*) cpu->ebx;
  101dce:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101dd1:	8b 40 04             	mov    0x4(%eax),%eax
  101dd4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	    if(!unregister_handle(handle)) {
  101dd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101dda:	89 04 24             	mov    %eax,(%esp)
  101ddd:	e8 6e 19 00 00       	call   103750 <unregister_handle>
  101de2:	3d 00 00 00 00       	cmp    $0x0,%eax
  101de7:	0f 85 1c 00 00 00    	jne    101e09 <syscall+0x1c9>
	        vfs_close(handle);
  101ded:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101df0:	89 04 24             	mov    %eax,(%esp)
  101df3:	e8 f8 2e 00 00       	call   104cf0 <vfs_close>

	        cpu->eax = 0;
  101df8:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101dfb:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
	    }
  101e01:	89 45 a0             	mov    %eax,-0x60(%ebp)
  101e04:	e9 09 00 00 00       	jmp    101e12 <syscall+0x1d2>
	    else
	    {
	        cpu->eax = (uint32_t) -1;
  101e09:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e0c:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	    }
	}
	    break;
  101e12:	e9 fc 01 00 00       	jmp    102013 <syscall+0x3d3>

	case 12: /* fwrite */
	{
	    struct res_handle* handle = (void*) cpu->ebx;
  101e17:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e1a:	8b 40 04             	mov    0x4(%eax),%eax
  101e1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	    if(handle != 0) {
  101e20:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  101e27:	0f 84 39 00 00 00    	je     101e66 <syscall+0x226>
  101e2d:	b8 01 00 00 00       	mov    $0x1,%eax
	        cpu->eax = vfs_write(handle, (char*) cpu->ecx, cpu->edx, 1);
  101e32:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  101e35:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101e38:	8b 52 08             	mov    0x8(%edx),%edx
  101e3b:	8b 75 f8             	mov    -0x8(%ebp),%esi
  101e3e:	8b 76 0c             	mov    0xc(%esi),%esi
  101e41:	89 0c 24             	mov    %ecx,(%esp)
  101e44:	89 54 24 04          	mov    %edx,0x4(%esp)
  101e48:	89 74 24 08          	mov    %esi,0x8(%esp)
  101e4c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  101e53:	00 
  101e54:	89 45 9c             	mov    %eax,-0x64(%ebp)
  101e57:	e8 c4 2f 00 00       	call   104e20 <vfs_write>
  101e5c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101e5f:	89 01                	mov    %eax,(%ecx)
	    }
  101e61:	e9 09 00 00 00       	jmp    101e6f <syscall+0x22f>
	    else
	    {
            cpu->eax = RW_ERR_VFS;
  101e66:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e69:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	    }
	}
	    break;
  101e6f:	e9 9f 01 00 00       	jmp    102013 <syscall+0x3d3>

	case 13: /* fread */
	{
        struct res_handle* handle = (void*) cpu->ebx;
  101e74:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101e77:	8b 40 04             	mov    0x4(%eax),%eax
  101e7a:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if(handle != 0) {
  101e7d:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  101e84:	0f 84 39 00 00 00    	je     101ec3 <syscall+0x283>
  101e8a:	b8 01 00 00 00       	mov    $0x1,%eax
            cpu->eax = vfs_read(handle, (char*) cpu->ecx, cpu->edx, 1);
  101e8f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  101e92:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101e95:	8b 52 08             	mov    0x8(%edx),%edx
  101e98:	8b 75 f8             	mov    -0x8(%ebp),%esi
  101e9b:	8b 76 0c             	mov    0xc(%esi),%esi
  101e9e:	89 0c 24             	mov    %ecx,(%esp)
  101ea1:	89 54 24 04          	mov    %edx,0x4(%esp)
  101ea5:	89 74 24 08          	mov    %esi,0x8(%esp)
  101ea9:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  101eb0:	00 
  101eb1:	89 45 98             	mov    %eax,-0x68(%ebp)
  101eb4:	e8 87 2e 00 00       	call   104d40 <vfs_read>
  101eb9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101ebc:	89 01                	mov    %eax,(%ecx)
        }
  101ebe:	e9 09 00 00 00       	jmp    101ecc <syscall+0x28c>
        else
        {
            cpu->eax = RW_ERR_VFS;
  101ec3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ec6:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
        }
	}
	    break;
  101ecc:	e9 42 01 00 00       	jmp    102013 <syscall+0x3d3>

	case 14: /* fmkfifo */
	{
        char* name = strclone((char*) cpu->ebx);
  101ed1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101ed4:	8b 40 04             	mov    0x4(%eax),%eax
  101ed7:	89 04 24             	mov    %eax,(%esp)
  101eda:	e8 01 28 00 00       	call   1046e0 <strclone>
  101edf:	8d 4d d0             	lea    -0x30(%ebp),%ecx
  101ee2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vfs_create_kfile(name, ramfs_fifo_driver_struct(), &(uint32_t){65536});
  101ee5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101ee8:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  101eeb:	89 45 90             	mov    %eax,-0x70(%ebp)
  101eee:	e8 3d 12 00 00       	call   103130 <ramfs_fifo_driver_struct>
  101ef3:	c7 45 d0 00 00 01 00 	movl   $0x10000,-0x30(%ebp)
  101efa:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  101efd:	89 0c 24             	mov    %ecx,(%esp)
  101f00:	89 44 24 04          	mov    %eax,0x4(%esp)
  101f04:	8b 45 94             	mov    -0x6c(%ebp),%eax
  101f07:	89 44 24 08          	mov    %eax,0x8(%esp)
  101f0b:	e8 f0 2b 00 00       	call   104b00 <vfs_create_kfile>
  101f10:	b9 03 00 00 00       	mov    $0x3,%ecx

        struct res_handle* handle = vfs_open(name, FM_READ | FM_WRITE);
  101f15:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  101f18:	89 14 24             	mov    %edx,(%esp)
  101f1b:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  101f22:	00 
  101f23:	89 45 8c             	mov    %eax,-0x74(%ebp)
  101f26:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  101f29:	e8 42 2d 00 00       	call   104c70 <vfs_open>
  101f2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if(handle) {
  101f31:	81 7d cc 00 00 00 00 	cmpl   $0x0,-0x34(%ebp)
  101f38:	0f 84 1b 00 00 00    	je     101f59 <syscall+0x319>
            register_handle(handle);
  101f3e:	8b 45 cc             	mov    -0x34(%ebp),%eax
  101f41:	89 04 24             	mov    %eax,(%esp)
  101f44:	e8 a7 17 00 00       	call   1036f0 <register_handle>
            cpu->eax = (uint32_t) handle;
  101f49:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  101f4c:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101f4f:	89 0a                	mov    %ecx,(%edx)
        }
  101f51:	89 45 84             	mov    %eax,-0x7c(%ebp)
  101f54:	e9 09 00 00 00       	jmp    101f62 <syscall+0x322>
        else
        {
            cpu->eax = 0;
  101f59:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101f5c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
	}
	    break;
  101f62:	e9 ac 00 00 00       	jmp    102013 <syscall+0x3d3>
  101f67:	8d 05 5a 82 10 00    	lea    0x10825a,%eax

	case 201: /* kputc */
		cpu->eax = kprintf("%c", cpu->ebx);
  101f6d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101f70:	8b 49 04             	mov    0x4(%ecx),%ecx
  101f73:	89 04 24             	mov    %eax,(%esp)
  101f76:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f7a:	e8 d1 e5 ff ff       	call   100550 <kprintf>
  101f7f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101f82:	89 01                	mov    %eax,(%ecx)
		break;
  101f84:	e9 8a 00 00 00       	jmp    102013 <syscall+0x3d3>
  101f89:	8d 05 5d 82 10 00    	lea    0x10825d,%eax

	case 202: /* kputs */
		cpu->eax = kprintf("%s", cpu->ebx);
  101f8f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101f92:	8b 49 04             	mov    0x4(%ecx),%ecx
  101f95:	89 04 24             	mov    %eax,(%esp)
  101f98:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  101f9c:	e8 af e5 ff ff       	call   100550 <kprintf>
  101fa1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101fa4:	89 01                	mov    %eax,(%ecx)
		break;
  101fa6:	e9 68 00 00 00       	jmp    102013 <syscall+0x3d3>

	case 203: /* vmm_alloc_ucont */
		cpu->eax = (uint32_t) vmm_alloc_ucont(cpu->ebx);
  101fab:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fae:	8b 40 04             	mov    0x4(%eax),%eax
  101fb1:	89 04 24             	mov    %eax,(%esp)
  101fb4:	e8 77 3e 00 00       	call   105e30 <vmm_alloc_ucont>
  101fb9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101fbc:	89 01                	mov    %eax,(%ecx)
		break;
  101fbe:	e9 50 00 00 00       	jmp    102013 <syscall+0x3d3>

	case 204: /* vmm_free */
		cpu->eax = 0;
  101fc3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fc6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (cpu->ebx >= PROGRAM_BOTTOM) { //Only in PROGRAM AREA ;)
  101fcc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fcf:	81 78 04 00 10 40 20 	cmpl   $0x20401000,0x4(%eax)
  101fd6:	0f 82 0e 00 00 00    	jb     101fea <syscall+0x3aa>
			vmm_free((void*) cpu->ebx);
  101fdc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fdf:	8b 40 04             	mov    0x4(%eax),%eax
  101fe2:	89 04 24             	mov    %eax,(%esp)
  101fe5:	e8 b6 3c 00 00       	call   105ca0 <vmm_free>
		}
		break;
  101fea:	e9 24 00 00 00       	jmp    102013 <syscall+0x3d3>

	case 205: /* pmm_print_stats */
		pmm_print_stats();
  101fef:	e8 0c 03 00 00       	call   102300 <pmm_print_stats>
		break;
  101ff4:	e9 1a 00 00 00       	jmp    102013 <syscall+0x3d3>
  101ff9:	8d 05 60 82 10 00    	lea    0x108260,%eax

	default:
		kprintf("Invalid Syscall %d...", cpu->eax);
  101fff:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102002:	8b 09                	mov    (%ecx),%ecx
  102004:	89 04 24             	mov    %eax,(%esp)
  102007:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10200b:	e8 40 e5 ff ff       	call   100550 <kprintf>
  102010:	89 45 80             	mov    %eax,-0x80(%ebp)
		break;
	}

	return cpu;
  102013:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102016:	81 c4 94 00 00 00    	add    $0x94,%esp
  10201c:	5e                   	pop    %esi
  10201d:	5d                   	pop    %ebp
  10201e:	c3                   	ret    
  10201f:	90                   	nop

00102020 <kernel_main>:
}

void kernel_main(struct multiboot_info* mb_info) {
  102020:	55                   	push   %ebp
  102021:	89 e5                	mov    %esp,%ebp
  102023:	57                   	push   %edi
  102024:	56                   	push   %esi
  102025:	83 ec 50             	sub    $0x50,%esp
  102028:	8b 45 08             	mov    0x8(%ebp),%eax
  10202b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t kernel_init_pdir = vmm_init();
  10202e:	e8 fd 40 00 00       	call   106130 <vmm_init>
  102033:	8d 0d 76 82 10 00    	lea    0x108276,%ecx
  102039:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kprintf("Initializing vfs...\n");
  10203c:	89 0c 24             	mov    %ecx,(%esp)
  10203f:	e8 0c e5 ff ff       	call   100550 <kprintf>

    vfs_init_root();
  102044:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102047:	e8 f4 32 00 00       	call   105340 <vfs_init_root>
  10204c:	b8 00 00 00 00       	mov    $0x0,%eax
    ramfs_fifo_init();
  102051:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102054:	e8 37 0b 00 00       	call   102b90 <ramfs_fifo_init>
    ramfs_block_init();
  102059:	e8 82 06 00 00       	call   1026e0 <ramfs_block_init>

    map_address_active((uint32_t) mb_info,
  10205e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102061:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102064:	89 04 24             	mov    %eax,(%esp)
  102067:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10206b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102072:	00 
  102073:	e8 a8 3c 00 00       	call   105d20 <map_address_active>
  102078:	b8 00 00 00 00       	mov    $0x0,%eax
                       (uint32_t) mb_info, 0);
    map_address_active((uint32_t) mb_info->mi_mods_addr,
  10207d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102080:	8b 49 18             	mov    0x18(%ecx),%ecx
  102083:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102086:	8b 52 18             	mov    0x18(%edx),%edx
  102089:	89 0c 24             	mov    %ecx,(%esp)
  10208c:	89 54 24 04          	mov    %edx,0x4(%esp)
  102090:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  102097:	00 
  102098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10209b:	e8 80 3c 00 00       	call   105d20 <map_address_active>
                       (uint32_t) mb_info->mi_mods_addr, 0);

    if (mb_info->mi_flags & MULTIBOOT_INFO_HAS_MODS) {
  1020a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1020a3:	8b 00                	mov    (%eax),%eax
  1020a5:	25 08 00 00 00       	and    $0x8,%eax
  1020aa:	3d 00 00 00 00       	cmp    $0x0,%eax
  1020af:	0f 84 aa 00 00 00    	je     10215f <kernel_main+0x13f>
  1020b5:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_map_range(mb_info->mi_mods_addr[0].start,
  1020ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1020bd:	8b 49 18             	mov    0x18(%ecx),%ecx
  1020c0:	8b 09                	mov    (%ecx),%ecx
  1020c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1020c5:	8b 52 18             	mov    0x18(%edx),%edx
  1020c8:	8b 12                	mov    (%edx),%edx
  1020ca:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1020cd:	8b 76 18             	mov    0x18(%esi),%esi
  1020d0:	8b 76 04             	mov    0x4(%esi),%esi
  1020d3:	8b 7d f4             	mov    -0xc(%ebp),%edi
  1020d6:	8b 7f 18             	mov    0x18(%edi),%edi
  1020d9:	8b 3f                	mov    (%edi),%edi
  1020db:	29 fe                	sub    %edi,%esi
  1020dd:	89 0c 24             	mov    %ecx,(%esp)
  1020e0:	89 54 24 04          	mov    %edx,0x4(%esp)
  1020e4:	89 74 24 08          	mov    %esi,0x8(%esp)
  1020e8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1020ef:	00 
  1020f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1020f3:	e8 98 3c 00 00       	call   105d90 <vmm_map_range>
  1020f8:	8d 05 8b 82 10 00    	lea    0x10828b,%eax
                      mb_info->mi_mods_addr[0].start,
                      mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start,
                      0);

        kprintf("Assuming mbmod[0] is a tarball (%d bytes) and unpacking it... \n", mb_info->mi_mods_addr[0].end - mb_info->mi_mods_addr[0].start);
  1020fe:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102101:	8b 49 18             	mov    0x18(%ecx),%ecx
  102104:	8b 49 04             	mov    0x4(%ecx),%ecx
  102107:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10210a:	8b 52 18             	mov    0x18(%edx),%edx
  10210d:	8b 12                	mov    (%edx),%edx
  10210f:	29 d1                	sub    %edx,%ecx
  102111:	89 04 24             	mov    %eax,(%esp)
  102114:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102118:	e8 33 e4 ff ff       	call   100550 <kprintf>
  10211d:	8d 0d cb 82 10 00    	lea    0x1082cb,%ecx
        kprintf("Mapped mod from %x to %x\n", mb_info->mi_mods_addr[0].start, mb_info->mi_mods_addr[0].end);
  102123:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102126:	8b 52 18             	mov    0x18(%edx),%edx
  102129:	8b 12                	mov    (%edx),%edx
  10212b:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10212e:	8b 76 18             	mov    0x18(%esi),%esi
  102131:	8b 76 04             	mov    0x4(%esi),%esi
  102134:	89 0c 24             	mov    %ecx,(%esp)
  102137:	89 54 24 04          	mov    %edx,0x4(%esp)
  10213b:	89 74 24 08          	mov    %esi,0x8(%esp)
  10213f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102142:	e8 09 e4 ff ff       	call   100550 <kprintf>

        tar_load_ramfs(mb_info->mi_mods_addr[0].start);
  102147:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10214a:	8b 49 18             	mov    0x18(%ecx),%ecx
  10214d:	8b 09                	mov    (%ecx),%ecx
  10214f:	89 0c 24             	mov    %ecx,(%esp)
  102152:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102155:	e8 e6 0f 00 00       	call   103140 <tar_load_ramfs>
    } else {
  10215a:	e9 11 00 00 00       	jmp    102170 <kernel_main+0x150>
  10215f:	8d 05 e5 82 10 00    	lea    0x1082e5,%eax
        kprintf("[PANIC] No multiboot module (initrfs) available.\n");
  102165:	89 04 24             	mov    %eax,(%esp)
  102168:	e8 e3 e3 ff ff       	call   100550 <kprintf>
  10216d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102170:	8d 05 17 83 10 00    	lea    0x108317,%eax
    }

    kprintf("[kernel_res] Creating /dev/vga\n");
  102176:	89 04 24             	mov    %eax,(%esp)
  102179:	e8 d2 e3 ff ff       	call   100550 <kprintf>
  10217e:	8d 0d 37 83 10 00    	lea    0x108337,%ecx
  102184:	ba 00 00 00 00       	mov    $0x0,%edx
    vfs_create_kfile("/dev/vga", ramfs_vga_driver_struct(), 0);
  102189:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10218c:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  10218f:	89 55 c8             	mov    %edx,-0x38(%ebp)
  102192:	e8 09 15 00 00       	call   1036a0 <ramfs_vga_driver_struct>
  102197:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10219a:	89 0c 24             	mov    %ecx,(%esp)
  10219d:	89 44 24 04          	mov    %eax,0x4(%esp)
  1021a1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1021a8:	00 
  1021a9:	e8 52 29 00 00       	call   104b00 <vfs_create_kfile>
  1021ae:	8d 0d 40 83 10 00    	lea    0x108340,%ecx

    if(vfs_exists("/ibin/init")) {
  1021b4:	89 0c 24             	mov    %ecx,(%esp)
  1021b7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1021ba:	e8 b1 2d 00 00       	call   104f70 <vfs_exists>
  1021bf:	3d 00 00 00 00       	cmp    $0x0,%eax
  1021c4:	0f 84 3c 00 00 00    	je     102206 <kernel_main+0x1e6>
  1021ca:	8d 05 4b 83 10 00    	lea    0x10834b,%eax
        kprintf("[init] /ibin/init found. Executing...\n");
  1021d0:	89 04 24             	mov    %eax,(%esp)
  1021d3:	e8 78 e3 ff ff       	call   100550 <kprintf>
  1021d8:	8d 0d 40 83 10 00    	lea    0x108340,%ecx
  1021de:	ba 00 00 00 00       	mov    $0x0,%edx

        vfs_exec("/ibin/init", 0, 0);
  1021e3:	89 0c 24             	mov    %ecx,(%esp)
  1021e6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1021ed:	00 
  1021ee:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1021f5:	00 
  1021f6:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1021f9:	89 55 bc             	mov    %edx,-0x44(%ebp)
  1021fc:	e8 ff 2d 00 00       	call   105000 <vfs_exec>
        enableScheduling();
  102201:	e8 ba 14 00 00       	call   1036c0 <enableScheduling>
    }

	while(1);
  102206:	e9 00 00 00 00       	jmp    10220b <kernel_main+0x1eb>
  10220b:	e9 fb ff ff ff       	jmp    10220b <kernel_main+0x1eb>

00102210 <pmm_alloc>:
#define BITMAP_SIZE 32768

uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
  102210:	55                   	push   %ebp
  102211:	89 e5                	mov    %esp,%ebp
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  102213:	56                   	push   %esi
  102214:	83 ec 10             	sub    $0x10,%esp
  102217:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10221e:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  102225:	0f 8d b7 00 00 00    	jge    1022e2 <pmm_alloc+0xd2>
		if (allocatable[i]) {
  10222b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10222e:	81 3c 85 90 a4 12 00 	cmpl   $0x0,0x12a490(,%eax,4)
  102235:	00 00 00 00 
  102239:	0f 84 8e 00 00 00    	je     1022cd <pmm_alloc+0xbd>
			int s;
			for (s = 0; s < 32; s++) {
  10223f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102246:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  10224d:	0f 8d 75 00 00 00    	jge    1022c8 <pmm_alloc+0xb8>
  102253:	b8 01 00 00 00       	mov    $0x1,%eax
				if (allocatable[i] & (1 << s)) {
  102258:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10225b:	8b 0c 8d 90 a4 12 00 	mov    0x12a490(,%ecx,4),%ecx
  102262:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102265:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102268:	89 d1                	mov    %edx,%ecx
  10226a:	d3 e0                	shl    %cl,%eax
  10226c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10226f:	21 c2                	and    %eax,%edx
  102271:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  102277:	0f 84 36 00 00 00    	je     1022b3 <pmm_alloc+0xa3>
  10227d:	b8 01 00 00 00       	mov    $0x1,%eax
					allocatable[i] &= ~(1 << s);
  102282:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102285:	d3 e0                	shl    %cl,%eax
  102287:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  10228c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10228f:	8b 34 95 90 a4 12 00 	mov    0x12a490(,%edx,4),%esi
  102296:	21 c6                	and    %eax,%esi
  102298:	89 34 95 90 a4 12 00 	mov    %esi,0x12a490(,%edx,4)
					return (uint8_t*) ((i * 32 + s) * 4096);
  10229f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022a2:	c1 e0 05             	shl    $0x5,%eax
  1022a5:	03 45 f0             	add    -0x10(%ebp),%eax
  1022a8:	c1 e0 0c             	shl    $0xc,%eax
  1022ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1022ae:	e9 36 00 00 00       	jmp    1022e9 <pmm_alloc+0xd9>
				}
			}
  1022b3:	e9 00 00 00 00       	jmp    1022b8 <pmm_alloc+0xa8>
void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
		if (allocatable[i]) {
			int s;
			for (s = 0; s < 32; s++) {
  1022b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1022bb:	05 01 00 00 00       	add    $0x1,%eax
  1022c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1022c3:	e9 7e ff ff ff       	jmp    102246 <pmm_alloc+0x36>
				if (allocatable[i] & (1 << s)) {
					allocatable[i] &= ~(1 << s);
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
  1022c8:	e9 00 00 00 00       	jmp    1022cd <pmm_alloc+0xbd>
	}
  1022cd:	e9 00 00 00 00       	jmp    1022d2 <pmm_alloc+0xc2>
uint32_t allocatable[BITMAP_SIZE];
uint32_t upper_limit = 0;

void* pmm_alloc() {
	int i;
	for (i = 0; i < BITMAP_SIZE; i++) {
  1022d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022d5:	05 01 00 00 00       	add    $0x1,%eax
  1022da:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1022dd:	e9 3c ff ff ff       	jmp    10221e <pmm_alloc+0xe>
					return (uint8_t*) ((i * 32 + s) * 4096);
				}
			}
		}
	}
	return NULL ;
  1022e2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  1022e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1022ec:	83 c4 10             	add    $0x10,%esp
  1022ef:	5e                   	pop    %esi
  1022f0:	5d                   	pop    %ebp
  1022f1:	c3                   	ret    
  1022f2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1022f9:	1f 84 00 00 00 00 00 

00102300 <pmm_print_stats>:

void pmm_print_stats() {
  102300:	55                   	push   %ebp
  102301:	89 e5                	mov    %esp,%ebp
  102303:	56                   	push   %esi
  102304:	83 ec 34             	sub    $0x34,%esp
  102307:	b8 00 00 10 00       	mov    $0x100000,%eax
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
  10230c:	c7 04 24 00 00 10 00 	movl   $0x100000,(%esp)
  102313:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102316:	e8 65 00 00 00       	call   102380 <pmm_get_free_space>
  10231b:	b9 00 04 00 00       	mov    $0x400,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102320:	8b 15 20 a4 10 00    	mov    0x10a420,%edx
  102326:	c1 ea 14             	shr    $0x14,%edx
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
  102329:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  102330:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102333:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  102336:	89 55 ec             	mov    %edx,-0x14(%ebp)
  102339:	e8 42 00 00 00       	call   102380 <pmm_get_free_space>
  10233e:	8d 0d 72 83 10 00    	lea    0x108372,%ecx
	}
	return NULL ;
}

void pmm_print_stats() {
	kprintf("Running mikrOS with %dMB/%dMB (%dkB/%dkB) available memory!\n",
  102344:	8b 15 20 a4 10 00    	mov    0x10a420,%edx
  10234a:	c1 ea 0a             	shr    $0xa,%edx
  10234d:	89 0c 24             	mov    %ecx,(%esp)
  102350:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102353:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102357:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10235a:	89 74 24 08          	mov    %esi,0x8(%esp)
  10235e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  102362:	89 54 24 10          	mov    %edx,0x10(%esp)
  102366:	e8 e5 e1 ff ff       	call   100550 <kprintf>
			pmm_get_free_space(1024 * 1024), upper_limit / (1024 * 1024),
			pmm_get_free_space(1024), upper_limit / 1024);
}
  10236b:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10236e:	83 c4 34             	add    $0x34,%esp
  102371:	5e                   	pop    %esi
  102372:	5d                   	pop    %ebp
  102373:	c3                   	ret    
  102374:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10237b:	00 00 00 00 00 

00102380 <pmm_get_free_space>:

uint32_t pmm_get_free_space(uint32_t div) {
  102380:	55                   	push   %ebp
  102381:	89 e5                	mov    %esp,%ebp
  102383:	83 ec 14             	sub    $0x14,%esp
  102386:	8b 45 08             	mov    0x8(%ebp),%eax
  102389:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t free = 0;
  10238c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  102393:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10239a:	81 7d f4 00 80 00 00 	cmpl   $0x8000,-0xc(%ebp)
  1023a1:	0f 83 73 00 00 00    	jae    10241a <pmm_get_free_space+0x9a>
		for (uint32_t s = 0; s < 32; s++) {
  1023a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1023ae:	81 7d f0 20 00 00 00 	cmpl   $0x20,-0x10(%ebp)
  1023b5:	0f 83 4a 00 00 00    	jae    102405 <pmm_get_free_space+0x85>
  1023bb:	b8 01 00 00 00       	mov    $0x1,%eax
			if (allocatable[i] & (1 << s))
  1023c0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1023c3:	8b 0c 8d 90 a4 12 00 	mov    0x12a490(,%ecx,4),%ecx
  1023ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1023cd:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1023d0:	89 d1                	mov    %edx,%ecx
  1023d2:	d3 e0                	shl    %cl,%eax
  1023d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1023d7:	21 c2                	and    %eax,%edx
  1023d9:	81 fa 00 00 00 00    	cmp    $0x0,%edx
  1023df:	0f 84 0b 00 00 00    	je     1023f0 <pmm_get_free_space+0x70>
				free += 0x1000;
  1023e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1023e8:	05 00 10 00 00       	add    $0x1000,%eax
  1023ed:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
  1023f0:	e9 00 00 00 00       	jmp    1023f5 <pmm_get_free_space+0x75>

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
		for (uint32_t s = 0; s < 32; s++) {
  1023f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1023f8:	05 01 00 00 00       	add    $0x1,%eax
  1023fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102400:	e9 a9 ff ff ff       	jmp    1023ae <pmm_get_free_space+0x2e>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}
  102405:	e9 00 00 00 00       	jmp    10240a <pmm_get_free_space+0x8a>
}

uint32_t pmm_get_free_space(uint32_t div) {
	uint32_t free = 0;

	for (uint32_t i = 0; i < BITMAP_SIZE; i++) {
  10240a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10240d:	05 01 00 00 00       	add    $0x1,%eax
  102412:	89 45 f4             	mov    %eax,-0xc(%ebp)
  102415:	e9 80 ff ff ff       	jmp    10239a <pmm_get_free_space+0x1a>
			if (allocatable[i] & (1 << s))
				free += 0x1000;
		}
	}

	return free / div;
  10241a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10241d:	31 d2                	xor    %edx,%edx
  10241f:	f7 75 fc             	divl   -0x4(%ebp)
  102422:	83 c4 14             	add    $0x14,%esp
  102425:	5d                   	pop    %ebp
  102426:	c3                   	ret    
  102427:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10242e:	00 00 

00102430 <pmm_free>:
}

void pmm_free(void* addr) {
  102430:	55                   	push   %ebp
  102431:	89 e5                	mov    %esp,%ebp
  102433:	56                   	push   %esi
  102434:	83 ec 14             	sub    $0x14,%esp
  102437:	8b 45 08             	mov    0x8(%ebp),%eax
  10243a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10243f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  102442:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102445:	c1 e8 0c             	shr    $0xc,%eax
  102448:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  10244b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10244e:	25 1f 00 00 00       	and    $0x1f,%eax
  102453:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  102456:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102459:	c1 e8 05             	shr    $0x5,%eax
  10245c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] |= (1 << s);
  10245f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102462:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  102465:	89 c1                	mov    %eax,%ecx
  102467:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10246a:	d3 e0                	shl    %cl,%eax
  10246c:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10246f:	8b 34 95 90 a4 12 00 	mov    0x12a490(,%edx,4),%esi
  102476:	09 c6                	or     %eax,%esi
  102478:	89 34 95 90 a4 12 00 	mov    %esi,0x12a490(,%edx,4)
}
  10247f:	83 c4 14             	add    $0x14,%esp
  102482:	5e                   	pop    %esi
  102483:	5d                   	pop    %ebp
  102484:	c3                   	ret    
  102485:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10248c:	00 00 00 00 

00102490 <pmm_mark_used>:

void pmm_mark_used(void* addr) {
  102490:	55                   	push   %ebp
  102491:	89 e5                	mov    %esp,%ebp
  102493:	56                   	push   %esi
  102494:	83 ec 14             	sub    $0x14,%esp
  102497:	8b 45 08             	mov    0x8(%ebp),%eax
  10249a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10249f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uintptr_t ptr = ((uintptr_t) addr) / 4096;
  1024a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1024a5:	c1 e8 0c             	shr    $0xc,%eax
  1024a8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t s = ptr % 32;
  1024ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024ae:	25 1f 00 00 00       	and    $0x1f,%eax
  1024b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t i = ptr / 32;
  1024b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1024b9:	c1 e8 05             	shr    $0x5,%eax
  1024bc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	allocatable[i] &= ~(1 << s);
  1024bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1024c2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1024c5:	89 c1                	mov    %eax,%ecx
  1024c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1024ca:	d3 e0                	shl    %cl,%eax
  1024cc:	35 ff ff ff ff       	xor    $0xffffffff,%eax
  1024d1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1024d4:	8b 34 95 90 a4 12 00 	mov    0x12a490(,%edx,4),%esi
  1024db:	21 c6                	and    %eax,%esi
  1024dd:	89 34 95 90 a4 12 00 	mov    %esi,0x12a490(,%edx,4)
}
  1024e4:	83 c4 14             	add    $0x14,%esp
  1024e7:	5e                   	pop    %esi
  1024e8:	5d                   	pop    %ebp
  1024e9:	c3                   	ret    
  1024ea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001024f0 <pmm_init>:

void pmm_init(struct multiboot_info* mb_info) {
  1024f0:	55                   	push   %ebp
  1024f1:	89 e5                	mov    %esp,%ebp
  1024f3:	53                   	push   %ebx
  1024f4:	57                   	push   %edi
  1024f5:	56                   	push   %esi
  1024f6:	83 ec 5c             	sub    $0x5c,%esp
  1024f9:	8b 45 08             	mov    0x8(%ebp),%eax
  1024fc:	8d 0d af 83 10 00    	lea    0x1083af,%ecx
  102502:	8d 15 90 a4 12 00    	lea    0x12a490,%edx
  102508:	89 d6                	mov    %edx,%esi
  10250a:	81 c6 00 00 02 00    	add    $0x20000,%esi
  102510:	89 d7                	mov    %edx,%edi
  102512:	bb 00 00 00 00       	mov    $0x0,%ebx
  102517:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10251a:	b8 00 00 02 00       	mov    $0x20000,%eax
  10251f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102522:	8b 45 d0             	mov    -0x30(%ebp),%eax
  102525:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct multiboot_mmap* mmap = mb_info->mi_mmap_addr;
  102528:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10252b:	8b 40 30             	mov    0x30(%eax),%eax
  10252e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct multiboot_mmap* mmap_end = (void*) ((uintptr_t) mb_info->mi_mmap_addr
  102531:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102534:	8b 40 30             	mov    0x30(%eax),%eax
  102537:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10253a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10253d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102540:	8b 45 c8             	mov    -0x38(%ebp),%eax
  102543:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  102546:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  102549:	03 41 2c             	add    0x2c(%ecx),%eax
  10254c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			+ mb_info->mi_mmap_length);

	memset(allocatable, 0, sizeof(allocatable));
  10254f:	89 3c 24             	mov    %edi,(%esp)
  102552:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102559:	00 
  10255a:	c7 44 24 08 00 00 02 	movl   $0x20000,0x8(%esp)
  102561:	00 
  102562:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  102565:	89 55 b8             	mov    %edx,-0x48(%ebp)
  102568:	89 75 b4             	mov    %esi,-0x4c(%ebp)
  10256b:	e8 70 1e 00 00       	call   1043e0 <memset>

	kprintf("Mem-Bitmap: %x to %x\n", allocatable, &(allocatable[BITMAP_SIZE]));
  102570:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102573:	89 04 24             	mov    %eax,(%esp)
  102576:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  102579:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10257d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  102580:	89 54 24 08          	mov    %edx,0x8(%esp)
  102584:	e8 c7 df ff ff       	call   100550 <kprintf>
  102589:	89 45 b0             	mov    %eax,-0x50(%ebp)

	while (mmap < mmap_end) {
  10258c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10258f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  102592:	0f 83 77 00 00 00    	jae    10260f <pmm_init+0x11f>
		if (mmap->mm_type == 1) {
  102598:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10259b:	81 78 14 01 00 00 00 	cmpl   $0x1,0x14(%eax)
  1025a2:	0f 85 57 00 00 00    	jne    1025ff <pmm_init+0x10f>
			uintptr_t addr = mmap->mm_base_addr;
  1025a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1025ab:	8b 40 04             	mov    0x4(%eax),%eax
  1025ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uintptr_t end_addr = addr + mmap->mm_length;
  1025b1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1025b4:	8b 49 0c             	mov    0xc(%ecx),%ecx
  1025b7:	01 c8                	add    %ecx,%eax
  1025b9:	89 45 e0             	mov    %eax,-0x20(%ebp)

			while (addr < end_addr) {
  1025bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1025bf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  1025c2:	0f 83 32 00 00 00    	jae    1025fa <pmm_init+0x10a>
				pmm_free((void*) addr);
  1025c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1025cb:	89 04 24             	mov    %eax,(%esp)
  1025ce:	e8 5d fe ff ff       	call   102430 <pmm_free>
				if (addr > upper_limit)
  1025d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1025d6:	3b 05 20 a4 10 00    	cmp    0x10a420,%eax
  1025dc:	0f 86 08 00 00 00    	jbe    1025ea <pmm_init+0xfa>
					upper_limit = addr;
  1025e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1025e5:	a3 20 a4 10 00       	mov    %eax,0x10a420
				addr += 0x1000;
  1025ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1025ed:	05 00 10 00 00       	add    $0x1000,%eax
  1025f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			}
  1025f5:	e9 c2 ff ff ff       	jmp    1025bc <pmm_init+0xcc>
		}
  1025fa:	e9 00 00 00 00       	jmp    1025ff <pmm_init+0x10f>
		mmap++;
  1025ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102602:	05 18 00 00 00       	add    $0x18,%eax
  102607:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}
  10260a:	e9 7d ff ff ff       	jmp    10258c <pmm_init+0x9c>
  10260f:	8d 05 00 00 10 00    	lea    0x100000,%eax

	extern const void kernel_start;
	extern const void kernel_end;

	uintptr_t addr = (uintptr_t) &kernel_start;
  102615:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102618:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
	while (addr < (uintptr_t) &kernel_end) {
  10261e:	39 45 dc             	cmp    %eax,-0x24(%ebp)
  102621:	0f 83 1b 00 00 00    	jae    102642 <pmm_init+0x152>
		pmm_mark_used((void*) addr);
  102627:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10262a:	89 04 24             	mov    %eax,(%esp)
  10262d:	e8 5e fe ff ff       	call   102490 <pmm_mark_used>
		addr += 0x1000;
  102632:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102635:	05 00 10 00 00       	add    $0x1000,%eax
  10263a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
  10263d:	e9 d6 ff ff ff       	jmp    102618 <pmm_init+0x128>

	struct multiboot_module* modules = mb_info->mi_mods_addr;
  102642:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102645:	8b 40 18             	mov    0x18(%eax),%eax
  102648:	89 45 d8             	mov    %eax,-0x28(%ebp)

	pmm_mark_used(mb_info);
  10264b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10264e:	89 04 24             	mov    %eax,(%esp)
  102651:	e8 3a fe ff ff       	call   102490 <pmm_mark_used>
	pmm_mark_used(modules);
  102656:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102659:	89 04 24             	mov    %eax,(%esp)
  10265c:	e8 2f fe ff ff       	call   102490 <pmm_mark_used>

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  102661:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  102668:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10266b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10266e:	3b 41 14             	cmp    0x14(%ecx),%eax
  102671:	0f 83 59 00 00 00    	jae    1026d0 <pmm_init+0x1e0>
		addr = (uintptr_t) modules[i].start;
  102677:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10267a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10267d:	c1 e0 04             	shl    $0x4,%eax
  102680:	01 c1                	add    %eax,%ecx
  102682:	8b 01                	mov    (%ecx),%eax
  102684:	89 45 dc             	mov    %eax,-0x24(%ebp)
		while (addr < (uintptr_t) modules[i].end) {
  102687:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10268a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10268d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  102690:	c1 e1 04             	shl    $0x4,%ecx
  102693:	01 ca                	add    %ecx,%edx
  102695:	8b 4a 04             	mov    0x4(%edx),%ecx
  102698:	39 c8                	cmp    %ecx,%eax
  10269a:	0f 83 1b 00 00 00    	jae    1026bb <pmm_init+0x1cb>
			pmm_mark_used((void*) addr);
  1026a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1026a3:	89 04 24             	mov    %eax,(%esp)
  1026a6:	e8 e5 fd ff ff       	call   102490 <pmm_mark_used>
			addr += 0x1000;
  1026ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1026ae:	05 00 10 00 00       	add    $0x1000,%eax
  1026b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
  1026b6:	e9 cc ff ff ff       	jmp    102687 <pmm_init+0x197>
	}
  1026bb:	e9 00 00 00 00       	jmp    1026c0 <pmm_init+0x1d0>

	pmm_mark_used(mb_info);
	pmm_mark_used(modules);

	uint32_t i;
	for (i = 0; i < mb_info->mi_mods_count; i++) {
  1026c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1026c3:	05 01 00 00 00       	add    $0x1,%eax
  1026c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1026cb:	e9 98 ff ff ff       	jmp    102668 <pmm_init+0x178>
		while (addr < (uintptr_t) modules[i].end) {
			pmm_mark_used((void*) addr);
			addr += 0x1000;
		}
	}
}
  1026d0:	83 c4 5c             	add    $0x5c,%esp
  1026d3:	5e                   	pop    %esi
  1026d4:	5f                   	pop    %edi
  1026d5:	5b                   	pop    %ebx
  1026d6:	5d                   	pop    %ebp
  1026d7:	c3                   	ret    
  1026d8:	66 90                	xchg   %ax,%ax
  1026da:	66 90                	xchg   %ax,%ax
  1026dc:	66 90                	xchg   %ax,%ax
  1026de:	66 90                	xchg   %ax,%ax

001026e0 <ramfs_block_init>:
#include "ramfs/block.h"

struct block_buffer* buffer[65536];

void ramfs_block_init() {
  1026e0:	55                   	push   %ebp
  1026e1:	89 e5                	mov    %esp,%ebp
  1026e3:	83 ec 18             	sub    $0x18,%esp
  1026e6:	8d 05 90 a4 14 00    	lea    0x14a490,%eax
  1026ec:	b9 00 00 00 00       	mov    $0x0,%ecx
  1026f1:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  1026f6:	89 04 24             	mov    %eax,(%esp)
  1026f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102700:	00 
  102701:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  102708:	00 
  102709:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10270c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10270f:	e8 cc 1c 00 00       	call   1043e0 <memset>
}
  102714:	83 c4 18             	add    $0x18,%esp
  102717:	5d                   	pop    %ebp
  102718:	c3                   	ret    
  102719:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102720 <ramfs_block_read>:
    }

    return 0;
}

uint32_t ramfs_block_read(struct res_handle* handle, void* dest, uint32_t length) {
  102720:	55                   	push   %ebp
  102721:	89 e5                	mov    %esp,%ebp
  102723:	83 ec 28             	sub    $0x28,%esp
  102726:	8b 45 10             	mov    0x10(%ebp),%eax
  102729:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10272c:	8b 55 08             	mov    0x8(%ebp),%edx
  10272f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102732:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102735:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102738:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10273b:	8b 40 04             	mov    0x4(%eax),%eax
  10273e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102741:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102744:	8b 00                	mov    (%eax),%eax
  102746:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  10274d:	00 00 00 00 
  102751:	0f 84 70 00 00 00    	je     1027c7 <ramfs_block_read+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't read that much biatch
  102757:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10275a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10275d:	8b 09                	mov    (%ecx),%ecx
  10275f:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102766:	8b 49 04             	mov    0x4(%ecx),%ecx
  102769:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10276c:	2b 4a 08             	sub    0x8(%edx),%ecx
  10276f:	39 c8                	cmp    %ecx,%eax
  102771:	0f 86 0c 00 00 00    	jbe    102783 <ramfs_block_read+0x63>
  102777:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  10277e:	e9 4b 00 00 00       	jmp    1027ce <ramfs_block_read+0xae>

        memcpy(dest, buffer[kf->id]->buffer + handle->position, length);
  102783:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102786:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102789:	8b 09                	mov    (%ecx),%ecx
  10278b:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102792:	8b 09                	mov    (%ecx),%ecx
  102794:	8b 55 f8             	mov    -0x8(%ebp),%edx
  102797:	03 4a 08             	add    0x8(%edx),%ecx
  10279a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10279d:	89 04 24             	mov    %eax,(%esp)
  1027a0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1027a4:	89 54 24 08          	mov    %edx,0x8(%esp)
  1027a8:	e8 93 1c 00 00       	call   104440 <memcpy>
        handle->position += length;
  1027ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1027b0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1027b3:	8b 51 08             	mov    0x8(%ecx),%edx
  1027b6:	01 c2                	add    %eax,%edx
  1027b8:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  1027bb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1027c2:	e9 07 00 00 00       	jmp    1027ce <ramfs_block_read+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  1027c7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  1027ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1027d1:	83 c4 28             	add    $0x28,%esp
  1027d4:	5d                   	pop    %ebp
  1027d5:	c3                   	ret    
  1027d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1027dd:	00 00 00 

001027e0 <ramfs_block_write>:

uint32_t ramfs_block_write(struct res_handle* handle, void* src, uint32_t length) {
  1027e0:	55                   	push   %ebp
  1027e1:	89 e5                	mov    %esp,%ebp
  1027e3:	83 ec 28             	sub    $0x28,%esp
  1027e6:	8b 45 10             	mov    0x10(%ebp),%eax
  1027e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1027ec:	8b 55 08             	mov    0x8(%ebp),%edx
  1027ef:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1027f2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1027f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  1027f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1027fb:	8b 40 04             	mov    0x4(%eax),%eax
  1027fe:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102801:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102804:	8b 00                	mov    (%eax),%eax
  102806:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  10280d:	00 00 00 00 
  102811:	0f 84 70 00 00 00    	je     102887 <ramfs_block_write+0xa7>
        if(length > (buffer[kf->id]->size - handle->position)) return RW_ERR_DRIVER; //Can't write  that much biatch TODO realloc so file may grow
  102817:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10281a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10281d:	8b 09                	mov    (%ecx),%ecx
  10281f:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102826:	8b 49 04             	mov    0x4(%ecx),%ecx
  102829:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10282c:	2b 4a 08             	sub    0x8(%edx),%ecx
  10282f:	39 c8                	cmp    %ecx,%eax
  102831:	0f 86 0c 00 00 00    	jbe    102843 <ramfs_block_write+0x63>
  102837:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  10283e:	e9 4b 00 00 00       	jmp    10288e <ramfs_block_write+0xae>

        memcpy(buffer[kf->id]->buffer + handle->position, src, length);
  102843:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102846:	8b 00                	mov    (%eax),%eax
  102848:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  10284f:	8b 00                	mov    (%eax),%eax
  102851:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102854:	03 41 08             	add    0x8(%ecx),%eax
  102857:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10285a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10285d:	89 04 24             	mov    %eax,(%esp)
  102860:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102864:	89 54 24 08          	mov    %edx,0x8(%esp)
  102868:	e8 d3 1b 00 00       	call   104440 <memcpy>
        handle->position += length;
  10286d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102870:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102873:	8b 51 08             	mov    0x8(%ecx),%edx
  102876:	01 c2                	add    %eax,%edx
  102878:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  10287b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102882:	e9 07 00 00 00       	jmp    10288e <ramfs_block_write+0xae>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  102887:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  10288e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102891:	83 c4 28             	add    $0x28,%esp
  102894:	5d                   	pop    %ebp
  102895:	c3                   	ret    
  102896:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10289d:	00 00 00 

001028a0 <ramfs_block_open>:

struct res_handle* ramfs_block_open(struct res_kfile* kf, uint32_t filemode) {
  1028a0:	55                   	push   %ebp
  1028a1:	89 e5                	mov    %esp,%ebp
  1028a3:	83 ec 18             	sub    $0x18,%esp
  1028a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1028a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1028ac:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1028af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  1028b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028b5:	8b 00                	mov    (%eax),%eax
  1028b7:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  1028be:	00 00 00 00 
  1028c2:	0f 84 9d 00 00 00    	je     102965 <ramfs_block_open+0xc5>
        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  1028c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1028cb:	25 01 00 00 00       	and    $0x1,%eax
  1028d0:	3d 00 00 00 00       	cmp    $0x0,%eax
  1028d5:	0f 84 18 00 00 00    	je     1028f3 <ramfs_block_open+0x53>
  1028db:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1028de:	8b 00                	mov    (%eax),%eax
  1028e0:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  1028e7:	8b 48 08             	mov    0x8(%eax),%ecx
  1028ea:	81 c1 01 00 00 00    	add    $0x1,%ecx
  1028f0:	89 48 08             	mov    %ecx,0x8(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  1028f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1028f6:	25 02 00 00 00       	and    $0x2,%eax
  1028fb:	3d 00 00 00 00       	cmp    $0x0,%eax
  102900:	0f 84 18 00 00 00    	je     10291e <ramfs_block_open+0x7e>
  102906:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102909:	8b 00                	mov    (%eax),%eax
  10290b:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102912:	8b 48 0c             	mov    0xc(%eax),%ecx
  102915:	81 c1 01 00 00 00    	add    $0x1,%ecx
  10291b:	89 48 0c             	mov    %ecx,0xc(%eax)
  10291e:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  102923:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  10292a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10292d:	e8 3e 14 00 00       	call   103d70 <malloc>
  102932:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  102935:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102938:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10293b:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  10293e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102941:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  102948:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10294b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  102951:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102954:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102957:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  10295a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10295d:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102960:	e9 08 00 00 00       	jmp    10296d <ramfs_block_open+0xcd>
  102965:	b8 01 00 00 00       	mov    $0x1,%eax
    }

    return (void*)1;
  10296a:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10296d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102970:	83 c4 18             	add    $0x18,%esp
  102973:	5d                   	pop    %ebp
  102974:	c3                   	ret    
  102975:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10297c:	00 00 00 00 

00102980 <ramfs_block_close>:

uint32_t ramfs_block_close(struct res_handle* handle) {
  102980:	55                   	push   %ebp
  102981:	89 e5                	mov    %esp,%ebp
  102983:	83 ec 18             	sub    $0x18,%esp
  102986:	8b 45 08             	mov    0x8(%ebp),%eax
  102989:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  10298c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10298f:	8b 40 04             	mov    0x4(%eax),%eax
  102992:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  102995:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102998:	8b 00                	mov    (%eax),%eax
  10299a:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  1029a1:	00 00 00 00 
  1029a5:	0f 84 61 00 00 00    	je     102a0c <ramfs_block_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  1029ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1029ae:	8b 40 0c             	mov    0xc(%eax),%eax
  1029b1:	25 01 00 00 00       	and    $0x1,%eax
  1029b6:	3d 00 00 00 00       	cmp    $0x0,%eax
  1029bb:	0f 84 18 00 00 00    	je     1029d9 <ramfs_block_close+0x59>
  1029c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1029c4:	8b 00                	mov    (%eax),%eax
  1029c6:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  1029cd:	8b 48 08             	mov    0x8(%eax),%ecx
  1029d0:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  1029d6:	89 48 08             	mov    %ecx,0x8(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  1029d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1029dc:	8b 40 0c             	mov    0xc(%eax),%eax
  1029df:	25 02 00 00 00       	and    $0x2,%eax
  1029e4:	3d 00 00 00 00       	cmp    $0x0,%eax
  1029e9:	0f 84 18 00 00 00    	je     102a07 <ramfs_block_close+0x87>
  1029ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1029f2:	8b 00                	mov    (%eax),%eax
  1029f4:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  1029fb:	8b 48 0c             	mov    0xc(%eax),%ecx
  1029fe:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102a04:	89 48 0c             	mov    %ecx,0xc(%eax)
    }
  102a07:	e9 00 00 00 00       	jmp    102a0c <ramfs_block_close+0x8c>

    free(handle);
  102a0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a0f:	89 04 24             	mov    %eax,(%esp)
  102a12:	e8 29 17 00 00       	call   104140 <free>
  102a17:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  102a1c:	83 c4 18             	add    $0x18,%esp
  102a1f:	5d                   	pop    %ebp
  102a20:	c3                   	ret    
  102a21:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102a28:	0f 1f 84 00 00 00 00 
  102a2f:	00 

00102a30 <ramfs_block_available>:

struct kfs_driver* ramfs_block_driver_struct() {
    return &block_driver;
}

uint32_t ramfs_block_available(struct res_handle* handle) {
  102a30:	55                   	push   %ebp
  102a31:	89 e5                	mov    %esp,%ebp
  102a33:	83 ec 0c             	sub    $0xc,%esp
  102a36:	8b 45 08             	mov    0x8(%ebp),%eax
  102a39:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102a3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102a3f:	8b 40 04             	mov    0x4(%eax),%eax
  102a42:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  102a45:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a48:	8b 00                	mov    (%eax),%eax
  102a4a:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  102a51:	00 00 00 00 
  102a55:	0f 84 1d 00 00 00    	je     102a78 <ramfs_block_available+0x48>
        return buffer[kf->id]->size - handle->position;
  102a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102a5e:	8b 00                	mov    (%eax),%eax
  102a60:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102a67:	8b 40 04             	mov    0x4(%eax),%eax
  102a6a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  102a6d:	2b 41 08             	sub    0x8(%ecx),%eax
  102a70:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102a73:	e9 07 00 00 00       	jmp    102a7f <ramfs_block_available+0x4f>
    }

    return 0;
  102a78:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102a7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102a82:	83 c4 0c             	add    $0xc,%esp
  102a85:	5d                   	pop    %ebp
  102a86:	c3                   	ret    
  102a87:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  102a8e:	00 00 

00102a90 <ramfs_block_create>:

struct res_kfile* ramfs_block_create(uint32_t* args) {
  102a90:	55                   	push   %ebp
  102a91:	89 e5                	mov    %esp,%ebp
  102a93:	83 ec 28             	sub    $0x28,%esp
  102a96:	8b 45 08             	mov    0x8(%ebp),%eax
  102a99:	b9 08 00 00 00       	mov    $0x8,%ecx
  102a9e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  102aa1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  102aa8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  102aab:	e8 c0 12 00 00       	call   103d70 <malloc>
  102ab0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  102ab3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  102aba:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  102ac1:	0f 8d a7 00 00 00    	jge    102b6e <ramfs_block_create+0xde>
        if(buffer[i] == 0) {
  102ac7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102aca:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  102ad1:	00 00 00 00 
  102ad5:	0f 85 7e 00 00 00    	jne    102b59 <ramfs_block_create+0xc9>
  102adb:	b8 10 00 00 00       	mov    $0x10,%eax
            buffer[i] = malloc(sizeof(struct block_buffer));
  102ae0:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  102ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  102aea:	e8 81 12 00 00       	call   103d70 <malloc>
  102aef:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102af2:	89 04 8d 90 a4 14 00 	mov    %eax,0x14a490(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  102af9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102afc:	8b 00                	mov    (%eax),%eax
  102afe:	89 04 24             	mov    %eax,(%esp)
  102b01:	e8 6a 12 00 00       	call   103d70 <malloc>
  102b06:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102b09:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102b10:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  102b12:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102b15:	8b 00                	mov    (%eax),%eax
  102b17:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102b1a:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102b21:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->writers = 0;
  102b24:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b27:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102b2e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            buffer[i]->readers = 0;
  102b35:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b38:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102b3f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            kfret->id = i;
  102b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b49:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102b4c:	89 01                	mov    %eax,(%ecx)

            return kfret;
  102b4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102b51:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102b54:	e9 1c 00 00 00       	jmp    102b75 <ramfs_block_create+0xe5>
        }
    }
  102b59:	e9 00 00 00 00       	jmp    102b5e <ramfs_block_create+0xce>
}

struct res_kfile* ramfs_block_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  102b5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102b61:	05 01 00 00 00       	add    $0x1,%eax
  102b66:	89 45 f0             	mov    %eax,-0x10(%ebp)
  102b69:	e9 4c ff ff ff       	jmp    102aba <ramfs_block_create+0x2a>

            return kfret;
        }
    }

    return 0;
  102b6e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102b75:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102b78:	83 c4 28             	add    $0x28,%esp
  102b7b:	5d                   	pop    %ebp
  102b7c:	c3                   	ret    
  102b7d:	0f 1f 00             	nopl   (%eax)

00102b80 <ramfs_block_driver_struct>:
    .close     = ramfs_block_close,
    .available = ramfs_block_available,
    .drvname   = "RAMFILE"
};

struct kfs_driver* ramfs_block_driver_struct() {
  102b80:	55                   	push   %ebp
  102b81:	89 e5                	mov    %esp,%ebp
  102b83:	8d 05 88 71 10 00    	lea    0x107188,%eax
    return &block_driver;
  102b89:	5d                   	pop    %ebp
  102b8a:	c3                   	ret    
  102b8b:	66 90                	xchg   %ax,%ax
  102b8d:	66 90                	xchg   %ax,%ax
  102b8f:	90                   	nop

00102b90 <ramfs_fifo_init>:
#include "ramfs/fifo.h"

struct fifo_buffer* buffer[65536];

void ramfs_fifo_init() {
  102b90:	55                   	push   %ebp
  102b91:	89 e5                	mov    %esp,%ebp
  102b93:	83 ec 18             	sub    $0x18,%esp
  102b96:	8d 05 90 a4 14 00    	lea    0x14a490,%eax
  102b9c:	b9 00 00 00 00       	mov    $0x0,%ecx
  102ba1:	ba 00 00 04 00       	mov    $0x40000,%edx
    memset(buffer, 0, sizeof(buffer));
  102ba6:	89 04 24             	mov    %eax,(%esp)
  102ba9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  102bb0:	00 
  102bb1:	c7 44 24 08 00 00 04 	movl   $0x40000,0x8(%esp)
  102bb8:	00 
  102bb9:	89 55 fc             	mov    %edx,-0x4(%ebp)
  102bbc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102bbf:	e8 1c 18 00 00       	call   1043e0 <memset>
}
  102bc4:	83 c4 18             	add    $0x18,%esp
  102bc7:	5d                   	pop    %ebp
  102bc8:	c3                   	ret    
  102bc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102bd0 <ramfs_fifo_read>:
    }

    return 0;
}

uint32_t ramfs_fifo_read(struct res_handle* handle, void* dest, uint32_t length) {
  102bd0:	55                   	push   %ebp
  102bd1:	89 e5                	mov    %esp,%ebp
  102bd3:	83 ec 28             	sub    $0x28,%esp
  102bd6:	8b 45 10             	mov    0x10(%ebp),%eax
  102bd9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102bdc:	8b 55 08             	mov    0x8(%ebp),%edx
  102bdf:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102be2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102be5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102be8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102beb:	8b 40 04             	mov    0x4(%eax),%eax
  102bee:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102bf4:	8b 00                	mov    (%eax),%eax
  102bf6:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  102bfd:	00 00 00 00 
  102c01:	0f 84 d0 00 00 00    	je     102cd7 <ramfs_fifo_read+0x107>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't read cause buffer too small
  102c07:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c0a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102c0d:	8b 09                	mov    (%ecx),%ecx
  102c0f:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102c16:	3b 41 04             	cmp    0x4(%ecx),%eax
  102c19:	0f 86 0c 00 00 00    	jbe    102c2b <ramfs_fifo_read+0x5b>
  102c1f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  102c26:	e9 b3 00 00 00       	jmp    102cde <ramfs_fifo_read+0x10e>
        if(length > buffer[kf->id]->pos)  return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has writers
  102c2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102c2e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102c31:	8b 09                	mov    (%ecx),%ecx
  102c33:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102c3a:	3b 41 08             	cmp    0x8(%ecx),%eax
  102c3d:	0f 86 0c 00 00 00    	jbe    102c4f <ramfs_fifo_read+0x7f>
  102c43:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  102c4a:	e9 8f 00 00 00       	jmp    102cde <ramfs_fifo_read+0x10e>

        memcpy(dest, buffer[kf->id]->buffer, length);
  102c4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102c52:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102c55:	8b 09                	mov    (%ecx),%ecx
  102c57:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102c5e:	8b 09                	mov    (%ecx),%ecx
  102c60:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102c63:	89 04 24             	mov    %eax,(%esp)
  102c66:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102c6a:	89 54 24 08          	mov    %edx,0x8(%esp)
  102c6e:	e8 cd 17 00 00       	call   104440 <memcpy>
        memcpy(buffer[kf->id]->buffer, buffer[kf->id]->buffer + length, buffer[kf->id]->pos - length);
  102c73:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102c76:	8b 00                	mov    (%eax),%eax
  102c78:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102c7f:	8b 00                	mov    (%eax),%eax
  102c81:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102c84:	8b 09                	mov    (%ecx),%ecx
  102c86:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102c8d:	8b 09                	mov    (%ecx),%ecx
  102c8f:	03 4d f0             	add    -0x10(%ebp),%ecx
  102c92:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102c95:	8b 12                	mov    (%edx),%edx
  102c97:	8b 14 95 90 a4 14 00 	mov    0x14a490(,%edx,4),%edx
  102c9e:	8b 52 08             	mov    0x8(%edx),%edx
  102ca1:	2b 55 f0             	sub    -0x10(%ebp),%edx
  102ca4:	89 04 24             	mov    %eax,(%esp)
  102ca7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102cab:	89 54 24 08          	mov    %edx,0x8(%esp)
  102caf:	e8 8c 17 00 00       	call   104440 <memcpy>
        buffer[kf->id]->pos -= length;
  102cb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102cb7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102cba:	8b 09                	mov    (%ecx),%ecx
  102cbc:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102cc3:	8b 51 08             	mov    0x8(%ecx),%edx
  102cc6:	29 c2                	sub    %eax,%edx
  102cc8:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  102ccb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102cd2:	e9 07 00 00 00       	jmp    102cde <ramfs_fifo_read+0x10e>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  102cd7:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  102cde:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102ce1:	83 c4 28             	add    $0x28,%esp
  102ce4:	5d                   	pop    %ebp
  102ce5:	c3                   	ret    
  102ce6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  102ced:	00 00 00 

00102cf0 <ramfs_fifo_write>:

uint32_t ramfs_fifo_write(struct res_handle* handle, void* src, uint32_t length) {
  102cf0:	55                   	push   %ebp
  102cf1:	89 e5                	mov    %esp,%ebp
  102cf3:	83 ec 28             	sub    $0x28,%esp
  102cf6:	8b 45 10             	mov    0x10(%ebp),%eax
  102cf9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  102cfc:	8b 55 08             	mov    0x8(%ebp),%edx
  102cff:	89 55 f8             	mov    %edx,-0x8(%ebp)
  102d02:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  102d05:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102d08:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102d0b:	8b 40 04             	mov    0x4(%eax),%eax
  102d0e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(buffer[kf->id] != 0) {
  102d11:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102d14:	8b 00                	mov    (%eax),%eax
  102d16:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  102d1d:	00 00 00 00 
  102d21:	0f 84 af 00 00 00    	je     102dd6 <ramfs_fifo_write+0xe6>
        if(length > buffer[kf->id]->size) return RW_ERR_DRIVER; //Error code 2 -> Can't write cause buffer too small
  102d27:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102d2a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102d2d:	8b 09                	mov    (%ecx),%ecx
  102d2f:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102d36:	3b 41 04             	cmp    0x4(%ecx),%eax
  102d39:	0f 86 0c 00 00 00    	jbe    102d4b <ramfs_fifo_write+0x5b>
  102d3f:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  102d46:	e9 92 00 00 00       	jmp    102ddd <ramfs_fifo_write+0xed>
        if(length > (buffer[kf->id]->size - buffer[kf->id]->pos)) return RW_BLOCK; //Block until write is possible TODO maybe check if FIFO has readers
  102d4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102d4e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102d51:	8b 09                	mov    (%ecx),%ecx
  102d53:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102d5a:	8b 49 04             	mov    0x4(%ecx),%ecx
  102d5d:	8b 55 ec             	mov    -0x14(%ebp),%edx
  102d60:	8b 12                	mov    (%edx),%edx
  102d62:	8b 14 95 90 a4 14 00 	mov    0x14a490(,%edx,4),%edx
  102d69:	2b 4a 08             	sub    0x8(%edx),%ecx
  102d6c:	39 c8                	cmp    %ecx,%eax
  102d6e:	0f 86 0c 00 00 00    	jbe    102d80 <ramfs_fifo_write+0x90>
  102d74:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  102d7b:	e9 5d 00 00 00       	jmp    102ddd <ramfs_fifo_write+0xed>

        memcpy(buffer[kf->id]->buffer + buffer[kf->id]->pos, src, length);
  102d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102d83:	8b 00                	mov    (%eax),%eax
  102d85:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102d8c:	8b 00                	mov    (%eax),%eax
  102d8e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102d91:	8b 09                	mov    (%ecx),%ecx
  102d93:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102d9a:	03 41 08             	add    0x8(%ecx),%eax
  102d9d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  102da0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  102da3:	89 04 24             	mov    %eax,(%esp)
  102da6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102daa:	89 54 24 08          	mov    %edx,0x8(%esp)
  102dae:	e8 8d 16 00 00       	call   104440 <memcpy>
        buffer[kf->id]->pos += length;
  102db3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102db6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  102db9:	8b 09                	mov    (%ecx),%ecx
  102dbb:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  102dc2:	8b 51 08             	mov    0x8(%ecx),%edx
  102dc5:	01 c2                	add    %eax,%edx
  102dc7:	89 51 08             	mov    %edx,0x8(%ecx)

        return RW_OK;
  102dca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102dd1:	e9 07 00 00 00       	jmp    102ddd <ramfs_fifo_write+0xed>
    }

    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  102dd6:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  102ddd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102de0:	83 c4 28             	add    $0x28,%esp
  102de3:	5d                   	pop    %ebp
  102de4:	c3                   	ret    
  102de5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  102dec:	00 00 00 00 

00102df0 <ramfs_fifo_open>:

struct res_handle* ramfs_fifo_open(struct res_kfile* kf, uint32_t filemode) {
  102df0:	55                   	push   %ebp
  102df1:	89 e5                	mov    %esp,%ebp
  102df3:	83 ec 18             	sub    $0x18,%esp
  102df6:	8b 45 0c             	mov    0xc(%ebp),%eax
  102df9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  102dfc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  102dff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(buffer[kf->id] != 0) {
  102e02:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e05:	8b 00                	mov    (%eax),%eax
  102e07:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  102e0e:	00 00 00 00 
  102e12:	0f 84 f4 00 00 00    	je     102f0c <ramfs_fifo_open+0x11c>
        if(filemode & FM_EXEC) return 0;
  102e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e1b:	25 04 00 00 00       	and    $0x4,%eax
  102e20:	3d 00 00 00 00       	cmp    $0x0,%eax
  102e25:	0f 84 0c 00 00 00    	je     102e37 <ramfs_fifo_open+0x47>
  102e2b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102e32:	e9 dc 00 00 00       	jmp    102f13 <ramfs_fifo_open+0x123>
        if((filemode & FM_READ) && buffer[kf->id]->readers > 0) return 0;
  102e37:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e3a:	25 01 00 00 00       	and    $0x1,%eax
  102e3f:	3d 00 00 00 00       	cmp    $0x0,%eax
  102e44:	0f 84 25 00 00 00    	je     102e6f <ramfs_fifo_open+0x7f>
  102e4a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e4d:	8b 00                	mov    (%eax),%eax
  102e4f:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102e56:	81 78 0c 00 00 00 00 	cmpl   $0x0,0xc(%eax)
  102e5d:	0f 86 0c 00 00 00    	jbe    102e6f <ramfs_fifo_open+0x7f>
  102e63:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  102e6a:	e9 a4 00 00 00       	jmp    102f13 <ramfs_fifo_open+0x123>

        if((filemode & FM_READ)) buffer[kf->id]->readers++;
  102e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e72:	25 01 00 00 00       	and    $0x1,%eax
  102e77:	3d 00 00 00 00       	cmp    $0x0,%eax
  102e7c:	0f 84 18 00 00 00    	je     102e9a <ramfs_fifo_open+0xaa>
  102e82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102e85:	8b 00                	mov    (%eax),%eax
  102e87:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102e8e:	8b 48 0c             	mov    0xc(%eax),%ecx
  102e91:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102e97:	89 48 0c             	mov    %ecx,0xc(%eax)
        if((filemode & FM_WRITE)) buffer[kf->id]->writers++;
  102e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102e9d:	25 02 00 00 00       	and    $0x2,%eax
  102ea2:	3d 00 00 00 00       	cmp    $0x0,%eax
  102ea7:	0f 84 18 00 00 00    	je     102ec5 <ramfs_fifo_open+0xd5>
  102ead:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102eb0:	8b 00                	mov    (%eax),%eax
  102eb2:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102eb9:	8b 48 10             	mov    0x10(%eax),%ecx
  102ebc:	81 c1 01 00 00 00    	add    $0x1,%ecx
  102ec2:	89 48 10             	mov    %ecx,0x10(%eax)
  102ec5:	b8 10 00 00 00       	mov    $0x10,%eax

        struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  102eca:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  102ed1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  102ed4:	e8 97 0e 00 00       	call   103d70 <malloc>
  102ed9:	89 45 f0             	mov    %eax,-0x10(%ebp)

        rethandle->filemode = filemode;
  102edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102edf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102ee2:	89 41 0c             	mov    %eax,0xc(%ecx)
        rethandle->position = 0;
  102ee5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ee8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        rethandle->res_type = RES_KERNDRV;
  102eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102ef2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        rethandle->res_ptr  = kf;
  102ef8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102efb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  102efe:	89 41 04             	mov    %eax,0x4(%ecx)

        return rethandle;
  102f01:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102f04:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102f07:	e9 07 00 00 00       	jmp    102f13 <ramfs_fifo_open+0x123>
    }

    return 0;
  102f0c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  102f13:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f16:	83 c4 18             	add    $0x18,%esp
  102f19:	5d                   	pop    %ebp
  102f1a:	c3                   	ret    
  102f1b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00102f20 <ramfs_fifo_close>:

uint32_t ramfs_fifo_close(struct res_handle* handle) {
  102f20:	55                   	push   %ebp
  102f21:	89 e5                	mov    %esp,%ebp
  102f23:	83 ec 18             	sub    $0x18,%esp
  102f26:	8b 45 08             	mov    0x8(%ebp),%eax
  102f29:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102f2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f2f:	8b 40 04             	mov    0x4(%eax),%eax
  102f32:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if(buffer[kf->id] != 0) {
  102f35:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f38:	8b 00                	mov    (%eax),%eax
  102f3a:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  102f41:	00 00 00 00 
  102f45:	0f 84 61 00 00 00    	je     102fac <ramfs_fifo_close+0x8c>
        if(handle->filemode & FM_READ)  buffer[kf->id]->readers--;
  102f4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f4e:	8b 40 0c             	mov    0xc(%eax),%eax
  102f51:	25 01 00 00 00       	and    $0x1,%eax
  102f56:	3d 00 00 00 00       	cmp    $0x0,%eax
  102f5b:	0f 84 18 00 00 00    	je     102f79 <ramfs_fifo_close+0x59>
  102f61:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f64:	8b 00                	mov    (%eax),%eax
  102f66:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102f6d:	8b 48 0c             	mov    0xc(%eax),%ecx
  102f70:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102f76:	89 48 0c             	mov    %ecx,0xc(%eax)
        if(handle->filemode & FM_WRITE) buffer[kf->id]->writers--;
  102f79:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102f7c:	8b 40 0c             	mov    0xc(%eax),%eax
  102f7f:	25 02 00 00 00       	and    $0x2,%eax
  102f84:	3d 00 00 00 00       	cmp    $0x0,%eax
  102f89:	0f 84 18 00 00 00    	je     102fa7 <ramfs_fifo_close+0x87>
  102f8f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102f92:	8b 00                	mov    (%eax),%eax
  102f94:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  102f9b:	8b 48 10             	mov    0x10(%eax),%ecx
  102f9e:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  102fa4:	89 48 10             	mov    %ecx,0x10(%eax)
    }
  102fa7:	e9 00 00 00 00       	jmp    102fac <ramfs_fifo_close+0x8c>

    free(handle);
  102fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102faf:	89 04 24             	mov    %eax,(%esp)
  102fb2:	e8 89 11 00 00       	call   104140 <free>
  102fb7:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  102fbc:	83 c4 18             	add    $0x18,%esp
  102fbf:	5d                   	pop    %ebp
  102fc0:	c3                   	ret    
  102fc1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  102fc8:	0f 1f 84 00 00 00 00 
  102fcf:	00 

00102fd0 <ramfs_fifo_available>:

struct kfs_driver* ramfs_fifo_driver_struct() {
    return &fifo_driver;
}

uint32_t ramfs_fifo_available(struct res_handle* handle) {
  102fd0:	55                   	push   %ebp
  102fd1:	89 e5                	mov    %esp,%ebp
  102fd3:	83 ec 0c             	sub    $0xc,%esp
  102fd6:	8b 45 08             	mov    0x8(%ebp),%eax
  102fd9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kf = ((struct res_kfile*)handle->res_ptr);
  102fdc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102fdf:	8b 40 04             	mov    0x4(%eax),%eax
  102fe2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(buffer[kf->id] != 0) {
  102fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102fe8:	8b 00                	mov    (%eax),%eax
  102fea:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  102ff1:	00 00 00 00 
  102ff5:	0f 84 17 00 00 00    	je     103012 <ramfs_fifo_available+0x42>
        return buffer[kf->id]->pos;
  102ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102ffe:	8b 00                	mov    (%eax),%eax
  103000:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  103007:	8b 40 08             	mov    0x8(%eax),%eax
  10300a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10300d:	e9 07 00 00 00       	jmp    103019 <ramfs_fifo_available+0x49>
    }

    return 0;
  103012:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103019:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10301c:	83 c4 0c             	add    $0xc,%esp
  10301f:	5d                   	pop    %ebp
  103020:	c3                   	ret    
  103021:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103028:	0f 1f 84 00 00 00 00 
  10302f:	00 

00103030 <ramfs_fifo_create>:

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
  103030:	55                   	push   %ebp
  103031:	89 e5                	mov    %esp,%ebp
  103033:	83 ec 28             	sub    $0x28,%esp
  103036:	8b 45 08             	mov    0x8(%ebp),%eax
  103039:	b9 08 00 00 00       	mov    $0x8,%ecx
  10303e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));
  103041:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103048:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10304b:	e8 20 0d 00 00       	call   103d70 <malloc>
  103050:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(int i = 0; i < 65536; i++) {
  103053:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10305a:	81 7d f0 00 00 01 00 	cmpl   $0x10000,-0x10(%ebp)
  103061:	0f 8d b8 00 00 00    	jge    10311f <ramfs_fifo_create+0xef>
        if(buffer[i] == 0) {
  103067:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10306a:	81 3c 85 90 a4 14 00 	cmpl   $0x0,0x14a490(,%eax,4)
  103071:	00 00 00 00 
  103075:	0f 85 8f 00 00 00    	jne    10310a <ramfs_fifo_create+0xda>
  10307b:	b8 14 00 00 00       	mov    $0x14,%eax
            buffer[i] = malloc(sizeof(struct fifo_buffer));
  103080:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
  103087:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10308a:	e8 e1 0c 00 00       	call   103d70 <malloc>
  10308f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103092:	89 04 8d 90 a4 14 00 	mov    %eax,0x14a490(,%ecx,4)
            buffer[i]->buffer = malloc(args[0]);
  103099:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10309c:	8b 00                	mov    (%eax),%eax
  10309e:	89 04 24             	mov    %eax,(%esp)
  1030a1:	e8 ca 0c 00 00       	call   103d70 <malloc>
  1030a6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1030a9:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  1030b0:	89 01                	mov    %eax,(%ecx)
            buffer[i]->size   = args[0];
  1030b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1030b5:	8b 00                	mov    (%eax),%eax
  1030b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1030ba:	8b 0c 8d 90 a4 14 00 	mov    0x14a490(,%ecx,4),%ecx
  1030c1:	89 41 04             	mov    %eax,0x4(%ecx)

            buffer[i]->pos = 0;
  1030c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030c7:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  1030ce:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            buffer[i]->writers = 0;
  1030d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030d8:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  1030df:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
            buffer[i]->readers = 0;
  1030e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030e9:	8b 04 85 90 a4 14 00 	mov    0x14a490(,%eax,4),%eax
  1030f0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            kfret->id = i;
  1030f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1030fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1030fd:	89 01                	mov    %eax,(%ecx)

            return kfret;
  1030ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103102:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103105:	e9 1c 00 00 00       	jmp    103126 <ramfs_fifo_create+0xf6>
        }
    }
  10310a:	e9 00 00 00 00       	jmp    10310f <ramfs_fifo_create+0xdf>
}

struct res_kfile* ramfs_fifo_create(uint32_t* args) {
    struct res_kfile* kfret = malloc(sizeof(struct res_kfile));

    for(int i = 0; i < 65536; i++) {
  10310f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103112:	05 01 00 00 00       	add    $0x1,%eax
  103117:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10311a:	e9 3b ff ff ff       	jmp    10305a <ramfs_fifo_create+0x2a>

            return kfret;
        }
    }

    return 0;
  10311f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103126:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103129:	83 c4 28             	add    $0x28,%esp
  10312c:	5d                   	pop    %ebp
  10312d:	c3                   	ret    
  10312e:	66 90                	xchg   %ax,%ax

00103130 <ramfs_fifo_driver_struct>:
    .close     = ramfs_fifo_close,
    .available = ramfs_fifo_available,
    .drvname   = "FIFO"
};

struct kfs_driver* ramfs_fifo_driver_struct() {
  103130:	55                   	push   %ebp
  103131:	89 e5                	mov    %esp,%ebp
  103133:	8d 05 a4 71 10 00    	lea    0x1071a4,%eax
    return &fifo_driver;
  103139:	5d                   	pop    %ebp
  10313a:	c3                   	ret    
  10313b:	90                   	nop
  10313c:	66 90                	xchg   %ax,%ax
  10313e:	66 90                	xchg   %ax,%ax

00103140 <tar_load_ramfs>:

    return size;

}

void tar_load_ramfs(void* tarball) {
  103140:	55                   	push   %ebp
  103141:	89 e5                	mov    %esp,%ebp
  103143:	56                   	push   %esi
  103144:	83 ec 64             	sub    $0x64,%esp
  103147:	8b 45 08             	mov    0x8(%ebp),%eax
  10314a:	8d 0d d2 83 10 00    	lea    0x1083d2,%ecx
  103150:	89 45 f8             	mov    %eax,-0x8(%ebp)
    void* address = tarball;
  103153:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103156:	89 45 f4             	mov    %eax,-0xc(%ebp)

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);
  103159:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10315c:	89 0c 24             	mov    %ecx,(%esp)
  10315f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103163:	e8 e8 d3 ff ff       	call   100550 <kprintf>

    for (i = 0; ; i++)
  103168:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10316f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    {

        struct tar_header *header = (struct tar_header*)address;
  103172:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103175:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (header->name[0] == '\0')
  103178:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10317b:	0f be 00             	movsbl (%eax),%eax
  10317e:	3d 00 00 00 00       	cmp    $0x0,%eax
  103183:	0f 85 05 00 00 00    	jne    10318e <tar_load_ramfs+0x4e>
            break;
  103189:	e9 67 01 00 00       	jmp    1032f5 <tar_load_ramfs+0x1b5>

        uint32_t size = tar_parse_number(header->size);
  10318e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103191:	05 7c 00 00 00       	add    $0x7c,%eax
  103196:	89 04 24             	mov    %eax,(%esp)
  103199:	e8 72 01 00 00       	call   103310 <tar_parse_number>
  10319e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        address += 512;
  1031a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1031a4:	05 00 02 00 00       	add    $0x200,%eax
  1031a9:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(size != 0) {
  1031ac:	81 7d e8 00 00 00 00 	cmpl   $0x0,-0x18(%ebp)
  1031b3:	0f 84 cb 00 00 00    	je     103284 <tar_load_ramfs+0x144>
  1031b9:	8d 05 fe 83 10 00    	lea    0x1083fe,%eax
            kprintf("[initrfs] Extracting %s (%d bytes)\n", header->name, size);
  1031bf:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1031c2:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1031c5:	89 04 24             	mov    %eax,(%esp)
  1031c8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1031cc:	89 54 24 08          	mov    %edx,0x8(%esp)
  1031d0:	e8 7b d3 ff ff       	call   100550 <kprintf>
  1031d5:	8d 4d e8             	lea    -0x18(%ebp),%ecx

            vfs_create_kfile(header->name, ramfs_block_driver_struct(), &size);
  1031d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1031db:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1031de:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1031e1:	89 55 d0             	mov    %edx,-0x30(%ebp)
  1031e4:	e8 97 f9 ff ff       	call   102b80 <ramfs_block_driver_struct>
  1031e9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1031ec:	89 0c 24             	mov    %ecx,(%esp)
  1031ef:	89 44 24 04          	mov    %eax,0x4(%esp)
  1031f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1031f6:	89 44 24 08          	mov    %eax,0x8(%esp)
  1031fa:	e8 01 19 00 00       	call   104b00 <vfs_create_kfile>
  1031ff:	b9 02 00 00 00       	mov    $0x2,%ecx
            struct res_handle* h = vfs_open(header->name, FM_WRITE);
  103204:	8b 55 ec             	mov    -0x14(%ebp),%edx
  103207:	89 14 24             	mov    %edx,(%esp)
  10320a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  103211:	00 
  103212:	89 45 cc             	mov    %eax,-0x34(%ebp)
  103215:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  103218:	e8 53 1a 00 00       	call   104c70 <vfs_open>
  10321d:	b9 01 00 00 00       	mov    $0x1,%ecx
  103222:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            uint32_t err = vfs_write(h, address, size, 1);
  103225:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103228:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10322b:	8b 75 e8             	mov    -0x18(%ebp),%esi
  10322e:	89 04 24             	mov    %eax,(%esp)
  103231:	89 54 24 04          	mov    %edx,0x4(%esp)
  103235:	89 74 24 08          	mov    %esi,0x8(%esp)
  103239:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103240:	00 
  103241:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  103244:	e8 d7 1b 00 00       	call   104e20 <vfs_write>
  103249:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(err) {
  10324c:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  103253:	0f 84 18 00 00 00    	je     103271 <tar_load_ramfs+0x131>
  103259:	8d 05 22 84 10 00    	lea    0x108422,%eax
                kprintf("[initrfs] VFS ERROR: %d\n", err);
  10325f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103262:	89 04 24             	mov    %eax,(%esp)
  103265:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103269:	e8 e2 d2 ff ff       	call   100550 <kprintf>
  10326e:	89 45 c0             	mov    %eax,-0x40(%ebp)
            }

            vfs_close(h);
  103271:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103274:	89 04 24             	mov    %eax,(%esp)
  103277:	e8 74 1a 00 00       	call   104cf0 <vfs_close>
        }
  10327c:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10327f:	e9 2d 00 00 00       	jmp    1032b1 <tar_load_ramfs+0x171>
  103284:	8d 05 3b 84 10 00    	lea    0x10843b,%eax
        else
        {
            kprintf("[initrfs] Creating dir %s (%d bytes)\n", header->name, size);
  10328a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10328d:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103290:	89 04 24             	mov    %eax,(%esp)
  103293:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103297:	89 54 24 08          	mov    %edx,0x8(%esp)
  10329b:	e8 b0 d2 ff ff       	call   100550 <kprintf>
            vfs_create_dir(header->name);
  1032a0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1032a3:	89 0c 24             	mov    %ecx,(%esp)
  1032a6:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1032a9:	e8 c2 16 00 00       	call   104970 <vfs_create_dir>
  1032ae:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        }

        address += (size / 512) * 512;
  1032b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1032b4:	c1 e8 09             	shr    $0x9,%eax
  1032b7:	c1 e0 09             	shl    $0x9,%eax
  1032ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1032bd:	01 c1                	add    %eax,%ecx
  1032bf:	89 4d f4             	mov    %ecx,-0xc(%ebp)

        if (size % 512)
  1032c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1032c5:	25 ff 01 00 00       	and    $0x1ff,%eax
  1032ca:	3d 00 00 00 00       	cmp    $0x0,%eax
  1032cf:	0f 84 0b 00 00 00    	je     1032e0 <tar_load_ramfs+0x1a0>
            address += 512;
  1032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1032d8:	05 00 02 00 00       	add    $0x200,%eax
  1032dd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    }
  1032e0:	e9 00 00 00 00       	jmp    1032e5 <tar_load_ramfs+0x1a5>

    uint32_t i;

    kprintf("[initrfs] Starting unpacking tarball at %x\n", address);

    for (i = 0; ; i++)
  1032e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1032e8:	05 01 00 00 00       	add    $0x1,%eax
  1032ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1032f0:	e9 7d fe ff ff       	jmp    103172 <tar_load_ramfs+0x32>
  1032f5:	8d 05 61 84 10 00    	lea    0x108461,%eax
        if (size % 512)
            address += 512;

    }

    kprintf("[initrfs] Finished unpacking tarball\n");
  1032fb:	89 04 24             	mov    %eax,(%esp)
  1032fe:	e8 4d d2 ff ff       	call   100550 <kprintf>
}
  103303:	89 45 b0             	mov    %eax,-0x50(%ebp)
  103306:	83 c4 64             	add    $0x64,%esp
  103309:	5e                   	pop    %esi
  10330a:	5d                   	pop    %ebp
  10330b:	c3                   	ret    
  10330c:	0f 1f 40 00          	nopl   0x0(%eax)

00103310 <tar_parse_number>:
#include "ramfs/tar.h"
#include "ramfs/block.h"
#include "vfs.h"

static uint32_t tar_parse_number(const char *in)
{
  103310:	55                   	push   %ebp
  103311:	89 e5                	mov    %esp,%ebp
  103313:	83 ec 10             	sub    $0x10,%esp
  103316:	8b 45 08             	mov    0x8(%ebp),%eax
  103319:	89 45 fc             	mov    %eax,-0x4(%ebp)

    unsigned int size = 0;
  10331c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    unsigned int j;
    unsigned int count = 1;
  103323:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

    for (j = 11; j > 0; j--, count *= 8)
  10332a:	c7 45 f4 0b 00 00 00 	movl   $0xb,-0xc(%ebp)
  103331:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103338:	0f 86 39 00 00 00    	jbe    103377 <tar_parse_number+0x67>
        size += ((in[j - 1] - '0') * count);
  10333e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103341:	2d 01 00 00 00       	sub    $0x1,%eax
  103346:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103349:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  10334d:	2d 30 00 00 00       	sub    $0x30,%eax
  103352:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  103356:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103359:	01 c1                	add    %eax,%ecx
  10335b:	89 4d f8             	mov    %ecx,-0x8(%ebp)

    unsigned int size = 0;
    unsigned int j;
    unsigned int count = 1;

    for (j = 11; j > 0; j--, count *= 8)
  10335e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103361:	05 ff ff ff ff       	add    $0xffffffff,%eax
  103366:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103369:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10336c:	c1 e0 03             	shl    $0x3,%eax
  10336f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103372:	e9 ba ff ff ff       	jmp    103331 <tar_parse_number+0x21>
        size += ((in[j - 1] - '0') * count);

    return size;
  103377:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10337a:	83 c4 10             	add    $0x10,%esp
  10337d:	5d                   	pop    %ebp
  10337e:	c3                   	ret    
  10337f:	90                   	nop

00103380 <ramfs_vga_read>:

struct res_kfile* ramfs_vga_create(uint32_t* args) {
    return malloc(sizeof(struct res_kfile));
}

uint32_t ramfs_vga_read(struct res_handle* handle, void* dest, uint32_t length) {
  103380:	55                   	push   %ebp
  103381:	89 e5                	mov    %esp,%ebp
  103383:	56                   	push   %esi
  103384:	83 ec 0c             	sub    $0xc,%esp
  103387:	8b 45 10             	mov    0x10(%ebp),%eax
  10338a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10338d:	8b 55 08             	mov    0x8(%ebp),%edx
  103390:	be 03 00 00 00       	mov    $0x3,%esi
  103395:	89 55 f8             	mov    %edx,-0x8(%ebp)
  103398:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10339b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return RW_ERR_DRIVER; //Deadlock if lib-mikrOS tries to block until successfull read when returning 0 so we return error code 1 (length+1)
  10339e:	89 f0                	mov    %esi,%eax
  1033a0:	83 c4 0c             	add    $0xc,%esp
  1033a3:	5e                   	pop    %esi
  1033a4:	5d                   	pop    %ebp
  1033a5:	c3                   	ret    
  1033a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1033ad:	00 00 00 

001033b0 <ramfs_vga_write>:
}

uint32_t ramfs_vga_write(struct res_handle* handle, void* src, uint32_t length) {
  1033b0:	55                   	push   %ebp
  1033b1:	89 e5                	mov    %esp,%ebp
  1033b3:	83 ec 1c             	sub    $0x1c,%esp
  1033b6:	8b 45 10             	mov    0x10(%ebp),%eax
  1033b9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1033bc:	8b 55 08             	mov    0x8(%ebp),%edx
  1033bf:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1033c2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1033c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(length != sizeof(struct vga_command)) return RW_ERR_DRIVER;
  1033c8:	81 7d f0 06 00 00 00 	cmpl   $0x6,-0x10(%ebp)
  1033cf:	0f 84 0c 00 00 00    	je     1033e1 <ramfs_vga_write+0x31>
  1033d5:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
  1033dc:	e9 1f 01 00 00       	jmp    103500 <ramfs_vga_write+0x150>

    struct vga_command* vgac = src;
  1033e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1033e4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(vgac->command == CMD_SET) {
  1033e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033ea:	0f b7 00             	movzwl (%eax),%eax
  1033ed:	3d 00 00 00 00       	cmp    $0x0,%eax
  1033f2:	0f 85 2f 00 00 00    	jne    103427 <ramfs_vga_write+0x77>
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
  1033f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1033fb:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  1033ff:	3d d0 07 00 00       	cmp    $0x7d0,%eax
  103404:	0f 8d 18 00 00 00    	jge    103422 <ramfs_vga_write+0x72>
  10340a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10340d:	66 8b 48 04          	mov    0x4(%eax),%cx
  103411:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103414:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  103418:	8b 15 c0 71 10 00    	mov    0x1071c0,%edx
  10341e:	66 89 0c 42          	mov    %cx,(%edx,%eax,2)
    }
  103422:	e9 00 00 00 00       	jmp    103427 <ramfs_vga_write+0x77>

    if(vgac->command == CMD_CLEAR) {
  103427:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10342a:	0f b7 00             	movzwl (%eax),%eax
  10342d:	3d 01 00 00 00       	cmp    $0x1,%eax
  103432:	0f 85 38 00 00 00    	jne    103470 <ramfs_vga_write+0xc0>
        for(int i = 0; i < (80 * 25); i++) {
  103438:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10343f:	81 7d e8 d0 07 00 00 	cmpl   $0x7d0,-0x18(%ebp)
  103446:	0f 8d 1f 00 00 00    	jge    10346b <ramfs_vga_write+0xbb>
            vga_buffer[i] = 0;
  10344c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10344f:	8b 0d c0 71 10 00    	mov    0x1071c0,%ecx
  103455:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
    if(vgac->command == CMD_SET) {
        if(vgac->offset < (25 * 80)) vga_buffer[vgac->offset] = vgac->value;
    }

    if(vgac->command == CMD_CLEAR) {
        for(int i = 0; i < (80 * 25); i++) {
  10345b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10345e:	05 01 00 00 00       	add    $0x1,%eax
  103463:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103466:	e9 d4 ff ff ff       	jmp    10343f <ramfs_vga_write+0x8f>
            vga_buffer[i] = 0;
        }
    }
  10346b:	e9 00 00 00 00       	jmp    103470 <ramfs_vga_write+0xc0>

    if(vgac->command == CMD_SCROLL) {
  103470:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103473:	0f b7 00             	movzwl (%eax),%eax
  103476:	3d 02 00 00 00       	cmp    $0x2,%eax
  10347b:	0f 85 78 00 00 00    	jne    1034f9 <ramfs_vga_write+0x149>
        int i;
        for (i = 0; i < 24 * 80; i++) {
  103481:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  103488:	81 7d e4 80 07 00 00 	cmpl   $0x780,-0x1c(%ebp)
  10348f:	0f 8d 2e 00 00 00    	jge    1034c3 <ramfs_vga_write+0x113>
            vga_buffer[i] = vga_buffer[i + 80];
  103495:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103498:	8b 0d c0 71 10 00    	mov    0x1071c0,%ecx
  10349e:	66 8b 94 41 a0 00 00 	mov    0xa0(%ecx,%eax,2),%dx
  1034a5:	00 
  1034a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1034a9:	8b 0d c0 71 10 00    	mov    0x1071c0,%ecx
  1034af:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)
        }
    }

    if(vgac->command == CMD_SCROLL) {
        int i;
        for (i = 0; i < 24 * 80; i++) {
  1034b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1034b6:	05 01 00 00 00       	add    $0x1,%eax
  1034bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1034be:	e9 c5 ff ff ff       	jmp    103488 <ramfs_vga_write+0xd8>
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  1034c3:	e9 00 00 00 00       	jmp    1034c8 <ramfs_vga_write+0x118>
  1034c8:	81 7d e4 d0 07 00 00 	cmpl   $0x7d0,-0x1c(%ebp)
  1034cf:	0f 8d 1f 00 00 00    	jge    1034f4 <ramfs_vga_write+0x144>
            vga_buffer[i] = 0;
  1034d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1034d8:	8b 0d c0 71 10 00    	mov    0x1071c0,%ecx
  1034de:	66 c7 04 41 00 00    	movw   $0x0,(%ecx,%eax,2)
        int i;
        for (i = 0; i < 24 * 80; i++) {
            vga_buffer[i] = vga_buffer[i + 80];
        }

        for (; i < 25 * 80; i++) {
  1034e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1034e7:	05 01 00 00 00       	add    $0x1,%eax
  1034ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1034ef:	e9 d4 ff ff ff       	jmp    1034c8 <ramfs_vga_write+0x118>
            vga_buffer[i] = 0;
        }
    }
  1034f4:	e9 00 00 00 00       	jmp    1034f9 <ramfs_vga_write+0x149>

    return RW_OK; //Deadlock if lib-mikrOS tries to block until successfull write when returning 0 so we return error code 1 (length+1)
  1034f9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  103500:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103503:	83 c4 1c             	add    $0x1c,%esp
  103506:	5d                   	pop    %ebp
  103507:	c3                   	ret    
  103508:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10350f:	00 

00103510 <ramfs_vga_open>:

struct res_handle* ramfs_vga_open(struct res_kfile* kf, uint32_t filemode) {
  103510:	55                   	push   %ebp
  103511:	89 e5                	mov    %esp,%ebp
  103513:	83 ec 18             	sub    $0x18,%esp
  103516:	8b 45 0c             	mov    0xc(%ebp),%eax
  103519:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10351c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10351f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(filemode & FM_EXEC) return 0;
  103522:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103525:	25 04 00 00 00       	and    $0x4,%eax
  10352a:	3d 00 00 00 00       	cmp    $0x0,%eax
  10352f:	0f 84 0c 00 00 00    	je     103541 <ramfs_vga_open+0x31>
  103535:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10353c:	e9 b2 00 00 00       	jmp    1035f3 <ramfs_vga_open+0xe3>
    if(filemode & FM_READ) return 0;
  103541:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103544:	25 01 00 00 00       	and    $0x1,%eax
  103549:	3d 00 00 00 00       	cmp    $0x0,%eax
  10354e:	0f 84 0c 00 00 00    	je     103560 <ramfs_vga_open+0x50>
  103554:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10355b:	e9 93 00 00 00       	jmp    1035f3 <ramfs_vga_open+0xe3>

    if((filemode & FM_WRITE) && vga_writers != 0) return 0;
  103560:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103563:	25 02 00 00 00       	and    $0x2,%eax
  103568:	3d 00 00 00 00       	cmp    $0x0,%eax
  10356d:	0f 84 1c 00 00 00    	je     10358f <ramfs_vga_open+0x7f>
  103573:	81 3d 24 a4 10 00 00 	cmpl   $0x0,0x10a424
  10357a:	00 00 00 
  10357d:	0f 84 0c 00 00 00    	je     10358f <ramfs_vga_open+0x7f>
  103583:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10358a:	e9 64 00 00 00       	jmp    1035f3 <ramfs_vga_open+0xe3>
    if((filemode & FM_WRITE)) vga_writers++;
  10358f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103592:	25 02 00 00 00       	and    $0x2,%eax
  103597:	3d 00 00 00 00       	cmp    $0x0,%eax
  10359c:	0f 84 0f 00 00 00    	je     1035b1 <ramfs_vga_open+0xa1>
  1035a2:	a1 24 a4 10 00       	mov    0x10a424,%eax
  1035a7:	05 01 00 00 00       	add    $0x1,%eax
  1035ac:	a3 24 a4 10 00       	mov    %eax,0x10a424
  1035b1:	b8 10 00 00 00       	mov    $0x10,%eax

    struct res_handle* rethandle = malloc(sizeof(struct res_handle));
  1035b6:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  1035bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1035c0:	e8 ab 07 00 00       	call   103d70 <malloc>
  1035c5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    rethandle->filemode = filemode;
  1035c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1035cb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1035ce:	89 41 0c             	mov    %eax,0xc(%ecx)
    rethandle->position = 0;
  1035d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1035d4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    rethandle->res_type = RES_KERNDRV;
  1035db:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1035de:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    rethandle->res_ptr  = kf;
  1035e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1035e7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1035ea:	89 41 04             	mov    %eax,0x4(%ecx)

    return rethandle;
  1035ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1035f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  1035f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1035f6:	83 c4 18             	add    $0x18,%esp
  1035f9:	5d                   	pop    %ebp
  1035fa:	c3                   	ret    
  1035fb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103600 <ramfs_vga_close>:

uint32_t ramfs_vga_close(struct res_handle* handle) {
  103600:	55                   	push   %ebp
  103601:	89 e5                	mov    %esp,%ebp
  103603:	83 ec 08             	sub    $0x8,%esp
  103606:	8b 45 08             	mov    0x8(%ebp),%eax
  103609:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(handle->filemode & FM_WRITE) vga_writers--;
  10360c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10360f:	8b 40 0c             	mov    0xc(%eax),%eax
  103612:	25 02 00 00 00       	and    $0x2,%eax
  103617:	3d 00 00 00 00       	cmp    $0x0,%eax
  10361c:	0f 84 0f 00 00 00    	je     103631 <ramfs_vga_close+0x31>
  103622:	a1 24 a4 10 00       	mov    0x10a424,%eax
  103627:	05 ff ff ff ff       	add    $0xffffffff,%eax
  10362c:	a3 24 a4 10 00       	mov    %eax,0x10a424

    free(handle);
  103631:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103634:	89 04 24             	mov    %eax,(%esp)
  103637:	e8 04 0b 00 00       	call   104140 <free>
  10363c:	b8 00 00 00 00       	mov    $0x0,%eax

    return 0;
  103641:	83 c4 08             	add    $0x8,%esp
  103644:	5d                   	pop    %ebp
  103645:	c3                   	ret    
  103646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10364d:	00 00 00 

00103650 <ramfs_vga_available>:

uint32_t ramfs_vga_writers() {
    return vga_writers;
}

uint32_t ramfs_vga_available(struct res_handle* handle) {
  103650:	55                   	push   %ebp
  103651:	89 e5                	mov    %esp,%ebp
  103653:	50                   	push   %eax
  103654:	8b 45 08             	mov    0x8(%ebp),%eax
  103657:	b9 06 00 00 00       	mov    $0x6,%ecx
  10365c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sizeof(struct vga_command);
  10365f:	89 c8                	mov    %ecx,%eax
  103661:	83 c4 04             	add    $0x4,%esp
  103664:	5d                   	pop    %ebp
  103665:	c3                   	ret    
  103666:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10366d:	00 00 00 

00103670 <ramfs_vga_create>:
}

struct res_kfile* ramfs_vga_create(uint32_t* args) {
  103670:	55                   	push   %ebp
  103671:	89 e5                	mov    %esp,%ebp
  103673:	83 ec 18             	sub    $0x18,%esp
  103676:	8b 45 08             	mov    0x8(%ebp),%eax
  103679:	b9 08 00 00 00       	mov    $0x8,%ecx
  10367e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return malloc(sizeof(struct res_kfile));
  103681:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103688:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10368b:	e8 e0 06 00 00       	call   103d70 <malloc>
  103690:	83 c4 18             	add    $0x18,%esp
  103693:	5d                   	pop    %ebp
  103694:	c3                   	ret    
  103695:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10369c:	00 00 00 00 

001036a0 <ramfs_vga_driver_struct>:
    .close     = ramfs_vga_close,
    .available = ramfs_vga_available,
    .drvname   = "VGA_CONTROL"
};

struct kfs_driver* ramfs_vga_driver_struct() {
  1036a0:	55                   	push   %ebp
  1036a1:	89 e5                	mov    %esp,%ebp
  1036a3:	8d 05 c4 71 10 00    	lea    0x1071c4,%eax
    return &vga_driver;
  1036a9:	5d                   	pop    %ebp
  1036aa:	c3                   	ret    
  1036ab:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001036b0 <ramfs_vga_writers>:
}

uint32_t ramfs_vga_writers() {
  1036b0:	55                   	push   %ebp
  1036b1:	89 e5                	mov    %esp,%ebp
    return vga_writers;
  1036b3:	a1 24 a4 10 00       	mov    0x10a424,%eax
  1036b8:	5d                   	pop    %ebp
  1036b9:	c3                   	ret    
  1036ba:	66 90                	xchg   %ax,%ax
  1036bc:	66 90                	xchg   %ax,%ax
  1036be:	66 90                	xchg   %ax,%ax

001036c0 <enableScheduling>:
struct task* first_task = 0;
struct task* current_task = 0;

int nextPID = 1;

void enableScheduling(void) {
  1036c0:	55                   	push   %ebp
  1036c1:	89 e5                	mov    %esp,%ebp
    schedulingEnabled = 1;
  1036c3:	c7 05 28 a4 10 00 01 	movl   $0x1,0x10a428
  1036ca:	00 00 00 
}
  1036cd:	5d                   	pop    %ebp
  1036ce:	c3                   	ret    
  1036cf:	90                   	nop

001036d0 <isSchedulingEnabled>:

uint32_t isSchedulingEnabled(void) {
  1036d0:	55                   	push   %ebp
  1036d1:	89 e5                	mov    %esp,%ebp
    return schedulingEnabled;
  1036d3:	a1 28 a4 10 00       	mov    0x10a428,%eax
  1036d8:	5d                   	pop    %ebp
  1036d9:	c3                   	ret    
  1036da:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001036e0 <get_current_task>:
}

struct task* get_current_task(void) {
  1036e0:	55                   	push   %ebp
  1036e1:	89 e5                	mov    %esp,%ebp
    return current_task;
  1036e3:	a1 30 a4 10 00       	mov    0x10a430,%eax
  1036e8:	5d                   	pop    %ebp
  1036e9:	c3                   	ret    
  1036ea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001036f0 <register_handle>:
}

uint32_t register_handle(struct res_handle* h) {
  1036f0:	55                   	push   %ebp
  1036f1:	89 e5                	mov    %esp,%ebp
  1036f3:	83 ec 18             	sub    $0x18,%esp
  1036f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1036f9:	b9 08 00 00 00       	mov    $0x8,%ecx
  1036fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct hl_node* old = current_task->handle_list;
  103701:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103706:	8b 40 28             	mov    0x28(%eax),%eax
  103709:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task->handle_list = malloc(sizeof(struct hl_node));
  10370c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  103713:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  103716:	e8 55 06 00 00       	call   103d70 <malloc>
  10371b:	b9 00 00 00 00       	mov    $0x0,%ecx
  103720:	8b 15 30 a4 10 00    	mov    0x10a430,%edx
  103726:	89 42 28             	mov    %eax,0x28(%edx)
    current_task->handle_list->next = old;
  103729:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10372c:	8b 15 30 a4 10 00    	mov    0x10a430,%edx
  103732:	8b 52 28             	mov    0x28(%edx),%edx
  103735:	89 42 04             	mov    %eax,0x4(%edx)
    current_task->handle_list->handle = h;
  103738:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10373b:	8b 15 30 a4 10 00    	mov    0x10a430,%edx
  103741:	8b 52 28             	mov    0x28(%edx),%edx
  103744:	89 02                	mov    %eax,(%edx)

    return 0;
  103746:	89 c8                	mov    %ecx,%eax
  103748:	83 c4 18             	add    $0x18,%esp
  10374b:	5d                   	pop    %ebp
  10374c:	c3                   	ret    
  10374d:	0f 1f 00             	nopl   (%eax)

00103750 <unregister_handle>:
}

uint32_t unregister_handle(struct res_handle* h) {
  103750:	55                   	push   %ebp
  103751:	89 e5                	mov    %esp,%ebp
  103753:	83 ec 18             	sub    $0x18,%esp
  103756:	8b 45 08             	mov    0x8(%ebp),%eax
  103759:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct hl_node* cur = current_task->handle_list;
  10375c:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103761:	8b 40 28             	mov    0x28(%eax),%eax
  103764:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(h == 0) return 2;
  103767:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  10376e:	0f 85 0c 00 00 00    	jne    103780 <unregister_handle+0x30>
  103774:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
  10377b:	e9 b4 00 00 00       	jmp    103834 <unregister_handle+0xe4>
    if(cur == 0) return 1;
  103780:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103787:	0f 85 0c 00 00 00    	jne    103799 <unregister_handle+0x49>
  10378d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  103794:	e9 9b 00 00 00       	jmp    103834 <unregister_handle+0xe4>

    if(cur->handle == h) {
  103799:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10379c:	8b 00                	mov    (%eax),%eax
  10379e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1037a1:	0f 85 26 00 00 00    	jne    1037cd <unregister_handle+0x7d>
        current_task->handle_list = cur->next;
  1037a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037aa:	8b 40 04             	mov    0x4(%eax),%eax
  1037ad:	8b 0d 30 a4 10 00    	mov    0x10a430,%ecx
  1037b3:	89 41 28             	mov    %eax,0x28(%ecx)
        free(cur);
  1037b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037b9:	89 04 24             	mov    %eax,(%esp)
  1037bc:	e8 7f 09 00 00       	call   104140 <free>

        return 0;
  1037c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1037c8:	e9 67 00 00 00       	jmp    103834 <unregister_handle+0xe4>
    }

    while(cur != 0) {
  1037cd:	e9 00 00 00 00       	jmp    1037d2 <unregister_handle+0x82>
  1037d2:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1037d9:	0f 84 4e 00 00 00    	je     10382d <unregister_handle+0xdd>
        if(cur->next->handle == h) {
  1037df:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037e2:	8b 40 04             	mov    0x4(%eax),%eax
  1037e5:	8b 00                	mov    (%eax),%eax
  1037e7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  1037ea:	0f 85 2f 00 00 00    	jne    10381f <unregister_handle+0xcf>
            void* next = cur->next;
  1037f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037f3:	8b 40 04             	mov    0x4(%eax),%eax
  1037f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
            cur->next =  cur->next->next;
  1037f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1037fc:	8b 40 04             	mov    0x4(%eax),%eax
  1037ff:	8b 40 04             	mov    0x4(%eax),%eax
  103802:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103805:	89 41 04             	mov    %eax,0x4(%ecx)

            free(next);
  103808:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10380b:	89 04 24             	mov    %eax,(%esp)
  10380e:	e8 2d 09 00 00       	call   104140 <free>

            return 0;
  103813:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10381a:	e9 15 00 00 00       	jmp    103834 <unregister_handle+0xe4>
        }

        cur = cur->next;
  10381f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103822:	8b 40 04             	mov    0x4(%eax),%eax
  103825:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  103828:	e9 a5 ff ff ff       	jmp    1037d2 <unregister_handle+0x82>

    return 3;
  10382d:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)
}
  103834:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103837:	83 c4 18             	add    $0x18,%esp
  10383a:	5d                   	pop    %ebp
  10383b:	c3                   	ret    
  10383c:	0f 1f 40 00          	nopl   0x0(%eax)

00103840 <schedule_exception>:

struct cpu_state* schedule_exception(struct cpu_state* cpu) {
  103840:	55                   	push   %ebp
  103841:	89 e5                	mov    %esp,%ebp
  103843:	56                   	push   %esi
  103844:	83 ec 34             	sub    $0x34,%esp
  103847:	8b 45 08             	mov    0x8(%ebp),%eax
  10384a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (current_task == first_task && current_task->next == 0) {
  10384d:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103852:	3b 05 2c a4 10 00    	cmp    0x10a42c,%eax
  103858:	0f 85 71 00 00 00    	jne    1038cf <schedule_exception+0x8f>
  10385e:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103863:	81 78 08 00 00 00 00 	cmpl   $0x0,0x8(%eax)
  10386a:	0f 85 5f 00 00 00    	jne    1038cf <schedule_exception+0x8f>
  103870:	b8 04 00 00 00       	mov    $0x4,%eax
        //Only one process is running, which just crashed. Stop system.
        setclr(0x04);
  103875:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10387c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10387f:	e8 ac cc ff ff       	call   100530 <setclr>
  103884:	8d 05 93 84 10 00    	lea    0x108493,%eax
        kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n",
  10388a:	8b 0d 30 a4 10 00    	mov    0x10a430,%ecx
  103890:	8b 09                	mov    (%ecx),%ecx
  103892:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103895:	8b 52 1c             	mov    0x1c(%edx),%edx
  103898:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10389b:	8b 76 20             	mov    0x20(%esi),%esi
  10389e:	89 04 24             	mov    %eax,(%esp)
  1038a1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1038a5:	89 54 24 08          	mov    %edx,0x8(%esp)
  1038a9:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1038ad:	e8 9e cc ff ff       	call   100550 <kprintf>
  1038b2:	8d 0d c7 84 10 00    	lea    0x1084c7,%ecx
                current_task->PID, cpu->intr, cpu->error);
        show_cod(cpu, "Last task crashed. Terminating kernel...");
  1038b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1038bb:	89 14 24             	mov    %edx,(%esp)
  1038be:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1038c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1038c5:	e8 a6 ca ff ff       	call   100370 <show_cod>
    } else {
  1038ca:	e9 88 00 00 00       	jmp    103957 <schedule_exception+0x117>
  1038cf:	b8 04 00 00 00       	mov    $0x4,%eax
        //Potential security leaks available in following code.
        setclr(0x04);
  1038d4:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1038db:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1038de:	e8 4d cc ff ff       	call   100530 <setclr>
  1038e3:	8d 05 93 84 10 00    	lea    0x108493,%eax
        kprintf("\n Terminated task (PID=%d) due to exception %x:%x \n",
  1038e9:	8b 0d 30 a4 10 00    	mov    0x10a430,%ecx
  1038ef:	8b 09                	mov    (%ecx),%ecx
  1038f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1038f4:	8b 52 1c             	mov    0x1c(%edx),%edx
  1038f7:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1038fa:	8b 76 20             	mov    0x20(%esi),%esi
  1038fd:	89 04 24             	mov    %eax,(%esp)
  103900:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103904:	89 54 24 08          	mov    %edx,0x8(%esp)
  103908:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10390c:	e8 3f cc ff ff       	call   100550 <kprintf>
  103911:	8d 0d c9 82 10 00    	lea    0x1082c9,%ecx
                current_task->PID, cpu->intr, cpu->error);
        kprintf("\n");
  103917:	89 0c 24             	mov    %ecx,(%esp)
  10391a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10391d:	e8 2e cc ff ff       	call   100550 <kprintf>
        show_dump(cpu);
  103922:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103925:	89 0c 24             	mov    %ecx,(%esp)
  103928:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10392b:	e8 b0 ca ff ff       	call   1003e0 <show_dump>
  103930:	b8 07 00 00 00       	mov    $0x7,%eax
        setclr(0x07);
  103935:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  10393c:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10393f:	e8 ec cb ff ff       	call   100530 <setclr>

        return terminate_current(cpu);
  103944:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103947:	89 04 24             	mov    %eax,(%esp)
  10394a:	e8 21 00 00 00       	call   103970 <terminate_current>
  10394f:	89 45 f8             	mov    %eax,-0x8(%ebp)
  103952:	e9 06 00 00 00       	jmp    10395d <schedule_exception+0x11d>
    }
    return cpu;
  103957:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10395a:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  10395d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103960:	83 c4 34             	add    $0x34,%esp
  103963:	5e                   	pop    %esi
  103964:	5d                   	pop    %ebp
  103965:	c3                   	ret    
  103966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10396d:	00 00 00 

00103970 <terminate_current>:

struct cpu_state* terminate_current(struct cpu_state* cpu) {
  103970:	55                   	push   %ebp
  103971:	89 e5                	mov    %esp,%ebp
  103973:	83 ec 18             	sub    $0x18,%esp
  103976:	8b 45 08             	mov    0x8(%ebp),%eax
  103979:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct task* next = current_task->next;
  10397c:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103981:	8b 40 08             	mov    0x8(%eax),%eax
  103984:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* prev = current_task->prev;
  103987:	a1 30 a4 10 00       	mov    0x10a430,%eax
  10398c:	8b 40 0c             	mov    0xc(%eax),%eax
  10398f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //TODO: free resources here

    if (current_task == first_task) {
  103992:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103997:	3b 05 2c a4 10 00    	cmp    0x10a42c,%eax
  10399d:	0f 85 0d 00 00 00    	jne    1039b0 <terminate_current+0x40>
        first_task = current_task->next;
  1039a3:	a1 30 a4 10 00       	mov    0x10a430,%eax
  1039a8:	8b 40 08             	mov    0x8(%eax),%eax
  1039ab:	a3 2c a4 10 00       	mov    %eax,0x10a42c
    }

    if (next != 0) {
  1039b0:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1039b7:	0f 84 09 00 00 00    	je     1039c6 <terminate_current+0x56>
        next->prev = prev;
  1039bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1039c0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1039c3:	89 41 0c             	mov    %eax,0xc(%ecx)
    }

    if (prev != 0) {
  1039c6:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1039cd:	0f 84 09 00 00 00    	je     1039dc <terminate_current+0x6c>
        prev->next = next;
  1039d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1039d6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1039d9:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    //TODO: handle if all tasks are closed

    if (next == 0)
  1039dc:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1039e3:	0f 85 08 00 00 00    	jne    1039f1 <terminate_current+0x81>
        next = first_task;
  1039e9:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  1039ee:	89 45 f8             	mov    %eax,-0x8(%ebp)

    current_task = next;
  1039f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1039f4:	a3 30 a4 10 00       	mov    %eax,0x10a430

    if(current_task == 0) {
  1039f9:	81 3d 30 a4 10 00 00 	cmpl   $0x0,0x10a430
  103a00:	00 00 00 
  103a03:	0f 85 15 00 00 00    	jne    103a1e <terminate_current+0xae>
  103a09:	8d 05 f0 84 10 00    	lea    0x1084f0,%eax
        show_cod(cpu, "Last task terminated.");
  103a0f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103a12:	89 0c 24             	mov    %ecx,(%esp)
  103a15:	89 44 24 04          	mov    %eax,0x4(%esp)
  103a19:	e8 52 c9 ff ff       	call   100370 <show_cod>
    }

    vmm_activate_pagedir(current_task->phys_pdir);
  103a1e:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103a23:	8b 40 14             	mov    0x14(%eax),%eax
  103a26:	89 04 24             	mov    %eax,(%esp)
  103a29:	e8 e2 26 00 00       	call   106110 <vmm_activate_pagedir>
    return current_task->cpuState;
  103a2e:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103a33:	8b 40 04             	mov    0x4(%eax),%eax
  103a36:	83 c4 18             	add    $0x18,%esp
  103a39:	5d                   	pop    %ebp
  103a3a:	c3                   	ret    
  103a3b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00103a40 <fork_task_state>:
}

void fork_task_state(struct task* new_task) {
  103a40:	55                   	push   %ebp
  103a41:	89 e5                	mov    %esp,%ebp
  103a43:	83 ec 18             	sub    $0x18,%esp
  103a46:	8b 45 08             	mov    0x8(%ebp),%eax
  103a49:	b9 38 00 00 00       	mov    $0x38,%ecx
  103a4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    new_task->user_stack_bottom = current_task->user_stack_bottom;
  103a51:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103a56:	8b 40 10             	mov    0x10(%eax),%eax
  103a59:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103a5c:	89 42 10             	mov    %eax,0x10(%edx)

    memcpy(new_task->cpuState, current_task->cpuState,
  103a5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a62:	8b 40 04             	mov    0x4(%eax),%eax
  103a65:	8b 15 30 a4 10 00    	mov    0x10a430,%edx
  103a6b:	8b 52 04             	mov    0x4(%edx),%edx
  103a6e:	89 04 24             	mov    %eax,(%esp)
  103a71:	89 54 24 04          	mov    %edx,0x4(%esp)
  103a75:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103a7c:	00 
  103a7d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103a80:	e8 bb 09 00 00       	call   104440 <memcpy>
            sizeof(struct cpu_state));

    new_task->cpuState->eax = 0;
  103a85:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103a88:	8b 40 04             	mov    0x4(%eax),%eax
  103a8b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
  103a91:	83 c4 18             	add    $0x18,%esp
  103a94:	5d                   	pop    %ebp
  103a95:	c3                   	ret    
  103a96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  103a9d:	00 00 00 

00103aa0 <init_task>:

struct task* init_task(uint32_t task_pagedir, void* entry) {
  103aa0:	55                   	push   %ebp
  103aa1:	89 e5                	mov    %esp,%ebp
  103aa3:	83 ec 68             	sub    $0x68,%esp
  103aa6:	8b 45 0c             	mov    0xc(%ebp),%eax
  103aa9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103aac:	ba 2c 00 00 00       	mov    $0x2c,%edx
  103ab1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103ab4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct task* ntask = malloc(sizeof(struct task));
  103ab7:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
  103abe:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  103ac1:	e8 aa 02 00 00       	call   103d70 <malloc>
  103ac6:	b9 38 00 00 00       	mov    $0x38,%ecx
  103acb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ntask->cpuState = malloc(sizeof(struct cpu_state));
  103ace:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  103ad5:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  103ad8:	e8 93 02 00 00       	call   103d70 <malloc>
  103add:	b9 00 e0 ff ff       	mov    $0xffffe000,%ecx
  103ae2:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103ae5:	89 42 04             	mov    %eax,0x4(%edx)

    ntask->phys_pdir = task_pagedir;
  103ae8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103aeb:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103aee:	89 42 14             	mov    %eax,0x14(%edx)
    ntask->user_stack_bottom = (void*) 0xFFFFE000;
  103af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103af4:	89 48 10             	mov    %ecx,0x10(%eax)
    ntask->PID = nextPID++;
  103af7:	a1 e0 71 10 00       	mov    0x1071e0,%eax
  103afc:	89 c1                	mov    %eax,%ecx
  103afe:	81 c1 01 00 00 00    	add    $0x1,%ecx
  103b04:	89 0d e0 71 10 00    	mov    %ecx,0x1071e0
  103b0a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103b0d:	89 01                	mov    %eax,(%ecx)

    ntask->stdin  = 0;
  103b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b12:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    ntask->stdout = 0;
  103b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b1c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    ntask->stderr = 0;
  103b23:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b26:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)

    ntask->next = (void*) 0;
  103b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b30:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    ntask->prev = (void*) 0;
  103b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b3a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    if (first_task == 0) {
  103b41:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  103b48:	00 00 00 
  103b4b:	0f 85 0d 00 00 00    	jne    103b5e <init_task+0xbe>
        first_task = ntask;
  103b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b54:	a3 2c a4 10 00       	mov    %eax,0x10a42c
    } else {
  103b59:	e9 1f 00 00 00       	jmp    103b7d <init_task+0xdd>
        ntask->next = first_task;
  103b5e:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  103b63:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103b66:	89 41 08             	mov    %eax,0x8(%ecx)
        first_task->prev = ntask;
  103b69:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b6c:	8b 0d 2c a4 10 00    	mov    0x10a42c,%ecx
  103b72:	89 41 0c             	mov    %eax,0xc(%ecx)
        first_task = ntask;
  103b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103b78:	a3 2c a4 10 00       	mov    %eax,0x10a42c
    }

    uint32_t rest_pdir = vmm_get_current_pagedir();
  103b7d:	e8 4e 1a 00 00       	call   1055d0 <vmm_get_current_pagedir>
  103b82:	89 45 f0             	mov    %eax,-0x10(%ebp)
    vmm_activate_pagedir(task_pagedir);
  103b85:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103b88:	89 04 24             	mov    %eax,(%esp)
  103b8b:	e8 80 25 00 00       	call   106110 <vmm_activate_pagedir>

    if (entry != 0) { //entry == 0 means that this will be forked
  103b90:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103b97:	0f 84 21 00 00 00    	je     103bbe <init_task+0x11e>
  103b9d:	b8 00 00 00 00       	mov    $0x0,%eax
        vmm_alloc_addr(ntask->user_stack_bottom, 0);
  103ba2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103ba5:	8b 49 10             	mov    0x10(%ecx),%ecx
  103ba8:	89 0c 24             	mov    %ecx,(%esp)
  103bab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103bb2:	00 
  103bb3:	89 45 ac             	mov    %eax,-0x54(%ebp)
  103bb6:	e8 55 24 00 00       	call   106010 <vmm_alloc_addr>
  103bbb:	89 45 a8             	mov    %eax,-0x58(%ebp)
  103bbe:	b8 38 00 00 00       	mov    $0x38,%eax
  103bc3:	8d 4d b8             	lea    -0x48(%ebp),%ecx
    }

    struct cpu_state nstate = { .eax = 0, .ebx = 0, .ecx = 0, .edx = 0,
  103bc6:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  103bcd:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  103bd4:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  103bdb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  103be2:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  103be9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
  103bf0:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
  103bf7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  103bfe:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  103c05:	8b 55 f8             	mov    -0x8(%ebp),%edx
  103c08:	89 55 dc             	mov    %edx,-0x24(%ebp)
  103c0b:	c7 45 e0 1b 00 00 00 	movl   $0x1b,-0x20(%ebp)
  103c12:	c7 45 e4 00 02 00 00 	movl   $0x200,-0x1c(%ebp)
  103c19:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103c1c:	8b 52 10             	mov    0x10(%edx),%edx
  103c1f:	81 c2 00 10 00 00    	add    $0x1000,%edx
  103c25:	89 55 e8             	mov    %edx,-0x18(%ebp)
  103c28:	c7 45 ec 23 00 00 00 	movl   $0x23,-0x14(%ebp)
            /* Ring-3-Segmentregister */
            .cs = 0x18 | 0x03, .ss = 0x20 | 0x03,

            .eflags = 0x200, };

    memcpy(ntask->cpuState, &nstate, sizeof(struct cpu_state));
  103c2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
  103c32:	8b 52 04             	mov    0x4(%edx),%edx
  103c35:	89 14 24             	mov    %edx,(%esp)
  103c38:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103c3c:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103c43:	00 
  103c44:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  103c47:	e8 f4 07 00 00       	call   104440 <memcpy>

    vmm_activate_pagedir(rest_pdir);
  103c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103c4f:	89 04 24             	mov    %eax,(%esp)
  103c52:	e8 b9 24 00 00       	call   106110 <vmm_activate_pagedir>

    return ntask;
  103c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103c5a:	83 c4 68             	add    $0x68,%esp
  103c5d:	5d                   	pop    %ebp
  103c5e:	c3                   	ret    
  103c5f:	90                   	nop

00103c60 <save_cpu_state>:
}

void save_cpu_state(struct cpu_state* cpu) {
  103c60:	55                   	push   %ebp
  103c61:	89 e5                	mov    %esp,%ebp
  103c63:	83 ec 18             	sub    $0x18,%esp
  103c66:	8b 45 08             	mov    0x8(%ebp),%eax
  103c69:	b9 38 00 00 00       	mov    $0x38,%ecx
  103c6e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memcpy(current_task->cpuState, cpu, sizeof(struct cpu_state));
  103c71:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103c76:	8b 40 04             	mov    0x4(%eax),%eax
  103c79:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103c7c:	89 04 24             	mov    %eax,(%esp)
  103c7f:	89 54 24 04          	mov    %edx,0x4(%esp)
  103c83:	c7 44 24 08 38 00 00 	movl   $0x38,0x8(%esp)
  103c8a:	00 
  103c8b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  103c8e:	e8 ad 07 00 00       	call   104440 <memcpy>
}
  103c93:	83 c4 18             	add    $0x18,%esp
  103c96:	5d                   	pop    %ebp
  103c97:	c3                   	ret    
  103c98:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  103c9f:	00 

00103ca0 <schedule>:

struct cpu_state* schedule(struct cpu_state* cpu) {
  103ca0:	55                   	push   %ebp
  103ca1:	89 e5                	mov    %esp,%ebp
  103ca3:	83 ec 18             	sub    $0x18,%esp
  103ca6:	8b 45 08             	mov    0x8(%ebp),%eax
  103ca9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (first_task != 0 && schedulingEnabled) {
  103cac:	81 3d 2c a4 10 00 00 	cmpl   $0x0,0x10a42c
  103cb3:	00 00 00 
  103cb6:	0f 84 9d 00 00 00    	je     103d59 <schedule+0xb9>
  103cbc:	81 3d 28 a4 10 00 00 	cmpl   $0x0,0x10a428
  103cc3:	00 00 00 
  103cc6:	0f 84 8d 00 00 00    	je     103d59 <schedule+0xb9>
        if (current_task == 0) {
  103ccc:	81 3d 30 a4 10 00 00 	cmpl   $0x0,0x10a430
  103cd3:	00 00 00 
  103cd6:	0f 85 2a 00 00 00    	jne    103d06 <schedule+0x66>
            current_task = first_task;
  103cdc:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  103ce1:	a3 30 a4 10 00       	mov    %eax,0x10a430
            vmm_activate_pagedir(current_task->phys_pdir);
  103ce6:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103ceb:	8b 40 14             	mov    0x14(%eax),%eax
  103cee:	89 04 24             	mov    %eax,(%esp)
  103cf1:	e8 1a 24 00 00       	call   106110 <vmm_activate_pagedir>
            return current_task->cpuState;
  103cf6:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103cfb:	8b 40 04             	mov    0x4(%eax),%eax
  103cfe:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103d01:	e9 59 00 00 00       	jmp    103d5f <schedule+0xbf>
        }

        struct task* next = current_task->next;
  103d06:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103d0b:	8b 40 08             	mov    0x8(%eax),%eax
  103d0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (next == 0)
  103d11:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103d18:	0f 85 08 00 00 00    	jne    103d26 <schedule+0x86>
            next = first_task;
  103d1e:	a1 2c a4 10 00       	mov    0x10a42c,%eax
  103d23:	89 45 f4             	mov    %eax,-0xc(%ebp)

        save_cpu_state(cpu);
  103d26:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d29:	89 04 24             	mov    %eax,(%esp)
  103d2c:	e8 2f ff ff ff       	call   103c60 <save_cpu_state>

        current_task = next;
  103d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103d34:	a3 30 a4 10 00       	mov    %eax,0x10a430
        vmm_activate_pagedir(current_task->phys_pdir);
  103d39:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103d3e:	8b 40 14             	mov    0x14(%eax),%eax
  103d41:	89 04 24             	mov    %eax,(%esp)
  103d44:	e8 c7 23 00 00       	call   106110 <vmm_activate_pagedir>
        return current_task->cpuState;
  103d49:	a1 30 a4 10 00       	mov    0x10a430,%eax
  103d4e:	8b 40 04             	mov    0x4(%eax),%eax
  103d51:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103d54:	e9 06 00 00 00       	jmp    103d5f <schedule+0xbf>
    }
    return cpu;
  103d59:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103d5c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  103d5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103d62:	83 c4 18             	add    $0x18,%esp
  103d65:	5d                   	pop    %ebp
  103d66:	c3                   	ret    
  103d67:	66 90                	xchg   %ax,%ax
  103d69:	66 90                	xchg   %ax,%ax
  103d6b:	66 90                	xchg   %ax,%ax
  103d6d:	66 90                	xchg   %ax,%ax
  103d6f:	90                   	nop

00103d70 <malloc>:
    }

    append_to_list(&first_free, tf);
}

void* malloc(size_t size) {
  103d70:	55                   	push   %ebp
  103d71:	89 e5                	mov    %esp,%ebp
  103d73:	83 ec 38             	sub    $0x38,%esp
  103d76:	8b 45 08             	mov    0x8(%ebp),%eax
  103d79:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(size == 0) return 0;
  103d7c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  103d83:	0f 85 0c 00 00 00    	jne    103d95 <malloc+0x25>
  103d89:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  103d90:	e9 95 01 00 00       	jmp    103f2a <malloc+0x1ba>

    struct memory_node* last = 0;
  103d95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = first_free;
  103d9c:	a1 3c a4 10 00       	mov    0x10a43c,%eax
  103da1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  103da4:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103dab:	0f 84 27 00 00 00    	je     103dd8 <malloc+0x68>
        if (cur->size >= size) {
  103db1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103db4:	8b 00                	mov    (%eax),%eax
  103db6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103db9:	0f 82 05 00 00 00    	jb     103dc4 <malloc+0x54>
            break;
  103dbf:	e9 14 00 00 00       	jmp    103dd8 <malloc+0x68>
        }
        last = cur;
  103dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103dc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  103dca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103dcd:	8b 40 08             	mov    0x8(%eax),%eax
  103dd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  103dd3:	e9 cc ff ff ff       	jmp    103da4 <malloc+0x34>

    if (cur == 0) {
  103dd8:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103ddf:	0f 85 bc 00 00 00    	jne    103ea1 <malloc+0x131>
        uint32_t pgs = size / PAGESIZE;
  103de5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103de8:	c1 e8 0c             	shr    $0xc,%eax
  103deb:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if ((size % PAGESIZE) != 0)
  103dee:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103df1:	25 ff 0f 00 00       	and    $0xfff,%eax
  103df6:	3d 00 00 00 00       	cmp    $0x0,%eax
  103dfb:	0f 84 0b 00 00 00    	je     103e0c <malloc+0x9c>
            pgs++;
  103e01:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103e04:	05 01 00 00 00       	add    $0x1,%eax
  103e09:	89 45 ec             	mov    %eax,-0x14(%ebp)

        void* addr = vmm_alloc_cont(pgs);
  103e0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103e0f:	89 04 24             	mov    %eax,(%esp)
  103e12:	e8 a9 21 00 00       	call   105fc0 <vmm_alloc_cont>
  103e17:	89 45 e8             	mov    %eax,-0x18(%ebp)

        struct memory_node* fill = pop_unused_node();
  103e1a:	e8 81 04 00 00       	call   1042a0 <pop_unused_node>
  103e1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        fill->address = (uint32_t) addr;
  103e22:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103e25:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103e28:	89 41 04             	mov    %eax,0x4(%ecx)
        fill->size = (uint32_t) size;
  103e2b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103e2e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103e31:	89 01                	mov    %eax,(%ecx)

        if (pgs * PAGESIZE > size) {
  103e33:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103e36:	c1 e0 0c             	shl    $0xc,%eax
  103e39:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103e3c:	0f 86 3c 00 00 00    	jbe    103e7e <malloc+0x10e>
            struct memory_node* free = pop_unused_node();
  103e42:	e8 59 04 00 00       	call   1042a0 <pop_unused_node>
  103e47:	8d 0d 3c a4 10 00    	lea    0x10a43c,%ecx
  103e4d:	89 45 e0             	mov    %eax,-0x20(%ebp)

            free->address = fill->address + fill->size;
  103e50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103e53:	8b 40 04             	mov    0x4(%eax),%eax
  103e56:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  103e59:	03 02                	add    (%edx),%eax
  103e5b:	8b 55 e0             	mov    -0x20(%ebp),%edx
  103e5e:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = pgs * PAGESIZE - size;
  103e61:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103e64:	c1 e0 0c             	shl    $0xc,%eax
  103e67:	2b 45 f8             	sub    -0x8(%ebp),%eax
  103e6a:	8b 55 e0             	mov    -0x20(%ebp),%edx
  103e6d:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  103e6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103e72:	89 0c 24             	mov    %ecx,(%esp)
  103e75:	89 44 24 04          	mov    %eax,0x4(%esp)
  103e79:	e8 c2 00 00 00       	call   103f40 <append_to_list>
  103e7e:	8d 05 38 a4 10 00    	lea    0x10a438,%eax
        }

        append_to_list(&first_used, fill);
  103e84:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103e87:	89 04 24             	mov    %eax,(%esp)
  103e8a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103e8e:	e8 ad 00 00 00       	call   103f40 <append_to_list>

        return (void*) fill->address;
  103e93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103e96:	8b 40 04             	mov    0x4(%eax),%eax
  103e99:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103e9c:	e9 89 00 00 00       	jmp    103f2a <malloc+0x1ba>
  103ea1:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
    } else {
        uint32_t freesize = cur->size - size;
  103ea7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103eaa:	8b 09                	mov    (%ecx),%ecx
  103eac:	2b 4d f8             	sub    -0x8(%ebp),%ecx
  103eaf:	89 4d dc             	mov    %ecx,-0x24(%ebp)

        cur->size = size;
  103eb2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103eb5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103eb8:	89 0a                	mov    %ecx,(%edx)

        remove_from_list(&first_free, cur);
  103eba:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103ebd:	89 04 24             	mov    %eax,(%esp)
  103ec0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103ec4:	e8 a7 00 00 00       	call   103f70 <remove_from_list>
  103ec9:	8d 05 38 a4 10 00    	lea    0x10a438,%eax
        append_to_list(&first_used, cur);
  103ecf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  103ed2:	89 04 24             	mov    %eax,(%esp)
  103ed5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103ed9:	e8 62 00 00 00       	call   103f40 <append_to_list>

        if (freesize > 0) {
  103ede:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  103ee5:	0f 86 36 00 00 00    	jbe    103f21 <malloc+0x1b1>
            struct memory_node* free = pop_unused_node();
  103eeb:	e8 b0 03 00 00       	call   1042a0 <pop_unused_node>
  103ef0:	8d 0d 3c a4 10 00    	lea    0x10a43c,%ecx
  103ef6:	89 45 d8             	mov    %eax,-0x28(%ebp)

            free->address = cur->address + cur->size;
  103ef9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103efc:	8b 40 04             	mov    0x4(%eax),%eax
  103eff:	8b 55 f0             	mov    -0x10(%ebp),%edx
  103f02:	03 02                	add    (%edx),%eax
  103f04:	8b 55 d8             	mov    -0x28(%ebp),%edx
  103f07:	89 42 04             	mov    %eax,0x4(%edx)
            free->size = freesize;
  103f0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103f0d:	8b 55 d8             	mov    -0x28(%ebp),%edx
  103f10:	89 02                	mov    %eax,(%edx)

            append_to_list(&first_free, free);
  103f12:	8b 45 d8             	mov    -0x28(%ebp),%eax
  103f15:	89 0c 24             	mov    %ecx,(%esp)
  103f18:	89 44 24 04          	mov    %eax,0x4(%esp)
  103f1c:	e8 1f 00 00 00       	call   103f40 <append_to_list>
        }

        return (void*) cur->address;
  103f21:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103f24:	8b 40 04             	mov    0x4(%eax),%eax
  103f27:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  103f2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103f2d:	83 c4 38             	add    $0x38,%esp
  103f30:	5d                   	pop    %ebp
  103f31:	c3                   	ret    
  103f32:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103f39:	1f 84 00 00 00 00 00 

00103f40 <append_to_list>:
        cur = cur->next;
    }
}

static void append_to_list(struct memory_node** root,
        struct memory_node* element) {
  103f40:	55                   	push   %ebp
  103f41:	89 e5                	mov    %esp,%ebp
  103f43:	83 ec 08             	sub    $0x8,%esp
  103f46:	8b 45 0c             	mov    0xc(%ebp),%eax
  103f49:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103f4c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103f4f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    element->next = *root;
  103f52:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103f55:	8b 00                	mov    (%eax),%eax
  103f57:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  103f5a:	89 41 08             	mov    %eax,0x8(%ecx)
    *root = element;
  103f5d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103f60:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103f63:	89 01                	mov    %eax,(%ecx)
}
  103f65:	83 c4 08             	add    $0x8,%esp
  103f68:	5d                   	pop    %ebp
  103f69:	c3                   	ret    
  103f6a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00103f70 <remove_from_list>:
struct memory_node* first_unused = 0;
struct memory_node* first_used = 0;
struct memory_node* first_free = 0;

static void remove_from_list(struct memory_node** root,
        struct memory_node* element) {
  103f70:	55                   	push   %ebp
  103f71:	89 e5                	mov    %esp,%ebp
  103f73:	83 ec 10             	sub    $0x10,%esp
  103f76:	8b 45 0c             	mov    0xc(%ebp),%eax
  103f79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103f7c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  103f7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    struct memory_node* last = 0;
  103f82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    struct memory_node* cur = *root;
  103f89:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103f8c:	8b 00                	mov    (%eax),%eax
  103f8e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  103f91:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  103f98:	0f 84 4e 00 00 00    	je     103fec <remove_from_list+0x7c>
        if (cur == element) {
  103f9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fa1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103fa4:	0f 85 2e 00 00 00    	jne    103fd8 <remove_from_list+0x68>
            if (last == 0) {
  103faa:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  103fb1:	0f 85 10 00 00 00    	jne    103fc7 <remove_from_list+0x57>
                *root = cur->next;
  103fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fba:	8b 40 08             	mov    0x8(%eax),%eax
  103fbd:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103fc0:	89 01                	mov    %eax,(%ecx)
                return;
  103fc2:	e9 25 00 00 00       	jmp    103fec <remove_from_list+0x7c>
            } else {
                last->next = cur->next;
  103fc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fca:	8b 40 08             	mov    0x8(%eax),%eax
  103fcd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  103fd0:	89 41 08             	mov    %eax,0x8(%ecx)
                return;
  103fd3:	e9 14 00 00 00       	jmp    103fec <remove_from_list+0x7c>
            }
        }
        last = cur;
  103fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  103fde:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fe1:	8b 40 08             	mov    0x8(%eax),%eax
  103fe4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  103fe7:	e9 a5 ff ff ff       	jmp    103f91 <remove_from_list+0x21>
}
  103fec:	83 c4 10             	add    $0x10,%esp
  103fef:	5d                   	pop    %ebp
  103ff0:	c3                   	ret    
  103ff1:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  103ff8:	0f 1f 84 00 00 00 00 
  103fff:	00 

00104000 <calloc>:

        return (void*) cur->address;
    }
}

void* calloc(size_t num, size_t size) {
  104000:	55                   	push   %ebp
  104001:	89 e5                	mov    %esp,%ebp
  104003:	83 ec 28             	sub    $0x28,%esp
  104006:	8b 45 0c             	mov    0xc(%ebp),%eax
  104009:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10400c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10400f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t gsize = num * size;
  104012:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104015:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  104019:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void* p = malloc(gsize);
  10401c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10401f:	89 04 24             	mov    %eax,(%esp)
  104022:	e8 49 fd ff ff       	call   103d70 <malloc>
  104027:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (p != 0) {
  10402a:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104031:	0f 84 22 00 00 00    	je     104059 <calloc+0x59>
  104037:	b8 00 00 00 00       	mov    $0x0,%eax
        memset(p, 0, gsize);
  10403c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10403f:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104042:	89 0c 24             	mov    %ecx,(%esp)
  104045:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10404c:	00 
  10404d:	89 54 24 08          	mov    %edx,0x8(%esp)
  104051:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104054:	e8 87 03 00 00       	call   1043e0 <memset>
    }

    return p;
  104059:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10405c:	83 c4 28             	add    $0x28,%esp
  10405f:	5d                   	pop    %ebp
  104060:	c3                   	ret    
  104061:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  104068:	0f 1f 84 00 00 00 00 
  10406f:	00 

00104070 <realloc>:
}

void* realloc(void* ptr, size_t size) {
  104070:	55                   	push   %ebp
  104071:	89 e5                	mov    %esp,%ebp
  104073:	83 ec 28             	sub    $0x28,%esp
  104076:	8b 45 0c             	mov    0xc(%ebp),%eax
  104079:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10407c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10407f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct memory_node* last = 0;
  104082:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct memory_node* cur = first_used;
  104089:	a1 38 a4 10 00       	mov    0x10a438,%eax
  10408e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (cur != 0) {
  104091:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  104098:	0f 84 8e 00 00 00    	je     10412c <realloc+0xbc>
        if (cur->address == (uint32_t) ptr) {
  10409e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1040a1:	8b 40 04             	mov    0x4(%eax),%eax
  1040a4:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1040a7:	39 c8                	cmp    %ecx,%eax
  1040a9:	0f 85 69 00 00 00    	jne    104118 <realloc+0xa8>
            if (size == 0) {
  1040af:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1040b6:	0f 85 17 00 00 00    	jne    1040d3 <realloc+0x63>
                free(ptr);
  1040bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1040bf:	89 04 24             	mov    %eax,(%esp)
  1040c2:	e8 79 00 00 00       	call   104140 <free>
                return 0;
  1040c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1040ce:	e9 60 00 00 00       	jmp    104133 <realloc+0xc3>
            } else {
                void* new = malloc(size);
  1040d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1040d6:	89 04 24             	mov    %eax,(%esp)
  1040d9:	e8 92 fc ff ff       	call   103d70 <malloc>
  1040de:	89 45 e8             	mov    %eax,-0x18(%ebp)
                memcpy(new, (void*) cur->address, cur->size);
  1040e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1040e4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1040e7:	8b 49 04             	mov    0x4(%ecx),%ecx
  1040ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1040ed:	8b 12                	mov    (%edx),%edx
  1040ef:	89 04 24             	mov    %eax,(%esp)
  1040f2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1040f6:	89 54 24 08          	mov    %edx,0x8(%esp)
  1040fa:	e8 41 03 00 00       	call   104440 <memcpy>
                free((void*) cur->address);
  1040ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104102:	8b 40 04             	mov    0x4(%eax),%eax
  104105:	89 04 24             	mov    %eax,(%esp)
  104108:	e8 33 00 00 00       	call   104140 <free>

                return new;
  10410d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104110:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104113:	e9 1b 00 00 00       	jmp    104133 <realloc+0xc3>
            }
        }
        last = cur;
  104118:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10411b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cur = cur->next;
  10411e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104121:	8b 40 08             	mov    0x8(%eax),%eax
  104124:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
  104127:	e9 65 ff ff ff       	jmp    104091 <realloc+0x21>
    return 0;
  10412c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104133:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104136:	83 c4 28             	add    $0x28,%esp
  104139:	5d                   	pop    %ebp
  10413a:	c3                   	ret    
  10413b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00104140 <free>:

void free(void* ptr) {
  104140:	55                   	push   %ebp
  104141:	89 e5                	mov    %esp,%ebp
  104143:	83 ec 18             	sub    $0x18,%esp
  104146:	8b 45 08             	mov    0x8(%ebp),%eax
  104149:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct memory_node* last = 0;
  10414c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct memory_node* cur = first_used;
  104153:	a1 38 a4 10 00       	mov    0x10a438,%eax
  104158:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (cur != 0) {
  10415b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104162:	0f 84 35 00 00 00    	je     10419d <free+0x5d>
        if (cur->address == (uint32_t) ptr) {
  104168:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10416b:	8b 40 04             	mov    0x4(%eax),%eax
  10416e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104171:	39 c8                	cmp    %ecx,%eax
  104173:	0f 85 10 00 00 00    	jne    104189 <free+0x49>
            merge_into_frees(cur);
  104179:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10417c:	89 04 24             	mov    %eax,(%esp)
  10417f:	e8 2c 00 00 00       	call   1041b0 <merge_into_frees>
            break;
  104184:	e9 14 00 00 00       	jmp    10419d <free+0x5d>
        }
        last = cur;
  104189:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10418c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        cur = cur->next;
  10418f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104192:	8b 40 08             	mov    0x8(%eax),%eax
  104195:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
  104198:	e9 be ff ff ff       	jmp    10415b <free+0x1b>
}
  10419d:	83 c4 18             	add    $0x18,%esp
  1041a0:	5d                   	pop    %ebp
  1041a1:	c3                   	ret    
  1041a2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1041a9:	1f 84 00 00 00 00 00 

001041b0 <merge_into_frees>:
    }

    return ret;
}

static void merge_into_frees(struct memory_node* tf) {
  1041b0:	55                   	push   %ebp
  1041b1:	89 e5                	mov    %esp,%ebp
  1041b3:	56                   	push   %esi
  1041b4:	83 ec 14             	sub    $0x14,%esp
  1041b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1041ba:	8d 0d 38 a4 10 00    	lea    0x10a438,%ecx
  1041c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    remove_from_list(&first_used, tf);
  1041c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1041c6:	89 0c 24             	mov    %ecx,(%esp)
  1041c9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1041cd:	e8 9e fd ff ff       	call   103f70 <remove_from_list>

    struct memory_node* last;
    struct memory_node* cur;

    editedList: last = 0;
  1041d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    cur = first_free;
  1041d9:	a1 3c a4 10 00       	mov    0x10a43c,%eax
  1041de:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (cur != 0) {
  1041e1:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1041e8:	0f 84 92 00 00 00    	je     104280 <merge_into_frees+0xd0>
        if (cur->address + cur->size == tf->address) {
  1041ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1041f1:	8b 40 04             	mov    0x4(%eax),%eax
  1041f4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1041f7:	03 01                	add    (%ecx),%eax
  1041f9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1041fc:	3b 41 04             	cmp    0x4(%ecx),%eax
  1041ff:	0f 85 26 00 00 00    	jne    10422b <merge_into_frees+0x7b>
  104205:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
            tf->address = cur->address;
  10420b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10420e:	8b 49 04             	mov    0x4(%ecx),%ecx
  104211:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104214:	89 4a 04             	mov    %ecx,0x4(%edx)
            remove_from_list(&first_free, cur);
  104217:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10421a:	89 04 24             	mov    %eax,(%esp)
  10421d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104221:	e8 4a fd ff ff       	call   103f70 <remove_from_list>
            goto editedList;
  104226:	e9 a7 ff ff ff       	jmp    1041d2 <merge_into_frees+0x22>
        }

        if (cur->address == tf->address + tf->size) {
  10422b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10422e:	8b 40 04             	mov    0x4(%eax),%eax
  104231:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104234:	8b 49 04             	mov    0x4(%ecx),%ecx
  104237:	8b 55 f8             	mov    -0x8(%ebp),%edx
  10423a:	03 0a                	add    (%edx),%ecx
  10423c:	39 c8                	cmp    %ecx,%eax
  10423e:	0f 85 28 00 00 00    	jne    10426c <merge_into_frees+0xbc>
  104244:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax
            tf->size += cur->size;
  10424a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10424d:	8b 09                	mov    (%ecx),%ecx
  10424f:	8b 55 f8             	mov    -0x8(%ebp),%edx
  104252:	8b 32                	mov    (%edx),%esi
  104254:	01 ce                	add    %ecx,%esi
  104256:	89 32                	mov    %esi,(%edx)
            remove_from_list(&first_free, cur);
  104258:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10425b:	89 04 24             	mov    %eax,(%esp)
  10425e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104262:	e8 09 fd ff ff       	call   103f70 <remove_from_list>
            goto editedList;
  104267:	e9 66 ff ff ff       	jmp    1041d2 <merge_into_frees+0x22>
        }

        last = cur;
  10426c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10426f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        cur = cur->next;
  104272:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104275:	8b 40 08             	mov    0x8(%eax),%eax
  104278:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
  10427b:	e9 61 ff ff ff       	jmp    1041e1 <merge_into_frees+0x31>
  104280:	8d 05 3c a4 10 00    	lea    0x10a43c,%eax

    append_to_list(&first_free, tf);
  104286:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104289:	89 04 24             	mov    %eax,(%esp)
  10428c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104290:	e8 ab fc ff ff       	call   103f40 <append_to_list>
}
  104295:	83 c4 14             	add    $0x14,%esp
  104298:	5e                   	pop    %esi
  104299:	5d                   	pop    %ebp
  10429a:	c3                   	ret    
  10429b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001042a0 <pop_unused_node>:
    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}

static struct memory_node* pop_unused_node() {
  1042a0:	55                   	push   %ebp
  1042a1:	89 e5                	mov    %esp,%ebp
  1042a3:	83 ec 08             	sub    $0x8,%esp
  1042a6:	8d 05 34 a4 10 00    	lea    0x10a434,%eax
    struct memory_node* ret = pop_from_list(&first_unused);
  1042ac:	89 04 24             	mov    %eax,(%esp)
  1042af:	e8 3c 00 00 00       	call   1042f0 <pop_from_list>
  1042b4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (ret == 0) {
  1042b7:	81 7d fc 00 00 00 00 	cmpl   $0x0,-0x4(%ebp)
  1042be:	0f 85 1b 00 00 00    	jne    1042df <pop_unused_node+0x3f>
        allocate_unused_nodes();
  1042c4:	e8 77 00 00 00       	call   104340 <allocate_unused_nodes>
  1042c9:	8d 05 34 a4 10 00    	lea    0x10a434,%eax
        ret = pop_from_list(&first_unused);
  1042cf:	89 04 24             	mov    %eax,(%esp)
  1042d2:	e8 19 00 00 00       	call   1042f0 <pop_from_list>
  1042d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  1042da:	e9 d8 ff ff ff       	jmp    1042b7 <pop_unused_node+0x17>

    return ret;
  1042df:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1042e2:	83 c4 08             	add    $0x8,%esp
  1042e5:	5d                   	pop    %ebp
  1042e6:	c3                   	ret    
  1042e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1042ee:	00 00 

001042f0 <pop_from_list>:
        struct memory_node* element) {
    element->next = *root;
    *root = element;
}

static struct memory_node* pop_from_list(struct memory_node** root) {
  1042f0:	55                   	push   %ebp
  1042f1:	89 e5                	mov    %esp,%ebp
  1042f3:	83 ec 18             	sub    $0x18,%esp
  1042f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1042f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (*root == 0)
  1042fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1042ff:	81 38 00 00 00 00    	cmpl   $0x0,(%eax)
  104305:	0f 85 0c 00 00 00    	jne    104317 <pop_from_list+0x27>
        return 0;
  10430b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104312:	e9 20 00 00 00       	jmp    104337 <pop_from_list+0x47>
    struct memory_node* pop = *root;
  104317:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10431a:	8b 00                	mov    (%eax),%eax
  10431c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    remove_from_list(root, pop);
  10431f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104322:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104325:	89 04 24             	mov    %eax,(%esp)
  104328:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10432c:	e8 3f fc ff ff       	call   103f70 <remove_from_list>
    return pop;
  104331:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104334:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104337:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10433a:	83 c4 18             	add    $0x18,%esp
  10433d:	5d                   	pop    %ebp
  10433e:	c3                   	ret    
  10433f:	90                   	nop

00104340 <allocate_unused_nodes>:

static void allocate_unused_nodes() {
  104340:	55                   	push   %ebp
  104341:	89 e5                	mov    %esp,%ebp
  104343:	83 ec 28             	sub    $0x28,%esp
  104346:	b8 01 00 00 00       	mov    $0x1,%eax
    struct memory_node* new_nodes = vmm_alloc_cont(1);
  10434b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104352:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104355:	e8 66 1c 00 00       	call   105fc0 <vmm_alloc_cont>
  10435a:	b9 00 00 00 00       	mov    $0x0,%ecx
  10435f:	ba 00 10 00 00       	mov    $0x1000,%edx
  104364:	89 45 fc             	mov    %eax,-0x4(%ebp)
    memset(new_nodes, 0, PAGESIZE);
  104367:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10436a:	89 04 24             	mov    %eax,(%esp)
  10436d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104374:	00 
  104375:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  10437c:	00 
  10437d:	89 55 f0             	mov    %edx,-0x10(%ebp)
  104380:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104383:	e8 58 00 00 00       	call   1043e0 <memset>

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  104388:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  10438f:	81 7d f8 55 01 00 00 	cmpl   $0x155,-0x8(%ebp)
  104396:	0f 83 30 00 00 00    	jae    1043cc <allocate_unused_nodes+0x8c>
  10439c:	8d 05 34 a4 10 00    	lea    0x10a434,%eax
        append_to_list(&first_unused, &(new_nodes[i]));
  1043a2:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1043a5:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1043a8:	69 c9 0c 00 00 00    	imul   $0xc,%ecx,%ecx
  1043ae:	01 ca                	add    %ecx,%edx
  1043b0:	89 04 24             	mov    %eax,(%esp)
  1043b3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1043b7:	e8 84 fb ff ff       	call   103f40 <append_to_list>

static void allocate_unused_nodes() {
    struct memory_node* new_nodes = vmm_alloc_cont(1);
    memset(new_nodes, 0, PAGESIZE);

    for (uint32_t i = 1; i < (PAGESIZE / sizeof(struct memory_node)); i++) {
  1043bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1043bf:	05 01 00 00 00       	add    $0x1,%eax
  1043c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1043c7:	e9 c3 ff ff ff       	jmp    10438f <allocate_unused_nodes+0x4f>
        append_to_list(&first_unused, &(new_nodes[i]));
    }
}
  1043cc:	83 c4 28             	add    $0x28,%esp
  1043cf:	5d                   	pop    %ebp
  1043d0:	c3                   	ret    
  1043d1:	66 90                	xchg   %ax,%ax
  1043d3:	66 90                	xchg   %ax,%ax
  1043d5:	66 90                	xchg   %ax,%ax
  1043d7:	66 90                	xchg   %ax,%ax
  1043d9:	66 90                	xchg   %ax,%ax
  1043db:	66 90                	xchg   %ax,%ax
  1043dd:	66 90                	xchg   %ax,%ax
  1043df:	90                   	nop

001043e0 <memset>:
#include "vmm.h"
#include "string.h"
#include "stdlib.h"

void* memset(void* buf, int c, size_t n) {
  1043e0:	55                   	push   %ebp
  1043e1:	89 e5                	mov    %esp,%ebp
  1043e3:	83 ec 10             	sub    $0x10,%esp
  1043e6:	8b 45 10             	mov    0x10(%ebp),%eax
  1043e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1043ec:	8b 55 08             	mov    0x8(%ebp),%edx
  1043ef:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1043f2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1043f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* p = buf;
  1043f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1043fb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (n--) {
  1043fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104401:	89 c1                	mov    %eax,%ecx
  104403:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  104409:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10440c:	3d 00 00 00 00       	cmp    $0x0,%eax
  104411:	0f 84 1a 00 00 00    	je     104431 <memset+0x51>
        *p++ = c;
  104417:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10441a:	88 c1                	mov    %al,%cl
  10441c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10441f:	89 c2                	mov    %eax,%edx
  104421:	81 c2 01 00 00 00    	add    $0x1,%edx
  104427:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10442a:	88 08                	mov    %cl,(%eax)
    }
  10442c:	e9 cd ff ff ff       	jmp    1043fe <memset+0x1e>

    return buf;
  104431:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104434:	83 c4 10             	add    $0x10,%esp
  104437:	5d                   	pop    %ebp
  104438:	c3                   	ret    
  104439:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00104440 <memcpy>:
}

void* memcpy(void* dest, const void* src, size_t n) {
  104440:	55                   	push   %ebp
  104441:	89 e5                	mov    %esp,%ebp
  104443:	83 ec 14             	sub    $0x14,%esp
  104446:	8b 45 10             	mov    0x10(%ebp),%eax
  104449:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10444c:	8b 55 08             	mov    0x8(%ebp),%edx
  10444f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104452:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104455:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned char* d = dest;
  104458:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10445b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const unsigned char* s = src;
  10445e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104461:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (n--) {
  104464:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104467:	89 c1                	mov    %eax,%ecx
  104469:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  10446f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  104472:	3d 00 00 00 00       	cmp    $0x0,%eax
  104477:	0f 84 25 00 00 00    	je     1044a2 <memcpy+0x62>
        *(d++) = *(s++);
  10447d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104480:	89 c1                	mov    %eax,%ecx
  104482:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104488:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10448b:	8a 10                	mov    (%eax),%dl
  10448d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104490:	89 c1                	mov    %eax,%ecx
  104492:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104498:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10449b:	88 10                	mov    %dl,(%eax)
    }
  10449d:	e9 c2 ff ff ff       	jmp    104464 <memcpy+0x24>

    return dest;
  1044a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1044a5:	83 c4 14             	add    $0x14,%esp
  1044a8:	5d                   	pop    %ebp
  1044a9:	c3                   	ret    
  1044aa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001044b0 <memcmp>:
}

int memcmp(const void* ptr1, const void* ptr2, size_t num) {
  1044b0:	55                   	push   %ebp
  1044b1:	89 e5                	mov    %esp,%ebp
  1044b3:	83 ec 1c             	sub    $0x1c,%esp
  1044b6:	8b 45 10             	mov    0x10(%ebp),%eax
  1044b9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1044bc:	8b 55 08             	mov    0x8(%ebp),%edx
  1044bf:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1044c2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  1044c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (ptr1 == 0)
  1044c8:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1044cf:	0f 85 0c 00 00 00    	jne    1044e1 <memcmp+0x31>
        return -1;
  1044d5:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
  1044dc:	e9 a7 00 00 00       	jmp    104588 <memcmp+0xd8>
    if (ptr2 == 0)
  1044e1:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  1044e8:	0f 85 0c 00 00 00    	jne    1044fa <memcmp+0x4a>
        return 1;
  1044ee:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  1044f5:	e9 8e 00 00 00       	jmp    104588 <memcmp+0xd8>
    if (num == 0)
  1044fa:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104501:	0f 85 0c 00 00 00    	jne    104513 <memcmp+0x63>
        return 0;
  104507:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10450e:	e9 75 00 00 00       	jmp    104588 <memcmp+0xd8>

    const uint8_t* pa = ptr1;
  104513:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104516:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const uint8_t* pb = ptr2;
  104519:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10451c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (uint32_t i = 0; i < num; i++) {
  10451f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  104526:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104529:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10452c:	0f 83 4f 00 00 00    	jae    104581 <memcmp+0xd1>
        if (pa[i] != pb[i]) {
  104532:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104535:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104538:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  10453c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10453f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104542:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  104546:	39 c8                	cmp    %ecx,%eax
  104548:	0f 84 1e 00 00 00    	je     10456c <memcmp+0xbc>
            return pa[i] - pb[i];
  10454e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104551:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104554:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  104558:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10455b:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10455e:	0f b6 0c 0a          	movzbl (%edx,%ecx,1),%ecx
  104562:	29 c8                	sub    %ecx,%eax
  104564:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104567:	e9 1c 00 00 00       	jmp    104588 <memcmp+0xd8>
        }
    }
  10456c:	e9 00 00 00 00       	jmp    104571 <memcmp+0xc1>
        return 0;

    const uint8_t* pa = ptr1;
    const uint8_t* pb = ptr2;

    for (uint32_t i = 0; i < num; i++) {
  104571:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104574:	05 01 00 00 00       	add    $0x1,%eax
  104579:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10457c:	e9 a5 ff ff ff       	jmp    104526 <memcmp+0x76>
        if (pa[i] != pb[i]) {
            return pa[i] - pb[i];
        }
    }
    return 0;
  104581:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104588:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10458b:	83 c4 1c             	add    $0x1c,%esp
  10458e:	5d                   	pop    %ebp
  10458f:	c3                   	ret    

00104590 <strcmp>:

int strcmp(const char* str1, const char* str2) {
  104590:	55                   	push   %ebp
  104591:	89 e5                	mov    %esp,%ebp
  104593:	56                   	push   %esi
  104594:	83 ec 24             	sub    $0x24,%esp
  104597:	8b 45 0c             	mov    0xc(%ebp),%eax
  10459a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10459d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1045a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int l1 = strlen(str1);
  1045a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1045a6:	89 e1                	mov    %esp,%ecx
  1045a8:	89 01                	mov    %eax,(%ecx)
  1045aa:	e8 61 00 00 00       	call   104610 <strlen>
  1045af:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int l2 = strlen(str2);
  1045b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1045b5:	89 e1                	mov    %esp,%ecx
  1045b7:	89 01                	mov    %eax,(%ecx)
  1045b9:	e8 52 00 00 00       	call   104610 <strlen>
  1045be:	89 45 ec             	mov    %eax,-0x14(%ebp)
    l1 = l1 < l2 ? l1 : l2;
  1045c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1045c4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1045c7:	0f 8d 0b 00 00 00    	jge    1045d8 <strcmp+0x48>
  1045cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1045d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1045d3:	e9 06 00 00 00       	jmp    1045de <strcmp+0x4e>
  1045d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1045db:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1045de:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1045e1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    return memcmp(str1, str2, l1 * sizeof(char));
  1045e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1045e7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1045ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1045ed:	c1 e2 00             	shl    $0x0,%edx
  1045f0:	89 e6                	mov    %esp,%esi
  1045f2:	89 56 08             	mov    %edx,0x8(%esi)
  1045f5:	89 4e 04             	mov    %ecx,0x4(%esi)
  1045f8:	89 06                	mov    %eax,(%esi)
  1045fa:	e8 b1 fe ff ff       	call   1044b0 <memcmp>
  1045ff:	83 c4 24             	add    $0x24,%esp
  104602:	5e                   	pop    %esi
  104603:	5d                   	pop    %ebp
  104604:	c3                   	ret    
  104605:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  10460c:	00 00 00 00 

00104610 <strlen>:
}

unsigned int strlen(const char* str) {
  104610:	55                   	push   %ebp
  104611:	89 e5                	mov    %esp,%ebp
  104613:	83 ec 0c             	sub    $0xc,%esp
  104616:	8b 45 08             	mov    0x8(%ebp),%eax
  104619:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (str == 0)
  10461c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104623:	0f 85 0c 00 00 00    	jne    104635 <strlen+0x25>
        return 0;
  104629:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104630:	e9 37 00 00 00       	jmp    10466c <strlen+0x5c>
    int i;
    for (i = 0; str[i] != '\0'; i++)
  104635:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10463c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10463f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104642:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  104646:	3d 00 00 00 00       	cmp    $0x0,%eax
  10464b:	0f 84 15 00 00 00    	je     104666 <strlen+0x56>
  104651:	e9 00 00 00 00       	jmp    104656 <strlen+0x46>
  104656:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104659:	05 01 00 00 00       	add    $0x1,%eax
  10465e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104661:	e9 d6 ff ff ff       	jmp    10463c <strlen+0x2c>
        ;
    return i;
  104666:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104669:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10466c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10466f:	83 c4 0c             	add    $0xc,%esp
  104672:	5d                   	pop    %ebp
  104673:	c3                   	ret    
  104674:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10467b:	00 00 00 00 00 

00104680 <strcpy>:

char* strcpy(char* dest, const char* src) {
  104680:	55                   	push   %ebp
  104681:	89 e5                	mov    %esp,%ebp
  104683:	56                   	push   %esi
  104684:	83 ec 24             	sub    $0x24,%esp
  104687:	8b 45 0c             	mov    0xc(%ebp),%eax
  10468a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10468d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104690:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memcpy(dest, src, strlen(src) * sizeof(char) + 1);
  104693:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104696:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104699:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10469c:	89 e6                	mov    %esp,%esi
  10469e:	89 16                	mov    %edx,(%esi)
  1046a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1046a3:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1046a6:	e8 65 ff ff ff       	call   104610 <strlen>
  1046ab:	c1 e0 00             	shl    $0x0,%eax
  1046ae:	05 01 00 00 00       	add    $0x1,%eax
  1046b3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1046b6:	89 0c 24             	mov    %ecx,(%esp)
  1046b9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1046bc:	89 54 24 04          	mov    %edx,0x4(%esp)
  1046c0:	89 44 24 08          	mov    %eax,0x8(%esp)
  1046c4:	e8 77 fd ff ff       	call   104440 <memcpy>
    return dest;
  1046c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1046cc:	83 c4 24             	add    $0x24,%esp
  1046cf:	5e                   	pop    %esi
  1046d0:	5d                   	pop    %ebp
  1046d1:	c3                   	ret    
  1046d2:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1046d9:	1f 84 00 00 00 00 00 

001046e0 <strclone>:
}

char* strclone(char* str) {
  1046e0:	55                   	push   %ebp
  1046e1:	89 e5                	mov    %esp,%ebp
  1046e3:	83 ec 18             	sub    $0x18,%esp
  1046e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1046e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* ret = malloc(sizeof(char) * strlen(str) + 1);
  1046ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1046ef:	89 e1                	mov    %esp,%ecx
  1046f1:	89 01                	mov    %eax,(%ecx)
  1046f3:	e8 18 ff ff ff       	call   104610 <strlen>
  1046f8:	c1 e0 00             	shl    $0x0,%eax
  1046fb:	05 01 00 00 00       	add    $0x1,%eax
  104700:	89 04 24             	mov    %eax,(%esp)
  104703:	e8 68 f6 ff ff       	call   103d70 <malloc>
  104708:	89 45 f8             	mov    %eax,-0x8(%ebp)
    strcpy(ret, str);
  10470b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10470e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104711:	89 e2                	mov    %esp,%edx
  104713:	89 4a 04             	mov    %ecx,0x4(%edx)
  104716:	89 02                	mov    %eax,(%edx)
  104718:	e8 63 ff ff ff       	call   104680 <strcpy>

    return ret;
  10471d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104720:	89 45 f4             	mov    %eax,-0xc(%ebp)
  104723:	89 c8                	mov    %ecx,%eax
  104725:	83 c4 18             	add    $0x18,%esp
  104728:	5d                   	pop    %ebp
  104729:	c3                   	ret    
  10472a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104730 <strtok>:
}

char* sp = NULL; /* the start position of the string */

char* strtok(char* str, const char* delimiters) {
  104730:	55                   	push   %ebp
  104731:	89 e5                	mov    %esp,%ebp
  104733:	83 ec 18             	sub    $0x18,%esp
  104736:	8b 45 0c             	mov    0xc(%ebp),%eax
  104739:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10473c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10473f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(str != 0) {
  104742:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104749:	0f 84 22 00 00 00    	je     104771 <strtok+0x41>
        return strtoknc(strclone(str), delimiters);
  10474f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104752:	89 04 24             	mov    %eax,(%esp)
  104755:	e8 86 ff ff ff       	call   1046e0 <strclone>
  10475a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10475d:	89 04 24             	mov    %eax,(%esp)
  104760:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104764:	e8 37 00 00 00       	call   1047a0 <strtoknc>
  104769:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10476c:	e9 1e 00 00 00       	jmp    10478f <strtok+0x5f>
  104771:	b8 00 00 00 00       	mov    $0x0,%eax
    }
    return strtoknc(0, delimiters);
  104776:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104779:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104780:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104784:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104787:	e8 14 00 00 00       	call   1047a0 <strtoknc>
  10478c:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  10478f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104792:	83 c4 18             	add    $0x18,%esp
  104795:	5d                   	pop    %ebp
  104796:	c3                   	ret    
  104797:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10479e:	00 00 

001047a0 <strtoknc>:

char* strtoknc(char* str, const char* delimiters) {
  1047a0:	55                   	push   %ebp
  1047a1:	89 e5                	mov    %esp,%ebp
  1047a3:	83 ec 28             	sub    $0x28,%esp
  1047a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1047a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1047ac:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1047af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i = 0;
  1047b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int len = strlen(delimiters);
  1047b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1047bc:	89 e1                	mov    %esp,%ecx
  1047be:	89 01                	mov    %eax,(%ecx)
  1047c0:	e8 4b fe ff ff       	call   104610 <strlen>
  1047c5:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* check in the delimiters */
    if (len == 0)
  1047c8:	81 7d ec 00 00 00 00 	cmpl   $0x0,-0x14(%ebp)
  1047cf:	0f 85 0c 00 00 00    	jne    1047e1 <strtoknc+0x41>
        return 0;
  1047d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1047dc:	e9 80 01 00 00       	jmp    104961 <strtoknc+0x1c1>

    /* if the original string has nothing left */
    if (!str && !sp)
  1047e1:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  1047e8:	0f 85 1c 00 00 00    	jne    10480a <strtoknc+0x6a>
  1047ee:	81 3d 40 a4 10 00 00 	cmpl   $0x0,0x10a440
  1047f5:	00 00 00 
  1047f8:	0f 85 0c 00 00 00    	jne    10480a <strtoknc+0x6a>
        return 0;
  1047fe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104805:	e9 57 01 00 00       	jmp    104961 <strtoknc+0x1c1>

    /* initialize the sp during the first call */
    if (str && !sp)
  10480a:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104811:	0f 84 18 00 00 00    	je     10482f <strtoknc+0x8f>
  104817:	81 3d 40 a4 10 00 00 	cmpl   $0x0,0x10a440
  10481e:	00 00 00 
  104821:	0f 85 08 00 00 00    	jne    10482f <strtoknc+0x8f>
        sp = str;
  104827:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10482a:	a3 40 a4 10 00       	mov    %eax,0x10a440

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
  10482f:	a1 40 a4 10 00       	mov    0x10a440,%eax
  104834:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (1) {
        for (i = 0; i < len; i++) {
  104837:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10483e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104841:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  104844:	0f 8d 3d 00 00 00    	jge    104887 <strtoknc+0xe7>
            if (*p_start == delimiters[i]) {
  10484a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10484d:	0f be 00             	movsbl (%eax),%eax
  104850:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104853:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104856:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  10485a:	39 c8                	cmp    %ecx,%eax
  10485c:	0f 85 10 00 00 00    	jne    104872 <strtoknc+0xd2>
                p_start++;
  104862:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104865:	05 01 00 00 00       	add    $0x1,%eax
  10486a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                break;
  10486d:	e9 15 00 00 00       	jmp    104887 <strtoknc+0xe7>
            }
        }
  104872:	e9 00 00 00 00       	jmp    104877 <strtoknc+0xd7>
        sp = str;

    /* find the start of the substring, skip delimiters */
    char* p_start = sp;
    while (1) {
        for (i = 0; i < len; i++) {
  104877:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10487a:	05 01 00 00 00       	add    $0x1,%eax
  10487f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104882:	e9 b7 ff ff ff       	jmp    10483e <strtoknc+0x9e>
                p_start++;
                break;
            }
        }

        if (i == len) {
  104887:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10488a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10488d:	0f 85 0d 00 00 00    	jne    1048a0 <strtoknc+0x100>
            sp = p_start;
  104893:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104896:	a3 40 a4 10 00       	mov    %eax,0x10a440
            break;
  10489b:	e9 05 00 00 00       	jmp    1048a5 <strtoknc+0x105>
        }
    }
  1048a0:	e9 92 ff ff ff       	jmp    104837 <strtoknc+0x97>

    /* return NULL if nothing left */
    if (*sp == '\0') {
  1048a5:	a1 40 a4 10 00       	mov    0x10a440,%eax
  1048aa:	0f be 00             	movsbl (%eax),%eax
  1048ad:	3d 00 00 00 00       	cmp    $0x0,%eax
  1048b2:	0f 85 17 00 00 00    	jne    1048cf <strtoknc+0x12f>
        sp = NULL;
  1048b8:	c7 05 40 a4 10 00 00 	movl   $0x0,0x10a440
  1048bf:	00 00 00 
        return sp;
  1048c2:	a1 40 a4 10 00       	mov    0x10a440,%eax
  1048c7:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1048ca:	e9 92 00 00 00       	jmp    104961 <strtoknc+0x1c1>
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
  1048cf:	e9 00 00 00 00       	jmp    1048d4 <strtoknc+0x134>
  1048d4:	a1 40 a4 10 00       	mov    0x10a440,%eax
  1048d9:	0f be 00             	movsbl (%eax),%eax
  1048dc:	3d 00 00 00 00       	cmp    $0x0,%eax
  1048e1:	0f 84 74 00 00 00    	je     10495b <strtoknc+0x1bb>
        for (i = 0; i < len; i++) {
  1048e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1048ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1048f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1048f4:	0f 8d 3c 00 00 00    	jge    104936 <strtoknc+0x196>
            if (*sp == delimiters[i]) {
  1048fa:	a1 40 a4 10 00       	mov    0x10a440,%eax
  1048ff:	0f be 00             	movsbl (%eax),%eax
  104902:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104905:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104908:	0f be 0c 0a          	movsbl (%edx,%ecx,1),%ecx
  10490c:	39 c8                	cmp    %ecx,%eax
  10490e:	0f 85 0d 00 00 00    	jne    104921 <strtoknc+0x181>
                *sp = '\0';
  104914:	a1 40 a4 10 00       	mov    0x10a440,%eax
  104919:	c6 00 00             	movb   $0x0,(%eax)
                break;
  10491c:	e9 15 00 00 00       	jmp    104936 <strtoknc+0x196>
            }
        }
  104921:	e9 00 00 00 00       	jmp    104926 <strtoknc+0x186>
        return sp;
    }

    /* find the end of the substring, and replace the delimiter with null*/
    while (*sp != '\0') {
        for (i = 0; i < len; i++) {
  104926:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104929:	05 01 00 00 00       	add    $0x1,%eax
  10492e:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104931:	e9 b8 ff ff ff       	jmp    1048ee <strtoknc+0x14e>
                *sp = '\0';
                break;
            }
        }

        sp++;
  104936:	a1 40 a4 10 00       	mov    0x10a440,%eax
  10493b:	05 01 00 00 00       	add    $0x1,%eax
  104940:	a3 40 a4 10 00       	mov    %eax,0x10a440
        if (i < len)
  104945:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104948:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10494b:	0f 8d 05 00 00 00    	jge    104956 <strtoknc+0x1b6>
            break;
  104951:	e9 05 00 00 00       	jmp    10495b <strtoknc+0x1bb>
    }
  104956:	e9 79 ff ff ff       	jmp    1048d4 <strtoknc+0x134>

    return p_start;
  10495b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10495e:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  104961:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104964:	83 c4 28             	add    $0x28,%esp
  104967:	5d                   	pop    %ebp
  104968:	c3                   	ret    
  104969:	66 90                	xchg   %ax,%ax
  10496b:	66 90                	xchg   %ax,%ax
  10496d:	66 90                	xchg   %ax,%ax
  10496f:	90                   	nop

00104970 <vfs_create_dir>:
    }

    return child;
}

uint32_t vfs_create_dir(char* path) {
  104970:	55                   	push   %ebp
  104971:	89 e5                	mov    %esp,%ebp
  104973:	83 ec 08             	sub    $0x8,%esp
  104976:	8b 45 08             	mov    0x8(%ebp),%eax
  104979:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return vfs_create_path(path);
  10497c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10497f:	89 04 24             	mov    %eax,(%esp)
  104982:	e8 09 00 00 00       	call   104990 <vfs_create_path>
  104987:	83 c4 08             	add    $0x8,%esp
  10498a:	5d                   	pop    %ebp
  10498b:	c3                   	ret    
  10498c:	0f 1f 40 00          	nopl   0x0(%eax)

00104990 <vfs_create_path>:
    }

    return 1;
}

static int vfs_create_path(char* path) {
  104990:	55                   	push   %ebp
  104991:	89 e5                	mov    %esp,%ebp
  104993:	83 ec 38             	sub    $0x38,%esp
  104996:	8b 45 08             	mov    0x8(%ebp),%eax
  104999:	8d 0d df 85 10 00    	lea    0x1085df,%ecx
  10499f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = root;
  1049a2:	a1 44 a4 10 00       	mov    0x10a444,%eax
  1049a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  1049aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    int created = 0;
  1049b1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    sub = strtok(path, "/");
  1049b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1049bb:	89 04 24             	mov    %eax,(%esp)
  1049be:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1049c2:	e8 69 fd ff ff       	call   104730 <strtok>
  1049c7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  1049ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1049cd:	0f be 00             	movsbl (%eax),%eax
  1049d0:	3d 00 00 00 00       	cmp    $0x0,%eax
  1049d5:	0f 85 21 00 00 00    	jne    1049fc <vfs_create_path+0x6c>
  1049db:	b8 00 00 00 00       	mov    $0x0,%eax
  1049e0:	8d 0d df 85 10 00    	lea    0x1085df,%ecx
  1049e6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1049ed:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1049f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1049f4:	e8 37 fd ff ff       	call   104730 <strtok>
  1049f9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  1049fc:	e9 00 00 00 00       	jmp    104a01 <vfs_create_path+0x71>
  104a01:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104a08:	0f 84 e8 00 00 00    	je     104af6 <vfs_create_path+0x166>
    {
        child = vfs_find_node(parent, sub);
  104a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104a11:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104a14:	89 04 24             	mov    %eax,(%esp)
  104a17:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104a1b:	e8 90 0a 00 00       	call   1054b0 <vfs_find_node>
  104a20:	89 45 f0             	mov    %eax,-0x10(%ebp)

        if(child == 0) {
  104a23:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  104a2a:	0f 85 9a 00 00 00    	jne    104aca <vfs_create_path+0x13a>
  104a30:	b8 10 01 00 00       	mov    $0x110,%eax
            child = malloc(sizeof(struct res_node));
  104a35:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  104a3c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  104a3f:	e8 2c f3 ff ff       	call   103d70 <malloc>
  104a44:	89 45 f0             	mov    %eax,-0x10(%ebp)

            strcpy(child->name, sub);
  104a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104a4a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104a4d:	89 e2                	mov    %esp,%edx
  104a4f:	89 4a 04             	mov    %ecx,0x4(%edx)
  104a52:	89 02                	mov    %eax,(%edx)
  104a54:	e8 27 fc ff ff       	call   104680 <strcpy>
            child->res_type = RES_SUBDIR;
  104a59:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104a5c:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  104a63:	00 00 00 
            child->res_ptr = 0;
  104a66:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104a69:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  104a70:	00 00 00 

            created++;
  104a73:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104a76:	81 c1 01 00 00 00    	add    $0x1,%ecx
  104a7c:	89 4d ec             	mov    %ecx,-0x14(%ebp)

            if(vfs_insert_node(parent, child)) {
  104a7f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104a82:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104a85:	89 0c 24             	mov    %ecx,(%esp)
  104a88:	89 54 24 04          	mov    %edx,0x4(%esp)
  104a8c:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104a8f:	e8 ac 0a 00 00       	call   105540 <vfs_insert_node>
  104a94:	3d 00 00 00 00       	cmp    $0x0,%eax
  104a99:	0f 84 26 00 00 00    	je     104ac5 <vfs_create_path+0x135>
  104a9f:	b8 38 00 00 00       	mov    $0x38,%eax
                show_cod(malloc(sizeof(struct cpu_state)), "Tried to insert VFS node in non RES_SUBDIR parent");
  104aa4:	c7 04 24 38 00 00 00 	movl   $0x38,(%esp)
  104aab:	89 45 dc             	mov    %eax,-0x24(%ebp)
  104aae:	e8 bd f2 ff ff       	call   103d70 <malloc>
  104ab3:	8d 0d e1 85 10 00    	lea    0x1085e1,%ecx
  104ab9:	89 04 24             	mov    %eax,(%esp)
  104abc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104ac0:	e8 ab b8 ff ff       	call   100370 <show_cod>
            }
        }
  104ac5:	e9 00 00 00 00       	jmp    104aca <vfs_create_path+0x13a>
  104aca:	b8 00 00 00 00       	mov    $0x0,%eax
  104acf:	8d 0d df 85 10 00    	lea    0x1085df,%ecx

        parent = child;
  104ad5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104ad8:	89 55 f4             	mov    %edx,-0xc(%ebp)

        sub = strtok(0, "/");
  104adb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104ae2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104ae6:	89 45 d8             	mov    %eax,-0x28(%ebp)
  104ae9:	e8 42 fc ff ff       	call   104730 <strtok>
  104aee:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  104af1:	e9 0b ff ff ff       	jmp    104a01 <vfs_create_path+0x71>

    return created;
  104af6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104af9:	83 c4 38             	add    $0x38,%esp
  104afc:	5d                   	pop    %ebp
  104afd:	c3                   	ret    
  104afe:	66 90                	xchg   %ax,%ax

00104b00 <vfs_create_kfile>:

uint32_t vfs_create_dir(char* path) {
    return vfs_create_path(path);
}

uint32_t vfs_create_kfile(char* path, struct kfs_driver* driver, uint32_t* params) {
  104b00:	55                   	push   %ebp
  104b01:	89 e5                	mov    %esp,%ebp
  104b03:	83 ec 28             	sub    $0x28,%esp
  104b06:	8b 45 10             	mov    0x10(%ebp),%eax
  104b09:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104b0c:	8b 55 08             	mov    0x8(%ebp),%edx
  104b0f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104b12:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104b15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char* pathc = malloc(strlen(path) + 1);
  104b18:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104b1b:	89 e1                	mov    %esp,%ecx
  104b1d:	89 01                	mov    %eax,(%ecx)
  104b1f:	e8 ec fa ff ff       	call   104610 <strlen>
  104b24:	05 01 00 00 00       	add    $0x1,%eax
  104b29:	89 04 24             	mov    %eax,(%esp)
  104b2c:	e8 3f f2 ff ff       	call   103d70 <malloc>
  104b31:	89 45 f0             	mov    %eax,-0x10(%ebp)
    strcpy(pathc, path);
  104b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104b37:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104b3a:	89 e2                	mov    %esp,%edx
  104b3c:	89 4a 04             	mov    %ecx,0x4(%edx)
  104b3f:	89 02                	mov    %eax,(%edx)
  104b41:	e8 3a fb ff ff       	call   104680 <strcpy>

    uint32_t ret = vfs_create_path(pathc);
  104b46:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104b49:	89 0c 24             	mov    %ecx,(%esp)
  104b4c:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104b4f:	e8 3c fe ff ff       	call   104990 <vfs_create_path>
  104b54:	89 45 ec             	mov    %eax,-0x14(%ebp)

    static struct res_node* node;
    node = vfs_get_node(path);
  104b57:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104b5a:	89 04 24             	mov    %eax,(%esp)
  104b5d:	e8 4e 00 00 00       	call   104bb0 <vfs_get_node>
  104b62:	a3 50 a4 10 00       	mov    %eax,0x10a450

    node->res_type = RES_KERNDRV;
  104b67:	a1 50 a4 10 00       	mov    0x10a450,%eax
  104b6c:	c7 80 00 01 00 00 01 	movl   $0x1,0x100(%eax)
  104b73:	00 00 00 
    node->res_ptr = driver->create(params);
  104b76:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104b79:	8b 40 14             	mov    0x14(%eax),%eax
  104b7c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104b7f:	89 0c 24             	mov    %ecx,(%esp)
  104b82:	ff d0                	call   *%eax
  104b84:	8b 0d 50 a4 10 00    	mov    0x10a450,%ecx
  104b8a:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)
    ((struct res_kfile*) node->res_ptr)->driver = driver;
  104b90:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104b93:	8b 0d 50 a4 10 00    	mov    0x10a450,%ecx
  104b99:	8b 89 04 01 00 00    	mov    0x104(%ecx),%ecx
  104b9f:	89 41 04             	mov    %eax,0x4(%ecx)

    return ret;
  104ba2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104ba5:	83 c4 28             	add    $0x28,%esp
  104ba8:	5d                   	pop    %ebp
  104ba9:	c3                   	ret    
  104baa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104bb0 <vfs_get_node>:
    }

    return created;
}

static struct res_node* vfs_get_node(char* path) {
  104bb0:	55                   	push   %ebp
  104bb1:	89 e5                	mov    %esp,%ebp
  104bb3:	83 ec 28             	sub    $0x28,%esp
  104bb6:	8b 45 08             	mov    0x8(%ebp),%eax
  104bb9:	8d 0d df 85 10 00    	lea    0x1085df,%ecx
  104bbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char* sub;
    struct res_node* parent = root;
  104bc2:	a1 44 a4 10 00       	mov    0x10a444,%eax
  104bc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct res_node* child = 0;
  104bca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    sub = strtok(path, "/");
  104bd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104bd4:	89 04 24             	mov    %eax,(%esp)
  104bd7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104bdb:	e8 50 fb ff ff       	call   104730 <strtok>
  104be0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(sub[0] == 0) sub = strtok(0, "/");
  104be3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104be6:	0f be 00             	movsbl (%eax),%eax
  104be9:	3d 00 00 00 00       	cmp    $0x0,%eax
  104bee:	0f 85 21 00 00 00    	jne    104c15 <vfs_get_node+0x65>
  104bf4:	b8 00 00 00 00       	mov    $0x0,%eax
  104bf9:	8d 0d df 85 10 00    	lea    0x1085df,%ecx
  104bff:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104c06:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104c0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104c0d:	e8 1e fb ff ff       	call   104730 <strtok>
  104c12:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (sub != NULL)
  104c15:	e9 00 00 00 00       	jmp    104c1a <vfs_get_node+0x6a>
  104c1a:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104c21:	0f 84 41 00 00 00    	je     104c68 <vfs_get_node+0xb8>
    {
        child = vfs_find_node(parent, sub);
  104c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104c2a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104c2d:	89 04 24             	mov    %eax,(%esp)
  104c30:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104c34:	e8 77 08 00 00       	call   1054b0 <vfs_find_node>
  104c39:	b9 00 00 00 00       	mov    $0x0,%ecx
  104c3e:	8d 15 df 85 10 00    	lea    0x1085df,%edx
  104c44:	89 45 f0             	mov    %eax,-0x10(%ebp)
        parent = child;
  104c47:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        sub = strtok(0, "/");
  104c4d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104c54:	89 54 24 04          	mov    %edx,0x4(%esp)
  104c58:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  104c5b:	e8 d0 fa ff ff       	call   104730 <strtok>
  104c60:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
  104c63:	e9 b2 ff ff ff       	jmp    104c1a <vfs_get_node+0x6a>

    return child;
  104c68:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c6b:	83 c4 28             	add    $0x28,%esp
  104c6e:	5d                   	pop    %ebp
  104c6f:	c3                   	ret    

00104c70 <vfs_open>:
    ((struct res_kfile*) node->res_ptr)->driver = driver;

    return ret;
}

struct res_handle* vfs_open(char* path, uint32_t filemode) {
  104c70:	55                   	push   %ebp
  104c71:	89 e5                	mov    %esp,%ebp
  104c73:	83 ec 28             	sub    $0x28,%esp
  104c76:	8b 45 0c             	mov    0xc(%ebp),%eax
  104c79:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104c7c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104c7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    static struct res_node* node;

    node = vfs_get_node(path);
  104c82:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104c85:	89 04 24             	mov    %eax,(%esp)
  104c88:	e8 23 ff ff ff       	call   104bb0 <vfs_get_node>
  104c8d:	a3 54 a4 10 00       	mov    %eax,0x10a454

    if(node->res_type == RES_KERNDRV) {
  104c92:	a1 54 a4 10 00       	mov    0x10a454,%eax
  104c97:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  104c9e:	00 00 00 
  104ca1:	0f 85 34 00 00 00    	jne    104cdb <vfs_open+0x6b>
        struct res_kfile* kf = (struct res_kfile*)node->res_ptr;
  104ca7:	a1 54 a4 10 00       	mov    0x10a454,%eax
  104cac:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  104cb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct res_handle* handle = kf->driver->open(kf, filemode);
  104cb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104cb8:	8b 40 04             	mov    0x4(%eax),%eax
  104cbb:	8b 40 08             	mov    0x8(%eax),%eax
  104cbe:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104cc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104cc4:	89 0c 24             	mov    %ecx,(%esp)
  104cc7:	89 54 24 04          	mov    %edx,0x4(%esp)
  104ccb:	ff d0                	call   *%eax
  104ccd:	89 45 ec             	mov    %eax,-0x14(%ebp)

        return handle;
  104cd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104cd3:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104cd6:	e9 07 00 00 00       	jmp    104ce2 <vfs_open+0x72>
    }

    return 0;
  104cdb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104ce2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104ce5:	83 c4 28             	add    $0x28,%esp
  104ce8:	5d                   	pop    %ebp
  104ce9:	c3                   	ret    
  104cea:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104cf0 <vfs_close>:

uint32_t vfs_close(struct res_handle* handle) {
  104cf0:	55                   	push   %ebp
  104cf1:	89 e5                	mov    %esp,%ebp
  104cf3:	83 ec 18             	sub    $0x18,%esp
  104cf6:	8b 45 08             	mov    0x8(%ebp),%eax
  104cf9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle->res_type == RES_KERNDRV) {
  104cfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104cff:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  104d05:	0f 85 22 00 00 00    	jne    104d2d <vfs_close+0x3d>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  104d0b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104d0e:	8b 40 04             	mov    0x4(%eax),%eax
  104d11:	89 45 f4             	mov    %eax,-0xc(%ebp)

       return kf->driver->close(handle);
  104d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d17:	8b 40 04             	mov    0x4(%eax),%eax
  104d1a:	8b 40 0c             	mov    0xc(%eax),%eax
  104d1d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104d20:	89 0c 24             	mov    %ecx,(%esp)
  104d23:	ff d0                	call   *%eax
  104d25:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104d28:	e9 07 00 00 00       	jmp    104d34 <vfs_close+0x44>
    }

    return 0;
  104d2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104d34:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104d37:	83 c4 18             	add    $0x18,%esp
  104d3a:	5d                   	pop    %ebp
  104d3b:	c3                   	ret    
  104d3c:	0f 1f 40 00          	nopl   0x0(%eax)

00104d40 <vfs_read>:

uint32_t vfs_read(struct res_handle* handle, void* dest, uint32_t size, uint32_t count) {
  104d40:	55                   	push   %ebp
  104d41:	89 e5                	mov    %esp,%ebp
  104d43:	56                   	push   %esi
  104d44:	83 ec 34             	sub    $0x34,%esp
  104d47:	8b 45 14             	mov    0x14(%ebp),%eax
  104d4a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  104d4d:	8b 55 0c             	mov    0xc(%ebp),%edx
  104d50:	8b 75 08             	mov    0x8(%ebp),%esi
  104d53:	89 75 f4             	mov    %esi,-0xc(%ebp)
  104d56:	89 55 f0             	mov    %edx,-0x10(%ebp)
  104d59:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104d5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  104d5f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104d66:	0f 85 0c 00 00 00    	jne    104d78 <vfs_read+0x38>
  104d6c:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  104d73:	e9 94 00 00 00       	jmp    104e0c <vfs_read+0xcc>

    if(handle->res_type == RES_KERNDRV) {
  104d78:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d7b:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  104d81:	0f 85 7e 00 00 00    	jne    104e05 <vfs_read+0xc5>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  104d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104d8a:	8b 40 04             	mov    0x4(%eax),%eax
  104d8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rread(handle, dest, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  104d90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104d93:	8b 40 04             	mov    0x4(%eax),%eax
  104d96:	8b 00                	mov    (%eax),%eax
  104d98:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104d9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104d9e:	8b 75 ec             	mov    -0x14(%ebp),%esi
  104da1:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  104da5:	89 0c 24             	mov    %ecx,(%esp)
  104da8:	89 54 24 04          	mov    %edx,0x4(%esp)
  104dac:	89 74 24 08          	mov    %esi,0x8(%esp)
  104db0:	ff d0                	call   *%eax
  104db2:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  104db5:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  104dbc:	0f 85 1e 00 00 00    	jne    104de0 <vfs_read+0xa0>
           handle->position += size * count;
  104dc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104dc5:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  104dc9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104dcc:	8b 51 08             	mov    0x8(%ecx),%edx
  104dcf:	01 c2                	add    %eax,%edx
  104dd1:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  104dd4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  104ddb:	e9 2c 00 00 00       	jmp    104e0c <vfs_read+0xcc>
       }

       if(res == RW_BLOCK) {
  104de0:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  104de7:	0f 85 0c 00 00 00    	jne    104df9 <vfs_read+0xb9>
           return RW_BLOCK;
  104ded:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  104df4:	e9 13 00 00 00       	jmp    104e0c <vfs_read+0xcc>
       }

       return RW_ERR_DRIVER;
  104df9:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  104e00:	e9 07 00 00 00       	jmp    104e0c <vfs_read+0xcc>
    }

    return RW_ERR_VFS;
  104e05:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  104e0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104e0f:	83 c4 34             	add    $0x34,%esp
  104e12:	5e                   	pop    %esi
  104e13:	5d                   	pop    %ebp
  104e14:	c3                   	ret    
  104e15:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  104e1c:	00 00 00 00 

00104e20 <vfs_write>:

uint32_t vfs_write(struct res_handle* handle, void* src,  uint32_t size, uint32_t count) {
  104e20:	55                   	push   %ebp
  104e21:	89 e5                	mov    %esp,%ebp
  104e23:	56                   	push   %esi
  104e24:	83 ec 34             	sub    $0x34,%esp
  104e27:	8b 45 14             	mov    0x14(%ebp),%eax
  104e2a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  104e2d:	8b 55 0c             	mov    0xc(%ebp),%edx
  104e30:	8b 75 08             	mov    0x8(%ebp),%esi
  104e33:	89 75 f4             	mov    %esi,-0xc(%ebp)
  104e36:	89 55 f0             	mov    %edx,-0x10(%ebp)
  104e39:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104e3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(handle == 0) return RW_ERR_VFS;
  104e3f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104e46:	0f 85 0c 00 00 00    	jne    104e58 <vfs_write+0x38>
  104e4c:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
  104e53:	e9 95 00 00 00       	jmp    104eed <vfs_write+0xcd>

    if(handle->res_type == RES_KERNDRV) {
  104e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e5b:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  104e61:	0f 85 7f 00 00 00    	jne    104ee6 <vfs_write+0xc6>
       struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  104e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e6a:	8b 40 04             	mov    0x4(%eax),%eax
  104e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

       uint32_t res = kf->driver->rwrite(handle, src, size * count); //TODO it's not that easy... it shouldn't be size * count but instead count times size (for loop)
  104e70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104e73:	8b 40 04             	mov    0x4(%eax),%eax
  104e76:	8b 40 04             	mov    0x4(%eax),%eax
  104e79:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104e7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104e7f:	8b 75 ec             	mov    -0x14(%ebp),%esi
  104e82:	0f af 75 e8          	imul   -0x18(%ebp),%esi
  104e86:	89 0c 24             	mov    %ecx,(%esp)
  104e89:	89 54 24 04          	mov    %edx,0x4(%esp)
  104e8d:	89 74 24 08          	mov    %esi,0x8(%esp)
  104e91:	ff d0                	call   *%eax
  104e93:	89 45 e0             	mov    %eax,-0x20(%ebp)

       if(res == RW_OK) {
  104e96:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  104e9d:	0f 85 1e 00 00 00    	jne    104ec1 <vfs_write+0xa1>
           handle->position += size * count;
  104ea3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104ea6:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  104eaa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104ead:	8b 51 08             	mov    0x8(%ecx),%edx
  104eb0:	01 c2                	add    %eax,%edx
  104eb2:	89 51 08             	mov    %edx,0x8(%ecx)
           return RW_OK;
  104eb5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  104ebc:	e9 2c 00 00 00       	jmp    104eed <vfs_write+0xcd>
       }

       if(res == RW_BLOCK) {
  104ec1:	81 7d e0 01 00 00 00 	cmpl   $0x1,-0x20(%ebp)
  104ec8:	0f 85 0c 00 00 00    	jne    104eda <vfs_write+0xba>
           return RW_BLOCK;
  104ece:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  104ed5:	e9 13 00 00 00       	jmp    104eed <vfs_write+0xcd>
       }

       return RW_ERR_DRIVER;
  104eda:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%ebp)
  104ee1:	e9 07 00 00 00       	jmp    104eed <vfs_write+0xcd>
    }

    return RW_ERR_VFS;
  104ee6:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%ebp)
}
  104eed:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ef0:	83 c4 34             	add    $0x34,%esp
  104ef3:	5e                   	pop    %esi
  104ef4:	5d                   	pop    %ebp
  104ef5:	c3                   	ret    
  104ef6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  104efd:	00 00 00 

00104f00 <vfs_available>:

uint32_t vfs_available(struct res_handle* handle) {
  104f00:	55                   	push   %ebp
  104f01:	89 e5                	mov    %esp,%ebp
  104f03:	83 ec 18             	sub    $0x18,%esp
  104f06:	8b 45 08             	mov    0x8(%ebp),%eax
  104f09:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(handle == 0) return 0;
  104f0c:	81 7d f8 00 00 00 00 	cmpl   $0x0,-0x8(%ebp)
  104f13:	0f 85 0c 00 00 00    	jne    104f25 <vfs_available+0x25>
  104f19:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  104f20:	e9 38 00 00 00       	jmp    104f5d <vfs_available+0x5d>

    if(handle->res_type == RES_KERNDRV) {
  104f25:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f28:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  104f2e:	0f 85 22 00 00 00    	jne    104f56 <vfs_available+0x56>
        struct res_kfile* kf = (struct res_kfile*)handle->res_ptr;
  104f34:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f37:	8b 40 04             	mov    0x4(%eax),%eax
  104f3a:	89 45 f4             	mov    %eax,-0xc(%ebp)

        return kf->driver->available(handle);
  104f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104f40:	8b 40 04             	mov    0x4(%eax),%eax
  104f43:	8b 40 10             	mov    0x10(%eax),%eax
  104f46:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104f49:	89 0c 24             	mov    %ecx,(%esp)
  104f4c:	ff d0                	call   *%eax
  104f4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  104f51:	e9 07 00 00 00       	jmp    104f5d <vfs_available+0x5d>
    }

    return 0;
  104f56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104f60:	83 c4 18             	add    $0x18,%esp
  104f63:	5d                   	pop    %ebp
  104f64:	c3                   	ret    
  104f65:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  104f6c:	00 00 00 00 

00104f70 <vfs_exists>:

uint32_t vfs_exists(char* path) {
  104f70:	55                   	push   %ebp
  104f71:	89 e5                	mov    %esp,%ebp
  104f73:	83 ec 18             	sub    $0x18,%esp
  104f76:	8b 45 08             	mov    0x8(%ebp),%eax
  104f79:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(vfs_get_node(path) != 0) return 1;
  104f7c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104f7f:	89 04 24             	mov    %eax,(%esp)
  104f82:	e8 29 fc ff ff       	call   104bb0 <vfs_get_node>
  104f87:	3d 00 00 00 00       	cmp    $0x0,%eax
  104f8c:	0f 84 0c 00 00 00    	je     104f9e <vfs_exists+0x2e>
  104f92:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  104f99:	e9 07 00 00 00       	jmp    104fa5 <vfs_exists+0x35>
    return 0;
  104f9e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  104fa5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104fa8:	83 c4 18             	add    $0x18,%esp
  104fab:	5d                   	pop    %ebp
  104fac:	c3                   	ret    
  104fad:	0f 1f 00             	nopl   (%eax)

00104fb0 <vfs_seek>:

void vfs_seek(struct res_handle* handle, uint32_t offset, uint32_t origin) {
  104fb0:	55                   	push   %ebp
  104fb1:	89 e5                	mov    %esp,%ebp
  104fb3:	83 ec 0c             	sub    $0xc,%esp
  104fb6:	8b 45 10             	mov    0x10(%ebp),%eax
  104fb9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104fbc:	8b 55 08             	mov    0x8(%ebp),%edx
  104fbf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104fc2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104fc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(origin == SEEK_SET) {
  104fc8:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  104fcf:	0f 85 09 00 00 00    	jne    104fde <vfs_seek+0x2e>
        handle->position = offset;
  104fd5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104fd8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104fdb:	89 41 08             	mov    %eax,0x8(%ecx)
    }

    if(origin == SEEK_CUR) {
  104fde:	81 7d f4 01 00 00 00 	cmpl   $0x1,-0xc(%ebp)
  104fe5:	0f 85 0e 00 00 00    	jne    104ff9 <vfs_seek+0x49>
        handle->position += offset;
  104feb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104fee:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104ff1:	8b 51 08             	mov    0x8(%ecx),%edx
  104ff4:	01 c2                	add    %eax,%edx
  104ff6:	89 51 08             	mov    %edx,0x8(%ecx)
    }
}
  104ff9:	83 c4 0c             	add    $0xc,%esp
  104ffc:	5d                   	pop    %ebp
  104ffd:	c3                   	ret    
  104ffe:	66 90                	xchg   %ax,%ax

00105000 <vfs_exec>:

void vfs_exec(char* ip, char* args[], struct task* task) {
  105000:	55                   	push   %ebp
  105001:	89 e5                	mov    %esp,%ebp
  105003:	56                   	push   %esi
  105004:	81 ec 94 00 00 00    	sub    $0x94,%esp
  10500a:	8b 45 10             	mov    0x10(%ebp),%eax
  10500d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  105010:	8b 55 08             	mov    0x8(%ebp),%edx
  105013:	89 55 f8             	mov    %edx,-0x8(%ebp)
  105016:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  105019:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char* path = strclone(ip);
  10501c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10501f:	89 04 24             	mov    %eax,(%esp)
  105022:	e8 b9 f6 ff ff       	call   1046e0 <strclone>
  105027:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(vfs_exists(path)) {
  10502a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10502d:	89 04 24             	mov    %eax,(%esp)
  105030:	e8 3b ff ff ff       	call   104f70 <vfs_exists>
  105035:	3d 00 00 00 00       	cmp    $0x0,%eax
  10503a:	0f 84 eb 02 00 00    	je     10532b <vfs_exec+0x32b>
        uint32_t elf_mod_pdir;

        if(task == 0) {
  105040:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105047:	0f 85 35 00 00 00    	jne    105082 <vfs_exec+0x82>
            elf_mod_pdir = vmm_create_pagedir();
  10504d:	e8 de 0a 00 00       	call   105b30 <vmm_create_pagedir>
  105052:	b9 01 00 00 00       	mov    $0x1,%ecx
  105057:	89 45 e8             	mov    %eax,-0x18(%ebp)
            task = init_task(elf_mod_pdir, (void*)1);
  10505a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10505d:	89 04 24             	mov    %eax,(%esp)
  105060:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105064:	e8 37 ea ff ff       	call   103aa0 <init_task>
  105069:	8d 0d 06 85 10 00    	lea    0x108506,%ecx
  10506f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            kprintf("[exec] Initialized new task...\n");
  105072:	89 0c 24             	mov    %ecx,(%esp)
  105075:	e8 d6 b4 ff ff       	call   100550 <kprintf>
        }
  10507a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  10507d:	e9 1a 00 00 00       	jmp    10509c <vfs_exec+0x9c>
  105082:	8d 05 26 85 10 00    	lea    0x108526,%eax
        else
        {
            elf_mod_pdir = task->phys_pdir;
  105088:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10508b:	8b 49 14             	mov    0x14(%ecx),%ecx
  10508e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
            kprintf("[exec] Replacing old task...\n");
  105091:	89 04 24             	mov    %eax,(%esp)
  105094:	e8 b7 b4 ff ff       	call   100550 <kprintf>
  105099:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10509c:	b8 05 00 00 00       	mov    $0x5,%eax
        }

        struct res_handle* handle = vfs_open(path, FM_EXEC | FM_READ);
  1050a1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1050a4:	89 0c 24             	mov    %ecx,(%esp)
  1050a7:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  1050ae:	00 
  1050af:	89 45 ac             	mov    %eax,-0x54(%ebp)
  1050b2:	e8 b9 fb ff ff       	call   104c70 <vfs_open>
  1050b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if(handle) {
  1050ba:	81 7d e4 00 00 00 00 	cmpl   $0x0,-0x1c(%ebp)
  1050c1:	0f 84 47 02 00 00    	je     10530e <vfs_exec+0x30e>
            uint32_t size = vfs_available(handle);
  1050c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1050ca:	89 04 24             	mov    %eax,(%esp)
  1050cd:	e8 2e fe ff ff       	call   104f00 <vfs_available>
  1050d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(size == 0) {
  1050d5:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  1050dc:	0f 85 1d 00 00 00    	jne    1050ff <vfs_exec+0xff>
  1050e2:	8d 05 44 85 10 00    	lea    0x108544,%eax
                kprintf("[exec] %s is empty\n", path);
  1050e8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1050eb:	89 04 24             	mov    %eax,(%esp)
  1050ee:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1050f2:	e8 59 b4 ff ff       	call   100550 <kprintf>
                return;
  1050f7:	89 45 a8             	mov    %eax,-0x58(%ebp)
  1050fa:	e9 2c 02 00 00       	jmp    10532b <vfs_exec+0x32b>
            }

            void* modsrc = malloc(size);
  1050ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105102:	89 04 24             	mov    %eax,(%esp)
  105105:	e8 66 ec ff ff       	call   103d70 <malloc>
  10510a:	b9 01 00 00 00       	mov    $0x1,%ecx
  10510f:	89 45 dc             	mov    %eax,-0x24(%ebp)

            uint32_t res = vfs_read(handle, modsrc, size, 1);
  105112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105115:	8b 55 dc             	mov    -0x24(%ebp),%edx
  105118:	8b 75 e0             	mov    -0x20(%ebp),%esi
  10511b:	89 04 24             	mov    %eax,(%esp)
  10511e:	89 54 24 04          	mov    %edx,0x4(%esp)
  105122:	89 74 24 08          	mov    %esi,0x8(%esp)
  105126:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  10512d:	00 
  10512e:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  105131:	e8 0a fc ff ff       	call   104d40 <vfs_read>
  105136:	89 45 d8             	mov    %eax,-0x28(%ebp)

            if(res != RW_OK) {
  105139:	81 7d d8 00 00 00 00 	cmpl   $0x0,-0x28(%ebp)
  105140:	0f 84 21 00 00 00    	je     105167 <vfs_exec+0x167>
  105146:	8d 05 58 85 10 00    	lea    0x108558,%eax
                kprintf("[exec] Error while reading %s\n");
  10514c:	89 04 24             	mov    %eax,(%esp)
  10514f:	e8 fc b3 ff ff       	call   100550 <kprintf>
                free(modsrc);
  105154:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105157:	89 0c 24             	mov    %ecx,(%esp)
  10515a:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10515d:	e8 de ef ff ff       	call   104140 <free>
                return;
  105162:	e9 c4 01 00 00       	jmp    10532b <vfs_exec+0x32b>
            }

            uint32_t old_pdir = vmm_get_current_pagedir();
  105167:	e8 64 04 00 00       	call   1055d0 <vmm_get_current_pagedir>
  10516c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            //**********************************************************************************************************
            if(task != get_current_task())  vmm_activate_pagedir(elf_mod_pdir);
  10516f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105172:	89 45 9c             	mov    %eax,-0x64(%ebp)
  105175:	e8 66 e5 ff ff       	call   1036e0 <get_current_task>
  10517a:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10517d:	39 c1                	cmp    %eax,%ecx
  10517f:	0f 84 0b 00 00 00    	je     105190 <vfs_exec+0x190>
  105185:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105188:	89 04 24             	mov    %eax,(%esp)
  10518b:	e8 80 0f 00 00       	call   106110 <vmm_activate_pagedir>

            struct elf_header* header = modsrc;
  105190:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105193:	89 45 d0             	mov    %eax,-0x30(%ebp)
            struct elf_program_header* ph;

            /* Ist es ueberhaupt eine ELF-Datei? */
            if (header->magic != ELF_MAGIC) {
  105196:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105199:	81 38 7f 45 4c 46    	cmpl   $0x464c457f,(%eax)
  10519f:	0f 84 28 00 00 00    	je     1051cd <vfs_exec+0x1cd>
  1051a5:	8d 05 77 85 10 00    	lea    0x108577,%eax
                kprintf("[exec] Invalid ELF-Magic in %s!\n", path);
  1051ab:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1051ae:	89 04 24             	mov    %eax,(%esp)
  1051b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1051b5:	e8 96 b3 ff ff       	call   100550 <kprintf>
                free(modsrc);
  1051ba:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1051bd:	89 0c 24             	mov    %ecx,(%esp)
  1051c0:	89 45 98             	mov    %eax,-0x68(%ebp)
  1051c3:	e8 78 ef ff ff       	call   104140 <free>
                return;
  1051c8:	e9 5e 01 00 00       	jmp    10532b <vfs_exec+0x32b>
            }

            void* elf_mod_entry = (void*) (header->entry);
  1051cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1051d0:	8b 40 18             	mov    0x18(%eax),%eax
  1051d3:	89 45 c8             	mov    %eax,-0x38(%ebp)

            ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);
  1051d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1051d9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1051dc:	03 41 1c             	add    0x1c(%ecx),%eax
  1051df:	89 45 cc             	mov    %eax,-0x34(%ebp)

            for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  1051e2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  1051e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1051ec:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1051ef:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  1051f3:	39 c8                	cmp    %ecx,%eax
  1051f5:	0f 83 b5 00 00 00    	jae    1052b0 <vfs_exec+0x2b0>
                void* dest = (void*) ph->virt_addr;
  1051fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1051fe:	8b 40 08             	mov    0x8(%eax),%eax
  105201:	89 45 c0             	mov    %eax,-0x40(%ebp)
                void* src = ((char*) header) + ph->offset;
  105204:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105207:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10520a:	03 41 04             	add    0x4(%ecx),%eax
  10520d:	89 45 bc             	mov    %eax,-0x44(%ebp)

                /* Nur Program Header vom Typ LOAD laden */
                if (ph->type != 1) {
  105210:	8b 45 cc             	mov    -0x34(%ebp),%eax
  105213:	81 38 01 00 00 00    	cmpl   $0x1,(%eax)
  105219:	0f 84 05 00 00 00    	je     105224 <vfs_exec+0x224>
                    continue;
  10521f:	e9 71 00 00 00       	jmp    105295 <vfs_exec+0x295>
                }

                for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  105224:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10522b:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10522e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  105231:	3b 41 14             	cmp    0x14(%ecx),%eax
  105234:	0f 83 3f 00 00 00    	jae    105279 <vfs_exec+0x279>
                    vmm_free(dest + offset);
  10523a:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10523d:	03 45 b8             	add    -0x48(%ebp),%eax
  105240:	89 04 24             	mov    %eax,(%esp)
  105243:	e8 58 0a 00 00       	call   105ca0 <vmm_free>
  105248:	b8 00 00 00 00       	mov    $0x0,%eax
                    vmm_alloc_addr(dest + offset, 0);
  10524d:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  105250:	03 4d b8             	add    -0x48(%ebp),%ecx
  105253:	89 0c 24             	mov    %ecx,(%esp)
  105256:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10525d:	00 
  10525e:	89 45 94             	mov    %eax,-0x6c(%ebp)
  105261:	e8 aa 0d 00 00       	call   106010 <vmm_alloc_addr>
  105266:	89 45 90             	mov    %eax,-0x70(%ebp)
                /* Nur Program Header vom Typ LOAD laden */
                if (ph->type != 1) {
                    continue;
                }

                for (uint32_t offset = 0; offset < ph->mem_size; offset += 0x1000) {
  105269:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10526c:	05 00 10 00 00       	add    $0x1000,%eax
  105271:	89 45 b8             	mov    %eax,-0x48(%ebp)
  105274:	e9 b2 ff ff ff       	jmp    10522b <vfs_exec+0x22b>
                    vmm_free(dest + offset);
                    vmm_alloc_addr(dest + offset, 0);
                }

                memcpy(dest, src, ph->file_size);
  105279:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10527c:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  10527f:	8b 55 cc             	mov    -0x34(%ebp),%edx
  105282:	8b 52 10             	mov    0x10(%edx),%edx
  105285:	89 04 24             	mov    %eax,(%esp)
  105288:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10528c:	89 54 24 08          	mov    %edx,0x8(%esp)
  105290:	e8 ab f1 ff ff       	call   104440 <memcpy>

            void* elf_mod_entry = (void*) (header->entry);

            ph = (struct elf_program_header*) (((char*) header) + header->ph_offset);

            for (uint32_t n = 0; n < header->ph_entry_count; n++, ph++) {
  105295:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  105298:	05 01 00 00 00       	add    $0x1,%eax
  10529d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1052a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1052a3:	05 20 00 00 00       	add    $0x20,%eax
  1052a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1052ab:	e9 39 ff ff ff       	jmp    1051e9 <vfs_exec+0x1e9>
                }

                memcpy(dest, src, ph->file_size);
            }

            task->args = args;
  1052b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1052b3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1052b6:	89 41 18             	mov    %eax,0x18(%ecx)
            task->cpuState->eip = (uint32_t) elf_mod_entry;
  1052b9:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1052bc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1052bf:	8b 49 04             	mov    0x4(%ecx),%ecx
  1052c2:	89 41 24             	mov    %eax,0x24(%ecx)

            if(task != get_current_task()) vmm_activate_pagedir(old_pdir);
  1052c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1052c8:	89 45 8c             	mov    %eax,-0x74(%ebp)
  1052cb:	e8 10 e4 ff ff       	call   1036e0 <get_current_task>
  1052d0:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  1052d3:	39 c1                	cmp    %eax,%ecx
  1052d5:	0f 84 0b 00 00 00    	je     1052e6 <vfs_exec+0x2e6>
  1052db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1052de:	89 04 24             	mov    %eax,(%esp)
  1052e1:	e8 2a 0e 00 00       	call   106110 <vmm_activate_pagedir>
  1052e6:	8d 05 98 85 10 00    	lea    0x108598,%eax

            kprintf("[exec] Executed %s\n", path);
  1052ec:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1052ef:	89 04 24             	mov    %eax,(%esp)
  1052f2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1052f6:	e8 55 b2 ff ff       	call   100550 <kprintf>
            free(modsrc);
  1052fb:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1052fe:	89 0c 24             	mov    %ecx,(%esp)
  105301:	89 45 88             	mov    %eax,-0x78(%ebp)
  105304:	e8 37 ee ff ff       	call   104140 <free>
        }
  105309:	e9 18 00 00 00       	jmp    105326 <vfs_exec+0x326>
  10530e:	8d 05 ac 85 10 00    	lea    0x1085ac,%eax
        else
        {
            kprintf("[exec] %s doesn't exist\n", path);
  105314:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105317:	89 04 24             	mov    %eax,(%esp)
  10531a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10531e:	e8 2d b2 ff ff       	call   100550 <kprintf>
  105323:	89 45 84             	mov    %eax,-0x7c(%ebp)
        }
    }
  105326:	e9 00 00 00 00       	jmp    10532b <vfs_exec+0x32b>
}
  10532b:	81 c4 94 00 00 00    	add    $0x94,%esp
  105331:	5e                   	pop    %esi
  105332:	5d                   	pop    %ebp
  105333:	c3                   	ret    
  105334:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  10533b:	00 00 00 00 00 

00105340 <vfs_init_root>:

void vfs_init_root() {
  105340:	55                   	push   %ebp
  105341:	89 e5                	mov    %esp,%ebp
    if(root == 0) {
  105343:	83 ec 18             	sub    $0x18,%esp
  105346:	81 3d 44 a4 10 00 00 	cmpl   $0x0,0x10a444
  10534d:	00 00 00 
  105350:	0f 85 6f 00 00 00    	jne    1053c5 <vfs_init_root+0x85>
  105356:	b8 10 01 00 00       	mov    $0x110,%eax
        root = malloc(sizeof(struct res_node));
  10535b:	c7 04 24 10 01 00 00 	movl   $0x110,(%esp)
  105362:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105365:	e8 06 ea ff ff       	call   103d70 <malloc>
  10536a:	a3 44 a4 10 00       	mov    %eax,0x10a444
        root->next = 0;
  10536f:	a1 44 a4 10 00       	mov    0x10a444,%eax
  105374:	c7 80 08 01 00 00 00 	movl   $0x0,0x108(%eax)
  10537b:	00 00 00 
        root->parent = 0;
  10537e:	a1 44 a4 10 00       	mov    0x10a444,%eax
  105383:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%eax)
  10538a:	00 00 00 
        strcpy(root->name, "$");
  10538d:	a1 44 a4 10 00       	mov    0x10a444,%eax
  105392:	89 e1                	mov    %esp,%ecx
  105394:	89 01                	mov    %eax,(%ecx)
  105396:	c7 41 04 c5 85 10 00 	movl   $0x1085c5,0x4(%ecx)
  10539d:	e8 de f2 ff ff       	call   104680 <strcpy>
        root->res_ptr = 0;
  1053a2:	8b 0d 44 a4 10 00    	mov    0x10a444,%ecx
  1053a8:	c7 81 04 01 00 00 00 	movl   $0x0,0x104(%ecx)
  1053af:	00 00 00 
        root->res_type = RES_SUBDIR;
  1053b2:	8b 0d 44 a4 10 00    	mov    0x10a444,%ecx
  1053b8:	c7 81 00 01 00 00 00 	movl   $0x0,0x100(%ecx)
  1053bf:	00 00 00 
  1053c2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
}
  1053c5:	83 c4 18             	add    $0x18,%esp
  1053c8:	5d                   	pop    %ebp
  1053c9:	c3                   	ret    
  1053ca:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001053d0 <vfs_debug_ls>:

void vfs_debug_ls(char* path) {
  1053d0:	55                   	push   %ebp
  1053d1:	89 e5                	mov    %esp,%ebp
  1053d3:	56                   	push   %esi
  1053d4:	83 ec 24             	sub    $0x24,%esp
  1053d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1053da:	89 45 f8             	mov    %eax,-0x8(%ebp)
    static struct res_node* node;
    node = vfs_get_node(path);
  1053dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1053e0:	89 04 24             	mov    %eax,(%esp)
  1053e3:	e8 c8 f7 ff ff       	call   104bb0 <vfs_get_node>
  1053e8:	a3 58 a4 10 00       	mov    %eax,0x10a458
    node = node->res_ptr;
  1053ed:	a1 58 a4 10 00       	mov    0x10a458,%eax
  1053f2:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1053f8:	a3 58 a4 10 00       	mov    %eax,0x10a458

    while(node != 0) {
  1053fd:	81 3d 58 a4 10 00 00 	cmpl   $0x0,0x10a458
  105404:	00 00 00 
  105407:	0f 84 90 00 00 00    	je     10549d <vfs_debug_ls+0xcd>
  10540d:	8d 05 c7 85 10 00    	lea    0x1085c7,%eax
        char* type = "N/A";
  105413:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(node->res_type == RES_SUBDIR) {
  105416:	a1 58 a4 10 00       	mov    0x10a458,%eax
  10541b:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  105422:	00 00 00 
  105425:	0f 85 09 00 00 00    	jne    105434 <vfs_debug_ls+0x64>
  10542b:	8d 05 cb 85 10 00    	lea    0x1085cb,%eax
            type = "DIR";
  105431:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        if(node->res_type == RES_KERNDRV) {
  105434:	a1 58 a4 10 00       	mov    0x10a458,%eax
  105439:	81 b8 00 01 00 00 01 	cmpl   $0x1,0x100(%eax)
  105440:	00 00 00 
  105443:	0f 85 14 00 00 00    	jne    10545d <vfs_debug_ls+0x8d>
            type = ((struct res_kfile*)node->res_ptr)->driver->drvname;
  105449:	a1 58 a4 10 00       	mov    0x10a458,%eax
  10544e:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  105454:	8b 40 04             	mov    0x4(%eax),%eax
  105457:	8b 40 18             	mov    0x18(%eax),%eax
  10545a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10545d:	8d 05 cf 85 10 00    	lea    0x1085cf,%eax
        }

        kprintf("LS %s: %s [%s]\n", path, node->name, type);
  105463:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105466:	8b 15 58 a4 10 00    	mov    0x10a458,%edx
  10546c:	8b 75 f4             	mov    -0xc(%ebp),%esi
  10546f:	89 04 24             	mov    %eax,(%esp)
  105472:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105476:	89 54 24 08          	mov    %edx,0x8(%esp)
  10547a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10547e:	e8 cd b0 ff ff       	call   100550 <kprintf>

        node = node->next;
  105483:	8b 0d 58 a4 10 00    	mov    0x10a458,%ecx
  105489:	8b 89 08 01 00 00    	mov    0x108(%ecx),%ecx
  10548f:	89 0d 58 a4 10 00    	mov    %ecx,0x10a458
    }
  105495:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105498:	e9 60 ff ff ff       	jmp    1053fd <vfs_debug_ls+0x2d>
}
  10549d:	83 c4 24             	add    $0x24,%esp
  1054a0:	5e                   	pop    %esi
  1054a1:	5d                   	pop    %ebp
  1054a2:	c3                   	ret    
  1054a3:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  1054aa:	84 00 00 00 00 00 

001054b0 <vfs_find_node>:

struct res_node* root = 0;
struct res_node* current = 0;
struct res_node* temp = 0;

static struct res_node* vfs_find_node(struct res_node* parent, char* name) {
  1054b0:	55                   	push   %ebp
  1054b1:	89 e5                	mov    %esp,%ebp
  1054b3:	83 ec 18             	sub    $0x18,%esp
  1054b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1054b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1054bc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1054bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_type == RES_SUBDIR) {
  1054c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1054c5:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  1054cc:	00 00 00 
  1054cf:	0f 85 57 00 00 00    	jne    10552c <vfs_find_node+0x7c>
        struct res_node* ptr = parent->res_ptr;
  1054d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1054d8:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  1054de:	89 45 f0             	mov    %eax,-0x10(%ebp)

        while(ptr != 0) {
  1054e1:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1054e8:	0f 84 39 00 00 00    	je     105527 <vfs_find_node+0x77>
            if(strcmp(name, ptr->name) == 0) {
  1054ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1054f1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1054f4:	89 e2                	mov    %esp,%edx
  1054f6:	89 4a 04             	mov    %ecx,0x4(%edx)
  1054f9:	89 02                	mov    %eax,(%edx)
  1054fb:	e8 90 f0 ff ff       	call   104590 <strcmp>
  105500:	3d 00 00 00 00       	cmp    $0x0,%eax
  105505:	0f 85 0b 00 00 00    	jne    105516 <vfs_find_node+0x66>
                return ptr;
  10550b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10550e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  105511:	e9 1d 00 00 00       	jmp    105533 <vfs_find_node+0x83>
            }

            ptr = ptr->next;
  105516:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105519:	8b 80 08 01 00 00    	mov    0x108(%eax),%eax
  10551f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
  105522:	e9 ba ff ff ff       	jmp    1054e1 <vfs_find_node+0x31>
    }
  105527:	e9 00 00 00 00       	jmp    10552c <vfs_find_node+0x7c>

    return 0;
  10552c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  105533:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105536:	83 c4 18             	add    $0x18,%esp
  105539:	5d                   	pop    %ebp
  10553a:	c3                   	ret    
  10553b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00105540 <vfs_insert_node>:

static int vfs_insert_node(struct res_node* parent, struct res_node* child) {
  105540:	55                   	push   %ebp
  105541:	89 e5                	mov    %esp,%ebp
  105543:	83 ec 0c             	sub    $0xc,%esp
  105546:	8b 45 0c             	mov    0xc(%ebp),%eax
  105549:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10554c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10554f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(parent->res_ptr == 0) {
  105552:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105555:	81 b8 04 01 00 00 00 	cmpl   $0x0,0x104(%eax)
  10555c:	00 00 00 
  10555f:	0f 85 0d 00 00 00    	jne    105572 <vfs_insert_node+0x32>
        parent->res_type = RES_SUBDIR;
  105565:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105568:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%eax)
  10556f:	00 00 00 
    }

    if(parent->res_type == RES_SUBDIR) {
  105572:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105575:	81 b8 00 01 00 00 00 	cmpl   $0x0,0x100(%eax)
  10557c:	00 00 00 
  10557f:	0f 85 36 00 00 00    	jne    1055bb <vfs_insert_node+0x7b>
        child->next = parent->res_ptr;
  105585:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105588:	8b 80 04 01 00 00    	mov    0x104(%eax),%eax
  10558e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105591:	89 81 08 01 00 00    	mov    %eax,0x108(%ecx)
        child->parent = parent;
  105597:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10559a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10559d:	89 81 0c 01 00 00    	mov    %eax,0x10c(%ecx)
        parent->res_ptr = child;
  1055a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1055a6:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1055a9:	89 81 04 01 00 00    	mov    %eax,0x104(%ecx)

        return 0;
  1055af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1055b6:	e9 07 00 00 00       	jmp    1055c2 <vfs_insert_node+0x82>
    }

    return 1;
  1055bb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
}
  1055c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1055c5:	83 c4 0c             	add    $0xc,%esp
  1055c8:	5d                   	pop    %ebp
  1055c9:	c3                   	ret    
  1055ca:	66 90                	xchg   %ax,%ax
  1055cc:	66 90                	xchg   %ax,%ax
  1055ce:	66 90                	xchg   %ax,%ax

001055d0 <vmm_get_current_pagedir>:
	}

	vmm_unmap(pagedir_ptr);
}

uint32_t vmm_get_current_pagedir(void) {
  1055d0:	55                   	push   %ebp
  1055d1:	89 e5                	mov    %esp,%ebp
	return active_pagedir;
  1055d3:	a1 5c a4 10 00       	mov    0x10a45c,%eax
  1055d8:	5d                   	pop    %ebp
  1055d9:	c3                   	ret    
  1055da:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

001055e0 <vmm_fork_current>:
}

uint32_t vmm_fork_current(void) {
  1055e0:	55                   	push   %ebp
  1055e1:	89 e5                	mov    %esp,%ebp
  1055e3:	56                   	push   %esi
  1055e4:	83 ec 34             	sub    $0x34,%esp
  1055e7:	8d 45 f8             	lea    -0x8(%ebp),%eax
	uint32_t phys_pagedir, paddr, i;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  1055ea:	89 04 24             	mov    %eax,(%esp)
  1055ed:	e8 ce 00 00 00       	call   1056c0 <vmm_create_vpdraw>
  1055f2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for (i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  1055f5:	c7 45 f0 00 10 40 20 	movl   $0x20401000,-0x10(%ebp)
  1055fc:	81 7d f0 00 f0 ff ff 	cmpl   $0xfffff000,-0x10(%ebp)
  105603:	0f 83 98 00 00 00    	jae    1056a1 <vmm_fork_current+0xc1>
		if (active_pagetables[i >> 12] & PT_PRESENT) {
  105609:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10560c:	c1 e8 0c             	shr    $0xc,%eax
  10560f:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105615:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105618:	25 01 00 00 00       	and    $0x1,%eax
  10561d:	3d 00 00 00 00       	cmp    $0x0,%eax
  105622:	0f 84 64 00 00 00    	je     10568c <vmm_fork_current+0xac>
  105628:	8d 45 f4             	lea    -0xc(%ebp),%eax
			void* newp = vmm_alloc_user(&paddr);
  10562b:	89 04 24             	mov    %eax,(%esp)
  10562e:	e8 4d 03 00 00       	call   105980 <vmm_alloc_user>
  105633:	b9 00 00 00 00       	mov    $0x0,%ecx
  105638:	ba 00 10 00 00       	mov    $0x1000,%edx
  10563d:	89 45 e8             	mov    %eax,-0x18(%ebp)

			memcpy(newp, (void*) i, 0x1000);
  105640:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105643:	8b 75 f0             	mov    -0x10(%ebp),%esi
  105646:	89 04 24             	mov    %eax,(%esp)
  105649:	89 74 24 04          	mov    %esi,0x4(%esp)
  10564d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  105654:	00 
  105655:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  105658:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10565b:	e8 e0 ed ff ff       	call   104440 <memcpy>
			map_address_context(pdptr, i, paddr, 0);
  105660:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105663:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105666:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105669:	89 04 24             	mov    %eax,(%esp)
  10566c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105670:	89 54 24 08          	mov    %edx,0x8(%esp)
  105674:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10567b:	00 
  10567c:	e8 4f 03 00 00       	call   1059d0 <map_address_context>

			vmm_unmap(newp);
  105681:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105684:	89 04 24             	mov    %eax,(%esp)
  105687:	e8 d4 03 00 00       	call   105a60 <vmm_unmap>
		}

	}
  10568c:	e9 00 00 00 00       	jmp    105691 <vmm_fork_current+0xb1>

uint32_t vmm_fork_current(void) {
	uint32_t phys_pagedir, paddr, i;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);

	for (i = PROGRAM_BOTTOM; i < 0xFFFFF000; i += 0x1000) {
  105691:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105694:	05 00 10 00 00       	add    $0x1000,%eax
  105699:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10569c:	e9 5b ff ff ff       	jmp    1055fc <vmm_fork_current+0x1c>
			vmm_unmap(newp);
		}

	}

	vmm_free_pdptr(pdptr);
  1056a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1056a4:	89 04 24             	mov    %eax,(%esp)
  1056a7:	e8 24 04 00 00       	call   105ad0 <vmm_free_pdptr>

	return phys_pagedir;
  1056ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1056af:	83 c4 34             	add    $0x34,%esp
  1056b2:	5e                   	pop    %esi
  1056b3:	5d                   	pop    %ebp
  1056b4:	c3                   	ret    
  1056b5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%eax,%eax,1)
  1056bc:	00 00 00 00 

001056c0 <vmm_create_vpdraw>:
uint32_t* active_pagetables = (uint32_t*) (ACTIVE_PAGETBL_VADDR);
struct vmm_context* active_context = (void*) (ACTIVE_CONTEXT_VADDR);

uint32_t active_pagedir = 0;

static uint32_t* vmm_create_vpdraw(uint32_t* pagedir) {
  1056c0:	55                   	push   %ebp
  1056c1:	89 e5                	mov    %esp,%ebp
  1056c3:	53                   	push   %ebx
  1056c4:	57                   	push   %edi
  1056c5:	56                   	push   %esi
  1056c6:	83 ec 4c             	sub    $0x4c,%esp
  1056c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1056cc:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  1056cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t phys_context = 0;
  1056d2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct vmm_context* context = vmm_alloc(&phys_context);
  1056d9:	89 0c 24             	mov    %ecx,(%esp)
  1056dc:	e8 6f 05 00 00       	call   105c50 <vmm_alloc>
  1056e1:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
  1056e4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	uint32_t phys_pagedir = 0;
  1056e7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	context->pagedir = vmm_alloc(&phys_pagedir);
  1056ee:	89 0c 24             	mov    %ecx,(%esp)
  1056f1:	e8 5a 05 00 00       	call   105c50 <vmm_alloc>
  1056f6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1056f9:	89 01                	mov    %eax,(%ecx)
	if (pagedir != 0)
  1056fb:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  105702:	0f 84 08 00 00 00    	je     105710 <vmm_create_vpdraw+0x50>
		*pagedir = phys_pagedir;
  105708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10570b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10570e:	89 01                	mov    %eax,(%ecx)
  105710:	b8 00 00 00 00       	mov    $0x0,%eax

	uint32_t* pagedir_ptr = vmm_alloc(0);
  105715:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  10571c:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10571f:	e8 2c 05 00 00       	call   105c50 <vmm_alloc>
  105724:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  105727:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  10572e:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  105735:	0f 83 25 01 00 00    	jae    105860 <vmm_create_vpdraw+0x1a0>
  10573b:	8d 45 dc             	lea    -0x24(%ebp),%eax
		pagedir_ptr[i] = (uint32_t) vmm_alloc(&paddr);
  10573e:	89 04 24             	mov    %eax,(%esp)
  105741:	e8 0a 05 00 00       	call   105c50 <vmm_alloc>
  105746:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105749:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10574c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i < PMEM_TABLES) {
  10574f:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  105756:	0f 83 4d 00 00 00    	jae    1057a9 <vmm_create_vpdraw+0xe9>
			vmm_free((void*) (pagedir_ptr[i]));
  10575c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10575f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105762:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105765:	89 04 24             	mov    %eax,(%esp)
  105768:	e8 33 05 00 00       	call   105ca0 <vmm_free>
  10576d:	b8 00 00 00 00       	mov    $0x0,%eax
			map_address_active(pagedir_ptr[i], kernel_pagetables[i], 0); //Can reuse pagedir_ptr[i] cause of vmm_free
  105772:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105775:	8b 55 e0             	mov    -0x20(%ebp),%edx
  105778:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  10577b:	8b 55 d8             	mov    -0x28(%ebp),%edx
  10577e:	8b 14 95 90 a4 18 00 	mov    0x18a490(,%edx,4),%edx
  105785:	89 0c 24             	mov    %ecx,(%esp)
  105788:	89 54 24 04          	mov    %edx,0x4(%esp)
  10578c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105793:	00 
  105794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  105797:	e8 84 05 00 00       	call   105d20 <map_address_active>
			paddr = kernel_pagetables[i];
  10579c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10579f:	8b 04 85 90 a4 18 00 	mov    0x18a490(,%eax,4),%eax
  1057a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;
  1057a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1057ac:	0d 01 00 00 00       	or     $0x1,%eax
  1057b1:	0d 02 00 00 00       	or     $0x2,%eax
  1057b6:	0d 04 00 00 00       	or     $0x4,%eax
  1057bb:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1057be:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1057c1:	8b 12                	mov    (%edx),%edx
  1057c3:	89 04 8a             	mov    %eax,(%edx,%ecx,4)

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
  1057c6:	81 7d d8 80 00 00 00 	cmpl   $0x80,-0x28(%ebp)
  1057cd:	0f 82 78 00 00 00    	jb     10584b <vmm_create_vpdraw+0x18b>
			for (i2 = 0; i2 < 1024; i2++) {
  1057d3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  1057da:	81 7d d4 00 04 00 00 	cmpl   $0x400,-0x2c(%ebp)
  1057e1:	0f 83 5f 00 00 00    	jae    105846 <vmm_create_vpdraw+0x186>
  1057e7:	b8 04 00 00 00       	mov    $0x4,%eax
  1057ec:	b9 00 00 00 00       	mov    $0x0,%ecx
  1057f1:	ba 00 02 00 00       	mov    $0x200,%edx
				uint32_t vaddr = (i << 22) + (i2 << 12);
  1057f6:	8b 75 d8             	mov    -0x28(%ebp),%esi
  1057f9:	c1 e6 16             	shl    $0x16,%esi
  1057fc:	8b 7d d4             	mov    -0x2c(%ebp),%edi
  1057ff:	c1 e7 0c             	shl    $0xc,%edi
  105802:	01 fe                	add    %edi,%esi
  105804:	89 75 d0             	mov    %esi,-0x30(%ebp)

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
  105807:	81 7d d0 00 00 00 01 	cmpl   $0x1000000,-0x30(%ebp)
  10580e:	0f 97 c3             	seta   %bl
  105811:	84 db                	test   %bl,%bl
  105813:	0f 44 d1             	cmove  %ecx,%edx
  105816:	81 7d d0 00 10 40 20 	cmpl   $0x20401000,-0x30(%ebp)
  10581d:	0f 97 c3             	seta   %bl
  105820:	84 db                	test   %bl,%bl
  105822:	0f 44 c1             	cmove  %ecx,%eax
  105825:	09 c2                	or     %eax,%edx
  105827:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10582a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10582d:	8b 75 e0             	mov    -0x20(%ebp),%esi
  105830:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  105833:	89 14 81             	mov    %edx,(%ecx,%eax,4)
		}

		context->pagedir[i] = paddr | PD_PRESENT | PD_WRITE | PD_PUBLIC;

		if (i >= PMEM_TABLES) { //don't override kernel tables ;)
			for (i2 = 0; i2 < 1024; i2++) {
  105836:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105839:	05 01 00 00 00       	add    $0x1,%eax
  10583e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  105841:	e9 94 ff ff ff       	jmp    1057da <vmm_create_vpdraw+0x11a>

				((uint32_t*) (pagedir_ptr[i]))[i2] = (
						(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
  105846:	e9 00 00 00 00       	jmp    10584b <vmm_create_vpdraw+0x18b>
	}
  10584b:	e9 00 00 00 00       	jmp    105850 <vmm_create_vpdraw+0x190>
		*pagedir = phys_pagedir;

	uint32_t* pagedir_ptr = vmm_alloc(0);
	uint32_t paddr, i, i2;

	for (i = 0; i < 1024; i++) {
  105850:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105853:	05 01 00 00 00       	add    $0x1,%eax
  105858:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10585b:	e9 ce fe ff ff       	jmp    10572e <vmm_create_vpdraw+0x6e>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  105860:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  105867:	81 7d d8 00 04 00 00 	cmpl   $0x400,-0x28(%ebp)
  10586e:	0f 83 58 00 00 00    	jae    1058cc <vmm_create_vpdraw+0x20c>
  105874:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
  105879:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10587c:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10587f:	8b 12                	mov    (%edx),%edx
  105881:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105884:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10588a:	89 4d dc             	mov    %ecx,-0x24(%ebp)
		map_address_context(pagedir_ptr,
  10588d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105890:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  105896:	8b 75 d8             	mov    -0x28(%ebp),%esi
  105899:	c1 e6 0c             	shl    $0xc,%esi
  10589c:	01 f2                	add    %esi,%edx
  10589e:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1058a1:	89 0c 24             	mov    %ecx,(%esp)
  1058a4:	89 54 24 04          	mov    %edx,0x4(%esp)
  1058a8:	89 74 24 08          	mov    %esi,0x8(%esp)
  1058ac:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1058b3:	00 
  1058b4:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1058b7:	e8 14 01 00 00       	call   1059d0 <map_address_context>
						| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
			}
		}
	}

	for (i = 0; i < 1024; i++) {
  1058bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1058bf:	05 01 00 00 00       	add    $0x1,%eax
  1058c4:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1058c7:	e9 9b ff ff ff       	jmp    105867 <vmm_create_vpdraw+0x1a7>
  1058cc:	b8 00 00 00 00       	mov    $0x0,%eax
		paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(pagedir_ptr,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
  1058d1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1058d4:	8b 15 e8 71 10 00    	mov    0x1071e8,%edx
  1058da:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1058dd:	89 0c 24             	mov    %ecx,(%esp)
  1058e0:	89 54 24 04          	mov    %edx,0x4(%esp)
  1058e4:	89 74 24 08          	mov    %esi,0x8(%esp)
  1058e8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1058ef:	00 
  1058f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
  1058f3:	e8 d8 00 00 00       	call   1059d0 <map_address_context>
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1058f8:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
  1058ff:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
  105905:	39 45 d8             	cmp    %eax,-0x28(%ebp)
  105908:	0f 83 39 00 00 00    	jae    105947 <vmm_create_vpdraw+0x287>
  10590e:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(pagedir_ptr, i, i, 0);
  105913:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105916:	8b 55 d8             	mov    -0x28(%ebp),%edx
  105919:	8b 75 d8             	mov    -0x28(%ebp),%esi
  10591c:	89 0c 24             	mov    %ecx,(%esp)
  10591f:	89 54 24 04          	mov    %edx,0x4(%esp)
  105923:	89 74 24 08          	mov    %esi,0x8(%esp)
  105927:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10592e:	00 
  10592f:	89 45 b8             	mov    %eax,-0x48(%ebp)
  105932:	e8 99 00 00 00       	call   1059d0 <map_address_context>
	}

	map_address_context(pagedir_ptr, (uint32_t) active_context, phys_context,
			0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  105937:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10593a:	05 00 10 00 00       	add    $0x1000,%eax
  10593f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105942:	e9 b8 ff ff ff       	jmp    1058ff <vmm_create_vpdraw+0x23f>
		map_address_context(pagedir_ptr, i, i, 0);
	}

	uint32_t* pd_ptr = context->pagedir;
  105947:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10594a:	8b 00                	mov    (%eax),%eax
  10594c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	context->pagedir = (uint32_t*) phys_pagedir;
  10594f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105952:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  105955:	89 01                	mov    %eax,(%ecx)

	vmm_unmap(pd_ptr);
  105957:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10595a:	89 04 24             	mov    %eax,(%esp)
  10595d:	e8 fe 00 00 00       	call   105a60 <vmm_unmap>
	vmm_unmap(context);
  105962:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105965:	89 04 24             	mov    %eax,(%esp)
  105968:	e8 f3 00 00 00       	call   105a60 <vmm_unmap>

	return pagedir_ptr;
  10596d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105970:	83 c4 4c             	add    $0x4c,%esp
  105973:	5e                   	pop    %esi
  105974:	5f                   	pop    %edi
  105975:	5b                   	pop    %ebx
  105976:	5d                   	pop    %ebp
  105977:	c3                   	ret    
  105978:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10597f:	00 

00105980 <vmm_alloc_user>:

void* vmm_alloc_ucont(uint32_t cont) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
}

void* vmm_alloc_user(uint32_t* retpaddr) {
  105980:	55                   	push   %ebp
  105981:	89 e5                	mov    %esp,%ebp
  105983:	56                   	push   %esi
  105984:	83 ec 24             	sub    $0x24,%esp
  105987:	8b 45 08             	mov    0x8(%ebp),%eax
  10598a:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  10598f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  105994:	be 01 00 00 00       	mov    $0x1,%esi
  105999:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
  10599c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10599f:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  1059a6:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  1059ad:	ff 
  1059ae:	89 44 24 08          	mov    %eax,0x8(%esp)
  1059b2:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1059b9:	00 
  1059ba:	89 75 f4             	mov    %esi,-0xc(%ebp)
  1059bd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1059c0:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1059c3:	e8 b8 04 00 00       	call   105e80 <vmm_alloc_in_range>
  1059c8:	83 c4 24             	add    $0x24,%esp
  1059cb:	5e                   	pop    %esi
  1059cc:	5d                   	pop    %ebp
  1059cd:	c3                   	ret    
  1059ce:	66 90                	xchg   %ax,%ax

001059d0 <map_address_context>:
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}

void map_address_context(uint32_t* pagedir, uint32_t vaddr, uint32_t paddr,
		uint32_t flags) {
  1059d0:	55                   	push   %ebp
  1059d1:	89 e5                	mov    %esp,%ebp
  1059d3:	56                   	push   %esi
  1059d4:	83 ec 18             	sub    $0x18,%esp
  1059d7:	8b 45 14             	mov    0x14(%ebp),%eax
  1059da:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1059dd:	8b 55 0c             	mov    0xc(%ebp),%edx
  1059e0:	8b 75 08             	mov    0x8(%ebp),%esi
  1059e3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  1059e6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1059e9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1059ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32_t pd_entry = vaddr >> 22;
  1059ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1059f2:	c1 e8 16             	shr    $0x16,%eax
  1059f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32_t pt_entry = (vaddr >> 12) % 1024;
  1059f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1059fb:	c1 e8 0c             	shr    $0xc,%eax
  1059fe:	25 ff 03 00 00       	and    $0x3ff,%eax
  105a03:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry] = (paddr
  105a06:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105a09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105a0e:	0d 01 00 00 00       	or     $0x1,%eax
  105a13:	0d 02 00 00 00       	or     $0x2,%eax
  105a18:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105a1b:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  105a21:	09 c8                	or     %ecx,%eax
  105a23:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105a26:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105a29:	8b 75 f8             	mov    -0x8(%ebp),%esi
  105a2c:	8b 14 96             	mov    (%esi,%edx,4),%edx
  105a2f:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  105a35:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105a38:	81 e1 04 02 00 00    	and    $0x204,%ecx
  105a3e:	09 c8                	or     %ecx,%eax
  105a40:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105a43:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105a46:	8b 75 f8             	mov    -0x8(%ebp),%esi
  105a49:	8b 14 96             	mov    (%esi,%edx,4),%edx
  105a4c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
  105a52:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}
  105a55:	83 c4 18             	add    $0x18,%esp
  105a58:	5e                   	pop    %esi
  105a59:	5d                   	pop    %ebp
  105a5a:	c3                   	ret    
  105a5b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00105a60 <vmm_unmap>:
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

void vmm_unmap(void* p_vaddr) { //USE ONLY IF YOU KNOW WHAT YOU DO. POTENTIAL MEMORY LEAK!
  105a60:	55                   	push   %ebp
  105a61:	89 e5                	mov    %esp,%ebp
  105a63:	83 ec 08             	sub    $0x8,%esp
  105a66:	8b 45 08             	mov    0x8(%ebp),%eax
  105a69:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  105a6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105a6f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  105a72:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105a75:	c1 e8 0c             	shr    $0xc,%eax
  105a78:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105a7e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105a81:	25 01 02 00 00       	and    $0x201,%eax
  105a86:	3d 01 02 00 00       	cmp    $0x201,%eax
  105a8b:	0f 85 2e 00 00 00    	jne    105abf <vmm_unmap+0x5f>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  105a91:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105a94:	c1 e8 0c             	shr    $0xc,%eax
  105a97:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105a9d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105aa0:	25 04 00 00 00       	and    $0x4,%eax
  105aa5:	0d 00 02 00 00       	or     $0x200,%eax
  105aaa:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105aad:	c1 e9 0c             	shr    $0xc,%ecx
  105ab0:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  105ab6:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  105ab9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105abc:	0f 01 38             	invlpg (%eax)
	}
}
  105abf:	83 c4 08             	add    $0x8,%esp
  105ac2:	5d                   	pop    %ebp
  105ac3:	c3                   	ret    
  105ac4:	66 66 66 2e 0f 1f 84 	data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105acb:	00 00 00 00 00 

00105ad0 <vmm_free_pdptr>:
	vmm_unmap(context);

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
  105ad0:	55                   	push   %ebp
  105ad1:	89 e5                	mov    %esp,%ebp
  105ad3:	83 ec 18             	sub    $0x18,%esp
  105ad6:	8b 45 08             	mov    0x8(%ebp),%eax
  105ad9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (uint32_t i = 0; i < 1024; i++) {
  105adc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  105ae3:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%ebp)
  105aea:	0f 83 21 00 00 00    	jae    105b11 <vmm_free_pdptr+0x41>
		vmm_unmap((void*) pagedir_ptr[i]);
  105af0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105af3:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105af6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105af9:	89 04 24             	mov    %eax,(%esp)
  105afc:	e8 5f ff ff ff       	call   105a60 <vmm_unmap>

	return pagedir_ptr;
}

static void vmm_free_pdptr(uint32_t* pagedir_ptr) {
	for (uint32_t i = 0; i < 1024; i++) {
  105b01:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105b04:	05 01 00 00 00       	add    $0x1,%eax
  105b09:	89 45 f8             	mov    %eax,-0x8(%ebp)
  105b0c:	e9 d2 ff ff ff       	jmp    105ae3 <vmm_free_pdptr+0x13>
		vmm_unmap((void*) pagedir_ptr[i]);
	}

	vmm_unmap(pagedir_ptr);
  105b11:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105b14:	89 04 24             	mov    %eax,(%esp)
  105b17:	e8 44 ff ff ff       	call   105a60 <vmm_unmap>
}
  105b1c:	83 c4 18             	add    $0x18,%esp
  105b1f:	5d                   	pop    %ebp
  105b20:	c3                   	ret    
  105b21:	66 66 66 66 66 66 2e 	data32 data32 data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105b28:	0f 1f 84 00 00 00 00 
  105b2f:	00 

00105b30 <vmm_create_pagedir>:
	vmm_free_pdptr(pdptr);

	return phys_pagedir;
}

uint32_t vmm_create_pagedir() {
  105b30:	55                   	push   %ebp
  105b31:	89 e5                	mov    %esp,%ebp
  105b33:	83 ec 18             	sub    $0x18,%esp
  105b36:	8d 45 fc             	lea    -0x4(%ebp),%eax
	uint32_t phys_pagedir;
	uint32_t* pdptr = vmm_create_vpdraw(&phys_pagedir);
  105b39:	89 04 24             	mov    %eax,(%esp)
  105b3c:	e8 7f fb ff ff       	call   1056c0 <vmm_create_vpdraw>
  105b41:	89 45 f8             	mov    %eax,-0x8(%ebp)
	vmm_free_pdptr(pdptr);
  105b44:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105b47:	89 04 24             	mov    %eax,(%esp)
  105b4a:	e8 81 ff ff ff       	call   105ad0 <vmm_free_pdptr>

	return phys_pagedir;
  105b4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105b52:	83 c4 18             	add    $0x18,%esp
  105b55:	5d                   	pop    %ebp
  105b56:	c3                   	ret    
  105b57:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  105b5e:	00 00 

00105b60 <vmm_resolve>:
}

uint32_t vmm_resolve(void* vaddr) {
  105b60:	55                   	push   %ebp
  105b61:	89 e5                	mov    %esp,%ebp
  105b63:	50                   	push   %eax
  105b64:	8b 45 08             	mov    0x8(%ebp),%eax
  105b67:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return active_pagetables[(uint32_t) vaddr >> 12] & 0xFFFFF000;
  105b6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105b6d:	c1 e8 0c             	shr    $0xc,%eax
  105b70:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105b76:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105b79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105b7e:	83 c4 04             	add    $0x4,%esp
  105b81:	5d                   	pop    %ebp
  105b82:	c3                   	ret    
  105b83:	66 66 66 66 2e 0f 1f 	data32 data32 data32 nopw %cs:0x0(%eax,%eax,1)
  105b8a:	84 00 00 00 00 00 

00105b90 <vmm_resolve_ppd>:
}

uint32_t vmm_resolve_ppd(uint32_t pdir, void* vaddr) {
  105b90:	55                   	push   %ebp
  105b91:	89 e5                	mov    %esp,%ebp
  105b93:	83 ec 38             	sub    $0x38,%esp
  105b96:	8b 45 0c             	mov    0xc(%ebp),%eax
  105b99:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105b9c:	ba 00 00 00 00       	mov    $0x0,%edx
  105ba1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  105ba4:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uint32_t pd_entry = (uint32_t) vaddr >> 22;
  105ba7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105baa:	c1 e8 16             	shr    $0x16,%eax
  105bad:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t pt_entry = ((uint32_t) vaddr >> 12) % 1024;
  105bb0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105bb3:	c1 e8 0c             	shr    $0xc,%eax
  105bb6:	25 ff 03 00 00       	and    $0x3ff,%eax
  105bbb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32_t* vpd = vmm_alloc(0);
  105bbe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  105bc5:	89 55 e0             	mov    %edx,-0x20(%ebp)
  105bc8:	e8 83 00 00 00       	call   105c50 <vmm_alloc>
  105bcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vmm_free(vpd);
  105bd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105bd3:	89 04 24             	mov    %eax,(%esp)
  105bd6:	e8 c5 00 00 00       	call   105ca0 <vmm_free>
  105bdb:	b8 00 00 00 00       	mov    $0x0,%eax

	map_address_active((uint32_t) vpd, pdir, 0);
  105be0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105be3:	8b 55 fc             	mov    -0x4(%ebp),%edx
  105be6:	89 0c 24             	mov    %ecx,(%esp)
  105be9:	89 54 24 04          	mov    %edx,0x4(%esp)
  105bed:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105bf4:	00 
  105bf5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  105bf8:	e8 23 01 00 00       	call   105d20 <map_address_active>
  105bfd:	b8 00 00 00 00       	mov    $0x0,%eax
	uint32_t table = vpd[pd_entry] & 0xFFFFF000;
  105c02:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105c05:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105c08:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105c0b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  105c11:	89 4d e8             	mov    %ecx,-0x18(%ebp)

	map_address_active((uint32_t) vpd, table, 0);
  105c14:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105c17:	8b 55 e8             	mov    -0x18(%ebp),%edx
  105c1a:	89 0c 24             	mov    %ecx,(%esp)
  105c1d:	89 54 24 04          	mov    %edx,0x4(%esp)
  105c21:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105c28:	00 
  105c29:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105c2c:	e8 ef 00 00 00       	call   105d20 <map_address_active>
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;
  105c31:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105c34:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105c37:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105c3a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105c3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	return addr & 0xFFFFF000;
  105c42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105c45:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105c4a:	83 c4 38             	add    $0x38,%esp
  105c4d:	5d                   	pop    %ebp
  105c4e:	c3                   	ret    
  105c4f:	90                   	nop

00105c50 <vmm_alloc>:

void* vmm_alloc_cont(uint32_t cont) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
}

void* vmm_alloc(uint32_t* retpaddr) {
  105c50:	55                   	push   %ebp
  105c51:	89 e5                	mov    %esp,%ebp
  105c53:	56                   	push   %esi
  105c54:	83 ec 24             	sub    $0x24,%esp
  105c57:	8b 45 08             	mov    0x8(%ebp),%eax
  105c5a:	b9 00 00 00 01       	mov    $0x1000000,%ecx
  105c5f:	ba 00 00 00 20       	mov    $0x20000000,%edx
  105c64:	be 01 00 00 00       	mov    $0x1,%esi
  105c69:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
  105c6c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105c6f:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
  105c76:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  105c7d:	20 
  105c7e:	89 44 24 08          	mov    %eax,0x8(%esp)
  105c82:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  105c89:	00 
  105c8a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105c8d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105c90:	89 55 ec             	mov    %edx,-0x14(%ebp)
  105c93:	e8 e8 01 00 00       	call   105e80 <vmm_alloc_in_range>
  105c98:	83 c4 24             	add    $0x24,%esp
  105c9b:	5e                   	pop    %esi
  105c9c:	5d                   	pop    %ebp
  105c9d:	c3                   	ret    
  105c9e:	66 90                	xchg   %ax,%ax

00105ca0 <vmm_free>:
			| PT_WRITE | (flags & 0xFFF)
			| (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
}

void vmm_free(void* p_vaddr) {
  105ca0:	55                   	push   %ebp
  105ca1:	89 e5                	mov    %esp,%ebp
  105ca3:	83 ec 18             	sub    $0x18,%esp
  105ca6:	8b 45 08             	mov    0x8(%ebp),%eax
  105ca9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint32_t vaddr = (uint32_t) p_vaddr;
  105cac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105caf:	89 45 f8             	mov    %eax,-0x8(%ebp)

	if ((active_pagetables[vaddr >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  105cb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105cb5:	c1 e8 0c             	shr    $0xc,%eax
  105cb8:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105cbe:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105cc1:	25 01 02 00 00       	and    $0x201,%eax
  105cc6:	3d 01 02 00 00       	cmp    $0x201,%eax
  105ccb:	0f 85 4a 00 00 00    	jne    105d1b <vmm_free+0x7b>
			== (PT_ALLOCATABLE | PT_PRESENT)) {
		pmm_free((void*) (active_pagetables[vaddr >> 12] & 0xFFFFF000));
  105cd1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105cd4:	c1 e8 0c             	shr    $0xc,%eax
  105cd7:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105cdd:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105ce0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105ce5:	89 04 24             	mov    %eax,(%esp)
  105ce8:	e8 43 c7 ff ff       	call   102430 <pmm_free>

		active_pagetables[vaddr >> 12] = PT_ALLOCATABLE
  105ced:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105cf0:	c1 e8 0c             	shr    $0xc,%eax
  105cf3:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105cf9:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105cfc:	25 04 00 00 00       	and    $0x4,%eax
  105d01:	0d 00 02 00 00       	or     $0x200,%eax
  105d06:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105d09:	c1 e9 0c             	shr    $0xc,%ecx
  105d0c:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  105d12:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
				| (active_pagetables[vaddr >> 12] & PT_PUBLIC);
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  105d15:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105d18:	0f 01 38             	invlpg (%eax)
	}
}
  105d1b:	83 c4 18             	add    $0x18,%esp
  105d1e:	5d                   	pop    %ebp
  105d1f:	c3                   	ret    

00105d20 <map_address_active>:
			& 0xFFFFF000) | PT_PRESENT | PT_WRITE | (flags & 0xFFF)
			| (((uint32_t*) (pagedir[pd_entry] & 0xFFFFF000))[pt_entry]
					& (PT_PUBLIC | PT_ALLOCATABLE));
}

void map_address_active(uint32_t vaddr, uint32_t paddr, uint32_t flags) {
  105d20:	55                   	push   %ebp
  105d21:	89 e5                	mov    %esp,%ebp
  105d23:	83 ec 0c             	sub    $0xc,%esp
  105d26:	8b 45 10             	mov    0x10(%ebp),%eax
  105d29:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  105d2c:	8b 55 08             	mov    0x8(%ebp),%edx
  105d2f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  105d32:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105d35:	89 45 f4             	mov    %eax,-0xc(%ebp)
	active_pagetables[vaddr >> 12] = (paddr & 0xFFFFF000) | PT_PRESENT
  105d38:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105d3b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105d40:	0d 01 00 00 00       	or     $0x1,%eax
  105d45:	0d 02 00 00 00       	or     $0x2,%eax
  105d4a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105d4d:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  105d53:	09 c8                	or     %ecx,%eax
  105d55:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105d58:	c1 e9 0c             	shr    $0xc,%ecx
  105d5b:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  105d61:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  105d64:	81 e1 04 02 00 00    	and    $0x204,%ecx
  105d6a:	09 c8                	or     %ecx,%eax
  105d6c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105d6f:	c1 e9 0c             	shr    $0xc,%ecx
  105d72:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  105d78:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
			| PT_WRITE | (flags & 0xFFF)
			| (active_pagetables[vaddr >> 12] & (PT_PUBLIC | PT_ALLOCATABLE));
	asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
  105d7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105d7e:	0f 01 38             	invlpg (%eax)
}
  105d81:	83 c4 0c             	add    $0xc,%esp
  105d84:	5d                   	pop    %ebp
  105d85:	c3                   	ret    
  105d86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  105d8d:	00 00 00 

00105d90 <vmm_map_range>:
	uint32_t addr = vpd[pt_entry] & 0xFFFFF000;

	return addr & 0xFFFFF000;
}

void vmm_map_range(void* vaddr, void* paddr, uint32_t length, uint32_t flags) {
  105d90:	55                   	push   %ebp
  105d91:	89 e5                	mov    %esp,%ebp
  105d93:	56                   	push   %esi
  105d94:	83 ec 24             	sub    $0x24,%esp
  105d97:	8b 45 14             	mov    0x14(%ebp),%eax
  105d9a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  105d9d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105da0:	8b 75 08             	mov    0x8(%ebp),%esi
  105da3:	89 75 f8             	mov    %esi,-0x8(%ebp)
  105da6:	89 55 f4             	mov    %edx,-0xc(%ebp)
  105da9:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105dac:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((uint32_t) vaddr & 0xFFF)
  105daf:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105db2:	25 ff 0f 00 00       	and    $0xfff,%eax
  105db7:	3d 00 00 00 00       	cmp    $0x0,%eax
  105dbc:	0f 84 05 00 00 00    	je     105dc7 <vmm_map_range+0x37>
		return;
  105dc2:	e9 5a 00 00 00       	jmp    105e21 <vmm_map_range+0x91>
	if ((uint32_t) paddr & 0xFFF)
  105dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105dca:	25 ff 0f 00 00       	and    $0xfff,%eax
  105dcf:	3d 00 00 00 00       	cmp    $0x0,%eax
  105dd4:	0f 84 05 00 00 00    	je     105ddf <vmm_map_range+0x4f>
		return;
  105dda:	e9 42 00 00 00       	jmp    105e21 <vmm_map_range+0x91>

	for (uint32_t i = 0; i < length; i += 0x1000) {
  105ddf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  105de6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105de9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  105dec:	0f 83 2f 00 00 00    	jae    105e21 <vmm_map_range+0x91>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
  105df2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105df5:	03 45 e8             	add    -0x18(%ebp),%eax
  105df8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105dfb:	03 4d e8             	add    -0x18(%ebp),%ecx
  105dfe:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105e01:	89 04 24             	mov    %eax,(%esp)
  105e04:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105e08:	89 54 24 08          	mov    %edx,0x8(%esp)
  105e0c:	e8 0f ff ff ff       	call   105d20 <map_address_active>
	if ((uint32_t) vaddr & 0xFFF)
		return;
	if ((uint32_t) paddr & 0xFFF)
		return;

	for (uint32_t i = 0; i < length; i += 0x1000) {
  105e11:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105e14:	05 00 10 00 00       	add    $0x1000,%eax
  105e19:	89 45 e8             	mov    %eax,-0x18(%ebp)
  105e1c:	e9 c5 ff ff ff       	jmp    105de6 <vmm_map_range+0x56>
		map_address_active((uint32_t) vaddr + i, (uint32_t) paddr + i, flags);
	}
}
  105e21:	83 c4 24             	add    $0x24,%esp
  105e24:	5e                   	pop    %esi
  105e25:	5d                   	pop    %ebp
  105e26:	c3                   	ret    
  105e27:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  105e2e:	00 00 

00105e30 <vmm_alloc_ucont>:
	}

	return vaddr;
}

void* vmm_alloc_ucont(uint32_t cont) {
  105e30:	55                   	push   %ebp
  105e31:	89 e5                	mov    %esp,%ebp
  105e33:	56                   	push   %esi
  105e34:	83 ec 24             	sub    $0x24,%esp
  105e37:	8b 45 08             	mov    0x8(%ebp),%eax
  105e3a:	b9 00 10 40 20       	mov    $0x20401000,%ecx
  105e3f:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
  105e44:	be 00 00 00 00       	mov    $0x0,%esi
  105e49:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, 0, cont);
  105e4c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e4f:	c7 04 24 00 10 40 20 	movl   $0x20401000,(%esp)
  105e56:	c7 44 24 04 00 f0 ff 	movl   $0xfffff000,0x4(%esp)
  105e5d:	ff 
  105e5e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105e65:	00 
  105e66:	89 44 24 0c          	mov    %eax,0xc(%esp)
  105e6a:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105e6d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105e70:	89 55 ec             	mov    %edx,-0x14(%ebp)
  105e73:	e8 08 00 00 00       	call   105e80 <vmm_alloc_in_range>
  105e78:	83 c4 24             	add    $0x24,%esp
  105e7b:	5e                   	pop    %esi
  105e7c:	5d                   	pop    %ebp
  105e7d:	c3                   	ret    
  105e7e:	66 90                	xchg   %ax,%ax

00105e80 <vmm_alloc_in_range>:
		asm volatile("invlpg %0" : : "m" (*(char*)vaddr));
	}
}

static void* vmm_alloc_in_range(uint32_t low, uint32_t high, uint32_t* retpaddr,
		uint32_t cont) {
  105e80:	55                   	push   %ebp
  105e81:	89 e5                	mov    %esp,%ebp
  105e83:	56                   	push   %esi
  105e84:	83 ec 34             	sub    $0x34,%esp
  105e87:	8b 45 14             	mov    0x14(%ebp),%eax
  105e8a:	8b 4d 10             	mov    0x10(%ebp),%ecx
  105e8d:	8b 55 0c             	mov    0xc(%ebp),%edx
  105e90:	8b 75 08             	mov    0x8(%ebp),%esi
  105e93:	89 75 f8             	mov    %esi,-0x8(%ebp)
  105e96:	89 55 f4             	mov    %edx,-0xc(%ebp)
  105e99:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  105e9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* vaddr = 0;
  105e9f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32_t i = 0;
  105ea6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32_t c = 0;
  105ead:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  105eb4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105eb7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105ebc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105ebf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105ec2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  105ec5:	0f 83 6f 00 00 00    	jae    105f3a <vmm_alloc_in_range+0xba>
		if ((active_pagetables[i >> 12] & (PT_ALLOCATABLE | PT_PRESENT))
  105ecb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105ece:	c1 e8 0c             	shr    $0xc,%eax
  105ed1:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  105ed7:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105eda:	25 01 02 00 00       	and    $0x201,%eax
  105edf:	3d 00 02 00 00       	cmp    $0x200,%eax
  105ee4:	0f 85 34 00 00 00    	jne    105f1e <vmm_alloc_in_range+0x9e>
				== PT_ALLOCATABLE) {
			if (c == 0)
  105eea:	81 7d e0 00 00 00 00 	cmpl   $0x0,-0x20(%ebp)
  105ef1:	0f 85 06 00 00 00    	jne    105efd <vmm_alloc_in_range+0x7d>
				vaddr = (void*) i;
  105ef7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105efa:	89 45 e8             	mov    %eax,-0x18(%ebp)
			c++;
  105efd:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105f00:	05 01 00 00 00       	add    $0x1,%eax
  105f05:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (c >= cont)
  105f08:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105f0b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  105f0e:	0f 82 05 00 00 00    	jb     105f19 <vmm_alloc_in_range+0x99>
				break;
  105f14:	e9 21 00 00 00       	jmp    105f3a <vmm_alloc_in_range+0xba>
		} else {
  105f19:	e9 07 00 00 00       	jmp    105f25 <vmm_alloc_in_range+0xa5>
			c = 0;
  105f1e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
	}
  105f25:	e9 00 00 00 00       	jmp    105f2a <vmm_alloc_in_range+0xaa>
		uint32_t cont) {
	void* vaddr = 0;
	uint32_t i = 0;
	uint32_t c = 0;

	for (i = (low & 0xFFFFF000); i < high; i += 0x1000) {
  105f2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105f2d:	05 00 10 00 00       	add    $0x1000,%eax
  105f32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105f35:	e9 85 ff ff ff       	jmp    105ebf <vmm_alloc_in_range+0x3f>
		} else {
			c = 0;
		}
	}

	uint32_t off = 0;
  105f3a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	while (c--) {
  105f41:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105f44:	89 c1                	mov    %eax,%ecx
  105f46:	81 c1 ff ff ff ff    	add    $0xffffffff,%ecx
  105f4c:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  105f4f:	3d 00 00 00 00       	cmp    $0x0,%eax
  105f54:	0f 84 59 00 00 00    	je     105fb3 <vmm_alloc_in_range+0x133>
		vmm_alloc_addr(vaddr + off * 0x1000, off == 0 ? retpaddr : 0);
  105f5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105f5d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105f60:	c1 e1 0c             	shl    $0xc,%ecx
  105f63:	01 c8                	add    %ecx,%eax
  105f65:	81 7d dc 00 00 00 00 	cmpl   $0x0,-0x24(%ebp)
  105f6c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105f6f:	0f 85 0b 00 00 00    	jne    105f80 <vmm_alloc_in_range+0x100>
  105f75:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105f78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  105f7b:	e9 0d 00 00 00       	jmp    105f8d <vmm_alloc_in_range+0x10d>
  105f80:	b8 00 00 00 00       	mov    $0x0,%eax
  105f85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  105f88:	e9 00 00 00 00       	jmp    105f8d <vmm_alloc_in_range+0x10d>
  105f8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105f90:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105f93:	89 0c 24             	mov    %ecx,(%esp)
  105f96:	89 44 24 04          	mov    %eax,0x4(%esp)
  105f9a:	e8 71 00 00 00       	call   106010 <vmm_alloc_addr>
		off++;
  105f9f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105fa2:	81 c1 01 00 00 00    	add    $0x1,%ecx
  105fa8:	89 4d dc             	mov    %ecx,-0x24(%ebp)
	}
  105fab:	89 45 d0             	mov    %eax,-0x30(%ebp)
  105fae:	e9 8e ff ff ff       	jmp    105f41 <vmm_alloc_in_range+0xc1>

	return vaddr;
  105fb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105fb6:	83 c4 34             	add    $0x34,%esp
  105fb9:	5e                   	pop    %esi
  105fba:	5d                   	pop    %ebp
  105fbb:	c3                   	ret    
  105fbc:	0f 1f 40 00          	nopl   0x0(%eax)

00105fc0 <vmm_alloc_cont>:

void* vmm_alloc_user(uint32_t* retpaddr) {
	return vmm_alloc_in_range(PROGRAM_BOTTOM, 0xFFFFF000, retpaddr, 1);
}

void* vmm_alloc_cont(uint32_t cont) {
  105fc0:	55                   	push   %ebp
  105fc1:	89 e5                	mov    %esp,%ebp
  105fc3:	56                   	push   %esi
  105fc4:	83 ec 24             	sub    $0x24,%esp
  105fc7:	8b 45 08             	mov    0x8(%ebp),%eax
  105fca:	b9 00 00 00 01       	mov    $0x1000000,%ecx
  105fcf:	ba 00 00 00 20       	mov    $0x20000000,%edx
  105fd4:	be 00 00 00 00       	mov    $0x0,%esi
  105fd9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, 0, cont);
  105fdc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105fdf:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
  105fe6:	c7 44 24 04 00 00 00 	movl   $0x20000000,0x4(%esp)
  105fed:	20 
  105fee:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  105ff5:	00 
  105ff6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  105ffa:	89 75 f4             	mov    %esi,-0xc(%ebp)
  105ffd:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  106000:	89 55 ec             	mov    %edx,-0x14(%ebp)
  106003:	e8 78 fe ff ff       	call   105e80 <vmm_alloc_in_range>
  106008:	83 c4 24             	add    $0x24,%esp
  10600b:	5e                   	pop    %esi
  10600c:	5d                   	pop    %ebp
  10600d:	c3                   	ret    
  10600e:	66 90                	xchg   %ax,%ax

00106010 <vmm_alloc_addr>:

void* vmm_alloc(uint32_t* retpaddr) {
	return vmm_alloc_in_range(ALLOCATABLE_BOTTOM, USERSPACE_BOTTOM, retpaddr, 1);
}

void* vmm_alloc_addr(void* reqvaddr, uint32_t* retpaddr) {
  106010:	55                   	push   %ebp
  106011:	89 e5                	mov    %esp,%ebp
  106013:	56                   	push   %esi
  106014:	83 ec 34             	sub    $0x34,%esp
  106017:	8b 45 0c             	mov    0xc(%ebp),%eax
  10601a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10601d:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  106020:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (reqvaddr == 0) {
  106023:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
  10602a:	0f 85 34 00 00 00    	jne    106064 <vmm_alloc_addr+0x54>
  106030:	8d 05 13 86 10 00    	lea    0x108613,%eax
  106036:	b9 00 00 00 00       	mov    $0x0,%ecx
		kprintf(
  10603b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10603e:	89 04 24             	mov    %eax,(%esp)
  106041:	89 54 24 04          	mov    %edx,0x4(%esp)
  106045:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10604c:	00 
  10604d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  106050:	e8 fb a4 ff ff       	call   100550 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, 0);
		return 0;
  106055:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10605c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10605f:	e9 9b 00 00 00       	jmp    1060ff <vmm_alloc_addr+0xef>
	}

	if ((active_pagetables[(uint32_t) reqvaddr >> 12]
  106064:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106067:	c1 e8 0c             	shr    $0xc,%eax
  10606a:	8b 0d e4 71 10 00    	mov    0x1071e4,%ecx
  106070:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106073:	25 01 02 00 00       	and    $0x201,%eax
  106078:	3d 00 02 00 00       	cmp    $0x200,%eax
  10607d:	0f 84 37 00 00 00    	je     1060ba <vmm_alloc_addr+0xaa>
  106083:	8d 05 13 86 10 00    	lea    0x108613,%eax
			& (PT_ALLOCATABLE | PT_PRESENT)) != PT_ALLOCATABLE) {
		kprintf(
  106089:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10608c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10608f:	c1 ea 0c             	shr    $0xc,%edx
  106092:	8b 35 e4 71 10 00    	mov    0x1071e4,%esi
  106098:	8b 14 96             	mov    (%esi,%edx,4),%edx
  10609b:	89 04 24             	mov    %eax,(%esp)
  10609e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1060a2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1060a6:	e8 a5 a4 ff ff       	call   100550 <kprintf>
				"Denied vmm_alloc_addr at %x (Flags: %x) ... this is a potential mm-fault \n",
				reqvaddr, active_pagetables[(uint32_t) reqvaddr >> 12]);
		return 0;
  1060ab:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  1060b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1060b5:	e9 45 00 00 00       	jmp    1060ff <vmm_alloc_addr+0xef>
  1060ba:	b8 04 02 00 00       	mov    $0x204,%eax
	}

	uint32_t paddr = (uint32_t) pmm_alloc();
  1060bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1060c2:	e8 49 c1 ff ff       	call   102210 <pmm_alloc>
  1060c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	map_address_active((uint32_t) reqvaddr, paddr, PT_PUBLIC | PT_ALLOCATABLE);
  1060ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1060cd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1060d0:	89 04 24             	mov    %eax,(%esp)
  1060d3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1060d7:	c7 44 24 08 04 02 00 	movl   $0x204,0x8(%esp)
  1060de:	00 
  1060df:	e8 3c fc ff ff       	call   105d20 <map_address_active>

	if (retpaddr != 0)
  1060e4:	81 7d f0 00 00 00 00 	cmpl   $0x0,-0x10(%ebp)
  1060eb:	0f 84 08 00 00 00    	je     1060f9 <vmm_alloc_addr+0xe9>
		*retpaddr = paddr;
  1060f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1060f4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1060f7:	89 01                	mov    %eax,(%ecx)

	return reqvaddr;
  1060f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1060fc:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  1060ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106102:	83 c4 34             	add    $0x34,%esp
  106105:	5e                   	pop    %esi
  106106:	5d                   	pop    %ebp
  106107:	c3                   	ret    
  106108:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10610f:	00 

00106110 <vmm_activate_pagedir>:

void vmm_activate_pagedir(uint32_t pdpaddr) {
  106110:	55                   	push   %ebp
  106111:	89 e5                	mov    %esp,%ebp
  106113:	50                   	push   %eax
  106114:	8b 45 08             	mov    0x8(%ebp),%eax
  106117:	89 45 fc             	mov    %eax,-0x4(%ebp)
	active_pagedir = pdpaddr;
  10611a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10611d:	a3 5c a4 10 00       	mov    %eax,0x10a45c
	asm volatile("mov %0, %%cr3" : : "r" (pdpaddr));
  106122:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106125:	0f 22 d8             	mov    %eax,%cr3
}
  106128:	83 c4 04             	add    $0x4,%esp
  10612b:	5d                   	pop    %ebp
  10612c:	c3                   	ret    
  10612d:	0f 1f 00             	nopl   (%eax)

00106130 <vmm_init>:

uint32_t vmm_init(void) {
  106130:	55                   	push   %ebp
  106131:	89 e5                	mov    %esp,%ebp
	//CREATE CONTEXT ************************************************************

	struct vmm_context* context = pmm_alloc();
  106133:	53                   	push   %ebx
  106134:	57                   	push   %edi
  106135:	56                   	push   %esi
  106136:	83 ec 3c             	sub    $0x3c,%esp
  106139:	e8 d2 c0 ff ff       	call   102210 <pmm_alloc>
  10613e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t i, i2;

	context->pagedir = pmm_alloc();
  106141:	e8 ca c0 ff ff       	call   102210 <pmm_alloc>
  106146:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106149:	89 01                	mov    %eax,(%ecx)

	for (i = 0; i < 1024; i++) {
  10614b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  106152:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  106159:	0f 83 d6 00 00 00    	jae    106235 <vmm_init+0x105>
		context->pagedir[i] = ((uint32_t) pmm_alloc());
  10615f:	e8 ac c0 ff ff       	call   102210 <pmm_alloc>
  106164:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106167:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10616a:	8b 12                	mov    (%edx),%edx
  10616c:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
		if (i < PMEM_TABLES) {
  10616f:	81 7d ec 80 00 00 00 	cmpl   $0x80,-0x14(%ebp)
  106176:	0f 83 15 00 00 00    	jae    106191 <vmm_init+0x61>
			kernel_pagetables[i] = context->pagedir[i];
  10617c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10617f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106182:	8b 09                	mov    (%ecx),%ecx
  106184:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  106187:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10618a:	89 04 8d 90 a4 18 00 	mov    %eax,0x18a490(,%ecx,4)
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;
  106191:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106194:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106197:	8b 09                	mov    (%ecx),%ecx
  106199:	8b 14 81             	mov    (%ecx,%eax,4),%edx
  10619c:	81 ca 07 00 00 00    	or     $0x7,%edx
  1061a2:	89 14 81             	mov    %edx,(%ecx,%eax,4)

		for (i2 = 0; i2 < 1024; i2++) {
  1061a5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1061ac:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%ebp)
  1061b3:	0f 83 67 00 00 00    	jae    106220 <vmm_init+0xf0>
  1061b9:	b8 04 00 00 00       	mov    $0x4,%eax
  1061be:	b9 00 00 00 00       	mov    $0x0,%ecx
  1061c3:	ba 00 02 00 00       	mov    $0x200,%edx
			uint32_t vaddr = (i << 22) + (i2 << 12);
  1061c8:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1061cb:	c1 e6 16             	shl    $0x16,%esi
  1061ce:	8b 7d e8             	mov    -0x18(%ebp),%edi
  1061d1:	c1 e7 0c             	shl    $0xc,%edi
  1061d4:	01 fe                	add    %edi,%esi
  1061d6:	89 75 e4             	mov    %esi,-0x1c(%ebp)

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
  1061d9:	81 7d e4 00 00 00 01 	cmpl   $0x1000000,-0x1c(%ebp)
  1061e0:	0f 97 c3             	seta   %bl
  1061e3:	84 db                	test   %bl,%bl
  1061e5:	0f 44 d1             	cmove  %ecx,%edx
  1061e8:	81 7d e4 00 10 40 20 	cmpl   $0x20401000,-0x1c(%ebp)
  1061ef:	0f 97 c3             	seta   %bl
  1061f2:	84 db                	test   %bl,%bl
  1061f4:	0f 44 c1             	cmove  %ecx,%eax
  1061f7:	09 c2                	or     %eax,%edx
  1061f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1061fc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1061ff:	8b 75 f0             	mov    -0x10(%ebp),%esi
  106202:	8b 36                	mov    (%esi),%esi
  106204:	8b 0c 8e             	mov    (%esi,%ecx,4),%ecx
  106207:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10620d:	89 14 81             	mov    %edx,(%ecx,%eax,4)
			kernel_pagetables[i] = context->pagedir[i];
		}

		context->pagedir[i] |= PD_PRESENT | PD_WRITE | PD_PUBLIC;

		for (i2 = 0; i2 < 1024; i2++) {
  106210:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106213:	05 01 00 00 00       	add    $0x1,%eax
  106218:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10621b:	e9 8c ff ff ff       	jmp    1061ac <vmm_init+0x7c>

			((uint32_t*) (context->pagedir[i] & 0xFFFFF000))[i2] = (
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}
  106220:	e9 00 00 00 00       	jmp    106225 <vmm_init+0xf5>
	struct vmm_context* context = pmm_alloc();
	uint32_t i, i2;

	context->pagedir = pmm_alloc();

	for (i = 0; i < 1024; i++) {
  106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106228:	05 01 00 00 00       	add    $0x1,%eax
  10622d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106230:	e9 1d ff ff ff       	jmp    106152 <vmm_init+0x22>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  106235:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10623c:	81 7d ec 00 04 00 00 	cmpl   $0x400,-0x14(%ebp)
  106243:	0f 83 5a 00 00 00    	jae    1062a3 <vmm_init+0x173>
  106249:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
  10624e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106251:	8b 55 f0             	mov    -0x10(%ebp),%edx
  106254:	8b 12                	mov    (%edx),%edx
  106256:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  106259:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  10625f:	89 4d e0             	mov    %ecx,-0x20(%ebp)
		map_address_context(context->pagedir,
  106262:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106265:	8b 09                	mov    (%ecx),%ecx
  106267:	8b 15 e4 71 10 00    	mov    0x1071e4,%edx
  10626d:	8b 75 ec             	mov    -0x14(%ebp),%esi
  106270:	c1 e6 0c             	shl    $0xc,%esi
  106273:	01 f2                	add    %esi,%edx
  106275:	8b 75 e0             	mov    -0x20(%ebp),%esi
  106278:	89 0c 24             	mov    %ecx,(%esp)
  10627b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10627f:	89 74 24 08          	mov    %esi,0x8(%esp)
  106283:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10628a:	00 
  10628b:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10628e:	e8 3d f7 ff ff       	call   1059d0 <map_address_context>
					(vaddr > ALLOCATABLE_BOTTOM) ? PT_ALLOCATABLE : 0)
					| ((vaddr > PROGRAM_BOTTOM) ? PT_PUBLIC : 0);
		}
	}

	for (i = 0; i < 1024; i++) {
  106293:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106296:	05 01 00 00 00       	add    $0x1,%eax
  10629b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10629e:	e9 99 ff ff ff       	jmp    10623c <vmm_init+0x10c>
  1062a3:	b8 00 00 00 00       	mov    $0x0,%eax
		uint32_t paddr = context->pagedir[i] & 0xFFFFF000;
		map_address_context(context->pagedir,
				(uint32_t) active_pagetables + i * 0x1000, paddr, 0);
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
  1062a8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1062ab:	8b 09                	mov    (%ecx),%ecx
  1062ad:	8b 15 e8 71 10 00    	mov    0x1071e8,%edx
  1062b3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1062b6:	89 0c 24             	mov    %ecx,(%esp)
  1062b9:	89 54 24 04          	mov    %edx,0x4(%esp)
  1062bd:	89 74 24 08          	mov    %esi,0x8(%esp)
  1062c1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1062c8:	00 
  1062c9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1062cc:	e8 ff f6 ff ff       	call   1059d0 <map_address_context>
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  1062d1:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
  1062d8:	8d 05 00 b0 18 00    	lea    0x18b000,%eax
  1062de:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  1062e1:	0f 83 3b 00 00 00    	jae    106322 <vmm_init+0x1f2>
  1062e7:	b8 00 00 00 00       	mov    $0x0,%eax
		map_address_context(context->pagedir, i, i, 0);
  1062ec:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1062ef:	8b 09                	mov    (%ecx),%ecx
  1062f1:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1062f4:	8b 75 ec             	mov    -0x14(%ebp),%esi
  1062f7:	89 0c 24             	mov    %ecx,(%esp)
  1062fa:	89 54 24 04          	mov    %edx,0x4(%esp)
  1062fe:	89 74 24 08          	mov    %esi,0x8(%esp)
  106302:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  106309:	00 
  10630a:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10630d:	e8 be f6 ff ff       	call   1059d0 <map_address_context>
	}

	map_address_context(context->pagedir, (uint32_t) active_context,
			(uint32_t) context, 0);

	for (i = 0x1000; i < (uint32_t) &kernel_end; i += 0x1000) {
  106312:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106315:	05 00 10 00 00       	add    $0x1000,%eax
  10631a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10631d:	e9 b6 ff ff ff       	jmp    1062d8 <vmm_init+0x1a8>
		map_address_context(context->pagedir, i, i, 0);
	}

	//END CREATE CONTEXT ********************************************************

	vmm_activate_pagedir((uint32_t) context->pagedir);
  106322:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106325:	8b 00                	mov    (%eax),%eax
  106327:	89 04 24             	mov    %eax,(%esp)
  10632a:	e8 e1 fd ff ff       	call   106110 <vmm_activate_pagedir>

	uint32_t cr0;

	asm volatile("mov %%cr0, %0" : "=r" (cr0));
  10632f:	0f 20 c0             	mov    %cr0,%eax
  106332:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= (1 << 31);
  106335:	8b 45 dc             	mov    -0x24(%ebp),%eax
  106338:	0d 00 00 00 80       	or     $0x80000000,%eax
  10633d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	asm volatile("mov %0, %%cr0" : : "r" (cr0));
  106340:	8b 45 dc             	mov    -0x24(%ebp),%eax
  106343:	0f 22 c0             	mov    %eax,%cr0

	return (uint32_t) active_context->pagedir;
  106346:	a1 e8 71 10 00       	mov    0x1071e8,%eax
  10634b:	8b 00                	mov    (%eax),%eax
  10634d:	83 c4 3c             	add    $0x3c,%esp
  106350:	5e                   	pop    %esi
  106351:	5f                   	pop    %edi
  106352:	5b                   	pop    %ebx
  106353:	5d                   	pop    %ebp
  106354:	c3                   	ret    
  106355:	66 90                	xchg   %ax,%ax
  106357:	90                   	nop

00106358 <_start>:
  106358:	bc 60 a4 11 00       	mov    $0x11a460,%esp
  10635d:	53                   	push   %ebx
  10635e:	e8 ad 9c ff ff       	call   100010 <init>

00106363 <_stop>:
  106363:	fa                   	cli    
  106364:	f4                   	hlt    
  106365:	eb fc                	jmp    106363 <_stop>
